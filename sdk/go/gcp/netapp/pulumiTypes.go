// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type VolumeBackupConfig struct {
	// Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
	BackupPolicies []string `pulumi:"backupPolicies"`
	// ID of the backup vault to use. A backup vault is reqired to create manual or scheduled backups.
	// Format: `projects/{{projectId}}/locations/{{location}}/backupVaults/{{backupVaultName}}`
	BackupVault *string `pulumi:"backupVault"`
	// When set to true, scheduled backup is enabled on the volume. Omit if no backupPolicy is specified.
	ScheduledBackupEnabled *bool `pulumi:"scheduledBackupEnabled"`
}

// VolumeBackupConfigInput is an input type that accepts VolumeBackupConfigArgs and VolumeBackupConfigOutput values.
// You can construct a concrete instance of `VolumeBackupConfigInput` via:
//
//	VolumeBackupConfigArgs{...}
type VolumeBackupConfigInput interface {
	pulumi.Input

	ToVolumeBackupConfigOutput() VolumeBackupConfigOutput
	ToVolumeBackupConfigOutputWithContext(context.Context) VolumeBackupConfigOutput
}

type VolumeBackupConfigArgs struct {
	// Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
	BackupPolicies pulumi.StringArrayInput `pulumi:"backupPolicies"`
	// ID of the backup vault to use. A backup vault is reqired to create manual or scheduled backups.
	// Format: `projects/{{projectId}}/locations/{{location}}/backupVaults/{{backupVaultName}}`
	BackupVault pulumi.StringPtrInput `pulumi:"backupVault"`
	// When set to true, scheduled backup is enabled on the volume. Omit if no backupPolicy is specified.
	ScheduledBackupEnabled pulumi.BoolPtrInput `pulumi:"scheduledBackupEnabled"`
}

func (VolumeBackupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupConfig)(nil)).Elem()
}

func (i VolumeBackupConfigArgs) ToVolumeBackupConfigOutput() VolumeBackupConfigOutput {
	return i.ToVolumeBackupConfigOutputWithContext(context.Background())
}

func (i VolumeBackupConfigArgs) ToVolumeBackupConfigOutputWithContext(ctx context.Context) VolumeBackupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupConfigOutput)
}

func (i VolumeBackupConfigArgs) ToVolumeBackupConfigPtrOutput() VolumeBackupConfigPtrOutput {
	return i.ToVolumeBackupConfigPtrOutputWithContext(context.Background())
}

func (i VolumeBackupConfigArgs) ToVolumeBackupConfigPtrOutputWithContext(ctx context.Context) VolumeBackupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupConfigOutput).ToVolumeBackupConfigPtrOutputWithContext(ctx)
}

// VolumeBackupConfigPtrInput is an input type that accepts VolumeBackupConfigArgs, VolumeBackupConfigPtr and VolumeBackupConfigPtrOutput values.
// You can construct a concrete instance of `VolumeBackupConfigPtrInput` via:
//
//	        VolumeBackupConfigArgs{...}
//
//	or:
//
//	        nil
type VolumeBackupConfigPtrInput interface {
	pulumi.Input

	ToVolumeBackupConfigPtrOutput() VolumeBackupConfigPtrOutput
	ToVolumeBackupConfigPtrOutputWithContext(context.Context) VolumeBackupConfigPtrOutput
}

type volumeBackupConfigPtrType VolumeBackupConfigArgs

func VolumeBackupConfigPtr(v *VolumeBackupConfigArgs) VolumeBackupConfigPtrInput {
	return (*volumeBackupConfigPtrType)(v)
}

func (*volumeBackupConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupConfig)(nil)).Elem()
}

func (i *volumeBackupConfigPtrType) ToVolumeBackupConfigPtrOutput() VolumeBackupConfigPtrOutput {
	return i.ToVolumeBackupConfigPtrOutputWithContext(context.Background())
}

func (i *volumeBackupConfigPtrType) ToVolumeBackupConfigPtrOutputWithContext(ctx context.Context) VolumeBackupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupConfigPtrOutput)
}

type VolumeBackupConfigOutput struct{ *pulumi.OutputState }

func (VolumeBackupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupConfig)(nil)).Elem()
}

func (o VolumeBackupConfigOutput) ToVolumeBackupConfigOutput() VolumeBackupConfigOutput {
	return o
}

func (o VolumeBackupConfigOutput) ToVolumeBackupConfigOutputWithContext(ctx context.Context) VolumeBackupConfigOutput {
	return o
}

func (o VolumeBackupConfigOutput) ToVolumeBackupConfigPtrOutput() VolumeBackupConfigPtrOutput {
	return o.ToVolumeBackupConfigPtrOutputWithContext(context.Background())
}

func (o VolumeBackupConfigOutput) ToVolumeBackupConfigPtrOutputWithContext(ctx context.Context) VolumeBackupConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeBackupConfig) *VolumeBackupConfig {
		return &v
	}).(VolumeBackupConfigPtrOutput)
}

// Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
func (o VolumeBackupConfigOutput) BackupPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeBackupConfig) []string { return v.BackupPolicies }).(pulumi.StringArrayOutput)
}

// ID of the backup vault to use. A backup vault is reqired to create manual or scheduled backups.
// Format: `projects/{{projectId}}/locations/{{location}}/backupVaults/{{backupVaultName}}`
func (o VolumeBackupConfigOutput) BackupVault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupConfig) *string { return v.BackupVault }).(pulumi.StringPtrOutput)
}

// When set to true, scheduled backup is enabled on the volume. Omit if no backupPolicy is specified.
func (o VolumeBackupConfigOutput) ScheduledBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupConfig) *bool { return v.ScheduledBackupEnabled }).(pulumi.BoolPtrOutput)
}

type VolumeBackupConfigPtrOutput struct{ *pulumi.OutputState }

func (VolumeBackupConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupConfig)(nil)).Elem()
}

func (o VolumeBackupConfigPtrOutput) ToVolumeBackupConfigPtrOutput() VolumeBackupConfigPtrOutput {
	return o
}

func (o VolumeBackupConfigPtrOutput) ToVolumeBackupConfigPtrOutputWithContext(ctx context.Context) VolumeBackupConfigPtrOutput {
	return o
}

func (o VolumeBackupConfigPtrOutput) Elem() VolumeBackupConfigOutput {
	return o.ApplyT(func(v *VolumeBackupConfig) VolumeBackupConfig {
		if v != nil {
			return *v
		}
		var ret VolumeBackupConfig
		return ret
	}).(VolumeBackupConfigOutput)
}

// Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
func (o VolumeBackupConfigPtrOutput) BackupPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeBackupConfig) []string {
		if v == nil {
			return nil
		}
		return v.BackupPolicies
	}).(pulumi.StringArrayOutput)
}

// ID of the backup vault to use. A backup vault is reqired to create manual or scheduled backups.
// Format: `projects/{{projectId}}/locations/{{location}}/backupVaults/{{backupVaultName}}`
func (o VolumeBackupConfigPtrOutput) BackupVault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupConfig) *string {
		if v == nil {
			return nil
		}
		return v.BackupVault
	}).(pulumi.StringPtrOutput)
}

// When set to true, scheduled backup is enabled on the volume. Omit if no backupPolicy is specified.
func (o VolumeBackupConfigPtrOutput) ScheduledBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ScheduledBackupEnabled
	}).(pulumi.BoolPtrOutput)
}

type VolumeExportPolicy struct {
	// Export rules (up to 5) control NFS volume access.
	// Structure is documented below.
	Rules []VolumeExportPolicyRule `pulumi:"rules"`
}

// VolumeExportPolicyInput is an input type that accepts VolumeExportPolicyArgs and VolumeExportPolicyOutput values.
// You can construct a concrete instance of `VolumeExportPolicyInput` via:
//
//	VolumeExportPolicyArgs{...}
type VolumeExportPolicyInput interface {
	pulumi.Input

	ToVolumeExportPolicyOutput() VolumeExportPolicyOutput
	ToVolumeExportPolicyOutputWithContext(context.Context) VolumeExportPolicyOutput
}

type VolumeExportPolicyArgs struct {
	// Export rules (up to 5) control NFS volume access.
	// Structure is documented below.
	Rules VolumeExportPolicyRuleArrayInput `pulumi:"rules"`
}

func (VolumeExportPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeExportPolicy)(nil)).Elem()
}

func (i VolumeExportPolicyArgs) ToVolumeExportPolicyOutput() VolumeExportPolicyOutput {
	return i.ToVolumeExportPolicyOutputWithContext(context.Background())
}

func (i VolumeExportPolicyArgs) ToVolumeExportPolicyOutputWithContext(ctx context.Context) VolumeExportPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExportPolicyOutput)
}

func (i VolumeExportPolicyArgs) ToVolumeExportPolicyPtrOutput() VolumeExportPolicyPtrOutput {
	return i.ToVolumeExportPolicyPtrOutputWithContext(context.Background())
}

func (i VolumeExportPolicyArgs) ToVolumeExportPolicyPtrOutputWithContext(ctx context.Context) VolumeExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExportPolicyOutput).ToVolumeExportPolicyPtrOutputWithContext(ctx)
}

// VolumeExportPolicyPtrInput is an input type that accepts VolumeExportPolicyArgs, VolumeExportPolicyPtr and VolumeExportPolicyPtrOutput values.
// You can construct a concrete instance of `VolumeExportPolicyPtrInput` via:
//
//	        VolumeExportPolicyArgs{...}
//
//	or:
//
//	        nil
type VolumeExportPolicyPtrInput interface {
	pulumi.Input

	ToVolumeExportPolicyPtrOutput() VolumeExportPolicyPtrOutput
	ToVolumeExportPolicyPtrOutputWithContext(context.Context) VolumeExportPolicyPtrOutput
}

type volumeExportPolicyPtrType VolumeExportPolicyArgs

func VolumeExportPolicyPtr(v *VolumeExportPolicyArgs) VolumeExportPolicyPtrInput {
	return (*volumeExportPolicyPtrType)(v)
}

func (*volumeExportPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeExportPolicy)(nil)).Elem()
}

func (i *volumeExportPolicyPtrType) ToVolumeExportPolicyPtrOutput() VolumeExportPolicyPtrOutput {
	return i.ToVolumeExportPolicyPtrOutputWithContext(context.Background())
}

func (i *volumeExportPolicyPtrType) ToVolumeExportPolicyPtrOutputWithContext(ctx context.Context) VolumeExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExportPolicyPtrOutput)
}

type VolumeExportPolicyOutput struct{ *pulumi.OutputState }

func (VolumeExportPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeExportPolicy)(nil)).Elem()
}

func (o VolumeExportPolicyOutput) ToVolumeExportPolicyOutput() VolumeExportPolicyOutput {
	return o
}

func (o VolumeExportPolicyOutput) ToVolumeExportPolicyOutputWithContext(ctx context.Context) VolumeExportPolicyOutput {
	return o
}

func (o VolumeExportPolicyOutput) ToVolumeExportPolicyPtrOutput() VolumeExportPolicyPtrOutput {
	return o.ToVolumeExportPolicyPtrOutputWithContext(context.Background())
}

func (o VolumeExportPolicyOutput) ToVolumeExportPolicyPtrOutputWithContext(ctx context.Context) VolumeExportPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeExportPolicy) *VolumeExportPolicy {
		return &v
	}).(VolumeExportPolicyPtrOutput)
}

// Export rules (up to 5) control NFS volume access.
// Structure is documented below.
func (o VolumeExportPolicyOutput) Rules() VolumeExportPolicyRuleArrayOutput {
	return o.ApplyT(func(v VolumeExportPolicy) []VolumeExportPolicyRule { return v.Rules }).(VolumeExportPolicyRuleArrayOutput)
}

type VolumeExportPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumeExportPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeExportPolicy)(nil)).Elem()
}

func (o VolumeExportPolicyPtrOutput) ToVolumeExportPolicyPtrOutput() VolumeExportPolicyPtrOutput {
	return o
}

func (o VolumeExportPolicyPtrOutput) ToVolumeExportPolicyPtrOutputWithContext(ctx context.Context) VolumeExportPolicyPtrOutput {
	return o
}

func (o VolumeExportPolicyPtrOutput) Elem() VolumeExportPolicyOutput {
	return o.ApplyT(func(v *VolumeExportPolicy) VolumeExportPolicy {
		if v != nil {
			return *v
		}
		var ret VolumeExportPolicy
		return ret
	}).(VolumeExportPolicyOutput)
}

// Export rules (up to 5) control NFS volume access.
// Structure is documented below.
func (o VolumeExportPolicyPtrOutput) Rules() VolumeExportPolicyRuleArrayOutput {
	return o.ApplyT(func(v *VolumeExportPolicy) []VolumeExportPolicyRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(VolumeExportPolicyRuleArrayOutput)
}

type VolumeExportPolicyRule struct {
	// Defines the access type for clients matching the `allowedClients` specification.
	// Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
	AccessType *string `pulumi:"accessType"`
	// Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
	AllowedClients *string `pulumi:"allowedClients"`
	// If enabled, the root user (UID = 0) of the specified clients doesn't get mapped to nobody (UID = 65534). This is also known as no_root_squash.
	HasRootAccess *string `pulumi:"hasRootAccess"`
	// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'authentication' kerberos security mode.
	Kerberos5ReadOnly *bool `pulumi:"kerberos5ReadOnly"`
	// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'authentication' kerberos security mode. The 'kerberos5ReadOnly' value is ignored if this is enabled.
	Kerberos5ReadWrite *bool `pulumi:"kerberos5ReadWrite"`
	// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'integrity' kerberos security mode.
	Kerberos5iReadOnly *bool `pulumi:"kerberos5iReadOnly"`
	// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'integrity' kerberos security mode. The 'kerberos5iReadOnly' value is ignored if this is enabled.
	Kerberos5iReadWrite *bool `pulumi:"kerberos5iReadWrite"`
	// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'privacy' kerberos security mode.
	Kerberos5pReadOnly *bool `pulumi:"kerberos5pReadOnly"`
	// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'privacy' kerberos security mode. The 'kerberos5pReadOnly' value is ignored if this is enabled.
	Kerberos5pReadWrite *bool `pulumi:"kerberos5pReadWrite"`
	// Enable to apply the export rule to NFSV3 clients.
	Nfsv3 *bool `pulumi:"nfsv3"`
	// Enable to apply the export rule to NFSV4.1 clients.
	Nfsv4 *bool `pulumi:"nfsv4"`
}

// VolumeExportPolicyRuleInput is an input type that accepts VolumeExportPolicyRuleArgs and VolumeExportPolicyRuleOutput values.
// You can construct a concrete instance of `VolumeExportPolicyRuleInput` via:
//
//	VolumeExportPolicyRuleArgs{...}
type VolumeExportPolicyRuleInput interface {
	pulumi.Input

	ToVolumeExportPolicyRuleOutput() VolumeExportPolicyRuleOutput
	ToVolumeExportPolicyRuleOutputWithContext(context.Context) VolumeExportPolicyRuleOutput
}

type VolumeExportPolicyRuleArgs struct {
	// Defines the access type for clients matching the `allowedClients` specification.
	// Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
	AccessType pulumi.StringPtrInput `pulumi:"accessType"`
	// Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
	AllowedClients pulumi.StringPtrInput `pulumi:"allowedClients"`
	// If enabled, the root user (UID = 0) of the specified clients doesn't get mapped to nobody (UID = 65534). This is also known as no_root_squash.
	HasRootAccess pulumi.StringPtrInput `pulumi:"hasRootAccess"`
	// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'authentication' kerberos security mode.
	Kerberos5ReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5ReadOnly"`
	// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'authentication' kerberos security mode. The 'kerberos5ReadOnly' value is ignored if this is enabled.
	Kerberos5ReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5ReadWrite"`
	// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'integrity' kerberos security mode.
	Kerberos5iReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5iReadOnly"`
	// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'integrity' kerberos security mode. The 'kerberos5iReadOnly' value is ignored if this is enabled.
	Kerberos5iReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5iReadWrite"`
	// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'privacy' kerberos security mode.
	Kerberos5pReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5pReadOnly"`
	// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'privacy' kerberos security mode. The 'kerberos5pReadOnly' value is ignored if this is enabled.
	Kerberos5pReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5pReadWrite"`
	// Enable to apply the export rule to NFSV3 clients.
	Nfsv3 pulumi.BoolPtrInput `pulumi:"nfsv3"`
	// Enable to apply the export rule to NFSV4.1 clients.
	Nfsv4 pulumi.BoolPtrInput `pulumi:"nfsv4"`
}

func (VolumeExportPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeExportPolicyRule)(nil)).Elem()
}

func (i VolumeExportPolicyRuleArgs) ToVolumeExportPolicyRuleOutput() VolumeExportPolicyRuleOutput {
	return i.ToVolumeExportPolicyRuleOutputWithContext(context.Background())
}

func (i VolumeExportPolicyRuleArgs) ToVolumeExportPolicyRuleOutputWithContext(ctx context.Context) VolumeExportPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExportPolicyRuleOutput)
}

// VolumeExportPolicyRuleArrayInput is an input type that accepts VolumeExportPolicyRuleArray and VolumeExportPolicyRuleArrayOutput values.
// You can construct a concrete instance of `VolumeExportPolicyRuleArrayInput` via:
//
//	VolumeExportPolicyRuleArray{ VolumeExportPolicyRuleArgs{...} }
type VolumeExportPolicyRuleArrayInput interface {
	pulumi.Input

	ToVolumeExportPolicyRuleArrayOutput() VolumeExportPolicyRuleArrayOutput
	ToVolumeExportPolicyRuleArrayOutputWithContext(context.Context) VolumeExportPolicyRuleArrayOutput
}

type VolumeExportPolicyRuleArray []VolumeExportPolicyRuleInput

func (VolumeExportPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeExportPolicyRule)(nil)).Elem()
}

func (i VolumeExportPolicyRuleArray) ToVolumeExportPolicyRuleArrayOutput() VolumeExportPolicyRuleArrayOutput {
	return i.ToVolumeExportPolicyRuleArrayOutputWithContext(context.Background())
}

func (i VolumeExportPolicyRuleArray) ToVolumeExportPolicyRuleArrayOutputWithContext(ctx context.Context) VolumeExportPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExportPolicyRuleArrayOutput)
}

type VolumeExportPolicyRuleOutput struct{ *pulumi.OutputState }

func (VolumeExportPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeExportPolicyRule)(nil)).Elem()
}

func (o VolumeExportPolicyRuleOutput) ToVolumeExportPolicyRuleOutput() VolumeExportPolicyRuleOutput {
	return o
}

func (o VolumeExportPolicyRuleOutput) ToVolumeExportPolicyRuleOutputWithContext(ctx context.Context) VolumeExportPolicyRuleOutput {
	return o
}

// Defines the access type for clients matching the `allowedClients` specification.
// Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
func (o VolumeExportPolicyRuleOutput) AccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *string { return v.AccessType }).(pulumi.StringPtrOutput)
}

// Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
func (o VolumeExportPolicyRuleOutput) AllowedClients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *string { return v.AllowedClients }).(pulumi.StringPtrOutput)
}

// If enabled, the root user (UID = 0) of the specified clients doesn't get mapped to nobody (UID = 65534). This is also known as no_root_squash.
func (o VolumeExportPolicyRuleOutput) HasRootAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *string { return v.HasRootAccess }).(pulumi.StringPtrOutput)
}

// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'authentication' kerberos security mode.
func (o VolumeExportPolicyRuleOutput) Kerberos5ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.Kerberos5ReadOnly }).(pulumi.BoolPtrOutput)
}

// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'authentication' kerberos security mode. The 'kerberos5ReadOnly' value is ignored if this is enabled.
func (o VolumeExportPolicyRuleOutput) Kerberos5ReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.Kerberos5ReadWrite }).(pulumi.BoolPtrOutput)
}

// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'integrity' kerberos security mode.
func (o VolumeExportPolicyRuleOutput) Kerberos5iReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.Kerberos5iReadOnly }).(pulumi.BoolPtrOutput)
}

// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'integrity' kerberos security mode. The 'kerberos5iReadOnly' value is ignored if this is enabled.
func (o VolumeExportPolicyRuleOutput) Kerberos5iReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.Kerberos5iReadWrite }).(pulumi.BoolPtrOutput)
}

// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'privacy' kerberos security mode.
func (o VolumeExportPolicyRuleOutput) Kerberos5pReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.Kerberos5pReadOnly }).(pulumi.BoolPtrOutput)
}

// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'privacy' kerberos security mode. The 'kerberos5pReadOnly' value is ignored if this is enabled.
func (o VolumeExportPolicyRuleOutput) Kerberos5pReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.Kerberos5pReadWrite }).(pulumi.BoolPtrOutput)
}

// Enable to apply the export rule to NFSV3 clients.
func (o VolumeExportPolicyRuleOutput) Nfsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.Nfsv3 }).(pulumi.BoolPtrOutput)
}

// Enable to apply the export rule to NFSV4.1 clients.
func (o VolumeExportPolicyRuleOutput) Nfsv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.Nfsv4 }).(pulumi.BoolPtrOutput)
}

type VolumeExportPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (VolumeExportPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeExportPolicyRule)(nil)).Elem()
}

func (o VolumeExportPolicyRuleArrayOutput) ToVolumeExportPolicyRuleArrayOutput() VolumeExportPolicyRuleArrayOutput {
	return o
}

func (o VolumeExportPolicyRuleArrayOutput) ToVolumeExportPolicyRuleArrayOutputWithContext(ctx context.Context) VolumeExportPolicyRuleArrayOutput {
	return o
}

func (o VolumeExportPolicyRuleArrayOutput) Index(i pulumi.IntInput) VolumeExportPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeExportPolicyRule {
		return vs[0].([]VolumeExportPolicyRule)[vs[1].(int)]
	}).(VolumeExportPolicyRuleOutput)
}

type VolumeHybridReplicationParameters struct {
	// Optional. Name of source cluster location associated with the Hybrid replication. This is a free-form field for the display purpose only.
	ClusterLocation *string `pulumi:"clusterLocation"`
	// Optional. Description of the replication.
	Description *string `pulumi:"description"`
	// Optional. Labels to be added to the replication as the key value pairs.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	Labels map[string]string `pulumi:"labels"`
	// Required. Name of the user's local source cluster to be peered with the destination cluster.
	PeerClusterName *string `pulumi:"peerClusterName"`
	// Required. List of node ip addresses to be peered with.
	PeerIpAddresses *string `pulumi:"peerIpAddresses"`
	// Required. Name of the user's local source vserver svm to be peered with the destination vserver svm.
	PeerSvmName *string `pulumi:"peerSvmName"`
	// Required. Name of the user's local source volume to be peered with the destination volume.
	PeerVolumeName *string `pulumi:"peerVolumeName"`
	// Required. Desired name for the replication of this volume.
	Replication *string `pulumi:"replication"`
}

// VolumeHybridReplicationParametersInput is an input type that accepts VolumeHybridReplicationParametersArgs and VolumeHybridReplicationParametersOutput values.
// You can construct a concrete instance of `VolumeHybridReplicationParametersInput` via:
//
//	VolumeHybridReplicationParametersArgs{...}
type VolumeHybridReplicationParametersInput interface {
	pulumi.Input

	ToVolumeHybridReplicationParametersOutput() VolumeHybridReplicationParametersOutput
	ToVolumeHybridReplicationParametersOutputWithContext(context.Context) VolumeHybridReplicationParametersOutput
}

type VolumeHybridReplicationParametersArgs struct {
	// Optional. Name of source cluster location associated with the Hybrid replication. This is a free-form field for the display purpose only.
	ClusterLocation pulumi.StringPtrInput `pulumi:"clusterLocation"`
	// Optional. Description of the replication.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. Labels to be added to the replication as the key value pairs.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Required. Name of the user's local source cluster to be peered with the destination cluster.
	PeerClusterName pulumi.StringPtrInput `pulumi:"peerClusterName"`
	// Required. List of node ip addresses to be peered with.
	PeerIpAddresses pulumi.StringPtrInput `pulumi:"peerIpAddresses"`
	// Required. Name of the user's local source vserver svm to be peered with the destination vserver svm.
	PeerSvmName pulumi.StringPtrInput `pulumi:"peerSvmName"`
	// Required. Name of the user's local source volume to be peered with the destination volume.
	PeerVolumeName pulumi.StringPtrInput `pulumi:"peerVolumeName"`
	// Required. Desired name for the replication of this volume.
	Replication pulumi.StringPtrInput `pulumi:"replication"`
}

func (VolumeHybridReplicationParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeHybridReplicationParameters)(nil)).Elem()
}

func (i VolumeHybridReplicationParametersArgs) ToVolumeHybridReplicationParametersOutput() VolumeHybridReplicationParametersOutput {
	return i.ToVolumeHybridReplicationParametersOutputWithContext(context.Background())
}

func (i VolumeHybridReplicationParametersArgs) ToVolumeHybridReplicationParametersOutputWithContext(ctx context.Context) VolumeHybridReplicationParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeHybridReplicationParametersOutput)
}

func (i VolumeHybridReplicationParametersArgs) ToVolumeHybridReplicationParametersPtrOutput() VolumeHybridReplicationParametersPtrOutput {
	return i.ToVolumeHybridReplicationParametersPtrOutputWithContext(context.Background())
}

func (i VolumeHybridReplicationParametersArgs) ToVolumeHybridReplicationParametersPtrOutputWithContext(ctx context.Context) VolumeHybridReplicationParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeHybridReplicationParametersOutput).ToVolumeHybridReplicationParametersPtrOutputWithContext(ctx)
}

// VolumeHybridReplicationParametersPtrInput is an input type that accepts VolumeHybridReplicationParametersArgs, VolumeHybridReplicationParametersPtr and VolumeHybridReplicationParametersPtrOutput values.
// You can construct a concrete instance of `VolumeHybridReplicationParametersPtrInput` via:
//
//	        VolumeHybridReplicationParametersArgs{...}
//
//	or:
//
//	        nil
type VolumeHybridReplicationParametersPtrInput interface {
	pulumi.Input

	ToVolumeHybridReplicationParametersPtrOutput() VolumeHybridReplicationParametersPtrOutput
	ToVolumeHybridReplicationParametersPtrOutputWithContext(context.Context) VolumeHybridReplicationParametersPtrOutput
}

type volumeHybridReplicationParametersPtrType VolumeHybridReplicationParametersArgs

func VolumeHybridReplicationParametersPtr(v *VolumeHybridReplicationParametersArgs) VolumeHybridReplicationParametersPtrInput {
	return (*volumeHybridReplicationParametersPtrType)(v)
}

func (*volumeHybridReplicationParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeHybridReplicationParameters)(nil)).Elem()
}

func (i *volumeHybridReplicationParametersPtrType) ToVolumeHybridReplicationParametersPtrOutput() VolumeHybridReplicationParametersPtrOutput {
	return i.ToVolumeHybridReplicationParametersPtrOutputWithContext(context.Background())
}

func (i *volumeHybridReplicationParametersPtrType) ToVolumeHybridReplicationParametersPtrOutputWithContext(ctx context.Context) VolumeHybridReplicationParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeHybridReplicationParametersPtrOutput)
}

type VolumeHybridReplicationParametersOutput struct{ *pulumi.OutputState }

func (VolumeHybridReplicationParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeHybridReplicationParameters)(nil)).Elem()
}

func (o VolumeHybridReplicationParametersOutput) ToVolumeHybridReplicationParametersOutput() VolumeHybridReplicationParametersOutput {
	return o
}

func (o VolumeHybridReplicationParametersOutput) ToVolumeHybridReplicationParametersOutputWithContext(ctx context.Context) VolumeHybridReplicationParametersOutput {
	return o
}

func (o VolumeHybridReplicationParametersOutput) ToVolumeHybridReplicationParametersPtrOutput() VolumeHybridReplicationParametersPtrOutput {
	return o.ToVolumeHybridReplicationParametersPtrOutputWithContext(context.Background())
}

func (o VolumeHybridReplicationParametersOutput) ToVolumeHybridReplicationParametersPtrOutputWithContext(ctx context.Context) VolumeHybridReplicationParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeHybridReplicationParameters) *VolumeHybridReplicationParameters {
		return &v
	}).(VolumeHybridReplicationParametersPtrOutput)
}

// Optional. Name of source cluster location associated with the Hybrid replication. This is a free-form field for the display purpose only.
func (o VolumeHybridReplicationParametersOutput) ClusterLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeHybridReplicationParameters) *string { return v.ClusterLocation }).(pulumi.StringPtrOutput)
}

// Optional. Description of the replication.
func (o VolumeHybridReplicationParametersOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeHybridReplicationParameters) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. Labels to be added to the replication as the key value pairs.
// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o VolumeHybridReplicationParametersOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeHybridReplicationParameters) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Required. Name of the user's local source cluster to be peered with the destination cluster.
func (o VolumeHybridReplicationParametersOutput) PeerClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeHybridReplicationParameters) *string { return v.PeerClusterName }).(pulumi.StringPtrOutput)
}

// Required. List of node ip addresses to be peered with.
func (o VolumeHybridReplicationParametersOutput) PeerIpAddresses() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeHybridReplicationParameters) *string { return v.PeerIpAddresses }).(pulumi.StringPtrOutput)
}

// Required. Name of the user's local source vserver svm to be peered with the destination vserver svm.
func (o VolumeHybridReplicationParametersOutput) PeerSvmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeHybridReplicationParameters) *string { return v.PeerSvmName }).(pulumi.StringPtrOutput)
}

// Required. Name of the user's local source volume to be peered with the destination volume.
func (o VolumeHybridReplicationParametersOutput) PeerVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeHybridReplicationParameters) *string { return v.PeerVolumeName }).(pulumi.StringPtrOutput)
}

// Required. Desired name for the replication of this volume.
func (o VolumeHybridReplicationParametersOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeHybridReplicationParameters) *string { return v.Replication }).(pulumi.StringPtrOutput)
}

type VolumeHybridReplicationParametersPtrOutput struct{ *pulumi.OutputState }

func (VolumeHybridReplicationParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeHybridReplicationParameters)(nil)).Elem()
}

func (o VolumeHybridReplicationParametersPtrOutput) ToVolumeHybridReplicationParametersPtrOutput() VolumeHybridReplicationParametersPtrOutput {
	return o
}

func (o VolumeHybridReplicationParametersPtrOutput) ToVolumeHybridReplicationParametersPtrOutputWithContext(ctx context.Context) VolumeHybridReplicationParametersPtrOutput {
	return o
}

func (o VolumeHybridReplicationParametersPtrOutput) Elem() VolumeHybridReplicationParametersOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) VolumeHybridReplicationParameters {
		if v != nil {
			return *v
		}
		var ret VolumeHybridReplicationParameters
		return ret
	}).(VolumeHybridReplicationParametersOutput)
}

// Optional. Name of source cluster location associated with the Hybrid replication. This is a free-form field for the display purpose only.
func (o VolumeHybridReplicationParametersPtrOutput) ClusterLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) *string {
		if v == nil {
			return nil
		}
		return v.ClusterLocation
	}).(pulumi.StringPtrOutput)
}

// Optional. Description of the replication.
func (o VolumeHybridReplicationParametersPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Optional. Labels to be added to the replication as the key value pairs.
// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o VolumeHybridReplicationParametersPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Required. Name of the user's local source cluster to be peered with the destination cluster.
func (o VolumeHybridReplicationParametersPtrOutput) PeerClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) *string {
		if v == nil {
			return nil
		}
		return v.PeerClusterName
	}).(pulumi.StringPtrOutput)
}

// Required. List of node ip addresses to be peered with.
func (o VolumeHybridReplicationParametersPtrOutput) PeerIpAddresses() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) *string {
		if v == nil {
			return nil
		}
		return v.PeerIpAddresses
	}).(pulumi.StringPtrOutput)
}

// Required. Name of the user's local source vserver svm to be peered with the destination vserver svm.
func (o VolumeHybridReplicationParametersPtrOutput) PeerSvmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) *string {
		if v == nil {
			return nil
		}
		return v.PeerSvmName
	}).(pulumi.StringPtrOutput)
}

// Required. Name of the user's local source volume to be peered with the destination volume.
func (o VolumeHybridReplicationParametersPtrOutput) PeerVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) *string {
		if v == nil {
			return nil
		}
		return v.PeerVolumeName
	}).(pulumi.StringPtrOutput)
}

// Required. Desired name for the replication of this volume.
func (o VolumeHybridReplicationParametersPtrOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeHybridReplicationParameters) *string {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(pulumi.StringPtrOutput)
}

type VolumeMountOption struct {
	// (Output)
	// Export path of the volume.
	Export *string `pulumi:"export"`
	// (Output)
	// Full export path of the volume.
	// Format for NFS volumes: `<export_ip>:/<shareName>`
	// Format for SMB volumes: `\\\\netbios_prefix-four_random_hex_letters.domain_name\\shareName`
	ExportFull *string `pulumi:"exportFull"`
	// (Output)
	// Human-readable mount instructions.
	Instructions *string `pulumi:"instructions"`
	// (Output)
	// Protocol to mount with.
	Protocol *string `pulumi:"protocol"`
}

// VolumeMountOptionInput is an input type that accepts VolumeMountOptionArgs and VolumeMountOptionOutput values.
// You can construct a concrete instance of `VolumeMountOptionInput` via:
//
//	VolumeMountOptionArgs{...}
type VolumeMountOptionInput interface {
	pulumi.Input

	ToVolumeMountOptionOutput() VolumeMountOptionOutput
	ToVolumeMountOptionOutputWithContext(context.Context) VolumeMountOptionOutput
}

type VolumeMountOptionArgs struct {
	// (Output)
	// Export path of the volume.
	Export pulumi.StringPtrInput `pulumi:"export"`
	// (Output)
	// Full export path of the volume.
	// Format for NFS volumes: `<export_ip>:/<shareName>`
	// Format for SMB volumes: `\\\\netbios_prefix-four_random_hex_letters.domain_name\\shareName`
	ExportFull pulumi.StringPtrInput `pulumi:"exportFull"`
	// (Output)
	// Human-readable mount instructions.
	Instructions pulumi.StringPtrInput `pulumi:"instructions"`
	// (Output)
	// Protocol to mount with.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (VolumeMountOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountOption)(nil)).Elem()
}

func (i VolumeMountOptionArgs) ToVolumeMountOptionOutput() VolumeMountOptionOutput {
	return i.ToVolumeMountOptionOutputWithContext(context.Background())
}

func (i VolumeMountOptionArgs) ToVolumeMountOptionOutputWithContext(ctx context.Context) VolumeMountOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOptionOutput)
}

// VolumeMountOptionArrayInput is an input type that accepts VolumeMountOptionArray and VolumeMountOptionArrayOutput values.
// You can construct a concrete instance of `VolumeMountOptionArrayInput` via:
//
//	VolumeMountOptionArray{ VolumeMountOptionArgs{...} }
type VolumeMountOptionArrayInput interface {
	pulumi.Input

	ToVolumeMountOptionArrayOutput() VolumeMountOptionArrayOutput
	ToVolumeMountOptionArrayOutputWithContext(context.Context) VolumeMountOptionArrayOutput
}

type VolumeMountOptionArray []VolumeMountOptionInput

func (VolumeMountOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountOption)(nil)).Elem()
}

func (i VolumeMountOptionArray) ToVolumeMountOptionArrayOutput() VolumeMountOptionArrayOutput {
	return i.ToVolumeMountOptionArrayOutputWithContext(context.Background())
}

func (i VolumeMountOptionArray) ToVolumeMountOptionArrayOutputWithContext(ctx context.Context) VolumeMountOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOptionArrayOutput)
}

type VolumeMountOptionOutput struct{ *pulumi.OutputState }

func (VolumeMountOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountOption)(nil)).Elem()
}

func (o VolumeMountOptionOutput) ToVolumeMountOptionOutput() VolumeMountOptionOutput {
	return o
}

func (o VolumeMountOptionOutput) ToVolumeMountOptionOutputWithContext(ctx context.Context) VolumeMountOptionOutput {
	return o
}

// (Output)
// Export path of the volume.
func (o VolumeMountOptionOutput) Export() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountOption) *string { return v.Export }).(pulumi.StringPtrOutput)
}

// (Output)
// Full export path of the volume.
// Format for NFS volumes: `<export_ip>:/<shareName>`
// Format for SMB volumes: `\\\\netbios_prefix-four_random_hex_letters.domain_name\\shareName`
func (o VolumeMountOptionOutput) ExportFull() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountOption) *string { return v.ExportFull }).(pulumi.StringPtrOutput)
}

// (Output)
// Human-readable mount instructions.
func (o VolumeMountOptionOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountOption) *string { return v.Instructions }).(pulumi.StringPtrOutput)
}

// (Output)
// Protocol to mount with.
func (o VolumeMountOptionOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountOption) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type VolumeMountOptionArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountOption)(nil)).Elem()
}

func (o VolumeMountOptionArrayOutput) ToVolumeMountOptionArrayOutput() VolumeMountOptionArrayOutput {
	return o
}

func (o VolumeMountOptionArrayOutput) ToVolumeMountOptionArrayOutputWithContext(ctx context.Context) VolumeMountOptionArrayOutput {
	return o
}

func (o VolumeMountOptionArrayOutput) Index(i pulumi.IntInput) VolumeMountOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountOption {
		return vs[0].([]VolumeMountOption)[vs[1].(int)]
	}).(VolumeMountOptionOutput)
}

type VolumeReplicationDestinationVolumeParameters struct {
	// Description for the destination volume.
	Description *string `pulumi:"description"`
	// Share name for destination volume. If not specified, name of source volume's share name will be used.
	ShareName *string `pulumi:"shareName"`
	// Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
	StoragePool string `pulumi:"storagePool"`
	// Tiering policy for the volume.
	// Structure is documented below.
	TieringPolicy *VolumeReplicationDestinationVolumeParametersTieringPolicy `pulumi:"tieringPolicy"`
	// Name for the destination volume to be created. If not specified, the name of the source volume will be used.
	VolumeId *string `pulumi:"volumeId"`
}

// VolumeReplicationDestinationVolumeParametersInput is an input type that accepts VolumeReplicationDestinationVolumeParametersArgs and VolumeReplicationDestinationVolumeParametersOutput values.
// You can construct a concrete instance of `VolumeReplicationDestinationVolumeParametersInput` via:
//
//	VolumeReplicationDestinationVolumeParametersArgs{...}
type VolumeReplicationDestinationVolumeParametersInput interface {
	pulumi.Input

	ToVolumeReplicationDestinationVolumeParametersOutput() VolumeReplicationDestinationVolumeParametersOutput
	ToVolumeReplicationDestinationVolumeParametersOutputWithContext(context.Context) VolumeReplicationDestinationVolumeParametersOutput
}

type VolumeReplicationDestinationVolumeParametersArgs struct {
	// Description for the destination volume.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Share name for destination volume. If not specified, name of source volume's share name will be used.
	ShareName pulumi.StringPtrInput `pulumi:"shareName"`
	// Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
	StoragePool pulumi.StringInput `pulumi:"storagePool"`
	// Tiering policy for the volume.
	// Structure is documented below.
	TieringPolicy VolumeReplicationDestinationVolumeParametersTieringPolicyPtrInput `pulumi:"tieringPolicy"`
	// Name for the destination volume to be created. If not specified, the name of the source volume will be used.
	VolumeId pulumi.StringPtrInput `pulumi:"volumeId"`
}

func (VolumeReplicationDestinationVolumeParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeReplicationDestinationVolumeParameters)(nil)).Elem()
}

func (i VolumeReplicationDestinationVolumeParametersArgs) ToVolumeReplicationDestinationVolumeParametersOutput() VolumeReplicationDestinationVolumeParametersOutput {
	return i.ToVolumeReplicationDestinationVolumeParametersOutputWithContext(context.Background())
}

func (i VolumeReplicationDestinationVolumeParametersArgs) ToVolumeReplicationDestinationVolumeParametersOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationDestinationVolumeParametersOutput)
}

func (i VolumeReplicationDestinationVolumeParametersArgs) ToVolumeReplicationDestinationVolumeParametersPtrOutput() VolumeReplicationDestinationVolumeParametersPtrOutput {
	return i.ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(context.Background())
}

func (i VolumeReplicationDestinationVolumeParametersArgs) ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationDestinationVolumeParametersOutput).ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(ctx)
}

// VolumeReplicationDestinationVolumeParametersPtrInput is an input type that accepts VolumeReplicationDestinationVolumeParametersArgs, VolumeReplicationDestinationVolumeParametersPtr and VolumeReplicationDestinationVolumeParametersPtrOutput values.
// You can construct a concrete instance of `VolumeReplicationDestinationVolumeParametersPtrInput` via:
//
//	        VolumeReplicationDestinationVolumeParametersArgs{...}
//
//	or:
//
//	        nil
type VolumeReplicationDestinationVolumeParametersPtrInput interface {
	pulumi.Input

	ToVolumeReplicationDestinationVolumeParametersPtrOutput() VolumeReplicationDestinationVolumeParametersPtrOutput
	ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(context.Context) VolumeReplicationDestinationVolumeParametersPtrOutput
}

type volumeReplicationDestinationVolumeParametersPtrType VolumeReplicationDestinationVolumeParametersArgs

func VolumeReplicationDestinationVolumeParametersPtr(v *VolumeReplicationDestinationVolumeParametersArgs) VolumeReplicationDestinationVolumeParametersPtrInput {
	return (*volumeReplicationDestinationVolumeParametersPtrType)(v)
}

func (*volumeReplicationDestinationVolumeParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeReplicationDestinationVolumeParameters)(nil)).Elem()
}

func (i *volumeReplicationDestinationVolumeParametersPtrType) ToVolumeReplicationDestinationVolumeParametersPtrOutput() VolumeReplicationDestinationVolumeParametersPtrOutput {
	return i.ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(context.Background())
}

func (i *volumeReplicationDestinationVolumeParametersPtrType) ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationDestinationVolumeParametersPtrOutput)
}

type VolumeReplicationDestinationVolumeParametersOutput struct{ *pulumi.OutputState }

func (VolumeReplicationDestinationVolumeParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeReplicationDestinationVolumeParameters)(nil)).Elem()
}

func (o VolumeReplicationDestinationVolumeParametersOutput) ToVolumeReplicationDestinationVolumeParametersOutput() VolumeReplicationDestinationVolumeParametersOutput {
	return o
}

func (o VolumeReplicationDestinationVolumeParametersOutput) ToVolumeReplicationDestinationVolumeParametersOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersOutput {
	return o
}

func (o VolumeReplicationDestinationVolumeParametersOutput) ToVolumeReplicationDestinationVolumeParametersPtrOutput() VolumeReplicationDestinationVolumeParametersPtrOutput {
	return o.ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(context.Background())
}

func (o VolumeReplicationDestinationVolumeParametersOutput) ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeReplicationDestinationVolumeParameters) *VolumeReplicationDestinationVolumeParameters {
		return &v
	}).(VolumeReplicationDestinationVolumeParametersPtrOutput)
}

// Description for the destination volume.
func (o VolumeReplicationDestinationVolumeParametersOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationDestinationVolumeParameters) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Share name for destination volume. If not specified, name of source volume's share name will be used.
func (o VolumeReplicationDestinationVolumeParametersOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationDestinationVolumeParameters) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

// Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
func (o VolumeReplicationDestinationVolumeParametersOutput) StoragePool() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeReplicationDestinationVolumeParameters) string { return v.StoragePool }).(pulumi.StringOutput)
}

// Tiering policy for the volume.
// Structure is documented below.
func (o VolumeReplicationDestinationVolumeParametersOutput) TieringPolicy() VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return o.ApplyT(func(v VolumeReplicationDestinationVolumeParameters) *VolumeReplicationDestinationVolumeParametersTieringPolicy {
		return v.TieringPolicy
	}).(VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput)
}

// Name for the destination volume to be created. If not specified, the name of the source volume will be used.
func (o VolumeReplicationDestinationVolumeParametersOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationDestinationVolumeParameters) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

type VolumeReplicationDestinationVolumeParametersPtrOutput struct{ *pulumi.OutputState }

func (VolumeReplicationDestinationVolumeParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeReplicationDestinationVolumeParameters)(nil)).Elem()
}

func (o VolumeReplicationDestinationVolumeParametersPtrOutput) ToVolumeReplicationDestinationVolumeParametersPtrOutput() VolumeReplicationDestinationVolumeParametersPtrOutput {
	return o
}

func (o VolumeReplicationDestinationVolumeParametersPtrOutput) ToVolumeReplicationDestinationVolumeParametersPtrOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersPtrOutput {
	return o
}

func (o VolumeReplicationDestinationVolumeParametersPtrOutput) Elem() VolumeReplicationDestinationVolumeParametersOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParameters) VolumeReplicationDestinationVolumeParameters {
		if v != nil {
			return *v
		}
		var ret VolumeReplicationDestinationVolumeParameters
		return ret
	}).(VolumeReplicationDestinationVolumeParametersOutput)
}

// Description for the destination volume.
func (o VolumeReplicationDestinationVolumeParametersPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParameters) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Share name for destination volume. If not specified, name of source volume's share name will be used.
func (o VolumeReplicationDestinationVolumeParametersPtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParameters) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
func (o VolumeReplicationDestinationVolumeParametersPtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// Tiering policy for the volume.
// Structure is documented below.
func (o VolumeReplicationDestinationVolumeParametersPtrOutput) TieringPolicy() VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParameters) *VolumeReplicationDestinationVolumeParametersTieringPolicy {
		if v == nil {
			return nil
		}
		return v.TieringPolicy
	}).(VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput)
}

// Name for the destination volume to be created. If not specified, the name of the source volume will be used.
func (o VolumeReplicationDestinationVolumeParametersPtrOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParameters) *string {
		if v == nil {
			return nil
		}
		return v.VolumeId
	}).(pulumi.StringPtrOutput)
}

type VolumeReplicationDestinationVolumeParametersTieringPolicy struct {
	// Optional. Time in days to mark the volume's data block as cold and make it eligible for tiering, can be range from 2-183.
	// Default is 31.
	CoolingThresholdDays *int `pulumi:"coolingThresholdDays"`
	// Optional. Flag indicating if the volume has tiering policy enable/pause. Default is PAUSED.
	// Default value is `PAUSED`.
	// Possible values are: `ENABLED`, `PAUSED`.
	TierAction *string `pulumi:"tierAction"`
}

// VolumeReplicationDestinationVolumeParametersTieringPolicyInput is an input type that accepts VolumeReplicationDestinationVolumeParametersTieringPolicyArgs and VolumeReplicationDestinationVolumeParametersTieringPolicyOutput values.
// You can construct a concrete instance of `VolumeReplicationDestinationVolumeParametersTieringPolicyInput` via:
//
//	VolumeReplicationDestinationVolumeParametersTieringPolicyArgs{...}
type VolumeReplicationDestinationVolumeParametersTieringPolicyInput interface {
	pulumi.Input

	ToVolumeReplicationDestinationVolumeParametersTieringPolicyOutput() VolumeReplicationDestinationVolumeParametersTieringPolicyOutput
	ToVolumeReplicationDestinationVolumeParametersTieringPolicyOutputWithContext(context.Context) VolumeReplicationDestinationVolumeParametersTieringPolicyOutput
}

type VolumeReplicationDestinationVolumeParametersTieringPolicyArgs struct {
	// Optional. Time in days to mark the volume's data block as cold and make it eligible for tiering, can be range from 2-183.
	// Default is 31.
	CoolingThresholdDays pulumi.IntPtrInput `pulumi:"coolingThresholdDays"`
	// Optional. Flag indicating if the volume has tiering policy enable/pause. Default is PAUSED.
	// Default value is `PAUSED`.
	// Possible values are: `ENABLED`, `PAUSED`.
	TierAction pulumi.StringPtrInput `pulumi:"tierAction"`
}

func (VolumeReplicationDestinationVolumeParametersTieringPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeReplicationDestinationVolumeParametersTieringPolicy)(nil)).Elem()
}

func (i VolumeReplicationDestinationVolumeParametersTieringPolicyArgs) ToVolumeReplicationDestinationVolumeParametersTieringPolicyOutput() VolumeReplicationDestinationVolumeParametersTieringPolicyOutput {
	return i.ToVolumeReplicationDestinationVolumeParametersTieringPolicyOutputWithContext(context.Background())
}

func (i VolumeReplicationDestinationVolumeParametersTieringPolicyArgs) ToVolumeReplicationDestinationVolumeParametersTieringPolicyOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersTieringPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationDestinationVolumeParametersTieringPolicyOutput)
}

func (i VolumeReplicationDestinationVolumeParametersTieringPolicyArgs) ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput() VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return i.ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(context.Background())
}

func (i VolumeReplicationDestinationVolumeParametersTieringPolicyArgs) ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationDestinationVolumeParametersTieringPolicyOutput).ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(ctx)
}

// VolumeReplicationDestinationVolumeParametersTieringPolicyPtrInput is an input type that accepts VolumeReplicationDestinationVolumeParametersTieringPolicyArgs, VolumeReplicationDestinationVolumeParametersTieringPolicyPtr and VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput values.
// You can construct a concrete instance of `VolumeReplicationDestinationVolumeParametersTieringPolicyPtrInput` via:
//
//	        VolumeReplicationDestinationVolumeParametersTieringPolicyArgs{...}
//
//	or:
//
//	        nil
type VolumeReplicationDestinationVolumeParametersTieringPolicyPtrInput interface {
	pulumi.Input

	ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput() VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput
	ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(context.Context) VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput
}

type volumeReplicationDestinationVolumeParametersTieringPolicyPtrType VolumeReplicationDestinationVolumeParametersTieringPolicyArgs

func VolumeReplicationDestinationVolumeParametersTieringPolicyPtr(v *VolumeReplicationDestinationVolumeParametersTieringPolicyArgs) VolumeReplicationDestinationVolumeParametersTieringPolicyPtrInput {
	return (*volumeReplicationDestinationVolumeParametersTieringPolicyPtrType)(v)
}

func (*volumeReplicationDestinationVolumeParametersTieringPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeReplicationDestinationVolumeParametersTieringPolicy)(nil)).Elem()
}

func (i *volumeReplicationDestinationVolumeParametersTieringPolicyPtrType) ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput() VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return i.ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(context.Background())
}

func (i *volumeReplicationDestinationVolumeParametersTieringPolicyPtrType) ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput)
}

type VolumeReplicationDestinationVolumeParametersTieringPolicyOutput struct{ *pulumi.OutputState }

func (VolumeReplicationDestinationVolumeParametersTieringPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeReplicationDestinationVolumeParametersTieringPolicy)(nil)).Elem()
}

func (o VolumeReplicationDestinationVolumeParametersTieringPolicyOutput) ToVolumeReplicationDestinationVolumeParametersTieringPolicyOutput() VolumeReplicationDestinationVolumeParametersTieringPolicyOutput {
	return o
}

func (o VolumeReplicationDestinationVolumeParametersTieringPolicyOutput) ToVolumeReplicationDestinationVolumeParametersTieringPolicyOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersTieringPolicyOutput {
	return o
}

func (o VolumeReplicationDestinationVolumeParametersTieringPolicyOutput) ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput() VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return o.ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(context.Background())
}

func (o VolumeReplicationDestinationVolumeParametersTieringPolicyOutput) ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeReplicationDestinationVolumeParametersTieringPolicy) *VolumeReplicationDestinationVolumeParametersTieringPolicy {
		return &v
	}).(VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput)
}

// Optional. Time in days to mark the volume's data block as cold and make it eligible for tiering, can be range from 2-183.
// Default is 31.
func (o VolumeReplicationDestinationVolumeParametersTieringPolicyOutput) CoolingThresholdDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeReplicationDestinationVolumeParametersTieringPolicy) *int { return v.CoolingThresholdDays }).(pulumi.IntPtrOutput)
}

// Optional. Flag indicating if the volume has tiering policy enable/pause. Default is PAUSED.
// Default value is `PAUSED`.
// Possible values are: `ENABLED`, `PAUSED`.
func (o VolumeReplicationDestinationVolumeParametersTieringPolicyOutput) TierAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationDestinationVolumeParametersTieringPolicy) *string { return v.TierAction }).(pulumi.StringPtrOutput)
}

type VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeReplicationDestinationVolumeParametersTieringPolicy)(nil)).Elem()
}

func (o VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput) ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput() VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return o
}

func (o VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput) ToVolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutputWithContext(ctx context.Context) VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput {
	return o
}

func (o VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput) Elem() VolumeReplicationDestinationVolumeParametersTieringPolicyOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParametersTieringPolicy) VolumeReplicationDestinationVolumeParametersTieringPolicy {
		if v != nil {
			return *v
		}
		var ret VolumeReplicationDestinationVolumeParametersTieringPolicy
		return ret
	}).(VolumeReplicationDestinationVolumeParametersTieringPolicyOutput)
}

// Optional. Time in days to mark the volume's data block as cold and make it eligible for tiering, can be range from 2-183.
// Default is 31.
func (o VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput) CoolingThresholdDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParametersTieringPolicy) *int {
		if v == nil {
			return nil
		}
		return v.CoolingThresholdDays
	}).(pulumi.IntPtrOutput)
}

// Optional. Flag indicating if the volume has tiering policy enable/pause. Default is PAUSED.
// Default value is `PAUSED`.
// Possible values are: `ENABLED`, `PAUSED`.
func (o VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput) TierAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeReplicationDestinationVolumeParametersTieringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.TierAction
	}).(pulumi.StringPtrOutput)
}

type VolumeReplicationHybridPeeringDetail struct {
	// (Output)
	// Optional. Copy-paste-able commands to be used on user's ONTAP to accept peering requests.
	Command *string `pulumi:"command"`
	// (Output)
	// Optional. Expiration time for the peering command to be executed on user's ONTAP.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted.
	CommandExpiryTime *string `pulumi:"commandExpiryTime"`
	// (Output)
	// Optional. Temporary passphrase generated to accept cluster peering command.
	Passphrase *string `pulumi:"passphrase"`
	// (Output)
	// Optional. Name of the user's local source cluster to be peered with the destination cluster.
	PeerClusterName *string `pulumi:"peerClusterName"`
	// (Output)
	// Optional. Name of the user's local source vserver svm to be peered with the destination vserver svm.
	PeerSvmName *string `pulumi:"peerSvmName"`
	// (Output)
	// Optional. Name of the user's local source volume to be peered with the destination volume.
	PeerVolumeName *string `pulumi:"peerVolumeName"`
	// (Output)
	// Optional. IP address of the subnet.
	SubnetIp *string `pulumi:"subnetIp"`
}

// VolumeReplicationHybridPeeringDetailInput is an input type that accepts VolumeReplicationHybridPeeringDetailArgs and VolumeReplicationHybridPeeringDetailOutput values.
// You can construct a concrete instance of `VolumeReplicationHybridPeeringDetailInput` via:
//
//	VolumeReplicationHybridPeeringDetailArgs{...}
type VolumeReplicationHybridPeeringDetailInput interface {
	pulumi.Input

	ToVolumeReplicationHybridPeeringDetailOutput() VolumeReplicationHybridPeeringDetailOutput
	ToVolumeReplicationHybridPeeringDetailOutputWithContext(context.Context) VolumeReplicationHybridPeeringDetailOutput
}

type VolumeReplicationHybridPeeringDetailArgs struct {
	// (Output)
	// Optional. Copy-paste-able commands to be used on user's ONTAP to accept peering requests.
	Command pulumi.StringPtrInput `pulumi:"command"`
	// (Output)
	// Optional. Expiration time for the peering command to be executed on user's ONTAP.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted.
	CommandExpiryTime pulumi.StringPtrInput `pulumi:"commandExpiryTime"`
	// (Output)
	// Optional. Temporary passphrase generated to accept cluster peering command.
	Passphrase pulumi.StringPtrInput `pulumi:"passphrase"`
	// (Output)
	// Optional. Name of the user's local source cluster to be peered with the destination cluster.
	PeerClusterName pulumi.StringPtrInput `pulumi:"peerClusterName"`
	// (Output)
	// Optional. Name of the user's local source vserver svm to be peered with the destination vserver svm.
	PeerSvmName pulumi.StringPtrInput `pulumi:"peerSvmName"`
	// (Output)
	// Optional. Name of the user's local source volume to be peered with the destination volume.
	PeerVolumeName pulumi.StringPtrInput `pulumi:"peerVolumeName"`
	// (Output)
	// Optional. IP address of the subnet.
	SubnetIp pulumi.StringPtrInput `pulumi:"subnetIp"`
}

func (VolumeReplicationHybridPeeringDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeReplicationHybridPeeringDetail)(nil)).Elem()
}

func (i VolumeReplicationHybridPeeringDetailArgs) ToVolumeReplicationHybridPeeringDetailOutput() VolumeReplicationHybridPeeringDetailOutput {
	return i.ToVolumeReplicationHybridPeeringDetailOutputWithContext(context.Background())
}

func (i VolumeReplicationHybridPeeringDetailArgs) ToVolumeReplicationHybridPeeringDetailOutputWithContext(ctx context.Context) VolumeReplicationHybridPeeringDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationHybridPeeringDetailOutput)
}

// VolumeReplicationHybridPeeringDetailArrayInput is an input type that accepts VolumeReplicationHybridPeeringDetailArray and VolumeReplicationHybridPeeringDetailArrayOutput values.
// You can construct a concrete instance of `VolumeReplicationHybridPeeringDetailArrayInput` via:
//
//	VolumeReplicationHybridPeeringDetailArray{ VolumeReplicationHybridPeeringDetailArgs{...} }
type VolumeReplicationHybridPeeringDetailArrayInput interface {
	pulumi.Input

	ToVolumeReplicationHybridPeeringDetailArrayOutput() VolumeReplicationHybridPeeringDetailArrayOutput
	ToVolumeReplicationHybridPeeringDetailArrayOutputWithContext(context.Context) VolumeReplicationHybridPeeringDetailArrayOutput
}

type VolumeReplicationHybridPeeringDetailArray []VolumeReplicationHybridPeeringDetailInput

func (VolumeReplicationHybridPeeringDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeReplicationHybridPeeringDetail)(nil)).Elem()
}

func (i VolumeReplicationHybridPeeringDetailArray) ToVolumeReplicationHybridPeeringDetailArrayOutput() VolumeReplicationHybridPeeringDetailArrayOutput {
	return i.ToVolumeReplicationHybridPeeringDetailArrayOutputWithContext(context.Background())
}

func (i VolumeReplicationHybridPeeringDetailArray) ToVolumeReplicationHybridPeeringDetailArrayOutputWithContext(ctx context.Context) VolumeReplicationHybridPeeringDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationHybridPeeringDetailArrayOutput)
}

type VolumeReplicationHybridPeeringDetailOutput struct{ *pulumi.OutputState }

func (VolumeReplicationHybridPeeringDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeReplicationHybridPeeringDetail)(nil)).Elem()
}

func (o VolumeReplicationHybridPeeringDetailOutput) ToVolumeReplicationHybridPeeringDetailOutput() VolumeReplicationHybridPeeringDetailOutput {
	return o
}

func (o VolumeReplicationHybridPeeringDetailOutput) ToVolumeReplicationHybridPeeringDetailOutputWithContext(ctx context.Context) VolumeReplicationHybridPeeringDetailOutput {
	return o
}

// (Output)
// Optional. Copy-paste-able commands to be used on user's ONTAP to accept peering requests.
func (o VolumeReplicationHybridPeeringDetailOutput) Command() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationHybridPeeringDetail) *string { return v.Command }).(pulumi.StringPtrOutput)
}

// (Output)
// Optional. Expiration time for the peering command to be executed on user's ONTAP.
// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted.
func (o VolumeReplicationHybridPeeringDetailOutput) CommandExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationHybridPeeringDetail) *string { return v.CommandExpiryTime }).(pulumi.StringPtrOutput)
}

// (Output)
// Optional. Temporary passphrase generated to accept cluster peering command.
func (o VolumeReplicationHybridPeeringDetailOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationHybridPeeringDetail) *string { return v.Passphrase }).(pulumi.StringPtrOutput)
}

// (Output)
// Optional. Name of the user's local source cluster to be peered with the destination cluster.
func (o VolumeReplicationHybridPeeringDetailOutput) PeerClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationHybridPeeringDetail) *string { return v.PeerClusterName }).(pulumi.StringPtrOutput)
}

// (Output)
// Optional. Name of the user's local source vserver svm to be peered with the destination vserver svm.
func (o VolumeReplicationHybridPeeringDetailOutput) PeerSvmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationHybridPeeringDetail) *string { return v.PeerSvmName }).(pulumi.StringPtrOutput)
}

// (Output)
// Optional. Name of the user's local source volume to be peered with the destination volume.
func (o VolumeReplicationHybridPeeringDetailOutput) PeerVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationHybridPeeringDetail) *string { return v.PeerVolumeName }).(pulumi.StringPtrOutput)
}

// (Output)
// Optional. IP address of the subnet.
func (o VolumeReplicationHybridPeeringDetailOutput) SubnetIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationHybridPeeringDetail) *string { return v.SubnetIp }).(pulumi.StringPtrOutput)
}

type VolumeReplicationHybridPeeringDetailArrayOutput struct{ *pulumi.OutputState }

func (VolumeReplicationHybridPeeringDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeReplicationHybridPeeringDetail)(nil)).Elem()
}

func (o VolumeReplicationHybridPeeringDetailArrayOutput) ToVolumeReplicationHybridPeeringDetailArrayOutput() VolumeReplicationHybridPeeringDetailArrayOutput {
	return o
}

func (o VolumeReplicationHybridPeeringDetailArrayOutput) ToVolumeReplicationHybridPeeringDetailArrayOutputWithContext(ctx context.Context) VolumeReplicationHybridPeeringDetailArrayOutput {
	return o
}

func (o VolumeReplicationHybridPeeringDetailArrayOutput) Index(i pulumi.IntInput) VolumeReplicationHybridPeeringDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeReplicationHybridPeeringDetail {
		return vs[0].([]VolumeReplicationHybridPeeringDetail)[vs[1].(int)]
	}).(VolumeReplicationHybridPeeringDetailOutput)
}

type VolumeReplicationTransferStat struct {
	// (Output)
	// The elapsed time since the creation of the snapshot on the source volume that was last replicated
	// to the destination volume. Lag time represents the difference in age of the destination volume
	// data in relation to the source volume data.
	LagDuration *string `pulumi:"lagDuration"`
	// (Output)
	// Size of last completed transfer in bytes.
	LastTransferBytes *string `pulumi:"lastTransferBytes"`
	// (Output)
	// Time taken during last completed transfer.
	LastTransferDuration *string `pulumi:"lastTransferDuration"`
	// (Output)
	// Time when last transfer completed. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	LastTransferEndTime *string `pulumi:"lastTransferEndTime"`
	// (Output)
	// A message describing the cause of the last transfer failure.
	LastTransferError *string `pulumi:"lastTransferError"`
	// (Output)
	// Cumulative time taken across all transfers for the replication relationship.
	TotalTransferDuration *string `pulumi:"totalTransferDuration"`
	// (Output)
	// Cumulative bytes transferred so far for the replication relationship.
	TransferBytes *string `pulumi:"transferBytes"`
	// (Output)
	// Time when progress was updated last. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	UpdateTime *string `pulumi:"updateTime"`
}

// VolumeReplicationTransferStatInput is an input type that accepts VolumeReplicationTransferStatArgs and VolumeReplicationTransferStatOutput values.
// You can construct a concrete instance of `VolumeReplicationTransferStatInput` via:
//
//	VolumeReplicationTransferStatArgs{...}
type VolumeReplicationTransferStatInput interface {
	pulumi.Input

	ToVolumeReplicationTransferStatOutput() VolumeReplicationTransferStatOutput
	ToVolumeReplicationTransferStatOutputWithContext(context.Context) VolumeReplicationTransferStatOutput
}

type VolumeReplicationTransferStatArgs struct {
	// (Output)
	// The elapsed time since the creation of the snapshot on the source volume that was last replicated
	// to the destination volume. Lag time represents the difference in age of the destination volume
	// data in relation to the source volume data.
	LagDuration pulumi.StringPtrInput `pulumi:"lagDuration"`
	// (Output)
	// Size of last completed transfer in bytes.
	LastTransferBytes pulumi.StringPtrInput `pulumi:"lastTransferBytes"`
	// (Output)
	// Time taken during last completed transfer.
	LastTransferDuration pulumi.StringPtrInput `pulumi:"lastTransferDuration"`
	// (Output)
	// Time when last transfer completed. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	LastTransferEndTime pulumi.StringPtrInput `pulumi:"lastTransferEndTime"`
	// (Output)
	// A message describing the cause of the last transfer failure.
	LastTransferError pulumi.StringPtrInput `pulumi:"lastTransferError"`
	// (Output)
	// Cumulative time taken across all transfers for the replication relationship.
	TotalTransferDuration pulumi.StringPtrInput `pulumi:"totalTransferDuration"`
	// (Output)
	// Cumulative bytes transferred so far for the replication relationship.
	TransferBytes pulumi.StringPtrInput `pulumi:"transferBytes"`
	// (Output)
	// Time when progress was updated last. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (VolumeReplicationTransferStatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeReplicationTransferStat)(nil)).Elem()
}

func (i VolumeReplicationTransferStatArgs) ToVolumeReplicationTransferStatOutput() VolumeReplicationTransferStatOutput {
	return i.ToVolumeReplicationTransferStatOutputWithContext(context.Background())
}

func (i VolumeReplicationTransferStatArgs) ToVolumeReplicationTransferStatOutputWithContext(ctx context.Context) VolumeReplicationTransferStatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationTransferStatOutput)
}

// VolumeReplicationTransferStatArrayInput is an input type that accepts VolumeReplicationTransferStatArray and VolumeReplicationTransferStatArrayOutput values.
// You can construct a concrete instance of `VolumeReplicationTransferStatArrayInput` via:
//
//	VolumeReplicationTransferStatArray{ VolumeReplicationTransferStatArgs{...} }
type VolumeReplicationTransferStatArrayInput interface {
	pulumi.Input

	ToVolumeReplicationTransferStatArrayOutput() VolumeReplicationTransferStatArrayOutput
	ToVolumeReplicationTransferStatArrayOutputWithContext(context.Context) VolumeReplicationTransferStatArrayOutput
}

type VolumeReplicationTransferStatArray []VolumeReplicationTransferStatInput

func (VolumeReplicationTransferStatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeReplicationTransferStat)(nil)).Elem()
}

func (i VolumeReplicationTransferStatArray) ToVolumeReplicationTransferStatArrayOutput() VolumeReplicationTransferStatArrayOutput {
	return i.ToVolumeReplicationTransferStatArrayOutputWithContext(context.Background())
}

func (i VolumeReplicationTransferStatArray) ToVolumeReplicationTransferStatArrayOutputWithContext(ctx context.Context) VolumeReplicationTransferStatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationTransferStatArrayOutput)
}

type VolumeReplicationTransferStatOutput struct{ *pulumi.OutputState }

func (VolumeReplicationTransferStatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeReplicationTransferStat)(nil)).Elem()
}

func (o VolumeReplicationTransferStatOutput) ToVolumeReplicationTransferStatOutput() VolumeReplicationTransferStatOutput {
	return o
}

func (o VolumeReplicationTransferStatOutput) ToVolumeReplicationTransferStatOutputWithContext(ctx context.Context) VolumeReplicationTransferStatOutput {
	return o
}

// (Output)
// The elapsed time since the creation of the snapshot on the source volume that was last replicated
// to the destination volume. Lag time represents the difference in age of the destination volume
// data in relation to the source volume data.
func (o VolumeReplicationTransferStatOutput) LagDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationTransferStat) *string { return v.LagDuration }).(pulumi.StringPtrOutput)
}

// (Output)
// Size of last completed transfer in bytes.
func (o VolumeReplicationTransferStatOutput) LastTransferBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationTransferStat) *string { return v.LastTransferBytes }).(pulumi.StringPtrOutput)
}

// (Output)
// Time taken during last completed transfer.
func (o VolumeReplicationTransferStatOutput) LastTransferDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationTransferStat) *string { return v.LastTransferDuration }).(pulumi.StringPtrOutput)
}

// (Output)
// Time when last transfer completed. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o VolumeReplicationTransferStatOutput) LastTransferEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationTransferStat) *string { return v.LastTransferEndTime }).(pulumi.StringPtrOutput)
}

// (Output)
// A message describing the cause of the last transfer failure.
func (o VolumeReplicationTransferStatOutput) LastTransferError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationTransferStat) *string { return v.LastTransferError }).(pulumi.StringPtrOutput)
}

// (Output)
// Cumulative time taken across all transfers for the replication relationship.
func (o VolumeReplicationTransferStatOutput) TotalTransferDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationTransferStat) *string { return v.TotalTransferDuration }).(pulumi.StringPtrOutput)
}

// (Output)
// Cumulative bytes transferred so far for the replication relationship.
func (o VolumeReplicationTransferStatOutput) TransferBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationTransferStat) *string { return v.TransferBytes }).(pulumi.StringPtrOutput)
}

// (Output)
// Time when progress was updated last. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o VolumeReplicationTransferStatOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeReplicationTransferStat) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type VolumeReplicationTransferStatArrayOutput struct{ *pulumi.OutputState }

func (VolumeReplicationTransferStatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeReplicationTransferStat)(nil)).Elem()
}

func (o VolumeReplicationTransferStatArrayOutput) ToVolumeReplicationTransferStatArrayOutput() VolumeReplicationTransferStatArrayOutput {
	return o
}

func (o VolumeReplicationTransferStatArrayOutput) ToVolumeReplicationTransferStatArrayOutputWithContext(ctx context.Context) VolumeReplicationTransferStatArrayOutput {
	return o
}

func (o VolumeReplicationTransferStatArrayOutput) Index(i pulumi.IntInput) VolumeReplicationTransferStatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeReplicationTransferStat {
		return vs[0].([]VolumeReplicationTransferStat)[vs[1].(int)]
	}).(VolumeReplicationTransferStatOutput)
}

type VolumeRestoreParameters struct {
	// Full name of the backup to use for creating this volume.
	// `sourceSnapshot` and `sourceBackup` cannot be used simultaneously.
	// Format: `projects/{{project}}/locations/{{location}}/backupVaults/{{backupVaultId}}/backups/{{backup}}`.
	SourceBackup *string `pulumi:"sourceBackup"`
	// Full name of the snapshot to use for creating this volume.
	// `sourceSnapshot` and `sourceBackup` cannot be used simultaneously.
	// Format: `projects/{{project}}/locations/{{location}}/volumes/{{volume}}/snapshots/{{snapshot}}`.
	SourceSnapshot *string `pulumi:"sourceSnapshot"`
}

// VolumeRestoreParametersInput is an input type that accepts VolumeRestoreParametersArgs and VolumeRestoreParametersOutput values.
// You can construct a concrete instance of `VolumeRestoreParametersInput` via:
//
//	VolumeRestoreParametersArgs{...}
type VolumeRestoreParametersInput interface {
	pulumi.Input

	ToVolumeRestoreParametersOutput() VolumeRestoreParametersOutput
	ToVolumeRestoreParametersOutputWithContext(context.Context) VolumeRestoreParametersOutput
}

type VolumeRestoreParametersArgs struct {
	// Full name of the backup to use for creating this volume.
	// `sourceSnapshot` and `sourceBackup` cannot be used simultaneously.
	// Format: `projects/{{project}}/locations/{{location}}/backupVaults/{{backupVaultId}}/backups/{{backup}}`.
	SourceBackup pulumi.StringPtrInput `pulumi:"sourceBackup"`
	// Full name of the snapshot to use for creating this volume.
	// `sourceSnapshot` and `sourceBackup` cannot be used simultaneously.
	// Format: `projects/{{project}}/locations/{{location}}/volumes/{{volume}}/snapshots/{{snapshot}}`.
	SourceSnapshot pulumi.StringPtrInput `pulumi:"sourceSnapshot"`
}

func (VolumeRestoreParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeRestoreParameters)(nil)).Elem()
}

func (i VolumeRestoreParametersArgs) ToVolumeRestoreParametersOutput() VolumeRestoreParametersOutput {
	return i.ToVolumeRestoreParametersOutputWithContext(context.Background())
}

func (i VolumeRestoreParametersArgs) ToVolumeRestoreParametersOutputWithContext(ctx context.Context) VolumeRestoreParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeRestoreParametersOutput)
}

func (i VolumeRestoreParametersArgs) ToVolumeRestoreParametersPtrOutput() VolumeRestoreParametersPtrOutput {
	return i.ToVolumeRestoreParametersPtrOutputWithContext(context.Background())
}

func (i VolumeRestoreParametersArgs) ToVolumeRestoreParametersPtrOutputWithContext(ctx context.Context) VolumeRestoreParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeRestoreParametersOutput).ToVolumeRestoreParametersPtrOutputWithContext(ctx)
}

// VolumeRestoreParametersPtrInput is an input type that accepts VolumeRestoreParametersArgs, VolumeRestoreParametersPtr and VolumeRestoreParametersPtrOutput values.
// You can construct a concrete instance of `VolumeRestoreParametersPtrInput` via:
//
//	        VolumeRestoreParametersArgs{...}
//
//	or:
//
//	        nil
type VolumeRestoreParametersPtrInput interface {
	pulumi.Input

	ToVolumeRestoreParametersPtrOutput() VolumeRestoreParametersPtrOutput
	ToVolumeRestoreParametersPtrOutputWithContext(context.Context) VolumeRestoreParametersPtrOutput
}

type volumeRestoreParametersPtrType VolumeRestoreParametersArgs

func VolumeRestoreParametersPtr(v *VolumeRestoreParametersArgs) VolumeRestoreParametersPtrInput {
	return (*volumeRestoreParametersPtrType)(v)
}

func (*volumeRestoreParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeRestoreParameters)(nil)).Elem()
}

func (i *volumeRestoreParametersPtrType) ToVolumeRestoreParametersPtrOutput() VolumeRestoreParametersPtrOutput {
	return i.ToVolumeRestoreParametersPtrOutputWithContext(context.Background())
}

func (i *volumeRestoreParametersPtrType) ToVolumeRestoreParametersPtrOutputWithContext(ctx context.Context) VolumeRestoreParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeRestoreParametersPtrOutput)
}

type VolumeRestoreParametersOutput struct{ *pulumi.OutputState }

func (VolumeRestoreParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeRestoreParameters)(nil)).Elem()
}

func (o VolumeRestoreParametersOutput) ToVolumeRestoreParametersOutput() VolumeRestoreParametersOutput {
	return o
}

func (o VolumeRestoreParametersOutput) ToVolumeRestoreParametersOutputWithContext(ctx context.Context) VolumeRestoreParametersOutput {
	return o
}

func (o VolumeRestoreParametersOutput) ToVolumeRestoreParametersPtrOutput() VolumeRestoreParametersPtrOutput {
	return o.ToVolumeRestoreParametersPtrOutputWithContext(context.Background())
}

func (o VolumeRestoreParametersOutput) ToVolumeRestoreParametersPtrOutputWithContext(ctx context.Context) VolumeRestoreParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeRestoreParameters) *VolumeRestoreParameters {
		return &v
	}).(VolumeRestoreParametersPtrOutput)
}

// Full name of the backup to use for creating this volume.
// `sourceSnapshot` and `sourceBackup` cannot be used simultaneously.
// Format: `projects/{{project}}/locations/{{location}}/backupVaults/{{backupVaultId}}/backups/{{backup}}`.
func (o VolumeRestoreParametersOutput) SourceBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeRestoreParameters) *string { return v.SourceBackup }).(pulumi.StringPtrOutput)
}

// Full name of the snapshot to use for creating this volume.
// `sourceSnapshot` and `sourceBackup` cannot be used simultaneously.
// Format: `projects/{{project}}/locations/{{location}}/volumes/{{volume}}/snapshots/{{snapshot}}`.
func (o VolumeRestoreParametersOutput) SourceSnapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeRestoreParameters) *string { return v.SourceSnapshot }).(pulumi.StringPtrOutput)
}

type VolumeRestoreParametersPtrOutput struct{ *pulumi.OutputState }

func (VolumeRestoreParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeRestoreParameters)(nil)).Elem()
}

func (o VolumeRestoreParametersPtrOutput) ToVolumeRestoreParametersPtrOutput() VolumeRestoreParametersPtrOutput {
	return o
}

func (o VolumeRestoreParametersPtrOutput) ToVolumeRestoreParametersPtrOutputWithContext(ctx context.Context) VolumeRestoreParametersPtrOutput {
	return o
}

func (o VolumeRestoreParametersPtrOutput) Elem() VolumeRestoreParametersOutput {
	return o.ApplyT(func(v *VolumeRestoreParameters) VolumeRestoreParameters {
		if v != nil {
			return *v
		}
		var ret VolumeRestoreParameters
		return ret
	}).(VolumeRestoreParametersOutput)
}

// Full name of the backup to use for creating this volume.
// `sourceSnapshot` and `sourceBackup` cannot be used simultaneously.
// Format: `projects/{{project}}/locations/{{location}}/backupVaults/{{backupVaultId}}/backups/{{backup}}`.
func (o VolumeRestoreParametersPtrOutput) SourceBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeRestoreParameters) *string {
		if v == nil {
			return nil
		}
		return v.SourceBackup
	}).(pulumi.StringPtrOutput)
}

// Full name of the snapshot to use for creating this volume.
// `sourceSnapshot` and `sourceBackup` cannot be used simultaneously.
// Format: `projects/{{project}}/locations/{{location}}/volumes/{{volume}}/snapshots/{{snapshot}}`.
func (o VolumeRestoreParametersPtrOutput) SourceSnapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeRestoreParameters) *string {
		if v == nil {
			return nil
		}
		return v.SourceSnapshot
	}).(pulumi.StringPtrOutput)
}

type VolumeSnapshotPolicy struct {
	// Daily schedule policy.
	// Structure is documented below.
	DailySchedule *VolumeSnapshotPolicyDailySchedule `pulumi:"dailySchedule"`
	// Enables automated snapshot creation according to defined schedule. Default is false.
	// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
	Enabled *bool `pulumi:"enabled"`
	// Hourly schedule policy.
	// Structure is documented below.
	HourlySchedule *VolumeSnapshotPolicyHourlySchedule `pulumi:"hourlySchedule"`
	// Monthly schedule policy.
	// Structure is documented below.
	MonthlySchedule *VolumeSnapshotPolicyMonthlySchedule `pulumi:"monthlySchedule"`
	// Weekly schedule policy.
	// Structure is documented below.
	WeeklySchedule *VolumeSnapshotPolicyWeeklySchedule `pulumi:"weeklySchedule"`
}

// VolumeSnapshotPolicyInput is an input type that accepts VolumeSnapshotPolicyArgs and VolumeSnapshotPolicyOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyInput` via:
//
//	VolumeSnapshotPolicyArgs{...}
type VolumeSnapshotPolicyInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyOutput() VolumeSnapshotPolicyOutput
	ToVolumeSnapshotPolicyOutputWithContext(context.Context) VolumeSnapshotPolicyOutput
}

type VolumeSnapshotPolicyArgs struct {
	// Daily schedule policy.
	// Structure is documented below.
	DailySchedule VolumeSnapshotPolicyDailySchedulePtrInput `pulumi:"dailySchedule"`
	// Enables automated snapshot creation according to defined schedule. Default is false.
	// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Hourly schedule policy.
	// Structure is documented below.
	HourlySchedule VolumeSnapshotPolicyHourlySchedulePtrInput `pulumi:"hourlySchedule"`
	// Monthly schedule policy.
	// Structure is documented below.
	MonthlySchedule VolumeSnapshotPolicyMonthlySchedulePtrInput `pulumi:"monthlySchedule"`
	// Weekly schedule policy.
	// Structure is documented below.
	WeeklySchedule VolumeSnapshotPolicyWeeklySchedulePtrInput `pulumi:"weeklySchedule"`
}

func (VolumeSnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicy)(nil)).Elem()
}

func (i VolumeSnapshotPolicyArgs) ToVolumeSnapshotPolicyOutput() VolumeSnapshotPolicyOutput {
	return i.ToVolumeSnapshotPolicyOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyArgs) ToVolumeSnapshotPolicyOutputWithContext(ctx context.Context) VolumeSnapshotPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyOutput)
}

func (i VolumeSnapshotPolicyArgs) ToVolumeSnapshotPolicyPtrOutput() VolumeSnapshotPolicyPtrOutput {
	return i.ToVolumeSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyArgs) ToVolumeSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyOutput).ToVolumeSnapshotPolicyPtrOutputWithContext(ctx)
}

// VolumeSnapshotPolicyPtrInput is an input type that accepts VolumeSnapshotPolicyArgs, VolumeSnapshotPolicyPtr and VolumeSnapshotPolicyPtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyPtrInput` via:
//
//	        VolumeSnapshotPolicyArgs{...}
//
//	or:
//
//	        nil
type VolumeSnapshotPolicyPtrInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyPtrOutput() VolumeSnapshotPolicyPtrOutput
	ToVolumeSnapshotPolicyPtrOutputWithContext(context.Context) VolumeSnapshotPolicyPtrOutput
}

type volumeSnapshotPolicyPtrType VolumeSnapshotPolicyArgs

func VolumeSnapshotPolicyPtr(v *VolumeSnapshotPolicyArgs) VolumeSnapshotPolicyPtrInput {
	return (*volumeSnapshotPolicyPtrType)(v)
}

func (*volumeSnapshotPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicy)(nil)).Elem()
}

func (i *volumeSnapshotPolicyPtrType) ToVolumeSnapshotPolicyPtrOutput() VolumeSnapshotPolicyPtrOutput {
	return i.ToVolumeSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotPolicyPtrType) ToVolumeSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyPtrOutput)
}

type VolumeSnapshotPolicyOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicy)(nil)).Elem()
}

func (o VolumeSnapshotPolicyOutput) ToVolumeSnapshotPolicyOutput() VolumeSnapshotPolicyOutput {
	return o
}

func (o VolumeSnapshotPolicyOutput) ToVolumeSnapshotPolicyOutputWithContext(ctx context.Context) VolumeSnapshotPolicyOutput {
	return o
}

func (o VolumeSnapshotPolicyOutput) ToVolumeSnapshotPolicyPtrOutput() VolumeSnapshotPolicyPtrOutput {
	return o.ToVolumeSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotPolicyOutput) ToVolumeSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeSnapshotPolicy) *VolumeSnapshotPolicy {
		return &v
	}).(VolumeSnapshotPolicyPtrOutput)
}

// Daily schedule policy.
// Structure is documented below.
func (o VolumeSnapshotPolicyOutput) DailySchedule() VolumeSnapshotPolicyDailySchedulePtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicy) *VolumeSnapshotPolicyDailySchedule { return v.DailySchedule }).(VolumeSnapshotPolicyDailySchedulePtrOutput)
}

// Enables automated snapshot creation according to defined schedule. Default is false.
// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
func (o VolumeSnapshotPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Hourly schedule policy.
// Structure is documented below.
func (o VolumeSnapshotPolicyOutput) HourlySchedule() VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicy) *VolumeSnapshotPolicyHourlySchedule { return v.HourlySchedule }).(VolumeSnapshotPolicyHourlySchedulePtrOutput)
}

// Monthly schedule policy.
// Structure is documented below.
func (o VolumeSnapshotPolicyOutput) MonthlySchedule() VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicy) *VolumeSnapshotPolicyMonthlySchedule { return v.MonthlySchedule }).(VolumeSnapshotPolicyMonthlySchedulePtrOutput)
}

// Weekly schedule policy.
// Structure is documented below.
func (o VolumeSnapshotPolicyOutput) WeeklySchedule() VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicy) *VolumeSnapshotPolicyWeeklySchedule { return v.WeeklySchedule }).(VolumeSnapshotPolicyWeeklySchedulePtrOutput)
}

type VolumeSnapshotPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicy)(nil)).Elem()
}

func (o VolumeSnapshotPolicyPtrOutput) ToVolumeSnapshotPolicyPtrOutput() VolumeSnapshotPolicyPtrOutput {
	return o
}

func (o VolumeSnapshotPolicyPtrOutput) ToVolumeSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyPtrOutput {
	return o
}

func (o VolumeSnapshotPolicyPtrOutput) Elem() VolumeSnapshotPolicyOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicy) VolumeSnapshotPolicy {
		if v != nil {
			return *v
		}
		var ret VolumeSnapshotPolicy
		return ret
	}).(VolumeSnapshotPolicyOutput)
}

// Daily schedule policy.
// Structure is documented below.
func (o VolumeSnapshotPolicyPtrOutput) DailySchedule() VolumeSnapshotPolicyDailySchedulePtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicy) *VolumeSnapshotPolicyDailySchedule {
		if v == nil {
			return nil
		}
		return v.DailySchedule
	}).(VolumeSnapshotPolicyDailySchedulePtrOutput)
}

// Enables automated snapshot creation according to defined schedule. Default is false.
// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
func (o VolumeSnapshotPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Hourly schedule policy.
// Structure is documented below.
func (o VolumeSnapshotPolicyPtrOutput) HourlySchedule() VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicy) *VolumeSnapshotPolicyHourlySchedule {
		if v == nil {
			return nil
		}
		return v.HourlySchedule
	}).(VolumeSnapshotPolicyHourlySchedulePtrOutput)
}

// Monthly schedule policy.
// Structure is documented below.
func (o VolumeSnapshotPolicyPtrOutput) MonthlySchedule() VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicy) *VolumeSnapshotPolicyMonthlySchedule {
		if v == nil {
			return nil
		}
		return v.MonthlySchedule
	}).(VolumeSnapshotPolicyMonthlySchedulePtrOutput)
}

// Weekly schedule policy.
// Structure is documented below.
func (o VolumeSnapshotPolicyPtrOutput) WeeklySchedule() VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicy) *VolumeSnapshotPolicyWeeklySchedule {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(VolumeSnapshotPolicyWeeklySchedulePtrOutput)
}

type VolumeSnapshotPolicyDailySchedule struct {
	// Set the hour to create the snapshot (0-23), defaults to midnight (0).
	Hour *int `pulumi:"hour"`
	// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
	Minute *int `pulumi:"minute"`
	// The maximum number of snapshots to keep for the daily schedule.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// VolumeSnapshotPolicyDailyScheduleInput is an input type that accepts VolumeSnapshotPolicyDailyScheduleArgs and VolumeSnapshotPolicyDailyScheduleOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyDailyScheduleInput` via:
//
//	VolumeSnapshotPolicyDailyScheduleArgs{...}
type VolumeSnapshotPolicyDailyScheduleInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyDailyScheduleOutput() VolumeSnapshotPolicyDailyScheduleOutput
	ToVolumeSnapshotPolicyDailyScheduleOutputWithContext(context.Context) VolumeSnapshotPolicyDailyScheduleOutput
}

type VolumeSnapshotPolicyDailyScheduleArgs struct {
	// Set the hour to create the snapshot (0-23), defaults to midnight (0).
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// The maximum number of snapshots to keep for the daily schedule.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (VolumeSnapshotPolicyDailyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicyDailySchedule)(nil)).Elem()
}

func (i VolumeSnapshotPolicyDailyScheduleArgs) ToVolumeSnapshotPolicyDailyScheduleOutput() VolumeSnapshotPolicyDailyScheduleOutput {
	return i.ToVolumeSnapshotPolicyDailyScheduleOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyDailyScheduleArgs) ToVolumeSnapshotPolicyDailyScheduleOutputWithContext(ctx context.Context) VolumeSnapshotPolicyDailyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyDailyScheduleOutput)
}

func (i VolumeSnapshotPolicyDailyScheduleArgs) ToVolumeSnapshotPolicyDailySchedulePtrOutput() VolumeSnapshotPolicyDailySchedulePtrOutput {
	return i.ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyDailyScheduleArgs) ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyDailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyDailyScheduleOutput).ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(ctx)
}

// VolumeSnapshotPolicyDailySchedulePtrInput is an input type that accepts VolumeSnapshotPolicyDailyScheduleArgs, VolumeSnapshotPolicyDailySchedulePtr and VolumeSnapshotPolicyDailySchedulePtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyDailySchedulePtrInput` via:
//
//	        VolumeSnapshotPolicyDailyScheduleArgs{...}
//
//	or:
//
//	        nil
type VolumeSnapshotPolicyDailySchedulePtrInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyDailySchedulePtrOutput() VolumeSnapshotPolicyDailySchedulePtrOutput
	ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(context.Context) VolumeSnapshotPolicyDailySchedulePtrOutput
}

type volumeSnapshotPolicyDailySchedulePtrType VolumeSnapshotPolicyDailyScheduleArgs

func VolumeSnapshotPolicyDailySchedulePtr(v *VolumeSnapshotPolicyDailyScheduleArgs) VolumeSnapshotPolicyDailySchedulePtrInput {
	return (*volumeSnapshotPolicyDailySchedulePtrType)(v)
}

func (*volumeSnapshotPolicyDailySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicyDailySchedule)(nil)).Elem()
}

func (i *volumeSnapshotPolicyDailySchedulePtrType) ToVolumeSnapshotPolicyDailySchedulePtrOutput() VolumeSnapshotPolicyDailySchedulePtrOutput {
	return i.ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotPolicyDailySchedulePtrType) ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyDailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyDailySchedulePtrOutput)
}

type VolumeSnapshotPolicyDailyScheduleOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyDailyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicyDailySchedule)(nil)).Elem()
}

func (o VolumeSnapshotPolicyDailyScheduleOutput) ToVolumeSnapshotPolicyDailyScheduleOutput() VolumeSnapshotPolicyDailyScheduleOutput {
	return o
}

func (o VolumeSnapshotPolicyDailyScheduleOutput) ToVolumeSnapshotPolicyDailyScheduleOutputWithContext(ctx context.Context) VolumeSnapshotPolicyDailyScheduleOutput {
	return o
}

func (o VolumeSnapshotPolicyDailyScheduleOutput) ToVolumeSnapshotPolicyDailySchedulePtrOutput() VolumeSnapshotPolicyDailySchedulePtrOutput {
	return o.ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotPolicyDailyScheduleOutput) ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyDailySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeSnapshotPolicyDailySchedule) *VolumeSnapshotPolicyDailySchedule {
		return &v
	}).(VolumeSnapshotPolicyDailySchedulePtrOutput)
}

// Set the hour to create the snapshot (0-23), defaults to midnight (0).
func (o VolumeSnapshotPolicyDailyScheduleOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyDailySchedule) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
func (o VolumeSnapshotPolicyDailyScheduleOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyDailySchedule) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to keep for the daily schedule.
func (o VolumeSnapshotPolicyDailyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyDailySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type VolumeSnapshotPolicyDailySchedulePtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyDailySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicyDailySchedule)(nil)).Elem()
}

func (o VolumeSnapshotPolicyDailySchedulePtrOutput) ToVolumeSnapshotPolicyDailySchedulePtrOutput() VolumeSnapshotPolicyDailySchedulePtrOutput {
	return o
}

func (o VolumeSnapshotPolicyDailySchedulePtrOutput) ToVolumeSnapshotPolicyDailySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyDailySchedulePtrOutput {
	return o
}

func (o VolumeSnapshotPolicyDailySchedulePtrOutput) Elem() VolumeSnapshotPolicyDailyScheduleOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyDailySchedule) VolumeSnapshotPolicyDailySchedule {
		if v != nil {
			return *v
		}
		var ret VolumeSnapshotPolicyDailySchedule
		return ret
	}).(VolumeSnapshotPolicyDailyScheduleOutput)
}

// Set the hour to create the snapshot (0-23), defaults to midnight (0).
func (o VolumeSnapshotPolicyDailySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyDailySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
func (o VolumeSnapshotPolicyDailySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyDailySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to keep for the daily schedule.
func (o VolumeSnapshotPolicyDailySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyDailySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

type VolumeSnapshotPolicyHourlySchedule struct {
	// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
	Minute *int `pulumi:"minute"`
	// The maximum number of snapshots to keep for the hourly schedule.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// VolumeSnapshotPolicyHourlyScheduleInput is an input type that accepts VolumeSnapshotPolicyHourlyScheduleArgs and VolumeSnapshotPolicyHourlyScheduleOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyHourlyScheduleInput` via:
//
//	VolumeSnapshotPolicyHourlyScheduleArgs{...}
type VolumeSnapshotPolicyHourlyScheduleInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyHourlyScheduleOutput() VolumeSnapshotPolicyHourlyScheduleOutput
	ToVolumeSnapshotPolicyHourlyScheduleOutputWithContext(context.Context) VolumeSnapshotPolicyHourlyScheduleOutput
}

type VolumeSnapshotPolicyHourlyScheduleArgs struct {
	// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// The maximum number of snapshots to keep for the hourly schedule.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (VolumeSnapshotPolicyHourlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (i VolumeSnapshotPolicyHourlyScheduleArgs) ToVolumeSnapshotPolicyHourlyScheduleOutput() VolumeSnapshotPolicyHourlyScheduleOutput {
	return i.ToVolumeSnapshotPolicyHourlyScheduleOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyHourlyScheduleArgs) ToVolumeSnapshotPolicyHourlyScheduleOutputWithContext(ctx context.Context) VolumeSnapshotPolicyHourlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyHourlyScheduleOutput)
}

func (i VolumeSnapshotPolicyHourlyScheduleArgs) ToVolumeSnapshotPolicyHourlySchedulePtrOutput() VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return i.ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyHourlyScheduleArgs) ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyHourlyScheduleOutput).ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx)
}

// VolumeSnapshotPolicyHourlySchedulePtrInput is an input type that accepts VolumeSnapshotPolicyHourlyScheduleArgs, VolumeSnapshotPolicyHourlySchedulePtr and VolumeSnapshotPolicyHourlySchedulePtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyHourlySchedulePtrInput` via:
//
//	        VolumeSnapshotPolicyHourlyScheduleArgs{...}
//
//	or:
//
//	        nil
type VolumeSnapshotPolicyHourlySchedulePtrInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyHourlySchedulePtrOutput() VolumeSnapshotPolicyHourlySchedulePtrOutput
	ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(context.Context) VolumeSnapshotPolicyHourlySchedulePtrOutput
}

type volumeSnapshotPolicyHourlySchedulePtrType VolumeSnapshotPolicyHourlyScheduleArgs

func VolumeSnapshotPolicyHourlySchedulePtr(v *VolumeSnapshotPolicyHourlyScheduleArgs) VolumeSnapshotPolicyHourlySchedulePtrInput {
	return (*volumeSnapshotPolicyHourlySchedulePtrType)(v)
}

func (*volumeSnapshotPolicyHourlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (i *volumeSnapshotPolicyHourlySchedulePtrType) ToVolumeSnapshotPolicyHourlySchedulePtrOutput() VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return i.ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotPolicyHourlySchedulePtrType) ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyHourlySchedulePtrOutput)
}

type VolumeSnapshotPolicyHourlyScheduleOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyHourlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (o VolumeSnapshotPolicyHourlyScheduleOutput) ToVolumeSnapshotPolicyHourlyScheduleOutput() VolumeSnapshotPolicyHourlyScheduleOutput {
	return o
}

func (o VolumeSnapshotPolicyHourlyScheduleOutput) ToVolumeSnapshotPolicyHourlyScheduleOutputWithContext(ctx context.Context) VolumeSnapshotPolicyHourlyScheduleOutput {
	return o
}

func (o VolumeSnapshotPolicyHourlyScheduleOutput) ToVolumeSnapshotPolicyHourlySchedulePtrOutput() VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return o.ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotPolicyHourlyScheduleOutput) ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeSnapshotPolicyHourlySchedule) *VolumeSnapshotPolicyHourlySchedule {
		return &v
	}).(VolumeSnapshotPolicyHourlySchedulePtrOutput)
}

// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
func (o VolumeSnapshotPolicyHourlyScheduleOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyHourlySchedule) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to keep for the hourly schedule.
func (o VolumeSnapshotPolicyHourlyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyHourlySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type VolumeSnapshotPolicyHourlySchedulePtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyHourlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (o VolumeSnapshotPolicyHourlySchedulePtrOutput) ToVolumeSnapshotPolicyHourlySchedulePtrOutput() VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return o
}

func (o VolumeSnapshotPolicyHourlySchedulePtrOutput) ToVolumeSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyHourlySchedulePtrOutput {
	return o
}

func (o VolumeSnapshotPolicyHourlySchedulePtrOutput) Elem() VolumeSnapshotPolicyHourlyScheduleOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyHourlySchedule) VolumeSnapshotPolicyHourlySchedule {
		if v != nil {
			return *v
		}
		var ret VolumeSnapshotPolicyHourlySchedule
		return ret
	}).(VolumeSnapshotPolicyHourlyScheduleOutput)
}

// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
func (o VolumeSnapshotPolicyHourlySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyHourlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to keep for the hourly schedule.
func (o VolumeSnapshotPolicyHourlySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyHourlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

type VolumeSnapshotPolicyMonthlySchedule struct {
	// Set the day or days of the month to make a snapshot (1-31). Accepts a comma separated number of days. Defaults to '1'.
	DaysOfMonth *string `pulumi:"daysOfMonth"`
	// Set the hour to create the snapshot (0-23), defaults to midnight (0).
	Hour *int `pulumi:"hour"`
	// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
	Minute *int `pulumi:"minute"`
	// The maximum number of snapshots to keep for the monthly schedule
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// VolumeSnapshotPolicyMonthlyScheduleInput is an input type that accepts VolumeSnapshotPolicyMonthlyScheduleArgs and VolumeSnapshotPolicyMonthlyScheduleOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyMonthlyScheduleInput` via:
//
//	VolumeSnapshotPolicyMonthlyScheduleArgs{...}
type VolumeSnapshotPolicyMonthlyScheduleInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyMonthlyScheduleOutput() VolumeSnapshotPolicyMonthlyScheduleOutput
	ToVolumeSnapshotPolicyMonthlyScheduleOutputWithContext(context.Context) VolumeSnapshotPolicyMonthlyScheduleOutput
}

type VolumeSnapshotPolicyMonthlyScheduleArgs struct {
	// Set the day or days of the month to make a snapshot (1-31). Accepts a comma separated number of days. Defaults to '1'.
	DaysOfMonth pulumi.StringPtrInput `pulumi:"daysOfMonth"`
	// Set the hour to create the snapshot (0-23), defaults to midnight (0).
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// The maximum number of snapshots to keep for the monthly schedule
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (VolumeSnapshotPolicyMonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (i VolumeSnapshotPolicyMonthlyScheduleArgs) ToVolumeSnapshotPolicyMonthlyScheduleOutput() VolumeSnapshotPolicyMonthlyScheduleOutput {
	return i.ToVolumeSnapshotPolicyMonthlyScheduleOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyMonthlyScheduleArgs) ToVolumeSnapshotPolicyMonthlyScheduleOutputWithContext(ctx context.Context) VolumeSnapshotPolicyMonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyMonthlyScheduleOutput)
}

func (i VolumeSnapshotPolicyMonthlyScheduleArgs) ToVolumeSnapshotPolicyMonthlySchedulePtrOutput() VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return i.ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyMonthlyScheduleArgs) ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyMonthlyScheduleOutput).ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx)
}

// VolumeSnapshotPolicyMonthlySchedulePtrInput is an input type that accepts VolumeSnapshotPolicyMonthlyScheduleArgs, VolumeSnapshotPolicyMonthlySchedulePtr and VolumeSnapshotPolicyMonthlySchedulePtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyMonthlySchedulePtrInput` via:
//
//	        VolumeSnapshotPolicyMonthlyScheduleArgs{...}
//
//	or:
//
//	        nil
type VolumeSnapshotPolicyMonthlySchedulePtrInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyMonthlySchedulePtrOutput() VolumeSnapshotPolicyMonthlySchedulePtrOutput
	ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(context.Context) VolumeSnapshotPolicyMonthlySchedulePtrOutput
}

type volumeSnapshotPolicyMonthlySchedulePtrType VolumeSnapshotPolicyMonthlyScheduleArgs

func VolumeSnapshotPolicyMonthlySchedulePtr(v *VolumeSnapshotPolicyMonthlyScheduleArgs) VolumeSnapshotPolicyMonthlySchedulePtrInput {
	return (*volumeSnapshotPolicyMonthlySchedulePtrType)(v)
}

func (*volumeSnapshotPolicyMonthlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (i *volumeSnapshotPolicyMonthlySchedulePtrType) ToVolumeSnapshotPolicyMonthlySchedulePtrOutput() VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return i.ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotPolicyMonthlySchedulePtrType) ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyMonthlySchedulePtrOutput)
}

type VolumeSnapshotPolicyMonthlyScheduleOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyMonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (o VolumeSnapshotPolicyMonthlyScheduleOutput) ToVolumeSnapshotPolicyMonthlyScheduleOutput() VolumeSnapshotPolicyMonthlyScheduleOutput {
	return o
}

func (o VolumeSnapshotPolicyMonthlyScheduleOutput) ToVolumeSnapshotPolicyMonthlyScheduleOutputWithContext(ctx context.Context) VolumeSnapshotPolicyMonthlyScheduleOutput {
	return o
}

func (o VolumeSnapshotPolicyMonthlyScheduleOutput) ToVolumeSnapshotPolicyMonthlySchedulePtrOutput() VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return o.ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotPolicyMonthlyScheduleOutput) ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeSnapshotPolicyMonthlySchedule) *VolumeSnapshotPolicyMonthlySchedule {
		return &v
	}).(VolumeSnapshotPolicyMonthlySchedulePtrOutput)
}

// Set the day or days of the month to make a snapshot (1-31). Accepts a comma separated number of days. Defaults to '1'.
func (o VolumeSnapshotPolicyMonthlyScheduleOutput) DaysOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyMonthlySchedule) *string { return v.DaysOfMonth }).(pulumi.StringPtrOutput)
}

// Set the hour to create the snapshot (0-23), defaults to midnight (0).
func (o VolumeSnapshotPolicyMonthlyScheduleOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyMonthlySchedule) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
func (o VolumeSnapshotPolicyMonthlyScheduleOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyMonthlySchedule) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to keep for the monthly schedule
func (o VolumeSnapshotPolicyMonthlyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyMonthlySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type VolumeSnapshotPolicyMonthlySchedulePtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyMonthlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (o VolumeSnapshotPolicyMonthlySchedulePtrOutput) ToVolumeSnapshotPolicyMonthlySchedulePtrOutput() VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return o
}

func (o VolumeSnapshotPolicyMonthlySchedulePtrOutput) ToVolumeSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyMonthlySchedulePtrOutput {
	return o
}

func (o VolumeSnapshotPolicyMonthlySchedulePtrOutput) Elem() VolumeSnapshotPolicyMonthlyScheduleOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyMonthlySchedule) VolumeSnapshotPolicyMonthlySchedule {
		if v != nil {
			return *v
		}
		var ret VolumeSnapshotPolicyMonthlySchedule
		return ret
	}).(VolumeSnapshotPolicyMonthlyScheduleOutput)
}

// Set the day or days of the month to make a snapshot (1-31). Accepts a comma separated number of days. Defaults to '1'.
func (o VolumeSnapshotPolicyMonthlySchedulePtrOutput) DaysOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyMonthlySchedule) *string {
		if v == nil {
			return nil
		}
		return v.DaysOfMonth
	}).(pulumi.StringPtrOutput)
}

// Set the hour to create the snapshot (0-23), defaults to midnight (0).
func (o VolumeSnapshotPolicyMonthlySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
func (o VolumeSnapshotPolicyMonthlySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to keep for the monthly schedule
func (o VolumeSnapshotPolicyMonthlySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

type VolumeSnapshotPolicyWeeklySchedule struct {
	// Set the day or days of the week to make a snapshot. Accepts a comma separated days of the week. Defaults to 'Sunday'.
	Day *string `pulumi:"day"`
	// Set the hour to create the snapshot (0-23), defaults to midnight (0).
	Hour *int `pulumi:"hour"`
	// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
	Minute *int `pulumi:"minute"`
	// The maximum number of snapshots to keep for the weekly schedule.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// VolumeSnapshotPolicyWeeklyScheduleInput is an input type that accepts VolumeSnapshotPolicyWeeklyScheduleArgs and VolumeSnapshotPolicyWeeklyScheduleOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyWeeklyScheduleInput` via:
//
//	VolumeSnapshotPolicyWeeklyScheduleArgs{...}
type VolumeSnapshotPolicyWeeklyScheduleInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyWeeklyScheduleOutput() VolumeSnapshotPolicyWeeklyScheduleOutput
	ToVolumeSnapshotPolicyWeeklyScheduleOutputWithContext(context.Context) VolumeSnapshotPolicyWeeklyScheduleOutput
}

type VolumeSnapshotPolicyWeeklyScheduleArgs struct {
	// Set the day or days of the week to make a snapshot. Accepts a comma separated days of the week. Defaults to 'Sunday'.
	Day pulumi.StringPtrInput `pulumi:"day"`
	// Set the hour to create the snapshot (0-23), defaults to midnight (0).
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// The maximum number of snapshots to keep for the weekly schedule.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (VolumeSnapshotPolicyWeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (i VolumeSnapshotPolicyWeeklyScheduleArgs) ToVolumeSnapshotPolicyWeeklyScheduleOutput() VolumeSnapshotPolicyWeeklyScheduleOutput {
	return i.ToVolumeSnapshotPolicyWeeklyScheduleOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyWeeklyScheduleArgs) ToVolumeSnapshotPolicyWeeklyScheduleOutputWithContext(ctx context.Context) VolumeSnapshotPolicyWeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyWeeklyScheduleOutput)
}

func (i VolumeSnapshotPolicyWeeklyScheduleArgs) ToVolumeSnapshotPolicyWeeklySchedulePtrOutput() VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return i.ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotPolicyWeeklyScheduleArgs) ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyWeeklyScheduleOutput).ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx)
}

// VolumeSnapshotPolicyWeeklySchedulePtrInput is an input type that accepts VolumeSnapshotPolicyWeeklyScheduleArgs, VolumeSnapshotPolicyWeeklySchedulePtr and VolumeSnapshotPolicyWeeklySchedulePtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotPolicyWeeklySchedulePtrInput` via:
//
//	        VolumeSnapshotPolicyWeeklyScheduleArgs{...}
//
//	or:
//
//	        nil
type VolumeSnapshotPolicyWeeklySchedulePtrInput interface {
	pulumi.Input

	ToVolumeSnapshotPolicyWeeklySchedulePtrOutput() VolumeSnapshotPolicyWeeklySchedulePtrOutput
	ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(context.Context) VolumeSnapshotPolicyWeeklySchedulePtrOutput
}

type volumeSnapshotPolicyWeeklySchedulePtrType VolumeSnapshotPolicyWeeklyScheduleArgs

func VolumeSnapshotPolicyWeeklySchedulePtr(v *VolumeSnapshotPolicyWeeklyScheduleArgs) VolumeSnapshotPolicyWeeklySchedulePtrInput {
	return (*volumeSnapshotPolicyWeeklySchedulePtrType)(v)
}

func (*volumeSnapshotPolicyWeeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (i *volumeSnapshotPolicyWeeklySchedulePtrType) ToVolumeSnapshotPolicyWeeklySchedulePtrOutput() VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return i.ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotPolicyWeeklySchedulePtrType) ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPolicyWeeklySchedulePtrOutput)
}

type VolumeSnapshotPolicyWeeklyScheduleOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyWeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (o VolumeSnapshotPolicyWeeklyScheduleOutput) ToVolumeSnapshotPolicyWeeklyScheduleOutput() VolumeSnapshotPolicyWeeklyScheduleOutput {
	return o
}

func (o VolumeSnapshotPolicyWeeklyScheduleOutput) ToVolumeSnapshotPolicyWeeklyScheduleOutputWithContext(ctx context.Context) VolumeSnapshotPolicyWeeklyScheduleOutput {
	return o
}

func (o VolumeSnapshotPolicyWeeklyScheduleOutput) ToVolumeSnapshotPolicyWeeklySchedulePtrOutput() VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return o.ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotPolicyWeeklyScheduleOutput) ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeSnapshotPolicyWeeklySchedule) *VolumeSnapshotPolicyWeeklySchedule {
		return &v
	}).(VolumeSnapshotPolicyWeeklySchedulePtrOutput)
}

// Set the day or days of the week to make a snapshot. Accepts a comma separated days of the week. Defaults to 'Sunday'.
func (o VolumeSnapshotPolicyWeeklyScheduleOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyWeeklySchedule) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// Set the hour to create the snapshot (0-23), defaults to midnight (0).
func (o VolumeSnapshotPolicyWeeklyScheduleOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyWeeklySchedule) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
func (o VolumeSnapshotPolicyWeeklyScheduleOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyWeeklySchedule) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to keep for the weekly schedule.
func (o VolumeSnapshotPolicyWeeklyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeSnapshotPolicyWeeklySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type VolumeSnapshotPolicyWeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPolicyWeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (o VolumeSnapshotPolicyWeeklySchedulePtrOutput) ToVolumeSnapshotPolicyWeeklySchedulePtrOutput() VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return o
}

func (o VolumeSnapshotPolicyWeeklySchedulePtrOutput) ToVolumeSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx context.Context) VolumeSnapshotPolicyWeeklySchedulePtrOutput {
	return o
}

func (o VolumeSnapshotPolicyWeeklySchedulePtrOutput) Elem() VolumeSnapshotPolicyWeeklyScheduleOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyWeeklySchedule) VolumeSnapshotPolicyWeeklySchedule {
		if v != nil {
			return *v
		}
		var ret VolumeSnapshotPolicyWeeklySchedule
		return ret
	}).(VolumeSnapshotPolicyWeeklyScheduleOutput)
}

// Set the day or days of the week to make a snapshot. Accepts a comma separated days of the week. Defaults to 'Sunday'.
func (o VolumeSnapshotPolicyWeeklySchedulePtrOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyWeeklySchedule) *string {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.StringPtrOutput)
}

// Set the hour to create the snapshot (0-23), defaults to midnight (0).
func (o VolumeSnapshotPolicyWeeklySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyWeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Set the minute of the hour to create the snapshot (0-59), defaults to the top of the hour (0).
func (o VolumeSnapshotPolicyWeeklySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyWeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to keep for the weekly schedule.
func (o VolumeSnapshotPolicyWeeklySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPolicyWeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

type VolumeTieringPolicy struct {
	// Optional. Time in days to mark the volume's data block as cold and make it eligible for tiering, can be range from 2-183.
	// Default is 31.
	CoolingThresholdDays *int `pulumi:"coolingThresholdDays"`
	// Optional. Flag indicating if the volume has tiering policy enable/pause. Default is PAUSED.
	// Default value is `PAUSED`.
	// Possible values are: `ENABLED`, `PAUSED`.
	TierAction *string `pulumi:"tierAction"`
}

// VolumeTieringPolicyInput is an input type that accepts VolumeTieringPolicyArgs and VolumeTieringPolicyOutput values.
// You can construct a concrete instance of `VolumeTieringPolicyInput` via:
//
//	VolumeTieringPolicyArgs{...}
type VolumeTieringPolicyInput interface {
	pulumi.Input

	ToVolumeTieringPolicyOutput() VolumeTieringPolicyOutput
	ToVolumeTieringPolicyOutputWithContext(context.Context) VolumeTieringPolicyOutput
}

type VolumeTieringPolicyArgs struct {
	// Optional. Time in days to mark the volume's data block as cold and make it eligible for tiering, can be range from 2-183.
	// Default is 31.
	CoolingThresholdDays pulumi.IntPtrInput `pulumi:"coolingThresholdDays"`
	// Optional. Flag indicating if the volume has tiering policy enable/pause. Default is PAUSED.
	// Default value is `PAUSED`.
	// Possible values are: `ENABLED`, `PAUSED`.
	TierAction pulumi.StringPtrInput `pulumi:"tierAction"`
}

func (VolumeTieringPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTieringPolicy)(nil)).Elem()
}

func (i VolumeTieringPolicyArgs) ToVolumeTieringPolicyOutput() VolumeTieringPolicyOutput {
	return i.ToVolumeTieringPolicyOutputWithContext(context.Background())
}

func (i VolumeTieringPolicyArgs) ToVolumeTieringPolicyOutputWithContext(ctx context.Context) VolumeTieringPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTieringPolicyOutput)
}

func (i VolumeTieringPolicyArgs) ToVolumeTieringPolicyPtrOutput() VolumeTieringPolicyPtrOutput {
	return i.ToVolumeTieringPolicyPtrOutputWithContext(context.Background())
}

func (i VolumeTieringPolicyArgs) ToVolumeTieringPolicyPtrOutputWithContext(ctx context.Context) VolumeTieringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTieringPolicyOutput).ToVolumeTieringPolicyPtrOutputWithContext(ctx)
}

// VolumeTieringPolicyPtrInput is an input type that accepts VolumeTieringPolicyArgs, VolumeTieringPolicyPtr and VolumeTieringPolicyPtrOutput values.
// You can construct a concrete instance of `VolumeTieringPolicyPtrInput` via:
//
//	        VolumeTieringPolicyArgs{...}
//
//	or:
//
//	        nil
type VolumeTieringPolicyPtrInput interface {
	pulumi.Input

	ToVolumeTieringPolicyPtrOutput() VolumeTieringPolicyPtrOutput
	ToVolumeTieringPolicyPtrOutputWithContext(context.Context) VolumeTieringPolicyPtrOutput
}

type volumeTieringPolicyPtrType VolumeTieringPolicyArgs

func VolumeTieringPolicyPtr(v *VolumeTieringPolicyArgs) VolumeTieringPolicyPtrInput {
	return (*volumeTieringPolicyPtrType)(v)
}

func (*volumeTieringPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTieringPolicy)(nil)).Elem()
}

func (i *volumeTieringPolicyPtrType) ToVolumeTieringPolicyPtrOutput() VolumeTieringPolicyPtrOutput {
	return i.ToVolumeTieringPolicyPtrOutputWithContext(context.Background())
}

func (i *volumeTieringPolicyPtrType) ToVolumeTieringPolicyPtrOutputWithContext(ctx context.Context) VolumeTieringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTieringPolicyPtrOutput)
}

type VolumeTieringPolicyOutput struct{ *pulumi.OutputState }

func (VolumeTieringPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTieringPolicy)(nil)).Elem()
}

func (o VolumeTieringPolicyOutput) ToVolumeTieringPolicyOutput() VolumeTieringPolicyOutput {
	return o
}

func (o VolumeTieringPolicyOutput) ToVolumeTieringPolicyOutputWithContext(ctx context.Context) VolumeTieringPolicyOutput {
	return o
}

func (o VolumeTieringPolicyOutput) ToVolumeTieringPolicyPtrOutput() VolumeTieringPolicyPtrOutput {
	return o.ToVolumeTieringPolicyPtrOutputWithContext(context.Background())
}

func (o VolumeTieringPolicyOutput) ToVolumeTieringPolicyPtrOutputWithContext(ctx context.Context) VolumeTieringPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeTieringPolicy) *VolumeTieringPolicy {
		return &v
	}).(VolumeTieringPolicyPtrOutput)
}

// Optional. Time in days to mark the volume's data block as cold and make it eligible for tiering, can be range from 2-183.
// Default is 31.
func (o VolumeTieringPolicyOutput) CoolingThresholdDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeTieringPolicy) *int { return v.CoolingThresholdDays }).(pulumi.IntPtrOutput)
}

// Optional. Flag indicating if the volume has tiering policy enable/pause. Default is PAUSED.
// Default value is `PAUSED`.
// Possible values are: `ENABLED`, `PAUSED`.
func (o VolumeTieringPolicyOutput) TierAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeTieringPolicy) *string { return v.TierAction }).(pulumi.StringPtrOutput)
}

type VolumeTieringPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumeTieringPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTieringPolicy)(nil)).Elem()
}

func (o VolumeTieringPolicyPtrOutput) ToVolumeTieringPolicyPtrOutput() VolumeTieringPolicyPtrOutput {
	return o
}

func (o VolumeTieringPolicyPtrOutput) ToVolumeTieringPolicyPtrOutputWithContext(ctx context.Context) VolumeTieringPolicyPtrOutput {
	return o
}

func (o VolumeTieringPolicyPtrOutput) Elem() VolumeTieringPolicyOutput {
	return o.ApplyT(func(v *VolumeTieringPolicy) VolumeTieringPolicy {
		if v != nil {
			return *v
		}
		var ret VolumeTieringPolicy
		return ret
	}).(VolumeTieringPolicyOutput)
}

// Optional. Time in days to mark the volume's data block as cold and make it eligible for tiering, can be range from 2-183.
// Default is 31.
func (o VolumeTieringPolicyPtrOutput) CoolingThresholdDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeTieringPolicy) *int {
		if v == nil {
			return nil
		}
		return v.CoolingThresholdDays
	}).(pulumi.IntPtrOutput)
}

// Optional. Flag indicating if the volume has tiering policy enable/pause. Default is PAUSED.
// Default value is `PAUSED`.
// Possible values are: `ENABLED`, `PAUSED`.
func (o VolumeTieringPolicyPtrOutput) TierAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeTieringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.TierAction
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeBackupConfigInput)(nil)).Elem(), VolumeBackupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeBackupConfigPtrInput)(nil)).Elem(), VolumeBackupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeExportPolicyInput)(nil)).Elem(), VolumeExportPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeExportPolicyPtrInput)(nil)).Elem(), VolumeExportPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeExportPolicyRuleInput)(nil)).Elem(), VolumeExportPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeExportPolicyRuleArrayInput)(nil)).Elem(), VolumeExportPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeHybridReplicationParametersInput)(nil)).Elem(), VolumeHybridReplicationParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeHybridReplicationParametersPtrInput)(nil)).Elem(), VolumeHybridReplicationParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountOptionInput)(nil)).Elem(), VolumeMountOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountOptionArrayInput)(nil)).Elem(), VolumeMountOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationDestinationVolumeParametersInput)(nil)).Elem(), VolumeReplicationDestinationVolumeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationDestinationVolumeParametersPtrInput)(nil)).Elem(), VolumeReplicationDestinationVolumeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationDestinationVolumeParametersTieringPolicyInput)(nil)).Elem(), VolumeReplicationDestinationVolumeParametersTieringPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationDestinationVolumeParametersTieringPolicyPtrInput)(nil)).Elem(), VolumeReplicationDestinationVolumeParametersTieringPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationHybridPeeringDetailInput)(nil)).Elem(), VolumeReplicationHybridPeeringDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationHybridPeeringDetailArrayInput)(nil)).Elem(), VolumeReplicationHybridPeeringDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationTransferStatInput)(nil)).Elem(), VolumeReplicationTransferStatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationTransferStatArrayInput)(nil)).Elem(), VolumeReplicationTransferStatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeRestoreParametersInput)(nil)).Elem(), VolumeRestoreParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeRestoreParametersPtrInput)(nil)).Elem(), VolumeRestoreParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyInput)(nil)).Elem(), VolumeSnapshotPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyPtrInput)(nil)).Elem(), VolumeSnapshotPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyDailyScheduleInput)(nil)).Elem(), VolumeSnapshotPolicyDailyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyDailySchedulePtrInput)(nil)).Elem(), VolumeSnapshotPolicyDailyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyHourlyScheduleInput)(nil)).Elem(), VolumeSnapshotPolicyHourlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyHourlySchedulePtrInput)(nil)).Elem(), VolumeSnapshotPolicyHourlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyMonthlyScheduleInput)(nil)).Elem(), VolumeSnapshotPolicyMonthlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyMonthlySchedulePtrInput)(nil)).Elem(), VolumeSnapshotPolicyMonthlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyWeeklyScheduleInput)(nil)).Elem(), VolumeSnapshotPolicyWeeklyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotPolicyWeeklySchedulePtrInput)(nil)).Elem(), VolumeSnapshotPolicyWeeklyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTieringPolicyInput)(nil)).Elem(), VolumeTieringPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTieringPolicyPtrInput)(nil)).Elem(), VolumeTieringPolicyArgs{})
	pulumi.RegisterOutputType(VolumeBackupConfigOutput{})
	pulumi.RegisterOutputType(VolumeBackupConfigPtrOutput{})
	pulumi.RegisterOutputType(VolumeExportPolicyOutput{})
	pulumi.RegisterOutputType(VolumeExportPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumeExportPolicyRuleOutput{})
	pulumi.RegisterOutputType(VolumeExportPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(VolumeHybridReplicationParametersOutput{})
	pulumi.RegisterOutputType(VolumeHybridReplicationParametersPtrOutput{})
	pulumi.RegisterOutputType(VolumeMountOptionOutput{})
	pulumi.RegisterOutputType(VolumeMountOptionArrayOutput{})
	pulumi.RegisterOutputType(VolumeReplicationDestinationVolumeParametersOutput{})
	pulumi.RegisterOutputType(VolumeReplicationDestinationVolumeParametersPtrOutput{})
	pulumi.RegisterOutputType(VolumeReplicationDestinationVolumeParametersTieringPolicyOutput{})
	pulumi.RegisterOutputType(VolumeReplicationDestinationVolumeParametersTieringPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumeReplicationHybridPeeringDetailOutput{})
	pulumi.RegisterOutputType(VolumeReplicationHybridPeeringDetailArrayOutput{})
	pulumi.RegisterOutputType(VolumeReplicationTransferStatOutput{})
	pulumi.RegisterOutputType(VolumeReplicationTransferStatArrayOutput{})
	pulumi.RegisterOutputType(VolumeRestoreParametersOutput{})
	pulumi.RegisterOutputType(VolumeRestoreParametersPtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyDailyScheduleOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyDailySchedulePtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyHourlyScheduleOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyHourlySchedulePtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyMonthlyScheduleOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyMonthlySchedulePtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyWeeklyScheduleOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPolicyWeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(VolumeTieringPolicyOutput{})
	pulumi.RegisterOutputType(VolumeTieringPolicyPtrOutput{})
}
