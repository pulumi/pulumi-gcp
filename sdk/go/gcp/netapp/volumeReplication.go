// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Netapp Volume Replication Create
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name: "test-network",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			sourcePool, err := netapp.NewStoragePool(ctx, "source_pool", &netapp.StoragePoolArgs{
//				Name:         pulumi.String("source-pool"),
//				Location:     pulumi.String("us-central1"),
//				ServiceLevel: pulumi.String("PREMIUM"),
//				CapacityGib:  pulumi.String("2048"),
//				Network:      pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			destinationPool, err := netapp.NewStoragePool(ctx, "destination_pool", &netapp.StoragePoolArgs{
//				Name:         pulumi.String("destination-pool"),
//				Location:     pulumi.String("us-west2"),
//				ServiceLevel: pulumi.String("PREMIUM"),
//				CapacityGib:  pulumi.String("2048"),
//				Network:      pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			sourceVolume, err := netapp.NewVolume(ctx, "source_volume", &netapp.VolumeArgs{
//				Location:    sourcePool.Location,
//				Name:        pulumi.String("source-volume"),
//				CapacityGib: pulumi.String("100"),
//				ShareName:   pulumi.String("source-volume"),
//				StoragePool: sourcePool.Name,
//				Protocols: pulumi.StringArray{
//					pulumi.String("NFSV3"),
//				},
//				DeletionPolicy: pulumi.String("FORCE"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netapp.NewVolumeReplication(ctx, "test_replication", &netapp.VolumeReplicationArgs{
//				Location:            sourceVolume.Location,
//				VolumeName:          sourceVolume.Name,
//				Name:                pulumi.String("test-replication"),
//				ReplicationSchedule: pulumi.String("EVERY_10_MINUTES"),
//				Description:         pulumi.String("This is a replication resource"),
//				DestinationVolumeParameters: &netapp.VolumeReplicationDestinationVolumeParametersArgs{
//					StoragePool: destinationPool.ID(),
//					VolumeId:    pulumi.String("destination-volume"),
//					ShareName:   pulumi.String("source-volume"),
//					Description: pulumi.String("This is a replicated volume"),
//				},
//				DeleteDestinationVolume: pulumi.Bool(true),
//				WaitForMirror:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VolumeReplication can be imported using any of these accepted formats:
//
//   - `projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}`
//
//   - `{{project}}/{{location}}/{{volume_name}}/{{name}}`
//
//   - `{{location}}/{{volume_name}}/{{name}}`
//
//     When using the `pulumi import` command, VolumeReplication can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{project}}/{{location}}/{{volume_name}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{location}}/{{volume_name}}/{{name}}
// ```
type VolumeReplication struct {
	pulumi.CustomResourceState

	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
	// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
	// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
	// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
	// avoid accidental volume deletion. Handle with care. Default is false.
	DeleteDestinationVolume pulumi.BoolPtrOutput `pulumi:"deleteDestinationVolume"`
	// An description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
	DestinationVolume pulumi.StringOutput `pulumi:"destinationVolume"`
	// Destination volume parameters.
	// Structure is documented below.
	DestinationVolumeParameters VolumeReplicationDestinationVolumeParametersPtrOutput `pulumi:"destinationVolumeParameters"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
	// currently receives an update and stopping the update might be undesirable. Set this parameter to true
	// to stop anyway. All data transferred to the destination will be discarded and content of destination
	// volume will remain at the state of the last successful update. Default is false.
	ForceStopping pulumi.BoolPtrOutput `pulumi:"forceStopping"`
	// Condition of the relationship. Can be one of the following:
	// - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
	// - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
	Healthy pulumi.BoolOutput `pulumi:"healthy"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location pulumi.StringOutput `pulumi:"location"`
	// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
	// in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
	// transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
	// currently receives an update. Updated every 5 minutes.
	MirrorState pulumi.StringOutput `pulumi:"mirrorState"`
	// The name of the replication. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
	// and act independently from the source volume.
	// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
	// done to the destination volume with the content of the source volume.
	ReplicationEnabled pulumi.BoolPtrOutput `pulumi:"replicationEnabled"`
	// Specifies the replication interval.
	// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
	ReplicationSchedule pulumi.StringOutput `pulumi:"replicationSchedule"`
	// Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
	// the source or destination volume. For resume and revert and resume operations it is critical to understand
	// which volume is the source volume, since it will overwrite changes done to the destination volume.
	Role pulumi.StringOutput `pulumi:"role"`
	// Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
	SourceVolume pulumi.StringOutput `pulumi:"sourceVolume"`
	// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
	State pulumi.StringOutput `pulumi:"state"`
	// State details of the replication resource.
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// Replication transfer statistics. All statistics are updated every 5 minutes.
	// Structure is documented below.
	TransferStats VolumeReplicationTransferStatArrayOutput `pulumi:"transferStats"`
	// The name of the existing source volume.
	VolumeName pulumi.StringOutput `pulumi:"volumeName"`
	// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
	// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
	// parameter to true. Default is false.
	WaitForMirror pulumi.BoolPtrOutput `pulumi:"waitForMirror"`
}

// NewVolumeReplication registers a new resource with the given unique name, arguments, and options.
func NewVolumeReplication(ctx *pulumi.Context,
	name string, args *VolumeReplicationArgs, opts ...pulumi.ResourceOption) (*VolumeReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ReplicationSchedule == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationSchedule'")
	}
	if args.VolumeName == nil {
		return nil, errors.New("invalid value for required argument 'VolumeName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeReplication
	err := ctx.RegisterResource("gcp:netapp/volumeReplication:VolumeReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeReplication gets an existing VolumeReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeReplicationState, opts ...pulumi.ResourceOption) (*VolumeReplication, error) {
	var resource VolumeReplication
	err := ctx.ReadResource("gcp:netapp/volumeReplication:VolumeReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeReplication resources.
type volumeReplicationState struct {
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime *string `pulumi:"createTime"`
	// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
	// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
	// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
	// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
	// avoid accidental volume deletion. Handle with care. Default is false.
	DeleteDestinationVolume *bool `pulumi:"deleteDestinationVolume"`
	// An description of this resource.
	Description *string `pulumi:"description"`
	// Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
	DestinationVolume *string `pulumi:"destinationVolume"`
	// Destination volume parameters.
	// Structure is documented below.
	DestinationVolumeParameters *VolumeReplicationDestinationVolumeParameters `pulumi:"destinationVolumeParameters"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
	// currently receives an update and stopping the update might be undesirable. Set this parameter to true
	// to stop anyway. All data transferred to the destination will be discarded and content of destination
	// volume will remain at the state of the last successful update. Default is false.
	ForceStopping *bool `pulumi:"forceStopping"`
	// Condition of the relationship. Can be one of the following:
	// - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
	// - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
	Healthy *bool `pulumi:"healthy"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location *string `pulumi:"location"`
	// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
	// in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
	// transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
	// currently receives an update. Updated every 5 minutes.
	MirrorState *string `pulumi:"mirrorState"`
	// The name of the replication. Needs to be unique per location.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
	// and act independently from the source volume.
	// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
	// done to the destination volume with the content of the source volume.
	ReplicationEnabled *bool `pulumi:"replicationEnabled"`
	// Specifies the replication interval.
	// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
	ReplicationSchedule *string `pulumi:"replicationSchedule"`
	// Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
	// the source or destination volume. For resume and revert and resume operations it is critical to understand
	// which volume is the source volume, since it will overwrite changes done to the destination volume.
	Role *string `pulumi:"role"`
	// Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
	SourceVolume *string `pulumi:"sourceVolume"`
	// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
	State *string `pulumi:"state"`
	// State details of the replication resource.
	StateDetails *string `pulumi:"stateDetails"`
	// Replication transfer statistics. All statistics are updated every 5 minutes.
	// Structure is documented below.
	TransferStats []VolumeReplicationTransferStat `pulumi:"transferStats"`
	// The name of the existing source volume.
	VolumeName *string `pulumi:"volumeName"`
	// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
	// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
	// parameter to true. Default is false.
	WaitForMirror *bool `pulumi:"waitForMirror"`
}

type VolumeReplicationState struct {
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringPtrInput
	// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
	// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
	// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
	// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
	// avoid accidental volume deletion. Handle with care. Default is false.
	DeleteDestinationVolume pulumi.BoolPtrInput
	// An description of this resource.
	Description pulumi.StringPtrInput
	// Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
	DestinationVolume pulumi.StringPtrInput
	// Destination volume parameters.
	// Structure is documented below.
	DestinationVolumeParameters VolumeReplicationDestinationVolumeParametersPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
	// currently receives an update and stopping the update might be undesirable. Set this parameter to true
	// to stop anyway. All data transferred to the destination will be discarded and content of destination
	// volume will remain at the state of the last successful update. Default is false.
	ForceStopping pulumi.BoolPtrInput
	// Condition of the relationship. Can be one of the following:
	// - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
	// - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
	Healthy pulumi.BoolPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location pulumi.StringPtrInput
	// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
	// in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
	// transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
	// currently receives an update. Updated every 5 minutes.
	MirrorState pulumi.StringPtrInput
	// The name of the replication. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
	// and act independently from the source volume.
	// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
	// done to the destination volume with the content of the source volume.
	ReplicationEnabled pulumi.BoolPtrInput
	// Specifies the replication interval.
	// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
	ReplicationSchedule pulumi.StringPtrInput
	// Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
	// the source or destination volume. For resume and revert and resume operations it is critical to understand
	// which volume is the source volume, since it will overwrite changes done to the destination volume.
	Role pulumi.StringPtrInput
	// Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
	SourceVolume pulumi.StringPtrInput
	// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
	State pulumi.StringPtrInput
	// State details of the replication resource.
	StateDetails pulumi.StringPtrInput
	// Replication transfer statistics. All statistics are updated every 5 minutes.
	// Structure is documented below.
	TransferStats VolumeReplicationTransferStatArrayInput
	// The name of the existing source volume.
	VolumeName pulumi.StringPtrInput
	// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
	// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
	// parameter to true. Default is false.
	WaitForMirror pulumi.BoolPtrInput
}

func (VolumeReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeReplicationState)(nil)).Elem()
}

type volumeReplicationArgs struct {
	// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
	// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
	// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
	// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
	// avoid accidental volume deletion. Handle with care. Default is false.
	DeleteDestinationVolume *bool `pulumi:"deleteDestinationVolume"`
	// An description of this resource.
	Description *string `pulumi:"description"`
	// Destination volume parameters.
	// Structure is documented below.
	DestinationVolumeParameters *VolumeReplicationDestinationVolumeParameters `pulumi:"destinationVolumeParameters"`
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
	// currently receives an update and stopping the update might be undesirable. Set this parameter to true
	// to stop anyway. All data transferred to the destination will be discarded and content of destination
	// volume will remain at the state of the last successful update. Default is false.
	ForceStopping *bool `pulumi:"forceStopping"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location string `pulumi:"location"`
	// The name of the replication. Needs to be unique per location.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
	// and act independently from the source volume.
	// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
	// done to the destination volume with the content of the source volume.
	ReplicationEnabled *bool `pulumi:"replicationEnabled"`
	// Specifies the replication interval.
	// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
	ReplicationSchedule string `pulumi:"replicationSchedule"`
	// The name of the existing source volume.
	VolumeName string `pulumi:"volumeName"`
	// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
	// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
	// parameter to true. Default is false.
	WaitForMirror *bool `pulumi:"waitForMirror"`
}

// The set of arguments for constructing a VolumeReplication resource.
type VolumeReplicationArgs struct {
	// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
	// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
	// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
	// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
	// avoid accidental volume deletion. Handle with care. Default is false.
	DeleteDestinationVolume pulumi.BoolPtrInput
	// An description of this resource.
	Description pulumi.StringPtrInput
	// Destination volume parameters.
	// Structure is documented below.
	DestinationVolumeParameters VolumeReplicationDestinationVolumeParametersPtrInput
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
	// currently receives an update and stopping the update might be undesirable. Set this parameter to true
	// to stop anyway. All data transferred to the destination will be discarded and content of destination
	// volume will remain at the state of the last successful update. Default is false.
	ForceStopping pulumi.BoolPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location pulumi.StringInput
	// The name of the replication. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
	// and act independently from the source volume.
	// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
	// done to the destination volume with the content of the source volume.
	ReplicationEnabled pulumi.BoolPtrInput
	// Specifies the replication interval.
	// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
	ReplicationSchedule pulumi.StringInput
	// The name of the existing source volume.
	VolumeName pulumi.StringInput
	// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
	// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
	// parameter to true. Default is false.
	WaitForMirror pulumi.BoolPtrInput
}

func (VolumeReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeReplicationArgs)(nil)).Elem()
}

type VolumeReplicationInput interface {
	pulumi.Input

	ToVolumeReplicationOutput() VolumeReplicationOutput
	ToVolumeReplicationOutputWithContext(ctx context.Context) VolumeReplicationOutput
}

func (*VolumeReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeReplication)(nil)).Elem()
}

func (i *VolumeReplication) ToVolumeReplicationOutput() VolumeReplicationOutput {
	return i.ToVolumeReplicationOutputWithContext(context.Background())
}

func (i *VolumeReplication) ToVolumeReplicationOutputWithContext(ctx context.Context) VolumeReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationOutput)
}

// VolumeReplicationArrayInput is an input type that accepts VolumeReplicationArray and VolumeReplicationArrayOutput values.
// You can construct a concrete instance of `VolumeReplicationArrayInput` via:
//
//	VolumeReplicationArray{ VolumeReplicationArgs{...} }
type VolumeReplicationArrayInput interface {
	pulumi.Input

	ToVolumeReplicationArrayOutput() VolumeReplicationArrayOutput
	ToVolumeReplicationArrayOutputWithContext(context.Context) VolumeReplicationArrayOutput
}

type VolumeReplicationArray []VolumeReplicationInput

func (VolumeReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeReplication)(nil)).Elem()
}

func (i VolumeReplicationArray) ToVolumeReplicationArrayOutput() VolumeReplicationArrayOutput {
	return i.ToVolumeReplicationArrayOutputWithContext(context.Background())
}

func (i VolumeReplicationArray) ToVolumeReplicationArrayOutputWithContext(ctx context.Context) VolumeReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationArrayOutput)
}

// VolumeReplicationMapInput is an input type that accepts VolumeReplicationMap and VolumeReplicationMapOutput values.
// You can construct a concrete instance of `VolumeReplicationMapInput` via:
//
//	VolumeReplicationMap{ "key": VolumeReplicationArgs{...} }
type VolumeReplicationMapInput interface {
	pulumi.Input

	ToVolumeReplicationMapOutput() VolumeReplicationMapOutput
	ToVolumeReplicationMapOutputWithContext(context.Context) VolumeReplicationMapOutput
}

type VolumeReplicationMap map[string]VolumeReplicationInput

func (VolumeReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeReplication)(nil)).Elem()
}

func (i VolumeReplicationMap) ToVolumeReplicationMapOutput() VolumeReplicationMapOutput {
	return i.ToVolumeReplicationMapOutputWithContext(context.Background())
}

func (i VolumeReplicationMap) ToVolumeReplicationMapOutputWithContext(ctx context.Context) VolumeReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeReplicationMapOutput)
}

type VolumeReplicationOutput struct{ *pulumi.OutputState }

func (VolumeReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeReplication)(nil)).Elem()
}

func (o VolumeReplicationOutput) ToVolumeReplicationOutput() VolumeReplicationOutput {
	return o
}

func (o VolumeReplicationOutput) ToVolumeReplicationOutputWithContext(ctx context.Context) VolumeReplicationOutput {
	return o
}

// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o VolumeReplicationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
// avoid accidental volume deletion. Handle with care. Default is false.
func (o VolumeReplicationOutput) DeleteDestinationVolume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.BoolPtrOutput { return v.DeleteDestinationVolume }).(pulumi.BoolPtrOutput)
}

// An description of this resource.
func (o VolumeReplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
func (o VolumeReplicationOutput) DestinationVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.DestinationVolume }).(pulumi.StringOutput)
}

// Destination volume parameters.
// Structure is documented below.
func (o VolumeReplicationOutput) DestinationVolumeParameters() VolumeReplicationDestinationVolumeParametersPtrOutput {
	return o.ApplyT(func(v *VolumeReplication) VolumeReplicationDestinationVolumeParametersPtrOutput {
		return v.DestinationVolumeParameters
	}).(VolumeReplicationDestinationVolumeParametersPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o VolumeReplicationOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
// currently receives an update and stopping the update might be undesirable. Set this parameter to true
// to stop anyway. All data transferred to the destination will be discarded and content of destination
// volume will remain at the state of the last successful update. Default is false.
func (o VolumeReplicationOutput) ForceStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.BoolPtrOutput { return v.ForceStopping }).(pulumi.BoolPtrOutput)
}

// Condition of the relationship. Can be one of the following:
// - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
// - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
func (o VolumeReplicationOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.BoolOutput { return v.Healthy }).(pulumi.BoolOutput)
}

// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o VolumeReplicationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of region for this resource. The resource needs to be created in the region of the destination volume.
func (o VolumeReplicationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
// in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
// transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
// currently receives an update. Updated every 5 minutes.
func (o VolumeReplicationOutput) MirrorState() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.MirrorState }).(pulumi.StringOutput)
}

// The name of the replication. Needs to be unique per location.
//
// ***
func (o VolumeReplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o VolumeReplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o VolumeReplicationOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
// and act independently from the source volume.
// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
// done to the destination volume with the content of the source volume.
func (o VolumeReplicationOutput) ReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.BoolPtrOutput { return v.ReplicationEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the replication interval.
// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
func (o VolumeReplicationOutput) ReplicationSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.ReplicationSchedule }).(pulumi.StringOutput)
}

// Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
// the source or destination volume. For resume and revert and resume operations it is critical to understand
// which volume is the source volume, since it will overwrite changes done to the destination volume.
func (o VolumeReplicationOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
func (o VolumeReplicationOutput) SourceVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.SourceVolume }).(pulumi.StringOutput)
}

// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
func (o VolumeReplicationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// State details of the replication resource.
func (o VolumeReplicationOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// Replication transfer statistics. All statistics are updated every 5 minutes.
// Structure is documented below.
func (o VolumeReplicationOutput) TransferStats() VolumeReplicationTransferStatArrayOutput {
	return o.ApplyT(func(v *VolumeReplication) VolumeReplicationTransferStatArrayOutput { return v.TransferStats }).(VolumeReplicationTransferStatArrayOutput)
}

// The name of the existing source volume.
func (o VolumeReplicationOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.StringOutput { return v.VolumeName }).(pulumi.StringOutput)
}

// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
// parameter to true. Default is false.
func (o VolumeReplicationOutput) WaitForMirror() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeReplication) pulumi.BoolPtrOutput { return v.WaitForMirror }).(pulumi.BoolPtrOutput)
}

type VolumeReplicationArrayOutput struct{ *pulumi.OutputState }

func (VolumeReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeReplication)(nil)).Elem()
}

func (o VolumeReplicationArrayOutput) ToVolumeReplicationArrayOutput() VolumeReplicationArrayOutput {
	return o
}

func (o VolumeReplicationArrayOutput) ToVolumeReplicationArrayOutputWithContext(ctx context.Context) VolumeReplicationArrayOutput {
	return o
}

func (o VolumeReplicationArrayOutput) Index(i pulumi.IntInput) VolumeReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeReplication {
		return vs[0].([]*VolumeReplication)[vs[1].(int)]
	}).(VolumeReplicationOutput)
}

type VolumeReplicationMapOutput struct{ *pulumi.OutputState }

func (VolumeReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeReplication)(nil)).Elem()
}

func (o VolumeReplicationMapOutput) ToVolumeReplicationMapOutput() VolumeReplicationMapOutput {
	return o
}

func (o VolumeReplicationMapOutput) ToVolumeReplicationMapOutputWithContext(ctx context.Context) VolumeReplicationMapOutput {
	return o
}

func (o VolumeReplicationMapOutput) MapIndex(k pulumi.StringInput) VolumeReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeReplication {
		return vs[0].(map[string]*VolumeReplication)[vs[1].(string)]
	}).(VolumeReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationInput)(nil)).Elem(), &VolumeReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationArrayInput)(nil)).Elem(), VolumeReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeReplicationMapInput)(nil)).Elem(), VolumeReplicationMap{})
	pulumi.RegisterOutputType(VolumeReplicationOutput{})
	pulumi.RegisterOutputType(VolumeReplicationArrayOutput{})
	pulumi.RegisterOutputType(VolumeReplicationMapOutput{})
}
