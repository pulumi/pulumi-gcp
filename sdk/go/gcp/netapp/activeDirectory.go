// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ActiveDirectory is the public representation of the active directory config.
//
// To get more information about ActiveDirectory, see:
//
// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.activeDirectories)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/active-directory/about-ad)
//
// ## Example Usage
//
// ### Netapp Active Directory Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := netapp.NewActiveDirectory(ctx, "test_active_directory_full", &netapp.ActiveDirectoryArgs{
//				Name:          pulumi.String("test-active-directory-full"),
//				Location:      pulumi.String("us-central1"),
//				Domain:        pulumi.String("ad.internal"),
//				Dns:           pulumi.String("172.30.64.3"),
//				NetBiosPrefix: pulumi.String("smbserver"),
//				Username:      pulumi.String("user"),
//				Password:      pulumi.String("pass"),
//				AesEncryption: pulumi.Bool(false),
//				BackupOperators: pulumi.StringArray{
//					pulumi.String("test1"),
//					pulumi.String("test2"),
//				},
//				Administrators: pulumi.StringArray{
//					pulumi.String("test1"),
//					pulumi.String("test2"),
//				},
//				Description:          pulumi.String("ActiveDirectory is the public representation of the active directory config."),
//				EncryptDcConnections: pulumi.Bool(false),
//				KdcHostname:          pulumi.String("hostname"),
//				KdcIp:                pulumi.String("10.10.0.11"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				LdapSigning:        pulumi.Bool(false),
//				NfsUsersWithLdap:   pulumi.Bool(false),
//				OrganizationalUnit: pulumi.String("CN=Computers"),
//				SecurityOperators: pulumi.StringArray{
//					pulumi.String("test1"),
//					pulumi.String("test2"),
//				},
//				Site: pulumi.String("test-site"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ActiveDirectory can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, ActiveDirectory can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default {{location}}/{{name}}
// ```
type ActiveDirectory struct {
	pulumi.CustomResourceState

	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators pulumi.StringArrayOutput `pulumi:"administrators"`
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption pulumi.BoolPtrOutput `pulumi:"aesEncryption"`
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
	BackupOperators pulumi.StringArrayOutput `pulumi:"backupOperators"`
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns pulumi.StringOutput `pulumi:"dns"`
	// Fully qualified domain name for the Active Directory domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections pulumi.BoolPtrOutput `pulumi:"encryptDcConnections"`
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
	KdcHostname pulumi.StringPtrOutput `pulumi:"kdcHostname"`
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp pulumi.StringPtrOutput `pulumi:"kdcIp"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrOutput `pulumi:"ldapSigning"`
	// Name of the region for the policy to apply to.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name pulumi.StringOutput `pulumi:"name"`
	// NetBIOS name prefix of the server to be created.
	// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
	NetBiosPrefix pulumi.StringOutput `pulumi:"netBiosPrefix"`
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
	// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap pulumi.BoolPtrOutput `pulumi:"nfsUsersWithLdap"`
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
	// Defaults to `CN=Computers` if left empty.
	OrganizationalUnit pulumi.StringOutput `pulumi:"organizationalUnit"`
	Password           pulumi.StringOutput `pulumi:"password"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
	SecurityOperators pulumi.StringArrayOutput `pulumi:"securityOperators"`
	// Specifies an Active Directory site to manage domain controller selection.
	// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
	Site pulumi.StringPtrOutput `pulumi:"site"`
	// The state of the Active Directory policy (not the Active Directory itself).
	State pulumi.StringOutput `pulumi:"state"`
	// The state details of the Active Directory.
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewActiveDirectory registers a new resource with the given unique name, arguments, and options.
func NewActiveDirectory(ctx *pulumi.Context,
	name string, args *ActiveDirectoryArgs, opts ...pulumi.ResourceOption) (*ActiveDirectory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dns == nil {
		return nil, errors.New("invalid value for required argument 'Dns'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.NetBiosPrefix == nil {
		return nil, errors.New("invalid value for required argument 'NetBiosPrefix'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"password",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActiveDirectory
	err := ctx.RegisterResource("gcp:netapp/activeDirectory:ActiveDirectory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveDirectory gets an existing ActiveDirectory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveDirectory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveDirectoryState, opts ...pulumi.ResourceOption) (*ActiveDirectory, error) {
	var resource ActiveDirectory
	err := ctx.ReadResource("gcp:netapp/activeDirectory:ActiveDirectory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveDirectory resources.
type activeDirectoryState struct {
	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators []string `pulumi:"administrators"`
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption *bool `pulumi:"aesEncryption"`
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
	BackupOperators []string `pulumi:"backupOperators"`
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime *string `pulumi:"createTime"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns *string `pulumi:"dns"`
	// Fully qualified domain name for the Active Directory domain.
	Domain *string `pulumi:"domain"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections *bool `pulumi:"encryptDcConnections"`
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
	KdcHostname *string `pulumi:"kdcHostname"`
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp *string `pulumi:"kdcIp"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning *bool `pulumi:"ldapSigning"`
	// Name of the region for the policy to apply to.
	Location *string `pulumi:"location"`
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name *string `pulumi:"name"`
	// NetBIOS name prefix of the server to be created.
	// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
	NetBiosPrefix *string `pulumi:"netBiosPrefix"`
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
	// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap *bool `pulumi:"nfsUsersWithLdap"`
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
	// Defaults to `CN=Computers` if left empty.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	Password           *string `pulumi:"password"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
	SecurityOperators []string `pulumi:"securityOperators"`
	// Specifies an Active Directory site to manage domain controller selection.
	// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
	Site *string `pulumi:"site"`
	// The state of the Active Directory policy (not the Active Directory itself).
	State *string `pulumi:"state"`
	// The state details of the Active Directory.
	StateDetails *string `pulumi:"stateDetails"`
	// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
	Username *string `pulumi:"username"`
}

type ActiveDirectoryState struct {
	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators pulumi.StringArrayInput
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption pulumi.BoolPtrInput
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
	BackupOperators pulumi.StringArrayInput
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns pulumi.StringPtrInput
	// Fully qualified domain name for the Active Directory domain.
	Domain pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections pulumi.BoolPtrInput
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
	KdcHostname pulumi.StringPtrInput
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp pulumi.StringPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrInput
	// Name of the region for the policy to apply to.
	Location pulumi.StringPtrInput
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name pulumi.StringPtrInput
	// NetBIOS name prefix of the server to be created.
	// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
	NetBiosPrefix pulumi.StringPtrInput
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
	// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap pulumi.BoolPtrInput
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
	// Defaults to `CN=Computers` if left empty.
	OrganizationalUnit pulumi.StringPtrInput
	Password           pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
	SecurityOperators pulumi.StringArrayInput
	// Specifies an Active Directory site to manage domain controller selection.
	// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
	Site pulumi.StringPtrInput
	// The state of the Active Directory policy (not the Active Directory itself).
	State pulumi.StringPtrInput
	// The state details of the Active Directory.
	StateDetails pulumi.StringPtrInput
	// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
	Username pulumi.StringPtrInput
}

func (ActiveDirectoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*activeDirectoryState)(nil)).Elem()
}

type activeDirectoryArgs struct {
	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators []string `pulumi:"administrators"`
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption *bool `pulumi:"aesEncryption"`
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
	BackupOperators []string `pulumi:"backupOperators"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns string `pulumi:"dns"`
	// Fully qualified domain name for the Active Directory domain.
	Domain string `pulumi:"domain"`
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections *bool `pulumi:"encryptDcConnections"`
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
	KdcHostname *string `pulumi:"kdcHostname"`
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp *string `pulumi:"kdcIp"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning *bool `pulumi:"ldapSigning"`
	// Name of the region for the policy to apply to.
	Location string `pulumi:"location"`
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name *string `pulumi:"name"`
	// NetBIOS name prefix of the server to be created.
	// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
	NetBiosPrefix string `pulumi:"netBiosPrefix"`
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
	// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap *bool `pulumi:"nfsUsersWithLdap"`
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
	// Defaults to `CN=Computers` if left empty.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	Password           string  `pulumi:"password"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
	SecurityOperators []string `pulumi:"securityOperators"`
	// Specifies an Active Directory site to manage domain controller selection.
	// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
	Site *string `pulumi:"site"`
	// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ActiveDirectory resource.
type ActiveDirectoryArgs struct {
	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators pulumi.StringArrayInput
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption pulumi.BoolPtrInput
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
	BackupOperators pulumi.StringArrayInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns pulumi.StringInput
	// Fully qualified domain name for the Active Directory domain.
	Domain pulumi.StringInput
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections pulumi.BoolPtrInput
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
	KdcHostname pulumi.StringPtrInput
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp pulumi.StringPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrInput
	// Name of the region for the policy to apply to.
	Location pulumi.StringInput
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name pulumi.StringPtrInput
	// NetBIOS name prefix of the server to be created.
	// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
	NetBiosPrefix pulumi.StringInput
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
	// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap pulumi.BoolPtrInput
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
	// Defaults to `CN=Computers` if left empty.
	OrganizationalUnit pulumi.StringPtrInput
	Password           pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
	SecurityOperators pulumi.StringArrayInput
	// Specifies an Active Directory site to manage domain controller selection.
	// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
	Site pulumi.StringPtrInput
	// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
	Username pulumi.StringInput
}

func (ActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activeDirectoryArgs)(nil)).Elem()
}

type ActiveDirectoryInput interface {
	pulumi.Input

	ToActiveDirectoryOutput() ActiveDirectoryOutput
	ToActiveDirectoryOutputWithContext(ctx context.Context) ActiveDirectoryOutput
}

func (*ActiveDirectory) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveDirectory)(nil)).Elem()
}

func (i *ActiveDirectory) ToActiveDirectoryOutput() ActiveDirectoryOutput {
	return i.ToActiveDirectoryOutputWithContext(context.Background())
}

func (i *ActiveDirectory) ToActiveDirectoryOutputWithContext(ctx context.Context) ActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryOutput)
}

// ActiveDirectoryArrayInput is an input type that accepts ActiveDirectoryArray and ActiveDirectoryArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryArrayInput` via:
//
//	ActiveDirectoryArray{ ActiveDirectoryArgs{...} }
type ActiveDirectoryArrayInput interface {
	pulumi.Input

	ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput
	ToActiveDirectoryArrayOutputWithContext(context.Context) ActiveDirectoryArrayOutput
}

type ActiveDirectoryArray []ActiveDirectoryInput

func (ActiveDirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveDirectory)(nil)).Elem()
}

func (i ActiveDirectoryArray) ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput {
	return i.ToActiveDirectoryArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryArray) ToActiveDirectoryArrayOutputWithContext(ctx context.Context) ActiveDirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryArrayOutput)
}

// ActiveDirectoryMapInput is an input type that accepts ActiveDirectoryMap and ActiveDirectoryMapOutput values.
// You can construct a concrete instance of `ActiveDirectoryMapInput` via:
//
//	ActiveDirectoryMap{ "key": ActiveDirectoryArgs{...} }
type ActiveDirectoryMapInput interface {
	pulumi.Input

	ToActiveDirectoryMapOutput() ActiveDirectoryMapOutput
	ToActiveDirectoryMapOutputWithContext(context.Context) ActiveDirectoryMapOutput
}

type ActiveDirectoryMap map[string]ActiveDirectoryInput

func (ActiveDirectoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveDirectory)(nil)).Elem()
}

func (i ActiveDirectoryMap) ToActiveDirectoryMapOutput() ActiveDirectoryMapOutput {
	return i.ToActiveDirectoryMapOutputWithContext(context.Background())
}

func (i ActiveDirectoryMap) ToActiveDirectoryMapOutputWithContext(ctx context.Context) ActiveDirectoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryMapOutput)
}

type ActiveDirectoryOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveDirectory)(nil)).Elem()
}

func (o ActiveDirectoryOutput) ToActiveDirectoryOutput() ActiveDirectoryOutput {
	return o
}

func (o ActiveDirectoryOutput) ToActiveDirectoryOutputWithContext(ctx context.Context) ActiveDirectoryOutput {
	return o
}

// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
func (o ActiveDirectoryOutput) Administrators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringArrayOutput { return v.Administrators }).(pulumi.StringArrayOutput)
}

// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
func (o ActiveDirectoryOutput) AesEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.BoolPtrOutput { return v.AesEncryption }).(pulumi.BoolPtrOutput)
}

// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
func (o ActiveDirectoryOutput) BackupOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringArrayOutput { return v.BackupOperators }).(pulumi.StringArrayOutput)
}

// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o ActiveDirectoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o ActiveDirectoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Comma separated list of DNS server IP addresses for the Active Directory domain.
func (o ActiveDirectoryOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.Dns }).(pulumi.StringOutput)
}

// Fully qualified domain name for the Active Directory domain.
func (o ActiveDirectoryOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ActiveDirectoryOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
func (o ActiveDirectoryOutput) EncryptDcConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.BoolPtrOutput { return v.EncryptDcConnections }).(pulumi.BoolPtrOutput)
}

// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
func (o ActiveDirectoryOutput) KdcHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringPtrOutput { return v.KdcHostname }).(pulumi.StringPtrOutput)
}

// IP address of the Active Directory server used as Kerberos Key Distribution Center.
func (o ActiveDirectoryOutput) KdcIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringPtrOutput { return v.KdcIp }).(pulumi.StringPtrOutput)
}

// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ActiveDirectoryOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies whether or not the LDAP traffic needs to be signed.
func (o ActiveDirectoryOutput) LdapSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.BoolPtrOutput { return v.LdapSigning }).(pulumi.BoolPtrOutput)
}

// Name of the region for the policy to apply to.
func (o ActiveDirectoryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the Active Directory pool. Needs to be unique per location.
func (o ActiveDirectoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NetBIOS name prefix of the server to be created.
// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
func (o ActiveDirectoryOutput) NetBiosPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.NetBiosPrefix }).(pulumi.StringOutput)
}

// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
func (o ActiveDirectoryOutput) NfsUsersWithLdap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.BoolPtrOutput { return v.NfsUsersWithLdap }).(pulumi.BoolPtrOutput)
}

// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
// Defaults to `CN=Computers` if left empty.
func (o ActiveDirectoryOutput) OrganizationalUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.OrganizationalUnit }).(pulumi.StringOutput)
}

func (o ActiveDirectoryOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ActiveDirectoryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ActiveDirectoryOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
func (o ActiveDirectoryOutput) SecurityOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringArrayOutput { return v.SecurityOperators }).(pulumi.StringArrayOutput)
}

// Specifies an Active Directory site to manage domain controller selection.
// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
func (o ActiveDirectoryOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringPtrOutput { return v.Site }).(pulumi.StringPtrOutput)
}

// The state of the Active Directory policy (not the Active Directory itself).
func (o ActiveDirectoryOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The state details of the Active Directory.
func (o ActiveDirectoryOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
func (o ActiveDirectoryOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectory) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ActiveDirectoryArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveDirectory)(nil)).Elem()
}

func (o ActiveDirectoryArrayOutput) ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput {
	return o
}

func (o ActiveDirectoryArrayOutput) ToActiveDirectoryArrayOutputWithContext(ctx context.Context) ActiveDirectoryArrayOutput {
	return o
}

func (o ActiveDirectoryArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActiveDirectory {
		return vs[0].([]*ActiveDirectory)[vs[1].(int)]
	}).(ActiveDirectoryOutput)
}

type ActiveDirectoryMapOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveDirectory)(nil)).Elem()
}

func (o ActiveDirectoryMapOutput) ToActiveDirectoryMapOutput() ActiveDirectoryMapOutput {
	return o
}

func (o ActiveDirectoryMapOutput) ToActiveDirectoryMapOutputWithContext(ctx context.Context) ActiveDirectoryMapOutput {
	return o
}

func (o ActiveDirectoryMapOutput) MapIndex(k pulumi.StringInput) ActiveDirectoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActiveDirectory {
		return vs[0].(map[string]*ActiveDirectory)[vs[1].(string)]
	}).(ActiveDirectoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryInput)(nil)).Elem(), &ActiveDirectory{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryArrayInput)(nil)).Elem(), ActiveDirectoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryMapInput)(nil)).Elem(), ActiveDirectoryMap{})
	pulumi.RegisterOutputType(ActiveDirectoryOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryArrayOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryMapOutput{})
}
