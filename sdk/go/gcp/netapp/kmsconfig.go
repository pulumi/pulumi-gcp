// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// NetApp Volumes always encrypts your data at rest using volume-specific keys.
//
// A CMEK policy (customer-managed encryption key) warps such volume-specific keys in a key stored in Cloud Key Management Service (KMS).
//
// To get more information about kmsconfig, see:
//
// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.kmsConfigs)
// * How-to Guides
//   - [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/cmek/cmek-overview)
//
// ## Example Usage
//
// ### Kms Config Create
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Name:     pulumi.String("key-ring"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			cryptoKey, err := kms.NewCryptoKey(ctx, "crypto_key", &kms.CryptoKeyArgs{
//				Name:    pulumi.String("crypto-name"),
//				KeyRing: keyring.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netapp.NewKmsconfig(ctx, "kmsConfig", &netapp.KmsconfigArgs{
//				Name:          pulumi.String("kms-test"),
//				Description:   pulumi.String("this is a test description"),
//				CryptoKeyName: cryptoKey.ID(),
//				Location:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// kmsconfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, kmsconfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default {{location}}/{{name}}
// ```
type Kmsconfig struct {
	pulumi.CustomResourceState

	// Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
	CryptoKeyName pulumi.StringOutput `pulumi:"cryptoKeyName"`
	// Description for the CMEK policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access.
	// To make the policy work, a CMEK policy check is required, which verifies key access.
	Instructions pulumi.StringOutput `pulumi:"instructions"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the policy location. CMEK policies apply to the whole region.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the CMEK policy.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The Service account which needs to have access to the  provided KMS key.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
}

// NewKmsconfig registers a new resource with the given unique name, arguments, and options.
func NewKmsconfig(ctx *pulumi.Context,
	name string, args *KmsconfigArgs, opts ...pulumi.ResourceOption) (*Kmsconfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CryptoKeyName == nil {
		return nil, errors.New("invalid value for required argument 'CryptoKeyName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Kmsconfig
	err := ctx.RegisterResource("gcp:netapp/kmsconfig:Kmsconfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsconfig gets an existing Kmsconfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsconfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsconfigState, opts ...pulumi.ResourceOption) (*Kmsconfig, error) {
	var resource Kmsconfig
	err := ctx.ReadResource("gcp:netapp/kmsconfig:Kmsconfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kmsconfig resources.
type kmsconfigState struct {
	// Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// Description for the CMEK policy.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access.
	// To make the policy work, a CMEK policy check is required, which verifies key access.
	Instructions *string `pulumi:"instructions"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the policy location. CMEK policies apply to the whole region.
	Location *string `pulumi:"location"`
	// Name of the CMEK policy.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The Service account which needs to have access to the  provided KMS key.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

type KmsconfigState struct {
	// Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
	CryptoKeyName pulumi.StringPtrInput
	// Description for the CMEK policy.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access.
	// To make the policy work, a CMEK policy check is required, which verifies key access.
	Instructions pulumi.StringPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the policy location. CMEK policies apply to the whole region.
	Location pulumi.StringPtrInput
	// Name of the CMEK policy.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The Service account which needs to have access to the  provided KMS key.
	ServiceAccount pulumi.StringPtrInput
}

func (KmsconfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsconfigState)(nil)).Elem()
}

type kmsconfigArgs struct {
	// Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
	CryptoKeyName string `pulumi:"cryptoKeyName"`
	// Description for the CMEK policy.
	Description *string `pulumi:"description"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the policy location. CMEK policies apply to the whole region.
	Location string `pulumi:"location"`
	// Name of the CMEK policy.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Kmsconfig resource.
type KmsconfigArgs struct {
	// Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
	CryptoKeyName pulumi.StringInput
	// Description for the CMEK policy.
	Description pulumi.StringPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the policy location. CMEK policies apply to the whole region.
	Location pulumi.StringInput
	// Name of the CMEK policy.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (KmsconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsconfigArgs)(nil)).Elem()
}

type KmsconfigInput interface {
	pulumi.Input

	ToKmsconfigOutput() KmsconfigOutput
	ToKmsconfigOutputWithContext(ctx context.Context) KmsconfigOutput
}

func (*Kmsconfig) ElementType() reflect.Type {
	return reflect.TypeOf((**Kmsconfig)(nil)).Elem()
}

func (i *Kmsconfig) ToKmsconfigOutput() KmsconfigOutput {
	return i.ToKmsconfigOutputWithContext(context.Background())
}

func (i *Kmsconfig) ToKmsconfigOutputWithContext(ctx context.Context) KmsconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsconfigOutput)
}

// KmsconfigArrayInput is an input type that accepts KmsconfigArray and KmsconfigArrayOutput values.
// You can construct a concrete instance of `KmsconfigArrayInput` via:
//
//	KmsconfigArray{ KmsconfigArgs{...} }
type KmsconfigArrayInput interface {
	pulumi.Input

	ToKmsconfigArrayOutput() KmsconfigArrayOutput
	ToKmsconfigArrayOutputWithContext(context.Context) KmsconfigArrayOutput
}

type KmsconfigArray []KmsconfigInput

func (KmsconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kmsconfig)(nil)).Elem()
}

func (i KmsconfigArray) ToKmsconfigArrayOutput() KmsconfigArrayOutput {
	return i.ToKmsconfigArrayOutputWithContext(context.Background())
}

func (i KmsconfigArray) ToKmsconfigArrayOutputWithContext(ctx context.Context) KmsconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsconfigArrayOutput)
}

// KmsconfigMapInput is an input type that accepts KmsconfigMap and KmsconfigMapOutput values.
// You can construct a concrete instance of `KmsconfigMapInput` via:
//
//	KmsconfigMap{ "key": KmsconfigArgs{...} }
type KmsconfigMapInput interface {
	pulumi.Input

	ToKmsconfigMapOutput() KmsconfigMapOutput
	ToKmsconfigMapOutputWithContext(context.Context) KmsconfigMapOutput
}

type KmsconfigMap map[string]KmsconfigInput

func (KmsconfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kmsconfig)(nil)).Elem()
}

func (i KmsconfigMap) ToKmsconfigMapOutput() KmsconfigMapOutput {
	return i.ToKmsconfigMapOutputWithContext(context.Background())
}

func (i KmsconfigMap) ToKmsconfigMapOutputWithContext(ctx context.Context) KmsconfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsconfigMapOutput)
}

type KmsconfigOutput struct{ *pulumi.OutputState }

func (KmsconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kmsconfig)(nil)).Elem()
}

func (o KmsconfigOutput) ToKmsconfigOutput() KmsconfigOutput {
	return o
}

func (o KmsconfigOutput) ToKmsconfigOutputWithContext(ctx context.Context) KmsconfigOutput {
	return o
}

// Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
func (o KmsconfigOutput) CryptoKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringOutput { return v.CryptoKeyName }).(pulumi.StringOutput)
}

// Description for the CMEK policy.
func (o KmsconfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o KmsconfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access.
// To make the policy work, a CMEK policy check is required, which verifies key access.
func (o KmsconfigOutput) Instructions() pulumi.StringOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringOutput { return v.Instructions }).(pulumi.StringOutput)
}

// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o KmsconfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the policy location. CMEK policies apply to the whole region.
func (o KmsconfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the CMEK policy.
//
// ***
func (o KmsconfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o KmsconfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o KmsconfigOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The Service account which needs to have access to the  provided KMS key.
func (o KmsconfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *Kmsconfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

type KmsconfigArrayOutput struct{ *pulumi.OutputState }

func (KmsconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kmsconfig)(nil)).Elem()
}

func (o KmsconfigArrayOutput) ToKmsconfigArrayOutput() KmsconfigArrayOutput {
	return o
}

func (o KmsconfigArrayOutput) ToKmsconfigArrayOutputWithContext(ctx context.Context) KmsconfigArrayOutput {
	return o
}

func (o KmsconfigArrayOutput) Index(i pulumi.IntInput) KmsconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Kmsconfig {
		return vs[0].([]*Kmsconfig)[vs[1].(int)]
	}).(KmsconfigOutput)
}

type KmsconfigMapOutput struct{ *pulumi.OutputState }

func (KmsconfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kmsconfig)(nil)).Elem()
}

func (o KmsconfigMapOutput) ToKmsconfigMapOutput() KmsconfigMapOutput {
	return o
}

func (o KmsconfigMapOutput) ToKmsconfigMapOutputWithContext(ctx context.Context) KmsconfigMapOutput {
	return o
}

func (o KmsconfigMapOutput) MapIndex(k pulumi.StringInput) KmsconfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Kmsconfig {
		return vs[0].(map[string]*Kmsconfig)[vs[1].(string)]
	}).(KmsconfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KmsconfigInput)(nil)).Elem(), &Kmsconfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmsconfigArrayInput)(nil)).Elem(), KmsconfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmsconfigMapInput)(nil)).Elem(), KmsconfigMap{})
	pulumi.RegisterOutputType(KmsconfigOutput{})
	pulumi.RegisterOutputType(KmsconfigArrayOutput{})
	pulumi.RegisterOutputType(KmsconfigMapOutput{})
}
