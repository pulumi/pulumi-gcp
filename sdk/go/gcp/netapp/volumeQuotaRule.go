// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// QuotaRule specifies the maximum capacity a user or group can use within a volume. They can be used for creating default and individual quota rules.
//
// To get more information about VolumeQuotaRule, see:
//
// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.volumes.quotaRules)
// * How-to Guides
//   - [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/volumes/overview#volume_user_and_group_quotas)
//
// ## Example Usage
//
// ### Netapp Volume Quota Rule Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name: "test-network",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultStoragePool, err := netapp.NewStoragePool(ctx, "default", &netapp.StoragePoolArgs{
//				Name:         pulumi.String("test-pool"),
//				Location:     pulumi.String("us-west2"),
//				ServiceLevel: pulumi.String("PREMIUM"),
//				CapacityGib:  pulumi.String("2048"),
//				Network:      pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			defaultVolume, err := netapp.NewVolume(ctx, "default", &netapp.VolumeArgs{
//				Location:    defaultStoragePool.Location,
//				Name:        pulumi.String("test-volume"),
//				CapacityGib: pulumi.String("100"),
//				ShareName:   pulumi.String("test-volume"),
//				StoragePool: defaultStoragePool.Name,
//				Protocols: pulumi.StringArray{
//					pulumi.String("NFSV3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netapp.NewVolumeQuotaRule(ctx, "test_quota_rule", &netapp.VolumeQuotaRuleArgs{
//				Location:     defaultVolume.Location,
//				VolumeName:   defaultVolume.Name,
//				Type:         pulumi.String("DEFAULT_USER_QUOTA"),
//				DiskLimitMib: pulumi.Int(50),
//				Name:         pulumi.String("test-volume-quota-rule"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				defaultVolume,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VolumeQuotaRule can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/quotaRules/{{name}}`
//
// * `{{project}}/{{location}}/{{volume_name}}/{{name}}`
//
// * `{{location}}/{{volume_name}}/{{name}}`
//
// When using the `pulumi import` command, VolumeQuotaRule can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:netapp/volumeQuotaRule:VolumeQuotaRule default projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/quotaRules/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/volumeQuotaRule:VolumeQuotaRule default {{project}}/{{location}}/{{volume_name}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/volumeQuotaRule:VolumeQuotaRule default {{location}}/{{volume_name}}/{{name}}
// ```
type VolumeQuotaRule struct {
	pulumi.CustomResourceState

	// Create time of the quota rule. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description for the quota rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The maximum allowed capacity in MiB.
	DiskLimitMib pulumi.IntOutput `pulumi:"diskLimitMib"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of the quotaRule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The state of the quota rule. Possible Values : [STATE_UNSPECIFIED, CREATING, UPDATING, READY, DELETING, ERROR]
	State pulumi.StringOutput `pulumi:"state"`
	// State details of the quota rule
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// The quota rule applies to the specified user or group.
	// Valid targets for volumes with NFS protocol enabled:
	// - UNIX UID for individual user quota
	// - UNIX GID for individual group quota
	//   Valid targets for volumes with SMB protocol enabled:
	// - Windows SID for individual user quota
	//   Leave empty for default quotas
	Target pulumi.StringPtrOutput `pulumi:"target"`
	// Types of Quota Rule.
	// Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Name of the volume to create the quotaRule in.
	VolumeName pulumi.StringOutput `pulumi:"volumeName"`
}

// NewVolumeQuotaRule registers a new resource with the given unique name, arguments, and options.
func NewVolumeQuotaRule(ctx *pulumi.Context,
	name string, args *VolumeQuotaRuleArgs, opts ...pulumi.ResourceOption) (*VolumeQuotaRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskLimitMib == nil {
		return nil, errors.New("invalid value for required argument 'DiskLimitMib'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VolumeName == nil {
		return nil, errors.New("invalid value for required argument 'VolumeName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeQuotaRule
	err := ctx.RegisterResource("gcp:netapp/volumeQuotaRule:VolumeQuotaRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeQuotaRule gets an existing VolumeQuotaRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeQuotaRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeQuotaRuleState, opts ...pulumi.ResourceOption) (*VolumeQuotaRule, error) {
	var resource VolumeQuotaRule
	err := ctx.ReadResource("gcp:netapp/volumeQuotaRule:VolumeQuotaRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeQuotaRule resources.
type volumeQuotaRuleState struct {
	// Create time of the quota rule. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime *string `pulumi:"createTime"`
	// Description for the quota rule.
	Description *string `pulumi:"description"`
	// The maximum allowed capacity in MiB.
	DiskLimitMib *int `pulumi:"diskLimitMib"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
	Location *string `pulumi:"location"`
	// The resource name of the quotaRule.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The state of the quota rule. Possible Values : [STATE_UNSPECIFIED, CREATING, UPDATING, READY, DELETING, ERROR]
	State *string `pulumi:"state"`
	// State details of the quota rule
	StateDetails *string `pulumi:"stateDetails"`
	// The quota rule applies to the specified user or group.
	// Valid targets for volumes with NFS protocol enabled:
	// - UNIX UID for individual user quota
	// - UNIX GID for individual group quota
	//   Valid targets for volumes with SMB protocol enabled:
	// - Windows SID for individual user quota
	//   Leave empty for default quotas
	Target *string `pulumi:"target"`
	// Types of Quota Rule.
	// Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
	Type *string `pulumi:"type"`
	// Name of the volume to create the quotaRule in.
	VolumeName *string `pulumi:"volumeName"`
}

type VolumeQuotaRuleState struct {
	// Create time of the quota rule. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringPtrInput
	// Description for the quota rule.
	Description pulumi.StringPtrInput
	// The maximum allowed capacity in MiB.
	DiskLimitMib pulumi.IntPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
	Location pulumi.StringPtrInput
	// The resource name of the quotaRule.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The state of the quota rule. Possible Values : [STATE_UNSPECIFIED, CREATING, UPDATING, READY, DELETING, ERROR]
	State pulumi.StringPtrInput
	// State details of the quota rule
	StateDetails pulumi.StringPtrInput
	// The quota rule applies to the specified user or group.
	// Valid targets for volumes with NFS protocol enabled:
	// - UNIX UID for individual user quota
	// - UNIX GID for individual group quota
	//   Valid targets for volumes with SMB protocol enabled:
	// - Windows SID for individual user quota
	//   Leave empty for default quotas
	Target pulumi.StringPtrInput
	// Types of Quota Rule.
	// Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
	Type pulumi.StringPtrInput
	// Name of the volume to create the quotaRule in.
	VolumeName pulumi.StringPtrInput
}

func (VolumeQuotaRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeQuotaRuleState)(nil)).Elem()
}

type volumeQuotaRuleArgs struct {
	// Description for the quota rule.
	Description *string `pulumi:"description"`
	// The maximum allowed capacity in MiB.
	DiskLimitMib int `pulumi:"diskLimitMib"`
	// Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
	Location *string `pulumi:"location"`
	// The resource name of the quotaRule.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The quota rule applies to the specified user or group.
	// Valid targets for volumes with NFS protocol enabled:
	// - UNIX UID for individual user quota
	// - UNIX GID for individual group quota
	//   Valid targets for volumes with SMB protocol enabled:
	// - Windows SID for individual user quota
	//   Leave empty for default quotas
	Target *string `pulumi:"target"`
	// Types of Quota Rule.
	// Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
	Type string `pulumi:"type"`
	// Name of the volume to create the quotaRule in.
	VolumeName string `pulumi:"volumeName"`
}

// The set of arguments for constructing a VolumeQuotaRule resource.
type VolumeQuotaRuleArgs struct {
	// Description for the quota rule.
	Description pulumi.StringPtrInput
	// The maximum allowed capacity in MiB.
	DiskLimitMib pulumi.IntInput
	// Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
	Location pulumi.StringPtrInput
	// The resource name of the quotaRule.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The quota rule applies to the specified user or group.
	// Valid targets for volumes with NFS protocol enabled:
	// - UNIX UID for individual user quota
	// - UNIX GID for individual group quota
	//   Valid targets for volumes with SMB protocol enabled:
	// - Windows SID for individual user quota
	//   Leave empty for default quotas
	Target pulumi.StringPtrInput
	// Types of Quota Rule.
	// Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
	Type pulumi.StringInput
	// Name of the volume to create the quotaRule in.
	VolumeName pulumi.StringInput
}

func (VolumeQuotaRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeQuotaRuleArgs)(nil)).Elem()
}

type VolumeQuotaRuleInput interface {
	pulumi.Input

	ToVolumeQuotaRuleOutput() VolumeQuotaRuleOutput
	ToVolumeQuotaRuleOutputWithContext(ctx context.Context) VolumeQuotaRuleOutput
}

func (*VolumeQuotaRule) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeQuotaRule)(nil)).Elem()
}

func (i *VolumeQuotaRule) ToVolumeQuotaRuleOutput() VolumeQuotaRuleOutput {
	return i.ToVolumeQuotaRuleOutputWithContext(context.Background())
}

func (i *VolumeQuotaRule) ToVolumeQuotaRuleOutputWithContext(ctx context.Context) VolumeQuotaRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeQuotaRuleOutput)
}

// VolumeQuotaRuleArrayInput is an input type that accepts VolumeQuotaRuleArray and VolumeQuotaRuleArrayOutput values.
// You can construct a concrete instance of `VolumeQuotaRuleArrayInput` via:
//
//	VolumeQuotaRuleArray{ VolumeQuotaRuleArgs{...} }
type VolumeQuotaRuleArrayInput interface {
	pulumi.Input

	ToVolumeQuotaRuleArrayOutput() VolumeQuotaRuleArrayOutput
	ToVolumeQuotaRuleArrayOutputWithContext(context.Context) VolumeQuotaRuleArrayOutput
}

type VolumeQuotaRuleArray []VolumeQuotaRuleInput

func (VolumeQuotaRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeQuotaRule)(nil)).Elem()
}

func (i VolumeQuotaRuleArray) ToVolumeQuotaRuleArrayOutput() VolumeQuotaRuleArrayOutput {
	return i.ToVolumeQuotaRuleArrayOutputWithContext(context.Background())
}

func (i VolumeQuotaRuleArray) ToVolumeQuotaRuleArrayOutputWithContext(ctx context.Context) VolumeQuotaRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeQuotaRuleArrayOutput)
}

// VolumeQuotaRuleMapInput is an input type that accepts VolumeQuotaRuleMap and VolumeQuotaRuleMapOutput values.
// You can construct a concrete instance of `VolumeQuotaRuleMapInput` via:
//
//	VolumeQuotaRuleMap{ "key": VolumeQuotaRuleArgs{...} }
type VolumeQuotaRuleMapInput interface {
	pulumi.Input

	ToVolumeQuotaRuleMapOutput() VolumeQuotaRuleMapOutput
	ToVolumeQuotaRuleMapOutputWithContext(context.Context) VolumeQuotaRuleMapOutput
}

type VolumeQuotaRuleMap map[string]VolumeQuotaRuleInput

func (VolumeQuotaRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeQuotaRule)(nil)).Elem()
}

func (i VolumeQuotaRuleMap) ToVolumeQuotaRuleMapOutput() VolumeQuotaRuleMapOutput {
	return i.ToVolumeQuotaRuleMapOutputWithContext(context.Background())
}

func (i VolumeQuotaRuleMap) ToVolumeQuotaRuleMapOutputWithContext(ctx context.Context) VolumeQuotaRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeQuotaRuleMapOutput)
}

type VolumeQuotaRuleOutput struct{ *pulumi.OutputState }

func (VolumeQuotaRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeQuotaRule)(nil)).Elem()
}

func (o VolumeQuotaRuleOutput) ToVolumeQuotaRuleOutput() VolumeQuotaRuleOutput {
	return o
}

func (o VolumeQuotaRuleOutput) ToVolumeQuotaRuleOutputWithContext(ctx context.Context) VolumeQuotaRuleOutput {
	return o
}

// Create time of the quota rule. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o VolumeQuotaRuleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description for the quota rule.
func (o VolumeQuotaRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The maximum allowed capacity in MiB.
func (o VolumeQuotaRuleOutput) DiskLimitMib() pulumi.IntOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.IntOutput { return v.DiskLimitMib }).(pulumi.IntOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o VolumeQuotaRuleOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o VolumeQuotaRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
func (o VolumeQuotaRuleOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of the quotaRule.
func (o VolumeQuotaRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o VolumeQuotaRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o VolumeQuotaRuleOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The state of the quota rule. Possible Values : [STATE_UNSPECIFIED, CREATING, UPDATING, READY, DELETING, ERROR]
func (o VolumeQuotaRuleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// State details of the quota rule
func (o VolumeQuotaRuleOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// The quota rule applies to the specified user or group.
// Valid targets for volumes with NFS protocol enabled:
//   - UNIX UID for individual user quota
//   - UNIX GID for individual group quota
//     Valid targets for volumes with SMB protocol enabled:
//   - Windows SID for individual user quota
//     Leave empty for default quotas
func (o VolumeQuotaRuleOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringPtrOutput { return v.Target }).(pulumi.StringPtrOutput)
}

// Types of Quota Rule.
// Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
func (o VolumeQuotaRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Name of the volume to create the quotaRule in.
func (o VolumeQuotaRuleOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.VolumeName }).(pulumi.StringOutput)
}

type VolumeQuotaRuleArrayOutput struct{ *pulumi.OutputState }

func (VolumeQuotaRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeQuotaRule)(nil)).Elem()
}

func (o VolumeQuotaRuleArrayOutput) ToVolumeQuotaRuleArrayOutput() VolumeQuotaRuleArrayOutput {
	return o
}

func (o VolumeQuotaRuleArrayOutput) ToVolumeQuotaRuleArrayOutputWithContext(ctx context.Context) VolumeQuotaRuleArrayOutput {
	return o
}

func (o VolumeQuotaRuleArrayOutput) Index(i pulumi.IntInput) VolumeQuotaRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeQuotaRule {
		return vs[0].([]*VolumeQuotaRule)[vs[1].(int)]
	}).(VolumeQuotaRuleOutput)
}

type VolumeQuotaRuleMapOutput struct{ *pulumi.OutputState }

func (VolumeQuotaRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeQuotaRule)(nil)).Elem()
}

func (o VolumeQuotaRuleMapOutput) ToVolumeQuotaRuleMapOutput() VolumeQuotaRuleMapOutput {
	return o
}

func (o VolumeQuotaRuleMapOutput) ToVolumeQuotaRuleMapOutputWithContext(ctx context.Context) VolumeQuotaRuleMapOutput {
	return o
}

func (o VolumeQuotaRuleMapOutput) MapIndex(k pulumi.StringInput) VolumeQuotaRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeQuotaRule {
		return vs[0].(map[string]*VolumeQuotaRule)[vs[1].(string)]
	}).(VolumeQuotaRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeQuotaRuleInput)(nil)).Elem(), &VolumeQuotaRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeQuotaRuleArrayInput)(nil)).Elem(), VolumeQuotaRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeQuotaRuleMapInput)(nil)).Elem(), VolumeQuotaRuleMap{})
	pulumi.RegisterOutputType(VolumeQuotaRuleOutput{})
	pulumi.RegisterOutputType(VolumeQuotaRuleArrayOutput{})
	pulumi.RegisterOutputType(VolumeQuotaRuleMapOutput{})
}
