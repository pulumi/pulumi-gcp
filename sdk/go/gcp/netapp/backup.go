// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// NetApp Volumes supports volume backups, which are copies of your volumes
// stored independently from the volume. Backups are stored in backup vaults,
// which are containers for backups. If a volume is lost or deleted, you can
// use backups to restore your data to a new volume.
//
// When you create the first backup of a volume, all of the volume's used
// data is sent to the backup vault. Subsequent backups of the same volume
// only include data that has changed from the previous backup. This allows
// for fast incremental-forever backups and reduces the required capacity
// inside the backup vault.
//
// You can create manual and scheduled backups. Manual backups can be taken
// from a volume or from an existing volume snapshot. Scheduled backups
// require a backup policy.
//
// To get more information about Backup, see:
//
// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.backupVaults.backups)
// * How-to Guides
//   - [Documentation](https://cloud.google.com/netapp/volumes/docs/protect-data/about-volume-backups)
//
// ## Example Usage
//
// ### Netapp Backup
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name: "network",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultStoragePool, err := netapp.NewStoragePool(ctx, "default", &netapp.StoragePoolArgs{
//				Name:         pulumi.String("backup-pool"),
//				Location:     pulumi.String("us-central1"),
//				ServiceLevel: pulumi.String("PREMIUM"),
//				CapacityGib:  pulumi.String("2048"),
//				Network:      pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBackupVault, err := netapp.NewBackupVault(ctx, "default", &netapp.BackupVaultArgs{
//				Name:     pulumi.String("backup-vault"),
//				Location: defaultStoragePool.Location,
//			})
//			if err != nil {
//				return err
//			}
//			defaultVolume, err := netapp.NewVolume(ctx, "default", &netapp.VolumeArgs{
//				Name:        pulumi.String("backup-volume"),
//				Location:    defaultStoragePool.Location,
//				CapacityGib: pulumi.String("100"),
//				ShareName:   pulumi.String("backup-volume"),
//				StoragePool: defaultStoragePool.Name,
//				Protocols: pulumi.StringArray{
//					pulumi.String("NFSV3"),
//				},
//				DeletionPolicy: pulumi.String("FORCE"),
//				BackupConfig: &netapp.VolumeBackupConfigArgs{
//					BackupVault: defaultBackupVault.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netapp.NewBackup(ctx, "test_backup", &netapp.BackupArgs{
//				Name:         pulumi.String("test-backup"),
//				Location:     defaultBackupVault.Location,
//				VaultName:    defaultBackupVault.Name,
//				SourceVolume: defaultVolume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Backup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}`
//
// * `{{project}}/{{location}}/{{vault_name}}/{{name}}`
//
// * `{{location}}/{{vault_name}}/{{name}}`
//
// When using the `pulumi import` command, Backup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:netapp/backup:Backup default projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/backup:Backup default {{project}}/{{location}}/{{vault_name}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:netapp/backup:Backup default {{location}}/{{vault_name}}/{{name}}
// ```
type Backup struct {
	pulumi.CustomResourceState

	// Region in which backup is stored.
	BackupRegion pulumi.StringOutput `pulumi:"backupRegion"`
	// Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
	BackupType pulumi.StringOutput `pulumi:"backupType"`
	// Backups of a volume build incrementally on top of each other. They form a "backup chain".
	// Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
	ChainStorageBytes pulumi.StringOutput `pulumi:"chainStorageBytes"`
	// Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location of the backup.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the backup. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// If specified, backup will be created from the given snapshot. If not specified,
	// there will be a new snapshot taken to initiate the backup creation.
	// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
	SourceSnapshot pulumi.StringPtrOutput `pulumi:"sourceSnapshot"`
	// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
	SourceVolume pulumi.StringPtrOutput `pulumi:"sourceVolume"`
	// The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
	State pulumi.StringOutput `pulumi:"state"`
	// Name of the backup vault to store the backup in.
	VaultName pulumi.StringOutput `pulumi:"vaultName"`
	// Region of the volume from which the backup was created.
	VolumeRegion pulumi.StringOutput `pulumi:"volumeRegion"`
	// Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
	VolumeUsageBytes pulumi.StringOutput `pulumi:"volumeUsageBytes"`
}

// NewBackup registers a new resource with the given unique name, arguments, and options.
func NewBackup(ctx *pulumi.Context,
	name string, args *BackupArgs, opts ...pulumi.ResourceOption) (*Backup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.VaultName == nil {
		return nil, errors.New("invalid value for required argument 'VaultName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Backup
	err := ctx.RegisterResource("gcp:netapp/backup:Backup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackup gets an existing Backup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupState, opts ...pulumi.ResourceOption) (*Backup, error) {
	var resource Backup
	err := ctx.ReadResource("gcp:netapp/backup:Backup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backup resources.
type backupState struct {
	// Region in which backup is stored.
	BackupRegion *string `pulumi:"backupRegion"`
	// Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
	BackupType *string `pulumi:"backupType"`
	// Backups of a volume build incrementally on top of each other. They form a "backup chain".
	// Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
	ChainStorageBytes *string `pulumi:"chainStorageBytes"`
	// Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime *string `pulumi:"createTime"`
	// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of the backup.
	Location *string `pulumi:"location"`
	// The resource name of the backup. Needs to be unique per location.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// If specified, backup will be created from the given snapshot. If not specified,
	// there will be a new snapshot taken to initiate the backup creation.
	// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
	SourceSnapshot *string `pulumi:"sourceSnapshot"`
	// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
	SourceVolume *string `pulumi:"sourceVolume"`
	// The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
	State *string `pulumi:"state"`
	// Name of the backup vault to store the backup in.
	VaultName *string `pulumi:"vaultName"`
	// Region of the volume from which the backup was created.
	VolumeRegion *string `pulumi:"volumeRegion"`
	// Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
	VolumeUsageBytes *string `pulumi:"volumeUsageBytes"`
}

type BackupState struct {
	// Region in which backup is stored.
	BackupRegion pulumi.StringPtrInput
	// Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
	BackupType pulumi.StringPtrInput
	// Backups of a volume build incrementally on top of each other. They form a "backup chain".
	// Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
	ChainStorageBytes pulumi.StringPtrInput
	// Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringPtrInput
	// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of the backup.
	Location pulumi.StringPtrInput
	// The resource name of the backup. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// If specified, backup will be created from the given snapshot. If not specified,
	// there will be a new snapshot taken to initiate the backup creation.
	// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
	SourceSnapshot pulumi.StringPtrInput
	// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
	SourceVolume pulumi.StringPtrInput
	// The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
	State pulumi.StringPtrInput
	// Name of the backup vault to store the backup in.
	VaultName pulumi.StringPtrInput
	// Region of the volume from which the backup was created.
	VolumeRegion pulumi.StringPtrInput
	// Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
	VolumeUsageBytes pulumi.StringPtrInput
}

func (BackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupState)(nil)).Elem()
}

type backupArgs struct {
	// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description *string `pulumi:"description"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of the backup.
	Location string `pulumi:"location"`
	// The resource name of the backup. Needs to be unique per location.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// If specified, backup will be created from the given snapshot. If not specified,
	// there will be a new snapshot taken to initiate the backup creation.
	// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
	SourceSnapshot *string `pulumi:"sourceSnapshot"`
	// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
	SourceVolume *string `pulumi:"sourceVolume"`
	// Name of the backup vault to store the backup in.
	VaultName string `pulumi:"vaultName"`
}

// The set of arguments for constructing a Backup resource.
type BackupArgs struct {
	// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description pulumi.StringPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of the backup.
	Location pulumi.StringInput
	// The resource name of the backup. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// If specified, backup will be created from the given snapshot. If not specified,
	// there will be a new snapshot taken to initiate the backup creation.
	// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
	SourceSnapshot pulumi.StringPtrInput
	// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
	SourceVolume pulumi.StringPtrInput
	// Name of the backup vault to store the backup in.
	VaultName pulumi.StringInput
}

func (BackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupArgs)(nil)).Elem()
}

type BackupInput interface {
	pulumi.Input

	ToBackupOutput() BackupOutput
	ToBackupOutputWithContext(ctx context.Context) BackupOutput
}

func (*Backup) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (i *Backup) ToBackupOutput() BackupOutput {
	return i.ToBackupOutputWithContext(context.Background())
}

func (i *Backup) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupOutput)
}

// BackupArrayInput is an input type that accepts BackupArray and BackupArrayOutput values.
// You can construct a concrete instance of `BackupArrayInput` via:
//
//	BackupArray{ BackupArgs{...} }
type BackupArrayInput interface {
	pulumi.Input

	ToBackupArrayOutput() BackupArrayOutput
	ToBackupArrayOutputWithContext(context.Context) BackupArrayOutput
}

type BackupArray []BackupInput

func (BackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (i BackupArray) ToBackupArrayOutput() BackupArrayOutput {
	return i.ToBackupArrayOutputWithContext(context.Background())
}

func (i BackupArray) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupArrayOutput)
}

// BackupMapInput is an input type that accepts BackupMap and BackupMapOutput values.
// You can construct a concrete instance of `BackupMapInput` via:
//
//	BackupMap{ "key": BackupArgs{...} }
type BackupMapInput interface {
	pulumi.Input

	ToBackupMapOutput() BackupMapOutput
	ToBackupMapOutputWithContext(context.Context) BackupMapOutput
}

type BackupMap map[string]BackupInput

func (BackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (i BackupMap) ToBackupMapOutput() BackupMapOutput {
	return i.ToBackupMapOutputWithContext(context.Background())
}

func (i BackupMap) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupMapOutput)
}

type BackupOutput struct{ *pulumi.OutputState }

func (BackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (o BackupOutput) ToBackupOutput() BackupOutput {
	return o
}

func (o BackupOutput) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return o
}

// Region in which backup is stored.
func (o BackupOutput) BackupRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.BackupRegion }).(pulumi.StringOutput)
}

// Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
func (o BackupOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.BackupType }).(pulumi.StringOutput)
}

// Backups of a volume build incrementally on top of each other. They form a "backup chain".
// Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
func (o BackupOutput) ChainStorageBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.ChainStorageBytes }).(pulumi.StringOutput)
}

// Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o BackupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
func (o BackupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o BackupOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o BackupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location of the backup.
func (o BackupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the backup. Needs to be unique per location.
//
// ***
func (o BackupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BackupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o BackupOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// If specified, backup will be created from the given snapshot. If not specified,
// there will be a new snapshot taken to initiate the backup creation.
// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}“
func (o BackupOutput) SourceSnapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringPtrOutput { return v.SourceSnapshot }).(pulumi.StringPtrOutput)
}

// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}“
func (o BackupOutput) SourceVolume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringPtrOutput { return v.SourceVolume }).(pulumi.StringPtrOutput)
}

// The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
func (o BackupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Name of the backup vault to store the backup in.
func (o BackupOutput) VaultName() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.VaultName }).(pulumi.StringOutput)
}

// Region of the volume from which the backup was created.
func (o BackupOutput) VolumeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.VolumeRegion }).(pulumi.StringOutput)
}

// Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
func (o BackupOutput) VolumeUsageBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.VolumeUsageBytes }).(pulumi.StringOutput)
}

type BackupArrayOutput struct{ *pulumi.OutputState }

func (BackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (o BackupArrayOutput) ToBackupArrayOutput() BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) Index(i pulumi.IntInput) BackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].([]*Backup)[vs[1].(int)]
	}).(BackupOutput)
}

type BackupMapOutput struct{ *pulumi.OutputState }

func (BackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (o BackupMapOutput) ToBackupMapOutput() BackupMapOutput {
	return o
}

func (o BackupMapOutput) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return o
}

func (o BackupMapOutput) MapIndex(k pulumi.StringInput) BackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].(map[string]*Backup)[vs[1].(string)]
	}).(BackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInput)(nil)).Elem(), &Backup{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupArrayInput)(nil)).Elem(), BackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupMapInput)(nil)).Elem(), BackupMap{})
	pulumi.RegisterOutputType(BackupOutput{})
	pulumi.RegisterOutputType(BackupArrayOutput{})
	pulumi.RegisterOutputType(BackupMapOutput{})
}
