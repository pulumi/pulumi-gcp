// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpcaccess

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a Serverless VPC Access connector.
//
// To get more information about Connector, see:
//
// * [API documentation](https://cloud.google.com/vpc/docs/reference/vpcaccess/rest/v1/projects.locations.connectors)
// * How-to Guides
//   - [Configuring Serverless VPC Access](https://cloud.google.com/vpc/docs/configure-serverless-vpc-access)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vpcaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpcaccess.LookupConnector(ctx, &vpcaccess.LookupConnectorArgs{
//				Name: "vpc-con",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vpcaccess.NewConnector(ctx, "connector", &vpcaccess.ConnectorArgs{
//				IpCidrRange: pulumi.String("10.8.0.0/28"),
//				Network:     pulumi.String("default"),
//				Region:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConnector(ctx *pulumi.Context, args *LookupConnectorArgs, opts ...pulumi.InvokeOption) (*LookupConnectorResult, error) {
	var rv LookupConnectorResult
	err := ctx.Invoke("gcp:vpcaccess/getConnector:getConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnector.
type LookupConnectorArgs struct {
	// Name of the resource.
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region in which the resource belongs. If it
	// is not provided, the provider region is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getConnector.
type LookupConnectorResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id            string               `pulumi:"id"`
	IpCidrRange   string               `pulumi:"ipCidrRange"`
	MachineType   string               `pulumi:"machineType"`
	MaxInstances  int                  `pulumi:"maxInstances"`
	MaxThroughput int                  `pulumi:"maxThroughput"`
	MinInstances  int                  `pulumi:"minInstances"`
	MinThroughput int                  `pulumi:"minThroughput"`
	Name          string               `pulumi:"name"`
	Network       string               `pulumi:"network"`
	Project       *string              `pulumi:"project"`
	Region        *string              `pulumi:"region"`
	SelfLink      string               `pulumi:"selfLink"`
	State         string               `pulumi:"state"`
	Subnets       []GetConnectorSubnet `pulumi:"subnets"`
}

func LookupConnectorOutput(ctx *pulumi.Context, args LookupConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectorResult, error) {
			args := v.(LookupConnectorArgs)
			r, err := LookupConnector(ctx, &args, opts...)
			var s LookupConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectorResultOutput)
}

// A collection of arguments for invoking getConnector.
type LookupConnectorOutputArgs struct {
	// Name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The region in which the resource belongs. If it
	// is not provided, the provider region is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getConnector.
type LookupConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorResult)(nil)).Elem()
}

func (o LookupConnectorResultOutput) ToLookupConnectorResultOutput() LookupConnectorResultOutput {
	return o
}

func (o LookupConnectorResultOutput) ToLookupConnectorResultOutputWithContext(ctx context.Context) LookupConnectorResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupConnectorResultOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

func (o LookupConnectorResultOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.MachineType }).(pulumi.StringOutput)
}

func (o LookupConnectorResultOutput) MaxInstances() pulumi.IntOutput {
	return o.ApplyT(func(v LookupConnectorResult) int { return v.MaxInstances }).(pulumi.IntOutput)
}

func (o LookupConnectorResultOutput) MaxThroughput() pulumi.IntOutput {
	return o.ApplyT(func(v LookupConnectorResult) int { return v.MaxThroughput }).(pulumi.IntOutput)
}

func (o LookupConnectorResultOutput) MinInstances() pulumi.IntOutput {
	return o.ApplyT(func(v LookupConnectorResult) int { return v.MinInstances }).(pulumi.IntOutput)
}

func (o LookupConnectorResultOutput) MinThroughput() pulumi.IntOutput {
	return o.ApplyT(func(v LookupConnectorResult) int { return v.MinThroughput }).(pulumi.IntOutput)
}

func (o LookupConnectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupConnectorResultOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.Network }).(pulumi.StringOutput)
}

func (o LookupConnectorResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupConnectorResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupConnectorResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

func (o LookupConnectorResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupConnectorResultOutput) Subnets() GetConnectorSubnetArrayOutput {
	return o.ApplyT(func(v LookupConnectorResult) []GetConnectorSubnet { return v.Subnets }).(GetConnectorSubnetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectorResultOutput{})
}
