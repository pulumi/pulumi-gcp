// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpcaccess

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Serverless VPC Access connector resource.
//
// To get more information about Connector, see:
//
// * [API documentation](https://cloud.google.com/vpc/docs/reference/vpcaccess/rest/v1/projects.locations.connectors)
// * How-to Guides
//   - [Configuring Serverless VPC Access](https://cloud.google.com/vpc/docs/configure-serverless-vpc-access)
//
// ## Example Usage
// ### VPC Access Connector
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vpcaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpcaccess.NewConnector(ctx, "connector", &vpcaccess.ConnectorArgs{
//				IpCidrRange: pulumi.String("10.8.0.0/28"),
//				Network:     pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### VPC Access Connector Shared VPC
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vpcaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			customTestNetwork, err := compute.NewNetwork(ctx, "customTestNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			customTestSubnetwork, err := compute.NewSubnetwork(ctx, "customTestSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.2.0.0/28"),
//				Region:      pulumi.String("us-central1"),
//				Network:     customTestNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpcaccess.NewConnector(ctx, "connector", &vpcaccess.ConnectorArgs{
//				Subnet: &vpcaccess.ConnectorSubnetArgs{
//					Name: customTestSubnetwork.Name,
//				},
//				MachineType: pulumi.String("e2-standard-4"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Connector can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:vpcaccess/connector:Connector default projects/{{project}}/locations/{{region}}/connectors/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vpcaccess/connector:Connector default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vpcaccess/connector:Connector default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vpcaccess/connector:Connector default {{name}}
//
// ```
type Connector struct {
	pulumi.CustomResourceState

	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IpCidrRange pulumi.StringPtrOutput `pulumi:"ipCidrRange"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType pulumi.StringPtrOutput `pulumi:"machineType"`
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances pulumi.IntOutput `pulumi:"maxInstances"`
	// Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
	MaxThroughput pulumi.IntPtrOutput `pulumi:"maxThroughput"`
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances pulumi.IntOutput `pulumi:"minInstances"`
	// Minimum throughput of the connector in Mbps. Default and min is 200.
	MinThroughput pulumi.IntPtrOutput `pulumi:"minThroughput"`
	// Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
	// https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
	Name pulumi.StringOutput `pulumi:"name"`
	// Name or selfLink of the VPC network. Required if `ipCidrRange` is set.
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The fully qualified name of this VPC connector
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// State of the VPC access connector.
	State pulumi.StringOutput `pulumi:"state"`
	// The subnet in which to house the connector
	// Structure is documented below.
	Subnet ConnectorSubnetPtrOutput `pulumi:"subnet"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		args = &ConnectorArgs{}
	}

	var resource Connector
	err := ctx.RegisterResource("gcp:vpcaccess/connector:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("gcp:vpcaccess/connector:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType *string `pulumi:"machineType"`
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances *int `pulumi:"maxInstances"`
	// Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
	MaxThroughput *int `pulumi:"maxThroughput"`
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances *int `pulumi:"minInstances"`
	// Minimum throughput of the connector in Mbps. Default and min is 200.
	MinThroughput *int `pulumi:"minThroughput"`
	// Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
	// https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
	Name *string `pulumi:"name"`
	// Name or selfLink of the VPC network. Required if `ipCidrRange` is set.
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The fully qualified name of this VPC connector
	SelfLink *string `pulumi:"selfLink"`
	// State of the VPC access connector.
	State *string `pulumi:"state"`
	// The subnet in which to house the connector
	// Structure is documented below.
	Subnet *ConnectorSubnet `pulumi:"subnet"`
}

type ConnectorState struct {
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IpCidrRange pulumi.StringPtrInput
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType pulumi.StringPtrInput
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances pulumi.IntPtrInput
	// Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
	MaxThroughput pulumi.IntPtrInput
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances pulumi.IntPtrInput
	// Minimum throughput of the connector in Mbps. Default and min is 200.
	MinThroughput pulumi.IntPtrInput
	// Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
	// https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
	Name pulumi.StringPtrInput
	// Name or selfLink of the VPC network. Required if `ipCidrRange` is set.
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The fully qualified name of this VPC connector
	SelfLink pulumi.StringPtrInput
	// State of the VPC access connector.
	State pulumi.StringPtrInput
	// The subnet in which to house the connector
	// Structure is documented below.
	Subnet ConnectorSubnetPtrInput
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType *string `pulumi:"machineType"`
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances *int `pulumi:"maxInstances"`
	// Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
	MaxThroughput *int `pulumi:"maxThroughput"`
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances *int `pulumi:"minInstances"`
	// Minimum throughput of the connector in Mbps. Default and min is 200.
	MinThroughput *int `pulumi:"minThroughput"`
	// Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
	// https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
	Name *string `pulumi:"name"`
	// Name or selfLink of the VPC network. Required if `ipCidrRange` is set.
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The subnet in which to house the connector
	// Structure is documented below.
	Subnet *ConnectorSubnet `pulumi:"subnet"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IpCidrRange pulumi.StringPtrInput
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType pulumi.StringPtrInput
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances pulumi.IntPtrInput
	// Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
	MaxThroughput pulumi.IntPtrInput
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances pulumi.IntPtrInput
	// Minimum throughput of the connector in Mbps. Default and min is 200.
	MinThroughput pulumi.IntPtrInput
	// Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
	// https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
	Name pulumi.StringPtrInput
	// Name or selfLink of the VPC network. Required if `ipCidrRange` is set.
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The subnet in which to house the connector
	// Structure is documented below.
	Subnet ConnectorSubnetPtrInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

// ConnectorArrayInput is an input type that accepts ConnectorArray and ConnectorArrayOutput values.
// You can construct a concrete instance of `ConnectorArrayInput` via:
//
//	ConnectorArray{ ConnectorArgs{...} }
type ConnectorArrayInput interface {
	pulumi.Input

	ToConnectorArrayOutput() ConnectorArrayOutput
	ToConnectorArrayOutputWithContext(context.Context) ConnectorArrayOutput
}

type ConnectorArray []ConnectorInput

func (ConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (i ConnectorArray) ToConnectorArrayOutput() ConnectorArrayOutput {
	return i.ToConnectorArrayOutputWithContext(context.Background())
}

func (i ConnectorArray) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorArrayOutput)
}

// ConnectorMapInput is an input type that accepts ConnectorMap and ConnectorMapOutput values.
// You can construct a concrete instance of `ConnectorMapInput` via:
//
//	ConnectorMap{ "key": ConnectorArgs{...} }
type ConnectorMapInput interface {
	pulumi.Input

	ToConnectorMapOutput() ConnectorMapOutput
	ToConnectorMapOutputWithContext(context.Context) ConnectorMapOutput
}

type ConnectorMap map[string]ConnectorInput

func (ConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (i ConnectorMap) ToConnectorMapOutput() ConnectorMapOutput {
	return i.ToConnectorMapOutputWithContext(context.Background())
}

func (i ConnectorMap) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMapOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
func (o ConnectorOutput) IpCidrRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.IpCidrRange }).(pulumi.StringPtrOutput)
}

// Machine type of VM Instance underlying connector. Default is e2-micro
func (o ConnectorOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Maximum value of instances in autoscaling group underlying the connector.
func (o ConnectorOutput) MaxInstances() pulumi.IntOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntOutput { return v.MaxInstances }).(pulumi.IntOutput)
}

// Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
func (o ConnectorOutput) MaxThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntPtrOutput { return v.MaxThroughput }).(pulumi.IntPtrOutput)
}

// Minimum value of instances in autoscaling group underlying the connector.
func (o ConnectorOutput) MinInstances() pulumi.IntOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntOutput { return v.MinInstances }).(pulumi.IntOutput)
}

// Minimum throughput of the connector in Mbps. Default and min is 200.
func (o ConnectorOutput) MinThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntPtrOutput { return v.MinThroughput }).(pulumi.IntPtrOutput)
}

// Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
// https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
func (o ConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name or selfLink of the VPC network. Required if `ipCidrRange` is set.
func (o ConnectorOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConnectorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
func (o ConnectorOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The fully qualified name of this VPC connector
func (o ConnectorOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// State of the VPC access connector.
func (o ConnectorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The subnet in which to house the connector
// Structure is documented below.
func (o ConnectorOutput) Subnet() ConnectorSubnetPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorSubnetPtrOutput { return v.Subnet }).(ConnectorSubnetPtrOutput)
}

type ConnectorArrayOutput struct{ *pulumi.OutputState }

func (ConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (o ConnectorArrayOutput) ToConnectorArrayOutput() ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) Index(i pulumi.IntInput) ConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].([]*Connector)[vs[1].(int)]
	}).(ConnectorOutput)
}

type ConnectorMapOutput struct{ *pulumi.OutputState }

func (ConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (o ConnectorMapOutput) ToConnectorMapOutput() ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) MapIndex(k pulumi.StringInput) ConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].(map[string]*Connector)[vs[1].(string)]
	}).(ConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInput)(nil)).Elem(), &Connector{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorArrayInput)(nil)).Elem(), ConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorMapInput)(nil)).Elem(), ConnectorMap{})
	pulumi.RegisterOutputType(ConnectorOutput{})
	pulumi.RegisterOutputType(ConnectorArrayOutput{})
	pulumi.RegisterOutputType(ConnectorMapOutput{})
}
