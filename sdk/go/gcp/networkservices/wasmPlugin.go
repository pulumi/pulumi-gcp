// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// WasmPlugin is a resource representing a service executing a customer-provided Wasm module.
//
// To get more information about WasmPlugin, see:
//
// * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1/projects.locations.wasmPlugins)
// * How-to Guides
//   - [Configure a route extension](https://cloud.google.com/service-extensions/docs/create-plugin)
//
// ## Example Usage
//
// ### Wasm Plugin Basic Docker Repository
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networkservices"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = networkservices.NewWasmPlugin(ctx, "wasm_plugin", &networkservices.WasmPluginArgs{
//				Name:          pulumi.String("my-wasm-plugin"),
//				Description:   pulumi.String("my wasm plugin from a docker repository"),
//				MainVersionId: pulumi.String("v1"),
//				Labels: pulumi.StringMap{
//					"test_label": pulumi.String("test_value"),
//				},
//				LogConfig: &networkservices.WasmPluginLogConfigArgs{
//					Enable:      pulumi.Bool(true),
//					SampleRate:  pulumi.Float64(1),
//					MinLogLevel: pulumi.String("WARN"),
//				},
//				Versions: networkservices.WasmPluginVersionArray{
//					&networkservices.WasmPluginVersionArgs{
//						VersionName: pulumi.String("v1"),
//						Description: pulumi.String("v1 version of my wasm plugin"),
//						ImageUri:    pulumi.Sprintf("us-central1-docker.pkg.dev/%v/my-artifact-registry-docker-repository/my-wasm-plugin-data:prod", project.Name),
//						Labels: pulumi.StringMap{
//							"test_label": pulumi.String("test_value"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Wasm Plugin Basic Generic Repository
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networkservices"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = networkservices.NewWasmPlugin(ctx, "wasm_plugin", &networkservices.WasmPluginArgs{
//				Name:          pulumi.String("my-wasm-plugin"),
//				Description:   pulumi.String("my wasm plugin from a generic repository"),
//				MainVersionId: pulumi.String("v1"),
//				Labels: pulumi.StringMap{
//					"test_label": pulumi.String("test_value"),
//				},
//				LogConfig: &networkservices.WasmPluginLogConfigArgs{
//					Enable:      pulumi.Bool(true),
//					SampleRate:  pulumi.Float64(1),
//					MinLogLevel: pulumi.String("WARN"),
//				},
//				Versions: networkservices.WasmPluginVersionArray{
//					&networkservices.WasmPluginVersionArgs{
//						VersionName: pulumi.String("v1"),
//						Description: pulumi.String("v1 version of my wasm plugin"),
//						ImageUri:    pulumi.Sprintf("projects/%v/locations/us-central1/repositories/my-artifact-registry-generic-repository/genericArtifacts/my-wasm-plugin-data:v1", project.Name),
//						Labels: pulumi.StringMap{
//							"test_label": pulumi.String("test_value"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WasmPlugin can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, WasmPlugin can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default {{location}}/{{name}}
// ```
type WasmPlugin struct {
	pulumi.CustomResourceState

	// Output only. The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. A human-readable description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. Set of labels associated with the WasmPlugin resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the traffic extension
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
	// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
	// Structure is documented below.
	LogConfig WasmPluginLogConfigPtrOutput `pulumi:"logConfig"`
	// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
	MainVersionId pulumi.StringOutput `pulumi:"mainVersionId"`
	// Identifier. Name of the WasmPlugin resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Output only. List of all extensions that use this WasmPlugin resource.
	// Structure is documented below.
	UsedBies WasmPluginUsedByArrayOutput `pulumi:"usedBies"`
	// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
	// Structure is documented below.
	Versions WasmPluginVersionArrayOutput `pulumi:"versions"`
}

// NewWasmPlugin registers a new resource with the given unique name, arguments, and options.
func NewWasmPlugin(ctx *pulumi.Context,
	name string, args *WasmPluginArgs, opts ...pulumi.ResourceOption) (*WasmPlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MainVersionId == nil {
		return nil, errors.New("invalid value for required argument 'MainVersionId'")
	}
	if args.Versions == nil {
		return nil, errors.New("invalid value for required argument 'Versions'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WasmPlugin
	err := ctx.RegisterResource("gcp:networkservices/wasmPlugin:WasmPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWasmPlugin gets an existing WasmPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWasmPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WasmPluginState, opts ...pulumi.ResourceOption) (*WasmPlugin, error) {
	var resource WasmPlugin
	err := ctx.ReadResource("gcp:networkservices/wasmPlugin:WasmPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WasmPlugin resources.
type wasmPluginState struct {
	// Output only. The timestamp when the resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Optional. A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. Set of labels associated with the WasmPlugin resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the traffic extension
	Location *string `pulumi:"location"`
	// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
	// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
	// Structure is documented below.
	LogConfig *WasmPluginLogConfig `pulumi:"logConfig"`
	// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
	MainVersionId *string `pulumi:"mainVersionId"`
	// Identifier. Name of the WasmPlugin resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Output only. List of all extensions that use this WasmPlugin resource.
	// Structure is documented below.
	UsedBies []WasmPluginUsedBy `pulumi:"usedBies"`
	// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
	// Structure is documented below.
	Versions []WasmPluginVersion `pulumi:"versions"`
}

type WasmPluginState struct {
	// Output only. The timestamp when the resource was created.
	CreateTime pulumi.StringPtrInput
	// Optional. A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. Set of labels associated with the WasmPlugin resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the traffic extension
	Location pulumi.StringPtrInput
	// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
	// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
	// Structure is documented below.
	LogConfig WasmPluginLogConfigPtrInput
	// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
	MainVersionId pulumi.StringPtrInput
	// Identifier. Name of the WasmPlugin resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. The timestamp when the resource was updated.
	UpdateTime pulumi.StringPtrInput
	// Output only. List of all extensions that use this WasmPlugin resource.
	// Structure is documented below.
	UsedBies WasmPluginUsedByArrayInput
	// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
	// Structure is documented below.
	Versions WasmPluginVersionArrayInput
}

func (WasmPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*wasmPluginState)(nil)).Elem()
}

type wasmPluginArgs struct {
	// Optional. A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// Optional. Set of labels associated with the WasmPlugin resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the traffic extension
	Location *string `pulumi:"location"`
	// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
	// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
	// Structure is documented below.
	LogConfig *WasmPluginLogConfig `pulumi:"logConfig"`
	// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
	MainVersionId string `pulumi:"mainVersionId"`
	// Identifier. Name of the WasmPlugin resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
	// Structure is documented below.
	Versions []WasmPluginVersion `pulumi:"versions"`
}

// The set of arguments for constructing a WasmPlugin resource.
type WasmPluginArgs struct {
	// Optional. A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// Optional. Set of labels associated with the WasmPlugin resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the traffic extension
	Location pulumi.StringPtrInput
	// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
	// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
	// Structure is documented below.
	LogConfig WasmPluginLogConfigPtrInput
	// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
	MainVersionId pulumi.StringInput
	// Identifier. Name of the WasmPlugin resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
	// Structure is documented below.
	Versions WasmPluginVersionArrayInput
}

func (WasmPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wasmPluginArgs)(nil)).Elem()
}

type WasmPluginInput interface {
	pulumi.Input

	ToWasmPluginOutput() WasmPluginOutput
	ToWasmPluginOutputWithContext(ctx context.Context) WasmPluginOutput
}

func (*WasmPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPlugin)(nil)).Elem()
}

func (i *WasmPlugin) ToWasmPluginOutput() WasmPluginOutput {
	return i.ToWasmPluginOutputWithContext(context.Background())
}

func (i *WasmPlugin) ToWasmPluginOutputWithContext(ctx context.Context) WasmPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginOutput)
}

// WasmPluginArrayInput is an input type that accepts WasmPluginArray and WasmPluginArrayOutput values.
// You can construct a concrete instance of `WasmPluginArrayInput` via:
//
//	WasmPluginArray{ WasmPluginArgs{...} }
type WasmPluginArrayInput interface {
	pulumi.Input

	ToWasmPluginArrayOutput() WasmPluginArrayOutput
	ToWasmPluginArrayOutputWithContext(context.Context) WasmPluginArrayOutput
}

type WasmPluginArray []WasmPluginInput

func (WasmPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WasmPlugin)(nil)).Elem()
}

func (i WasmPluginArray) ToWasmPluginArrayOutput() WasmPluginArrayOutput {
	return i.ToWasmPluginArrayOutputWithContext(context.Background())
}

func (i WasmPluginArray) ToWasmPluginArrayOutputWithContext(ctx context.Context) WasmPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginArrayOutput)
}

// WasmPluginMapInput is an input type that accepts WasmPluginMap and WasmPluginMapOutput values.
// You can construct a concrete instance of `WasmPluginMapInput` via:
//
//	WasmPluginMap{ "key": WasmPluginArgs{...} }
type WasmPluginMapInput interface {
	pulumi.Input

	ToWasmPluginMapOutput() WasmPluginMapOutput
	ToWasmPluginMapOutputWithContext(context.Context) WasmPluginMapOutput
}

type WasmPluginMap map[string]WasmPluginInput

func (WasmPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WasmPlugin)(nil)).Elem()
}

func (i WasmPluginMap) ToWasmPluginMapOutput() WasmPluginMapOutput {
	return i.ToWasmPluginMapOutputWithContext(context.Background())
}

func (i WasmPluginMap) ToWasmPluginMapOutputWithContext(ctx context.Context) WasmPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginMapOutput)
}

type WasmPluginOutput struct{ *pulumi.OutputState }

func (WasmPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPlugin)(nil)).Elem()
}

func (o WasmPluginOutput) ToWasmPluginOutput() WasmPluginOutput {
	return o
}

func (o WasmPluginOutput) ToWasmPluginOutputWithContext(ctx context.Context) WasmPluginOutput {
	return o
}

// Output only. The timestamp when the resource was created.
func (o WasmPluginOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. A human-readable description of the resource.
func (o WasmPluginOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o WasmPluginOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. Set of labels associated with the WasmPlugin resource.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o WasmPluginOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the traffic extension
func (o WasmPluginOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
// Structure is documented below.
func (o WasmPluginOutput) LogConfig() WasmPluginLogConfigPtrOutput {
	return o.ApplyT(func(v *WasmPlugin) WasmPluginLogConfigPtrOutput { return v.LogConfig }).(WasmPluginLogConfigPtrOutput)
}

// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
func (o WasmPluginOutput) MainVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringOutput { return v.MainVersionId }).(pulumi.StringOutput)
}

// Identifier. Name of the WasmPlugin resource.
func (o WasmPluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o WasmPluginOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o WasmPluginOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. The timestamp when the resource was updated.
func (o WasmPluginOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Output only. List of all extensions that use this WasmPlugin resource.
// Structure is documented below.
func (o WasmPluginOutput) UsedBies() WasmPluginUsedByArrayOutput {
	return o.ApplyT(func(v *WasmPlugin) WasmPluginUsedByArrayOutput { return v.UsedBies }).(WasmPluginUsedByArrayOutput)
}

// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
// Structure is documented below.
func (o WasmPluginOutput) Versions() WasmPluginVersionArrayOutput {
	return o.ApplyT(func(v *WasmPlugin) WasmPluginVersionArrayOutput { return v.Versions }).(WasmPluginVersionArrayOutput)
}

type WasmPluginArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WasmPlugin)(nil)).Elem()
}

func (o WasmPluginArrayOutput) ToWasmPluginArrayOutput() WasmPluginArrayOutput {
	return o
}

func (o WasmPluginArrayOutput) ToWasmPluginArrayOutputWithContext(ctx context.Context) WasmPluginArrayOutput {
	return o
}

func (o WasmPluginArrayOutput) Index(i pulumi.IntInput) WasmPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WasmPlugin {
		return vs[0].([]*WasmPlugin)[vs[1].(int)]
	}).(WasmPluginOutput)
}

type WasmPluginMapOutput struct{ *pulumi.OutputState }

func (WasmPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WasmPlugin)(nil)).Elem()
}

func (o WasmPluginMapOutput) ToWasmPluginMapOutput() WasmPluginMapOutput {
	return o
}

func (o WasmPluginMapOutput) ToWasmPluginMapOutputWithContext(ctx context.Context) WasmPluginMapOutput {
	return o
}

func (o WasmPluginMapOutput) MapIndex(k pulumi.StringInput) WasmPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WasmPlugin {
		return vs[0].(map[string]*WasmPlugin)[vs[1].(string)]
	}).(WasmPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginInput)(nil)).Elem(), &WasmPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginArrayInput)(nil)).Elem(), WasmPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginMapInput)(nil)).Elem(), WasmPluginMap{})
	pulumi.RegisterOutputType(WasmPluginOutput{})
	pulumi.RegisterOutputType(WasmPluginArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginMapOutput{})
}
