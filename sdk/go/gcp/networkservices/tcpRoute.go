// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ## Import
//
// # TcpRoute can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:networkservices/tcpRoute:TcpRoute default projects/{{project}}/locations/global/tcpRoutes/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:networkservices/tcpRoute:TcpRoute default {{project}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:networkservices/tcpRoute:TcpRoute default {{name}}
//
// ```
type TcpRoute struct {
	pulumi.CustomResourceState

	// Time the TcpRoute was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
	// Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>
	Gateways pulumi.StringArrayOutput `pulumi:"gateways"`
	// Set of label tags associated with the TcpRoute resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
	// Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>
	// The attached Mesh should be of a type SIDECAR
	Meshes pulumi.StringArrayOutput `pulumi:"meshes"`
	// Name of the TcpRoute resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
	// If there are multiple rules then the action taken will be the first rule to match.
	// Structure is documented below.
	Rules TcpRouteRuleArrayOutput `pulumi:"rules"`
	// Server-defined URL of this resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Time the TcpRoute was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTcpRoute registers a new resource with the given unique name, arguments, and options.
func NewTcpRoute(ctx *pulumi.Context,
	name string, args *TcpRouteArgs, opts ...pulumi.ResourceOption) (*TcpRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TcpRoute
	err := ctx.RegisterResource("gcp:networkservices/tcpRoute:TcpRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTcpRoute gets an existing TcpRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTcpRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TcpRouteState, opts ...pulumi.ResourceOption) (*TcpRoute, error) {
	var resource TcpRoute
	err := ctx.ReadResource("gcp:networkservices/tcpRoute:TcpRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TcpRoute resources.
type tcpRouteState struct {
	// Time the TcpRoute was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
	// Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>
	Gateways []string `pulumi:"gateways"`
	// Set of label tags associated with the TcpRoute resource.
	Labels map[string]string `pulumi:"labels"`
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
	// Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>
	// The attached Mesh should be of a type SIDECAR
	Meshes []string `pulumi:"meshes"`
	// Name of the TcpRoute resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
	// If there are multiple rules then the action taken will be the first rule to match.
	// Structure is documented below.
	Rules []TcpRouteRule `pulumi:"rules"`
	// Server-defined URL of this resource.
	SelfLink *string `pulumi:"selfLink"`
	// Time the TcpRoute was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type TcpRouteState struct {
	// Time the TcpRoute was created in UTC.
	CreateTime pulumi.StringPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
	// Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>
	Gateways pulumi.StringArrayInput
	// Set of label tags associated with the TcpRoute resource.
	Labels pulumi.StringMapInput
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
	// Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>
	// The attached Mesh should be of a type SIDECAR
	Meshes pulumi.StringArrayInput
	// Name of the TcpRoute resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
	// If there are multiple rules then the action taken will be the first rule to match.
	// Structure is documented below.
	Rules TcpRouteRuleArrayInput
	// Server-defined URL of this resource.
	SelfLink pulumi.StringPtrInput
	// Time the TcpRoute was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (TcpRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpRouteState)(nil)).Elem()
}

type tcpRouteArgs struct {
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
	// Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>
	Gateways []string `pulumi:"gateways"`
	// Set of label tags associated with the TcpRoute resource.
	Labels map[string]string `pulumi:"labels"`
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
	// Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>
	// The attached Mesh should be of a type SIDECAR
	Meshes []string `pulumi:"meshes"`
	// Name of the TcpRoute resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
	// If there are multiple rules then the action taken will be the first rule to match.
	// Structure is documented below.
	Rules []TcpRouteRule `pulumi:"rules"`
}

// The set of arguments for constructing a TcpRoute resource.
type TcpRouteArgs struct {
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
	// Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>
	Gateways pulumi.StringArrayInput
	// Set of label tags associated with the TcpRoute resource.
	Labels pulumi.StringMapInput
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
	// Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>
	// The attached Mesh should be of a type SIDECAR
	Meshes pulumi.StringArrayInput
	// Name of the TcpRoute resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
	// If there are multiple rules then the action taken will be the first rule to match.
	// Structure is documented below.
	Rules TcpRouteRuleArrayInput
}

func (TcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpRouteArgs)(nil)).Elem()
}

type TcpRouteInput interface {
	pulumi.Input

	ToTcpRouteOutput() TcpRouteOutput
	ToTcpRouteOutputWithContext(ctx context.Context) TcpRouteOutput
}

func (*TcpRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpRoute)(nil)).Elem()
}

func (i *TcpRoute) ToTcpRouteOutput() TcpRouteOutput {
	return i.ToTcpRouteOutputWithContext(context.Background())
}

func (i *TcpRoute) ToTcpRouteOutputWithContext(ctx context.Context) TcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteOutput)
}

func (i *TcpRoute) ToOutput(ctx context.Context) pulumix.Output[*TcpRoute] {
	return pulumix.Output[*TcpRoute]{
		OutputState: i.ToTcpRouteOutputWithContext(ctx).OutputState,
	}
}

// TcpRouteArrayInput is an input type that accepts TcpRouteArray and TcpRouteArrayOutput values.
// You can construct a concrete instance of `TcpRouteArrayInput` via:
//
//	TcpRouteArray{ TcpRouteArgs{...} }
type TcpRouteArrayInput interface {
	pulumi.Input

	ToTcpRouteArrayOutput() TcpRouteArrayOutput
	ToTcpRouteArrayOutputWithContext(context.Context) TcpRouteArrayOutput
}

type TcpRouteArray []TcpRouteInput

func (TcpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcpRoute)(nil)).Elem()
}

func (i TcpRouteArray) ToTcpRouteArrayOutput() TcpRouteArrayOutput {
	return i.ToTcpRouteArrayOutputWithContext(context.Background())
}

func (i TcpRouteArray) ToTcpRouteArrayOutputWithContext(ctx context.Context) TcpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteArrayOutput)
}

func (i TcpRouteArray) ToOutput(ctx context.Context) pulumix.Output[[]*TcpRoute] {
	return pulumix.Output[[]*TcpRoute]{
		OutputState: i.ToTcpRouteArrayOutputWithContext(ctx).OutputState,
	}
}

// TcpRouteMapInput is an input type that accepts TcpRouteMap and TcpRouteMapOutput values.
// You can construct a concrete instance of `TcpRouteMapInput` via:
//
//	TcpRouteMap{ "key": TcpRouteArgs{...} }
type TcpRouteMapInput interface {
	pulumi.Input

	ToTcpRouteMapOutput() TcpRouteMapOutput
	ToTcpRouteMapOutputWithContext(context.Context) TcpRouteMapOutput
}

type TcpRouteMap map[string]TcpRouteInput

func (TcpRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcpRoute)(nil)).Elem()
}

func (i TcpRouteMap) ToTcpRouteMapOutput() TcpRouteMapOutput {
	return i.ToTcpRouteMapOutputWithContext(context.Background())
}

func (i TcpRouteMap) ToTcpRouteMapOutputWithContext(ctx context.Context) TcpRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteMapOutput)
}

func (i TcpRouteMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TcpRoute] {
	return pulumix.Output[map[string]*TcpRoute]{
		OutputState: i.ToTcpRouteMapOutputWithContext(ctx).OutputState,
	}
}

type TcpRouteOutput struct{ *pulumi.OutputState }

func (TcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpRoute)(nil)).Elem()
}

func (o TcpRouteOutput) ToTcpRouteOutput() TcpRouteOutput {
	return o
}

func (o TcpRouteOutput) ToTcpRouteOutputWithContext(ctx context.Context) TcpRouteOutput {
	return o
}

func (o TcpRouteOutput) ToOutput(ctx context.Context) pulumix.Output[*TcpRoute] {
	return pulumix.Output[*TcpRoute]{
		OutputState: o.OutputState,
	}
}

// Time the TcpRoute was created in UTC.
func (o TcpRouteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A free-text description of the resource. Max length 1024 characters.
func (o TcpRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
// Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>
func (o TcpRouteOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringArrayOutput { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Set of label tags associated with the TcpRoute resource.
func (o TcpRouteOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
// Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>
// The attached Mesh should be of a type SIDECAR
func (o TcpRouteOutput) Meshes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringArrayOutput { return v.Meshes }).(pulumi.StringArrayOutput)
}

// Name of the TcpRoute resource.
func (o TcpRouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TcpRouteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
// If there are multiple rules then the action taken will be the first rule to match.
// Structure is documented below.
func (o TcpRouteOutput) Rules() TcpRouteRuleArrayOutput {
	return o.ApplyT(func(v *TcpRoute) TcpRouteRuleArrayOutput { return v.Rules }).(TcpRouteRuleArrayOutput)
}

// Server-defined URL of this resource.
func (o TcpRouteOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Time the TcpRoute was updated in UTC.
func (o TcpRouteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpRoute) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TcpRouteArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcpRoute)(nil)).Elem()
}

func (o TcpRouteArrayOutput) ToTcpRouteArrayOutput() TcpRouteArrayOutput {
	return o
}

func (o TcpRouteArrayOutput) ToTcpRouteArrayOutputWithContext(ctx context.Context) TcpRouteArrayOutput {
	return o
}

func (o TcpRouteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TcpRoute] {
	return pulumix.Output[[]*TcpRoute]{
		OutputState: o.OutputState,
	}
}

func (o TcpRouteArrayOutput) Index(i pulumi.IntInput) TcpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TcpRoute {
		return vs[0].([]*TcpRoute)[vs[1].(int)]
	}).(TcpRouteOutput)
}

type TcpRouteMapOutput struct{ *pulumi.OutputState }

func (TcpRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcpRoute)(nil)).Elem()
}

func (o TcpRouteMapOutput) ToTcpRouteMapOutput() TcpRouteMapOutput {
	return o
}

func (o TcpRouteMapOutput) ToTcpRouteMapOutputWithContext(ctx context.Context) TcpRouteMapOutput {
	return o
}

func (o TcpRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TcpRoute] {
	return pulumix.Output[map[string]*TcpRoute]{
		OutputState: o.OutputState,
	}
}

func (o TcpRouteMapOutput) MapIndex(k pulumi.StringInput) TcpRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TcpRoute {
		return vs[0].(map[string]*TcpRoute)[vs[1].(string)]
	}).(TcpRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteInput)(nil)).Elem(), &TcpRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteArrayInput)(nil)).Elem(), TcpRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteMapInput)(nil)).Elem(), TcpRouteMap{})
	pulumi.RegisterOutputType(TcpRouteOutput{})
	pulumi.RegisterOutputType(TcpRouteArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteMapOutput{})
}
