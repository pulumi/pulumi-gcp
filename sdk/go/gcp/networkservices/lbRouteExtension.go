// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// LbRouteExtension is a resource that lets you control where traffic is routed to for a given request.
//
// To get more information about LbRouteExtension, see:
//
// * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1beta1/projects.locations.lbRouteExtensions)
// * How-to Guides
//   - [Configure a route extension](https://cloud.google.com/service-extensions/docs/configure-callout#configure_a_route_extension)
//
// ## Example Usage
//
// ## Import
//
// LbRouteExtension can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/lbRouteExtensions/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, LbRouteExtension can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networkservices/lbRouteExtension:LbRouteExtension default projects/{{project}}/locations/{{location}}/lbRouteExtensions/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/lbRouteExtension:LbRouteExtension default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/lbRouteExtension:LbRouteExtension default {{location}}/{{name}}
// ```
type LbRouteExtension struct {
	pulumi.CustomResourceState

	// A human-readable description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// A set of ordered extension chains that contain the match conditions and extensions to execute.
	// Match conditions for each extension chain are evaluated in sequence for a given request.
	// The first extension chain that has a condition that matches the request is executed.
	// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
	// Structure is documented below.
	ExtensionChains LbRouteExtensionExtensionChainArrayOutput `pulumi:"extensionChains"`
	// A list of references to the forwarding rules to which this service extension is attached to.
	// At least one forwarding rule is required. There can be only one LbRouteExtension resource per forwarding rule.
	ForwardingRules pulumi.StringArrayOutput `pulumi:"forwardingRules"`
	// Set of labels associated with the LbRouteExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service) and
	// [Supported application load balancers](https://cloud.google.com/service-extensions/docs/callouts-overview#supported-lbs).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringOutput `pulumi:"loadBalancingScheme"`
	// The location of the route extension
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the LbRouteExtension resource in the following format: projects/{project}/locations/{location}/lbRouteExtensions/{lbRouteExtension}
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
}

// NewLbRouteExtension registers a new resource with the given unique name, arguments, and options.
func NewLbRouteExtension(ctx *pulumi.Context,
	name string, args *LbRouteExtensionArgs, opts ...pulumi.ResourceOption) (*LbRouteExtension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtensionChains == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionChains'")
	}
	if args.ForwardingRules == nil {
		return nil, errors.New("invalid value for required argument 'ForwardingRules'")
	}
	if args.LoadBalancingScheme == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancingScheme'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbRouteExtension
	err := ctx.RegisterResource("gcp:networkservices/lbRouteExtension:LbRouteExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbRouteExtension gets an existing LbRouteExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbRouteExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbRouteExtensionState, opts ...pulumi.ResourceOption) (*LbRouteExtension, error) {
	var resource LbRouteExtension
	err := ctx.ReadResource("gcp:networkservices/lbRouteExtension:LbRouteExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbRouteExtension resources.
type lbRouteExtensionState struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// A set of ordered extension chains that contain the match conditions and extensions to execute.
	// Match conditions for each extension chain are evaluated in sequence for a given request.
	// The first extension chain that has a condition that matches the request is executed.
	// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
	// Structure is documented below.
	ExtensionChains []LbRouteExtensionExtensionChain `pulumi:"extensionChains"`
	// A list of references to the forwarding rules to which this service extension is attached to.
	// At least one forwarding rule is required. There can be only one LbRouteExtension resource per forwarding rule.
	ForwardingRules []string `pulumi:"forwardingRules"`
	// Set of labels associated with the LbRouteExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service) and
	// [Supported application load balancers](https://cloud.google.com/service-extensions/docs/callouts-overview#supported-lbs).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme *string `pulumi:"loadBalancingScheme"`
	// The location of the route extension
	Location *string `pulumi:"location"`
	// Name of the LbRouteExtension resource in the following format: projects/{project}/locations/{location}/lbRouteExtensions/{lbRouteExtension}
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
}

type LbRouteExtensionState struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// A set of ordered extension chains that contain the match conditions and extensions to execute.
	// Match conditions for each extension chain are evaluated in sequence for a given request.
	// The first extension chain that has a condition that matches the request is executed.
	// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
	// Structure is documented below.
	ExtensionChains LbRouteExtensionExtensionChainArrayInput
	// A list of references to the forwarding rules to which this service extension is attached to.
	// At least one forwarding rule is required. There can be only one LbRouteExtension resource per forwarding rule.
	ForwardingRules pulumi.StringArrayInput
	// Set of labels associated with the LbRouteExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service) and
	// [Supported application load balancers](https://cloud.google.com/service-extensions/docs/callouts-overview#supported-lbs).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringPtrInput
	// The location of the route extension
	Location pulumi.StringPtrInput
	// Name of the LbRouteExtension resource in the following format: projects/{project}/locations/{location}/lbRouteExtensions/{lbRouteExtension}
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
}

func (LbRouteExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbRouteExtensionState)(nil)).Elem()
}

type lbRouteExtensionArgs struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// A set of ordered extension chains that contain the match conditions and extensions to execute.
	// Match conditions for each extension chain are evaluated in sequence for a given request.
	// The first extension chain that has a condition that matches the request is executed.
	// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
	// Structure is documented below.
	ExtensionChains []LbRouteExtensionExtensionChain `pulumi:"extensionChains"`
	// A list of references to the forwarding rules to which this service extension is attached to.
	// At least one forwarding rule is required. There can be only one LbRouteExtension resource per forwarding rule.
	ForwardingRules []string `pulumi:"forwardingRules"`
	// Set of labels associated with the LbRouteExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service) and
	// [Supported application load balancers](https://cloud.google.com/service-extensions/docs/callouts-overview#supported-lbs).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme string `pulumi:"loadBalancingScheme"`
	// The location of the route extension
	Location string `pulumi:"location"`
	// Name of the LbRouteExtension resource in the following format: projects/{project}/locations/{location}/lbRouteExtensions/{lbRouteExtension}
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a LbRouteExtension resource.
type LbRouteExtensionArgs struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// A set of ordered extension chains that contain the match conditions and extensions to execute.
	// Match conditions for each extension chain are evaluated in sequence for a given request.
	// The first extension chain that has a condition that matches the request is executed.
	// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
	// Structure is documented below.
	ExtensionChains LbRouteExtensionExtensionChainArrayInput
	// A list of references to the forwarding rules to which this service extension is attached to.
	// At least one forwarding rule is required. There can be only one LbRouteExtension resource per forwarding rule.
	ForwardingRules pulumi.StringArrayInput
	// Set of labels associated with the LbRouteExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service) and
	// [Supported application load balancers](https://cloud.google.com/service-extensions/docs/callouts-overview#supported-lbs).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringInput
	// The location of the route extension
	Location pulumi.StringInput
	// Name of the LbRouteExtension resource in the following format: projects/{project}/locations/{location}/lbRouteExtensions/{lbRouteExtension}
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (LbRouteExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbRouteExtensionArgs)(nil)).Elem()
}

type LbRouteExtensionInput interface {
	pulumi.Input

	ToLbRouteExtensionOutput() LbRouteExtensionOutput
	ToLbRouteExtensionOutputWithContext(ctx context.Context) LbRouteExtensionOutput
}

func (*LbRouteExtension) ElementType() reflect.Type {
	return reflect.TypeOf((**LbRouteExtension)(nil)).Elem()
}

func (i *LbRouteExtension) ToLbRouteExtensionOutput() LbRouteExtensionOutput {
	return i.ToLbRouteExtensionOutputWithContext(context.Background())
}

func (i *LbRouteExtension) ToLbRouteExtensionOutputWithContext(ctx context.Context) LbRouteExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbRouteExtensionOutput)
}

// LbRouteExtensionArrayInput is an input type that accepts LbRouteExtensionArray and LbRouteExtensionArrayOutput values.
// You can construct a concrete instance of `LbRouteExtensionArrayInput` via:
//
//	LbRouteExtensionArray{ LbRouteExtensionArgs{...} }
type LbRouteExtensionArrayInput interface {
	pulumi.Input

	ToLbRouteExtensionArrayOutput() LbRouteExtensionArrayOutput
	ToLbRouteExtensionArrayOutputWithContext(context.Context) LbRouteExtensionArrayOutput
}

type LbRouteExtensionArray []LbRouteExtensionInput

func (LbRouteExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbRouteExtension)(nil)).Elem()
}

func (i LbRouteExtensionArray) ToLbRouteExtensionArrayOutput() LbRouteExtensionArrayOutput {
	return i.ToLbRouteExtensionArrayOutputWithContext(context.Background())
}

func (i LbRouteExtensionArray) ToLbRouteExtensionArrayOutputWithContext(ctx context.Context) LbRouteExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbRouteExtensionArrayOutput)
}

// LbRouteExtensionMapInput is an input type that accepts LbRouteExtensionMap and LbRouteExtensionMapOutput values.
// You can construct a concrete instance of `LbRouteExtensionMapInput` via:
//
//	LbRouteExtensionMap{ "key": LbRouteExtensionArgs{...} }
type LbRouteExtensionMapInput interface {
	pulumi.Input

	ToLbRouteExtensionMapOutput() LbRouteExtensionMapOutput
	ToLbRouteExtensionMapOutputWithContext(context.Context) LbRouteExtensionMapOutput
}

type LbRouteExtensionMap map[string]LbRouteExtensionInput

func (LbRouteExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbRouteExtension)(nil)).Elem()
}

func (i LbRouteExtensionMap) ToLbRouteExtensionMapOutput() LbRouteExtensionMapOutput {
	return i.ToLbRouteExtensionMapOutputWithContext(context.Background())
}

func (i LbRouteExtensionMap) ToLbRouteExtensionMapOutputWithContext(ctx context.Context) LbRouteExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbRouteExtensionMapOutput)
}

type LbRouteExtensionOutput struct{ *pulumi.OutputState }

func (LbRouteExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbRouteExtension)(nil)).Elem()
}

func (o LbRouteExtensionOutput) ToLbRouteExtensionOutput() LbRouteExtensionOutput {
	return o
}

func (o LbRouteExtensionOutput) ToLbRouteExtensionOutputWithContext(ctx context.Context) LbRouteExtensionOutput {
	return o
}

// A human-readable description of the resource.
func (o LbRouteExtensionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o LbRouteExtensionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// A set of ordered extension chains that contain the match conditions and extensions to execute.
// Match conditions for each extension chain are evaluated in sequence for a given request.
// The first extension chain that has a condition that matches the request is executed.
// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
// Structure is documented below.
func (o LbRouteExtensionOutput) ExtensionChains() LbRouteExtensionExtensionChainArrayOutput {
	return o.ApplyT(func(v *LbRouteExtension) LbRouteExtensionExtensionChainArrayOutput { return v.ExtensionChains }).(LbRouteExtensionExtensionChainArrayOutput)
}

// A list of references to the forwarding rules to which this service extension is attached to.
// At least one forwarding rule is required. There can be only one LbRouteExtension resource per forwarding rule.
func (o LbRouteExtensionOutput) ForwardingRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringArrayOutput { return v.ForwardingRules }).(pulumi.StringArrayOutput)
}

// Set of labels associated with the LbRouteExtension resource. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o LbRouteExtensionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
// For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service) and
// [Supported application load balancers](https://cloud.google.com/service-extensions/docs/callouts-overview#supported-lbs).
// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
func (o LbRouteExtensionOutput) LoadBalancingScheme() pulumi.StringOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringOutput { return v.LoadBalancingScheme }).(pulumi.StringOutput)
}

// The location of the route extension
func (o LbRouteExtensionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the LbRouteExtension resource in the following format: projects/{project}/locations/{location}/lbRouteExtensions/{lbRouteExtension}
func (o LbRouteExtensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LbRouteExtensionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o LbRouteExtensionOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LbRouteExtension) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

type LbRouteExtensionArrayOutput struct{ *pulumi.OutputState }

func (LbRouteExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbRouteExtension)(nil)).Elem()
}

func (o LbRouteExtensionArrayOutput) ToLbRouteExtensionArrayOutput() LbRouteExtensionArrayOutput {
	return o
}

func (o LbRouteExtensionArrayOutput) ToLbRouteExtensionArrayOutputWithContext(ctx context.Context) LbRouteExtensionArrayOutput {
	return o
}

func (o LbRouteExtensionArrayOutput) Index(i pulumi.IntInput) LbRouteExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbRouteExtension {
		return vs[0].([]*LbRouteExtension)[vs[1].(int)]
	}).(LbRouteExtensionOutput)
}

type LbRouteExtensionMapOutput struct{ *pulumi.OutputState }

func (LbRouteExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbRouteExtension)(nil)).Elem()
}

func (o LbRouteExtensionMapOutput) ToLbRouteExtensionMapOutput() LbRouteExtensionMapOutput {
	return o
}

func (o LbRouteExtensionMapOutput) ToLbRouteExtensionMapOutputWithContext(ctx context.Context) LbRouteExtensionMapOutput {
	return o
}

func (o LbRouteExtensionMapOutput) MapIndex(k pulumi.StringInput) LbRouteExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbRouteExtension {
		return vs[0].(map[string]*LbRouteExtension)[vs[1].(string)]
	}).(LbRouteExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbRouteExtensionInput)(nil)).Elem(), &LbRouteExtension{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbRouteExtensionArrayInput)(nil)).Elem(), LbRouteExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbRouteExtensionMapInput)(nil)).Elem(), LbRouteExtensionMap{})
	pulumi.RegisterOutputType(LbRouteExtensionOutput{})
	pulumi.RegisterOutputType(LbRouteExtensionArrayOutput{})
	pulumi.RegisterOutputType(LbRouteExtensionMapOutput{})
}
