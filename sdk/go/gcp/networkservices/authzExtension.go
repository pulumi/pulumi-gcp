// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AuthzExtension is a resource that allows traffic forwarding to a callout backend service to make an authorization decision.
//
// To get more information about AuthzExtension, see:
//
// * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1beta1/projects.locations.authzExtensions)
//
// ## Example Usage
//
// ### Network Services Authz Extension Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := compute.NewRegionBackendService(ctx, "default", &compute.RegionBackendServiceArgs{
//				Name:                pulumi.String("authz-service"),
//				Project:             pulumi.String("my-project-name"),
//				Region:              pulumi.String("us-west1"),
//				Protocol:            pulumi.String("HTTP2"),
//				LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
//				PortName:            pulumi.String("grpc"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkservices.NewAuthzExtension(ctx, "default", &networkservices.AuthzExtensionArgs{
//				Name:                pulumi.String("my-authz-ext"),
//				Project:             pulumi.String("my-project-name"),
//				Location:            pulumi.String("us-west1"),
//				Description:         pulumi.String("my description"),
//				LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
//				Authority:           pulumi.String("ext11.com"),
//				Service:             _default.SelfLink,
//				Timeout:             pulumi.String("0.1s"),
//				FailOpen:            pulumi.Bool(false),
//				ForwardHeaders: pulumi.StringArray{
//					pulumi.String("Authorization"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AuthzExtension can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/authzExtensions/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, AuthzExtension can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networkservices/authzExtension:AuthzExtension default projects/{{project}}/locations/{{location}}/authzExtensions/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/authzExtension:AuthzExtension default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/authzExtension:AuthzExtension default {{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/authzExtension:AuthzExtension default {{name}}
// ```
type AuthzExtension struct {
	pulumi.CustomResourceState

	// The :authority header in the gRPC request sent from Envoy to the extension service.
	Authority pulumi.StringOutput `pulumi:"authority"`
	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A human-readable description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Determines how the proxy behaves if the call to the extension fails or times out.
	// When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
	// * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
	// * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
	FailOpen pulumi.BoolOutput `pulumi:"failOpen"`
	// List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
	ForwardHeaders pulumi.StringArrayOutput `pulumi:"forwardHeaders"`
	// Set of labels associated with the AuthzExtension resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringOutput `pulumi:"loadBalancingScheme"`
	// The location of the resource.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
	// {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// Identifier. Name of the AuthzExtension resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The reference to the service that runs the extension.
	// To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
	// https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
	Service pulumi.StringOutput `pulumi:"service"`
	// Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
	Timeout pulumi.StringOutput `pulumi:"timeout"`
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
	// Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
	WireFormat pulumi.StringOutput `pulumi:"wireFormat"`
}

// NewAuthzExtension registers a new resource with the given unique name, arguments, and options.
func NewAuthzExtension(ctx *pulumi.Context,
	name string, args *AuthzExtensionArgs, opts ...pulumi.ResourceOption) (*AuthzExtension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authority == nil {
		return nil, errors.New("invalid value for required argument 'Authority'")
	}
	if args.LoadBalancingScheme == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancingScheme'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthzExtension
	err := ctx.RegisterResource("gcp:networkservices/authzExtension:AuthzExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthzExtension gets an existing AuthzExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthzExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthzExtensionState, opts ...pulumi.ResourceOption) (*AuthzExtension, error) {
	var resource AuthzExtension
	err := ctx.ReadResource("gcp:networkservices/authzExtension:AuthzExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthzExtension resources.
type authzExtensionState struct {
	// The :authority header in the gRPC request sent from Envoy to the extension service.
	Authority *string `pulumi:"authority"`
	// The timestamp when the resource was created.
	CreateTime *string `pulumi:"createTime"`
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Determines how the proxy behaves if the call to the extension fails or times out.
	// When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
	// * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
	// * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
	FailOpen *bool `pulumi:"failOpen"`
	// List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
	ForwardHeaders []string `pulumi:"forwardHeaders"`
	// Set of labels associated with the AuthzExtension resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme *string `pulumi:"loadBalancingScheme"`
	// The location of the resource.
	//
	// ***
	Location *string `pulumi:"location"`
	// The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
	// {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
	Metadata map[string]string `pulumi:"metadata"`
	// Identifier. Name of the AuthzExtension resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The reference to the service that runs the extension.
	// To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
	// https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
	Service *string `pulumi:"service"`
	// Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
	Timeout *string `pulumi:"timeout"`
	// The timestamp when the resource was updated.
	UpdateTime *string `pulumi:"updateTime"`
	// The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
	// Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
	WireFormat *string `pulumi:"wireFormat"`
}

type AuthzExtensionState struct {
	// The :authority header in the gRPC request sent from Envoy to the extension service.
	Authority pulumi.StringPtrInput
	// The timestamp when the resource was created.
	CreateTime pulumi.StringPtrInput
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Determines how the proxy behaves if the call to the extension fails or times out.
	// When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
	// * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
	// * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
	FailOpen pulumi.BoolPtrInput
	// List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
	ForwardHeaders pulumi.StringArrayInput
	// Set of labels associated with the AuthzExtension resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringPtrInput
	// The location of the resource.
	//
	// ***
	Location pulumi.StringPtrInput
	// The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
	// {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
	Metadata pulumi.StringMapInput
	// Identifier. Name of the AuthzExtension resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The reference to the service that runs the extension.
	// To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
	// https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
	Service pulumi.StringPtrInput
	// Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
	Timeout pulumi.StringPtrInput
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringPtrInput
	// The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
	// Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
	WireFormat pulumi.StringPtrInput
}

func (AuthzExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*authzExtensionState)(nil)).Elem()
}

type authzExtensionArgs struct {
	// The :authority header in the gRPC request sent from Envoy to the extension service.
	Authority string `pulumi:"authority"`
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// Determines how the proxy behaves if the call to the extension fails or times out.
	// When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
	// * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
	// * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
	FailOpen *bool `pulumi:"failOpen"`
	// List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
	ForwardHeaders []string `pulumi:"forwardHeaders"`
	// Set of labels associated with the AuthzExtension resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme string `pulumi:"loadBalancingScheme"`
	// The location of the resource.
	//
	// ***
	Location string `pulumi:"location"`
	// The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
	// {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
	Metadata map[string]string `pulumi:"metadata"`
	// Identifier. Name of the AuthzExtension resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The reference to the service that runs the extension.
	// To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
	// https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
	Service string `pulumi:"service"`
	// Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
	Timeout string `pulumi:"timeout"`
	// The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
	// Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
	WireFormat *string `pulumi:"wireFormat"`
}

// The set of arguments for constructing a AuthzExtension resource.
type AuthzExtensionArgs struct {
	// The :authority header in the gRPC request sent from Envoy to the extension service.
	Authority pulumi.StringInput
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// Determines how the proxy behaves if the call to the extension fails or times out.
	// When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
	// * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
	// * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
	FailOpen pulumi.BoolPtrInput
	// List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
	ForwardHeaders pulumi.StringArrayInput
	// Set of labels associated with the AuthzExtension resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
	// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringInput
	// The location of the resource.
	//
	// ***
	Location pulumi.StringInput
	// The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
	// {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
	Metadata pulumi.StringMapInput
	// Identifier. Name of the AuthzExtension resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The reference to the service that runs the extension.
	// To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
	// https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
	Service pulumi.StringInput
	// Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
	Timeout pulumi.StringInput
	// The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
	// Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
	WireFormat pulumi.StringPtrInput
}

func (AuthzExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authzExtensionArgs)(nil)).Elem()
}

type AuthzExtensionInput interface {
	pulumi.Input

	ToAuthzExtensionOutput() AuthzExtensionOutput
	ToAuthzExtensionOutputWithContext(ctx context.Context) AuthzExtensionOutput
}

func (*AuthzExtension) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzExtension)(nil)).Elem()
}

func (i *AuthzExtension) ToAuthzExtensionOutput() AuthzExtensionOutput {
	return i.ToAuthzExtensionOutputWithContext(context.Background())
}

func (i *AuthzExtension) ToAuthzExtensionOutputWithContext(ctx context.Context) AuthzExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzExtensionOutput)
}

// AuthzExtensionArrayInput is an input type that accepts AuthzExtensionArray and AuthzExtensionArrayOutput values.
// You can construct a concrete instance of `AuthzExtensionArrayInput` via:
//
//	AuthzExtensionArray{ AuthzExtensionArgs{...} }
type AuthzExtensionArrayInput interface {
	pulumi.Input

	ToAuthzExtensionArrayOutput() AuthzExtensionArrayOutput
	ToAuthzExtensionArrayOutputWithContext(context.Context) AuthzExtensionArrayOutput
}

type AuthzExtensionArray []AuthzExtensionInput

func (AuthzExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthzExtension)(nil)).Elem()
}

func (i AuthzExtensionArray) ToAuthzExtensionArrayOutput() AuthzExtensionArrayOutput {
	return i.ToAuthzExtensionArrayOutputWithContext(context.Background())
}

func (i AuthzExtensionArray) ToAuthzExtensionArrayOutputWithContext(ctx context.Context) AuthzExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzExtensionArrayOutput)
}

// AuthzExtensionMapInput is an input type that accepts AuthzExtensionMap and AuthzExtensionMapOutput values.
// You can construct a concrete instance of `AuthzExtensionMapInput` via:
//
//	AuthzExtensionMap{ "key": AuthzExtensionArgs{...} }
type AuthzExtensionMapInput interface {
	pulumi.Input

	ToAuthzExtensionMapOutput() AuthzExtensionMapOutput
	ToAuthzExtensionMapOutputWithContext(context.Context) AuthzExtensionMapOutput
}

type AuthzExtensionMap map[string]AuthzExtensionInput

func (AuthzExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthzExtension)(nil)).Elem()
}

func (i AuthzExtensionMap) ToAuthzExtensionMapOutput() AuthzExtensionMapOutput {
	return i.ToAuthzExtensionMapOutputWithContext(context.Background())
}

func (i AuthzExtensionMap) ToAuthzExtensionMapOutputWithContext(ctx context.Context) AuthzExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzExtensionMapOutput)
}

type AuthzExtensionOutput struct{ *pulumi.OutputState }

func (AuthzExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzExtension)(nil)).Elem()
}

func (o AuthzExtensionOutput) ToAuthzExtensionOutput() AuthzExtensionOutput {
	return o
}

func (o AuthzExtensionOutput) ToAuthzExtensionOutputWithContext(ctx context.Context) AuthzExtensionOutput {
	return o
}

// The :authority header in the gRPC request sent from Envoy to the extension service.
func (o AuthzExtensionOutput) Authority() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.Authority }).(pulumi.StringOutput)
}

// The timestamp when the resource was created.
func (o AuthzExtensionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A human-readable description of the resource.
func (o AuthzExtensionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AuthzExtensionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Determines how the proxy behaves if the call to the extension fails or times out.
// When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
// * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
// * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
func (o AuthzExtensionOutput) FailOpen() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.BoolOutput { return v.FailOpen }).(pulumi.BoolOutput)
}

// List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
func (o AuthzExtensionOutput) ForwardHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringArrayOutput { return v.ForwardHeaders }).(pulumi.StringArrayOutput)
}

// Set of labels associated with the AuthzExtension resource.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o AuthzExtensionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
func (o AuthzExtensionOutput) LoadBalancingScheme() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.LoadBalancingScheme }).(pulumi.StringOutput)
}

// The location of the resource.
//
// ***
func (o AuthzExtensionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
// {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
func (o AuthzExtensionOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// Identifier. Name of the AuthzExtension resource.
func (o AuthzExtensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AuthzExtensionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AuthzExtensionOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The reference to the service that runs the extension.
// To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
// https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
func (o AuthzExtensionOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
func (o AuthzExtensionOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.Timeout }).(pulumi.StringOutput)
}

// The timestamp when the resource was updated.
func (o AuthzExtensionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
// Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
func (o AuthzExtensionOutput) WireFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzExtension) pulumi.StringOutput { return v.WireFormat }).(pulumi.StringOutput)
}

type AuthzExtensionArrayOutput struct{ *pulumi.OutputState }

func (AuthzExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthzExtension)(nil)).Elem()
}

func (o AuthzExtensionArrayOutput) ToAuthzExtensionArrayOutput() AuthzExtensionArrayOutput {
	return o
}

func (o AuthzExtensionArrayOutput) ToAuthzExtensionArrayOutputWithContext(ctx context.Context) AuthzExtensionArrayOutput {
	return o
}

func (o AuthzExtensionArrayOutput) Index(i pulumi.IntInput) AuthzExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthzExtension {
		return vs[0].([]*AuthzExtension)[vs[1].(int)]
	}).(AuthzExtensionOutput)
}

type AuthzExtensionMapOutput struct{ *pulumi.OutputState }

func (AuthzExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthzExtension)(nil)).Elem()
}

func (o AuthzExtensionMapOutput) ToAuthzExtensionMapOutput() AuthzExtensionMapOutput {
	return o
}

func (o AuthzExtensionMapOutput) ToAuthzExtensionMapOutputWithContext(ctx context.Context) AuthzExtensionMapOutput {
	return o
}

func (o AuthzExtensionMapOutput) MapIndex(k pulumi.StringInput) AuthzExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthzExtension {
		return vs[0].(map[string]*AuthzExtension)[vs[1].(string)]
	}).(AuthzExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzExtensionInput)(nil)).Elem(), &AuthzExtension{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzExtensionArrayInput)(nil)).Elem(), AuthzExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzExtensionMapInput)(nil)).Elem(), AuthzExtensionMap{})
	pulumi.RegisterOutputType(AuthzExtensionOutput{})
	pulumi.RegisterOutputType(AuthzExtensionArrayOutput{})
	pulumi.RegisterOutputType(AuthzExtensionMapOutput{})
}
