// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// EdgeCacheService defines the IP addresses, protocols, security policies, cache policies and routing configuration.
//
// > **Warning:** These resources require allow-listing to use, and are not openly available to all Cloud customers. Engage with your Cloud account team to discuss how to onboard.
//
// ## Example Usage
// ### Network Services Edge Cache Service Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/networkservices"
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		dest, err := storage.NewBucket(ctx, "dest", &storage.BucketArgs{
// 			ForceDestroy: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		instanceEdgeCacheOrigin, err := networkservices.NewEdgeCacheOrigin(ctx, "instanceEdgeCacheOrigin", &networkservices.EdgeCacheOriginArgs{
// 			OriginAddress: dest.Url,
// 			Description:   pulumi.String("The default bucket for media edge test"),
// 			MaxAttempts:   pulumi.Int(2),
// 			Timeout: &networkservices.EdgeCacheOriginTimeoutArgs{
// 				ConnectTimeout: pulumi.String("10s"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = networkservices.NewEdgeCacheService(ctx, "instanceEdgeCacheService", &networkservices.EdgeCacheServiceArgs{
// 			Description: pulumi.String("some description"),
// 			Routing: &networkservices.EdgeCacheServiceRoutingArgs{
// 				HostRules: networkservices.EdgeCacheServiceRoutingHostRuleArray{
// 					&networkservices.EdgeCacheServiceRoutingHostRuleArgs{
// 						Description: pulumi.String("host rule description"),
// 						Hosts: pulumi.StringArray{
// 							pulumi.String("sslcert.tf-test.club"),
// 						},
// 						PathMatcher: pulumi.String("routes"),
// 					},
// 				},
// 				PathMatchers: networkservices.EdgeCacheServiceRoutingPathMatcherArray{
// 					&networkservices.EdgeCacheServiceRoutingPathMatcherArgs{
// 						Name: pulumi.String("routes"),
// 						RouteRules: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleArray{
// 							&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{
// 								Description: pulumi.String("a route rule to match against"),
// 								Priority:    pulumi.String("1"),
// 								MatchRules: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray{
// 									&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{
// 										PrefixMatch: pulumi.String("/"),
// 									},
// 								},
// 								Origin: instanceEdgeCacheOrigin.Name,
// 								RouteAction: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{
// 									CdnPolicy: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{
// 										CacheMode:  pulumi.String("CACHE_ALL_STATIC"),
// 										DefaultTtl: pulumi.String("3600s"),
// 									},
// 								},
// 								HeaderAction: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{
// 									ResponseHeaderToAdds: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray{
// 										&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{
// 											HeaderName:  pulumi.String("x-cache-status"),
// 											HeaderValue: pulumi.String("{cdn_cache_status}"),
// 										},
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Network Services Edge Cache Service Advanced
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/networkservices"
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		dest, err := storage.NewBucket(ctx, "dest", &storage.BucketArgs{
// 			ForceDestroy: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = networkservices.NewEdgeCacheOrigin(ctx, "google", &networkservices.EdgeCacheOriginArgs{
// 			OriginAddress: pulumi.String("google.com"),
// 			Description:   pulumi.String("The default bucket for media edge test"),
// 			MaxAttempts:   pulumi.Int(2),
// 			Timeout: &networkservices.EdgeCacheOriginTimeoutArgs{
// 				ConnectTimeout: pulumi.String("10s"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		instanceEdgeCacheOrigin, err := networkservices.NewEdgeCacheOrigin(ctx, "instanceEdgeCacheOrigin", &networkservices.EdgeCacheOriginArgs{
// 			OriginAddress: dest.Url,
// 			Description:   pulumi.String("The default bucket for media edge test"),
// 			MaxAttempts:   pulumi.Int(2),
// 			Timeout: &networkservices.EdgeCacheOriginTimeoutArgs{
// 				ConnectTimeout: pulumi.String("10s"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = networkservices.NewEdgeCacheService(ctx, "instanceEdgeCacheService", &networkservices.EdgeCacheServiceArgs{
// 			Description: pulumi.String("some description"),
// 			DisableQuic: pulumi.Bool(true),
// 			Labels: pulumi.StringMap{
// 				"a": pulumi.String("b"),
// 			},
// 			Routing: &networkservices.EdgeCacheServiceRoutingArgs{
// 				HostRules: networkservices.EdgeCacheServiceRoutingHostRuleArray{
// 					&networkservices.EdgeCacheServiceRoutingHostRuleArgs{
// 						Description: pulumi.String("host rule description"),
// 						Hosts: pulumi.StringArray{
// 							pulumi.String("sslcert.tf-test.club"),
// 						},
// 						PathMatcher: pulumi.String("routes"),
// 					},
// 					&networkservices.EdgeCacheServiceRoutingHostRuleArgs{
// 						Description: pulumi.String("host rule2"),
// 						Hosts: pulumi.StringArray{
// 							pulumi.String("sslcert.tf-test2.club"),
// 						},
// 						PathMatcher: pulumi.String("routes"),
// 					},
// 					&networkservices.EdgeCacheServiceRoutingHostRuleArgs{
// 						Description: pulumi.String("host rule3"),
// 						Hosts: pulumi.StringArray{
// 							pulumi.String("sslcert.tf-test3.club"),
// 						},
// 						PathMatcher: pulumi.String("routesAdvanced"),
// 					},
// 				},
// 				PathMatchers: networkservices.EdgeCacheServiceRoutingPathMatcherArray{
// 					&networkservices.EdgeCacheServiceRoutingPathMatcherArgs{
// 						Name: pulumi.String("routes"),
// 						RouteRules: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleArray{
// 							&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{
// 								Description: pulumi.String("a route rule to match against"),
// 								Priority:    pulumi.String("1"),
// 								MatchRules: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray{
// 									&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{
// 										PrefixMatch: pulumi.String("/"),
// 									},
// 								},
// 								Origin: instanceEdgeCacheOrigin.Name,
// 								RouteAction: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{
// 									CdnPolicy: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{
// 										CacheMode:  pulumi.String("CACHE_ALL_STATIC"),
// 										DefaultTtl: pulumi.String("3600s"),
// 									},
// 								},
// 								HeaderAction: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{
// 									ResponseHeaderToAdds: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray{
// 										&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{
// 											HeaderName:  pulumi.String("x-cache-status"),
// 											HeaderValue: pulumi.String("{cdn_cache_status}"),
// 										},
// 									},
// 								},
// 							},
// 						},
// 					},
// 					&networkservices.EdgeCacheServiceRoutingPathMatcherArgs{
// 						Name:        pulumi.String("routesAdvanced"),
// 						Description: pulumi.String("an advanced ruleset"),
// 						RouteRules: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleArray{
// 							&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{
// 								Description: pulumi.String("an advanced route rule to match against"),
// 								Priority:    pulumi.String("1"),
// 								MatchRules: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray{
// 									&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{
// 										PrefixMatch: pulumi.String("/potato/"),
// 										QueryParameterMatches: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray{
// 											&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{
// 												Name:         pulumi.String("debug"),
// 												PresentMatch: pulumi.Bool(true),
// 											},
// 											&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{
// 												Name:       pulumi.String("state"),
// 												ExactMatch: pulumi.String("debug"),
// 											},
// 										},
// 									},
// 									&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{
// 										FullPathMatch: pulumi.String("/apple"),
// 									},
// 								},
// 								HeaderAction: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{
// 									RequestHeaderToAdds: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray{
// 										&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs{
// 											HeaderName:  pulumi.String("debug"),
// 											HeaderValue: pulumi.String("true"),
// 											Replace:     pulumi.Bool(true),
// 										},
// 										&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs{
// 											HeaderName:  pulumi.String("potato"),
// 											HeaderValue: pulumi.String("plant"),
// 										},
// 									},
// 									ResponseHeaderToAdds: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray{
// 										&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{
// 											HeaderName:  pulumi.String("potato"),
// 											HeaderValue: pulumi.String("plant"),
// 											Replace:     pulumi.Bool(true),
// 										},
// 									},
// 									RequestHeaderToRemoves: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray{
// 										&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs{
// 											HeaderName: pulumi.String("prod"),
// 										},
// 									},
// 									ResponseHeaderToRemoves: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray{
// 										&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs{
// 											HeaderName: pulumi.String("prod"),
// 										},
// 									},
// 								},
// 								Origin: instanceEdgeCacheOrigin.Name,
// 								RouteAction: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{
// 									CdnPolicy: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{
// 										CacheMode:  pulumi.String("CACHE_ALL_STATIC"),
// 										DefaultTtl: pulumi.String("3800s"),
// 										ClientTtl:  pulumi.String("3600s"),
// 										MaxTtl:     pulumi.String("9000s"),
// 										CacheKeyPolicy: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{
// 											IncludeProtocol: pulumi.Bool(true),
// 											ExcludeHost:     pulumi.Bool(true),
// 											IncludedQueryParameters: pulumi.StringArray{
// 												pulumi.String("apple"),
// 												pulumi.String("dev"),
// 												pulumi.String("santa"),
// 												pulumi.String("claus"),
// 											},
// 											IncludedHeaderNames: pulumi.StringArray{
// 												pulumi.String("banana"),
// 											},
// 										},
// 										NegativeCaching:   pulumi.Bool(true),
// 										SignedRequestMode: pulumi.String("DISABLED"),
// 										NegativeCachingPolicy: pulumi.StringMap{
// 											"500": pulumi.String("3000s"),
// 										},
// 									},
// 									UrlRewrite: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{
// 										PathPrefixRewrite: pulumi.String("/dev"),
// 										HostRewrite:       pulumi.String("dev.club"),
// 									},
// 									CorsPolicy: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{
// 										MaxAge:           pulumi.String("2500s"),
// 										AllowCredentials: pulumi.Bool(true),
// 										AllowOrigins: pulumi.StringArray{
// 											pulumi.String("*"),
// 										},
// 										AllowMethods: pulumi.StringArray{
// 											pulumi.String("GET"),
// 										},
// 										AllowHeaders: pulumi.StringArray{
// 											pulumi.String("dev"),
// 										},
// 										ExposeHeaders: pulumi.StringArray{
// 											pulumi.String("prod"),
// 										},
// 									},
// 								},
// 							},
// 							&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{
// 								Description: pulumi.String("a second route rule to match against"),
// 								Priority:    pulumi.String("2"),
// 								MatchRules: networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray{
// 									&networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{
// 										FullPathMatch: pulumi.String("/yay"),
// 									},
// 								},
// 								Origin: instanceEdgeCacheOrigin.Name,
// 								RouteAction: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{
// 									CdnPolicy: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{
// 										CacheMode:  pulumi.String("CACHE_ALL_STATIC"),
// 										DefaultTtl: pulumi.String("3600s"),
// 										CacheKeyPolicy: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{
// 											ExcludedQueryParameters: pulumi.StringArray{
// 												pulumi.String("dev"),
// 											},
// 										},
// 									},
// 									CorsPolicy: &networkservices.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{
// 										MaxAge: pulumi.String("3000s"),
// 										AllowHeaders: pulumi.StringArray{
// 											pulumi.String("dev"),
// 										},
// 										Disabled: pulumi.Bool(true),
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 			LogConfig: &networkservices.EdgeCacheServiceLogConfigArgs{
// 				Enable:     pulumi.Bool(true),
// 				SampleRate: pulumi.Float64(0.01),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// EdgeCacheService can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default projects/{{project}}/locations/global/edgeCacheServices/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default {{project}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default {{name}}
// ```
type EdgeCacheService struct {
	pulumi.CustomResourceState

	// A human-readable description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic pulumi.BoolOutput `pulumi:"disableQuic"`
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
	EdgeSecurityPolicy pulumi.StringPtrOutput `pulumi:"edgeSecurityPolicy"`
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
	// Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates pulumi.StringArrayOutput `pulumi:"edgeSslCertificates"`
	// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv4Addresses pulumi.StringArrayOutput `pulumi:"ipv4Addresses"`
	// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv6Addresses pulumi.StringArrayOutput `pulumi:"ipv6Addresses"`
	// Set of label tags associated with the EdgeCache resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
	// Structure is documented below.
	LogConfig EdgeCacheServiceLogConfigPtrOutput `pulumi:"logConfig"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Require TLS (HTTPS) for all clients connecting to this service.
	// Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
	// You must have at least one (1) edgeSslCertificate specified to enable this.
	RequireTls pulumi.BoolOutput `pulumi:"requireTls"`
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	// Structure is documented below.
	Routing EdgeCacheServiceRoutingOutput `pulumi:"routing"`
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService.
	// If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy pulumi.StringPtrOutput `pulumi:"sslPolicy"`
}

// NewEdgeCacheService registers a new resource with the given unique name, arguments, and options.
func NewEdgeCacheService(ctx *pulumi.Context,
	name string, args *EdgeCacheServiceArgs, opts ...pulumi.ResourceOption) (*EdgeCacheService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Routing == nil {
		return nil, errors.New("invalid value for required argument 'Routing'")
	}
	var resource EdgeCacheService
	err := ctx.RegisterResource("gcp:networkservices/edgeCacheService:EdgeCacheService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeCacheService gets an existing EdgeCacheService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeCacheService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeCacheServiceState, opts ...pulumi.ResourceOption) (*EdgeCacheService, error) {
	var resource EdgeCacheService
	err := ctx.ReadResource("gcp:networkservices/edgeCacheService:EdgeCacheService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeCacheService resources.
type edgeCacheServiceState struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic *bool `pulumi:"disableQuic"`
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
	EdgeSecurityPolicy *string `pulumi:"edgeSecurityPolicy"`
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
	// Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates []string `pulumi:"edgeSslCertificates"`
	// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv4Addresses []string `pulumi:"ipv4Addresses"`
	// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// Set of label tags associated with the EdgeCache resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
	// Structure is documented below.
	LogConfig *EdgeCacheServiceLogConfig `pulumi:"logConfig"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Require TLS (HTTPS) for all clients connecting to this service.
	// Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
	// You must have at least one (1) edgeSslCertificate specified to enable this.
	RequireTls *bool `pulumi:"requireTls"`
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	// Structure is documented below.
	Routing *EdgeCacheServiceRouting `pulumi:"routing"`
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService.
	// If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy *string `pulumi:"sslPolicy"`
}

type EdgeCacheServiceState struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic pulumi.BoolPtrInput
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
	EdgeSecurityPolicy pulumi.StringPtrInput
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
	// Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates pulumi.StringArrayInput
	// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv4Addresses pulumi.StringArrayInput
	// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv6Addresses pulumi.StringArrayInput
	// Set of label tags associated with the EdgeCache resource.
	Labels pulumi.StringMapInput
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
	// Structure is documented below.
	LogConfig EdgeCacheServiceLogConfigPtrInput
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Require TLS (HTTPS) for all clients connecting to this service.
	// Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
	// You must have at least one (1) edgeSslCertificate specified to enable this.
	RequireTls pulumi.BoolPtrInput
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	// Structure is documented below.
	Routing EdgeCacheServiceRoutingPtrInput
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService.
	// If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy pulumi.StringPtrInput
}

func (EdgeCacheServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeCacheServiceState)(nil)).Elem()
}

type edgeCacheServiceArgs struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic *bool `pulumi:"disableQuic"`
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
	EdgeSecurityPolicy *string `pulumi:"edgeSecurityPolicy"`
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
	// Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates []string `pulumi:"edgeSslCertificates"`
	// Set of label tags associated with the EdgeCache resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
	// Structure is documented below.
	LogConfig *EdgeCacheServiceLogConfig `pulumi:"logConfig"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Require TLS (HTTPS) for all clients connecting to this service.
	// Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
	// You must have at least one (1) edgeSslCertificate specified to enable this.
	RequireTls *bool `pulumi:"requireTls"`
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	// Structure is documented below.
	Routing EdgeCacheServiceRouting `pulumi:"routing"`
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService.
	// If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy *string `pulumi:"sslPolicy"`
}

// The set of arguments for constructing a EdgeCacheService resource.
type EdgeCacheServiceArgs struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic pulumi.BoolPtrInput
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
	EdgeSecurityPolicy pulumi.StringPtrInput
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
	// Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates pulumi.StringArrayInput
	// Set of label tags associated with the EdgeCache resource.
	Labels pulumi.StringMapInput
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
	// Structure is documented below.
	LogConfig EdgeCacheServiceLogConfigPtrInput
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Require TLS (HTTPS) for all clients connecting to this service.
	// Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
	// You must have at least one (1) edgeSslCertificate specified to enable this.
	RequireTls pulumi.BoolPtrInput
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	// Structure is documented below.
	Routing EdgeCacheServiceRoutingInput
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService.
	// If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy pulumi.StringPtrInput
}

func (EdgeCacheServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeCacheServiceArgs)(nil)).Elem()
}

type EdgeCacheServiceInput interface {
	pulumi.Input

	ToEdgeCacheServiceOutput() EdgeCacheServiceOutput
	ToEdgeCacheServiceOutputWithContext(ctx context.Context) EdgeCacheServiceOutput
}

func (*EdgeCacheService) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheService)(nil))
}

func (i *EdgeCacheService) ToEdgeCacheServiceOutput() EdgeCacheServiceOutput {
	return i.ToEdgeCacheServiceOutputWithContext(context.Background())
}

func (i *EdgeCacheService) ToEdgeCacheServiceOutputWithContext(ctx context.Context) EdgeCacheServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceOutput)
}

func (i *EdgeCacheService) ToEdgeCacheServicePtrOutput() EdgeCacheServicePtrOutput {
	return i.ToEdgeCacheServicePtrOutputWithContext(context.Background())
}

func (i *EdgeCacheService) ToEdgeCacheServicePtrOutputWithContext(ctx context.Context) EdgeCacheServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServicePtrOutput)
}

type EdgeCacheServicePtrInput interface {
	pulumi.Input

	ToEdgeCacheServicePtrOutput() EdgeCacheServicePtrOutput
	ToEdgeCacheServicePtrOutputWithContext(ctx context.Context) EdgeCacheServicePtrOutput
}

type edgeCacheServicePtrType EdgeCacheServiceArgs

func (*edgeCacheServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheService)(nil))
}

func (i *edgeCacheServicePtrType) ToEdgeCacheServicePtrOutput() EdgeCacheServicePtrOutput {
	return i.ToEdgeCacheServicePtrOutputWithContext(context.Background())
}

func (i *edgeCacheServicePtrType) ToEdgeCacheServicePtrOutputWithContext(ctx context.Context) EdgeCacheServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServicePtrOutput)
}

// EdgeCacheServiceArrayInput is an input type that accepts EdgeCacheServiceArray and EdgeCacheServiceArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceArrayInput` via:
//
//          EdgeCacheServiceArray{ EdgeCacheServiceArgs{...} }
type EdgeCacheServiceArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceArrayOutput() EdgeCacheServiceArrayOutput
	ToEdgeCacheServiceArrayOutputWithContext(context.Context) EdgeCacheServiceArrayOutput
}

type EdgeCacheServiceArray []EdgeCacheServiceInput

func (EdgeCacheServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeCacheService)(nil)).Elem()
}

func (i EdgeCacheServiceArray) ToEdgeCacheServiceArrayOutput() EdgeCacheServiceArrayOutput {
	return i.ToEdgeCacheServiceArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceArray) ToEdgeCacheServiceArrayOutputWithContext(ctx context.Context) EdgeCacheServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceArrayOutput)
}

// EdgeCacheServiceMapInput is an input type that accepts EdgeCacheServiceMap and EdgeCacheServiceMapOutput values.
// You can construct a concrete instance of `EdgeCacheServiceMapInput` via:
//
//          EdgeCacheServiceMap{ "key": EdgeCacheServiceArgs{...} }
type EdgeCacheServiceMapInput interface {
	pulumi.Input

	ToEdgeCacheServiceMapOutput() EdgeCacheServiceMapOutput
	ToEdgeCacheServiceMapOutputWithContext(context.Context) EdgeCacheServiceMapOutput
}

type EdgeCacheServiceMap map[string]EdgeCacheServiceInput

func (EdgeCacheServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeCacheService)(nil)).Elem()
}

func (i EdgeCacheServiceMap) ToEdgeCacheServiceMapOutput() EdgeCacheServiceMapOutput {
	return i.ToEdgeCacheServiceMapOutputWithContext(context.Background())
}

func (i EdgeCacheServiceMap) ToEdgeCacheServiceMapOutputWithContext(ctx context.Context) EdgeCacheServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceMapOutput)
}

type EdgeCacheServiceOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheService)(nil))
}

func (o EdgeCacheServiceOutput) ToEdgeCacheServiceOutput() EdgeCacheServiceOutput {
	return o
}

func (o EdgeCacheServiceOutput) ToEdgeCacheServiceOutputWithContext(ctx context.Context) EdgeCacheServiceOutput {
	return o
}

func (o EdgeCacheServiceOutput) ToEdgeCacheServicePtrOutput() EdgeCacheServicePtrOutput {
	return o.ToEdgeCacheServicePtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceOutput) ToEdgeCacheServicePtrOutputWithContext(ctx context.Context) EdgeCacheServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheService) *EdgeCacheService {
		return &v
	}).(EdgeCacheServicePtrOutput)
}

type EdgeCacheServicePtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheService)(nil))
}

func (o EdgeCacheServicePtrOutput) ToEdgeCacheServicePtrOutput() EdgeCacheServicePtrOutput {
	return o
}

func (o EdgeCacheServicePtrOutput) ToEdgeCacheServicePtrOutputWithContext(ctx context.Context) EdgeCacheServicePtrOutput {
	return o
}

func (o EdgeCacheServicePtrOutput) Elem() EdgeCacheServiceOutput {
	return o.ApplyT(func(v *EdgeCacheService) EdgeCacheService {
		if v != nil {
			return *v
		}
		var ret EdgeCacheService
		return ret
	}).(EdgeCacheServiceOutput)
}

type EdgeCacheServiceArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheService)(nil))
}

func (o EdgeCacheServiceArrayOutput) ToEdgeCacheServiceArrayOutput() EdgeCacheServiceArrayOutput {
	return o
}

func (o EdgeCacheServiceArrayOutput) ToEdgeCacheServiceArrayOutputWithContext(ctx context.Context) EdgeCacheServiceArrayOutput {
	return o
}

func (o EdgeCacheServiceArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheService {
		return vs[0].([]EdgeCacheService)[vs[1].(int)]
	}).(EdgeCacheServiceOutput)
}

type EdgeCacheServiceMapOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EdgeCacheService)(nil))
}

func (o EdgeCacheServiceMapOutput) ToEdgeCacheServiceMapOutput() EdgeCacheServiceMapOutput {
	return o
}

func (o EdgeCacheServiceMapOutput) ToEdgeCacheServiceMapOutputWithContext(ctx context.Context) EdgeCacheServiceMapOutput {
	return o
}

func (o EdgeCacheServiceMapOutput) MapIndex(k pulumi.StringInput) EdgeCacheServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EdgeCacheService {
		return vs[0].(map[string]EdgeCacheService)[vs[1].(string)]
	}).(EdgeCacheServiceOutput)
}

func init() {
	pulumi.RegisterOutputType(EdgeCacheServiceOutput{})
	pulumi.RegisterOutputType(EdgeCacheServicePtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceMapOutput{})
}
