// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EdgeCacheKeysetPublicKey struct {
	// The ID of the public key. The ID must be 1-63 characters long, and comply with RFC1035.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]*
	// which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	Id string `pulumi:"id"`
	// Set to true to have the CDN automatically manage this public key value.
	Managed *bool `pulumi:"managed"`
	// The base64-encoded value of the Ed25519 public key. The base64 encoding can be padded (44 bytes) or unpadded (43 bytes).
	// Representations or encodings of the public key other than this will be rejected with an error.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Value *string `pulumi:"value"`
}

// EdgeCacheKeysetPublicKeyInput is an input type that accepts EdgeCacheKeysetPublicKeyArgs and EdgeCacheKeysetPublicKeyOutput values.
// You can construct a concrete instance of `EdgeCacheKeysetPublicKeyInput` via:
//
//	EdgeCacheKeysetPublicKeyArgs{...}
type EdgeCacheKeysetPublicKeyInput interface {
	pulumi.Input

	ToEdgeCacheKeysetPublicKeyOutput() EdgeCacheKeysetPublicKeyOutput
	ToEdgeCacheKeysetPublicKeyOutputWithContext(context.Context) EdgeCacheKeysetPublicKeyOutput
}

type EdgeCacheKeysetPublicKeyArgs struct {
	// The ID of the public key. The ID must be 1-63 characters long, and comply with RFC1035.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]*
	// which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	Id pulumi.StringInput `pulumi:"id"`
	// Set to true to have the CDN automatically manage this public key value.
	Managed pulumi.BoolPtrInput `pulumi:"managed"`
	// The base64-encoded value of the Ed25519 public key. The base64 encoding can be padded (44 bytes) or unpadded (43 bytes).
	// Representations or encodings of the public key other than this will be rejected with an error.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EdgeCacheKeysetPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheKeysetPublicKey)(nil)).Elem()
}

func (i EdgeCacheKeysetPublicKeyArgs) ToEdgeCacheKeysetPublicKeyOutput() EdgeCacheKeysetPublicKeyOutput {
	return i.ToEdgeCacheKeysetPublicKeyOutputWithContext(context.Background())
}

func (i EdgeCacheKeysetPublicKeyArgs) ToEdgeCacheKeysetPublicKeyOutputWithContext(ctx context.Context) EdgeCacheKeysetPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheKeysetPublicKeyOutput)
}

// EdgeCacheKeysetPublicKeyArrayInput is an input type that accepts EdgeCacheKeysetPublicKeyArray and EdgeCacheKeysetPublicKeyArrayOutput values.
// You can construct a concrete instance of `EdgeCacheKeysetPublicKeyArrayInput` via:
//
//	EdgeCacheKeysetPublicKeyArray{ EdgeCacheKeysetPublicKeyArgs{...} }
type EdgeCacheKeysetPublicKeyArrayInput interface {
	pulumi.Input

	ToEdgeCacheKeysetPublicKeyArrayOutput() EdgeCacheKeysetPublicKeyArrayOutput
	ToEdgeCacheKeysetPublicKeyArrayOutputWithContext(context.Context) EdgeCacheKeysetPublicKeyArrayOutput
}

type EdgeCacheKeysetPublicKeyArray []EdgeCacheKeysetPublicKeyInput

func (EdgeCacheKeysetPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheKeysetPublicKey)(nil)).Elem()
}

func (i EdgeCacheKeysetPublicKeyArray) ToEdgeCacheKeysetPublicKeyArrayOutput() EdgeCacheKeysetPublicKeyArrayOutput {
	return i.ToEdgeCacheKeysetPublicKeyArrayOutputWithContext(context.Background())
}

func (i EdgeCacheKeysetPublicKeyArray) ToEdgeCacheKeysetPublicKeyArrayOutputWithContext(ctx context.Context) EdgeCacheKeysetPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheKeysetPublicKeyArrayOutput)
}

type EdgeCacheKeysetPublicKeyOutput struct{ *pulumi.OutputState }

func (EdgeCacheKeysetPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheKeysetPublicKey)(nil)).Elem()
}

func (o EdgeCacheKeysetPublicKeyOutput) ToEdgeCacheKeysetPublicKeyOutput() EdgeCacheKeysetPublicKeyOutput {
	return o
}

func (o EdgeCacheKeysetPublicKeyOutput) ToEdgeCacheKeysetPublicKeyOutputWithContext(ctx context.Context) EdgeCacheKeysetPublicKeyOutput {
	return o
}

// The ID of the public key. The ID must be 1-63 characters long, and comply with RFC1035.
// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]*
// which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
func (o EdgeCacheKeysetPublicKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheKeysetPublicKey) string { return v.Id }).(pulumi.StringOutput)
}

// Set to true to have the CDN automatically manage this public key value.
func (o EdgeCacheKeysetPublicKeyOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheKeysetPublicKey) *bool { return v.Managed }).(pulumi.BoolPtrOutput)
}

// The base64-encoded value of the Ed25519 public key. The base64 encoding can be padded (44 bytes) or unpadded (43 bytes).
// Representations or encodings of the public key other than this will be rejected with an error.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o EdgeCacheKeysetPublicKeyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheKeysetPublicKey) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EdgeCacheKeysetPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheKeysetPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheKeysetPublicKey)(nil)).Elem()
}

func (o EdgeCacheKeysetPublicKeyArrayOutput) ToEdgeCacheKeysetPublicKeyArrayOutput() EdgeCacheKeysetPublicKeyArrayOutput {
	return o
}

func (o EdgeCacheKeysetPublicKeyArrayOutput) ToEdgeCacheKeysetPublicKeyArrayOutputWithContext(ctx context.Context) EdgeCacheKeysetPublicKeyArrayOutput {
	return o
}

func (o EdgeCacheKeysetPublicKeyArrayOutput) Index(i pulumi.IntInput) EdgeCacheKeysetPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheKeysetPublicKey {
		return vs[0].([]EdgeCacheKeysetPublicKey)[vs[1].(int)]
	}).(EdgeCacheKeysetPublicKeyOutput)
}

type EdgeCacheKeysetValidationSharedKey struct {
	// The name of the secret version in Secret Manager.
	// The resource name of the secret version must be in the format `projects/*/secrets/*/versions/*` where the `*` values are replaced by the secrets themselves.
	// The secrets must be at least 16 bytes large.  The recommended secret size depends on the signature algorithm you are using.
	// * If you are using HMAC-SHA1, we suggest 20-byte secrets.
	// * If you are using HMAC-SHA256, we suggest 32-byte secrets.
	//   See RFC 2104, Section 3 for more details on these recommendations.
	SecretVersion string `pulumi:"secretVersion"`
}

// EdgeCacheKeysetValidationSharedKeyInput is an input type that accepts EdgeCacheKeysetValidationSharedKeyArgs and EdgeCacheKeysetValidationSharedKeyOutput values.
// You can construct a concrete instance of `EdgeCacheKeysetValidationSharedKeyInput` via:
//
//	EdgeCacheKeysetValidationSharedKeyArgs{...}
type EdgeCacheKeysetValidationSharedKeyInput interface {
	pulumi.Input

	ToEdgeCacheKeysetValidationSharedKeyOutput() EdgeCacheKeysetValidationSharedKeyOutput
	ToEdgeCacheKeysetValidationSharedKeyOutputWithContext(context.Context) EdgeCacheKeysetValidationSharedKeyOutput
}

type EdgeCacheKeysetValidationSharedKeyArgs struct {
	// The name of the secret version in Secret Manager.
	// The resource name of the secret version must be in the format `projects/*/secrets/*/versions/*` where the `*` values are replaced by the secrets themselves.
	// The secrets must be at least 16 bytes large.  The recommended secret size depends on the signature algorithm you are using.
	// * If you are using HMAC-SHA1, we suggest 20-byte secrets.
	// * If you are using HMAC-SHA256, we suggest 32-byte secrets.
	//   See RFC 2104, Section 3 for more details on these recommendations.
	SecretVersion pulumi.StringInput `pulumi:"secretVersion"`
}

func (EdgeCacheKeysetValidationSharedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheKeysetValidationSharedKey)(nil)).Elem()
}

func (i EdgeCacheKeysetValidationSharedKeyArgs) ToEdgeCacheKeysetValidationSharedKeyOutput() EdgeCacheKeysetValidationSharedKeyOutput {
	return i.ToEdgeCacheKeysetValidationSharedKeyOutputWithContext(context.Background())
}

func (i EdgeCacheKeysetValidationSharedKeyArgs) ToEdgeCacheKeysetValidationSharedKeyOutputWithContext(ctx context.Context) EdgeCacheKeysetValidationSharedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheKeysetValidationSharedKeyOutput)
}

// EdgeCacheKeysetValidationSharedKeyArrayInput is an input type that accepts EdgeCacheKeysetValidationSharedKeyArray and EdgeCacheKeysetValidationSharedKeyArrayOutput values.
// You can construct a concrete instance of `EdgeCacheKeysetValidationSharedKeyArrayInput` via:
//
//	EdgeCacheKeysetValidationSharedKeyArray{ EdgeCacheKeysetValidationSharedKeyArgs{...} }
type EdgeCacheKeysetValidationSharedKeyArrayInput interface {
	pulumi.Input

	ToEdgeCacheKeysetValidationSharedKeyArrayOutput() EdgeCacheKeysetValidationSharedKeyArrayOutput
	ToEdgeCacheKeysetValidationSharedKeyArrayOutputWithContext(context.Context) EdgeCacheKeysetValidationSharedKeyArrayOutput
}

type EdgeCacheKeysetValidationSharedKeyArray []EdgeCacheKeysetValidationSharedKeyInput

func (EdgeCacheKeysetValidationSharedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheKeysetValidationSharedKey)(nil)).Elem()
}

func (i EdgeCacheKeysetValidationSharedKeyArray) ToEdgeCacheKeysetValidationSharedKeyArrayOutput() EdgeCacheKeysetValidationSharedKeyArrayOutput {
	return i.ToEdgeCacheKeysetValidationSharedKeyArrayOutputWithContext(context.Background())
}

func (i EdgeCacheKeysetValidationSharedKeyArray) ToEdgeCacheKeysetValidationSharedKeyArrayOutputWithContext(ctx context.Context) EdgeCacheKeysetValidationSharedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheKeysetValidationSharedKeyArrayOutput)
}

type EdgeCacheKeysetValidationSharedKeyOutput struct{ *pulumi.OutputState }

func (EdgeCacheKeysetValidationSharedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheKeysetValidationSharedKey)(nil)).Elem()
}

func (o EdgeCacheKeysetValidationSharedKeyOutput) ToEdgeCacheKeysetValidationSharedKeyOutput() EdgeCacheKeysetValidationSharedKeyOutput {
	return o
}

func (o EdgeCacheKeysetValidationSharedKeyOutput) ToEdgeCacheKeysetValidationSharedKeyOutputWithContext(ctx context.Context) EdgeCacheKeysetValidationSharedKeyOutput {
	return o
}

// The name of the secret version in Secret Manager.
// The resource name of the secret version must be in the format `projects/*/secrets/*/versions/*` where the `*` values are replaced by the secrets themselves.
// The secrets must be at least 16 bytes large.  The recommended secret size depends on the signature algorithm you are using.
//   - If you are using HMAC-SHA1, we suggest 20-byte secrets.
//   - If you are using HMAC-SHA256, we suggest 32-byte secrets.
//     See RFC 2104, Section 3 for more details on these recommendations.
func (o EdgeCacheKeysetValidationSharedKeyOutput) SecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheKeysetValidationSharedKey) string { return v.SecretVersion }).(pulumi.StringOutput)
}

type EdgeCacheKeysetValidationSharedKeyArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheKeysetValidationSharedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheKeysetValidationSharedKey)(nil)).Elem()
}

func (o EdgeCacheKeysetValidationSharedKeyArrayOutput) ToEdgeCacheKeysetValidationSharedKeyArrayOutput() EdgeCacheKeysetValidationSharedKeyArrayOutput {
	return o
}

func (o EdgeCacheKeysetValidationSharedKeyArrayOutput) ToEdgeCacheKeysetValidationSharedKeyArrayOutputWithContext(ctx context.Context) EdgeCacheKeysetValidationSharedKeyArrayOutput {
	return o
}

func (o EdgeCacheKeysetValidationSharedKeyArrayOutput) Index(i pulumi.IntInput) EdgeCacheKeysetValidationSharedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheKeysetValidationSharedKey {
		return vs[0].([]EdgeCacheKeysetValidationSharedKey)[vs[1].(int)]
	}).(EdgeCacheKeysetValidationSharedKeyOutput)
}

type EdgeCacheOriginAwsV4Authentication struct {
	// The access key ID your origin uses to identify the key.
	AccessKeyId string `pulumi:"accessKeyId"`
	// The name of the AWS region that your origin is in.
	OriginRegion string `pulumi:"originRegion"`
	// The Secret Manager secret version of the secret access key used by your origin.
	// This is the resource name of the secret version in the format `projects/*/secrets/*/versions/*` where the `*` values are replaced by the project, secret, and version you require.
	SecretAccessKeyVersion string `pulumi:"secretAccessKeyVersion"`
}

// EdgeCacheOriginAwsV4AuthenticationInput is an input type that accepts EdgeCacheOriginAwsV4AuthenticationArgs and EdgeCacheOriginAwsV4AuthenticationOutput values.
// You can construct a concrete instance of `EdgeCacheOriginAwsV4AuthenticationInput` via:
//
//	EdgeCacheOriginAwsV4AuthenticationArgs{...}
type EdgeCacheOriginAwsV4AuthenticationInput interface {
	pulumi.Input

	ToEdgeCacheOriginAwsV4AuthenticationOutput() EdgeCacheOriginAwsV4AuthenticationOutput
	ToEdgeCacheOriginAwsV4AuthenticationOutputWithContext(context.Context) EdgeCacheOriginAwsV4AuthenticationOutput
}

type EdgeCacheOriginAwsV4AuthenticationArgs struct {
	// The access key ID your origin uses to identify the key.
	AccessKeyId pulumi.StringInput `pulumi:"accessKeyId"`
	// The name of the AWS region that your origin is in.
	OriginRegion pulumi.StringInput `pulumi:"originRegion"`
	// The Secret Manager secret version of the secret access key used by your origin.
	// This is the resource name of the secret version in the format `projects/*/secrets/*/versions/*` where the `*` values are replaced by the project, secret, and version you require.
	SecretAccessKeyVersion pulumi.StringInput `pulumi:"secretAccessKeyVersion"`
}

func (EdgeCacheOriginAwsV4AuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginAwsV4Authentication)(nil)).Elem()
}

func (i EdgeCacheOriginAwsV4AuthenticationArgs) ToEdgeCacheOriginAwsV4AuthenticationOutput() EdgeCacheOriginAwsV4AuthenticationOutput {
	return i.ToEdgeCacheOriginAwsV4AuthenticationOutputWithContext(context.Background())
}

func (i EdgeCacheOriginAwsV4AuthenticationArgs) ToEdgeCacheOriginAwsV4AuthenticationOutputWithContext(ctx context.Context) EdgeCacheOriginAwsV4AuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginAwsV4AuthenticationOutput)
}

func (i EdgeCacheOriginAwsV4AuthenticationArgs) ToEdgeCacheOriginAwsV4AuthenticationPtrOutput() EdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return i.ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(context.Background())
}

func (i EdgeCacheOriginAwsV4AuthenticationArgs) ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(ctx context.Context) EdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginAwsV4AuthenticationOutput).ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(ctx)
}

// EdgeCacheOriginAwsV4AuthenticationPtrInput is an input type that accepts EdgeCacheOriginAwsV4AuthenticationArgs, EdgeCacheOriginAwsV4AuthenticationPtr and EdgeCacheOriginAwsV4AuthenticationPtrOutput values.
// You can construct a concrete instance of `EdgeCacheOriginAwsV4AuthenticationPtrInput` via:
//
//	        EdgeCacheOriginAwsV4AuthenticationArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheOriginAwsV4AuthenticationPtrInput interface {
	pulumi.Input

	ToEdgeCacheOriginAwsV4AuthenticationPtrOutput() EdgeCacheOriginAwsV4AuthenticationPtrOutput
	ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(context.Context) EdgeCacheOriginAwsV4AuthenticationPtrOutput
}

type edgeCacheOriginAwsV4AuthenticationPtrType EdgeCacheOriginAwsV4AuthenticationArgs

func EdgeCacheOriginAwsV4AuthenticationPtr(v *EdgeCacheOriginAwsV4AuthenticationArgs) EdgeCacheOriginAwsV4AuthenticationPtrInput {
	return (*edgeCacheOriginAwsV4AuthenticationPtrType)(v)
}

func (*edgeCacheOriginAwsV4AuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginAwsV4Authentication)(nil)).Elem()
}

func (i *edgeCacheOriginAwsV4AuthenticationPtrType) ToEdgeCacheOriginAwsV4AuthenticationPtrOutput() EdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return i.ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(context.Background())
}

func (i *edgeCacheOriginAwsV4AuthenticationPtrType) ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(ctx context.Context) EdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginAwsV4AuthenticationPtrOutput)
}

type EdgeCacheOriginAwsV4AuthenticationOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginAwsV4AuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginAwsV4Authentication)(nil)).Elem()
}

func (o EdgeCacheOriginAwsV4AuthenticationOutput) ToEdgeCacheOriginAwsV4AuthenticationOutput() EdgeCacheOriginAwsV4AuthenticationOutput {
	return o
}

func (o EdgeCacheOriginAwsV4AuthenticationOutput) ToEdgeCacheOriginAwsV4AuthenticationOutputWithContext(ctx context.Context) EdgeCacheOriginAwsV4AuthenticationOutput {
	return o
}

func (o EdgeCacheOriginAwsV4AuthenticationOutput) ToEdgeCacheOriginAwsV4AuthenticationPtrOutput() EdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return o.ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(context.Background())
}

func (o EdgeCacheOriginAwsV4AuthenticationOutput) ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(ctx context.Context) EdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheOriginAwsV4Authentication) *EdgeCacheOriginAwsV4Authentication {
		return &v
	}).(EdgeCacheOriginAwsV4AuthenticationPtrOutput)
}

// The access key ID your origin uses to identify the key.
func (o EdgeCacheOriginAwsV4AuthenticationOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheOriginAwsV4Authentication) string { return v.AccessKeyId }).(pulumi.StringOutput)
}

// The name of the AWS region that your origin is in.
func (o EdgeCacheOriginAwsV4AuthenticationOutput) OriginRegion() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheOriginAwsV4Authentication) string { return v.OriginRegion }).(pulumi.StringOutput)
}

// The Secret Manager secret version of the secret access key used by your origin.
// This is the resource name of the secret version in the format `projects/*/secrets/*/versions/*` where the `*` values are replaced by the project, secret, and version you require.
func (o EdgeCacheOriginAwsV4AuthenticationOutput) SecretAccessKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheOriginAwsV4Authentication) string { return v.SecretAccessKeyVersion }).(pulumi.StringOutput)
}

type EdgeCacheOriginAwsV4AuthenticationPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginAwsV4AuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginAwsV4Authentication)(nil)).Elem()
}

func (o EdgeCacheOriginAwsV4AuthenticationPtrOutput) ToEdgeCacheOriginAwsV4AuthenticationPtrOutput() EdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return o
}

func (o EdgeCacheOriginAwsV4AuthenticationPtrOutput) ToEdgeCacheOriginAwsV4AuthenticationPtrOutputWithContext(ctx context.Context) EdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return o
}

func (o EdgeCacheOriginAwsV4AuthenticationPtrOutput) Elem() EdgeCacheOriginAwsV4AuthenticationOutput {
	return o.ApplyT(func(v *EdgeCacheOriginAwsV4Authentication) EdgeCacheOriginAwsV4Authentication {
		if v != nil {
			return *v
		}
		var ret EdgeCacheOriginAwsV4Authentication
		return ret
	}).(EdgeCacheOriginAwsV4AuthenticationOutput)
}

// The access key ID your origin uses to identify the key.
func (o EdgeCacheOriginAwsV4AuthenticationPtrOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginAwsV4Authentication) *string {
		if v == nil {
			return nil
		}
		return &v.AccessKeyId
	}).(pulumi.StringPtrOutput)
}

// The name of the AWS region that your origin is in.
func (o EdgeCacheOriginAwsV4AuthenticationPtrOutput) OriginRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginAwsV4Authentication) *string {
		if v == nil {
			return nil
		}
		return &v.OriginRegion
	}).(pulumi.StringPtrOutput)
}

// The Secret Manager secret version of the secret access key used by your origin.
// This is the resource name of the secret version in the format `projects/*/secrets/*/versions/*` where the `*` values are replaced by the project, secret, and version you require.
func (o EdgeCacheOriginAwsV4AuthenticationPtrOutput) SecretAccessKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginAwsV4Authentication) *string {
		if v == nil {
			return nil
		}
		return &v.SecretAccessKeyVersion
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheOriginOriginOverrideAction struct {
	// The header actions, including adding and removing
	// headers, for request handled by this origin.
	// Structure is documented below.
	HeaderAction *EdgeCacheOriginOriginOverrideActionHeaderAction `pulumi:"headerAction"`
	// The URL rewrite configuration for request that are
	// handled by this origin.
	// Structure is documented below.
	UrlRewrite *EdgeCacheOriginOriginOverrideActionUrlRewrite `pulumi:"urlRewrite"`
}

// EdgeCacheOriginOriginOverrideActionInput is an input type that accepts EdgeCacheOriginOriginOverrideActionArgs and EdgeCacheOriginOriginOverrideActionOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginOverrideActionInput` via:
//
//	EdgeCacheOriginOriginOverrideActionArgs{...}
type EdgeCacheOriginOriginOverrideActionInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginOverrideActionOutput() EdgeCacheOriginOriginOverrideActionOutput
	ToEdgeCacheOriginOriginOverrideActionOutputWithContext(context.Context) EdgeCacheOriginOriginOverrideActionOutput
}

type EdgeCacheOriginOriginOverrideActionArgs struct {
	// The header actions, including adding and removing
	// headers, for request handled by this origin.
	// Structure is documented below.
	HeaderAction EdgeCacheOriginOriginOverrideActionHeaderActionPtrInput `pulumi:"headerAction"`
	// The URL rewrite configuration for request that are
	// handled by this origin.
	// Structure is documented below.
	UrlRewrite EdgeCacheOriginOriginOverrideActionUrlRewritePtrInput `pulumi:"urlRewrite"`
}

func (EdgeCacheOriginOriginOverrideActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginOverrideAction)(nil)).Elem()
}

func (i EdgeCacheOriginOriginOverrideActionArgs) ToEdgeCacheOriginOriginOverrideActionOutput() EdgeCacheOriginOriginOverrideActionOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginOverrideActionArgs) ToEdgeCacheOriginOriginOverrideActionOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionOutput)
}

func (i EdgeCacheOriginOriginOverrideActionArgs) ToEdgeCacheOriginOriginOverrideActionPtrOutput() EdgeCacheOriginOriginOverrideActionPtrOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginOverrideActionArgs) ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionOutput).ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(ctx)
}

// EdgeCacheOriginOriginOverrideActionPtrInput is an input type that accepts EdgeCacheOriginOriginOverrideActionArgs, EdgeCacheOriginOriginOverrideActionPtr and EdgeCacheOriginOriginOverrideActionPtrOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginOverrideActionPtrInput` via:
//
//	        EdgeCacheOriginOriginOverrideActionArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheOriginOriginOverrideActionPtrInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginOverrideActionPtrOutput() EdgeCacheOriginOriginOverrideActionPtrOutput
	ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(context.Context) EdgeCacheOriginOriginOverrideActionPtrOutput
}

type edgeCacheOriginOriginOverrideActionPtrType EdgeCacheOriginOriginOverrideActionArgs

func EdgeCacheOriginOriginOverrideActionPtr(v *EdgeCacheOriginOriginOverrideActionArgs) EdgeCacheOriginOriginOverrideActionPtrInput {
	return (*edgeCacheOriginOriginOverrideActionPtrType)(v)
}

func (*edgeCacheOriginOriginOverrideActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginOriginOverrideAction)(nil)).Elem()
}

func (i *edgeCacheOriginOriginOverrideActionPtrType) ToEdgeCacheOriginOriginOverrideActionPtrOutput() EdgeCacheOriginOriginOverrideActionPtrOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(context.Background())
}

func (i *edgeCacheOriginOriginOverrideActionPtrType) ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionPtrOutput)
}

type EdgeCacheOriginOriginOverrideActionOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginOverrideActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginOverrideAction)(nil)).Elem()
}

func (o EdgeCacheOriginOriginOverrideActionOutput) ToEdgeCacheOriginOriginOverrideActionOutput() EdgeCacheOriginOriginOverrideActionOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionOutput) ToEdgeCacheOriginOriginOverrideActionOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionOutput) ToEdgeCacheOriginOriginOverrideActionPtrOutput() EdgeCacheOriginOriginOverrideActionPtrOutput {
	return o.ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(context.Background())
}

func (o EdgeCacheOriginOriginOverrideActionOutput) ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheOriginOriginOverrideAction) *EdgeCacheOriginOriginOverrideAction {
		return &v
	}).(EdgeCacheOriginOriginOverrideActionPtrOutput)
}

// The header actions, including adding and removing
// headers, for request handled by this origin.
// Structure is documented below.
func (o EdgeCacheOriginOriginOverrideActionOutput) HeaderAction() EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginOriginOverrideAction) *EdgeCacheOriginOriginOverrideActionHeaderAction {
		return v.HeaderAction
	}).(EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput)
}

// The URL rewrite configuration for request that are
// handled by this origin.
// Structure is documented below.
func (o EdgeCacheOriginOriginOverrideActionOutput) UrlRewrite() EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginOriginOverrideAction) *EdgeCacheOriginOriginOverrideActionUrlRewrite {
		return v.UrlRewrite
	}).(EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput)
}

type EdgeCacheOriginOriginOverrideActionPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginOverrideActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginOriginOverrideAction)(nil)).Elem()
}

func (o EdgeCacheOriginOriginOverrideActionPtrOutput) ToEdgeCacheOriginOriginOverrideActionPtrOutput() EdgeCacheOriginOriginOverrideActionPtrOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionPtrOutput) ToEdgeCacheOriginOriginOverrideActionPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionPtrOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionPtrOutput) Elem() EdgeCacheOriginOriginOverrideActionOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginOverrideAction) EdgeCacheOriginOriginOverrideAction {
		if v != nil {
			return *v
		}
		var ret EdgeCacheOriginOriginOverrideAction
		return ret
	}).(EdgeCacheOriginOriginOverrideActionOutput)
}

// The header actions, including adding and removing
// headers, for request handled by this origin.
// Structure is documented below.
func (o EdgeCacheOriginOriginOverrideActionPtrOutput) HeaderAction() EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginOverrideAction) *EdgeCacheOriginOriginOverrideActionHeaderAction {
		if v == nil {
			return nil
		}
		return v.HeaderAction
	}).(EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput)
}

// The URL rewrite configuration for request that are
// handled by this origin.
// Structure is documented below.
func (o EdgeCacheOriginOriginOverrideActionPtrOutput) UrlRewrite() EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginOverrideAction) *EdgeCacheOriginOriginOverrideActionUrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput)
}

type EdgeCacheOriginOriginOverrideActionHeaderAction struct {
	// Describes a header to add.
	// You may add a maximum of 25 request headers.
	// Structure is documented below.
	RequestHeadersToAdds []EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
}

// EdgeCacheOriginOriginOverrideActionHeaderActionInput is an input type that accepts EdgeCacheOriginOriginOverrideActionHeaderActionArgs and EdgeCacheOriginOriginOverrideActionHeaderActionOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginOverrideActionHeaderActionInput` via:
//
//	EdgeCacheOriginOriginOverrideActionHeaderActionArgs{...}
type EdgeCacheOriginOriginOverrideActionHeaderActionInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginOverrideActionHeaderActionOutput() EdgeCacheOriginOriginOverrideActionHeaderActionOutput
	ToEdgeCacheOriginOriginOverrideActionHeaderActionOutputWithContext(context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionOutput
}

type EdgeCacheOriginOriginOverrideActionHeaderActionArgs struct {
	// Describes a header to add.
	// You may add a maximum of 25 request headers.
	// Structure is documented below.
	RequestHeadersToAdds EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
}

func (EdgeCacheOriginOriginOverrideActionHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionHeaderAction)(nil)).Elem()
}

func (i EdgeCacheOriginOriginOverrideActionHeaderActionArgs) ToEdgeCacheOriginOriginOverrideActionHeaderActionOutput() EdgeCacheOriginOriginOverrideActionHeaderActionOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionHeaderActionOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginOverrideActionHeaderActionArgs) ToEdgeCacheOriginOriginOverrideActionHeaderActionOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionHeaderActionOutput)
}

func (i EdgeCacheOriginOriginOverrideActionHeaderActionArgs) ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput() EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginOverrideActionHeaderActionArgs) ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionHeaderActionOutput).ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(ctx)
}

// EdgeCacheOriginOriginOverrideActionHeaderActionPtrInput is an input type that accepts EdgeCacheOriginOriginOverrideActionHeaderActionArgs, EdgeCacheOriginOriginOverrideActionHeaderActionPtr and EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginOverrideActionHeaderActionPtrInput` via:
//
//	        EdgeCacheOriginOriginOverrideActionHeaderActionArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheOriginOriginOverrideActionHeaderActionPtrInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput() EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput
	ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput
}

type edgeCacheOriginOriginOverrideActionHeaderActionPtrType EdgeCacheOriginOriginOverrideActionHeaderActionArgs

func EdgeCacheOriginOriginOverrideActionHeaderActionPtr(v *EdgeCacheOriginOriginOverrideActionHeaderActionArgs) EdgeCacheOriginOriginOverrideActionHeaderActionPtrInput {
	return (*edgeCacheOriginOriginOverrideActionHeaderActionPtrType)(v)
}

func (*edgeCacheOriginOriginOverrideActionHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginOriginOverrideActionHeaderAction)(nil)).Elem()
}

func (i *edgeCacheOriginOriginOverrideActionHeaderActionPtrType) ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput() EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(context.Background())
}

func (i *edgeCacheOriginOriginOverrideActionHeaderActionPtrType) ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput)
}

type EdgeCacheOriginOriginOverrideActionHeaderActionOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginOverrideActionHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionHeaderAction)(nil)).Elem()
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionOutput() EdgeCacheOriginOriginOverrideActionHeaderActionOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput() EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return o.ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(context.Background())
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheOriginOriginOverrideActionHeaderAction) *EdgeCacheOriginOriginOverrideActionHeaderAction {
		return &v
	}).(EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput)
}

// Describes a header to add.
// You may add a maximum of 25 request headers.
// Structure is documented below.
func (o EdgeCacheOriginOriginOverrideActionHeaderActionOutput) RequestHeadersToAdds() EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v EdgeCacheOriginOriginOverrideActionHeaderAction) []EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd {
		return v.RequestHeadersToAdds
	}).(EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput)
}

type EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginOriginOverrideActionHeaderAction)(nil)).Elem()
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput() EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput) Elem() EdgeCacheOriginOriginOverrideActionHeaderActionOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginOverrideActionHeaderAction) EdgeCacheOriginOriginOverrideActionHeaderAction {
		if v != nil {
			return *v
		}
		var ret EdgeCacheOriginOriginOverrideActionHeaderAction
		return ret
	}).(EdgeCacheOriginOriginOverrideActionHeaderActionOutput)
}

// Describes a header to add.
// You may add a maximum of 25 request headers.
// Structure is documented below.
func (o EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput) RequestHeadersToAdds() EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginOverrideActionHeaderAction) []EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput)
}

type EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd struct {
	// The name of the header to add.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	// By default, added header values are appended
	// to the response or request headers with the
	// same field names. The added values are
	// separated by commas.
	// To overwrite existing values, set `replace` to `true`.
	Replace *bool `pulumi:"replace"`
}

// EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddInput is an input type that accepts EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArgs and EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddInput` via:
//
//	EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArgs{...}
type EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput() EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput
	ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutputWithContext(context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput
}

type EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header to add.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	// By default, added header values are appended
	// to the response or request headers with the
	// same field names. The added values are
	// separated by commas.
	// To overwrite existing values, set `replace` to `true`.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
}

func (EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArgs) ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput() EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArgs) ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput)
}

// EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayInput is an input type that accepts EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArray and EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayInput` via:
//
//	EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArray{ EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArgs{...} }
type EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput() EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput
	ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput
}

type EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArray []EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddInput

func (EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArray) ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput() EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArray) ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput)
}

type EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput() EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header to add.
func (o EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// Whether to replace all existing headers with the same name.
// By default, added header values are appended
// to the response or request headers with the
// same field names. The added values are
// separated by commas.
// To overwrite existing values, set `replace` to `true`.
func (o EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

type EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput() EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput) ToEdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd {
		return vs[0].([]EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput)
}

type EdgeCacheOriginOriginOverrideActionUrlRewrite struct {
	// Prior to forwarding the request to the selected
	// origin, the request's host header is replaced with
	// contents of the hostRewrite.
	// This value must be between 1 and 255 characters.
	HostRewrite *string `pulumi:"hostRewrite"`
}

// EdgeCacheOriginOriginOverrideActionUrlRewriteInput is an input type that accepts EdgeCacheOriginOriginOverrideActionUrlRewriteArgs and EdgeCacheOriginOriginOverrideActionUrlRewriteOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginOverrideActionUrlRewriteInput` via:
//
//	EdgeCacheOriginOriginOverrideActionUrlRewriteArgs{...}
type EdgeCacheOriginOriginOverrideActionUrlRewriteInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginOverrideActionUrlRewriteOutput() EdgeCacheOriginOriginOverrideActionUrlRewriteOutput
	ToEdgeCacheOriginOriginOverrideActionUrlRewriteOutputWithContext(context.Context) EdgeCacheOriginOriginOverrideActionUrlRewriteOutput
}

type EdgeCacheOriginOriginOverrideActionUrlRewriteArgs struct {
	// Prior to forwarding the request to the selected
	// origin, the request's host header is replaced with
	// contents of the hostRewrite.
	// This value must be between 1 and 255 characters.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
}

func (EdgeCacheOriginOriginOverrideActionUrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionUrlRewrite)(nil)).Elem()
}

func (i EdgeCacheOriginOriginOverrideActionUrlRewriteArgs) ToEdgeCacheOriginOriginOverrideActionUrlRewriteOutput() EdgeCacheOriginOriginOverrideActionUrlRewriteOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionUrlRewriteOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginOverrideActionUrlRewriteArgs) ToEdgeCacheOriginOriginOverrideActionUrlRewriteOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionUrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionUrlRewriteOutput)
}

func (i EdgeCacheOriginOriginOverrideActionUrlRewriteArgs) ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput() EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginOverrideActionUrlRewriteArgs) ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionUrlRewriteOutput).ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(ctx)
}

// EdgeCacheOriginOriginOverrideActionUrlRewritePtrInput is an input type that accepts EdgeCacheOriginOriginOverrideActionUrlRewriteArgs, EdgeCacheOriginOriginOverrideActionUrlRewritePtr and EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginOverrideActionUrlRewritePtrInput` via:
//
//	        EdgeCacheOriginOriginOverrideActionUrlRewriteArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheOriginOriginOverrideActionUrlRewritePtrInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput() EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput
	ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(context.Context) EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput
}

type edgeCacheOriginOriginOverrideActionUrlRewritePtrType EdgeCacheOriginOriginOverrideActionUrlRewriteArgs

func EdgeCacheOriginOriginOverrideActionUrlRewritePtr(v *EdgeCacheOriginOriginOverrideActionUrlRewriteArgs) EdgeCacheOriginOriginOverrideActionUrlRewritePtrInput {
	return (*edgeCacheOriginOriginOverrideActionUrlRewritePtrType)(v)
}

func (*edgeCacheOriginOriginOverrideActionUrlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginOriginOverrideActionUrlRewrite)(nil)).Elem()
}

func (i *edgeCacheOriginOriginOverrideActionUrlRewritePtrType) ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput() EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return i.ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i *edgeCacheOriginOriginOverrideActionUrlRewritePtrType) ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput)
}

type EdgeCacheOriginOriginOverrideActionUrlRewriteOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginOverrideActionUrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionUrlRewrite)(nil)).Elem()
}

func (o EdgeCacheOriginOriginOverrideActionUrlRewriteOutput) ToEdgeCacheOriginOriginOverrideActionUrlRewriteOutput() EdgeCacheOriginOriginOverrideActionUrlRewriteOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionUrlRewriteOutput) ToEdgeCacheOriginOriginOverrideActionUrlRewriteOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionUrlRewriteOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionUrlRewriteOutput) ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput() EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return o.ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(context.Background())
}

func (o EdgeCacheOriginOriginOverrideActionUrlRewriteOutput) ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheOriginOriginOverrideActionUrlRewrite) *EdgeCacheOriginOriginOverrideActionUrlRewrite {
		return &v
	}).(EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected
// origin, the request's host header is replaced with
// contents of the hostRewrite.
// This value must be between 1 and 255 characters.
func (o EdgeCacheOriginOriginOverrideActionUrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginOriginOverrideActionUrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

type EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginOriginOverrideActionUrlRewrite)(nil)).Elem()
}

func (o EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput) ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput() EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput) ToEdgeCacheOriginOriginOverrideActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput {
	return o
}

func (o EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput) Elem() EdgeCacheOriginOriginOverrideActionUrlRewriteOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginOverrideActionUrlRewrite) EdgeCacheOriginOriginOverrideActionUrlRewrite {
		if v != nil {
			return *v
		}
		var ret EdgeCacheOriginOriginOverrideActionUrlRewrite
		return ret
	}).(EdgeCacheOriginOriginOverrideActionUrlRewriteOutput)
}

// Prior to forwarding the request to the selected
// origin, the request's host header is replaced with
// contents of the hostRewrite.
// This value must be between 1 and 255 characters.
func (o EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginOverrideActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheOriginOriginRedirect struct {
	// The set of redirect response codes that the CDN
	// follows. Values of
	// [RedirectConditions](https://cloud.google.com/media-cdn/docs/reference/rest/v1/projects.locations.edgeCacheOrigins#redirectconditions)
	// are accepted.
	RedirectConditions []string `pulumi:"redirectConditions"`
}

// EdgeCacheOriginOriginRedirectInput is an input type that accepts EdgeCacheOriginOriginRedirectArgs and EdgeCacheOriginOriginRedirectOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginRedirectInput` via:
//
//	EdgeCacheOriginOriginRedirectArgs{...}
type EdgeCacheOriginOriginRedirectInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginRedirectOutput() EdgeCacheOriginOriginRedirectOutput
	ToEdgeCacheOriginOriginRedirectOutputWithContext(context.Context) EdgeCacheOriginOriginRedirectOutput
}

type EdgeCacheOriginOriginRedirectArgs struct {
	// The set of redirect response codes that the CDN
	// follows. Values of
	// [RedirectConditions](https://cloud.google.com/media-cdn/docs/reference/rest/v1/projects.locations.edgeCacheOrigins#redirectconditions)
	// are accepted.
	RedirectConditions pulumi.StringArrayInput `pulumi:"redirectConditions"`
}

func (EdgeCacheOriginOriginRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginRedirect)(nil)).Elem()
}

func (i EdgeCacheOriginOriginRedirectArgs) ToEdgeCacheOriginOriginRedirectOutput() EdgeCacheOriginOriginRedirectOutput {
	return i.ToEdgeCacheOriginOriginRedirectOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginRedirectArgs) ToEdgeCacheOriginOriginRedirectOutputWithContext(ctx context.Context) EdgeCacheOriginOriginRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginRedirectOutput)
}

func (i EdgeCacheOriginOriginRedirectArgs) ToEdgeCacheOriginOriginRedirectPtrOutput() EdgeCacheOriginOriginRedirectPtrOutput {
	return i.ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(context.Background())
}

func (i EdgeCacheOriginOriginRedirectArgs) ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginRedirectOutput).ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(ctx)
}

// EdgeCacheOriginOriginRedirectPtrInput is an input type that accepts EdgeCacheOriginOriginRedirectArgs, EdgeCacheOriginOriginRedirectPtr and EdgeCacheOriginOriginRedirectPtrOutput values.
// You can construct a concrete instance of `EdgeCacheOriginOriginRedirectPtrInput` via:
//
//	        EdgeCacheOriginOriginRedirectArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheOriginOriginRedirectPtrInput interface {
	pulumi.Input

	ToEdgeCacheOriginOriginRedirectPtrOutput() EdgeCacheOriginOriginRedirectPtrOutput
	ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(context.Context) EdgeCacheOriginOriginRedirectPtrOutput
}

type edgeCacheOriginOriginRedirectPtrType EdgeCacheOriginOriginRedirectArgs

func EdgeCacheOriginOriginRedirectPtr(v *EdgeCacheOriginOriginRedirectArgs) EdgeCacheOriginOriginRedirectPtrInput {
	return (*edgeCacheOriginOriginRedirectPtrType)(v)
}

func (*edgeCacheOriginOriginRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginOriginRedirect)(nil)).Elem()
}

func (i *edgeCacheOriginOriginRedirectPtrType) ToEdgeCacheOriginOriginRedirectPtrOutput() EdgeCacheOriginOriginRedirectPtrOutput {
	return i.ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(context.Background())
}

func (i *edgeCacheOriginOriginRedirectPtrType) ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginOriginRedirectPtrOutput)
}

type EdgeCacheOriginOriginRedirectOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginOriginRedirect)(nil)).Elem()
}

func (o EdgeCacheOriginOriginRedirectOutput) ToEdgeCacheOriginOriginRedirectOutput() EdgeCacheOriginOriginRedirectOutput {
	return o
}

func (o EdgeCacheOriginOriginRedirectOutput) ToEdgeCacheOriginOriginRedirectOutputWithContext(ctx context.Context) EdgeCacheOriginOriginRedirectOutput {
	return o
}

func (o EdgeCacheOriginOriginRedirectOutput) ToEdgeCacheOriginOriginRedirectPtrOutput() EdgeCacheOriginOriginRedirectPtrOutput {
	return o.ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(context.Background())
}

func (o EdgeCacheOriginOriginRedirectOutput) ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheOriginOriginRedirect) *EdgeCacheOriginOriginRedirect {
		return &v
	}).(EdgeCacheOriginOriginRedirectPtrOutput)
}

// The set of redirect response codes that the CDN
// follows. Values of
// [RedirectConditions](https://cloud.google.com/media-cdn/docs/reference/rest/v1/projects.locations.edgeCacheOrigins#redirectconditions)
// are accepted.
func (o EdgeCacheOriginOriginRedirectOutput) RedirectConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheOriginOriginRedirect) []string { return v.RedirectConditions }).(pulumi.StringArrayOutput)
}

type EdgeCacheOriginOriginRedirectPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginOriginRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginOriginRedirect)(nil)).Elem()
}

func (o EdgeCacheOriginOriginRedirectPtrOutput) ToEdgeCacheOriginOriginRedirectPtrOutput() EdgeCacheOriginOriginRedirectPtrOutput {
	return o
}

func (o EdgeCacheOriginOriginRedirectPtrOutput) ToEdgeCacheOriginOriginRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheOriginOriginRedirectPtrOutput {
	return o
}

func (o EdgeCacheOriginOriginRedirectPtrOutput) Elem() EdgeCacheOriginOriginRedirectOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginRedirect) EdgeCacheOriginOriginRedirect {
		if v != nil {
			return *v
		}
		var ret EdgeCacheOriginOriginRedirect
		return ret
	}).(EdgeCacheOriginOriginRedirectOutput)
}

// The set of redirect response codes that the CDN
// follows. Values of
// [RedirectConditions](https://cloud.google.com/media-cdn/docs/reference/rest/v1/projects.locations.edgeCacheOrigins#redirectconditions)
// are accepted.
func (o EdgeCacheOriginOriginRedirectPtrOutput) RedirectConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheOriginOriginRedirect) []string {
		if v == nil {
			return nil
		}
		return v.RedirectConditions
	}).(pulumi.StringArrayOutput)
}

type EdgeCacheOriginTimeout struct {
	// The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
	// Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
	// The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
	// Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
	// If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
	MaxAttemptsTimeout *string `pulumi:"maxAttemptsTimeout"`
	// The maximum duration to wait between reads of a single HTTP connection/stream.
	// Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
	// The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
	// If the response headers have already been written to the connection, the response will be truncated and logged.
	ReadTimeout *string `pulumi:"readTimeout"`
	// The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
	// Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
	// The responseTimeout starts after the connection has been established.
	// This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
	// If the response headers have already been written to the connection, the response will be truncated and logged.
	ResponseTimeout *string `pulumi:"responseTimeout"`
}

// EdgeCacheOriginTimeoutInput is an input type that accepts EdgeCacheOriginTimeoutArgs and EdgeCacheOriginTimeoutOutput values.
// You can construct a concrete instance of `EdgeCacheOriginTimeoutInput` via:
//
//	EdgeCacheOriginTimeoutArgs{...}
type EdgeCacheOriginTimeoutInput interface {
	pulumi.Input

	ToEdgeCacheOriginTimeoutOutput() EdgeCacheOriginTimeoutOutput
	ToEdgeCacheOriginTimeoutOutputWithContext(context.Context) EdgeCacheOriginTimeoutOutput
}

type EdgeCacheOriginTimeoutArgs struct {
	// The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
	// Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
	// The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
	// Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
	// If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
	MaxAttemptsTimeout pulumi.StringPtrInput `pulumi:"maxAttemptsTimeout"`
	// The maximum duration to wait between reads of a single HTTP connection/stream.
	// Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
	// The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
	// If the response headers have already been written to the connection, the response will be truncated and logged.
	ReadTimeout pulumi.StringPtrInput `pulumi:"readTimeout"`
	// The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
	// Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
	// The responseTimeout starts after the connection has been established.
	// This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
	// If the response headers have already been written to the connection, the response will be truncated and logged.
	ResponseTimeout pulumi.StringPtrInput `pulumi:"responseTimeout"`
}

func (EdgeCacheOriginTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginTimeout)(nil)).Elem()
}

func (i EdgeCacheOriginTimeoutArgs) ToEdgeCacheOriginTimeoutOutput() EdgeCacheOriginTimeoutOutput {
	return i.ToEdgeCacheOriginTimeoutOutputWithContext(context.Background())
}

func (i EdgeCacheOriginTimeoutArgs) ToEdgeCacheOriginTimeoutOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginTimeoutOutput)
}

func (i EdgeCacheOriginTimeoutArgs) ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput {
	return i.ToEdgeCacheOriginTimeoutPtrOutputWithContext(context.Background())
}

func (i EdgeCacheOriginTimeoutArgs) ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginTimeoutOutput).ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx)
}

// EdgeCacheOriginTimeoutPtrInput is an input type that accepts EdgeCacheOriginTimeoutArgs, EdgeCacheOriginTimeoutPtr and EdgeCacheOriginTimeoutPtrOutput values.
// You can construct a concrete instance of `EdgeCacheOriginTimeoutPtrInput` via:
//
//	        EdgeCacheOriginTimeoutArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheOriginTimeoutPtrInput interface {
	pulumi.Input

	ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput
	ToEdgeCacheOriginTimeoutPtrOutputWithContext(context.Context) EdgeCacheOriginTimeoutPtrOutput
}

type edgeCacheOriginTimeoutPtrType EdgeCacheOriginTimeoutArgs

func EdgeCacheOriginTimeoutPtr(v *EdgeCacheOriginTimeoutArgs) EdgeCacheOriginTimeoutPtrInput {
	return (*edgeCacheOriginTimeoutPtrType)(v)
}

func (*edgeCacheOriginTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginTimeout)(nil)).Elem()
}

func (i *edgeCacheOriginTimeoutPtrType) ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput {
	return i.ToEdgeCacheOriginTimeoutPtrOutputWithContext(context.Background())
}

func (i *edgeCacheOriginTimeoutPtrType) ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginTimeoutPtrOutput)
}

type EdgeCacheOriginTimeoutOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginTimeout)(nil)).Elem()
}

func (o EdgeCacheOriginTimeoutOutput) ToEdgeCacheOriginTimeoutOutput() EdgeCacheOriginTimeoutOutput {
	return o
}

func (o EdgeCacheOriginTimeoutOutput) ToEdgeCacheOriginTimeoutOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutOutput {
	return o
}

func (o EdgeCacheOriginTimeoutOutput) ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput {
	return o.ToEdgeCacheOriginTimeoutPtrOutputWithContext(context.Background())
}

func (o EdgeCacheOriginTimeoutOutput) ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheOriginTimeout) *EdgeCacheOriginTimeout {
		return &v
	}).(EdgeCacheOriginTimeoutPtrOutput)
}

// The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
// Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
// The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
func (o EdgeCacheOriginTimeoutOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginTimeout) *string { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
// Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
// If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
func (o EdgeCacheOriginTimeoutOutput) MaxAttemptsTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginTimeout) *string { return v.MaxAttemptsTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration to wait between reads of a single HTTP connection/stream.
// Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
// The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
// If the response headers have already been written to the connection, the response will be truncated and logged.
func (o EdgeCacheOriginTimeoutOutput) ReadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginTimeout) *string { return v.ReadTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
// Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
// The responseTimeout starts after the connection has been established.
// This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
// If the response headers have already been written to the connection, the response will be truncated and logged.
func (o EdgeCacheOriginTimeoutOutput) ResponseTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginTimeout) *string { return v.ResponseTimeout }).(pulumi.StringPtrOutput)
}

type EdgeCacheOriginTimeoutPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginTimeout)(nil)).Elem()
}

func (o EdgeCacheOriginTimeoutPtrOutput) ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput {
	return o
}

func (o EdgeCacheOriginTimeoutPtrOutput) ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutPtrOutput {
	return o
}

func (o EdgeCacheOriginTimeoutPtrOutput) Elem() EdgeCacheOriginTimeoutOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) EdgeCacheOriginTimeout {
		if v != nil {
			return *v
		}
		var ret EdgeCacheOriginTimeout
		return ret
	}).(EdgeCacheOriginTimeoutOutput)
}

// The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
// Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
// The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
func (o EdgeCacheOriginTimeoutPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
// Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
// If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
func (o EdgeCacheOriginTimeoutPtrOutput) MaxAttemptsTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) *string {
		if v == nil {
			return nil
		}
		return v.MaxAttemptsTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration to wait between reads of a single HTTP connection/stream.
// Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
// The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
// If the response headers have already been written to the connection, the response will be truncated and logged.
func (o EdgeCacheOriginTimeoutPtrOutput) ReadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) *string {
		if v == nil {
			return nil
		}
		return v.ReadTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
// Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
// The responseTimeout starts after the connection has been established.
// This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
// If the response headers have already been written to the connection, the response will be truncated and logged.
func (o EdgeCacheOriginTimeoutPtrOutput) ResponseTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) *string {
		if v == nil {
			return nil
		}
		return v.ResponseTimeout
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceLogConfig struct {
	// Specifies whether to enable logging for traffic served by this service.
	Enable *bool `pulumi:"enable"`
	// Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
	// This field can only be specified if logging is enabled for this service.
	SampleRate *float64 `pulumi:"sampleRate"`
}

// EdgeCacheServiceLogConfigInput is an input type that accepts EdgeCacheServiceLogConfigArgs and EdgeCacheServiceLogConfigOutput values.
// You can construct a concrete instance of `EdgeCacheServiceLogConfigInput` via:
//
//	EdgeCacheServiceLogConfigArgs{...}
type EdgeCacheServiceLogConfigInput interface {
	pulumi.Input

	ToEdgeCacheServiceLogConfigOutput() EdgeCacheServiceLogConfigOutput
	ToEdgeCacheServiceLogConfigOutputWithContext(context.Context) EdgeCacheServiceLogConfigOutput
}

type EdgeCacheServiceLogConfigArgs struct {
	// Specifies whether to enable logging for traffic served by this service.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
	// This field can only be specified if logging is enabled for this service.
	SampleRate pulumi.Float64PtrInput `pulumi:"sampleRate"`
}

func (EdgeCacheServiceLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceLogConfig)(nil)).Elem()
}

func (i EdgeCacheServiceLogConfigArgs) ToEdgeCacheServiceLogConfigOutput() EdgeCacheServiceLogConfigOutput {
	return i.ToEdgeCacheServiceLogConfigOutputWithContext(context.Background())
}

func (i EdgeCacheServiceLogConfigArgs) ToEdgeCacheServiceLogConfigOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceLogConfigOutput)
}

func (i EdgeCacheServiceLogConfigArgs) ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput {
	return i.ToEdgeCacheServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceLogConfigArgs) ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceLogConfigOutput).ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx)
}

// EdgeCacheServiceLogConfigPtrInput is an input type that accepts EdgeCacheServiceLogConfigArgs, EdgeCacheServiceLogConfigPtr and EdgeCacheServiceLogConfigPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceLogConfigPtrInput` via:
//
//	        EdgeCacheServiceLogConfigArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceLogConfigPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput
	ToEdgeCacheServiceLogConfigPtrOutputWithContext(context.Context) EdgeCacheServiceLogConfigPtrOutput
}

type edgeCacheServiceLogConfigPtrType EdgeCacheServiceLogConfigArgs

func EdgeCacheServiceLogConfigPtr(v *EdgeCacheServiceLogConfigArgs) EdgeCacheServiceLogConfigPtrInput {
	return (*edgeCacheServiceLogConfigPtrType)(v)
}

func (*edgeCacheServiceLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceLogConfig)(nil)).Elem()
}

func (i *edgeCacheServiceLogConfigPtrType) ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput {
	return i.ToEdgeCacheServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceLogConfigPtrType) ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceLogConfigPtrOutput)
}

type EdgeCacheServiceLogConfigOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceLogConfig)(nil)).Elem()
}

func (o EdgeCacheServiceLogConfigOutput) ToEdgeCacheServiceLogConfigOutput() EdgeCacheServiceLogConfigOutput {
	return o
}

func (o EdgeCacheServiceLogConfigOutput) ToEdgeCacheServiceLogConfigOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigOutput {
	return o
}

func (o EdgeCacheServiceLogConfigOutput) ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput {
	return o.ToEdgeCacheServiceLogConfigPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceLogConfigOutput) ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceLogConfig) *EdgeCacheServiceLogConfig {
		return &v
	}).(EdgeCacheServiceLogConfigPtrOutput)
}

// Specifies whether to enable logging for traffic served by this service.
func (o EdgeCacheServiceLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
// This field can only be specified if logging is enabled for this service.
func (o EdgeCacheServiceLogConfigOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceLogConfig) *float64 { return v.SampleRate }).(pulumi.Float64PtrOutput)
}

type EdgeCacheServiceLogConfigPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceLogConfig)(nil)).Elem()
}

func (o EdgeCacheServiceLogConfigPtrOutput) ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput {
	return o
}

func (o EdgeCacheServiceLogConfigPtrOutput) ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigPtrOutput {
	return o
}

func (o EdgeCacheServiceLogConfigPtrOutput) Elem() EdgeCacheServiceLogConfigOutput {
	return o.ApplyT(func(v *EdgeCacheServiceLogConfig) EdgeCacheServiceLogConfig {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceLogConfig
		return ret
	}).(EdgeCacheServiceLogConfigOutput)
}

// Specifies whether to enable logging for traffic served by this service.
func (o EdgeCacheServiceLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
// This field can only be specified if logging is enabled for this service.
func (o EdgeCacheServiceLogConfigPtrOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.SampleRate
	}).(pulumi.Float64PtrOutput)
}

type EdgeCacheServiceRouting struct {
	// The list of hostRules to match against. These rules define which hostnames the EdgeCacheService will match against, and which route configurations apply.
	// Structure is documented below.
	HostRules []EdgeCacheServiceRoutingHostRule `pulumi:"hostRules"`
	// The list of pathMatchers referenced via name by hostRules. PathMatcher is used to match the path portion of the URL when a HostRule matches the URL's host portion.
	// Structure is documented below.
	PathMatchers []EdgeCacheServiceRoutingPathMatcher `pulumi:"pathMatchers"`
}

// EdgeCacheServiceRoutingInput is an input type that accepts EdgeCacheServiceRoutingArgs and EdgeCacheServiceRoutingOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingInput` via:
//
//	EdgeCacheServiceRoutingArgs{...}
type EdgeCacheServiceRoutingInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingOutput() EdgeCacheServiceRoutingOutput
	ToEdgeCacheServiceRoutingOutputWithContext(context.Context) EdgeCacheServiceRoutingOutput
}

type EdgeCacheServiceRoutingArgs struct {
	// The list of hostRules to match against. These rules define which hostnames the EdgeCacheService will match against, and which route configurations apply.
	// Structure is documented below.
	HostRules EdgeCacheServiceRoutingHostRuleArrayInput `pulumi:"hostRules"`
	// The list of pathMatchers referenced via name by hostRules. PathMatcher is used to match the path portion of the URL when a HostRule matches the URL's host portion.
	// Structure is documented below.
	PathMatchers EdgeCacheServiceRoutingPathMatcherArrayInput `pulumi:"pathMatchers"`
}

func (EdgeCacheServiceRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRouting)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingArgs) ToEdgeCacheServiceRoutingOutput() EdgeCacheServiceRoutingOutput {
	return i.ToEdgeCacheServiceRoutingOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingArgs) ToEdgeCacheServiceRoutingOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingOutput)
}

func (i EdgeCacheServiceRoutingArgs) ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput {
	return i.ToEdgeCacheServiceRoutingPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingArgs) ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingOutput).ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPtrInput is an input type that accepts EdgeCacheServiceRoutingArgs, EdgeCacheServiceRoutingPtr and EdgeCacheServiceRoutingPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPtrInput` via:
//
//	        EdgeCacheServiceRoutingArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput
	ToEdgeCacheServiceRoutingPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPtrOutput
}

type edgeCacheServiceRoutingPtrType EdgeCacheServiceRoutingArgs

func EdgeCacheServiceRoutingPtr(v *EdgeCacheServiceRoutingArgs) EdgeCacheServiceRoutingPtrInput {
	return (*edgeCacheServiceRoutingPtrType)(v)
}

func (*edgeCacheServiceRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRouting)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPtrType) ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput {
	return i.ToEdgeCacheServiceRoutingPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPtrType) ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPtrOutput)
}

type EdgeCacheServiceRoutingOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRouting)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingOutput) ToEdgeCacheServiceRoutingOutput() EdgeCacheServiceRoutingOutput {
	return o
}

func (o EdgeCacheServiceRoutingOutput) ToEdgeCacheServiceRoutingOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingOutput {
	return o
}

func (o EdgeCacheServiceRoutingOutput) ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput {
	return o.ToEdgeCacheServiceRoutingPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingOutput) ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRouting) *EdgeCacheServiceRouting {
		return &v
	}).(EdgeCacheServiceRoutingPtrOutput)
}

// The list of hostRules to match against. These rules define which hostnames the EdgeCacheService will match against, and which route configurations apply.
// Structure is documented below.
func (o EdgeCacheServiceRoutingOutput) HostRules() EdgeCacheServiceRoutingHostRuleArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRouting) []EdgeCacheServiceRoutingHostRule { return v.HostRules }).(EdgeCacheServiceRoutingHostRuleArrayOutput)
}

// The list of pathMatchers referenced via name by hostRules. PathMatcher is used to match the path portion of the URL when a HostRule matches the URL's host portion.
// Structure is documented below.
func (o EdgeCacheServiceRoutingOutput) PathMatchers() EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRouting) []EdgeCacheServiceRoutingPathMatcher { return v.PathMatchers }).(EdgeCacheServiceRoutingPathMatcherArrayOutput)
}

type EdgeCacheServiceRoutingPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRouting)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPtrOutput) ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPtrOutput) ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPtrOutput) Elem() EdgeCacheServiceRoutingOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRouting) EdgeCacheServiceRouting {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRouting
		return ret
	}).(EdgeCacheServiceRoutingOutput)
}

// The list of hostRules to match against. These rules define which hostnames the EdgeCacheService will match against, and which route configurations apply.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPtrOutput) HostRules() EdgeCacheServiceRoutingHostRuleArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRouting) []EdgeCacheServiceRoutingHostRule {
		if v == nil {
			return nil
		}
		return v.HostRules
	}).(EdgeCacheServiceRoutingHostRuleArrayOutput)
}

// The list of pathMatchers referenced via name by hostRules. PathMatcher is used to match the path portion of the URL when a HostRule matches the URL's host portion.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPtrOutput) PathMatchers() EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRouting) []EdgeCacheServiceRoutingPathMatcher {
		if v == nil {
			return nil
		}
		return v.PathMatchers
	}).(EdgeCacheServiceRoutingPathMatcherArrayOutput)
}

type EdgeCacheServiceRoutingHostRule struct {
	// A human-readable description of the hostRule.
	Description *string `pulumi:"description"`
	// The list of host patterns to match.
	// Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
	// When multiple hosts are specified, hosts are matched in the following priority:
	// 1. Exact domain names: ``www.foo.com``.
	// 2. Suffix domain wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
	// 3. Prefix domain wildcards: ``foo.*`` or ``foo-*``.
	// 4. Special wildcard ``*`` matching any domain.
	//    Notes:
	//    The wildcard will not match the empty string. e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``. The longest wildcards match first. Only a single host in the entire service can match on ``*``. A domain must be unique across all configured hosts within a service.
	//    Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the ":authority" header, from the incoming request.
	//    You may specify up to 10 hosts.
	Hosts []string `pulumi:"hosts"`
	// The name of the pathMatcher associated with this hostRule.
	PathMatcher string `pulumi:"pathMatcher"`
}

// EdgeCacheServiceRoutingHostRuleInput is an input type that accepts EdgeCacheServiceRoutingHostRuleArgs and EdgeCacheServiceRoutingHostRuleOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingHostRuleInput` via:
//
//	EdgeCacheServiceRoutingHostRuleArgs{...}
type EdgeCacheServiceRoutingHostRuleInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingHostRuleOutput() EdgeCacheServiceRoutingHostRuleOutput
	ToEdgeCacheServiceRoutingHostRuleOutputWithContext(context.Context) EdgeCacheServiceRoutingHostRuleOutput
}

type EdgeCacheServiceRoutingHostRuleArgs struct {
	// A human-readable description of the hostRule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The list of host patterns to match.
	// Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
	// When multiple hosts are specified, hosts are matched in the following priority:
	// 1. Exact domain names: ``www.foo.com``.
	// 2. Suffix domain wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
	// 3. Prefix domain wildcards: ``foo.*`` or ``foo-*``.
	// 4. Special wildcard ``*`` matching any domain.
	//    Notes:
	//    The wildcard will not match the empty string. e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``. The longest wildcards match first. Only a single host in the entire service can match on ``*``. A domain must be unique across all configured hosts within a service.
	//    Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the ":authority" header, from the incoming request.
	//    You may specify up to 10 hosts.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The name of the pathMatcher associated with this hostRule.
	PathMatcher pulumi.StringInput `pulumi:"pathMatcher"`
}

func (EdgeCacheServiceRoutingHostRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingHostRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingHostRuleArgs) ToEdgeCacheServiceRoutingHostRuleOutput() EdgeCacheServiceRoutingHostRuleOutput {
	return i.ToEdgeCacheServiceRoutingHostRuleOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingHostRuleArgs) ToEdgeCacheServiceRoutingHostRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingHostRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingHostRuleOutput)
}

// EdgeCacheServiceRoutingHostRuleArrayInput is an input type that accepts EdgeCacheServiceRoutingHostRuleArray and EdgeCacheServiceRoutingHostRuleArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingHostRuleArrayInput` via:
//
//	EdgeCacheServiceRoutingHostRuleArray{ EdgeCacheServiceRoutingHostRuleArgs{...} }
type EdgeCacheServiceRoutingHostRuleArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingHostRuleArrayOutput() EdgeCacheServiceRoutingHostRuleArrayOutput
	ToEdgeCacheServiceRoutingHostRuleArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingHostRuleArrayOutput
}

type EdgeCacheServiceRoutingHostRuleArray []EdgeCacheServiceRoutingHostRuleInput

func (EdgeCacheServiceRoutingHostRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingHostRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingHostRuleArray) ToEdgeCacheServiceRoutingHostRuleArrayOutput() EdgeCacheServiceRoutingHostRuleArrayOutput {
	return i.ToEdgeCacheServiceRoutingHostRuleArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingHostRuleArray) ToEdgeCacheServiceRoutingHostRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingHostRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingHostRuleArrayOutput)
}

type EdgeCacheServiceRoutingHostRuleOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingHostRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingHostRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingHostRuleOutput) ToEdgeCacheServiceRoutingHostRuleOutput() EdgeCacheServiceRoutingHostRuleOutput {
	return o
}

func (o EdgeCacheServiceRoutingHostRuleOutput) ToEdgeCacheServiceRoutingHostRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingHostRuleOutput {
	return o
}

// A human-readable description of the hostRule.
func (o EdgeCacheServiceRoutingHostRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingHostRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of host patterns to match.
// Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
// When multiple hosts are specified, hosts are matched in the following priority:
//  1. Exact domain names: “www.foo.com“.
//  2. Suffix domain wildcards: “*.foo.com“ or “*-bar.foo.com“.
//  3. Prefix domain wildcards: “foo.*“ or “foo-*“.
//  4. Special wildcard “*“ matching any domain.
//     Notes:
//     The wildcard will not match the empty string. e.g. “*-bar.foo.com“ will match “baz-bar.foo.com“ but not “-bar.foo.com“. The longest wildcards match first. Only a single host in the entire service can match on “*“. A domain must be unique across all configured hosts within a service.
//     Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the ":authority" header, from the incoming request.
//     You may specify up to 10 hosts.
func (o EdgeCacheServiceRoutingHostRuleOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingHostRule) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The name of the pathMatcher associated with this hostRule.
func (o EdgeCacheServiceRoutingHostRuleOutput) PathMatcher() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingHostRule) string { return v.PathMatcher }).(pulumi.StringOutput)
}

type EdgeCacheServiceRoutingHostRuleArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingHostRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingHostRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingHostRuleArrayOutput) ToEdgeCacheServiceRoutingHostRuleArrayOutput() EdgeCacheServiceRoutingHostRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingHostRuleArrayOutput) ToEdgeCacheServiceRoutingHostRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingHostRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingHostRuleArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingHostRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingHostRule {
		return vs[0].([]EdgeCacheServiceRoutingHostRule)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingHostRuleOutput)
}

type EdgeCacheServiceRoutingPathMatcher struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// The name to which this PathMatcher is referred by the HostRule.
	Name string `pulumi:"name"`
	// The routeRules to match against. routeRules support advanced routing behaviour, and can match on paths, headers and query parameters, as well as status codes and HTTP methods.
	// Structure is documented below.
	RouteRules []EdgeCacheServiceRoutingPathMatcherRouteRule `pulumi:"routeRules"`
}

// EdgeCacheServiceRoutingPathMatcherInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherArgs and EdgeCacheServiceRoutingPathMatcherOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherArgs{...}
type EdgeCacheServiceRoutingPathMatcherInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherOutput() EdgeCacheServiceRoutingPathMatcherOutput
	ToEdgeCacheServiceRoutingPathMatcherOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherOutput
}

type EdgeCacheServiceRoutingPathMatcherArgs struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name to which this PathMatcher is referred by the HostRule.
	Name pulumi.StringInput `pulumi:"name"`
	// The routeRules to match against. routeRules support advanced routing behaviour, and can match on paths, headers and query parameters, as well as status codes and HTTP methods.
	// Structure is documented below.
	RouteRules EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput `pulumi:"routeRules"`
}

func (EdgeCacheServiceRoutingPathMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcher)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherArgs) ToEdgeCacheServiceRoutingPathMatcherOutput() EdgeCacheServiceRoutingPathMatcherOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherArgs) ToEdgeCacheServiceRoutingPathMatcherOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherOutput)
}

// EdgeCacheServiceRoutingPathMatcherArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherArray and EdgeCacheServiceRoutingPathMatcherArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherArray{ EdgeCacheServiceRoutingPathMatcherArgs{...} }
type EdgeCacheServiceRoutingPathMatcherArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherArrayOutput() EdgeCacheServiceRoutingPathMatcherArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherArray []EdgeCacheServiceRoutingPathMatcherInput

func (EdgeCacheServiceRoutingPathMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcher)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherArray) ToEdgeCacheServiceRoutingPathMatcherArrayOutput() EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherArray) ToEdgeCacheServiceRoutingPathMatcherArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcher)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherOutput) ToEdgeCacheServiceRoutingPathMatcherOutput() EdgeCacheServiceRoutingPathMatcherOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherOutput) ToEdgeCacheServiceRoutingPathMatcherOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherOutput {
	return o
}

// A human-readable description of the resource.
func (o EdgeCacheServiceRoutingPathMatcherOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcher) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name to which this PathMatcher is referred by the HostRule.
func (o EdgeCacheServiceRoutingPathMatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcher) string { return v.Name }).(pulumi.StringOutput)
}

// The routeRules to match against. routeRules support advanced routing behaviour, and can match on paths, headers and query parameters, as well as status codes and HTTP methods.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherOutput) RouteRules() EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcher) []EdgeCacheServiceRoutingPathMatcherRouteRule {
		return v.RouteRules
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcher)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherArrayOutput) ToEdgeCacheServiceRoutingPathMatcherArrayOutput() EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherArrayOutput) ToEdgeCacheServiceRoutingPathMatcherArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcher {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcher)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRule struct {
	// A human-readable description of the routeRule.
	Description *string `pulumi:"description"`
	// The header actions, including adding & removing headers, for requests that match this route.
	// Structure is documented below.
	HeaderAction *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction `pulumi:"headerAction"`
	// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates
	// within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
	// Structure is documented below.
	MatchRules []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule `pulumi:"matchRules"`
	// The Origin resource that requests to this route should fetch from when a matching response is not in cache. Origins can be defined as short names ("my-origin") or fully-qualified resource URLs - e.g. "networkservices.googleapis.com/projects/my-project/global/edgecacheorigins/my-origin"
	// Only one of origin or urlRedirect can be set.
	Origin *string `pulumi:"origin"`
	// The priority of this route rule, where 1 is the highest priority.
	// You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 1 and 999 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers
	// to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
	Priority string `pulumi:"priority"`
	// In response to a matching path, the routeAction performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected origin.
	// Structure is documented below.
	RouteAction *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction `pulumi:"routeAction"`
	// The URL redirect configuration for requests that match this route.
	// Structure is documented below.
	UrlRedirect *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect `pulumi:"urlRedirect"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleArgs struct {
	// A human-readable description of the routeRule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The header actions, including adding & removing headers, for requests that match this route.
	// Structure is documented below.
	HeaderAction EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput `pulumi:"headerAction"`
	// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates
	// within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
	// Structure is documented below.
	MatchRules EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput `pulumi:"matchRules"`
	// The Origin resource that requests to this route should fetch from when a matching response is not in cache. Origins can be defined as short names ("my-origin") or fully-qualified resource URLs - e.g. "networkservices.googleapis.com/projects/my-project/global/edgecacheorigins/my-origin"
	// Only one of origin or urlRedirect can be set.
	Origin pulumi.StringPtrInput `pulumi:"origin"`
	// The priority of this route rule, where 1 is the highest priority.
	// You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 1 and 999 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers
	// to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
	Priority pulumi.StringInput `pulumi:"priority"`
	// In response to a matching path, the routeAction performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected origin.
	// Structure is documented below.
	RouteAction EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput `pulumi:"routeAction"`
	// The URL redirect configuration for requests that match this route.
	// Structure is documented below.
	UrlRedirect EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput `pulumi:"urlRedirect"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleArray and EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleArray []EdgeCacheServiceRoutingPathMatcherRouteRuleInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return o
}

// A human-readable description of the routeRule.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The header actions, including adding & removing headers, for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) HeaderAction() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction {
		return v.HeaderAction
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput)
}

// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates
// within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) MatchRules() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule {
		return v.MatchRules
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput)
}

// The Origin resource that requests to this route should fetch from when a matching response is not in cache. Origins can be defined as short names ("my-origin") or fully-qualified resource URLs - e.g. "networkservices.googleapis.com/projects/my-project/global/edgecacheorigins/my-origin"
// Only one of origin or urlRedirect can be set.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *string { return v.Origin }).(pulumi.StringPtrOutput)
}

// The priority of this route rule, where 1 is the highest priority.
// You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 1 and 999 inclusive.
// Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers
// to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) string { return v.Priority }).(pulumi.StringOutput)
}

// In response to a matching path, the routeAction performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) RouteAction() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction {
		return v.RouteAction
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput)
}

// The URL redirect configuration for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) UrlRedirect() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect {
		return v.UrlRedirect
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRule {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRule)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction struct {
	// Describes a header to add.
	// Structure is documented below.
	RequestHeaderToAdds []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd `pulumi:"requestHeaderToAdds"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
	// Structure is documented below.
	RequestHeaderToRemoves []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove `pulumi:"requestHeaderToRemoves"`
	// Headers to add to the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	// Structure is documented below.
	ResponseHeaderToAdds []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd `pulumi:"responseHeaderToAdds"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
	// Structure is documented below.
	ResponseHeaderToRemoves []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove `pulumi:"responseHeaderToRemoves"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs struct {
	// Describes a header to add.
	// Structure is documented below.
	RequestHeaderToAdds EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput `pulumi:"requestHeaderToAdds"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
	// Structure is documented below.
	RequestHeaderToRemoves EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput `pulumi:"requestHeaderToRemoves"`
	// Headers to add to the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	// Structure is documented below.
	ResponseHeaderToAdds EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput `pulumi:"responseHeaderToAdds"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
	// Structure is documented below.
	ResponseHeaderToRemoves EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput `pulumi:"responseHeaderToRemoves"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput)
}

// Describes a header to add.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) RequestHeaderToAdds() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd {
		return v.RequestHeaderToAdds
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) RequestHeaderToRemoves() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove {
		return v.RequestHeaderToRemoves
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput)
}

// Headers to add to the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ResponseHeaderToAdds() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd {
		return v.ResponseHeaderToAdds
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ResponseHeaderToRemoves() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove {
		return v.ResponseHeaderToRemoves
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput)
}

// Describes a header to add.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) RequestHeaderToAdds() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeaderToAdds
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) RequestHeaderToRemoves() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove {
		if v == nil {
			return nil
		}
		return v.RequestHeaderToRemoves
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput)
}

// Headers to add to the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ResponseHeaderToAdds() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeaderToAdds
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ResponseHeaderToRemoves() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove {
		if v == nil {
			return nil
		}
		return v.ResponseHeaderToRemoves
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd struct {
	// The name of the header to add.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	Replace *bool `pulumi:"replace"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs struct {
	// The name of the header to add.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return o
}

// The name of the header to add.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// Whether to replace all existing headers with the same name.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd) *bool {
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove struct {
	// The name of the header to remove.
	HeaderName string `pulumi:"headerName"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs struct {
	// The name of the header to remove.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return o
}

// The name of the header to remove.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd struct {
	// The name of the header to add.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	Replace *bool `pulumi:"replace"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs struct {
	// The name of the header to add.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return o
}

// The name of the header to add.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// Whether to replace all existing headers with the same name.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd) *bool {
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName string `pulumi:"headerName"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return o
}

// Headers to remove from the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule struct {
	// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
	FullPathMatch *string `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
	// Structure is documented below.
	HeaderMatches []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// For satisfying the matchRule condition, the path of the request
	// must match the wildcard pattern specified in pathTemplateMatch
	// after removing any query parameters and anchor that may be part
	// of the original URL.
	// pathTemplateMatch must be between 1 and 255 characters
	// (inclusive).  The pattern specified by pathTemplateMatch may
	// have at most 5 wildcard operators and at most 5 variable
	// captures in total.
	PathTemplateMatch *string `pulumi:"pathTemplateMatch"`
	// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
	// Structure is documented below.
	QueryParameterMatches []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch `pulumi:"queryParameterMatches"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs struct {
	// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
	FullPathMatch pulumi.StringPtrInput `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
	// Structure is documented below.
	HeaderMatches EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// For satisfying the matchRule condition, the path of the request
	// must match the wildcard pattern specified in pathTemplateMatch
	// after removing any query parameters and anchor that may be part
	// of the original URL.
	// pathTemplateMatch must be between 1 and 255 characters
	// (inclusive).  The pattern specified by pathTemplateMatch may
	// have at most 5 wildcard operators and at most 5 variable
	// captures in total.
	PathTemplateMatch pulumi.StringPtrInput `pulumi:"pathTemplateMatch"`
	// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
	// Structure is documented below.
	QueryParameterMatches EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput `pulumi:"queryParameterMatches"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return o
}

// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) FullPathMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) *string { return v.FullPathMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) HeaderMatches() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch {
		return v.HeaderMatches
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput)
}

// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// For satisfying the matchRule condition, the path of the request
// must match the wildcard pattern specified in pathTemplateMatch
// after removing any query parameters and anchor that may be part
// of the original URL.
// pathTemplateMatch must be between 1 and 255 characters
// (inclusive).  The pattern specified by pathTemplateMatch may
// have at most 5 wildcard operators and at most 5 variable
// captures in total.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) PathTemplateMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) *string { return v.PathTemplateMatch }).(pulumi.StringPtrOutput)
}

// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) QueryParameterMatches() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch {
		return v.QueryParameterMatches
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch struct {
	// The value of the header should exactly match contents of exactMatch.
	ExactMatch *string `pulumi:"exactMatch"`
	// The header name to match on.
	HeaderName string `pulumi:"headerName"`
	// If set to false (default), the headerMatch is considered a match if the match criteria above are met.
	// If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
	InvertMatch *bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The value of the header must end with the contents of suffixMatch.
	SuffixMatch *string `pulumi:"suffixMatch"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs struct {
	// The value of the header should exactly match contents of exactMatch.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The header name to match on.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// If set to false (default), the headerMatch is considered a match if the match criteria above are met.
	// If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
	InvertMatch pulumi.BoolPtrInput `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The value of the header must end with the contents of suffixMatch.
	SuffixMatch pulumi.StringPtrInput `pulumi:"suffixMatch"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return o
}

// The value of the header should exactly match contents of exactMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The header name to match on.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) string { return v.HeaderName }).(pulumi.StringOutput)
}

// If set to false (default), the headerMatch is considered a match if the match criteria above are met.
// If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) InvertMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *bool { return v.InvertMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must start with the contents of prefixMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must end with the contents of suffixMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) SuffixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.SuffixMatch }).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
	PresentMatch *bool `pulumi:"presentMatch"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch) *string {
		return v.ExactMatch
	}).(pulumi.StringPtrOutput)
}

// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch) *bool {
		return v.PresentMatch
	}).(pulumi.BoolPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction struct {
	// The policy to use for defining caching and signed request behaviour for requests that match this route.
	// Structure is documented below.
	CdnPolicy *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy `pulumi:"cdnPolicy"`
	// CORSPolicy defines Cross-Origin-Resource-Sharing configuration, including which CORS response headers will be set.
	// Structure is documented below.
	CorsPolicy *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy `pulumi:"corsPolicy"`
	// The URL rewrite configuration for requests that match this route.
	// Structure is documented below.
	UrlRewrite *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite `pulumi:"urlRewrite"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs struct {
	// The policy to use for defining caching and signed request behaviour for requests that match this route.
	// Structure is documented below.
	CdnPolicy EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput `pulumi:"cdnPolicy"`
	// CORSPolicy defines Cross-Origin-Resource-Sharing configuration, including which CORS response headers will be set.
	// Structure is documented below.
	CorsPolicy EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The URL rewrite configuration for requests that match this route.
	// Structure is documented below.
	UrlRewrite EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput `pulumi:"urlRewrite"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput)
}

// The policy to use for defining caching and signed request behaviour for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) CdnPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy {
		return v.CdnPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput)
}

// CORSPolicy defines Cross-Origin-Resource-Sharing configuration, including which CORS response headers will be set.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) CorsPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy {
		return v.CorsPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// The URL rewrite configuration for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) UrlRewrite() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite {
		return v.UrlRewrite
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput)
}

// The policy to use for defining caching and signed request behaviour for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) CdnPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy {
		if v == nil {
			return nil
		}
		return v.CdnPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput)
}

// CORSPolicy defines Cross-Origin-Resource-Sharing configuration, including which CORS response headers will be set.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) CorsPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// The URL rewrite configuration for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) UrlRewrite() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy struct {
	// Enable signature generation or propagation on this route.
	// This field may only be specified when signedRequestMode is set to REQUIRE_TOKENS.
	// Structure is documented below.
	AddSignatures *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures `pulumi:"addSignatures"`
	// Defines the request parameters that contribute to the cache key.
	// Structure is documented below.
	CacheKeyPolicy *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy `pulumi:"cacheKeyPolicy"`
	// Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
	// For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client.
	// Possible values are: `CACHE_ALL_STATIC`, `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, `BYPASS_CACHE`.
	CacheMode *string `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
	// - The TTL must be > 0 and <= 86400s (1 day)
	// - The clientTtl cannot be larger than the defaultTtl (if set)
	// - Fractions of a second are not allowed.
	//   Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	ClientTtl *string `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
	// Defaults to 3600s (1 hour).
	// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
	// - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
	// - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
	// - Fractions of a second are not allowed.
	// - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
	//   Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	DefaultTtl *string `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin.
	// Defaults to 86400s (1 day).
	// Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
	// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
	// - Setting a TTL of "0" means "always revalidate"
	// - The value of maxTtl must be equal to or greater than defaultTtl.
	// - Fractions of a second are not allowed.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	MaxTtl *string `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
	// By default, the CDNPolicy will apply the following default TTLs to these status codes:
	// - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
	// - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
	// - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
	//   These defaults can be overridden in negativeCachingPolicy
	NegativeCaching *bool `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
	// - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
	// - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
	//   Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy map[string]string `pulumi:"negativeCachingPolicy"`
	// The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
	SignedRequestKeyset *string `pulumi:"signedRequestKeyset"`
	// Limit how far into the future the expiration time of a signed request may be.
	// When set, a signed request is rejected if its expiration time is later than now + signedRequestMaximumExpirationTtl, where now is the time at which the signed request is first handled by the CDN.
	// - The TTL must be > 0.
	// - Fractions of a second are not allowed.
	//   By default, signedRequestMaximumExpirationTtl is not set and the expiration time of a signed request may be arbitrarily far into future.
	SignedRequestMaximumExpirationTtl *string `pulumi:"signedRequestMaximumExpirationTtl"`
	// Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
	// You must also set a signedRequestKeyset to enable signed requests.
	// When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged.
	// Possible values are: `DISABLED`, `REQUIRE_SIGNATURES`, `REQUIRE_TOKENS`.
	SignedRequestMode *string `pulumi:"signedRequestMode"`
	// Additional options for signed tokens.
	// signedTokenOptions may only be specified when signedRequestMode is REQUIRE_TOKENS.
	// Structure is documented below.
	SignedTokenOptions *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions `pulumi:"signedTokenOptions"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs struct {
	// Enable signature generation or propagation on this route.
	// This field may only be specified when signedRequestMode is set to REQUIRE_TOKENS.
	// Structure is documented below.
	AddSignatures EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrInput `pulumi:"addSignatures"`
	// Defines the request parameters that contribute to the cache key.
	// Structure is documented below.
	CacheKeyPolicy EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput `pulumi:"cacheKeyPolicy"`
	// Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
	// For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client.
	// Possible values are: `CACHE_ALL_STATIC`, `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, `BYPASS_CACHE`.
	CacheMode pulumi.StringPtrInput `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
	// - The TTL must be > 0 and <= 86400s (1 day)
	// - The clientTtl cannot be larger than the defaultTtl (if set)
	// - Fractions of a second are not allowed.
	//   Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	ClientTtl pulumi.StringPtrInput `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
	// Defaults to 3600s (1 hour).
	// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
	// - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
	// - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
	// - Fractions of a second are not allowed.
	// - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
	//   Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	DefaultTtl pulumi.StringPtrInput `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin.
	// Defaults to 86400s (1 day).
	// Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
	// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
	// - Setting a TTL of "0" means "always revalidate"
	// - The value of maxTtl must be equal to or greater than defaultTtl.
	// - Fractions of a second are not allowed.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	MaxTtl pulumi.StringPtrInput `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
	// By default, the CDNPolicy will apply the following default TTLs to these status codes:
	// - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
	// - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
	// - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
	//   These defaults can be overridden in negativeCachingPolicy
	NegativeCaching pulumi.BoolPtrInput `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
	// - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
	// - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
	//   Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy pulumi.StringMapInput `pulumi:"negativeCachingPolicy"`
	// The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
	SignedRequestKeyset pulumi.StringPtrInput `pulumi:"signedRequestKeyset"`
	// Limit how far into the future the expiration time of a signed request may be.
	// When set, a signed request is rejected if its expiration time is later than now + signedRequestMaximumExpirationTtl, where now is the time at which the signed request is first handled by the CDN.
	// - The TTL must be > 0.
	// - Fractions of a second are not allowed.
	//   By default, signedRequestMaximumExpirationTtl is not set and the expiration time of a signed request may be arbitrarily far into future.
	SignedRequestMaximumExpirationTtl pulumi.StringPtrInput `pulumi:"signedRequestMaximumExpirationTtl"`
	// Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
	// You must also set a signedRequestKeyset to enable signed requests.
	// When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged.
	// Possible values are: `DISABLED`, `REQUIRE_SIGNATURES`, `REQUIRE_TOKENS`.
	SignedRequestMode pulumi.StringPtrInput `pulumi:"signedRequestMode"`
	// Additional options for signed tokens.
	// signedTokenOptions may only be specified when signedRequestMode is REQUIRE_TOKENS.
	// Structure is documented below.
	SignedTokenOptions EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrInput `pulumi:"signedTokenOptions"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput)
}

// Enable signature generation or propagation on this route.
// This field may only be specified when signedRequestMode is set to REQUIRE_TOKENS.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) AddSignatures() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures {
		return v.AddSignatures
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput)
}

// Defines the request parameters that contribute to the cache key.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) CacheKeyPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
		return v.CacheKeyPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput)
}

// Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
// For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client.
// Possible values are: `CACHE_ALL_STATIC`, `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, `BYPASS_CACHE`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string { return v.CacheMode }).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
//   - The TTL must be > 0 and <= 86400s (1 day)
//   - The clientTtl cannot be larger than the defaultTtl (if set)
//   - Fractions of a second are not allowed.
//     Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
//     When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
//     A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ClientTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string { return v.ClientTtl }).(pulumi.StringPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
// Defaults to 3600s (1 hour).
//   - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
//   - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
//   - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
//   - Fractions of a second are not allowed.
//   - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
//     Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
//     When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
//     A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) DefaultTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string { return v.DefaultTtl }).(pulumi.StringPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin.
// Defaults to 86400s (1 day).
// Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
//   - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
//   - Setting a TTL of "0" means "always revalidate"
//   - The value of maxTtl must be equal to or greater than defaultTtl.
//   - Fractions of a second are not allowed.
//     When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
//     A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) MaxTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string { return v.MaxTtl }).(pulumi.StringPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
// By default, the CDNPolicy will apply the following default TTLs to these status codes:
//   - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
//   - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
//   - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
//     These defaults can be overridden in negativeCachingPolicy
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *bool {
		return v.NegativeCaching
	}).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
//   - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
//   - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
//     Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) NegativeCachingPolicy() pulumi.StringMapOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) map[string]string {
		return v.NegativeCachingPolicy
	}).(pulumi.StringMapOutput)
}

// The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) SignedRequestKeyset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		return v.SignedRequestKeyset
	}).(pulumi.StringPtrOutput)
}

// Limit how far into the future the expiration time of a signed request may be.
// When set, a signed request is rejected if its expiration time is later than now + signedRequestMaximumExpirationTtl, where now is the time at which the signed request is first handled by the CDN.
//   - The TTL must be > 0.
//   - Fractions of a second are not allowed.
//     By default, signedRequestMaximumExpirationTtl is not set and the expiration time of a signed request may be arbitrarily far into future.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) SignedRequestMaximumExpirationTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		return v.SignedRequestMaximumExpirationTtl
	}).(pulumi.StringPtrOutput)
}

// Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
// You must also set a signedRequestKeyset to enable signed requests.
// When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged.
// Possible values are: `DISABLED`, `REQUIRE_SIGNATURES`, `REQUIRE_TOKENS`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) SignedRequestMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		return v.SignedRequestMode
	}).(pulumi.StringPtrOutput)
}

// Additional options for signed tokens.
// signedTokenOptions may only be specified when signedRequestMode is REQUIRE_TOKENS.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) SignedTokenOptions() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions {
		return v.SignedTokenOptions
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput)
}

// Enable signature generation or propagation on this route.
// This field may only be specified when signedRequestMode is set to REQUIRE_TOKENS.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) AddSignatures() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures {
		if v == nil {
			return nil
		}
		return v.AddSignatures
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput)
}

// Defines the request parameters that contribute to the cache key.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) CacheKeyPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
		if v == nil {
			return nil
		}
		return v.CacheKeyPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput)
}

// Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
// For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client.
// Possible values are: `CACHE_ALL_STATIC`, `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, `BYPASS_CACHE`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.CacheMode
	}).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
//   - The TTL must be > 0 and <= 86400s (1 day)
//   - The clientTtl cannot be larger than the defaultTtl (if set)
//   - Fractions of a second are not allowed.
//     Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
//     When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
//     A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) ClientTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientTtl
	}).(pulumi.StringPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
// Defaults to 3600s (1 hour).
//   - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
//   - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
//   - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
//   - Fractions of a second are not allowed.
//   - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
//     Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
//     When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
//     A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) DefaultTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.StringPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin.
// Defaults to 86400s (1 day).
// Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
//   - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
//   - Setting a TTL of "0" means "always revalidate"
//   - The value of maxTtl must be equal to or greater than defaultTtl.
//   - Fractions of a second are not allowed.
//     When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
//     A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) MaxTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaxTtl
	}).(pulumi.StringPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
// By default, the CDNPolicy will apply the following default TTLs to these status codes:
//   - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
//   - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
//   - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
//     These defaults can be overridden in negativeCachingPolicy
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.NegativeCaching
	}).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
//   - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
//   - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
//     Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) NegativeCachingPolicy() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) map[string]string {
		if v == nil {
			return nil
		}
		return v.NegativeCachingPolicy
	}).(pulumi.StringMapOutput)
}

// The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) SignedRequestKeyset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SignedRequestKeyset
	}).(pulumi.StringPtrOutput)
}

// Limit how far into the future the expiration time of a signed request may be.
// When set, a signed request is rejected if its expiration time is later than now + signedRequestMaximumExpirationTtl, where now is the time at which the signed request is first handled by the CDN.
//   - The TTL must be > 0.
//   - Fractions of a second are not allowed.
//     By default, signedRequestMaximumExpirationTtl is not set and the expiration time of a signed request may be arbitrarily far into future.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) SignedRequestMaximumExpirationTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SignedRequestMaximumExpirationTtl
	}).(pulumi.StringPtrOutput)
}

// Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
// You must also set a signedRequestKeyset to enable signed requests.
// When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged.
// Possible values are: `DISABLED`, `REQUIRE_SIGNATURES`, `REQUIRE_TOKENS`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) SignedRequestMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SignedRequestMode
	}).(pulumi.StringPtrOutput)
}

// Additional options for signed tokens.
// signedTokenOptions may only be specified when signedRequestMode is REQUIRE_TOKENS.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) SignedTokenOptions() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions {
		if v == nil {
			return nil
		}
		return v.SignedTokenOptions
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures struct {
	// The actions to take to add signatures to responses.
	// Each value may be one of: `GENERATE_COOKIE`, `GENERATE_TOKEN_HLS_COOKIELESS`, `PROPAGATE_TOKEN_HLS_COOKIELESS`.
	Actions string `pulumi:"actions"`
	// The parameters to copy from the verified token to the generated token.
	// Only the following parameters may be copied:
	CopiedParameters []string `pulumi:"copiedParameters"`
	// The keyset to use for signature generation.
	// The following are both valid paths to an EdgeCacheKeyset resource:
	// * `projects/project/locations/global/edgeCacheKeysets/yourKeyset`
	Keyset *string `pulumi:"keyset"`
	// The query parameter in which to put the generated token.
	// If not specified, defaults to `edge-cache-token`.
	// If specified, the name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	// This field may only be set when the GENERATE_TOKEN_HLS_COOKIELESS or PROPAGATE_TOKEN_HLS_COOKIELESS actions are specified.
	TokenQueryParameter *string `pulumi:"tokenQueryParameter"`
	// The duration the token is valid starting from the moment the token is first generated.
	// Defaults to `86400s` (1 day).
	// The TTL must be >= 0 and <= 604,800 seconds (1 week).
	// This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	TokenTtl *string `pulumi:"tokenTtl"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs struct {
	// The actions to take to add signatures to responses.
	// Each value may be one of: `GENERATE_COOKIE`, `GENERATE_TOKEN_HLS_COOKIELESS`, `PROPAGATE_TOKEN_HLS_COOKIELESS`.
	Actions pulumi.StringInput `pulumi:"actions"`
	// The parameters to copy from the verified token to the generated token.
	// Only the following parameters may be copied:
	CopiedParameters pulumi.StringArrayInput `pulumi:"copiedParameters"`
	// The keyset to use for signature generation.
	// The following are both valid paths to an EdgeCacheKeyset resource:
	// * `projects/project/locations/global/edgeCacheKeysets/yourKeyset`
	Keyset pulumi.StringPtrInput `pulumi:"keyset"`
	// The query parameter in which to put the generated token.
	// If not specified, defaults to `edge-cache-token`.
	// If specified, the name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	// This field may only be set when the GENERATE_TOKEN_HLS_COOKIELESS or PROPAGATE_TOKEN_HLS_COOKIELESS actions are specified.
	TokenQueryParameter pulumi.StringPtrInput `pulumi:"tokenQueryParameter"`
	// The duration the token is valid starting from the moment the token is first generated.
	// Defaults to `86400s` (1 day).
	// The TTL must be >= 0 and <= 604,800 seconds (1 week).
	// This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	TokenTtl pulumi.StringPtrInput `pulumi:"tokenTtl"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput)
}

// The actions to take to add signatures to responses.
// Each value may be one of: `GENERATE_COOKIE`, `GENERATE_TOKEN_HLS_COOKIELESS`, `PROPAGATE_TOKEN_HLS_COOKIELESS`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) Actions() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) string {
		return v.Actions
	}).(pulumi.StringOutput)
}

// The parameters to copy from the verified token to the generated token.
// Only the following parameters may be copied:
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) CopiedParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) []string {
		return v.CopiedParameters
	}).(pulumi.StringArrayOutput)
}

// The keyset to use for signature generation.
// The following are both valid paths to an EdgeCacheKeyset resource:
// * `projects/project/locations/global/edgeCacheKeysets/yourKeyset`
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) Keyset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) *string {
		return v.Keyset
	}).(pulumi.StringPtrOutput)
}

// The query parameter in which to put the generated token.
// If not specified, defaults to `edge-cache-token`.
// If specified, the name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
// This field may only be set when the GENERATE_TOKEN_HLS_COOKIELESS or PROPAGATE_TOKEN_HLS_COOKIELESS actions are specified.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) TokenQueryParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) *string {
		return v.TokenQueryParameter
	}).(pulumi.StringPtrOutput)
}

// The duration the token is valid starting from the moment the token is first generated.
// Defaults to `86400s` (1 day).
// The TTL must be >= 0 and <= 604,800 seconds (1 week).
// This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput) TokenTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) *string {
		return v.TokenTtl
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput)
}

// The actions to take to add signatures to responses.
// Each value may be one of: `GENERATE_COOKIE`, `GENERATE_TOKEN_HLS_COOKIELESS`, `PROPAGATE_TOKEN_HLS_COOKIELESS`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) Actions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) *string {
		if v == nil {
			return nil
		}
		return &v.Actions
	}).(pulumi.StringPtrOutput)
}

// The parameters to copy from the verified token to the generated token.
// Only the following parameters may be copied:
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) CopiedParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) []string {
		if v == nil {
			return nil
		}
		return v.CopiedParameters
	}).(pulumi.StringArrayOutput)
}

// The keyset to use for signature generation.
// The following are both valid paths to an EdgeCacheKeyset resource:
// * `projects/project/locations/global/edgeCacheKeysets/yourKeyset`
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) Keyset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) *string {
		if v == nil {
			return nil
		}
		return v.Keyset
	}).(pulumi.StringPtrOutput)
}

// The query parameter in which to put the generated token.
// If not specified, defaults to `edge-cache-token`.
// If specified, the name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
// This field may only be set when the GENERATE_TOKEN_HLS_COOKIELESS or PROPAGATE_TOKEN_HLS_COOKIELESS actions are specified.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) TokenQueryParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) *string {
		if v == nil {
			return nil
		}
		return v.TokenQueryParameter
	}).(pulumi.StringPtrOutput)
}

// The duration the token is valid starting from the moment the token is first generated.
// Defaults to `86400s` (1 day).
// The TTL must be >= 0 and <= 604,800 seconds (1 week).
// This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput) TokenTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures) *string {
		if v == nil {
			return nil
		}
		return v.TokenTtl
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy struct {
	// If true, requests to different hosts will be cached separately.
	// Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
	ExcludeHost *bool `pulumi:"excludeHost"`
	// If true, exclude query string parameters from the cache key
	// If false (the default), include the query string parameters in
	// the cache key according to includeQueryParameters and
	// excludeQueryParameters. If neither includeQueryParameters nor
	// excludeQueryParameters is set, the entire query string will be
	// included.
	ExcludeQueryString *bool `pulumi:"excludeQueryString"`
	// Names of query string parameters to exclude from cache keys. All other parameters will be included.
	// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	ExcludedQueryParameters []string `pulumi:"excludedQueryParameters"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol *bool `pulumi:"includeProtocol"`
	// Names of Cookies to include in cache keys.  The cookie name and cookie value of each cookie named will be used as part of the cache key.
	// Cookie names:
	// - must be valid RFC 6265 "cookie-name" tokens
	// - are case sensitive
	// - cannot start with "Edge-Cache-" (case insensitive)
	//   Note that specifying several cookies, and/or cookies that have a large range of values (e.g., per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
	//   You may specify up to three cookie names.
	IncludedCookieNames []string `pulumi:"includedCookieNames"`
	// Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
	// - Header names must be valid HTTP RFC 7230 header field values.
	// - Header field names are case insensitive
	// - To include the HTTP method, use ":method"
	//   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
	IncludedHeaderNames []string `pulumi:"includedHeaderNames"`
	// Names of query string parameters to include in cache keys. All other parameters will be excluded.
	// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	IncludedQueryParameters []string `pulumi:"includedQueryParameters"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs struct {
	// If true, requests to different hosts will be cached separately.
	// Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
	ExcludeHost pulumi.BoolPtrInput `pulumi:"excludeHost"`
	// If true, exclude query string parameters from the cache key
	// If false (the default), include the query string parameters in
	// the cache key according to includeQueryParameters and
	// excludeQueryParameters. If neither includeQueryParameters nor
	// excludeQueryParameters is set, the entire query string will be
	// included.
	ExcludeQueryString pulumi.BoolPtrInput `pulumi:"excludeQueryString"`
	// Names of query string parameters to exclude from cache keys. All other parameters will be included.
	// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	ExcludedQueryParameters pulumi.StringArrayInput `pulumi:"excludedQueryParameters"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol pulumi.BoolPtrInput `pulumi:"includeProtocol"`
	// Names of Cookies to include in cache keys.  The cookie name and cookie value of each cookie named will be used as part of the cache key.
	// Cookie names:
	// - must be valid RFC 6265 "cookie-name" tokens
	// - are case sensitive
	// - cannot start with "Edge-Cache-" (case insensitive)
	//   Note that specifying several cookies, and/or cookies that have a large range of values (e.g., per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
	//   You may specify up to three cookie names.
	IncludedCookieNames pulumi.StringArrayInput `pulumi:"includedCookieNames"`
	// Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
	// - Header names must be valid HTTP RFC 7230 header field values.
	// - Header field names are case insensitive
	// - To include the HTTP method, use ":method"
	//   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
	IncludedHeaderNames pulumi.StringArrayInput `pulumi:"includedHeaderNames"`
	// Names of query string parameters to include in cache keys. All other parameters will be excluded.
	// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	IncludedQueryParameters pulumi.StringArrayInput `pulumi:"includedQueryParameters"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput)
}

// If true, requests to different hosts will be cached separately.
// Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ExcludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		return v.ExcludeHost
	}).(pulumi.BoolPtrOutput)
}

// If true, exclude query string parameters from the cache key
// If false (the default), include the query string parameters in
// the cache key according to includeQueryParameters and
// excludeQueryParameters. If neither includeQueryParameters nor
// excludeQueryParameters is set, the entire query string will be
// included.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ExcludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		return v.ExcludeQueryString
	}).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude from cache keys. All other parameters will be included.
// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ExcludedQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		return v.ExcludedQueryParameters
	}).(pulumi.StringArrayOutput)
}

// If true, http and https requests will be cached separately.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		return v.IncludeProtocol
	}).(pulumi.BoolPtrOutput)
}

// Names of Cookies to include in cache keys.  The cookie name and cookie value of each cookie named will be used as part of the cache key.
// Cookie names:
//   - must be valid RFC 6265 "cookie-name" tokens
//   - are case sensitive
//   - cannot start with "Edge-Cache-" (case insensitive)
//     Note that specifying several cookies, and/or cookies that have a large range of values (e.g., per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
//     You may specify up to three cookie names.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) IncludedCookieNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		return v.IncludedCookieNames
	}).(pulumi.StringArrayOutput)
}

// Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
//   - Header names must be valid HTTP RFC 7230 header field values.
//   - Header field names are case insensitive
//   - To include the HTTP method, use ":method"
//     Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) IncludedHeaderNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		return v.IncludedHeaderNames
	}).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys. All other parameters will be excluded.
// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) IncludedQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		return v.IncludedQueryParameters
	}).(pulumi.StringArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput)
}

// If true, requests to different hosts will be cached separately.
// Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ExcludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeHost
	}).(pulumi.BoolPtrOutput)
}

// If true, exclude query string parameters from the cache key
// If false (the default), include the query string parameters in
// the cache key according to includeQueryParameters and
// excludeQueryParameters. If neither includeQueryParameters nor
// excludeQueryParameters is set, the entire query string will be
// included.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ExcludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeQueryString
	}).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude from cache keys. All other parameters will be included.
// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ExcludedQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedQueryParameters
	}).(pulumi.StringArrayOutput)
}

// If true, http and https requests will be cached separately.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeProtocol
	}).(pulumi.BoolPtrOutput)
}

// Names of Cookies to include in cache keys.  The cookie name and cookie value of each cookie named will be used as part of the cache key.
// Cookie names:
//   - must be valid RFC 6265 "cookie-name" tokens
//   - are case sensitive
//   - cannot start with "Edge-Cache-" (case insensitive)
//     Note that specifying several cookies, and/or cookies that have a large range of values (e.g., per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
//     You may specify up to three cookie names.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) IncludedCookieNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.IncludedCookieNames
	}).(pulumi.StringArrayOutput)
}

// Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
//   - Header names must be valid HTTP RFC 7230 header field values.
//   - Header field names are case insensitive
//   - To include the HTTP method, use ":method"
//     Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) IncludedHeaderNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.IncludedHeaderNames
	}).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys. All other parameters will be excluded.
// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) IncludedQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.IncludedQueryParameters
	}).(pulumi.StringArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions struct {
	// The allowed signature algorithms to use.
	// Defaults to using only ED25519.
	// You may specify up to 3 signature algorithms to use.
	// Each value may be one of: `ED25519`, `HMAC_SHA_256`, `HMAC_SHA1`.
	AllowedSignatureAlgorithms []string `pulumi:"allowedSignatureAlgorithms"`
	// The query parameter in which to find the token.
	// The name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	// Defaults to `edge-cache-token`.
	TokenQueryParameter *string `pulumi:"tokenQueryParameter"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs struct {
	// The allowed signature algorithms to use.
	// Defaults to using only ED25519.
	// You may specify up to 3 signature algorithms to use.
	// Each value may be one of: `ED25519`, `HMAC_SHA_256`, `HMAC_SHA1`.
	AllowedSignatureAlgorithms pulumi.StringArrayInput `pulumi:"allowedSignatureAlgorithms"`
	// The query parameter in which to find the token.
	// The name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	// Defaults to `edge-cache-token`.
	TokenQueryParameter pulumi.StringPtrInput `pulumi:"tokenQueryParameter"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput)
}

// The allowed signature algorithms to use.
// Defaults to using only ED25519.
// You may specify up to 3 signature algorithms to use.
// Each value may be one of: `ED25519`, `HMAC_SHA_256`, `HMAC_SHA1`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput) AllowedSignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions) []string {
		return v.AllowedSignatureAlgorithms
	}).(pulumi.StringArrayOutput)
}

// The query parameter in which to find the token.
// The name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
// Defaults to `edge-cache-token`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput) TokenQueryParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions) *string {
		return v.TokenQueryParameter
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput)
}

// The allowed signature algorithms to use.
// Defaults to using only ED25519.
// You may specify up to 3 signature algorithms to use.
// Each value may be one of: `ED25519`, `HMAC_SHA_256`, `HMAC_SHA1`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput) AllowedSignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions) []string {
		if v == nil {
			return nil
		}
		return v.AllowedSignatureAlgorithms
	}).(pulumi.StringArrayOutput)
}

// The query parameter in which to find the token.
// The name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
// Defaults to `edge-cache-token`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput) TokenQueryParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions) *string {
		if v == nil {
			return nil
		}
		return v.TokenQueryParameter
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
	// This translates to the Access-Control-Allow-Credentials response header.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers response header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods response header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the list of origins that will be allowed to do CORS requests.
	// This translates to the Access-Control-Allow-Origin response header.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Allow-Headers response header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
	// - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
	// - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
	// - This translates to the Access-Control-Max-Age header.
	//   A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	MaxAge string `pulumi:"maxAge"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
	// This translates to the Access-Control-Allow-Credentials response header.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers response header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods response header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the list of origins that will be allowed to do CORS requests.
	// This translates to the Access-Control-Allow-Origin response header.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Allow-Headers response header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
	// - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
	// - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
	// - This translates to the Access-Control-Max-Age header.
	//   A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	MaxAge pulumi.StringInput `pulumi:"maxAge"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
// This translates to the Access-Control-Allow-Credentials response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests.
// This translates to the Access-Control-Allow-Origin response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
//   - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
//   - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
//   - This translates to the Access-Control-Max-Age header.
//     A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) MaxAge() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) string { return v.MaxAge }).(pulumi.StringOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
// This translates to the Access-Control-Allow-Credentials response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests.
// This translates to the Access-Control-Allow-Origin response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
//   - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
//   - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
//   - This translates to the Access-Control-Max-Age header.
//     A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.MaxAge
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite struct {
	// Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
	// Prior to forwarding the request to the selected origin, if the
	// request matched a pathTemplateMatch, the matching portion of the
	// request's path is replaced re-written using the pattern specified
	// by pathTemplateRewrite.
	// pathTemplateRewrite must be between 1 and 255 characters
	// (inclusive), must start with a '/', and must only use variables
	// captured by the route's pathTemplate matchers.
	// pathTemplateRewrite may only be used when all of a route's
	// MatchRules specify pathTemplate.
	// Only one of pathPrefixRewrite and pathTemplateRewrite may be
	// specified.
	PathTemplateRewrite *string `pulumi:"pathTemplateRewrite"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs struct {
	// Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
	// Prior to forwarding the request to the selected origin, if the
	// request matched a pathTemplateMatch, the matching portion of the
	// request's path is replaced re-written using the pattern specified
	// by pathTemplateRewrite.
	// pathTemplateRewrite must be between 1 and 255 characters
	// (inclusive), must start with a '/', and must only use variables
	// captured by the route's pathTemplate matchers.
	// pathTemplateRewrite may only be used when all of a route's
	// MatchRules specify pathTemplate.
	// Only one of pathPrefixRewrite and pathTemplateRewrite may be
	// specified.
	PathTemplateRewrite pulumi.StringPtrInput `pulumi:"pathTemplateRewrite"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected origin, if the
// request matched a pathTemplateMatch, the matching portion of the
// request's path is replaced re-written using the pattern specified
// by pathTemplateRewrite.
// pathTemplateRewrite must be between 1 and 255 characters
// (inclusive), must start with a '/', and must only use variables
// captured by the route's pathTemplate matchers.
// pathTemplateRewrite may only be used when all of a route's
// MatchRules specify pathTemplate.
// Only one of pathPrefixRewrite and pathTemplateRewrite may be
// specified.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) PathTemplateRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		return v.PathTemplateRewrite
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput)
}

// Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected origin, if the
// request matched a pathTemplateMatch, the matching portion of the
// request's path is replaced re-written using the pattern specified
// by pathTemplateRewrite.
// pathTemplateRewrite must be between 1 and 255 characters
// (inclusive), must start with a '/', and must only use variables
// captured by the route's pathTemplate matchers.
// pathTemplateRewrite may only be used when all of a route's
// MatchRules specify pathTemplate.
// Only one of pathPrefixRewrite and pathTemplateRewrite may be
// specified.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) PathTemplateRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathTemplateRewrite
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
	// This can only be set if there is at least one (1) edgeSslCertificate set on the service.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request.
	// pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	// The path value must be between 1 and 1024 characters.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PrefixRedirect *string `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction.
	// The supported values are:
	RedirectResponseCode *string `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
	StripQuery *bool `pulumi:"stripQuery"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectInput` via:
//
//	EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
	// This can only be set if there is at least one (1) edgeSslCertificate set on the service.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request.
	// pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	// The path value must be between 1 and 1024 characters.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PrefixRedirect pulumi.StringPtrInput `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction.
	// The supported values are:
	RedirectResponseCode pulumi.StringPtrInput `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
	StripQuery pulumi.BoolPtrInput `pulumi:"stripQuery"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput` via:
//
//	        EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs{...}
//
//	or:
//
//	        nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
// This can only be set if there is at least one (1) edgeSslCertificate set on the service.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request.
// pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
// The path value must be between 1 and 1024 characters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string { return v.PrefixRedirect }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction.
// The supported values are:
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string { return v.RedirectResponseCode }).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *bool { return v.StripQuery }).(pulumi.BoolPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
// This can only be set if there is at least one (1) edgeSslCertificate set on the service.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request.
// pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
// The path value must be between 1 and 1024 characters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRedirect
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction.
// The supported values are:
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.RedirectResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

type HttpRouteRule struct {
	// The detailed rule defining how to route matched traffic.
	// Structure is documented below.
	Action *HttpRouteRuleAction `pulumi:"action"`
	// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
	// If no matches field is specified, this rule will unconditionally match traffic.
	// If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
	// Structure is documented below.
	Matches []HttpRouteRuleMatch `pulumi:"matches"`
}

// HttpRouteRuleInput is an input type that accepts HttpRouteRuleArgs and HttpRouteRuleOutput values.
// You can construct a concrete instance of `HttpRouteRuleInput` via:
//
//	HttpRouteRuleArgs{...}
type HttpRouteRuleInput interface {
	pulumi.Input

	ToHttpRouteRuleOutput() HttpRouteRuleOutput
	ToHttpRouteRuleOutputWithContext(context.Context) HttpRouteRuleOutput
}

type HttpRouteRuleArgs struct {
	// The detailed rule defining how to route matched traffic.
	// Structure is documented below.
	Action HttpRouteRuleActionPtrInput `pulumi:"action"`
	// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
	// If no matches field is specified, this rule will unconditionally match traffic.
	// If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
	// Structure is documented below.
	Matches HttpRouteRuleMatchArrayInput `pulumi:"matches"`
}

func (HttpRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRule)(nil)).Elem()
}

func (i HttpRouteRuleArgs) ToHttpRouteRuleOutput() HttpRouteRuleOutput {
	return i.ToHttpRouteRuleOutputWithContext(context.Background())
}

func (i HttpRouteRuleArgs) ToHttpRouteRuleOutputWithContext(ctx context.Context) HttpRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleOutput)
}

// HttpRouteRuleArrayInput is an input type that accepts HttpRouteRuleArray and HttpRouteRuleArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleArrayInput` via:
//
//	HttpRouteRuleArray{ HttpRouteRuleArgs{...} }
type HttpRouteRuleArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput
	ToHttpRouteRuleArrayOutputWithContext(context.Context) HttpRouteRuleArrayOutput
}

type HttpRouteRuleArray []HttpRouteRuleInput

func (HttpRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRule)(nil)).Elem()
}

func (i HttpRouteRuleArray) ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput {
	return i.ToHttpRouteRuleArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleArray) ToHttpRouteRuleArrayOutputWithContext(ctx context.Context) HttpRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleArrayOutput)
}

type HttpRouteRuleOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRule)(nil)).Elem()
}

func (o HttpRouteRuleOutput) ToHttpRouteRuleOutput() HttpRouteRuleOutput {
	return o
}

func (o HttpRouteRuleOutput) ToHttpRouteRuleOutputWithContext(ctx context.Context) HttpRouteRuleOutput {
	return o
}

// The detailed rule defining how to route matched traffic.
// Structure is documented below.
func (o HttpRouteRuleOutput) Action() HttpRouteRuleActionPtrOutput {
	return o.ApplyT(func(v HttpRouteRule) *HttpRouteRuleAction { return v.Action }).(HttpRouteRuleActionPtrOutput)
}

// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
// If no matches field is specified, this rule will unconditionally match traffic.
// If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
// Structure is documented below.
func (o HttpRouteRuleOutput) Matches() HttpRouteRuleMatchArrayOutput {
	return o.ApplyT(func(v HttpRouteRule) []HttpRouteRuleMatch { return v.Matches }).(HttpRouteRuleMatchArrayOutput)
}

type HttpRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRule)(nil)).Elem()
}

func (o HttpRouteRuleArrayOutput) ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput {
	return o
}

func (o HttpRouteRuleArrayOutput) ToHttpRouteRuleArrayOutputWithContext(ctx context.Context) HttpRouteRuleArrayOutput {
	return o
}

func (o HttpRouteRuleArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRule {
		return vs[0].([]HttpRouteRule)[vs[1].(int)]
	}).(HttpRouteRuleOutput)
}

type HttpRouteRuleAction struct {
	// The specification for allowing client side cross-origin requests.
	// Structure is documented below.
	CorsPolicy *HttpRouteRuleActionCorsPolicy `pulumi:"corsPolicy"`
	// The destination to which traffic should be forwarded.
	// Structure is documented below.
	Destinations []HttpRouteRuleActionDestination `pulumi:"destinations"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	// Structure is documented below.
	FaultInjectionPolicy *HttpRouteRuleActionFaultInjectionPolicy `pulumi:"faultInjectionPolicy"`
	// If set, the request is directed as configured by this field.
	// Structure is documented below.
	Redirect *HttpRouteRuleActionRedirect `pulumi:"redirect"`
	// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
	// Structure is documented below.
	RequestHeaderModifier *HttpRouteRuleActionRequestHeaderModifier `pulumi:"requestHeaderModifier"`
	// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
	// Structure is documented below.
	RequestMirrorPolicy *HttpRouteRuleActionRequestMirrorPolicy `pulumi:"requestMirrorPolicy"`
	// The specification for modifying the headers of a response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeaderModifier *HttpRouteRuleActionResponseHeaderModifier `pulumi:"responseHeaderModifier"`
	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	RetryPolicy *HttpRouteRuleActionRetryPolicy `pulumi:"retryPolicy"`
	// Specifies the timeout for selected route.
	Timeout *string `pulumi:"timeout"`
	// The specification for rewrite URL before forwarding requests to the destination.
	// Structure is documented below.
	UrlRewrite *HttpRouteRuleActionUrlRewrite `pulumi:"urlRewrite"`
}

// HttpRouteRuleActionInput is an input type that accepts HttpRouteRuleActionArgs and HttpRouteRuleActionOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionInput` via:
//
//	HttpRouteRuleActionArgs{...}
type HttpRouteRuleActionInput interface {
	pulumi.Input

	ToHttpRouteRuleActionOutput() HttpRouteRuleActionOutput
	ToHttpRouteRuleActionOutputWithContext(context.Context) HttpRouteRuleActionOutput
}

type HttpRouteRuleActionArgs struct {
	// The specification for allowing client side cross-origin requests.
	// Structure is documented below.
	CorsPolicy HttpRouteRuleActionCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The destination to which traffic should be forwarded.
	// Structure is documented below.
	Destinations HttpRouteRuleActionDestinationArrayInput `pulumi:"destinations"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	// Structure is documented below.
	FaultInjectionPolicy HttpRouteRuleActionFaultInjectionPolicyPtrInput `pulumi:"faultInjectionPolicy"`
	// If set, the request is directed as configured by this field.
	// Structure is documented below.
	Redirect HttpRouteRuleActionRedirectPtrInput `pulumi:"redirect"`
	// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
	// Structure is documented below.
	RequestHeaderModifier HttpRouteRuleActionRequestHeaderModifierPtrInput `pulumi:"requestHeaderModifier"`
	// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
	// Structure is documented below.
	RequestMirrorPolicy HttpRouteRuleActionRequestMirrorPolicyPtrInput `pulumi:"requestMirrorPolicy"`
	// The specification for modifying the headers of a response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeaderModifier HttpRouteRuleActionResponseHeaderModifierPtrInput `pulumi:"responseHeaderModifier"`
	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	RetryPolicy HttpRouteRuleActionRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// Specifies the timeout for selected route.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// The specification for rewrite URL before forwarding requests to the destination.
	// Structure is documented below.
	UrlRewrite HttpRouteRuleActionUrlRewritePtrInput `pulumi:"urlRewrite"`
}

func (HttpRouteRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleAction)(nil)).Elem()
}

func (i HttpRouteRuleActionArgs) ToHttpRouteRuleActionOutput() HttpRouteRuleActionOutput {
	return i.ToHttpRouteRuleActionOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionArgs) ToHttpRouteRuleActionOutputWithContext(ctx context.Context) HttpRouteRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionOutput)
}

func (i HttpRouteRuleActionArgs) ToHttpRouteRuleActionPtrOutput() HttpRouteRuleActionPtrOutput {
	return i.ToHttpRouteRuleActionPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionArgs) ToHttpRouteRuleActionPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionOutput).ToHttpRouteRuleActionPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionPtrInput is an input type that accepts HttpRouteRuleActionArgs, HttpRouteRuleActionPtr and HttpRouteRuleActionPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionPtrInput` via:
//
//	        HttpRouteRuleActionArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionPtrOutput() HttpRouteRuleActionPtrOutput
	ToHttpRouteRuleActionPtrOutputWithContext(context.Context) HttpRouteRuleActionPtrOutput
}

type httpRouteRuleActionPtrType HttpRouteRuleActionArgs

func HttpRouteRuleActionPtr(v *HttpRouteRuleActionArgs) HttpRouteRuleActionPtrInput {
	return (*httpRouteRuleActionPtrType)(v)
}

func (*httpRouteRuleActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleAction)(nil)).Elem()
}

func (i *httpRouteRuleActionPtrType) ToHttpRouteRuleActionPtrOutput() HttpRouteRuleActionPtrOutput {
	return i.ToHttpRouteRuleActionPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionPtrType) ToHttpRouteRuleActionPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionPtrOutput)
}

type HttpRouteRuleActionOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleAction)(nil)).Elem()
}

func (o HttpRouteRuleActionOutput) ToHttpRouteRuleActionOutput() HttpRouteRuleActionOutput {
	return o
}

func (o HttpRouteRuleActionOutput) ToHttpRouteRuleActionOutputWithContext(ctx context.Context) HttpRouteRuleActionOutput {
	return o
}

func (o HttpRouteRuleActionOutput) ToHttpRouteRuleActionPtrOutput() HttpRouteRuleActionPtrOutput {
	return o.ToHttpRouteRuleActionPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionOutput) ToHttpRouteRuleActionPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleAction) *HttpRouteRuleAction {
		return &v
	}).(HttpRouteRuleActionPtrOutput)
}

// The specification for allowing client side cross-origin requests.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) CorsPolicy() HttpRouteRuleActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *HttpRouteRuleActionCorsPolicy { return v.CorsPolicy }).(HttpRouteRuleActionCorsPolicyPtrOutput)
}

// The destination to which traffic should be forwarded.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) Destinations() HttpRouteRuleActionDestinationArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) []HttpRouteRuleActionDestination { return v.Destinations }).(HttpRouteRuleActionDestinationArrayOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) FaultInjectionPolicy() HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *HttpRouteRuleActionFaultInjectionPolicy { return v.FaultInjectionPolicy }).(HttpRouteRuleActionFaultInjectionPolicyPtrOutput)
}

// If set, the request is directed as configured by this field.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) Redirect() HttpRouteRuleActionRedirectPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *HttpRouteRuleActionRedirect { return v.Redirect }).(HttpRouteRuleActionRedirectPtrOutput)
}

// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) RequestHeaderModifier() HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *HttpRouteRuleActionRequestHeaderModifier { return v.RequestHeaderModifier }).(HttpRouteRuleActionRequestHeaderModifierPtrOutput)
}

// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) RequestMirrorPolicy() HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *HttpRouteRuleActionRequestMirrorPolicy { return v.RequestMirrorPolicy }).(HttpRouteRuleActionRequestMirrorPolicyPtrOutput)
}

// The specification for modifying the headers of a response prior to sending the response back to the client.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) ResponseHeaderModifier() HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *HttpRouteRuleActionResponseHeaderModifier {
		return v.ResponseHeaderModifier
	}).(HttpRouteRuleActionResponseHeaderModifierPtrOutput)
}

// Specifies the retry policy associated with this route.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) RetryPolicy() HttpRouteRuleActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *HttpRouteRuleActionRetryPolicy { return v.RetryPolicy }).(HttpRouteRuleActionRetryPolicyPtrOutput)
}

// Specifies the timeout for selected route.
func (o HttpRouteRuleActionOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// The specification for rewrite URL before forwarding requests to the destination.
// Structure is documented below.
func (o HttpRouteRuleActionOutput) UrlRewrite() HttpRouteRuleActionUrlRewritePtrOutput {
	return o.ApplyT(func(v HttpRouteRuleAction) *HttpRouteRuleActionUrlRewrite { return v.UrlRewrite }).(HttpRouteRuleActionUrlRewritePtrOutput)
}

type HttpRouteRuleActionPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleAction)(nil)).Elem()
}

func (o HttpRouteRuleActionPtrOutput) ToHttpRouteRuleActionPtrOutput() HttpRouteRuleActionPtrOutput {
	return o
}

func (o HttpRouteRuleActionPtrOutput) ToHttpRouteRuleActionPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionPtrOutput {
	return o
}

func (o HttpRouteRuleActionPtrOutput) Elem() HttpRouteRuleActionOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) HttpRouteRuleAction {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleAction
		return ret
	}).(HttpRouteRuleActionOutput)
}

// The specification for allowing client side cross-origin requests.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) CorsPolicy() HttpRouteRuleActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *HttpRouteRuleActionCorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(HttpRouteRuleActionCorsPolicyPtrOutput)
}

// The destination to which traffic should be forwarded.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) Destinations() HttpRouteRuleActionDestinationArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) []HttpRouteRuleActionDestination {
		if v == nil {
			return nil
		}
		return v.Destinations
	}).(HttpRouteRuleActionDestinationArrayOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) FaultInjectionPolicy() HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *HttpRouteRuleActionFaultInjectionPolicy {
		if v == nil {
			return nil
		}
		return v.FaultInjectionPolicy
	}).(HttpRouteRuleActionFaultInjectionPolicyPtrOutput)
}

// If set, the request is directed as configured by this field.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) Redirect() HttpRouteRuleActionRedirectPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *HttpRouteRuleActionRedirect {
		if v == nil {
			return nil
		}
		return v.Redirect
	}).(HttpRouteRuleActionRedirectPtrOutput)
}

// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) RequestHeaderModifier() HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *HttpRouteRuleActionRequestHeaderModifier {
		if v == nil {
			return nil
		}
		return v.RequestHeaderModifier
	}).(HttpRouteRuleActionRequestHeaderModifierPtrOutput)
}

// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) RequestMirrorPolicy() HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *HttpRouteRuleActionRequestMirrorPolicy {
		if v == nil {
			return nil
		}
		return v.RequestMirrorPolicy
	}).(HttpRouteRuleActionRequestMirrorPolicyPtrOutput)
}

// The specification for modifying the headers of a response prior to sending the response back to the client.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) ResponseHeaderModifier() HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *HttpRouteRuleActionResponseHeaderModifier {
		if v == nil {
			return nil
		}
		return v.ResponseHeaderModifier
	}).(HttpRouteRuleActionResponseHeaderModifierPtrOutput)
}

// Specifies the retry policy associated with this route.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) RetryPolicy() HttpRouteRuleActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *HttpRouteRuleActionRetryPolicy {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(HttpRouteRuleActionRetryPolicyPtrOutput)
}

// Specifies the timeout for selected route.
func (o HttpRouteRuleActionPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// The specification for rewrite URL before forwarding requests to the destination.
// Structure is documented below.
func (o HttpRouteRuleActionPtrOutput) UrlRewrite() HttpRouteRuleActionUrlRewritePtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleAction) *HttpRouteRuleActionUrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(HttpRouteRuleActionUrlRewritePtrOutput)
}

type HttpRouteRuleActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regular expression patterns that match allowed origins.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the content for Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long result of a preflight request can be cached in seconds.
	MaxAge *string `pulumi:"maxAge"`
}

// HttpRouteRuleActionCorsPolicyInput is an input type that accepts HttpRouteRuleActionCorsPolicyArgs and HttpRouteRuleActionCorsPolicyOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionCorsPolicyInput` via:
//
//	HttpRouteRuleActionCorsPolicyArgs{...}
type HttpRouteRuleActionCorsPolicyInput interface {
	pulumi.Input

	ToHttpRouteRuleActionCorsPolicyOutput() HttpRouteRuleActionCorsPolicyOutput
	ToHttpRouteRuleActionCorsPolicyOutputWithContext(context.Context) HttpRouteRuleActionCorsPolicyOutput
}

type HttpRouteRuleActionCorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for Access-Control-Allow-Headers header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for Access-Control-Allow-Methods header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the regular expression patterns that match allowed origins.
	AllowOriginRegexes pulumi.StringArrayInput `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Specifies the content for Access-Control-Expose-Headers header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long result of a preflight request can be cached in seconds.
	MaxAge pulumi.StringPtrInput `pulumi:"maxAge"`
}

func (HttpRouteRuleActionCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionCorsPolicy)(nil)).Elem()
}

func (i HttpRouteRuleActionCorsPolicyArgs) ToHttpRouteRuleActionCorsPolicyOutput() HttpRouteRuleActionCorsPolicyOutput {
	return i.ToHttpRouteRuleActionCorsPolicyOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionCorsPolicyArgs) ToHttpRouteRuleActionCorsPolicyOutputWithContext(ctx context.Context) HttpRouteRuleActionCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionCorsPolicyOutput)
}

func (i HttpRouteRuleActionCorsPolicyArgs) ToHttpRouteRuleActionCorsPolicyPtrOutput() HttpRouteRuleActionCorsPolicyPtrOutput {
	return i.ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionCorsPolicyArgs) ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionCorsPolicyOutput).ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionCorsPolicyPtrInput is an input type that accepts HttpRouteRuleActionCorsPolicyArgs, HttpRouteRuleActionCorsPolicyPtr and HttpRouteRuleActionCorsPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionCorsPolicyPtrInput` via:
//
//	        HttpRouteRuleActionCorsPolicyArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionCorsPolicyPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionCorsPolicyPtrOutput() HttpRouteRuleActionCorsPolicyPtrOutput
	ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(context.Context) HttpRouteRuleActionCorsPolicyPtrOutput
}

type httpRouteRuleActionCorsPolicyPtrType HttpRouteRuleActionCorsPolicyArgs

func HttpRouteRuleActionCorsPolicyPtr(v *HttpRouteRuleActionCorsPolicyArgs) HttpRouteRuleActionCorsPolicyPtrInput {
	return (*httpRouteRuleActionCorsPolicyPtrType)(v)
}

func (*httpRouteRuleActionCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionCorsPolicy)(nil)).Elem()
}

func (i *httpRouteRuleActionCorsPolicyPtrType) ToHttpRouteRuleActionCorsPolicyPtrOutput() HttpRouteRuleActionCorsPolicyPtrOutput {
	return i.ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionCorsPolicyPtrType) ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionCorsPolicyPtrOutput)
}

type HttpRouteRuleActionCorsPolicyOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionCorsPolicy)(nil)).Elem()
}

func (o HttpRouteRuleActionCorsPolicyOutput) ToHttpRouteRuleActionCorsPolicyOutput() HttpRouteRuleActionCorsPolicyOutput {
	return o
}

func (o HttpRouteRuleActionCorsPolicyOutput) ToHttpRouteRuleActionCorsPolicyOutputWithContext(ctx context.Context) HttpRouteRuleActionCorsPolicyOutput {
	return o
}

func (o HttpRouteRuleActionCorsPolicyOutput) ToHttpRouteRuleActionCorsPolicyPtrOutput() HttpRouteRuleActionCorsPolicyPtrOutput {
	return o.ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionCorsPolicyOutput) ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionCorsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionCorsPolicy) *HttpRouteRuleActionCorsPolicy {
		return &v
	}).(HttpRouteRuleActionCorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
func (o HttpRouteRuleActionCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionCorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for Access-Control-Allow-Headers header.
func (o HttpRouteRuleActionCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleActionCorsPolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for Access-Control-Allow-Methods header.
func (o HttpRouteRuleActionCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleActionCorsPolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regular expression patterns that match allowed origins.
func (o HttpRouteRuleActionCorsPolicyOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleActionCorsPolicy) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests.
func (o HttpRouteRuleActionCorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleActionCorsPolicy) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o HttpRouteRuleActionCorsPolicyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionCorsPolicy) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Specifies the content for Access-Control-Expose-Headers header.
func (o HttpRouteRuleActionCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleActionCorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long result of a preflight request can be cached in seconds.
func (o HttpRouteRuleActionCorsPolicyOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionCorsPolicy) *string { return v.MaxAge }).(pulumi.StringPtrOutput)
}

type HttpRouteRuleActionCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionCorsPolicy)(nil)).Elem()
}

func (o HttpRouteRuleActionCorsPolicyPtrOutput) ToHttpRouteRuleActionCorsPolicyPtrOutput() HttpRouteRuleActionCorsPolicyPtrOutput {
	return o
}

func (o HttpRouteRuleActionCorsPolicyPtrOutput) ToHttpRouteRuleActionCorsPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionCorsPolicyPtrOutput {
	return o
}

func (o HttpRouteRuleActionCorsPolicyPtrOutput) Elem() HttpRouteRuleActionCorsPolicyOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) HttpRouteRuleActionCorsPolicy {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionCorsPolicy
		return ret
	}).(HttpRouteRuleActionCorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
func (o HttpRouteRuleActionCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for Access-Control-Allow-Headers header.
func (o HttpRouteRuleActionCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for Access-Control-Allow-Methods header.
func (o HttpRouteRuleActionCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the regular expression patterns that match allowed origins.
func (o HttpRouteRuleActionCorsPolicyPtrOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOriginRegexes
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests.
func (o HttpRouteRuleActionCorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o HttpRouteRuleActionCorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for Access-Control-Expose-Headers header.
func (o HttpRouteRuleActionCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long result of a preflight request can be cached in seconds.
func (o HttpRouteRuleActionCorsPolicyPtrOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionCorsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.StringPtrOutput)
}

type HttpRouteRuleActionDestination struct {
	// The URL of a BackendService to route traffic to.
	ServiceName *string `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
	// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
	// If weights are specified for any one service name, they need to be specified for all of them.
	// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight *int `pulumi:"weight"`
}

// HttpRouteRuleActionDestinationInput is an input type that accepts HttpRouteRuleActionDestinationArgs and HttpRouteRuleActionDestinationOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionDestinationInput` via:
//
//	HttpRouteRuleActionDestinationArgs{...}
type HttpRouteRuleActionDestinationInput interface {
	pulumi.Input

	ToHttpRouteRuleActionDestinationOutput() HttpRouteRuleActionDestinationOutput
	ToHttpRouteRuleActionDestinationOutputWithContext(context.Context) HttpRouteRuleActionDestinationOutput
}

type HttpRouteRuleActionDestinationArgs struct {
	// The URL of a BackendService to route traffic to.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
	// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
	// If weights are specified for any one service name, they need to be specified for all of them.
	// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (HttpRouteRuleActionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionDestination)(nil)).Elem()
}

func (i HttpRouteRuleActionDestinationArgs) ToHttpRouteRuleActionDestinationOutput() HttpRouteRuleActionDestinationOutput {
	return i.ToHttpRouteRuleActionDestinationOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionDestinationArgs) ToHttpRouteRuleActionDestinationOutputWithContext(ctx context.Context) HttpRouteRuleActionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionDestinationOutput)
}

// HttpRouteRuleActionDestinationArrayInput is an input type that accepts HttpRouteRuleActionDestinationArray and HttpRouteRuleActionDestinationArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionDestinationArrayInput` via:
//
//	HttpRouteRuleActionDestinationArray{ HttpRouteRuleActionDestinationArgs{...} }
type HttpRouteRuleActionDestinationArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleActionDestinationArrayOutput() HttpRouteRuleActionDestinationArrayOutput
	ToHttpRouteRuleActionDestinationArrayOutputWithContext(context.Context) HttpRouteRuleActionDestinationArrayOutput
}

type HttpRouteRuleActionDestinationArray []HttpRouteRuleActionDestinationInput

func (HttpRouteRuleActionDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleActionDestination)(nil)).Elem()
}

func (i HttpRouteRuleActionDestinationArray) ToHttpRouteRuleActionDestinationArrayOutput() HttpRouteRuleActionDestinationArrayOutput {
	return i.ToHttpRouteRuleActionDestinationArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionDestinationArray) ToHttpRouteRuleActionDestinationArrayOutputWithContext(ctx context.Context) HttpRouteRuleActionDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionDestinationArrayOutput)
}

type HttpRouteRuleActionDestinationOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionDestination)(nil)).Elem()
}

func (o HttpRouteRuleActionDestinationOutput) ToHttpRouteRuleActionDestinationOutput() HttpRouteRuleActionDestinationOutput {
	return o
}

func (o HttpRouteRuleActionDestinationOutput) ToHttpRouteRuleActionDestinationOutputWithContext(ctx context.Context) HttpRouteRuleActionDestinationOutput {
	return o
}

// The URL of a BackendService to route traffic to.
func (o HttpRouteRuleActionDestinationOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionDestination) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
// If weights are specified for any one service name, they need to be specified for all of them.
// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o HttpRouteRuleActionDestinationOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionDestination) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type HttpRouteRuleActionDestinationArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleActionDestination)(nil)).Elem()
}

func (o HttpRouteRuleActionDestinationArrayOutput) ToHttpRouteRuleActionDestinationArrayOutput() HttpRouteRuleActionDestinationArrayOutput {
	return o
}

func (o HttpRouteRuleActionDestinationArrayOutput) ToHttpRouteRuleActionDestinationArrayOutputWithContext(ctx context.Context) HttpRouteRuleActionDestinationArrayOutput {
	return o
}

func (o HttpRouteRuleActionDestinationArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleActionDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRuleActionDestination {
		return vs[0].([]HttpRouteRuleActionDestination)[vs[1].(int)]
	}).(HttpRouteRuleActionDestinationOutput)
}

type HttpRouteRuleActionFaultInjectionPolicy struct {
	// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
	// Structure is documented below.
	Abort *HttpRouteRuleActionFaultInjectionPolicyAbort `pulumi:"abort"`
	// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
	// Structure is documented below.
	Delay *HttpRouteRuleActionFaultInjectionPolicyDelay `pulumi:"delay"`
}

// HttpRouteRuleActionFaultInjectionPolicyInput is an input type that accepts HttpRouteRuleActionFaultInjectionPolicyArgs and HttpRouteRuleActionFaultInjectionPolicyOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionFaultInjectionPolicyInput` via:
//
//	HttpRouteRuleActionFaultInjectionPolicyArgs{...}
type HttpRouteRuleActionFaultInjectionPolicyInput interface {
	pulumi.Input

	ToHttpRouteRuleActionFaultInjectionPolicyOutput() HttpRouteRuleActionFaultInjectionPolicyOutput
	ToHttpRouteRuleActionFaultInjectionPolicyOutputWithContext(context.Context) HttpRouteRuleActionFaultInjectionPolicyOutput
}

type HttpRouteRuleActionFaultInjectionPolicyArgs struct {
	// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
	// Structure is documented below.
	Abort HttpRouteRuleActionFaultInjectionPolicyAbortPtrInput `pulumi:"abort"`
	// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
	// Structure is documented below.
	Delay HttpRouteRuleActionFaultInjectionPolicyDelayPtrInput `pulumi:"delay"`
}

func (HttpRouteRuleActionFaultInjectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicy)(nil)).Elem()
}

func (i HttpRouteRuleActionFaultInjectionPolicyArgs) ToHttpRouteRuleActionFaultInjectionPolicyOutput() HttpRouteRuleActionFaultInjectionPolicyOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionFaultInjectionPolicyArgs) ToHttpRouteRuleActionFaultInjectionPolicyOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyOutput)
}

func (i HttpRouteRuleActionFaultInjectionPolicyArgs) ToHttpRouteRuleActionFaultInjectionPolicyPtrOutput() HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionFaultInjectionPolicyArgs) ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyOutput).ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionFaultInjectionPolicyPtrInput is an input type that accepts HttpRouteRuleActionFaultInjectionPolicyArgs, HttpRouteRuleActionFaultInjectionPolicyPtr and HttpRouteRuleActionFaultInjectionPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionFaultInjectionPolicyPtrInput` via:
//
//	        HttpRouteRuleActionFaultInjectionPolicyArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionFaultInjectionPolicyPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionFaultInjectionPolicyPtrOutput() HttpRouteRuleActionFaultInjectionPolicyPtrOutput
	ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(context.Context) HttpRouteRuleActionFaultInjectionPolicyPtrOutput
}

type httpRouteRuleActionFaultInjectionPolicyPtrType HttpRouteRuleActionFaultInjectionPolicyArgs

func HttpRouteRuleActionFaultInjectionPolicyPtr(v *HttpRouteRuleActionFaultInjectionPolicyArgs) HttpRouteRuleActionFaultInjectionPolicyPtrInput {
	return (*httpRouteRuleActionFaultInjectionPolicyPtrType)(v)
}

func (*httpRouteRuleActionFaultInjectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionFaultInjectionPolicy)(nil)).Elem()
}

func (i *httpRouteRuleActionFaultInjectionPolicyPtrType) ToHttpRouteRuleActionFaultInjectionPolicyPtrOutput() HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionFaultInjectionPolicyPtrType) ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyPtrOutput)
}

type HttpRouteRuleActionFaultInjectionPolicyOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionFaultInjectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicy)(nil)).Elem()
}

func (o HttpRouteRuleActionFaultInjectionPolicyOutput) ToHttpRouteRuleActionFaultInjectionPolicyOutput() HttpRouteRuleActionFaultInjectionPolicyOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyOutput) ToHttpRouteRuleActionFaultInjectionPolicyOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyOutput) ToHttpRouteRuleActionFaultInjectionPolicyPtrOutput() HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return o.ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionFaultInjectionPolicyOutput) ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionFaultInjectionPolicy) *HttpRouteRuleActionFaultInjectionPolicy {
		return &v
	}).(HttpRouteRuleActionFaultInjectionPolicyPtrOutput)
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
// Structure is documented below.
func (o HttpRouteRuleActionFaultInjectionPolicyOutput) Abort() HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionFaultInjectionPolicy) *HttpRouteRuleActionFaultInjectionPolicyAbort {
		return v.Abort
	}).(HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput)
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
// Structure is documented below.
func (o HttpRouteRuleActionFaultInjectionPolicyOutput) Delay() HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionFaultInjectionPolicy) *HttpRouteRuleActionFaultInjectionPolicyDelay {
		return v.Delay
	}).(HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput)
}

type HttpRouteRuleActionFaultInjectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionFaultInjectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionFaultInjectionPolicy)(nil)).Elem()
}

func (o HttpRouteRuleActionFaultInjectionPolicyPtrOutput) ToHttpRouteRuleActionFaultInjectionPolicyPtrOutput() HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyPtrOutput) ToHttpRouteRuleActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyPtrOutput) Elem() HttpRouteRuleActionFaultInjectionPolicyOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicy) HttpRouteRuleActionFaultInjectionPolicy {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionFaultInjectionPolicy
		return ret
	}).(HttpRouteRuleActionFaultInjectionPolicyOutput)
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
// Structure is documented below.
func (o HttpRouteRuleActionFaultInjectionPolicyPtrOutput) Abort() HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicy) *HttpRouteRuleActionFaultInjectionPolicyAbort {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput)
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
// Structure is documented below.
func (o HttpRouteRuleActionFaultInjectionPolicyPtrOutput) Delay() HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicy) *HttpRouteRuleActionFaultInjectionPolicyDelay {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput)
}

type HttpRouteRuleActionFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request.
	HttpStatus *int `pulumi:"httpStatus"`
	// The percentage of traffic which will be aborted.
	Percentage *int `pulumi:"percentage"`
}

// HttpRouteRuleActionFaultInjectionPolicyAbortInput is an input type that accepts HttpRouteRuleActionFaultInjectionPolicyAbortArgs and HttpRouteRuleActionFaultInjectionPolicyAbortOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionFaultInjectionPolicyAbortInput` via:
//
//	HttpRouteRuleActionFaultInjectionPolicyAbortArgs{...}
type HttpRouteRuleActionFaultInjectionPolicyAbortInput interface {
	pulumi.Input

	ToHttpRouteRuleActionFaultInjectionPolicyAbortOutput() HttpRouteRuleActionFaultInjectionPolicyAbortOutput
	ToHttpRouteRuleActionFaultInjectionPolicyAbortOutputWithContext(context.Context) HttpRouteRuleActionFaultInjectionPolicyAbortOutput
}

type HttpRouteRuleActionFaultInjectionPolicyAbortArgs struct {
	// The HTTP status code used to abort the request.
	HttpStatus pulumi.IntPtrInput `pulumi:"httpStatus"`
	// The percentage of traffic which will be aborted.
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (HttpRouteRuleActionFaultInjectionPolicyAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i HttpRouteRuleActionFaultInjectionPolicyAbortArgs) ToHttpRouteRuleActionFaultInjectionPolicyAbortOutput() HttpRouteRuleActionFaultInjectionPolicyAbortOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyAbortOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionFaultInjectionPolicyAbortArgs) ToHttpRouteRuleActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyAbortOutput)
}

func (i HttpRouteRuleActionFaultInjectionPolicyAbortArgs) ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput() HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionFaultInjectionPolicyAbortArgs) ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyAbortOutput).ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionFaultInjectionPolicyAbortPtrInput is an input type that accepts HttpRouteRuleActionFaultInjectionPolicyAbortArgs, HttpRouteRuleActionFaultInjectionPolicyAbortPtr and HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionFaultInjectionPolicyAbortPtrInput` via:
//
//	        HttpRouteRuleActionFaultInjectionPolicyAbortArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionFaultInjectionPolicyAbortPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput() HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput
	ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Context) HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput
}

type httpRouteRuleActionFaultInjectionPolicyAbortPtrType HttpRouteRuleActionFaultInjectionPolicyAbortArgs

func HttpRouteRuleActionFaultInjectionPolicyAbortPtr(v *HttpRouteRuleActionFaultInjectionPolicyAbortArgs) HttpRouteRuleActionFaultInjectionPolicyAbortPtrInput {
	return (*httpRouteRuleActionFaultInjectionPolicyAbortPtrType)(v)
}

func (*httpRouteRuleActionFaultInjectionPolicyAbortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i *httpRouteRuleActionFaultInjectionPolicyAbortPtrType) ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput() HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionFaultInjectionPolicyAbortPtrType) ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput)
}

type HttpRouteRuleActionFaultInjectionPolicyAbortOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionFaultInjectionPolicyAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o HttpRouteRuleActionFaultInjectionPolicyAbortOutput) ToHttpRouteRuleActionFaultInjectionPolicyAbortOutput() HttpRouteRuleActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyAbortOutput) ToHttpRouteRuleActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyAbortOutput) ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput() HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return o.ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionFaultInjectionPolicyAbortOutput) ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionFaultInjectionPolicyAbort) *HttpRouteRuleActionFaultInjectionPolicyAbort {
		return &v
	}).(HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput)
}

// The HTTP status code used to abort the request.
func (o HttpRouteRuleActionFaultInjectionPolicyAbortOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionFaultInjectionPolicyAbort) *int { return v.HttpStatus }).(pulumi.IntPtrOutput)
}

// The percentage of traffic which will be aborted.
func (o HttpRouteRuleActionFaultInjectionPolicyAbortOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionFaultInjectionPolicyAbort) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput) ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput() HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput) ToHttpRouteRuleActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput) Elem() HttpRouteRuleActionFaultInjectionPolicyAbortOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicyAbort) HttpRouteRuleActionFaultInjectionPolicyAbort {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionFaultInjectionPolicyAbort
		return ret
	}).(HttpRouteRuleActionFaultInjectionPolicyAbortOutput)
}

// The HTTP status code used to abort the request.
func (o HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic which will be aborted.
func (o HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.IntPtrOutput)
}

type HttpRouteRuleActionFaultInjectionPolicyDelay struct {
	// Specify a fixed delay before forwarding the request.
	FixedDelay *string `pulumi:"fixedDelay"`
	// The percentage of traffic on which delay will be injected.
	Percentage *int `pulumi:"percentage"`
}

// HttpRouteRuleActionFaultInjectionPolicyDelayInput is an input type that accepts HttpRouteRuleActionFaultInjectionPolicyDelayArgs and HttpRouteRuleActionFaultInjectionPolicyDelayOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionFaultInjectionPolicyDelayInput` via:
//
//	HttpRouteRuleActionFaultInjectionPolicyDelayArgs{...}
type HttpRouteRuleActionFaultInjectionPolicyDelayInput interface {
	pulumi.Input

	ToHttpRouteRuleActionFaultInjectionPolicyDelayOutput() HttpRouteRuleActionFaultInjectionPolicyDelayOutput
	ToHttpRouteRuleActionFaultInjectionPolicyDelayOutputWithContext(context.Context) HttpRouteRuleActionFaultInjectionPolicyDelayOutput
}

type HttpRouteRuleActionFaultInjectionPolicyDelayArgs struct {
	// Specify a fixed delay before forwarding the request.
	FixedDelay pulumi.StringPtrInput `pulumi:"fixedDelay"`
	// The percentage of traffic on which delay will be injected.
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (HttpRouteRuleActionFaultInjectionPolicyDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i HttpRouteRuleActionFaultInjectionPolicyDelayArgs) ToHttpRouteRuleActionFaultInjectionPolicyDelayOutput() HttpRouteRuleActionFaultInjectionPolicyDelayOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyDelayOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionFaultInjectionPolicyDelayArgs) ToHttpRouteRuleActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyDelayOutput)
}

func (i HttpRouteRuleActionFaultInjectionPolicyDelayArgs) ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput() HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionFaultInjectionPolicyDelayArgs) ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyDelayOutput).ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionFaultInjectionPolicyDelayPtrInput is an input type that accepts HttpRouteRuleActionFaultInjectionPolicyDelayArgs, HttpRouteRuleActionFaultInjectionPolicyDelayPtr and HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionFaultInjectionPolicyDelayPtrInput` via:
//
//	        HttpRouteRuleActionFaultInjectionPolicyDelayArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionFaultInjectionPolicyDelayPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput() HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput
	ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Context) HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput
}

type httpRouteRuleActionFaultInjectionPolicyDelayPtrType HttpRouteRuleActionFaultInjectionPolicyDelayArgs

func HttpRouteRuleActionFaultInjectionPolicyDelayPtr(v *HttpRouteRuleActionFaultInjectionPolicyDelayArgs) HttpRouteRuleActionFaultInjectionPolicyDelayPtrInput {
	return (*httpRouteRuleActionFaultInjectionPolicyDelayPtrType)(v)
}

func (*httpRouteRuleActionFaultInjectionPolicyDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i *httpRouteRuleActionFaultInjectionPolicyDelayPtrType) ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput() HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionFaultInjectionPolicyDelayPtrType) ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput)
}

type HttpRouteRuleActionFaultInjectionPolicyDelayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionFaultInjectionPolicyDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o HttpRouteRuleActionFaultInjectionPolicyDelayOutput) ToHttpRouteRuleActionFaultInjectionPolicyDelayOutput() HttpRouteRuleActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyDelayOutput) ToHttpRouteRuleActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyDelayOutput) ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput() HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return o.ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionFaultInjectionPolicyDelayOutput) ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionFaultInjectionPolicyDelay) *HttpRouteRuleActionFaultInjectionPolicyDelay {
		return &v
	}).(HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput)
}

// Specify a fixed delay before forwarding the request.
func (o HttpRouteRuleActionFaultInjectionPolicyDelayOutput) FixedDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionFaultInjectionPolicyDelay) *string { return v.FixedDelay }).(pulumi.StringPtrOutput)
}

// The percentage of traffic on which delay will be injected.
func (o HttpRouteRuleActionFaultInjectionPolicyDelayOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionFaultInjectionPolicyDelay) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput) ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput() HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput) ToHttpRouteRuleActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput) Elem() HttpRouteRuleActionFaultInjectionPolicyDelayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicyDelay) HttpRouteRuleActionFaultInjectionPolicyDelay {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionFaultInjectionPolicyDelay
		return ret
	}).(HttpRouteRuleActionFaultInjectionPolicyDelayOutput)
}

// Specify a fixed delay before forwarding the request.
func (o HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput) FixedDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicyDelay) *string {
		if v == nil {
			return nil
		}
		return v.FixedDelay
	}).(pulumi.StringPtrOutput)
}

// The percentage of traffic on which delay will be injected.
func (o HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionFaultInjectionPolicyDelay) *int {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.IntPtrOutput)
}

type HttpRouteRuleActionRedirect struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect can not be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The port that will be used in the redirected request instead of the one that was supplied in the request.
	PortRedirect *int `pulumi:"portRedirect"`
	// Indicates that during redirection, the matched prefix (or path) should be swapped with this value.
	PrefixRewrite *string `pulumi:"prefixRewrite"`
	// The HTTP Status code to use for the redirect.
	ResponseCode *string `pulumi:"responseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request.
	StripQuery *bool `pulumi:"stripQuery"`
}

// HttpRouteRuleActionRedirectInput is an input type that accepts HttpRouteRuleActionRedirectArgs and HttpRouteRuleActionRedirectOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRedirectInput` via:
//
//	HttpRouteRuleActionRedirectArgs{...}
type HttpRouteRuleActionRedirectInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRedirectOutput() HttpRouteRuleActionRedirectOutput
	ToHttpRouteRuleActionRedirectOutputWithContext(context.Context) HttpRouteRuleActionRedirectOutput
}

type HttpRouteRuleActionRedirectArgs struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect can not be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The port that will be used in the redirected request instead of the one that was supplied in the request.
	PortRedirect pulumi.IntPtrInput `pulumi:"portRedirect"`
	// Indicates that during redirection, the matched prefix (or path) should be swapped with this value.
	PrefixRewrite pulumi.StringPtrInput `pulumi:"prefixRewrite"`
	// The HTTP Status code to use for the redirect.
	ResponseCode pulumi.StringPtrInput `pulumi:"responseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request.
	StripQuery pulumi.BoolPtrInput `pulumi:"stripQuery"`
}

func (HttpRouteRuleActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRedirect)(nil)).Elem()
}

func (i HttpRouteRuleActionRedirectArgs) ToHttpRouteRuleActionRedirectOutput() HttpRouteRuleActionRedirectOutput {
	return i.ToHttpRouteRuleActionRedirectOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRedirectArgs) ToHttpRouteRuleActionRedirectOutputWithContext(ctx context.Context) HttpRouteRuleActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRedirectOutput)
}

func (i HttpRouteRuleActionRedirectArgs) ToHttpRouteRuleActionRedirectPtrOutput() HttpRouteRuleActionRedirectPtrOutput {
	return i.ToHttpRouteRuleActionRedirectPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRedirectArgs) ToHttpRouteRuleActionRedirectPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRedirectOutput).ToHttpRouteRuleActionRedirectPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionRedirectPtrInput is an input type that accepts HttpRouteRuleActionRedirectArgs, HttpRouteRuleActionRedirectPtr and HttpRouteRuleActionRedirectPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRedirectPtrInput` via:
//
//	        HttpRouteRuleActionRedirectArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionRedirectPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRedirectPtrOutput() HttpRouteRuleActionRedirectPtrOutput
	ToHttpRouteRuleActionRedirectPtrOutputWithContext(context.Context) HttpRouteRuleActionRedirectPtrOutput
}

type httpRouteRuleActionRedirectPtrType HttpRouteRuleActionRedirectArgs

func HttpRouteRuleActionRedirectPtr(v *HttpRouteRuleActionRedirectArgs) HttpRouteRuleActionRedirectPtrInput {
	return (*httpRouteRuleActionRedirectPtrType)(v)
}

func (*httpRouteRuleActionRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRedirect)(nil)).Elem()
}

func (i *httpRouteRuleActionRedirectPtrType) ToHttpRouteRuleActionRedirectPtrOutput() HttpRouteRuleActionRedirectPtrOutput {
	return i.ToHttpRouteRuleActionRedirectPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionRedirectPtrType) ToHttpRouteRuleActionRedirectPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRedirectPtrOutput)
}

type HttpRouteRuleActionRedirectOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRedirect)(nil)).Elem()
}

func (o HttpRouteRuleActionRedirectOutput) ToHttpRouteRuleActionRedirectOutput() HttpRouteRuleActionRedirectOutput {
	return o
}

func (o HttpRouteRuleActionRedirectOutput) ToHttpRouteRuleActionRedirectOutputWithContext(ctx context.Context) HttpRouteRuleActionRedirectOutput {
	return o
}

func (o HttpRouteRuleActionRedirectOutput) ToHttpRouteRuleActionRedirectPtrOutput() HttpRouteRuleActionRedirectPtrOutput {
	return o.ToHttpRouteRuleActionRedirectPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionRedirectOutput) ToHttpRouteRuleActionRedirectPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionRedirect) *HttpRouteRuleActionRedirect {
		return &v
	}).(HttpRouteRuleActionRedirectPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o HttpRouteRuleActionRedirectOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRedirect) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https.
func (o HttpRouteRuleActionRedirectOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRedirect) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect can not be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o HttpRouteRuleActionRedirectOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRedirect) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The port that will be used in the redirected request instead of the one that was supplied in the request.
func (o HttpRouteRuleActionRedirectOutput) PortRedirect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRedirect) *int { return v.PortRedirect }).(pulumi.IntPtrOutput)
}

// Indicates that during redirection, the matched prefix (or path) should be swapped with this value.
func (o HttpRouteRuleActionRedirectOutput) PrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRedirect) *string { return v.PrefixRewrite }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for the redirect.
func (o HttpRouteRuleActionRedirectOutput) ResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRedirect) *string { return v.ResponseCode }).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request.
func (o HttpRouteRuleActionRedirectOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRedirect) *bool { return v.StripQuery }).(pulumi.BoolPtrOutput)
}

type HttpRouteRuleActionRedirectPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRedirect)(nil)).Elem()
}

func (o HttpRouteRuleActionRedirectPtrOutput) ToHttpRouteRuleActionRedirectPtrOutput() HttpRouteRuleActionRedirectPtrOutput {
	return o
}

func (o HttpRouteRuleActionRedirectPtrOutput) ToHttpRouteRuleActionRedirectPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRedirectPtrOutput {
	return o
}

func (o HttpRouteRuleActionRedirectPtrOutput) Elem() HttpRouteRuleActionRedirectOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRedirect) HttpRouteRuleActionRedirect {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionRedirect
		return ret
	}).(HttpRouteRuleActionRedirectOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o HttpRouteRuleActionRedirectPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRedirect) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https.
func (o HttpRouteRuleActionRedirectPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect can not be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o HttpRouteRuleActionRedirectPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The port that will be used in the redirected request instead of the one that was supplied in the request.
func (o HttpRouteRuleActionRedirectPtrOutput) PortRedirect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRedirect) *int {
		if v == nil {
			return nil
		}
		return v.PortRedirect
	}).(pulumi.IntPtrOutput)
}

// Indicates that during redirection, the matched prefix (or path) should be swapped with this value.
func (o HttpRouteRuleActionRedirectPtrOutput) PrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for the redirect.
func (o HttpRouteRuleActionRedirectPtrOutput) ResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRedirect) *string {
		if v == nil {
			return nil
		}
		return v.ResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request.
func (o HttpRouteRuleActionRedirectPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

type HttpRouteRuleActionRequestHeaderModifier struct {
	// Add the headers with given map where key is the name of the header, value is the value of the header.
	Add map[string]string `pulumi:"add"`
	// Remove headers (matching by header names) specified in the list.
	Removes []string `pulumi:"removes"`
	// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
	Set map[string]string `pulumi:"set"`
}

// HttpRouteRuleActionRequestHeaderModifierInput is an input type that accepts HttpRouteRuleActionRequestHeaderModifierArgs and HttpRouteRuleActionRequestHeaderModifierOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRequestHeaderModifierInput` via:
//
//	HttpRouteRuleActionRequestHeaderModifierArgs{...}
type HttpRouteRuleActionRequestHeaderModifierInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRequestHeaderModifierOutput() HttpRouteRuleActionRequestHeaderModifierOutput
	ToHttpRouteRuleActionRequestHeaderModifierOutputWithContext(context.Context) HttpRouteRuleActionRequestHeaderModifierOutput
}

type HttpRouteRuleActionRequestHeaderModifierArgs struct {
	// Add the headers with given map where key is the name of the header, value is the value of the header.
	Add pulumi.StringMapInput `pulumi:"add"`
	// Remove headers (matching by header names) specified in the list.
	Removes pulumi.StringArrayInput `pulumi:"removes"`
	// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
	Set pulumi.StringMapInput `pulumi:"set"`
}

func (HttpRouteRuleActionRequestHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRequestHeaderModifier)(nil)).Elem()
}

func (i HttpRouteRuleActionRequestHeaderModifierArgs) ToHttpRouteRuleActionRequestHeaderModifierOutput() HttpRouteRuleActionRequestHeaderModifierOutput {
	return i.ToHttpRouteRuleActionRequestHeaderModifierOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRequestHeaderModifierArgs) ToHttpRouteRuleActionRequestHeaderModifierOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestHeaderModifierOutput)
}

func (i HttpRouteRuleActionRequestHeaderModifierArgs) ToHttpRouteRuleActionRequestHeaderModifierPtrOutput() HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return i.ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRequestHeaderModifierArgs) ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestHeaderModifierOutput).ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionRequestHeaderModifierPtrInput is an input type that accepts HttpRouteRuleActionRequestHeaderModifierArgs, HttpRouteRuleActionRequestHeaderModifierPtr and HttpRouteRuleActionRequestHeaderModifierPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRequestHeaderModifierPtrInput` via:
//
//	        HttpRouteRuleActionRequestHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionRequestHeaderModifierPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRequestHeaderModifierPtrOutput() HttpRouteRuleActionRequestHeaderModifierPtrOutput
	ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(context.Context) HttpRouteRuleActionRequestHeaderModifierPtrOutput
}

type httpRouteRuleActionRequestHeaderModifierPtrType HttpRouteRuleActionRequestHeaderModifierArgs

func HttpRouteRuleActionRequestHeaderModifierPtr(v *HttpRouteRuleActionRequestHeaderModifierArgs) HttpRouteRuleActionRequestHeaderModifierPtrInput {
	return (*httpRouteRuleActionRequestHeaderModifierPtrType)(v)
}

func (*httpRouteRuleActionRequestHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRequestHeaderModifier)(nil)).Elem()
}

func (i *httpRouteRuleActionRequestHeaderModifierPtrType) ToHttpRouteRuleActionRequestHeaderModifierPtrOutput() HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return i.ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionRequestHeaderModifierPtrType) ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestHeaderModifierPtrOutput)
}

type HttpRouteRuleActionRequestHeaderModifierOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRequestHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRequestHeaderModifier)(nil)).Elem()
}

func (o HttpRouteRuleActionRequestHeaderModifierOutput) ToHttpRouteRuleActionRequestHeaderModifierOutput() HttpRouteRuleActionRequestHeaderModifierOutput {
	return o
}

func (o HttpRouteRuleActionRequestHeaderModifierOutput) ToHttpRouteRuleActionRequestHeaderModifierOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestHeaderModifierOutput {
	return o
}

func (o HttpRouteRuleActionRequestHeaderModifierOutput) ToHttpRouteRuleActionRequestHeaderModifierPtrOutput() HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return o.ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionRequestHeaderModifierOutput) ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionRequestHeaderModifier) *HttpRouteRuleActionRequestHeaderModifier {
		return &v
	}).(HttpRouteRuleActionRequestHeaderModifierPtrOutput)
}

// Add the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteRuleActionRequestHeaderModifierOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRequestHeaderModifier) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

// Remove headers (matching by header names) specified in the list.
func (o HttpRouteRuleActionRequestHeaderModifierOutput) Removes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRequestHeaderModifier) []string { return v.Removes }).(pulumi.StringArrayOutput)
}

// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteRuleActionRequestHeaderModifierOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRequestHeaderModifier) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type HttpRouteRuleActionRequestHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRequestHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRequestHeaderModifier)(nil)).Elem()
}

func (o HttpRouteRuleActionRequestHeaderModifierPtrOutput) ToHttpRouteRuleActionRequestHeaderModifierPtrOutput() HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return o
}

func (o HttpRouteRuleActionRequestHeaderModifierPtrOutput) ToHttpRouteRuleActionRequestHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestHeaderModifierPtrOutput {
	return o
}

func (o HttpRouteRuleActionRequestHeaderModifierPtrOutput) Elem() HttpRouteRuleActionRequestHeaderModifierOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestHeaderModifier) HttpRouteRuleActionRequestHeaderModifier {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionRequestHeaderModifier
		return ret
	}).(HttpRouteRuleActionRequestHeaderModifierOutput)
}

// Add the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteRuleActionRequestHeaderModifierPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestHeaderModifier) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

// Remove headers (matching by header names) specified in the list.
func (o HttpRouteRuleActionRequestHeaderModifierPtrOutput) Removes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Removes
	}).(pulumi.StringArrayOutput)
}

// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteRuleActionRequestHeaderModifierPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestHeaderModifier) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type HttpRouteRuleActionRequestMirrorPolicy struct {
	// The destination the requests will be mirrored to.
	// Structure is documented below.
	Destination *HttpRouteRuleActionRequestMirrorPolicyDestination `pulumi:"destination"`
}

// HttpRouteRuleActionRequestMirrorPolicyInput is an input type that accepts HttpRouteRuleActionRequestMirrorPolicyArgs and HttpRouteRuleActionRequestMirrorPolicyOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRequestMirrorPolicyInput` via:
//
//	HttpRouteRuleActionRequestMirrorPolicyArgs{...}
type HttpRouteRuleActionRequestMirrorPolicyInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRequestMirrorPolicyOutput() HttpRouteRuleActionRequestMirrorPolicyOutput
	ToHttpRouteRuleActionRequestMirrorPolicyOutputWithContext(context.Context) HttpRouteRuleActionRequestMirrorPolicyOutput
}

type HttpRouteRuleActionRequestMirrorPolicyArgs struct {
	// The destination the requests will be mirrored to.
	// Structure is documented below.
	Destination HttpRouteRuleActionRequestMirrorPolicyDestinationPtrInput `pulumi:"destination"`
}

func (HttpRouteRuleActionRequestMirrorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRequestMirrorPolicy)(nil)).Elem()
}

func (i HttpRouteRuleActionRequestMirrorPolicyArgs) ToHttpRouteRuleActionRequestMirrorPolicyOutput() HttpRouteRuleActionRequestMirrorPolicyOutput {
	return i.ToHttpRouteRuleActionRequestMirrorPolicyOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRequestMirrorPolicyArgs) ToHttpRouteRuleActionRequestMirrorPolicyOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestMirrorPolicyOutput)
}

func (i HttpRouteRuleActionRequestMirrorPolicyArgs) ToHttpRouteRuleActionRequestMirrorPolicyPtrOutput() HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return i.ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRequestMirrorPolicyArgs) ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestMirrorPolicyOutput).ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionRequestMirrorPolicyPtrInput is an input type that accepts HttpRouteRuleActionRequestMirrorPolicyArgs, HttpRouteRuleActionRequestMirrorPolicyPtr and HttpRouteRuleActionRequestMirrorPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRequestMirrorPolicyPtrInput` via:
//
//	        HttpRouteRuleActionRequestMirrorPolicyArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionRequestMirrorPolicyPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRequestMirrorPolicyPtrOutput() HttpRouteRuleActionRequestMirrorPolicyPtrOutput
	ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(context.Context) HttpRouteRuleActionRequestMirrorPolicyPtrOutput
}

type httpRouteRuleActionRequestMirrorPolicyPtrType HttpRouteRuleActionRequestMirrorPolicyArgs

func HttpRouteRuleActionRequestMirrorPolicyPtr(v *HttpRouteRuleActionRequestMirrorPolicyArgs) HttpRouteRuleActionRequestMirrorPolicyPtrInput {
	return (*httpRouteRuleActionRequestMirrorPolicyPtrType)(v)
}

func (*httpRouteRuleActionRequestMirrorPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRequestMirrorPolicy)(nil)).Elem()
}

func (i *httpRouteRuleActionRequestMirrorPolicyPtrType) ToHttpRouteRuleActionRequestMirrorPolicyPtrOutput() HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return i.ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionRequestMirrorPolicyPtrType) ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestMirrorPolicyPtrOutput)
}

type HttpRouteRuleActionRequestMirrorPolicyOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRequestMirrorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRequestMirrorPolicy)(nil)).Elem()
}

func (o HttpRouteRuleActionRequestMirrorPolicyOutput) ToHttpRouteRuleActionRequestMirrorPolicyOutput() HttpRouteRuleActionRequestMirrorPolicyOutput {
	return o
}

func (o HttpRouteRuleActionRequestMirrorPolicyOutput) ToHttpRouteRuleActionRequestMirrorPolicyOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyOutput {
	return o
}

func (o HttpRouteRuleActionRequestMirrorPolicyOutput) ToHttpRouteRuleActionRequestMirrorPolicyPtrOutput() HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return o.ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionRequestMirrorPolicyOutput) ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionRequestMirrorPolicy) *HttpRouteRuleActionRequestMirrorPolicy {
		return &v
	}).(HttpRouteRuleActionRequestMirrorPolicyPtrOutput)
}

// The destination the requests will be mirrored to.
// Structure is documented below.
func (o HttpRouteRuleActionRequestMirrorPolicyOutput) Destination() HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRequestMirrorPolicy) *HttpRouteRuleActionRequestMirrorPolicyDestination {
		return v.Destination
	}).(HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput)
}

type HttpRouteRuleActionRequestMirrorPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRequestMirrorPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRequestMirrorPolicy)(nil)).Elem()
}

func (o HttpRouteRuleActionRequestMirrorPolicyPtrOutput) ToHttpRouteRuleActionRequestMirrorPolicyPtrOutput() HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o HttpRouteRuleActionRequestMirrorPolicyPtrOutput) ToHttpRouteRuleActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o HttpRouteRuleActionRequestMirrorPolicyPtrOutput) Elem() HttpRouteRuleActionRequestMirrorPolicyOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestMirrorPolicy) HttpRouteRuleActionRequestMirrorPolicy {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionRequestMirrorPolicy
		return ret
	}).(HttpRouteRuleActionRequestMirrorPolicyOutput)
}

// The destination the requests will be mirrored to.
// Structure is documented below.
func (o HttpRouteRuleActionRequestMirrorPolicyPtrOutput) Destination() HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestMirrorPolicy) *HttpRouteRuleActionRequestMirrorPolicyDestination {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput)
}

type HttpRouteRuleActionRequestMirrorPolicyDestination struct {
	// The URL of a BackendService to route traffic to.
	ServiceName *string `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
	// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
	// If weights are specified for any one service name, they need to be specified for all of them.
	// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight *int `pulumi:"weight"`
}

// HttpRouteRuleActionRequestMirrorPolicyDestinationInput is an input type that accepts HttpRouteRuleActionRequestMirrorPolicyDestinationArgs and HttpRouteRuleActionRequestMirrorPolicyDestinationOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRequestMirrorPolicyDestinationInput` via:
//
//	HttpRouteRuleActionRequestMirrorPolicyDestinationArgs{...}
type HttpRouteRuleActionRequestMirrorPolicyDestinationInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRequestMirrorPolicyDestinationOutput() HttpRouteRuleActionRequestMirrorPolicyDestinationOutput
	ToHttpRouteRuleActionRequestMirrorPolicyDestinationOutputWithContext(context.Context) HttpRouteRuleActionRequestMirrorPolicyDestinationOutput
}

type HttpRouteRuleActionRequestMirrorPolicyDestinationArgs struct {
	// The URL of a BackendService to route traffic to.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
	// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
	// If weights are specified for any one service name, they need to be specified for all of them.
	// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (HttpRouteRuleActionRequestMirrorPolicyDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRequestMirrorPolicyDestination)(nil)).Elem()
}

func (i HttpRouteRuleActionRequestMirrorPolicyDestinationArgs) ToHttpRouteRuleActionRequestMirrorPolicyDestinationOutput() HttpRouteRuleActionRequestMirrorPolicyDestinationOutput {
	return i.ToHttpRouteRuleActionRequestMirrorPolicyDestinationOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRequestMirrorPolicyDestinationArgs) ToHttpRouteRuleActionRequestMirrorPolicyDestinationOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestMirrorPolicyDestinationOutput)
}

func (i HttpRouteRuleActionRequestMirrorPolicyDestinationArgs) ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput() HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return i.ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRequestMirrorPolicyDestinationArgs) ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestMirrorPolicyDestinationOutput).ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionRequestMirrorPolicyDestinationPtrInput is an input type that accepts HttpRouteRuleActionRequestMirrorPolicyDestinationArgs, HttpRouteRuleActionRequestMirrorPolicyDestinationPtr and HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRequestMirrorPolicyDestinationPtrInput` via:
//
//	        HttpRouteRuleActionRequestMirrorPolicyDestinationArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionRequestMirrorPolicyDestinationPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput() HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput
	ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(context.Context) HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput
}

type httpRouteRuleActionRequestMirrorPolicyDestinationPtrType HttpRouteRuleActionRequestMirrorPolicyDestinationArgs

func HttpRouteRuleActionRequestMirrorPolicyDestinationPtr(v *HttpRouteRuleActionRequestMirrorPolicyDestinationArgs) HttpRouteRuleActionRequestMirrorPolicyDestinationPtrInput {
	return (*httpRouteRuleActionRequestMirrorPolicyDestinationPtrType)(v)
}

func (*httpRouteRuleActionRequestMirrorPolicyDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRequestMirrorPolicyDestination)(nil)).Elem()
}

func (i *httpRouteRuleActionRequestMirrorPolicyDestinationPtrType) ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput() HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return i.ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionRequestMirrorPolicyDestinationPtrType) ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput)
}

type HttpRouteRuleActionRequestMirrorPolicyDestinationOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRequestMirrorPolicyDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRequestMirrorPolicyDestination)(nil)).Elem()
}

func (o HttpRouteRuleActionRequestMirrorPolicyDestinationOutput) ToHttpRouteRuleActionRequestMirrorPolicyDestinationOutput() HttpRouteRuleActionRequestMirrorPolicyDestinationOutput {
	return o
}

func (o HttpRouteRuleActionRequestMirrorPolicyDestinationOutput) ToHttpRouteRuleActionRequestMirrorPolicyDestinationOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyDestinationOutput {
	return o
}

func (o HttpRouteRuleActionRequestMirrorPolicyDestinationOutput) ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput() HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return o.ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionRequestMirrorPolicyDestinationOutput) ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionRequestMirrorPolicyDestination) *HttpRouteRuleActionRequestMirrorPolicyDestination {
		return &v
	}).(HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput)
}

// The URL of a BackendService to route traffic to.
func (o HttpRouteRuleActionRequestMirrorPolicyDestinationOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRequestMirrorPolicyDestination) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
// If weights are specified for any one service name, they need to be specified for all of them.
// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o HttpRouteRuleActionRequestMirrorPolicyDestinationOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRequestMirrorPolicyDestination) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRequestMirrorPolicyDestination)(nil)).Elem()
}

func (o HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput) ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput() HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return o
}

func (o HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput) ToHttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput {
	return o
}

func (o HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput) Elem() HttpRouteRuleActionRequestMirrorPolicyDestinationOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestMirrorPolicyDestination) HttpRouteRuleActionRequestMirrorPolicyDestination {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionRequestMirrorPolicyDestination
		return ret
	}).(HttpRouteRuleActionRequestMirrorPolicyDestinationOutput)
}

// The URL of a BackendService to route traffic to.
func (o HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestMirrorPolicyDestination) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
// If weights are specified for any one service name, they need to be specified for all of them.
// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRequestMirrorPolicyDestination) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type HttpRouteRuleActionResponseHeaderModifier struct {
	// Add the headers with given map where key is the name of the header, value is the value of the header.
	Add map[string]string `pulumi:"add"`
	// Remove headers (matching by header names) specified in the list.
	Removes []string `pulumi:"removes"`
	// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
	Set map[string]string `pulumi:"set"`
}

// HttpRouteRuleActionResponseHeaderModifierInput is an input type that accepts HttpRouteRuleActionResponseHeaderModifierArgs and HttpRouteRuleActionResponseHeaderModifierOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionResponseHeaderModifierInput` via:
//
//	HttpRouteRuleActionResponseHeaderModifierArgs{...}
type HttpRouteRuleActionResponseHeaderModifierInput interface {
	pulumi.Input

	ToHttpRouteRuleActionResponseHeaderModifierOutput() HttpRouteRuleActionResponseHeaderModifierOutput
	ToHttpRouteRuleActionResponseHeaderModifierOutputWithContext(context.Context) HttpRouteRuleActionResponseHeaderModifierOutput
}

type HttpRouteRuleActionResponseHeaderModifierArgs struct {
	// Add the headers with given map where key is the name of the header, value is the value of the header.
	Add pulumi.StringMapInput `pulumi:"add"`
	// Remove headers (matching by header names) specified in the list.
	Removes pulumi.StringArrayInput `pulumi:"removes"`
	// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
	Set pulumi.StringMapInput `pulumi:"set"`
}

func (HttpRouteRuleActionResponseHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionResponseHeaderModifier)(nil)).Elem()
}

func (i HttpRouteRuleActionResponseHeaderModifierArgs) ToHttpRouteRuleActionResponseHeaderModifierOutput() HttpRouteRuleActionResponseHeaderModifierOutput {
	return i.ToHttpRouteRuleActionResponseHeaderModifierOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionResponseHeaderModifierArgs) ToHttpRouteRuleActionResponseHeaderModifierOutputWithContext(ctx context.Context) HttpRouteRuleActionResponseHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionResponseHeaderModifierOutput)
}

func (i HttpRouteRuleActionResponseHeaderModifierArgs) ToHttpRouteRuleActionResponseHeaderModifierPtrOutput() HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return i.ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionResponseHeaderModifierArgs) ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionResponseHeaderModifierOutput).ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionResponseHeaderModifierPtrInput is an input type that accepts HttpRouteRuleActionResponseHeaderModifierArgs, HttpRouteRuleActionResponseHeaderModifierPtr and HttpRouteRuleActionResponseHeaderModifierPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionResponseHeaderModifierPtrInput` via:
//
//	        HttpRouteRuleActionResponseHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionResponseHeaderModifierPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionResponseHeaderModifierPtrOutput() HttpRouteRuleActionResponseHeaderModifierPtrOutput
	ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(context.Context) HttpRouteRuleActionResponseHeaderModifierPtrOutput
}

type httpRouteRuleActionResponseHeaderModifierPtrType HttpRouteRuleActionResponseHeaderModifierArgs

func HttpRouteRuleActionResponseHeaderModifierPtr(v *HttpRouteRuleActionResponseHeaderModifierArgs) HttpRouteRuleActionResponseHeaderModifierPtrInput {
	return (*httpRouteRuleActionResponseHeaderModifierPtrType)(v)
}

func (*httpRouteRuleActionResponseHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionResponseHeaderModifier)(nil)).Elem()
}

func (i *httpRouteRuleActionResponseHeaderModifierPtrType) ToHttpRouteRuleActionResponseHeaderModifierPtrOutput() HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return i.ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionResponseHeaderModifierPtrType) ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionResponseHeaderModifierPtrOutput)
}

type HttpRouteRuleActionResponseHeaderModifierOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionResponseHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionResponseHeaderModifier)(nil)).Elem()
}

func (o HttpRouteRuleActionResponseHeaderModifierOutput) ToHttpRouteRuleActionResponseHeaderModifierOutput() HttpRouteRuleActionResponseHeaderModifierOutput {
	return o
}

func (o HttpRouteRuleActionResponseHeaderModifierOutput) ToHttpRouteRuleActionResponseHeaderModifierOutputWithContext(ctx context.Context) HttpRouteRuleActionResponseHeaderModifierOutput {
	return o
}

func (o HttpRouteRuleActionResponseHeaderModifierOutput) ToHttpRouteRuleActionResponseHeaderModifierPtrOutput() HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return o.ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionResponseHeaderModifierOutput) ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionResponseHeaderModifier) *HttpRouteRuleActionResponseHeaderModifier {
		return &v
	}).(HttpRouteRuleActionResponseHeaderModifierPtrOutput)
}

// Add the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteRuleActionResponseHeaderModifierOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRouteRuleActionResponseHeaderModifier) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

// Remove headers (matching by header names) specified in the list.
func (o HttpRouteRuleActionResponseHeaderModifierOutput) Removes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleActionResponseHeaderModifier) []string { return v.Removes }).(pulumi.StringArrayOutput)
}

// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteRuleActionResponseHeaderModifierOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRouteRuleActionResponseHeaderModifier) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type HttpRouteRuleActionResponseHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionResponseHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionResponseHeaderModifier)(nil)).Elem()
}

func (o HttpRouteRuleActionResponseHeaderModifierPtrOutput) ToHttpRouteRuleActionResponseHeaderModifierPtrOutput() HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return o
}

func (o HttpRouteRuleActionResponseHeaderModifierPtrOutput) ToHttpRouteRuleActionResponseHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionResponseHeaderModifierPtrOutput {
	return o
}

func (o HttpRouteRuleActionResponseHeaderModifierPtrOutput) Elem() HttpRouteRuleActionResponseHeaderModifierOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionResponseHeaderModifier) HttpRouteRuleActionResponseHeaderModifier {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionResponseHeaderModifier
		return ret
	}).(HttpRouteRuleActionResponseHeaderModifierOutput)
}

// Add the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteRuleActionResponseHeaderModifierPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionResponseHeaderModifier) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

// Remove headers (matching by header names) specified in the list.
func (o HttpRouteRuleActionResponseHeaderModifierPtrOutput) Removes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionResponseHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Removes
	}).(pulumi.StringArrayOutput)
}

// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteRuleActionResponseHeaderModifierPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionResponseHeaderModifier) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type HttpRouteRuleActionRetryPolicy struct {
	// Specifies the allowed number of retries.
	NumRetries *int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	PerTryTimeout *string `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies.
	RetryConditions []string `pulumi:"retryConditions"`
}

// HttpRouteRuleActionRetryPolicyInput is an input type that accepts HttpRouteRuleActionRetryPolicyArgs and HttpRouteRuleActionRetryPolicyOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRetryPolicyInput` via:
//
//	HttpRouteRuleActionRetryPolicyArgs{...}
type HttpRouteRuleActionRetryPolicyInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRetryPolicyOutput() HttpRouteRuleActionRetryPolicyOutput
	ToHttpRouteRuleActionRetryPolicyOutputWithContext(context.Context) HttpRouteRuleActionRetryPolicyOutput
}

type HttpRouteRuleActionRetryPolicyArgs struct {
	// Specifies the allowed number of retries.
	NumRetries pulumi.IntPtrInput `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	PerTryTimeout pulumi.StringPtrInput `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies.
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (HttpRouteRuleActionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRetryPolicy)(nil)).Elem()
}

func (i HttpRouteRuleActionRetryPolicyArgs) ToHttpRouteRuleActionRetryPolicyOutput() HttpRouteRuleActionRetryPolicyOutput {
	return i.ToHttpRouteRuleActionRetryPolicyOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRetryPolicyArgs) ToHttpRouteRuleActionRetryPolicyOutputWithContext(ctx context.Context) HttpRouteRuleActionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRetryPolicyOutput)
}

func (i HttpRouteRuleActionRetryPolicyArgs) ToHttpRouteRuleActionRetryPolicyPtrOutput() HttpRouteRuleActionRetryPolicyPtrOutput {
	return i.ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionRetryPolicyArgs) ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRetryPolicyOutput).ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(ctx)
}

// HttpRouteRuleActionRetryPolicyPtrInput is an input type that accepts HttpRouteRuleActionRetryPolicyArgs, HttpRouteRuleActionRetryPolicyPtr and HttpRouteRuleActionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionRetryPolicyPtrInput` via:
//
//	        HttpRouteRuleActionRetryPolicyArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionRetryPolicyPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionRetryPolicyPtrOutput() HttpRouteRuleActionRetryPolicyPtrOutput
	ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(context.Context) HttpRouteRuleActionRetryPolicyPtrOutput
}

type httpRouteRuleActionRetryPolicyPtrType HttpRouteRuleActionRetryPolicyArgs

func HttpRouteRuleActionRetryPolicyPtr(v *HttpRouteRuleActionRetryPolicyArgs) HttpRouteRuleActionRetryPolicyPtrInput {
	return (*httpRouteRuleActionRetryPolicyPtrType)(v)
}

func (*httpRouteRuleActionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRetryPolicy)(nil)).Elem()
}

func (i *httpRouteRuleActionRetryPolicyPtrType) ToHttpRouteRuleActionRetryPolicyPtrOutput() HttpRouteRuleActionRetryPolicyPtrOutput {
	return i.ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionRetryPolicyPtrType) ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionRetryPolicyPtrOutput)
}

type HttpRouteRuleActionRetryPolicyOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionRetryPolicy)(nil)).Elem()
}

func (o HttpRouteRuleActionRetryPolicyOutput) ToHttpRouteRuleActionRetryPolicyOutput() HttpRouteRuleActionRetryPolicyOutput {
	return o
}

func (o HttpRouteRuleActionRetryPolicyOutput) ToHttpRouteRuleActionRetryPolicyOutputWithContext(ctx context.Context) HttpRouteRuleActionRetryPolicyOutput {
	return o
}

func (o HttpRouteRuleActionRetryPolicyOutput) ToHttpRouteRuleActionRetryPolicyPtrOutput() HttpRouteRuleActionRetryPolicyPtrOutput {
	return o.ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionRetryPolicyOutput) ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionRetryPolicy) *HttpRouteRuleActionRetryPolicy {
		return &v
	}).(HttpRouteRuleActionRetryPolicyPtrOutput)
}

// Specifies the allowed number of retries.
func (o HttpRouteRuleActionRetryPolicyOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRetryPolicy) *int { return v.NumRetries }).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
func (o HttpRouteRuleActionRetryPolicyOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRetryPolicy) *string { return v.PerTryTimeout }).(pulumi.StringPtrOutput)
}

// Specifies one or more conditions when this retry policy applies.
func (o HttpRouteRuleActionRetryPolicyOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleActionRetryPolicy) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type HttpRouteRuleActionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionRetryPolicy)(nil)).Elem()
}

func (o HttpRouteRuleActionRetryPolicyPtrOutput) ToHttpRouteRuleActionRetryPolicyPtrOutput() HttpRouteRuleActionRetryPolicyPtrOutput {
	return o
}

func (o HttpRouteRuleActionRetryPolicyPtrOutput) ToHttpRouteRuleActionRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRuleActionRetryPolicyPtrOutput {
	return o
}

func (o HttpRouteRuleActionRetryPolicyPtrOutput) Elem() HttpRouteRuleActionRetryPolicyOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRetryPolicy) HttpRouteRuleActionRetryPolicy {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionRetryPolicy
		return ret
	}).(HttpRouteRuleActionRetryPolicyOutput)
}

// Specifies the allowed number of retries.
func (o HttpRouteRuleActionRetryPolicyPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
func (o HttpRouteRuleActionRetryPolicyPtrOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRetryPolicy) *string {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies one or more conditions when this retry policy applies.
func (o HttpRouteRuleActionRetryPolicyPtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionRetryPolicy) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

type HttpRouteRuleActionUrlRewrite struct {
	// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
}

// HttpRouteRuleActionUrlRewriteInput is an input type that accepts HttpRouteRuleActionUrlRewriteArgs and HttpRouteRuleActionUrlRewriteOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionUrlRewriteInput` via:
//
//	HttpRouteRuleActionUrlRewriteArgs{...}
type HttpRouteRuleActionUrlRewriteInput interface {
	pulumi.Input

	ToHttpRouteRuleActionUrlRewriteOutput() HttpRouteRuleActionUrlRewriteOutput
	ToHttpRouteRuleActionUrlRewriteOutputWithContext(context.Context) HttpRouteRuleActionUrlRewriteOutput
}

type HttpRouteRuleActionUrlRewriteArgs struct {
	// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
}

func (HttpRouteRuleActionUrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionUrlRewrite)(nil)).Elem()
}

func (i HttpRouteRuleActionUrlRewriteArgs) ToHttpRouteRuleActionUrlRewriteOutput() HttpRouteRuleActionUrlRewriteOutput {
	return i.ToHttpRouteRuleActionUrlRewriteOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionUrlRewriteArgs) ToHttpRouteRuleActionUrlRewriteOutputWithContext(ctx context.Context) HttpRouteRuleActionUrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionUrlRewriteOutput)
}

func (i HttpRouteRuleActionUrlRewriteArgs) ToHttpRouteRuleActionUrlRewritePtrOutput() HttpRouteRuleActionUrlRewritePtrOutput {
	return i.ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleActionUrlRewriteArgs) ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(ctx context.Context) HttpRouteRuleActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionUrlRewriteOutput).ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(ctx)
}

// HttpRouteRuleActionUrlRewritePtrInput is an input type that accepts HttpRouteRuleActionUrlRewriteArgs, HttpRouteRuleActionUrlRewritePtr and HttpRouteRuleActionUrlRewritePtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleActionUrlRewritePtrInput` via:
//
//	        HttpRouteRuleActionUrlRewriteArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleActionUrlRewritePtrInput interface {
	pulumi.Input

	ToHttpRouteRuleActionUrlRewritePtrOutput() HttpRouteRuleActionUrlRewritePtrOutput
	ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(context.Context) HttpRouteRuleActionUrlRewritePtrOutput
}

type httpRouteRuleActionUrlRewritePtrType HttpRouteRuleActionUrlRewriteArgs

func HttpRouteRuleActionUrlRewritePtr(v *HttpRouteRuleActionUrlRewriteArgs) HttpRouteRuleActionUrlRewritePtrInput {
	return (*httpRouteRuleActionUrlRewritePtrType)(v)
}

func (*httpRouteRuleActionUrlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionUrlRewrite)(nil)).Elem()
}

func (i *httpRouteRuleActionUrlRewritePtrType) ToHttpRouteRuleActionUrlRewritePtrOutput() HttpRouteRuleActionUrlRewritePtrOutput {
	return i.ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleActionUrlRewritePtrType) ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(ctx context.Context) HttpRouteRuleActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleActionUrlRewritePtrOutput)
}

type HttpRouteRuleActionUrlRewriteOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionUrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleActionUrlRewrite)(nil)).Elem()
}

func (o HttpRouteRuleActionUrlRewriteOutput) ToHttpRouteRuleActionUrlRewriteOutput() HttpRouteRuleActionUrlRewriteOutput {
	return o
}

func (o HttpRouteRuleActionUrlRewriteOutput) ToHttpRouteRuleActionUrlRewriteOutputWithContext(ctx context.Context) HttpRouteRuleActionUrlRewriteOutput {
	return o
}

func (o HttpRouteRuleActionUrlRewriteOutput) ToHttpRouteRuleActionUrlRewritePtrOutput() HttpRouteRuleActionUrlRewritePtrOutput {
	return o.ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleActionUrlRewriteOutput) ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(ctx context.Context) HttpRouteRuleActionUrlRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleActionUrlRewrite) *HttpRouteRuleActionUrlRewrite {
		return &v
	}).(HttpRouteRuleActionUrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
func (o HttpRouteRuleActionUrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionUrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
func (o HttpRouteRuleActionUrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleActionUrlRewrite) *string { return v.PathPrefixRewrite }).(pulumi.StringPtrOutput)
}

type HttpRouteRuleActionUrlRewritePtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleActionUrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleActionUrlRewrite)(nil)).Elem()
}

func (o HttpRouteRuleActionUrlRewritePtrOutput) ToHttpRouteRuleActionUrlRewritePtrOutput() HttpRouteRuleActionUrlRewritePtrOutput {
	return o
}

func (o HttpRouteRuleActionUrlRewritePtrOutput) ToHttpRouteRuleActionUrlRewritePtrOutputWithContext(ctx context.Context) HttpRouteRuleActionUrlRewritePtrOutput {
	return o
}

func (o HttpRouteRuleActionUrlRewritePtrOutput) Elem() HttpRouteRuleActionUrlRewriteOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionUrlRewrite) HttpRouteRuleActionUrlRewrite {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleActionUrlRewrite
		return ret
	}).(HttpRouteRuleActionUrlRewriteOutput)
}

// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
func (o HttpRouteRuleActionUrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
func (o HttpRouteRuleActionUrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

type HttpRouteRuleMatch struct {
	// The HTTP request path value should exactly match this value.
	FullPathMatch *string `pulumi:"fullPathMatch"`
	// Specifies a list of HTTP request headers to match against.
	// Structure is documented below.
	Headers []HttpRouteRuleMatchHeader `pulumi:"headers"`
	// Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies a list of query parameters to match against.
	// Structure is documented below.
	QueryParameters []HttpRouteRuleMatchQueryParameter `pulumi:"queryParameters"`
	// The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
	RegexMatch *string `pulumi:"regexMatch"`
}

// HttpRouteRuleMatchInput is an input type that accepts HttpRouteRuleMatchArgs and HttpRouteRuleMatchOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchInput` via:
//
//	HttpRouteRuleMatchArgs{...}
type HttpRouteRuleMatchInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchOutput() HttpRouteRuleMatchOutput
	ToHttpRouteRuleMatchOutputWithContext(context.Context) HttpRouteRuleMatchOutput
}

type HttpRouteRuleMatchArgs struct {
	// The HTTP request path value should exactly match this value.
	FullPathMatch pulumi.StringPtrInput `pulumi:"fullPathMatch"`
	// Specifies a list of HTTP request headers to match against.
	// Structure is documented below.
	Headers HttpRouteRuleMatchHeaderArrayInput `pulumi:"headers"`
	// Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies a list of query parameters to match against.
	// Structure is documented below.
	QueryParameters HttpRouteRuleMatchQueryParameterArrayInput `pulumi:"queryParameters"`
	// The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (HttpRouteRuleMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatch)(nil)).Elem()
}

func (i HttpRouteRuleMatchArgs) ToHttpRouteRuleMatchOutput() HttpRouteRuleMatchOutput {
	return i.ToHttpRouteRuleMatchOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchArgs) ToHttpRouteRuleMatchOutputWithContext(ctx context.Context) HttpRouteRuleMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchOutput)
}

// HttpRouteRuleMatchArrayInput is an input type that accepts HttpRouteRuleMatchArray and HttpRouteRuleMatchArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchArrayInput` via:
//
//	HttpRouteRuleMatchArray{ HttpRouteRuleMatchArgs{...} }
type HttpRouteRuleMatchArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchArrayOutput() HttpRouteRuleMatchArrayOutput
	ToHttpRouteRuleMatchArrayOutputWithContext(context.Context) HttpRouteRuleMatchArrayOutput
}

type HttpRouteRuleMatchArray []HttpRouteRuleMatchInput

func (HttpRouteRuleMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatch)(nil)).Elem()
}

func (i HttpRouteRuleMatchArray) ToHttpRouteRuleMatchArrayOutput() HttpRouteRuleMatchArrayOutput {
	return i.ToHttpRouteRuleMatchArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchArray) ToHttpRouteRuleMatchArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchArrayOutput)
}

type HttpRouteRuleMatchOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatch)(nil)).Elem()
}

func (o HttpRouteRuleMatchOutput) ToHttpRouteRuleMatchOutput() HttpRouteRuleMatchOutput {
	return o
}

func (o HttpRouteRuleMatchOutput) ToHttpRouteRuleMatchOutputWithContext(ctx context.Context) HttpRouteRuleMatchOutput {
	return o
}

// The HTTP request path value should exactly match this value.
func (o HttpRouteRuleMatchOutput) FullPathMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) *string { return v.FullPathMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of HTTP request headers to match against.
// Structure is documented below.
func (o HttpRouteRuleMatchOutput) Headers() HttpRouteRuleMatchHeaderArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) []HttpRouteRuleMatchHeader { return v.Headers }).(HttpRouteRuleMatchHeaderArrayOutput)
}

// Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
func (o HttpRouteRuleMatchOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
func (o HttpRouteRuleMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of query parameters to match against.
// Structure is documented below.
func (o HttpRouteRuleMatchOutput) QueryParameters() HttpRouteRuleMatchQueryParameterArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) []HttpRouteRuleMatchQueryParameter { return v.QueryParameters }).(HttpRouteRuleMatchQueryParameterArrayOutput)
}

// The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
func (o HttpRouteRuleMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type HttpRouteRuleMatchArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatch)(nil)).Elem()
}

func (o HttpRouteRuleMatchArrayOutput) ToHttpRouteRuleMatchArrayOutput() HttpRouteRuleMatchArrayOutput {
	return o
}

func (o HttpRouteRuleMatchArrayOutput) ToHttpRouteRuleMatchArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchArrayOutput {
	return o
}

func (o HttpRouteRuleMatchArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRuleMatch {
		return vs[0].([]HttpRouteRuleMatch)[vs[1].(int)]
	}).(HttpRouteRuleMatchOutput)
}

type HttpRouteRuleMatchHeader struct {
	// The value of the header should match exactly the content of exactMatch.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the HTTP header to match against.
	Header *string `pulumi:"header"`
	// If specified, the match result will be inverted before checking. Default value is set to false.
	InvertMatch *bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// A header with headerName must exist. The match takes place whether or not the header has a value.
	PresentMatch *bool `pulumi:"presentMatch"`
	// If specified, the rule will match if the request header value is within the range.
	// Structure is documented below.
	RangeMatch *HttpRouteRuleMatchHeaderRangeMatch `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regexMatch.
	RegexMatch *string `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch.
	SuffixMatch *string `pulumi:"suffixMatch"`
}

// HttpRouteRuleMatchHeaderInput is an input type that accepts HttpRouteRuleMatchHeaderArgs and HttpRouteRuleMatchHeaderOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchHeaderInput` via:
//
//	HttpRouteRuleMatchHeaderArgs{...}
type HttpRouteRuleMatchHeaderInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchHeaderOutput() HttpRouteRuleMatchHeaderOutput
	ToHttpRouteRuleMatchHeaderOutputWithContext(context.Context) HttpRouteRuleMatchHeaderOutput
}

type HttpRouteRuleMatchHeaderArgs struct {
	// The value of the header should match exactly the content of exactMatch.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the HTTP header to match against.
	Header pulumi.StringPtrInput `pulumi:"header"`
	// If specified, the match result will be inverted before checking. Default value is set to false.
	InvertMatch pulumi.BoolPtrInput `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// A header with headerName must exist. The match takes place whether or not the header has a value.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// If specified, the rule will match if the request header value is within the range.
	// Structure is documented below.
	RangeMatch HttpRouteRuleMatchHeaderRangeMatchPtrInput `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regexMatch.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch.
	SuffixMatch pulumi.StringPtrInput `pulumi:"suffixMatch"`
}

func (HttpRouteRuleMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatchHeader)(nil)).Elem()
}

func (i HttpRouteRuleMatchHeaderArgs) ToHttpRouteRuleMatchHeaderOutput() HttpRouteRuleMatchHeaderOutput {
	return i.ToHttpRouteRuleMatchHeaderOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchHeaderArgs) ToHttpRouteRuleMatchHeaderOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchHeaderOutput)
}

// HttpRouteRuleMatchHeaderArrayInput is an input type that accepts HttpRouteRuleMatchHeaderArray and HttpRouteRuleMatchHeaderArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchHeaderArrayInput` via:
//
//	HttpRouteRuleMatchHeaderArray{ HttpRouteRuleMatchHeaderArgs{...} }
type HttpRouteRuleMatchHeaderArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchHeaderArrayOutput() HttpRouteRuleMatchHeaderArrayOutput
	ToHttpRouteRuleMatchHeaderArrayOutputWithContext(context.Context) HttpRouteRuleMatchHeaderArrayOutput
}

type HttpRouteRuleMatchHeaderArray []HttpRouteRuleMatchHeaderInput

func (HttpRouteRuleMatchHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatchHeader)(nil)).Elem()
}

func (i HttpRouteRuleMatchHeaderArray) ToHttpRouteRuleMatchHeaderArrayOutput() HttpRouteRuleMatchHeaderArrayOutput {
	return i.ToHttpRouteRuleMatchHeaderArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchHeaderArray) ToHttpRouteRuleMatchHeaderArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchHeaderArrayOutput)
}

type HttpRouteRuleMatchHeaderOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatchHeader)(nil)).Elem()
}

func (o HttpRouteRuleMatchHeaderOutput) ToHttpRouteRuleMatchHeaderOutput() HttpRouteRuleMatchHeaderOutput {
	return o
}

func (o HttpRouteRuleMatchHeaderOutput) ToHttpRouteRuleMatchHeaderOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderOutput {
	return o
}

// The value of the header should match exactly the content of exactMatch.
func (o HttpRouteRuleMatchHeaderOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeader) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The name of the HTTP header to match against.
func (o HttpRouteRuleMatchHeaderOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeader) *string { return v.Header }).(pulumi.StringPtrOutput)
}

// If specified, the match result will be inverted before checking. Default value is set to false.
func (o HttpRouteRuleMatchHeaderOutput) InvertMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeader) *bool { return v.InvertMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must start with the contents of prefixMatch.
func (o HttpRouteRuleMatchHeaderOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeader) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// A header with headerName must exist. The match takes place whether or not the header has a value.
func (o HttpRouteRuleMatchHeaderOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeader) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// If specified, the rule will match if the request header value is within the range.
// Structure is documented below.
func (o HttpRouteRuleMatchHeaderOutput) RangeMatch() HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeader) *HttpRouteRuleMatchHeaderRangeMatch { return v.RangeMatch }).(HttpRouteRuleMatchHeaderRangeMatchPtrOutput)
}

// The value of the header must match the regular expression specified in regexMatch.
func (o HttpRouteRuleMatchHeaderOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeader) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

// The value of the header must end with the contents of suffixMatch.
func (o HttpRouteRuleMatchHeaderOutput) SuffixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeader) *string { return v.SuffixMatch }).(pulumi.StringPtrOutput)
}

type HttpRouteRuleMatchHeaderArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatchHeader)(nil)).Elem()
}

func (o HttpRouteRuleMatchHeaderArrayOutput) ToHttpRouteRuleMatchHeaderArrayOutput() HttpRouteRuleMatchHeaderArrayOutput {
	return o
}

func (o HttpRouteRuleMatchHeaderArrayOutput) ToHttpRouteRuleMatchHeaderArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderArrayOutput {
	return o
}

func (o HttpRouteRuleMatchHeaderArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleMatchHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRuleMatchHeader {
		return vs[0].([]HttpRouteRuleMatchHeader)[vs[1].(int)]
	}).(HttpRouteRuleMatchHeaderOutput)
}

type HttpRouteRuleMatchHeaderRangeMatch struct {
	// End of the range (exclusive).
	End int `pulumi:"end"`
	// Start of the range (inclusive).
	Start int `pulumi:"start"`
}

// HttpRouteRuleMatchHeaderRangeMatchInput is an input type that accepts HttpRouteRuleMatchHeaderRangeMatchArgs and HttpRouteRuleMatchHeaderRangeMatchOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchHeaderRangeMatchInput` via:
//
//	HttpRouteRuleMatchHeaderRangeMatchArgs{...}
type HttpRouteRuleMatchHeaderRangeMatchInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchHeaderRangeMatchOutput() HttpRouteRuleMatchHeaderRangeMatchOutput
	ToHttpRouteRuleMatchHeaderRangeMatchOutputWithContext(context.Context) HttpRouteRuleMatchHeaderRangeMatchOutput
}

type HttpRouteRuleMatchHeaderRangeMatchArgs struct {
	// End of the range (exclusive).
	End pulumi.IntInput `pulumi:"end"`
	// Start of the range (inclusive).
	Start pulumi.IntInput `pulumi:"start"`
}

func (HttpRouteRuleMatchHeaderRangeMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatchHeaderRangeMatch)(nil)).Elem()
}

func (i HttpRouteRuleMatchHeaderRangeMatchArgs) ToHttpRouteRuleMatchHeaderRangeMatchOutput() HttpRouteRuleMatchHeaderRangeMatchOutput {
	return i.ToHttpRouteRuleMatchHeaderRangeMatchOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchHeaderRangeMatchArgs) ToHttpRouteRuleMatchHeaderRangeMatchOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderRangeMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchHeaderRangeMatchOutput)
}

func (i HttpRouteRuleMatchHeaderRangeMatchArgs) ToHttpRouteRuleMatchHeaderRangeMatchPtrOutput() HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return i.ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchHeaderRangeMatchArgs) ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchHeaderRangeMatchOutput).ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(ctx)
}

// HttpRouteRuleMatchHeaderRangeMatchPtrInput is an input type that accepts HttpRouteRuleMatchHeaderRangeMatchArgs, HttpRouteRuleMatchHeaderRangeMatchPtr and HttpRouteRuleMatchHeaderRangeMatchPtrOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchHeaderRangeMatchPtrInput` via:
//
//	        HttpRouteRuleMatchHeaderRangeMatchArgs{...}
//
//	or:
//
//	        nil
type HttpRouteRuleMatchHeaderRangeMatchPtrInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchHeaderRangeMatchPtrOutput() HttpRouteRuleMatchHeaderRangeMatchPtrOutput
	ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(context.Context) HttpRouteRuleMatchHeaderRangeMatchPtrOutput
}

type httpRouteRuleMatchHeaderRangeMatchPtrType HttpRouteRuleMatchHeaderRangeMatchArgs

func HttpRouteRuleMatchHeaderRangeMatchPtr(v *HttpRouteRuleMatchHeaderRangeMatchArgs) HttpRouteRuleMatchHeaderRangeMatchPtrInput {
	return (*httpRouteRuleMatchHeaderRangeMatchPtrType)(v)
}

func (*httpRouteRuleMatchHeaderRangeMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleMatchHeaderRangeMatch)(nil)).Elem()
}

func (i *httpRouteRuleMatchHeaderRangeMatchPtrType) ToHttpRouteRuleMatchHeaderRangeMatchPtrOutput() HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return i.ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(context.Background())
}

func (i *httpRouteRuleMatchHeaderRangeMatchPtrType) ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchHeaderRangeMatchPtrOutput)
}

type HttpRouteRuleMatchHeaderRangeMatchOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchHeaderRangeMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatchHeaderRangeMatch)(nil)).Elem()
}

func (o HttpRouteRuleMatchHeaderRangeMatchOutput) ToHttpRouteRuleMatchHeaderRangeMatchOutput() HttpRouteRuleMatchHeaderRangeMatchOutput {
	return o
}

func (o HttpRouteRuleMatchHeaderRangeMatchOutput) ToHttpRouteRuleMatchHeaderRangeMatchOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderRangeMatchOutput {
	return o
}

func (o HttpRouteRuleMatchHeaderRangeMatchOutput) ToHttpRouteRuleMatchHeaderRangeMatchPtrOutput() HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return o.ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(context.Background())
}

func (o HttpRouteRuleMatchHeaderRangeMatchOutput) ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRuleMatchHeaderRangeMatch) *HttpRouteRuleMatchHeaderRangeMatch {
		return &v
	}).(HttpRouteRuleMatchHeaderRangeMatchPtrOutput)
}

// End of the range (exclusive).
func (o HttpRouteRuleMatchHeaderRangeMatchOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeaderRangeMatch) int { return v.End }).(pulumi.IntOutput)
}

// Start of the range (inclusive).
func (o HttpRouteRuleMatchHeaderRangeMatchOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchHeaderRangeMatch) int { return v.Start }).(pulumi.IntOutput)
}

type HttpRouteRuleMatchHeaderRangeMatchPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchHeaderRangeMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRuleMatchHeaderRangeMatch)(nil)).Elem()
}

func (o HttpRouteRuleMatchHeaderRangeMatchPtrOutput) ToHttpRouteRuleMatchHeaderRangeMatchPtrOutput() HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return o
}

func (o HttpRouteRuleMatchHeaderRangeMatchPtrOutput) ToHttpRouteRuleMatchHeaderRangeMatchPtrOutputWithContext(ctx context.Context) HttpRouteRuleMatchHeaderRangeMatchPtrOutput {
	return o
}

func (o HttpRouteRuleMatchHeaderRangeMatchPtrOutput) Elem() HttpRouteRuleMatchHeaderRangeMatchOutput {
	return o.ApplyT(func(v *HttpRouteRuleMatchHeaderRangeMatch) HttpRouteRuleMatchHeaderRangeMatch {
		if v != nil {
			return *v
		}
		var ret HttpRouteRuleMatchHeaderRangeMatch
		return ret
	}).(HttpRouteRuleMatchHeaderRangeMatchOutput)
}

// End of the range (exclusive).
func (o HttpRouteRuleMatchHeaderRangeMatchPtrOutput) End() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleMatchHeaderRangeMatch) *int {
		if v == nil {
			return nil
		}
		return &v.End
	}).(pulumi.IntPtrOutput)
}

// Start of the range (inclusive).
func (o HttpRouteRuleMatchHeaderRangeMatchPtrOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRuleMatchHeaderRangeMatch) *int {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.IntPtrOutput)
}

type HttpRouteRuleMatchQueryParameter struct {
	// The value of the query parameter must exactly match the contents of exactMatch.
	ExactMatch *string `pulumi:"exactMatch"`
	// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The name of the query parameter to match.
	QueryParameter *string `pulumi:"queryParameter"`
	// The value of the query parameter must match the regular expression specified by regexMatch.For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
	RegexMatch *string `pulumi:"regexMatch"`
}

// HttpRouteRuleMatchQueryParameterInput is an input type that accepts HttpRouteRuleMatchQueryParameterArgs and HttpRouteRuleMatchQueryParameterOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchQueryParameterInput` via:
//
//	HttpRouteRuleMatchQueryParameterArgs{...}
type HttpRouteRuleMatchQueryParameterInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchQueryParameterOutput() HttpRouteRuleMatchQueryParameterOutput
	ToHttpRouteRuleMatchQueryParameterOutputWithContext(context.Context) HttpRouteRuleMatchQueryParameterOutput
}

type HttpRouteRuleMatchQueryParameterArgs struct {
	// The value of the query parameter must exactly match the contents of exactMatch.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The name of the query parameter to match.
	QueryParameter pulumi.StringPtrInput `pulumi:"queryParameter"`
	// The value of the query parameter must match the regular expression specified by regexMatch.For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (HttpRouteRuleMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatchQueryParameter)(nil)).Elem()
}

func (i HttpRouteRuleMatchQueryParameterArgs) ToHttpRouteRuleMatchQueryParameterOutput() HttpRouteRuleMatchQueryParameterOutput {
	return i.ToHttpRouteRuleMatchQueryParameterOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchQueryParameterArgs) ToHttpRouteRuleMatchQueryParameterOutputWithContext(ctx context.Context) HttpRouteRuleMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchQueryParameterOutput)
}

// HttpRouteRuleMatchQueryParameterArrayInput is an input type that accepts HttpRouteRuleMatchQueryParameterArray and HttpRouteRuleMatchQueryParameterArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchQueryParameterArrayInput` via:
//
//	HttpRouteRuleMatchQueryParameterArray{ HttpRouteRuleMatchQueryParameterArgs{...} }
type HttpRouteRuleMatchQueryParameterArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchQueryParameterArrayOutput() HttpRouteRuleMatchQueryParameterArrayOutput
	ToHttpRouteRuleMatchQueryParameterArrayOutputWithContext(context.Context) HttpRouteRuleMatchQueryParameterArrayOutput
}

type HttpRouteRuleMatchQueryParameterArray []HttpRouteRuleMatchQueryParameterInput

func (HttpRouteRuleMatchQueryParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatchQueryParameter)(nil)).Elem()
}

func (i HttpRouteRuleMatchQueryParameterArray) ToHttpRouteRuleMatchQueryParameterArrayOutput() HttpRouteRuleMatchQueryParameterArrayOutput {
	return i.ToHttpRouteRuleMatchQueryParameterArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchQueryParameterArray) ToHttpRouteRuleMatchQueryParameterArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchQueryParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchQueryParameterArrayOutput)
}

type HttpRouteRuleMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatchQueryParameter)(nil)).Elem()
}

func (o HttpRouteRuleMatchQueryParameterOutput) ToHttpRouteRuleMatchQueryParameterOutput() HttpRouteRuleMatchQueryParameterOutput {
	return o
}

func (o HttpRouteRuleMatchQueryParameterOutput) ToHttpRouteRuleMatchQueryParameterOutputWithContext(ctx context.Context) HttpRouteRuleMatchQueryParameterOutput {
	return o
}

// The value of the query parameter must exactly match the contents of exactMatch.
func (o HttpRouteRuleMatchQueryParameterOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchQueryParameter) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not.
func (o HttpRouteRuleMatchQueryParameterOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchQueryParameter) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The name of the query parameter to match.
func (o HttpRouteRuleMatchQueryParameterOutput) QueryParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchQueryParameter) *string { return v.QueryParameter }).(pulumi.StringPtrOutput)
}

// The value of the query parameter must match the regular expression specified by regexMatch.For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
func (o HttpRouteRuleMatchQueryParameterOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchQueryParameter) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type HttpRouteRuleMatchQueryParameterArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchQueryParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatchQueryParameter)(nil)).Elem()
}

func (o HttpRouteRuleMatchQueryParameterArrayOutput) ToHttpRouteRuleMatchQueryParameterArrayOutput() HttpRouteRuleMatchQueryParameterArrayOutput {
	return o
}

func (o HttpRouteRuleMatchQueryParameterArrayOutput) ToHttpRouteRuleMatchQueryParameterArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchQueryParameterArrayOutput {
	return o
}

func (o HttpRouteRuleMatchQueryParameterArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleMatchQueryParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRuleMatchQueryParameter {
		return vs[0].([]HttpRouteRuleMatchQueryParameter)[vs[1].(int)]
	}).(HttpRouteRuleMatchQueryParameterOutput)
}

type TcpRouteRule struct {
	// A detailed rule defining how to route traffic.
	// Structure is documented below.
	Action TcpRouteRuleAction `pulumi:"action"`
	// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
	// If no routeMatch field is specified, this rule will unconditionally match traffic.
	// Structure is documented below.
	Matches []TcpRouteRuleMatch `pulumi:"matches"`
}

// TcpRouteRuleInput is an input type that accepts TcpRouteRuleArgs and TcpRouteRuleOutput values.
// You can construct a concrete instance of `TcpRouteRuleInput` via:
//
//	TcpRouteRuleArgs{...}
type TcpRouteRuleInput interface {
	pulumi.Input

	ToTcpRouteRuleOutput() TcpRouteRuleOutput
	ToTcpRouteRuleOutputWithContext(context.Context) TcpRouteRuleOutput
}

type TcpRouteRuleArgs struct {
	// A detailed rule defining how to route traffic.
	// Structure is documented below.
	Action TcpRouteRuleActionInput `pulumi:"action"`
	// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
	// If no routeMatch field is specified, this rule will unconditionally match traffic.
	// Structure is documented below.
	Matches TcpRouteRuleMatchArrayInput `pulumi:"matches"`
}

func (TcpRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRule)(nil)).Elem()
}

func (i TcpRouteRuleArgs) ToTcpRouteRuleOutput() TcpRouteRuleOutput {
	return i.ToTcpRouteRuleOutputWithContext(context.Background())
}

func (i TcpRouteRuleArgs) ToTcpRouteRuleOutputWithContext(ctx context.Context) TcpRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleOutput)
}

// TcpRouteRuleArrayInput is an input type that accepts TcpRouteRuleArray and TcpRouteRuleArrayOutput values.
// You can construct a concrete instance of `TcpRouteRuleArrayInput` via:
//
//	TcpRouteRuleArray{ TcpRouteRuleArgs{...} }
type TcpRouteRuleArrayInput interface {
	pulumi.Input

	ToTcpRouteRuleArrayOutput() TcpRouteRuleArrayOutput
	ToTcpRouteRuleArrayOutputWithContext(context.Context) TcpRouteRuleArrayOutput
}

type TcpRouteRuleArray []TcpRouteRuleInput

func (TcpRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRule)(nil)).Elem()
}

func (i TcpRouteRuleArray) ToTcpRouteRuleArrayOutput() TcpRouteRuleArrayOutput {
	return i.ToTcpRouteRuleArrayOutputWithContext(context.Background())
}

func (i TcpRouteRuleArray) ToTcpRouteRuleArrayOutputWithContext(ctx context.Context) TcpRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleArrayOutput)
}

type TcpRouteRuleOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRule)(nil)).Elem()
}

func (o TcpRouteRuleOutput) ToTcpRouteRuleOutput() TcpRouteRuleOutput {
	return o
}

func (o TcpRouteRuleOutput) ToTcpRouteRuleOutputWithContext(ctx context.Context) TcpRouteRuleOutput {
	return o
}

// A detailed rule defining how to route traffic.
// Structure is documented below.
func (o TcpRouteRuleOutput) Action() TcpRouteRuleActionOutput {
	return o.ApplyT(func(v TcpRouteRule) TcpRouteRuleAction { return v.Action }).(TcpRouteRuleActionOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
// If no routeMatch field is specified, this rule will unconditionally match traffic.
// Structure is documented below.
func (o TcpRouteRuleOutput) Matches() TcpRouteRuleMatchArrayOutput {
	return o.ApplyT(func(v TcpRouteRule) []TcpRouteRuleMatch { return v.Matches }).(TcpRouteRuleMatchArrayOutput)
}

type TcpRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRule)(nil)).Elem()
}

func (o TcpRouteRuleArrayOutput) ToTcpRouteRuleArrayOutput() TcpRouteRuleArrayOutput {
	return o
}

func (o TcpRouteRuleArrayOutput) ToTcpRouteRuleArrayOutputWithContext(ctx context.Context) TcpRouteRuleArrayOutput {
	return o
}

func (o TcpRouteRuleArrayOutput) Index(i pulumi.IntInput) TcpRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRule {
		return vs[0].([]TcpRouteRule)[vs[1].(int)]
	}).(TcpRouteRuleOutput)
}

type TcpRouteRuleAction struct {
	// The destination services to which traffic should be forwarded. At least one destination service is required.
	// Structure is documented below.
	Destinations []TcpRouteRuleActionDestination `pulumi:"destinations"`
	// If true, Router will use the destination IP and port of the original connection as the destination of the request.
	OriginalDestination *bool `pulumi:"originalDestination"`
}

// TcpRouteRuleActionInput is an input type that accepts TcpRouteRuleActionArgs and TcpRouteRuleActionOutput values.
// You can construct a concrete instance of `TcpRouteRuleActionInput` via:
//
//	TcpRouteRuleActionArgs{...}
type TcpRouteRuleActionInput interface {
	pulumi.Input

	ToTcpRouteRuleActionOutput() TcpRouteRuleActionOutput
	ToTcpRouteRuleActionOutputWithContext(context.Context) TcpRouteRuleActionOutput
}

type TcpRouteRuleActionArgs struct {
	// The destination services to which traffic should be forwarded. At least one destination service is required.
	// Structure is documented below.
	Destinations TcpRouteRuleActionDestinationArrayInput `pulumi:"destinations"`
	// If true, Router will use the destination IP and port of the original connection as the destination of the request.
	OriginalDestination pulumi.BoolPtrInput `pulumi:"originalDestination"`
}

func (TcpRouteRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRuleAction)(nil)).Elem()
}

func (i TcpRouteRuleActionArgs) ToTcpRouteRuleActionOutput() TcpRouteRuleActionOutput {
	return i.ToTcpRouteRuleActionOutputWithContext(context.Background())
}

func (i TcpRouteRuleActionArgs) ToTcpRouteRuleActionOutputWithContext(ctx context.Context) TcpRouteRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleActionOutput)
}

type TcpRouteRuleActionOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRuleAction)(nil)).Elem()
}

func (o TcpRouteRuleActionOutput) ToTcpRouteRuleActionOutput() TcpRouteRuleActionOutput {
	return o
}

func (o TcpRouteRuleActionOutput) ToTcpRouteRuleActionOutputWithContext(ctx context.Context) TcpRouteRuleActionOutput {
	return o
}

// The destination services to which traffic should be forwarded. At least one destination service is required.
// Structure is documented below.
func (o TcpRouteRuleActionOutput) Destinations() TcpRouteRuleActionDestinationArrayOutput {
	return o.ApplyT(func(v TcpRouteRuleAction) []TcpRouteRuleActionDestination { return v.Destinations }).(TcpRouteRuleActionDestinationArrayOutput)
}

// If true, Router will use the destination IP and port of the original connection as the destination of the request.
func (o TcpRouteRuleActionOutput) OriginalDestination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleAction) *bool { return v.OriginalDestination }).(pulumi.BoolPtrOutput)
}

type TcpRouteRuleActionDestination struct {
	// The URL of a BackendService to route traffic to.
	ServiceName *string `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
	// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
	// If weights are specified for any one service name, they need to be specified for all of them.
	// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight *int `pulumi:"weight"`
}

// TcpRouteRuleActionDestinationInput is an input type that accepts TcpRouteRuleActionDestinationArgs and TcpRouteRuleActionDestinationOutput values.
// You can construct a concrete instance of `TcpRouteRuleActionDestinationInput` via:
//
//	TcpRouteRuleActionDestinationArgs{...}
type TcpRouteRuleActionDestinationInput interface {
	pulumi.Input

	ToTcpRouteRuleActionDestinationOutput() TcpRouteRuleActionDestinationOutput
	ToTcpRouteRuleActionDestinationOutputWithContext(context.Context) TcpRouteRuleActionDestinationOutput
}

type TcpRouteRuleActionDestinationArgs struct {
	// The URL of a BackendService to route traffic to.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
	// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
	// If weights are specified for any one service name, they need to be specified for all of them.
	// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (TcpRouteRuleActionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRuleActionDestination)(nil)).Elem()
}

func (i TcpRouteRuleActionDestinationArgs) ToTcpRouteRuleActionDestinationOutput() TcpRouteRuleActionDestinationOutput {
	return i.ToTcpRouteRuleActionDestinationOutputWithContext(context.Background())
}

func (i TcpRouteRuleActionDestinationArgs) ToTcpRouteRuleActionDestinationOutputWithContext(ctx context.Context) TcpRouteRuleActionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleActionDestinationOutput)
}

// TcpRouteRuleActionDestinationArrayInput is an input type that accepts TcpRouteRuleActionDestinationArray and TcpRouteRuleActionDestinationArrayOutput values.
// You can construct a concrete instance of `TcpRouteRuleActionDestinationArrayInput` via:
//
//	TcpRouteRuleActionDestinationArray{ TcpRouteRuleActionDestinationArgs{...} }
type TcpRouteRuleActionDestinationArrayInput interface {
	pulumi.Input

	ToTcpRouteRuleActionDestinationArrayOutput() TcpRouteRuleActionDestinationArrayOutput
	ToTcpRouteRuleActionDestinationArrayOutputWithContext(context.Context) TcpRouteRuleActionDestinationArrayOutput
}

type TcpRouteRuleActionDestinationArray []TcpRouteRuleActionDestinationInput

func (TcpRouteRuleActionDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRuleActionDestination)(nil)).Elem()
}

func (i TcpRouteRuleActionDestinationArray) ToTcpRouteRuleActionDestinationArrayOutput() TcpRouteRuleActionDestinationArrayOutput {
	return i.ToTcpRouteRuleActionDestinationArrayOutputWithContext(context.Background())
}

func (i TcpRouteRuleActionDestinationArray) ToTcpRouteRuleActionDestinationArrayOutputWithContext(ctx context.Context) TcpRouteRuleActionDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleActionDestinationArrayOutput)
}

type TcpRouteRuleActionDestinationOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleActionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRuleActionDestination)(nil)).Elem()
}

func (o TcpRouteRuleActionDestinationOutput) ToTcpRouteRuleActionDestinationOutput() TcpRouteRuleActionDestinationOutput {
	return o
}

func (o TcpRouteRuleActionDestinationOutput) ToTcpRouteRuleActionDestinationOutputWithContext(ctx context.Context) TcpRouteRuleActionDestinationOutput {
	return o
}

// The URL of a BackendService to route traffic to.
func (o TcpRouteRuleActionDestinationOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleActionDestination) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
// If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
// If weights are specified for any one service name, they need to be specified for all of them.
// If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o TcpRouteRuleActionDestinationOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleActionDestination) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type TcpRouteRuleActionDestinationArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleActionDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRuleActionDestination)(nil)).Elem()
}

func (o TcpRouteRuleActionDestinationArrayOutput) ToTcpRouteRuleActionDestinationArrayOutput() TcpRouteRuleActionDestinationArrayOutput {
	return o
}

func (o TcpRouteRuleActionDestinationArrayOutput) ToTcpRouteRuleActionDestinationArrayOutputWithContext(ctx context.Context) TcpRouteRuleActionDestinationArrayOutput {
	return o
}

func (o TcpRouteRuleActionDestinationArrayOutput) Index(i pulumi.IntInput) TcpRouteRuleActionDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRuleActionDestination {
		return vs[0].([]TcpRouteRuleActionDestination)[vs[1].(int)]
	}).(TcpRouteRuleActionDestinationOutput)
}

type TcpRouteRuleMatch struct {
	// Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask.
	// By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
	Address string `pulumi:"address"`
	// Specifies the destination port to match against.
	Port string `pulumi:"port"`
}

// TcpRouteRuleMatchInput is an input type that accepts TcpRouteRuleMatchArgs and TcpRouteRuleMatchOutput values.
// You can construct a concrete instance of `TcpRouteRuleMatchInput` via:
//
//	TcpRouteRuleMatchArgs{...}
type TcpRouteRuleMatchInput interface {
	pulumi.Input

	ToTcpRouteRuleMatchOutput() TcpRouteRuleMatchOutput
	ToTcpRouteRuleMatchOutputWithContext(context.Context) TcpRouteRuleMatchOutput
}

type TcpRouteRuleMatchArgs struct {
	// Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask.
	// By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
	Address pulumi.StringInput `pulumi:"address"`
	// Specifies the destination port to match against.
	Port pulumi.StringInput `pulumi:"port"`
}

func (TcpRouteRuleMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRuleMatch)(nil)).Elem()
}

func (i TcpRouteRuleMatchArgs) ToTcpRouteRuleMatchOutput() TcpRouteRuleMatchOutput {
	return i.ToTcpRouteRuleMatchOutputWithContext(context.Background())
}

func (i TcpRouteRuleMatchArgs) ToTcpRouteRuleMatchOutputWithContext(ctx context.Context) TcpRouteRuleMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleMatchOutput)
}

// TcpRouteRuleMatchArrayInput is an input type that accepts TcpRouteRuleMatchArray and TcpRouteRuleMatchArrayOutput values.
// You can construct a concrete instance of `TcpRouteRuleMatchArrayInput` via:
//
//	TcpRouteRuleMatchArray{ TcpRouteRuleMatchArgs{...} }
type TcpRouteRuleMatchArrayInput interface {
	pulumi.Input

	ToTcpRouteRuleMatchArrayOutput() TcpRouteRuleMatchArrayOutput
	ToTcpRouteRuleMatchArrayOutputWithContext(context.Context) TcpRouteRuleMatchArrayOutput
}

type TcpRouteRuleMatchArray []TcpRouteRuleMatchInput

func (TcpRouteRuleMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRuleMatch)(nil)).Elem()
}

func (i TcpRouteRuleMatchArray) ToTcpRouteRuleMatchArrayOutput() TcpRouteRuleMatchArrayOutput {
	return i.ToTcpRouteRuleMatchArrayOutputWithContext(context.Background())
}

func (i TcpRouteRuleMatchArray) ToTcpRouteRuleMatchArrayOutputWithContext(ctx context.Context) TcpRouteRuleMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleMatchArrayOutput)
}

type TcpRouteRuleMatchOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRuleMatch)(nil)).Elem()
}

func (o TcpRouteRuleMatchOutput) ToTcpRouteRuleMatchOutput() TcpRouteRuleMatchOutput {
	return o
}

func (o TcpRouteRuleMatchOutput) ToTcpRouteRuleMatchOutputWithContext(ctx context.Context) TcpRouteRuleMatchOutput {
	return o
}

// Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask.
// By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
func (o TcpRouteRuleMatchOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteRuleMatch) string { return v.Address }).(pulumi.StringOutput)
}

// Specifies the destination port to match against.
func (o TcpRouteRuleMatchOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteRuleMatch) string { return v.Port }).(pulumi.StringOutput)
}

type TcpRouteRuleMatchArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRuleMatch)(nil)).Elem()
}

func (o TcpRouteRuleMatchArrayOutput) ToTcpRouteRuleMatchArrayOutput() TcpRouteRuleMatchArrayOutput {
	return o
}

func (o TcpRouteRuleMatchArrayOutput) ToTcpRouteRuleMatchArrayOutputWithContext(ctx context.Context) TcpRouteRuleMatchArrayOutput {
	return o
}

func (o TcpRouteRuleMatchArrayOutput) Index(i pulumi.IntInput) TcpRouteRuleMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRuleMatch {
		return vs[0].([]TcpRouteRuleMatch)[vs[1].(int)]
	}).(TcpRouteRuleMatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheKeysetPublicKeyInput)(nil)).Elem(), EdgeCacheKeysetPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheKeysetPublicKeyArrayInput)(nil)).Elem(), EdgeCacheKeysetPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheKeysetValidationSharedKeyInput)(nil)).Elem(), EdgeCacheKeysetValidationSharedKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheKeysetValidationSharedKeyArrayInput)(nil)).Elem(), EdgeCacheKeysetValidationSharedKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginAwsV4AuthenticationInput)(nil)).Elem(), EdgeCacheOriginAwsV4AuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginAwsV4AuthenticationPtrInput)(nil)).Elem(), EdgeCacheOriginAwsV4AuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionInput)(nil)).Elem(), EdgeCacheOriginOriginOverrideActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionPtrInput)(nil)).Elem(), EdgeCacheOriginOriginOverrideActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionHeaderActionInput)(nil)).Elem(), EdgeCacheOriginOriginOverrideActionHeaderActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionHeaderActionPtrInput)(nil)).Elem(), EdgeCacheOriginOriginOverrideActionHeaderActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddInput)(nil)).Elem(), EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayInput)(nil)).Elem(), EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionUrlRewriteInput)(nil)).Elem(), EdgeCacheOriginOriginOverrideActionUrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginOverrideActionUrlRewritePtrInput)(nil)).Elem(), EdgeCacheOriginOriginOverrideActionUrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginRedirectInput)(nil)).Elem(), EdgeCacheOriginOriginRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginOriginRedirectPtrInput)(nil)).Elem(), EdgeCacheOriginOriginRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginTimeoutInput)(nil)).Elem(), EdgeCacheOriginTimeoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginTimeoutPtrInput)(nil)).Elem(), EdgeCacheOriginTimeoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceLogConfigInput)(nil)).Elem(), EdgeCacheServiceLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceLogConfigPtrInput)(nil)).Elem(), EdgeCacheServiceLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingInput)(nil)).Elem(), EdgeCacheServiceRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingHostRuleInput)(nil)).Elem(), EdgeCacheServiceRoutingHostRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingHostRuleArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingHostRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleInput)(nil)).Elem(), HttpRouteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleArrayInput)(nil)).Elem(), HttpRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionInput)(nil)).Elem(), HttpRouteRuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionPtrInput)(nil)).Elem(), HttpRouteRuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionCorsPolicyInput)(nil)).Elem(), HttpRouteRuleActionCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionCorsPolicyPtrInput)(nil)).Elem(), HttpRouteRuleActionCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionDestinationInput)(nil)).Elem(), HttpRouteRuleActionDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionDestinationArrayInput)(nil)).Elem(), HttpRouteRuleActionDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyInput)(nil)).Elem(), HttpRouteRuleActionFaultInjectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyPtrInput)(nil)).Elem(), HttpRouteRuleActionFaultInjectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyAbortInput)(nil)).Elem(), HttpRouteRuleActionFaultInjectionPolicyAbortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyAbortPtrInput)(nil)).Elem(), HttpRouteRuleActionFaultInjectionPolicyAbortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyDelayInput)(nil)).Elem(), HttpRouteRuleActionFaultInjectionPolicyDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionFaultInjectionPolicyDelayPtrInput)(nil)).Elem(), HttpRouteRuleActionFaultInjectionPolicyDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRedirectInput)(nil)).Elem(), HttpRouteRuleActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRedirectPtrInput)(nil)).Elem(), HttpRouteRuleActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRequestHeaderModifierInput)(nil)).Elem(), HttpRouteRuleActionRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRequestHeaderModifierPtrInput)(nil)).Elem(), HttpRouteRuleActionRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRequestMirrorPolicyInput)(nil)).Elem(), HttpRouteRuleActionRequestMirrorPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRequestMirrorPolicyPtrInput)(nil)).Elem(), HttpRouteRuleActionRequestMirrorPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRequestMirrorPolicyDestinationInput)(nil)).Elem(), HttpRouteRuleActionRequestMirrorPolicyDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRequestMirrorPolicyDestinationPtrInput)(nil)).Elem(), HttpRouteRuleActionRequestMirrorPolicyDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionResponseHeaderModifierInput)(nil)).Elem(), HttpRouteRuleActionResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionResponseHeaderModifierPtrInput)(nil)).Elem(), HttpRouteRuleActionResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRetryPolicyInput)(nil)).Elem(), HttpRouteRuleActionRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionRetryPolicyPtrInput)(nil)).Elem(), HttpRouteRuleActionRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionUrlRewriteInput)(nil)).Elem(), HttpRouteRuleActionUrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleActionUrlRewritePtrInput)(nil)).Elem(), HttpRouteRuleActionUrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMatchInput)(nil)).Elem(), HttpRouteRuleMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMatchArrayInput)(nil)).Elem(), HttpRouteRuleMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMatchHeaderInput)(nil)).Elem(), HttpRouteRuleMatchHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMatchHeaderArrayInput)(nil)).Elem(), HttpRouteRuleMatchHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMatchHeaderRangeMatchInput)(nil)).Elem(), HttpRouteRuleMatchHeaderRangeMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMatchHeaderRangeMatchPtrInput)(nil)).Elem(), HttpRouteRuleMatchHeaderRangeMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMatchQueryParameterInput)(nil)).Elem(), HttpRouteRuleMatchQueryParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMatchQueryParameterArrayInput)(nil)).Elem(), HttpRouteRuleMatchQueryParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleInput)(nil)).Elem(), TcpRouteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleArrayInput)(nil)).Elem(), TcpRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleActionInput)(nil)).Elem(), TcpRouteRuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleActionDestinationInput)(nil)).Elem(), TcpRouteRuleActionDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleActionDestinationArrayInput)(nil)).Elem(), TcpRouteRuleActionDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleMatchInput)(nil)).Elem(), TcpRouteRuleMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleMatchArrayInput)(nil)).Elem(), TcpRouteRuleMatchArray{})
	pulumi.RegisterOutputType(EdgeCacheKeysetPublicKeyOutput{})
	pulumi.RegisterOutputType(EdgeCacheKeysetPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheKeysetValidationSharedKeyOutput{})
	pulumi.RegisterOutputType(EdgeCacheKeysetValidationSharedKeyArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginAwsV4AuthenticationOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginAwsV4AuthenticationPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginOverrideActionOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginOverrideActionPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginOverrideActionHeaderActionOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginOverrideActionHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginOverrideActionUrlRewriteOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginOverrideActionUrlRewritePtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginRedirectOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginOriginRedirectPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginTimeoutOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginTimeoutPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceLogConfigOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceLogConfigPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingHostRuleOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingHostRuleArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionCorsPolicyOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionDestinationOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionDestinationArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionFaultInjectionPolicyOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionFaultInjectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionFaultInjectionPolicyAbortOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionFaultInjectionPolicyAbortPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionFaultInjectionPolicyDelayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionFaultInjectionPolicyDelayPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRedirectOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRedirectPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRequestHeaderModifierOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRequestHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRequestMirrorPolicyOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRequestMirrorPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRequestMirrorPolicyDestinationOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRequestMirrorPolicyDestinationPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionResponseHeaderModifierOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionResponseHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRetryPolicyOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionUrlRewriteOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleActionUrlRewritePtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchHeaderOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchHeaderArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchHeaderRangeMatchOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchHeaderRangeMatchPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchQueryParameterArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleActionOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleActionDestinationOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleActionDestinationArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleMatchOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleMatchArrayOutput{})
}
