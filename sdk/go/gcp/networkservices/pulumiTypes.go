// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EdgeCacheKeysetPublicKey struct {
	// The ID of the public key. The ID must be 1-63 characters long, and comply with RFC1035.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]*
	// which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	Id string `pulumi:"id"`
	// The base64-encoded value of the Ed25519 public key. The base64 encoding can be padded (44 bytes) or unpadded (43 bytes).
	// Representations or encodings of the public key other than this will be rejected with an error.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Value string `pulumi:"value"`
}

// EdgeCacheKeysetPublicKeyInput is an input type that accepts EdgeCacheKeysetPublicKeyArgs and EdgeCacheKeysetPublicKeyOutput values.
// You can construct a concrete instance of `EdgeCacheKeysetPublicKeyInput` via:
//
//          EdgeCacheKeysetPublicKeyArgs{...}
type EdgeCacheKeysetPublicKeyInput interface {
	pulumi.Input

	ToEdgeCacheKeysetPublicKeyOutput() EdgeCacheKeysetPublicKeyOutput
	ToEdgeCacheKeysetPublicKeyOutputWithContext(context.Context) EdgeCacheKeysetPublicKeyOutput
}

type EdgeCacheKeysetPublicKeyArgs struct {
	// The ID of the public key. The ID must be 1-63 characters long, and comply with RFC1035.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]*
	// which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	Id pulumi.StringInput `pulumi:"id"`
	// The base64-encoded value of the Ed25519 public key. The base64 encoding can be padded (44 bytes) or unpadded (43 bytes).
	// Representations or encodings of the public key other than this will be rejected with an error.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EdgeCacheKeysetPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheKeysetPublicKey)(nil)).Elem()
}

func (i EdgeCacheKeysetPublicKeyArgs) ToEdgeCacheKeysetPublicKeyOutput() EdgeCacheKeysetPublicKeyOutput {
	return i.ToEdgeCacheKeysetPublicKeyOutputWithContext(context.Background())
}

func (i EdgeCacheKeysetPublicKeyArgs) ToEdgeCacheKeysetPublicKeyOutputWithContext(ctx context.Context) EdgeCacheKeysetPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheKeysetPublicKeyOutput)
}

// EdgeCacheKeysetPublicKeyArrayInput is an input type that accepts EdgeCacheKeysetPublicKeyArray and EdgeCacheKeysetPublicKeyArrayOutput values.
// You can construct a concrete instance of `EdgeCacheKeysetPublicKeyArrayInput` via:
//
//          EdgeCacheKeysetPublicKeyArray{ EdgeCacheKeysetPublicKeyArgs{...} }
type EdgeCacheKeysetPublicKeyArrayInput interface {
	pulumi.Input

	ToEdgeCacheKeysetPublicKeyArrayOutput() EdgeCacheKeysetPublicKeyArrayOutput
	ToEdgeCacheKeysetPublicKeyArrayOutputWithContext(context.Context) EdgeCacheKeysetPublicKeyArrayOutput
}

type EdgeCacheKeysetPublicKeyArray []EdgeCacheKeysetPublicKeyInput

func (EdgeCacheKeysetPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheKeysetPublicKey)(nil)).Elem()
}

func (i EdgeCacheKeysetPublicKeyArray) ToEdgeCacheKeysetPublicKeyArrayOutput() EdgeCacheKeysetPublicKeyArrayOutput {
	return i.ToEdgeCacheKeysetPublicKeyArrayOutputWithContext(context.Background())
}

func (i EdgeCacheKeysetPublicKeyArray) ToEdgeCacheKeysetPublicKeyArrayOutputWithContext(ctx context.Context) EdgeCacheKeysetPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheKeysetPublicKeyArrayOutput)
}

type EdgeCacheKeysetPublicKeyOutput struct{ *pulumi.OutputState }

func (EdgeCacheKeysetPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheKeysetPublicKey)(nil)).Elem()
}

func (o EdgeCacheKeysetPublicKeyOutput) ToEdgeCacheKeysetPublicKeyOutput() EdgeCacheKeysetPublicKeyOutput {
	return o
}

func (o EdgeCacheKeysetPublicKeyOutput) ToEdgeCacheKeysetPublicKeyOutputWithContext(ctx context.Context) EdgeCacheKeysetPublicKeyOutput {
	return o
}

// The ID of the public key. The ID must be 1-63 characters long, and comply with RFC1035.
// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]*
// which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
func (o EdgeCacheKeysetPublicKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheKeysetPublicKey) string { return v.Id }).(pulumi.StringOutput)
}

// The base64-encoded value of the Ed25519 public key. The base64 encoding can be padded (44 bytes) or unpadded (43 bytes).
// Representations or encodings of the public key other than this will be rejected with an error.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o EdgeCacheKeysetPublicKeyOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheKeysetPublicKey) string { return v.Value }).(pulumi.StringOutput)
}

type EdgeCacheKeysetPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheKeysetPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheKeysetPublicKey)(nil)).Elem()
}

func (o EdgeCacheKeysetPublicKeyArrayOutput) ToEdgeCacheKeysetPublicKeyArrayOutput() EdgeCacheKeysetPublicKeyArrayOutput {
	return o
}

func (o EdgeCacheKeysetPublicKeyArrayOutput) ToEdgeCacheKeysetPublicKeyArrayOutputWithContext(ctx context.Context) EdgeCacheKeysetPublicKeyArrayOutput {
	return o
}

func (o EdgeCacheKeysetPublicKeyArrayOutput) Index(i pulumi.IntInput) EdgeCacheKeysetPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheKeysetPublicKey {
		return vs[0].([]EdgeCacheKeysetPublicKey)[vs[1].(int)]
	}).(EdgeCacheKeysetPublicKeyOutput)
}

type EdgeCacheOriginTimeout struct {
	// The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
	// Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
	// The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
	// Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
	// If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
	MaxAttemptsTimeout *string `pulumi:"maxAttemptsTimeout"`
	// The maximum duration to wait between reads of a single HTTP connection/stream.
	// Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
	// The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
	// If the response headers have already been written to the connection, the response will be truncated and logged.
	ReadTimeout *string `pulumi:"readTimeout"`
	// The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
	// Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
	// The responseTimeout starts after the connection has been established.
	// This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
	// If the response headers have already been written to the connection, the response will be truncated and logged.
	ResponseTimeout *string `pulumi:"responseTimeout"`
}

// EdgeCacheOriginTimeoutInput is an input type that accepts EdgeCacheOriginTimeoutArgs and EdgeCacheOriginTimeoutOutput values.
// You can construct a concrete instance of `EdgeCacheOriginTimeoutInput` via:
//
//          EdgeCacheOriginTimeoutArgs{...}
type EdgeCacheOriginTimeoutInput interface {
	pulumi.Input

	ToEdgeCacheOriginTimeoutOutput() EdgeCacheOriginTimeoutOutput
	ToEdgeCacheOriginTimeoutOutputWithContext(context.Context) EdgeCacheOriginTimeoutOutput
}

type EdgeCacheOriginTimeoutArgs struct {
	// The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
	// Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
	// The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
	// Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
	// If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
	MaxAttemptsTimeout pulumi.StringPtrInput `pulumi:"maxAttemptsTimeout"`
	// The maximum duration to wait between reads of a single HTTP connection/stream.
	// Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
	// The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
	// If the response headers have already been written to the connection, the response will be truncated and logged.
	ReadTimeout pulumi.StringPtrInput `pulumi:"readTimeout"`
	// The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
	// Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
	// The responseTimeout starts after the connection has been established.
	// This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
	// If the response headers have already been written to the connection, the response will be truncated and logged.
	ResponseTimeout pulumi.StringPtrInput `pulumi:"responseTimeout"`
}

func (EdgeCacheOriginTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginTimeout)(nil)).Elem()
}

func (i EdgeCacheOriginTimeoutArgs) ToEdgeCacheOriginTimeoutOutput() EdgeCacheOriginTimeoutOutput {
	return i.ToEdgeCacheOriginTimeoutOutputWithContext(context.Background())
}

func (i EdgeCacheOriginTimeoutArgs) ToEdgeCacheOriginTimeoutOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginTimeoutOutput)
}

func (i EdgeCacheOriginTimeoutArgs) ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput {
	return i.ToEdgeCacheOriginTimeoutPtrOutputWithContext(context.Background())
}

func (i EdgeCacheOriginTimeoutArgs) ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginTimeoutOutput).ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx)
}

// EdgeCacheOriginTimeoutPtrInput is an input type that accepts EdgeCacheOriginTimeoutArgs, EdgeCacheOriginTimeoutPtr and EdgeCacheOriginTimeoutPtrOutput values.
// You can construct a concrete instance of `EdgeCacheOriginTimeoutPtrInput` via:
//
//          EdgeCacheOriginTimeoutArgs{...}
//
//  or:
//
//          nil
type EdgeCacheOriginTimeoutPtrInput interface {
	pulumi.Input

	ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput
	ToEdgeCacheOriginTimeoutPtrOutputWithContext(context.Context) EdgeCacheOriginTimeoutPtrOutput
}

type edgeCacheOriginTimeoutPtrType EdgeCacheOriginTimeoutArgs

func EdgeCacheOriginTimeoutPtr(v *EdgeCacheOriginTimeoutArgs) EdgeCacheOriginTimeoutPtrInput {
	return (*edgeCacheOriginTimeoutPtrType)(v)
}

func (*edgeCacheOriginTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginTimeout)(nil)).Elem()
}

func (i *edgeCacheOriginTimeoutPtrType) ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput {
	return i.ToEdgeCacheOriginTimeoutPtrOutputWithContext(context.Background())
}

func (i *edgeCacheOriginTimeoutPtrType) ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheOriginTimeoutPtrOutput)
}

type EdgeCacheOriginTimeoutOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheOriginTimeout)(nil)).Elem()
}

func (o EdgeCacheOriginTimeoutOutput) ToEdgeCacheOriginTimeoutOutput() EdgeCacheOriginTimeoutOutput {
	return o
}

func (o EdgeCacheOriginTimeoutOutput) ToEdgeCacheOriginTimeoutOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutOutput {
	return o
}

func (o EdgeCacheOriginTimeoutOutput) ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput {
	return o.ToEdgeCacheOriginTimeoutPtrOutputWithContext(context.Background())
}

func (o EdgeCacheOriginTimeoutOutput) ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheOriginTimeout) *EdgeCacheOriginTimeout {
		return &v
	}).(EdgeCacheOriginTimeoutPtrOutput)
}

// The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
// Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
// The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
func (o EdgeCacheOriginTimeoutOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginTimeout) *string { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
// Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
// If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
func (o EdgeCacheOriginTimeoutOutput) MaxAttemptsTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginTimeout) *string { return v.MaxAttemptsTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration to wait between reads of a single HTTP connection/stream.
// Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
// The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
// If the response headers have already been written to the connection, the response will be truncated and logged.
func (o EdgeCacheOriginTimeoutOutput) ReadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginTimeout) *string { return v.ReadTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
// Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
// The responseTimeout starts after the connection has been established.
// This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
// If the response headers have already been written to the connection, the response will be truncated and logged.
func (o EdgeCacheOriginTimeoutOutput) ResponseTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheOriginTimeout) *string { return v.ResponseTimeout }).(pulumi.StringPtrOutput)
}

type EdgeCacheOriginTimeoutPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheOriginTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheOriginTimeout)(nil)).Elem()
}

func (o EdgeCacheOriginTimeoutPtrOutput) ToEdgeCacheOriginTimeoutPtrOutput() EdgeCacheOriginTimeoutPtrOutput {
	return o
}

func (o EdgeCacheOriginTimeoutPtrOutput) ToEdgeCacheOriginTimeoutPtrOutputWithContext(ctx context.Context) EdgeCacheOriginTimeoutPtrOutput {
	return o
}

func (o EdgeCacheOriginTimeoutPtrOutput) Elem() EdgeCacheOriginTimeoutOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) EdgeCacheOriginTimeout {
		if v != nil {
			return *v
		}
		var ret EdgeCacheOriginTimeout
		return ret
	}).(EdgeCacheOriginTimeoutOutput)
}

// The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
// Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
// The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
func (o EdgeCacheOriginTimeoutPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
// Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
// If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
func (o EdgeCacheOriginTimeoutPtrOutput) MaxAttemptsTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) *string {
		if v == nil {
			return nil
		}
		return v.MaxAttemptsTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration to wait between reads of a single HTTP connection/stream.
// Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
// The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
// If the response headers have already been written to the connection, the response will be truncated and logged.
func (o EdgeCacheOriginTimeoutPtrOutput) ReadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) *string {
		if v == nil {
			return nil
		}
		return v.ReadTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
// Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
// The responseTimeout starts after the connection has been established.
// This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
// If the response headers have already been written to the connection, the response will be truncated and logged.
func (o EdgeCacheOriginTimeoutPtrOutput) ResponseTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheOriginTimeout) *string {
		if v == nil {
			return nil
		}
		return v.ResponseTimeout
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceLogConfig struct {
	// Specifies whether to enable logging for traffic served by this service.
	Enable *bool `pulumi:"enable"`
	// Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
	// This field can only be specified if logging is enabled for this service.
	SampleRate *float64 `pulumi:"sampleRate"`
}

// EdgeCacheServiceLogConfigInput is an input type that accepts EdgeCacheServiceLogConfigArgs and EdgeCacheServiceLogConfigOutput values.
// You can construct a concrete instance of `EdgeCacheServiceLogConfigInput` via:
//
//          EdgeCacheServiceLogConfigArgs{...}
type EdgeCacheServiceLogConfigInput interface {
	pulumi.Input

	ToEdgeCacheServiceLogConfigOutput() EdgeCacheServiceLogConfigOutput
	ToEdgeCacheServiceLogConfigOutputWithContext(context.Context) EdgeCacheServiceLogConfigOutput
}

type EdgeCacheServiceLogConfigArgs struct {
	// Specifies whether to enable logging for traffic served by this service.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
	// This field can only be specified if logging is enabled for this service.
	SampleRate pulumi.Float64PtrInput `pulumi:"sampleRate"`
}

func (EdgeCacheServiceLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceLogConfig)(nil)).Elem()
}

func (i EdgeCacheServiceLogConfigArgs) ToEdgeCacheServiceLogConfigOutput() EdgeCacheServiceLogConfigOutput {
	return i.ToEdgeCacheServiceLogConfigOutputWithContext(context.Background())
}

func (i EdgeCacheServiceLogConfigArgs) ToEdgeCacheServiceLogConfigOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceLogConfigOutput)
}

func (i EdgeCacheServiceLogConfigArgs) ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput {
	return i.ToEdgeCacheServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceLogConfigArgs) ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceLogConfigOutput).ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx)
}

// EdgeCacheServiceLogConfigPtrInput is an input type that accepts EdgeCacheServiceLogConfigArgs, EdgeCacheServiceLogConfigPtr and EdgeCacheServiceLogConfigPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceLogConfigPtrInput` via:
//
//          EdgeCacheServiceLogConfigArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceLogConfigPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput
	ToEdgeCacheServiceLogConfigPtrOutputWithContext(context.Context) EdgeCacheServiceLogConfigPtrOutput
}

type edgeCacheServiceLogConfigPtrType EdgeCacheServiceLogConfigArgs

func EdgeCacheServiceLogConfigPtr(v *EdgeCacheServiceLogConfigArgs) EdgeCacheServiceLogConfigPtrInput {
	return (*edgeCacheServiceLogConfigPtrType)(v)
}

func (*edgeCacheServiceLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceLogConfig)(nil)).Elem()
}

func (i *edgeCacheServiceLogConfigPtrType) ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput {
	return i.ToEdgeCacheServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceLogConfigPtrType) ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceLogConfigPtrOutput)
}

type EdgeCacheServiceLogConfigOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceLogConfig)(nil)).Elem()
}

func (o EdgeCacheServiceLogConfigOutput) ToEdgeCacheServiceLogConfigOutput() EdgeCacheServiceLogConfigOutput {
	return o
}

func (o EdgeCacheServiceLogConfigOutput) ToEdgeCacheServiceLogConfigOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigOutput {
	return o
}

func (o EdgeCacheServiceLogConfigOutput) ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput {
	return o.ToEdgeCacheServiceLogConfigPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceLogConfigOutput) ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceLogConfig) *EdgeCacheServiceLogConfig {
		return &v
	}).(EdgeCacheServiceLogConfigPtrOutput)
}

// Specifies whether to enable logging for traffic served by this service.
func (o EdgeCacheServiceLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
// This field can only be specified if logging is enabled for this service.
func (o EdgeCacheServiceLogConfigOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceLogConfig) *float64 { return v.SampleRate }).(pulumi.Float64PtrOutput)
}

type EdgeCacheServiceLogConfigPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceLogConfig)(nil)).Elem()
}

func (o EdgeCacheServiceLogConfigPtrOutput) ToEdgeCacheServiceLogConfigPtrOutput() EdgeCacheServiceLogConfigPtrOutput {
	return o
}

func (o EdgeCacheServiceLogConfigPtrOutput) ToEdgeCacheServiceLogConfigPtrOutputWithContext(ctx context.Context) EdgeCacheServiceLogConfigPtrOutput {
	return o
}

func (o EdgeCacheServiceLogConfigPtrOutput) Elem() EdgeCacheServiceLogConfigOutput {
	return o.ApplyT(func(v *EdgeCacheServiceLogConfig) EdgeCacheServiceLogConfig {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceLogConfig
		return ret
	}).(EdgeCacheServiceLogConfigOutput)
}

// Specifies whether to enable logging for traffic served by this service.
func (o EdgeCacheServiceLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
// This field can only be specified if logging is enabled for this service.
func (o EdgeCacheServiceLogConfigPtrOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.SampleRate
	}).(pulumi.Float64PtrOutput)
}

type EdgeCacheServiceRouting struct {
	// The list of hostRules to match against. These rules define which hostnames the EdgeCacheService will match against, and which route configurations apply.
	// Structure is documented below.
	HostRules []EdgeCacheServiceRoutingHostRule `pulumi:"hostRules"`
	// The name of the pathMatcher associated with this hostRule.
	PathMatchers []EdgeCacheServiceRoutingPathMatcher `pulumi:"pathMatchers"`
}

// EdgeCacheServiceRoutingInput is an input type that accepts EdgeCacheServiceRoutingArgs and EdgeCacheServiceRoutingOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingInput` via:
//
//          EdgeCacheServiceRoutingArgs{...}
type EdgeCacheServiceRoutingInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingOutput() EdgeCacheServiceRoutingOutput
	ToEdgeCacheServiceRoutingOutputWithContext(context.Context) EdgeCacheServiceRoutingOutput
}

type EdgeCacheServiceRoutingArgs struct {
	// The list of hostRules to match against. These rules define which hostnames the EdgeCacheService will match against, and which route configurations apply.
	// Structure is documented below.
	HostRules EdgeCacheServiceRoutingHostRuleArrayInput `pulumi:"hostRules"`
	// The name of the pathMatcher associated with this hostRule.
	PathMatchers EdgeCacheServiceRoutingPathMatcherArrayInput `pulumi:"pathMatchers"`
}

func (EdgeCacheServiceRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRouting)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingArgs) ToEdgeCacheServiceRoutingOutput() EdgeCacheServiceRoutingOutput {
	return i.ToEdgeCacheServiceRoutingOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingArgs) ToEdgeCacheServiceRoutingOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingOutput)
}

func (i EdgeCacheServiceRoutingArgs) ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput {
	return i.ToEdgeCacheServiceRoutingPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingArgs) ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingOutput).ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPtrInput is an input type that accepts EdgeCacheServiceRoutingArgs, EdgeCacheServiceRoutingPtr and EdgeCacheServiceRoutingPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPtrInput` via:
//
//          EdgeCacheServiceRoutingArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceRoutingPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput
	ToEdgeCacheServiceRoutingPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPtrOutput
}

type edgeCacheServiceRoutingPtrType EdgeCacheServiceRoutingArgs

func EdgeCacheServiceRoutingPtr(v *EdgeCacheServiceRoutingArgs) EdgeCacheServiceRoutingPtrInput {
	return (*edgeCacheServiceRoutingPtrType)(v)
}

func (*edgeCacheServiceRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRouting)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPtrType) ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput {
	return i.ToEdgeCacheServiceRoutingPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPtrType) ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPtrOutput)
}

type EdgeCacheServiceRoutingOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRouting)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingOutput) ToEdgeCacheServiceRoutingOutput() EdgeCacheServiceRoutingOutput {
	return o
}

func (o EdgeCacheServiceRoutingOutput) ToEdgeCacheServiceRoutingOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingOutput {
	return o
}

func (o EdgeCacheServiceRoutingOutput) ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput {
	return o.ToEdgeCacheServiceRoutingPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingOutput) ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRouting) *EdgeCacheServiceRouting {
		return &v
	}).(EdgeCacheServiceRoutingPtrOutput)
}

// The list of hostRules to match against. These rules define which hostnames the EdgeCacheService will match against, and which route configurations apply.
// Structure is documented below.
func (o EdgeCacheServiceRoutingOutput) HostRules() EdgeCacheServiceRoutingHostRuleArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRouting) []EdgeCacheServiceRoutingHostRule { return v.HostRules }).(EdgeCacheServiceRoutingHostRuleArrayOutput)
}

// The name of the pathMatcher associated with this hostRule.
func (o EdgeCacheServiceRoutingOutput) PathMatchers() EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRouting) []EdgeCacheServiceRoutingPathMatcher { return v.PathMatchers }).(EdgeCacheServiceRoutingPathMatcherArrayOutput)
}

type EdgeCacheServiceRoutingPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRouting)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPtrOutput) ToEdgeCacheServiceRoutingPtrOutput() EdgeCacheServiceRoutingPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPtrOutput) ToEdgeCacheServiceRoutingPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPtrOutput) Elem() EdgeCacheServiceRoutingOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRouting) EdgeCacheServiceRouting {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRouting
		return ret
	}).(EdgeCacheServiceRoutingOutput)
}

// The list of hostRules to match against. These rules define which hostnames the EdgeCacheService will match against, and which route configurations apply.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPtrOutput) HostRules() EdgeCacheServiceRoutingHostRuleArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRouting) []EdgeCacheServiceRoutingHostRule {
		if v == nil {
			return nil
		}
		return v.HostRules
	}).(EdgeCacheServiceRoutingHostRuleArrayOutput)
}

// The name of the pathMatcher associated with this hostRule.
func (o EdgeCacheServiceRoutingPtrOutput) PathMatchers() EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRouting) []EdgeCacheServiceRoutingPathMatcher {
		if v == nil {
			return nil
		}
		return v.PathMatchers
	}).(EdgeCacheServiceRoutingPathMatcherArrayOutput)
}

type EdgeCacheServiceRoutingHostRule struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// The list of host patterns to match.
	// Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
	// When multiple hosts are specified, hosts are matched in the following priority:
	// 1. Exact domain names: ``www.foo.com``.
	// 2. Suffix domain wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
	// 3. Prefix domain wildcards: ``foo.*`` or ``foo-*``.
	// 4. Special wildcard ``*`` matching any domain.
	//    Notes:
	//    The wildcard will not match the empty string. e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``. The longest wildcards match first. Only a single host in the entire service can match on ``*``. A domain must be unique across all configured hosts within a service.
	//    Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the ":authority" header, from the incoming request.
	//    You may specify up to 10 hosts.
	Hosts []string `pulumi:"hosts"`
	// The name of the pathMatcher associated with this hostRule.
	PathMatcher string `pulumi:"pathMatcher"`
}

// EdgeCacheServiceRoutingHostRuleInput is an input type that accepts EdgeCacheServiceRoutingHostRuleArgs and EdgeCacheServiceRoutingHostRuleOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingHostRuleInput` via:
//
//          EdgeCacheServiceRoutingHostRuleArgs{...}
type EdgeCacheServiceRoutingHostRuleInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingHostRuleOutput() EdgeCacheServiceRoutingHostRuleOutput
	ToEdgeCacheServiceRoutingHostRuleOutputWithContext(context.Context) EdgeCacheServiceRoutingHostRuleOutput
}

type EdgeCacheServiceRoutingHostRuleArgs struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The list of host patterns to match.
	// Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
	// When multiple hosts are specified, hosts are matched in the following priority:
	// 1. Exact domain names: ``www.foo.com``.
	// 2. Suffix domain wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
	// 3. Prefix domain wildcards: ``foo.*`` or ``foo-*``.
	// 4. Special wildcard ``*`` matching any domain.
	//    Notes:
	//    The wildcard will not match the empty string. e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``. The longest wildcards match first. Only a single host in the entire service can match on ``*``. A domain must be unique across all configured hosts within a service.
	//    Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the ":authority" header, from the incoming request.
	//    You may specify up to 10 hosts.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The name of the pathMatcher associated with this hostRule.
	PathMatcher pulumi.StringInput `pulumi:"pathMatcher"`
}

func (EdgeCacheServiceRoutingHostRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingHostRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingHostRuleArgs) ToEdgeCacheServiceRoutingHostRuleOutput() EdgeCacheServiceRoutingHostRuleOutput {
	return i.ToEdgeCacheServiceRoutingHostRuleOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingHostRuleArgs) ToEdgeCacheServiceRoutingHostRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingHostRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingHostRuleOutput)
}

// EdgeCacheServiceRoutingHostRuleArrayInput is an input type that accepts EdgeCacheServiceRoutingHostRuleArray and EdgeCacheServiceRoutingHostRuleArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingHostRuleArrayInput` via:
//
//          EdgeCacheServiceRoutingHostRuleArray{ EdgeCacheServiceRoutingHostRuleArgs{...} }
type EdgeCacheServiceRoutingHostRuleArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingHostRuleArrayOutput() EdgeCacheServiceRoutingHostRuleArrayOutput
	ToEdgeCacheServiceRoutingHostRuleArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingHostRuleArrayOutput
}

type EdgeCacheServiceRoutingHostRuleArray []EdgeCacheServiceRoutingHostRuleInput

func (EdgeCacheServiceRoutingHostRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingHostRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingHostRuleArray) ToEdgeCacheServiceRoutingHostRuleArrayOutput() EdgeCacheServiceRoutingHostRuleArrayOutput {
	return i.ToEdgeCacheServiceRoutingHostRuleArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingHostRuleArray) ToEdgeCacheServiceRoutingHostRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingHostRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingHostRuleArrayOutput)
}

type EdgeCacheServiceRoutingHostRuleOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingHostRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingHostRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingHostRuleOutput) ToEdgeCacheServiceRoutingHostRuleOutput() EdgeCacheServiceRoutingHostRuleOutput {
	return o
}

func (o EdgeCacheServiceRoutingHostRuleOutput) ToEdgeCacheServiceRoutingHostRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingHostRuleOutput {
	return o
}

// A human-readable description of the resource.
func (o EdgeCacheServiceRoutingHostRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingHostRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of host patterns to match.
// Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
// When multiple hosts are specified, hosts are matched in the following priority:
// 1. Exact domain names: ``www.foo.com``.
// 2. Suffix domain wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
// 3. Prefix domain wildcards: ``foo.*`` or ``foo-*``.
// 4. Special wildcard ``*`` matching any domain.
//    Notes:
//    The wildcard will not match the empty string. e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``. The longest wildcards match first. Only a single host in the entire service can match on ``*``. A domain must be unique across all configured hosts within a service.
//    Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the ":authority" header, from the incoming request.
//    You may specify up to 10 hosts.
func (o EdgeCacheServiceRoutingHostRuleOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingHostRule) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The name of the pathMatcher associated with this hostRule.
func (o EdgeCacheServiceRoutingHostRuleOutput) PathMatcher() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingHostRule) string { return v.PathMatcher }).(pulumi.StringOutput)
}

type EdgeCacheServiceRoutingHostRuleArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingHostRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingHostRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingHostRuleArrayOutput) ToEdgeCacheServiceRoutingHostRuleArrayOutput() EdgeCacheServiceRoutingHostRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingHostRuleArrayOutput) ToEdgeCacheServiceRoutingHostRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingHostRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingHostRuleArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingHostRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingHostRule {
		return vs[0].([]EdgeCacheServiceRoutingHostRule)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingHostRuleOutput)
}

type EdgeCacheServiceRoutingPathMatcher struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// The routeRules to match against. routeRules support advanced routing behaviour, and can match on paths, headers and query parameters, as well as status codes and HTTP methods.
	// Structure is documented below.
	RouteRules []EdgeCacheServiceRoutingPathMatcherRouteRule `pulumi:"routeRules"`
}

// EdgeCacheServiceRoutingPathMatcherInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherArgs and EdgeCacheServiceRoutingPathMatcherOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherArgs{...}
type EdgeCacheServiceRoutingPathMatcherInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherOutput() EdgeCacheServiceRoutingPathMatcherOutput
	ToEdgeCacheServiceRoutingPathMatcherOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherOutput
}

type EdgeCacheServiceRoutingPathMatcherArgs struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// The routeRules to match against. routeRules support advanced routing behaviour, and can match on paths, headers and query parameters, as well as status codes and HTTP methods.
	// Structure is documented below.
	RouteRules EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput `pulumi:"routeRules"`
}

func (EdgeCacheServiceRoutingPathMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcher)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherArgs) ToEdgeCacheServiceRoutingPathMatcherOutput() EdgeCacheServiceRoutingPathMatcherOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherArgs) ToEdgeCacheServiceRoutingPathMatcherOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherOutput)
}

// EdgeCacheServiceRoutingPathMatcherArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherArray and EdgeCacheServiceRoutingPathMatcherArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherArray{ EdgeCacheServiceRoutingPathMatcherArgs{...} }
type EdgeCacheServiceRoutingPathMatcherArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherArrayOutput() EdgeCacheServiceRoutingPathMatcherArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherArray []EdgeCacheServiceRoutingPathMatcherInput

func (EdgeCacheServiceRoutingPathMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcher)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherArray) ToEdgeCacheServiceRoutingPathMatcherArrayOutput() EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherArray) ToEdgeCacheServiceRoutingPathMatcherArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcher)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherOutput) ToEdgeCacheServiceRoutingPathMatcherOutput() EdgeCacheServiceRoutingPathMatcherOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherOutput) ToEdgeCacheServiceRoutingPathMatcherOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherOutput {
	return o
}

// A human-readable description of the resource.
func (o EdgeCacheServiceRoutingPathMatcherOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcher) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
func (o EdgeCacheServiceRoutingPathMatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcher) string { return v.Name }).(pulumi.StringOutput)
}

// The routeRules to match against. routeRules support advanced routing behaviour, and can match on paths, headers and query parameters, as well as status codes and HTTP methods.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherOutput) RouteRules() EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcher) []EdgeCacheServiceRoutingPathMatcherRouteRule {
		return v.RouteRules
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcher)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherArrayOutput) ToEdgeCacheServiceRoutingPathMatcherArrayOutput() EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherArrayOutput) ToEdgeCacheServiceRoutingPathMatcherArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcher {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcher)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRule struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// The header actions, including adding & removing headers, for requests that match this route.
	// Structure is documented below.
	HeaderAction *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction `pulumi:"headerAction"`
	// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates
	// within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
	// Structure is documented below.
	MatchRules []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule `pulumi:"matchRules"`
	// The Origin resource that requests to this route should fetch from when a matching response is not in cache. Origins can be defined as short names ("my-origin") or fully-qualified resource URLs - e.g. "networkservices.googleapis.com/projects/my-project/global/edgecacheorigins/my-origin"
	// Only one of origin or urlRedirect can be set.
	Origin *string `pulumi:"origin"`
	// The priority of this route rule, where 1 is the highest priority.
	// You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 1 and 999 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers
	// to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
	Priority string `pulumi:"priority"`
	// In response to a matching path, the routeAction performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected origin.
	// Structure is documented below.
	RouteAction *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction `pulumi:"routeAction"`
	// The URL redirect configuration for requests that match this route.
	// Structure is documented below.
	UrlRedirect *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect `pulumi:"urlRedirect"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleArgs struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The header actions, including adding & removing headers, for requests that match this route.
	// Structure is documented below.
	HeaderAction EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput `pulumi:"headerAction"`
	// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates
	// within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
	// Structure is documented below.
	MatchRules EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput `pulumi:"matchRules"`
	// The Origin resource that requests to this route should fetch from when a matching response is not in cache. Origins can be defined as short names ("my-origin") or fully-qualified resource URLs - e.g. "networkservices.googleapis.com/projects/my-project/global/edgecacheorigins/my-origin"
	// Only one of origin or urlRedirect can be set.
	Origin pulumi.StringPtrInput `pulumi:"origin"`
	// The priority of this route rule, where 1 is the highest priority.
	// You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 1 and 999 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers
	// to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
	Priority pulumi.StringInput `pulumi:"priority"`
	// In response to a matching path, the routeAction performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected origin.
	// Structure is documented below.
	RouteAction EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput `pulumi:"routeAction"`
	// The URL redirect configuration for requests that match this route.
	// Structure is documented below.
	UrlRedirect EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput `pulumi:"urlRedirect"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleArray and EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleArray []EdgeCacheServiceRoutingPathMatcherRouteRuleInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return o
}

// A human-readable description of the resource.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The header actions, including adding & removing headers, for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) HeaderAction() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction {
		return v.HeaderAction
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput)
}

// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates
// within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) MatchRules() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule {
		return v.MatchRules
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput)
}

// The Origin resource that requests to this route should fetch from when a matching response is not in cache. Origins can be defined as short names ("my-origin") or fully-qualified resource URLs - e.g. "networkservices.googleapis.com/projects/my-project/global/edgecacheorigins/my-origin"
// Only one of origin or urlRedirect can be set.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *string { return v.Origin }).(pulumi.StringPtrOutput)
}

// The priority of this route rule, where 1 is the highest priority.
// You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 1 and 999 inclusive.
// Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers
// to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) string { return v.Priority }).(pulumi.StringOutput)
}

// In response to a matching path, the routeAction performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) RouteAction() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction {
		return v.RouteAction
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput)
}

// The URL redirect configuration for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleOutput) UrlRedirect() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRule) *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect {
		return v.UrlRedirect
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRule {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRule)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction struct {
	// Describes a header to add.
	// Structure is documented below.
	RequestHeaderToAdds []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd `pulumi:"requestHeaderToAdds"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
	// Structure is documented below.
	RequestHeaderToRemoves []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove `pulumi:"requestHeaderToRemoves"`
	// Headers to add to the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	// Structure is documented below.
	ResponseHeaderToAdds []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd `pulumi:"responseHeaderToAdds"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
	// Structure is documented below.
	ResponseHeaderToRemoves []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove `pulumi:"responseHeaderToRemoves"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs struct {
	// Describes a header to add.
	// Structure is documented below.
	RequestHeaderToAdds EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput `pulumi:"requestHeaderToAdds"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
	// Structure is documented below.
	RequestHeaderToRemoves EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput `pulumi:"requestHeaderToRemoves"`
	// Headers to add to the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	// Structure is documented below.
	ResponseHeaderToAdds EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput `pulumi:"responseHeaderToAdds"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
	// Structure is documented below.
	ResponseHeaderToRemoves EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput `pulumi:"responseHeaderToRemoves"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput)
}

// Describes a header to add.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) RequestHeaderToAdds() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd {
		return v.RequestHeaderToAdds
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) RequestHeaderToRemoves() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove {
		return v.RequestHeaderToRemoves
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput)
}

// Headers to add to the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ResponseHeaderToAdds() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd {
		return v.ResponseHeaderToAdds
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput) ResponseHeaderToRemoves() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove {
		return v.ResponseHeaderToRemoves
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput)
}

// Describes a header to add.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) RequestHeaderToAdds() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeaderToAdds
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) RequestHeaderToRemoves() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove {
		if v == nil {
			return nil
		}
		return v.RequestHeaderToRemoves
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput)
}

// Headers to add to the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ResponseHeaderToAdds() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeaderToAdds
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput) ResponseHeaderToRemoves() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction) []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove {
		if v == nil {
			return nil
		}
		return v.ResponseHeaderToRemoves
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	Replace *bool `pulumi:"replace"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return o
}

// Headers to remove from the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// Whether to replace all existing headers with the same name.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd) *bool {
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName string `pulumi:"headerName"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return o
}

// Headers to remove from the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	Replace *bool `pulumi:"replace"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// Whether to replace all existing headers with the same name.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return o
}

// Headers to remove from the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// Whether to replace all existing headers with the same name.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd) *bool {
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName string `pulumi:"headerName"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs struct {
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray and EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray []EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return o
}

// Headers to remove from the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule struct {
	// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
	FullPathMatch *string `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
	// Structure is documented below.
	HeaderMatches []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// For satisfying the matchRule condition, the path of the request
	// must match the wildcard pattern specified in pathTemplateMatch
	// after removing any query parameters and anchor that may be part
	// of the original URL.
	// pathTemplateMatch must be between 1 and 255 characters
	// (inclusive).  The pattern specified by pathTemplateMatch may
	// have at most 5 wildcard operators and at most 5 variable
	// captures in total.
	PathTemplateMatch *string `pulumi:"pathTemplateMatch"`
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
	// Structure is documented below.
	QueryParameterMatches []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch `pulumi:"queryParameterMatches"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs struct {
	// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
	FullPathMatch pulumi.StringPtrInput `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
	// Structure is documented below.
	HeaderMatches EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// For satisfying the matchRule condition, the path of the request
	// must match the wildcard pattern specified in pathTemplateMatch
	// after removing any query parameters and anchor that may be part
	// of the original URL.
	// pathTemplateMatch must be between 1 and 255 characters
	// (inclusive).  The pattern specified by pathTemplateMatch may
	// have at most 5 wildcard operators and at most 5 variable
	// captures in total.
	PathTemplateMatch pulumi.StringPtrInput `pulumi:"pathTemplateMatch"`
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
	// Structure is documented below.
	QueryParameterMatches EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput `pulumi:"queryParameterMatches"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return o
}

// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) FullPathMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) *string { return v.FullPathMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) HeaderMatches() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch {
		return v.HeaderMatches
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput)
}

// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// For satisfying the matchRule condition, the path of the request
// must match the wildcard pattern specified in pathTemplateMatch
// after removing any query parameters and anchor that may be part
// of the original URL.
// pathTemplateMatch must be between 1 and 255 characters
// (inclusive).  The pattern specified by pathTemplateMatch may
// have at most 5 wildcard operators and at most 5 variable
// captures in total.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) PathTemplateMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) *string { return v.PathTemplateMatch }).(pulumi.StringPtrOutput)
}

// The value of the header must start with the contents of prefixMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput) QueryParameterMatches() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule) []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch {
		return v.QueryParameterMatches
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
	ExactMatch *string `pulumi:"exactMatch"`
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName string `pulumi:"headerName"`
	// If set to false (default), the headerMatch is considered a match if the match criteria above are met.
	// If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
	InvertMatch *bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The value of the header must end with the contents of suffixMatch.
	SuffixMatch *string `pulumi:"suffixMatch"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// Headers to remove from the response prior to sending it back to the client.
	// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// If set to false (default), the headerMatch is considered a match if the match criteria above are met.
	// If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
	InvertMatch pulumi.BoolPtrInput `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The value of the header must end with the contents of suffixMatch.
	SuffixMatch pulumi.StringPtrInput `pulumi:"suffixMatch"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// Headers to remove from the response prior to sending it back to the client.
// Response headers are only sent to the client, and do not have an effect on the cache serving the response.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) string { return v.HeaderName }).(pulumi.StringOutput)
}

// If set to false (default), the headerMatch is considered a match if the match criteria above are met.
// If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) InvertMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *bool { return v.InvertMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must start with the contents of prefixMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must end with the contents of suffixMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput) SuffixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.SuffixMatch }).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
	PresentMatch *bool `pulumi:"presentMatch"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray and EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray{ EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{...} }
type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray []EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch) *string {
		return v.ExactMatch
	}).(pulumi.StringPtrOutput)
}

// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch) *bool {
		return v.PresentMatch
	}).(pulumi.BoolPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) Index(i pulumi.IntInput) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch {
		return vs[0].([]EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch)[vs[1].(int)]
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction struct {
	// The policy to use for defining caching and signed request behaviour for requests that match this route.
	// Structure is documented below.
	CdnPolicy *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy `pulumi:"cdnPolicy"`
	// CORSPolicy defines Cross-Origin-Resource-Sharing configuration, including which CORS response headers will be set.
	// Structure is documented below.
	CorsPolicy *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy `pulumi:"corsPolicy"`
	// The URL rewrite configuration for requests that match this route.
	// Structure is documented below.
	UrlRewrite *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite `pulumi:"urlRewrite"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs struct {
	// The policy to use for defining caching and signed request behaviour for requests that match this route.
	// Structure is documented below.
	CdnPolicy EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput `pulumi:"cdnPolicy"`
	// CORSPolicy defines Cross-Origin-Resource-Sharing configuration, including which CORS response headers will be set.
	// Structure is documented below.
	CorsPolicy EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The URL rewrite configuration for requests that match this route.
	// Structure is documented below.
	UrlRewrite EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput `pulumi:"urlRewrite"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput)
}

// The policy to use for defining caching and signed request behaviour for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) CdnPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy {
		return v.CdnPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput)
}

// CORSPolicy defines Cross-Origin-Resource-Sharing configuration, including which CORS response headers will be set.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) CorsPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy {
		return v.CorsPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// The URL rewrite configuration for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput) UrlRewrite() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite {
		return v.UrlRewrite
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput)
}

// The policy to use for defining caching and signed request behaviour for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) CdnPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy {
		if v == nil {
			return nil
		}
		return v.CdnPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput)
}

// CORSPolicy defines Cross-Origin-Resource-Sharing configuration, including which CORS response headers will be set.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) CorsPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// The URL rewrite configuration for requests that match this route.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput) UrlRewrite() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy struct {
	// Defines the request parameters that contribute to the cache key.
	// Structure is documented below.
	CacheKeyPolicy *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy `pulumi:"cacheKeyPolicy"`
	// Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
	// For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client.
	// Possible values are `CACHE_ALL_STATIC`, `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, and `BYPASS_CACHE`.
	CacheMode *string `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
	// - The TTL must be > 0 and <= 86400s (1 day)
	// - The clientTtl cannot be larger than the defaultTtl (if set)
	// - Fractions of a second are not allowed.
	//   Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	ClientTtl *string `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
	// Defaults to 3600s (1 hour).
	// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
	// - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
	// - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
	// - Fractions of a second are not allowed.
	// - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
	//   Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	DefaultTtl *string `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin.
	// Defaults to 86400s (1 day).
	// Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
	// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
	// - Setting a TTL of "0" means "always revalidate"
	// - The value of maxTtl must be equal to or greater than defaultTtl.
	// - Fractions of a second are not allowed.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	MaxTtl *string `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
	// By default, the CDNPolicy will apply the following default TTLs to these status codes:
	// - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
	// - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
	// - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
	//   These defaults can be overridden in negativeCachingPolicy
	NegativeCaching *bool `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
	// - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
	// - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
	//   Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy map[string]string `pulumi:"negativeCachingPolicy"`
	// The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
	SignedRequestKeyset *string `pulumi:"signedRequestKeyset"`
	// Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
	// You must also set a signedRequestKeyset to enable signed requests.
	// When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged.
	// Possible values are `DISABLED` and `REQUIRE_SIGNATURES`.
	SignedRequestMode *string `pulumi:"signedRequestMode"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs struct {
	// Defines the request parameters that contribute to the cache key.
	// Structure is documented below.
	CacheKeyPolicy EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput `pulumi:"cacheKeyPolicy"`
	// Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
	// For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client.
	// Possible values are `CACHE_ALL_STATIC`, `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, and `BYPASS_CACHE`.
	CacheMode pulumi.StringPtrInput `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
	// - The TTL must be > 0 and <= 86400s (1 day)
	// - The clientTtl cannot be larger than the defaultTtl (if set)
	// - Fractions of a second are not allowed.
	//   Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	ClientTtl pulumi.StringPtrInput `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
	// Defaults to 3600s (1 hour).
	// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
	// - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
	// - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
	// - Fractions of a second are not allowed.
	// - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
	//   Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	DefaultTtl pulumi.StringPtrInput `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin.
	// Defaults to 86400s (1 day).
	// Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
	// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
	// - Setting a TTL of "0" means "always revalidate"
	// - The value of maxTtl must be equal to or greater than defaultTtl.
	// - Fractions of a second are not allowed.
	//   When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
	//   A duration in seconds terminated by 's'. Example: "3s".
	MaxTtl pulumi.StringPtrInput `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
	// By default, the CDNPolicy will apply the following default TTLs to these status codes:
	// - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
	// - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
	// - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
	//   These defaults can be overridden in negativeCachingPolicy
	NegativeCaching pulumi.BoolPtrInput `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
	// - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
	// - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
	//   Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy pulumi.StringMapInput `pulumi:"negativeCachingPolicy"`
	// The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
	SignedRequestKeyset pulumi.StringPtrInput `pulumi:"signedRequestKeyset"`
	// Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
	// You must also set a signedRequestKeyset to enable signed requests.
	// When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged.
	// Possible values are `DISABLED` and `REQUIRE_SIGNATURES`.
	SignedRequestMode pulumi.StringPtrInput `pulumi:"signedRequestMode"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput)
}

// Defines the request parameters that contribute to the cache key.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) CacheKeyPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
		return v.CacheKeyPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput)
}

// Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
// For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client.
// Possible values are `CACHE_ALL_STATIC`, `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, and `BYPASS_CACHE`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string { return v.CacheMode }).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
// - The TTL must be > 0 and <= 86400s (1 day)
// - The clientTtl cannot be larger than the defaultTtl (if set)
// - Fractions of a second are not allowed.
//   Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
//   A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) ClientTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string { return v.ClientTtl }).(pulumi.StringPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
// Defaults to 3600s (1 hour).
// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
// - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
// - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
// - Fractions of a second are not allowed.
// - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
//   Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
//   A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) DefaultTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string { return v.DefaultTtl }).(pulumi.StringPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin.
// Defaults to 86400s (1 day).
// Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
// - Setting a TTL of "0" means "always revalidate"
// - The value of maxTtl must be equal to or greater than defaultTtl.
// - Fractions of a second are not allowed.
//   When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
//   A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) MaxTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string { return v.MaxTtl }).(pulumi.StringPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
// By default, the CDNPolicy will apply the following default TTLs to these status codes:
// - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
// - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
// - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
//   These defaults can be overridden in negativeCachingPolicy
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *bool {
		return v.NegativeCaching
	}).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
// - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
// - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
//   Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) NegativeCachingPolicy() pulumi.StringMapOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) map[string]string {
		return v.NegativeCachingPolicy
	}).(pulumi.StringMapOutput)
}

// The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) SignedRequestKeyset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		return v.SignedRequestKeyset
	}).(pulumi.StringPtrOutput)
}

// Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
// You must also set a signedRequestKeyset to enable signed requests.
// When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged.
// Possible values are `DISABLED` and `REQUIRE_SIGNATURES`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput) SignedRequestMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		return v.SignedRequestMode
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput)
}

// Defines the request parameters that contribute to the cache key.
// Structure is documented below.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) CacheKeyPolicy() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
		if v == nil {
			return nil
		}
		return v.CacheKeyPolicy
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput)
}

// Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
// For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client.
// Possible values are `CACHE_ALL_STATIC`, `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, and `BYPASS_CACHE`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.CacheMode
	}).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
// - The TTL must be > 0 and <= 86400s (1 day)
// - The clientTtl cannot be larger than the defaultTtl (if set)
// - Fractions of a second are not allowed.
//   Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
//   A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) ClientTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientTtl
	}).(pulumi.StringPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
// Defaults to 3600s (1 hour).
// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
// - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
// - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
// - Fractions of a second are not allowed.
// - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
//   Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
//   When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
//   A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) DefaultTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.StringPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin.
// Defaults to 86400s (1 day).
// Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
// - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
// - Setting a TTL of "0" means "always revalidate"
// - The value of maxTtl must be equal to or greater than defaultTtl.
// - Fractions of a second are not allowed.
//   When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
//   A duration in seconds terminated by 's'. Example: "3s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) MaxTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaxTtl
	}).(pulumi.StringPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
// By default, the CDNPolicy will apply the following default TTLs to these status codes:
// - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
// - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
// - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
//   These defaults can be overridden in negativeCachingPolicy
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.NegativeCaching
	}).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
// - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
// - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
//   Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) NegativeCachingPolicy() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) map[string]string {
		if v == nil {
			return nil
		}
		return v.NegativeCachingPolicy
	}).(pulumi.StringMapOutput)
}

// The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) SignedRequestKeyset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SignedRequestKeyset
	}).(pulumi.StringPtrOutput)
}

// Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
// You must also set a signedRequestKeyset to enable signed requests.
// When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged.
// Possible values are `DISABLED` and `REQUIRE_SIGNATURES`.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput) SignedRequestMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SignedRequestMode
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy struct {
	// If true, requests to different hosts will be cached separately.
	// Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
	ExcludeHost *bool `pulumi:"excludeHost"`
	// If true, exclude query string parameters from the cache key
	// If false (the default), include the query string parameters in
	// the cache key according to includeQueryParameters and
	// excludeQueryParameters. If neither includeQueryParameters nor
	// excludeQueryParameters is set, the entire query string will be
	// included.
	ExcludeQueryString *bool `pulumi:"excludeQueryString"`
	// Names of query string parameters to exclude from cache keys. All other parameters will be included.
	// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	ExcludedQueryParameters []string `pulumi:"excludedQueryParameters"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol *bool `pulumi:"includeProtocol"`
	// Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
	// - Header names must be valid HTTP RFC 7230 header field values.
	// - Header field names are case insensitive
	// - To include the HTTP method, use ":method"
	//   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
	IncludedHeaderNames []string `pulumi:"includedHeaderNames"`
	// Names of query string parameters to include in cache keys. All other parameters will be excluded.
	// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	IncludedQueryParameters []string `pulumi:"includedQueryParameters"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs struct {
	// If true, requests to different hosts will be cached separately.
	// Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
	ExcludeHost pulumi.BoolPtrInput `pulumi:"excludeHost"`
	// If true, exclude query string parameters from the cache key
	// If false (the default), include the query string parameters in
	// the cache key according to includeQueryParameters and
	// excludeQueryParameters. If neither includeQueryParameters nor
	// excludeQueryParameters is set, the entire query string will be
	// included.
	ExcludeQueryString pulumi.BoolPtrInput `pulumi:"excludeQueryString"`
	// Names of query string parameters to exclude from cache keys. All other parameters will be included.
	// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	ExcludedQueryParameters pulumi.StringArrayInput `pulumi:"excludedQueryParameters"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol pulumi.BoolPtrInput `pulumi:"includeProtocol"`
	// Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
	// - Header names must be valid HTTP RFC 7230 header field values.
	// - Header field names are case insensitive
	// - To include the HTTP method, use ":method"
	//   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
	IncludedHeaderNames pulumi.StringArrayInput `pulumi:"includedHeaderNames"`
	// Names of query string parameters to include in cache keys. All other parameters will be excluded.
	// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	IncludedQueryParameters pulumi.StringArrayInput `pulumi:"includedQueryParameters"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput)
}

// If true, requests to different hosts will be cached separately.
// Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ExcludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		return v.ExcludeHost
	}).(pulumi.BoolPtrOutput)
}

// If true, exclude query string parameters from the cache key
// If false (the default), include the query string parameters in
// the cache key according to includeQueryParameters and
// excludeQueryParameters. If neither includeQueryParameters nor
// excludeQueryParameters is set, the entire query string will be
// included.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ExcludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		return v.ExcludeQueryString
	}).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude from cache keys. All other parameters will be included.
// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) ExcludedQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		return v.ExcludedQueryParameters
	}).(pulumi.StringArrayOutput)
}

// If true, http and https requests will be cached separately.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		return v.IncludeProtocol
	}).(pulumi.BoolPtrOutput)
}

// Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
// - Header names must be valid HTTP RFC 7230 header field values.
// - Header field names are case insensitive
// - To include the HTTP method, use ":method"
//   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) IncludedHeaderNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		return v.IncludedHeaderNames
	}).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys. All other parameters will be excluded.
// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput) IncludedQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		return v.IncludedQueryParameters
	}).(pulumi.StringArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput)
}

// If true, requests to different hosts will be cached separately.
// Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ExcludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeHost
	}).(pulumi.BoolPtrOutput)
}

// If true, exclude query string parameters from the cache key
// If false (the default), include the query string parameters in
// the cache key according to includeQueryParameters and
// excludeQueryParameters. If neither includeQueryParameters nor
// excludeQueryParameters is set, the entire query string will be
// included.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ExcludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeQueryString
	}).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude from cache keys. All other parameters will be included.
// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) ExcludedQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedQueryParameters
	}).(pulumi.StringArrayOutput)
}

// If true, http and https requests will be cached separately.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeProtocol
	}).(pulumi.BoolPtrOutput)
}

// Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
// - Header names must be valid HTTP RFC 7230 header field values.
// - Header field names are case insensitive
// - To include the HTTP method, use ":method"
//   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) IncludedHeaderNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.IncludedHeaderNames
	}).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys. All other parameters will be excluded.
// Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput) IncludedQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.IncludedQueryParameters
	}).(pulumi.StringArrayOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
	// This translates to the Access-Control-Allow-Credentials response header.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers response header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods response header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the list of origins that will be allowed to do CORS requests.
	// This translates to the Access-Control-Allow-Origin response header.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Allow-Headers response header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
	// - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
	// - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
	// - This translates to the Access-Control-Max-Age header.
	//   A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	MaxAge string `pulumi:"maxAge"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
	// This translates to the Access-Control-Allow-Credentials response header.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers response header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods response header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the list of origins that will be allowed to do CORS requests.
	// This translates to the Access-Control-Allow-Origin response header.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Allow-Headers response header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
	// - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
	// - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
	// - This translates to the Access-Control-Max-Age header.
	//   A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	MaxAge pulumi.StringInput `pulumi:"maxAge"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
// This translates to the Access-Control-Allow-Credentials response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests.
// This translates to the Access-Control-Allow-Origin response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
// - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
// - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
// - This translates to the Access-Control-Max-Age header.
//   A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput) MaxAge() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) string { return v.MaxAge }).(pulumi.StringOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
// This translates to the Access-Control-Allow-Credentials response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests.
// This translates to the Access-Control-Allow-Origin response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers response header.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
// - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
// - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
// - This translates to the Access-Control-Max-Age header.
//   A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.MaxAge
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite struct {
	// Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
	// Prior to forwarding the request to the selected origin, if the
	// request matched a pathTemplateMatch, the matching portion of the
	// request's path is replaced re-written using the pattern specified
	// by pathTemplateRewrite.
	// pathTemplateRewrite must be between 1 and 255 characters
	// (inclusive), must start with a '/', and must only use variables
	// captured by the route's pathTemplate matchers.
	// pathTemplateRewrite may only be used when all of a route's
	// MatchRules specify pathTemplate.
	// Only one of pathPrefixRewrite and pathTemplateRewrite may be
	// specified.
	PathTemplateRewrite *string `pulumi:"pathTemplateRewrite"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs struct {
	// Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
	// Prior to forwarding the request to the selected origin, if the
	// request matched a pathTemplateMatch, the matching portion of the
	// request's path is replaced re-written using the pattern specified
	// by pathTemplateRewrite.
	// pathTemplateRewrite must be between 1 and 255 characters
	// (inclusive), must start with a '/', and must only use variables
	// captured by the route's pathTemplate matchers.
	// pathTemplateRewrite may only be used when all of a route's
	// MatchRules specify pathTemplate.
	// Only one of pathPrefixRewrite and pathTemplateRewrite may be
	// specified.
	PathTemplateRewrite pulumi.StringPtrInput `pulumi:"pathTemplateRewrite"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtr and EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected origin, if the
// request matched a pathTemplateMatch, the matching portion of the
// request's path is replaced re-written using the pattern specified
// by pathTemplateRewrite.
// pathTemplateRewrite must be between 1 and 255 characters
// (inclusive), must start with a '/', and must only use variables
// captured by the route's pathTemplate matchers.
// pathTemplateRewrite may only be used when all of a route's
// MatchRules specify pathTemplate.
// Only one of pathPrefixRewrite and pathTemplateRewrite may be
// specified.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput) PathTemplateRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		return v.PathTemplateRewrite
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput)
}

// Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected origin, if the
// request matched a pathTemplateMatch, the matching portion of the
// request's path is replaced re-written using the pattern specified
// by pathTemplateRewrite.
// pathTemplateRewrite must be between 1 and 255 characters
// (inclusive), must start with a '/', and must only use variables
// captured by the route's pathTemplate matchers.
// pathTemplateRewrite may only be used when all of a route's
// MatchRules specify pathTemplate.
// Only one of pathPrefixRewrite and pathTemplateRewrite may be
// specified.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) PathTemplateRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathTemplateRewrite
	}).(pulumi.StringPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
	// This can only be set if there is at least one (1) edgeSslCertificate set on the service.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request.
	// pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	// The path value must be between 1 and 1024 characters.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PrefixRedirect *string `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction.
	// The supported values are:
	// - `MOVED_PERMANENTLY_DEFAULT`, which is the default value and corresponds to 301.
	// - `FOUND`, which corresponds to 302.
	RedirectResponseCode *string `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
	StripQuery *bool `pulumi:"stripQuery"`
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs and EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs{...}
type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
	// This can only be set if there is at least one (1) edgeSslCertificate set on the service.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request.
	// pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	// The path value must be between 1 and 1024 characters.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PrefixRedirect pulumi.StringPtrInput `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction.
	// The supported values are:
	// - `MOVED_PERMANENTLY_DEFAULT`, which is the default value and corresponds to 301.
	// - `FOUND`, which corresponds to 302.
	RedirectResponseCode pulumi.StringPtrInput `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
	StripQuery pulumi.BoolPtrInput `pulumi:"stripQuery"`
}

func (EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput)
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput).ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx)
}

// EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput is an input type that accepts EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs, EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtr and EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput values.
// You can construct a concrete instance of `EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput` via:
//
//          EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs{...}
//
//  or:
//
//          nil
type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput interface {
	pulumi.Input

	ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput
	ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput
}

type edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs

func EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtr(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput {
	return (*edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType)(v)
}

func (*edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return i.ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i *edgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrType) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect {
		return &v
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
// This can only be set if there is at least one (1) edgeSslCertificate set on the service.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request.
// pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
// The path value must be between 1 and 1024 characters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string { return v.PrefixRedirect }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction.
// The supported values are:
// - `MOVED_PERMANENTLY_DEFAULT`, which is the default value and corresponds to 301.
// - `FOUND`, which corresponds to 302.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string { return v.RedirectResponseCode }).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *bool { return v.StripQuery }).(pulumi.BoolPtrOutput)
}

type EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput struct{ *pulumi.OutputState }

func (EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) ToEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o
}

func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) Elem() EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect {
		if v != nil {
			return *v
		}
		var ret EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect
		return ret
	}).(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
// This can only be set if there is at least one (1) edgeSslCertificate set on the service.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request.
// pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
// The path value must be between 1 and 1024 characters.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRedirect
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction.
// The supported values are:
// - `MOVED_PERMANENTLY_DEFAULT`, which is the default value and corresponds to 301.
// - `FOUND`, which corresponds to 302.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.RedirectResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
func (o EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheKeysetPublicKeyInput)(nil)).Elem(), EdgeCacheKeysetPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheKeysetPublicKeyArrayInput)(nil)).Elem(), EdgeCacheKeysetPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginTimeoutInput)(nil)).Elem(), EdgeCacheOriginTimeoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheOriginTimeoutPtrInput)(nil)).Elem(), EdgeCacheOriginTimeoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceLogConfigInput)(nil)).Elem(), EdgeCacheServiceLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceLogConfigPtrInput)(nil)).Elem(), EdgeCacheServiceLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingInput)(nil)).Elem(), EdgeCacheServiceRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingHostRuleInput)(nil)).Elem(), EdgeCacheServiceRoutingHostRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingHostRuleArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingHostRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrInput)(nil)).Elem(), EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectArgs{})
	pulumi.RegisterOutputType(EdgeCacheKeysetPublicKeyOutput{})
	pulumi.RegisterOutputType(EdgeCacheKeysetPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginTimeoutOutput{})
	pulumi.RegisterOutputType(EdgeCacheOriginTimeoutPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceLogConfigOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceLogConfigPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingHostRuleOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingHostRuleArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewritePtrOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutput{})
	pulumi.RegisterOutputType(EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectPtrOutput{})
}
