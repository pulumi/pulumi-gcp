// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gateway represents the configuration for a proxy, typically a load balancer.
// It captures the ip:port over which the services are exposed by the proxy,
// along with any policy configurations. Routes have reference to to Gateways
// to dictate how requests should be routed by this Gateway.
//
// To get more information about Gateway, see:
//
// * [API documentation](https://cloud.google.com/traffic-director/docs/reference/network-services/rest/v1/projects.locations.gateways)
//
// ## Example Usage
// ### Network Services Gateway Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networkservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkservices.NewGateway(ctx, "default", &networkservices.GatewayArgs{
//				Ports: pulumi.IntArray{
//					pulumi.Int(443),
//				},
//				Scope: pulumi.String("default-scope-basic"),
//				Type:  pulumi.String("OPEN_MESH"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Services Gateway Advanced
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networkservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkservices.NewGateway(ctx, "default", &networkservices.GatewayArgs{
//				Description: pulumi.String("my description"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Ports: pulumi.IntArray{
//					pulumi.Int(443),
//				},
//				Scope: pulumi.String("default-scope-advance"),
//				Type:  pulumi.String("OPEN_MESH"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Services Gateway Secure Web Proxy
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networkservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultCertificate, err := certificatemanager.NewCertificate(ctx, "defaultCertificate", &certificatemanager.CertificateArgs{
//				Location: pulumi.String("us-central1"),
//				SelfManaged: &certificatemanager.CertificateSelfManagedArgs{
//					PemCertificate: readFileOrPanic("test-fixtures/cert.pem"),
//					PemPrivateKey:  readFileOrPanic("test-fixtures/private-key.pem"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				RoutingMode:           pulumi.String("REGIONAL"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				Purpose:     pulumi.String("PRIVATE"),
//				IpCidrRange: pulumi.String("10.128.0.0/20"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.ID(),
//				Role:        pulumi.String("ACTIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			proxyonlysubnet, err := compute.NewSubnetwork(ctx, "proxyonlysubnet", &compute.SubnetworkArgs{
//				Purpose:     pulumi.String("REGIONAL_MANAGED_PROXY"),
//				IpCidrRange: pulumi.String("192.168.0.0/23"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.ID(),
//				Role:        pulumi.String("ACTIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultGatewaySecurityPolicy, err := networksecurity.NewGatewaySecurityPolicy(ctx, "defaultGatewaySecurityPolicy", &networksecurity.GatewaySecurityPolicyArgs{
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewGatewaySecurityPolicyRule(ctx, "defaultGatewaySecurityPolicyRule", &networksecurity.GatewaySecurityPolicyRuleArgs{
//				Location:              pulumi.String("us-central1"),
//				GatewaySecurityPolicy: defaultGatewaySecurityPolicy.Name,
//				Enabled:               pulumi.Bool(true),
//				Priority:              pulumi.Int(1),
//				SessionMatcher:        pulumi.String("host() == 'example.com'"),
//				BasicProfile:          pulumi.String("ALLOW"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkservices.NewGateway(ctx, "defaultGateway", &networkservices.GatewayArgs{
//				Location: pulumi.String("us-central1"),
//				Addresses: pulumi.StringArray{
//					pulumi.String("10.128.0.99"),
//				},
//				Type: pulumi.String("SECURE_WEB_GATEWAY"),
//				Ports: pulumi.IntArray{
//					pulumi.Int(443),
//				},
//				Scope: pulumi.String("my-default-scope1"),
//				CertificateUrls: pulumi.StringArray{
//					defaultCertificate.ID(),
//				},
//				GatewaySecurityPolicy:           defaultGatewaySecurityPolicy.ID(),
//				Network:                         defaultNetwork.ID(),
//				Subnetwork:                      defaultSubnetwork.ID(),
//				DeleteSwgAutogenRouterOnDestroy: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				proxyonlysubnet,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Services Gateway Multiple Swp Same Network
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networkservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultCertificate, err := certificatemanager.NewCertificate(ctx, "defaultCertificate", &certificatemanager.CertificateArgs{
//				Location: pulumi.String("us-south1"),
//				SelfManaged: &certificatemanager.CertificateSelfManagedArgs{
//					PemCertificate: readFileOrPanic("test-fixtures/cert.pem"),
//					PemPrivateKey:  readFileOrPanic("test-fixtures/private-key.pem"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				RoutingMode:           pulumi.String("REGIONAL"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				Purpose:     pulumi.String("PRIVATE"),
//				IpCidrRange: pulumi.String("10.128.0.0/20"),
//				Region:      pulumi.String("us-south1"),
//				Network:     defaultNetwork.ID(),
//				Role:        pulumi.String("ACTIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			proxyonlysubnet, err := compute.NewSubnetwork(ctx, "proxyonlysubnet", &compute.SubnetworkArgs{
//				Purpose:     pulumi.String("REGIONAL_MANAGED_PROXY"),
//				IpCidrRange: pulumi.String("192.168.0.0/23"),
//				Region:      pulumi.String("us-south1"),
//				Network:     defaultNetwork.ID(),
//				Role:        pulumi.String("ACTIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultGatewaySecurityPolicy, err := networksecurity.NewGatewaySecurityPolicy(ctx, "defaultGatewaySecurityPolicy", &networksecurity.GatewaySecurityPolicyArgs{
//				Location: pulumi.String("us-south1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewGatewaySecurityPolicyRule(ctx, "defaultGatewaySecurityPolicyRule", &networksecurity.GatewaySecurityPolicyRuleArgs{
//				Location:              pulumi.String("us-south1"),
//				GatewaySecurityPolicy: defaultGatewaySecurityPolicy.Name,
//				Enabled:               pulumi.Bool(true),
//				Priority:              pulumi.Int(1),
//				SessionMatcher:        pulumi.String("host() == 'example.com'"),
//				BasicProfile:          pulumi.String("ALLOW"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkservices.NewGateway(ctx, "defaultGateway", &networkservices.GatewayArgs{
//				Location: pulumi.String("us-south1"),
//				Addresses: pulumi.StringArray{
//					pulumi.String("10.128.0.99"),
//				},
//				Type: pulumi.String("SECURE_WEB_GATEWAY"),
//				Ports: pulumi.IntArray{
//					pulumi.Int(443),
//				},
//				Scope: pulumi.String("my-default-scope1"),
//				CertificateUrls: pulumi.StringArray{
//					defaultCertificate.ID(),
//				},
//				GatewaySecurityPolicy:           defaultGatewaySecurityPolicy.ID(),
//				Network:                         defaultNetwork.ID(),
//				Subnetwork:                      defaultSubnetwork.ID(),
//				DeleteSwgAutogenRouterOnDestroy: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				proxyonlysubnet,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = networkservices.NewGateway(ctx, "gateway2", &networkservices.GatewayArgs{
//				Location: pulumi.String("us-south1"),
//				Addresses: pulumi.StringArray{
//					pulumi.String("10.128.0.98"),
//				},
//				Type: pulumi.String("SECURE_WEB_GATEWAY"),
//				Ports: pulumi.IntArray{
//					pulumi.Int(443),
//				},
//				Scope: pulumi.String("my-default-scope2"),
//				CertificateUrls: pulumi.StringArray{
//					defaultCertificate.ID(),
//				},
//				GatewaySecurityPolicy:           defaultGatewaySecurityPolicy.ID(),
//				Network:                         defaultNetwork.ID(),
//				Subnetwork:                      defaultSubnetwork.ID(),
//				DeleteSwgAutogenRouterOnDestroy: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				proxyonlysubnet,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Gateway can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:networkservices/gateway:Gateway default projects/{{project}}/locations/{{location}}/gateways/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:networkservices/gateway:Gateway default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:networkservices/gateway:Gateway default {{location}}/{{name}}
//
// ```
type Gateway struct {
	pulumi.CustomResourceState

	// Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
	// an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0.
	Addresses pulumi.StringArrayOutput `pulumi:"addresses"`
	// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	CertificateUrls pulumi.StringArrayOutput `pulumi:"certificateUrls"`
	// Time the AccessPolicy was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
	// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
	DeleteSwgAutogenRouterOnDestroy pulumi.BoolPtrOutput `pulumi:"deleteSwgAutogenRouterOnDestroy"`
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
	// For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`.
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	GatewaySecurityPolicy pulumi.StringPtrOutput `pulumi:"gatewaySecurityPolicy"`
	// Set of label tags associated with the Gateway resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the gateway.
	// The default value is `global`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Short name of the Gateway resource to be created.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The relative resource name identifying the VPC network that is using this configuration.
	// For example: `projects/*/global/networks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	Network pulumi.StringPtrOutput `pulumi:"network"`
	// One or more port numbers (1-65535), on which the Gateway will receive traffic.
	// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are
	// limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.
	Ports pulumi.IntArrayOutput `pulumi:"ports"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
	// The configuration for multiple Gateway instances with the same scope will be merged as presented as
	// a single coniguration to the proxy/load balancer.
	// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Server-defined URL of this resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
	// If empty, TLS termination is disabled.
	ServerTlsPolicy pulumi.StringPtrOutput `pulumi:"serverTlsPolicy"`
	// The relative resource name identifying the subnetwork in which this SWG is allocated.
	// For example: `projects/*/regions/us-central1/subnetworks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY.
	Subnetwork pulumi.StringPtrOutput `pulumi:"subnetwork"`
	// Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
	// Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Time the AccessPolicy was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ports == nil {
		return nil, errors.New("invalid value for required argument 'Ports'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Gateway
	err := ctx.RegisterResource("gcp:networkservices/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("gcp:networkservices/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
	// an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0.
	Addresses []string `pulumi:"addresses"`
	// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	CertificateUrls []string `pulumi:"certificateUrls"`
	// Time the AccessPolicy was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
	// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
	DeleteSwgAutogenRouterOnDestroy *bool `pulumi:"deleteSwgAutogenRouterOnDestroy"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
	// For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`.
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	GatewaySecurityPolicy *string `pulumi:"gatewaySecurityPolicy"`
	// Set of label tags associated with the Gateway resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the gateway.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// Short name of the Gateway resource to be created.
	//
	// ***
	Name *string `pulumi:"name"`
	// The relative resource name identifying the VPC network that is using this configuration.
	// For example: `projects/*/global/networks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	Network *string `pulumi:"network"`
	// One or more port numbers (1-65535), on which the Gateway will receive traffic.
	// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are
	// limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.
	Ports []int `pulumi:"ports"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
	// The configuration for multiple Gateway instances with the same scope will be merged as presented as
	// a single coniguration to the proxy/load balancer.
	// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
	Scope *string `pulumi:"scope"`
	// Server-defined URL of this resource.
	SelfLink *string `pulumi:"selfLink"`
	// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
	// If empty, TLS termination is disabled.
	ServerTlsPolicy *string `pulumi:"serverTlsPolicy"`
	// The relative resource name identifying the subnetwork in which this SWG is allocated.
	// For example: `projects/*/regions/us-central1/subnetworks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY.
	Subnetwork *string `pulumi:"subnetwork"`
	// Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
	// Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
	Type *string `pulumi:"type"`
	// Time the AccessPolicy was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type GatewayState struct {
	// Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
	// an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0.
	Addresses pulumi.StringArrayInput
	// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	CertificateUrls pulumi.StringArrayInput
	// Time the AccessPolicy was created in UTC.
	CreateTime pulumi.StringPtrInput
	// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
	// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
	DeleteSwgAutogenRouterOnDestroy pulumi.BoolPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels pulumi.StringMapInput
	// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
	// For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`.
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	GatewaySecurityPolicy pulumi.StringPtrInput
	// Set of label tags associated with the Gateway resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the gateway.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// Short name of the Gateway resource to be created.
	//
	// ***
	Name pulumi.StringPtrInput
	// The relative resource name identifying the VPC network that is using this configuration.
	// For example: `projects/*/global/networks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	Network pulumi.StringPtrInput
	// One or more port numbers (1-65535), on which the Gateway will receive traffic.
	// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are
	// limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.
	Ports pulumi.IntArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
	// The configuration for multiple Gateway instances with the same scope will be merged as presented as
	// a single coniguration to the proxy/load balancer.
	// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
	Scope pulumi.StringPtrInput
	// Server-defined URL of this resource.
	SelfLink pulumi.StringPtrInput
	// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
	// If empty, TLS termination is disabled.
	ServerTlsPolicy pulumi.StringPtrInput
	// The relative resource name identifying the subnetwork in which this SWG is allocated.
	// For example: `projects/*/regions/us-central1/subnetworks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY.
	Subnetwork pulumi.StringPtrInput
	// Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
	// Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
	Type pulumi.StringPtrInput
	// Time the AccessPolicy was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
	// an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0.
	Addresses []string `pulumi:"addresses"`
	// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	CertificateUrls []string `pulumi:"certificateUrls"`
	// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
	// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
	DeleteSwgAutogenRouterOnDestroy *bool `pulumi:"deleteSwgAutogenRouterOnDestroy"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
	// For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`.
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	GatewaySecurityPolicy *string `pulumi:"gatewaySecurityPolicy"`
	// Set of label tags associated with the Gateway resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the gateway.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// Short name of the Gateway resource to be created.
	//
	// ***
	Name *string `pulumi:"name"`
	// The relative resource name identifying the VPC network that is using this configuration.
	// For example: `projects/*/global/networks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	Network *string `pulumi:"network"`
	// One or more port numbers (1-65535), on which the Gateway will receive traffic.
	// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are
	// limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.
	Ports []int `pulumi:"ports"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
	// The configuration for multiple Gateway instances with the same scope will be merged as presented as
	// a single coniguration to the proxy/load balancer.
	// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
	Scope *string `pulumi:"scope"`
	// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
	// If empty, TLS termination is disabled.
	ServerTlsPolicy *string `pulumi:"serverTlsPolicy"`
	// The relative resource name identifying the subnetwork in which this SWG is allocated.
	// For example: `projects/*/regions/us-central1/subnetworks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY.
	Subnetwork *string `pulumi:"subnetwork"`
	// Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
	// Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
	// an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0.
	Addresses pulumi.StringArrayInput
	// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	CertificateUrls pulumi.StringArrayInput
	// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
	// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
	DeleteSwgAutogenRouterOnDestroy pulumi.BoolPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
	// For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`.
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	GatewaySecurityPolicy pulumi.StringPtrInput
	// Set of label tags associated with the Gateway resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the gateway.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// Short name of the Gateway resource to be created.
	//
	// ***
	Name pulumi.StringPtrInput
	// The relative resource name identifying the VPC network that is using this configuration.
	// For example: `projects/*/global/networks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	Network pulumi.StringPtrInput
	// One or more port numbers (1-65535), on which the Gateway will receive traffic.
	// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are
	// limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.
	Ports pulumi.IntArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
	// The configuration for multiple Gateway instances with the same scope will be merged as presented as
	// a single coniguration to the proxy/load balancer.
	// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
	Scope pulumi.StringPtrInput
	// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
	// If empty, TLS termination is disabled.
	ServerTlsPolicy pulumi.StringPtrInput
	// The relative resource name identifying the subnetwork in which this SWG is allocated.
	// For example: `projects/*/regions/us-central1/subnetworks/network-1`.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY.
	Subnetwork pulumi.StringPtrInput
	// Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
	// Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
	Type pulumi.StringInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

// Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
// an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
// Gateways of type 'OPEN_MESH' listen on 0.0.0.0.
func (o GatewayOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringArrayOutput { return v.Addresses }).(pulumi.StringArrayOutput)
}

// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
func (o GatewayOutput) CertificateUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringArrayOutput { return v.CertificateUrls }).(pulumi.StringArrayOutput)
}

// Time the AccessPolicy was created in UTC.
func (o GatewayOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
func (o GatewayOutput) DeleteSwgAutogenRouterOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.BoolPtrOutput { return v.DeleteSwgAutogenRouterOnDestroy }).(pulumi.BoolPtrOutput)
}

// A free-text description of the resource. Max length 1024 characters.
func (o GatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
// clients and services.
func (o GatewayOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
// For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`.
// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
func (o GatewayOutput) GatewaySecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.GatewaySecurityPolicy }).(pulumi.StringPtrOutput)
}

// Set of label tags associated with the Gateway resource.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GatewayOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the gateway.
// The default value is `global`.
func (o GatewayOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Short name of the Gateway resource to be created.
//
// ***
func (o GatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The relative resource name identifying the VPC network that is using this configuration.
// For example: `projects/*/global/networks/network-1`.
// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
func (o GatewayOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Network }).(pulumi.StringPtrOutput)
}

// One or more port numbers (1-65535), on which the Gateway will receive traffic.
// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are
// limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.
func (o GatewayOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntArrayOutput { return v.Ports }).(pulumi.IntArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GatewayOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GatewayOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
// The configuration for multiple Gateway instances with the same scope will be merged as presented as
// a single coniguration to the proxy/load balancer.
// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
func (o GatewayOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Server-defined URL of this resource.
func (o GatewayOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
// If empty, TLS termination is disabled.
func (o GatewayOutput) ServerTlsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.ServerTlsPolicy }).(pulumi.StringPtrOutput)
}

// The relative resource name identifying the subnetwork in which this SWG is allocated.
// For example: `projects/*/regions/us-central1/subnetworks/network-1`.
// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY.
func (o GatewayOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
// Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
func (o GatewayOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Time the AccessPolicy was updated in UTC.
func (o GatewayOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}
