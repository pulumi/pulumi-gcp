// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Network Services Service Lb Policies Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkservices.NewServiceLbPolicies(ctx, "default", &networkservices.ServiceLbPoliciesArgs{
//				Name:     pulumi.String("my-lb-policy"),
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Services Service Lb Policies Advanced
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkservices.NewServiceLbPolicies(ctx, "default", &networkservices.ServiceLbPoliciesArgs{
//				Name:                   pulumi.String("my-lb-policy"),
//				Location:               pulumi.String("global"),
//				Description:            pulumi.String("my description"),
//				LoadBalancingAlgorithm: pulumi.String("SPRAY_TO_REGION"),
//				AutoCapacityDrain: &networkservices.ServiceLbPoliciesAutoCapacityDrainArgs{
//					Enable: pulumi.Bool(true),
//				},
//				FailoverConfig: &networkservices.ServiceLbPoliciesFailoverConfigArgs{
//					FailoverHealthThreshold: pulumi.Int(70),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
//				Name:                pulumi.String("my-lb-backend"),
//				Description:         pulumi.String("my description"),
//				LoadBalancingScheme: pulumi.String("INTERNAL_SELF_MANAGED"),
//				Protocol:            pulumi.String("HTTP"),
//				ServiceLbPolicy: _default.ID().ApplyT(func(id string) (string, error) {
//					return fmt.Sprintf("//networkservices.googleapis.com/%v", id), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ServiceLbPolicies can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/serviceLbPolicies/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, ServiceLbPolicies can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networkservices/serviceLbPolicies:ServiceLbPolicies default projects/{{project}}/locations/{{location}}/serviceLbPolicies/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/serviceLbPolicies:ServiceLbPolicies default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkservices/serviceLbPolicies:ServiceLbPolicies default {{location}}/{{name}}
// ```
type ServiceLbPolicies struct {
	pulumi.CustomResourceState

	// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
	// Structure is documented below.
	AutoCapacityDrain ServiceLbPoliciesAutoCapacityDrainPtrOutput `pulumi:"autoCapacityDrain"`
	// Time the ServiceLbPolicy was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
	// Structure is documented below.
	FailoverConfig ServiceLbPoliciesFailoverConfigPtrOutput `pulumi:"failoverConfig"`
	// Set of label tags associated with the ServiceLbPolicy resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
	// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
	LoadBalancingAlgorithm pulumi.StringPtrOutput `pulumi:"loadBalancingAlgorithm"`
	// The location of the service lb policy.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Time the ServiceLbPolicy was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewServiceLbPolicies registers a new resource with the given unique name, arguments, and options.
func NewServiceLbPolicies(ctx *pulumi.Context,
	name string, args *ServiceLbPoliciesArgs, opts ...pulumi.ResourceOption) (*ServiceLbPolicies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceLbPolicies
	err := ctx.RegisterResource("gcp:networkservices/serviceLbPolicies:ServiceLbPolicies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceLbPolicies gets an existing ServiceLbPolicies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceLbPolicies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceLbPoliciesState, opts ...pulumi.ResourceOption) (*ServiceLbPolicies, error) {
	var resource ServiceLbPolicies
	err := ctx.ReadResource("gcp:networkservices/serviceLbPolicies:ServiceLbPolicies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceLbPolicies resources.
type serviceLbPoliciesState struct {
	// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
	// Structure is documented below.
	AutoCapacityDrain *ServiceLbPoliciesAutoCapacityDrain `pulumi:"autoCapacityDrain"`
	// Time the ServiceLbPolicy was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
	// Structure is documented below.
	FailoverConfig *ServiceLbPoliciesFailoverConfig `pulumi:"failoverConfig"`
	// Set of label tags associated with the ServiceLbPolicy resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
	// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
	LoadBalancingAlgorithm *string `pulumi:"loadBalancingAlgorithm"`
	// The location of the service lb policy.
	//
	// ***
	Location *string `pulumi:"location"`
	// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Time the ServiceLbPolicy was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type ServiceLbPoliciesState struct {
	// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
	// Structure is documented below.
	AutoCapacityDrain ServiceLbPoliciesAutoCapacityDrainPtrInput
	// Time the ServiceLbPolicy was created in UTC.
	CreateTime pulumi.StringPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
	// Structure is documented below.
	FailoverConfig ServiceLbPoliciesFailoverConfigPtrInput
	// Set of label tags associated with the ServiceLbPolicy resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
	// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
	LoadBalancingAlgorithm pulumi.StringPtrInput
	// The location of the service lb policy.
	//
	// ***
	Location pulumi.StringPtrInput
	// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Time the ServiceLbPolicy was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (ServiceLbPoliciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceLbPoliciesState)(nil)).Elem()
}

type serviceLbPoliciesArgs struct {
	// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
	// Structure is documented below.
	AutoCapacityDrain *ServiceLbPoliciesAutoCapacityDrain `pulumi:"autoCapacityDrain"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
	// Structure is documented below.
	FailoverConfig *ServiceLbPoliciesFailoverConfig `pulumi:"failoverConfig"`
	// Set of label tags associated with the ServiceLbPolicy resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
	// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
	LoadBalancingAlgorithm *string `pulumi:"loadBalancingAlgorithm"`
	// The location of the service lb policy.
	//
	// ***
	Location string `pulumi:"location"`
	// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ServiceLbPolicies resource.
type ServiceLbPoliciesArgs struct {
	// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
	// Structure is documented below.
	AutoCapacityDrain ServiceLbPoliciesAutoCapacityDrainPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
	// Structure is documented below.
	FailoverConfig ServiceLbPoliciesFailoverConfigPtrInput
	// Set of label tags associated with the ServiceLbPolicy resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
	// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
	LoadBalancingAlgorithm pulumi.StringPtrInput
	// The location of the service lb policy.
	//
	// ***
	Location pulumi.StringInput
	// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ServiceLbPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceLbPoliciesArgs)(nil)).Elem()
}

type ServiceLbPoliciesInput interface {
	pulumi.Input

	ToServiceLbPoliciesOutput() ServiceLbPoliciesOutput
	ToServiceLbPoliciesOutputWithContext(ctx context.Context) ServiceLbPoliciesOutput
}

func (*ServiceLbPolicies) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLbPolicies)(nil)).Elem()
}

func (i *ServiceLbPolicies) ToServiceLbPoliciesOutput() ServiceLbPoliciesOutput {
	return i.ToServiceLbPoliciesOutputWithContext(context.Background())
}

func (i *ServiceLbPolicies) ToServiceLbPoliciesOutputWithContext(ctx context.Context) ServiceLbPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLbPoliciesOutput)
}

// ServiceLbPoliciesArrayInput is an input type that accepts ServiceLbPoliciesArray and ServiceLbPoliciesArrayOutput values.
// You can construct a concrete instance of `ServiceLbPoliciesArrayInput` via:
//
//	ServiceLbPoliciesArray{ ServiceLbPoliciesArgs{...} }
type ServiceLbPoliciesArrayInput interface {
	pulumi.Input

	ToServiceLbPoliciesArrayOutput() ServiceLbPoliciesArrayOutput
	ToServiceLbPoliciesArrayOutputWithContext(context.Context) ServiceLbPoliciesArrayOutput
}

type ServiceLbPoliciesArray []ServiceLbPoliciesInput

func (ServiceLbPoliciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceLbPolicies)(nil)).Elem()
}

func (i ServiceLbPoliciesArray) ToServiceLbPoliciesArrayOutput() ServiceLbPoliciesArrayOutput {
	return i.ToServiceLbPoliciesArrayOutputWithContext(context.Background())
}

func (i ServiceLbPoliciesArray) ToServiceLbPoliciesArrayOutputWithContext(ctx context.Context) ServiceLbPoliciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLbPoliciesArrayOutput)
}

// ServiceLbPoliciesMapInput is an input type that accepts ServiceLbPoliciesMap and ServiceLbPoliciesMapOutput values.
// You can construct a concrete instance of `ServiceLbPoliciesMapInput` via:
//
//	ServiceLbPoliciesMap{ "key": ServiceLbPoliciesArgs{...} }
type ServiceLbPoliciesMapInput interface {
	pulumi.Input

	ToServiceLbPoliciesMapOutput() ServiceLbPoliciesMapOutput
	ToServiceLbPoliciesMapOutputWithContext(context.Context) ServiceLbPoliciesMapOutput
}

type ServiceLbPoliciesMap map[string]ServiceLbPoliciesInput

func (ServiceLbPoliciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceLbPolicies)(nil)).Elem()
}

func (i ServiceLbPoliciesMap) ToServiceLbPoliciesMapOutput() ServiceLbPoliciesMapOutput {
	return i.ToServiceLbPoliciesMapOutputWithContext(context.Background())
}

func (i ServiceLbPoliciesMap) ToServiceLbPoliciesMapOutputWithContext(ctx context.Context) ServiceLbPoliciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLbPoliciesMapOutput)
}

type ServiceLbPoliciesOutput struct{ *pulumi.OutputState }

func (ServiceLbPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLbPolicies)(nil)).Elem()
}

func (o ServiceLbPoliciesOutput) ToServiceLbPoliciesOutput() ServiceLbPoliciesOutput {
	return o
}

func (o ServiceLbPoliciesOutput) ToServiceLbPoliciesOutputWithContext(ctx context.Context) ServiceLbPoliciesOutput {
	return o
}

// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
// Structure is documented below.
func (o ServiceLbPoliciesOutput) AutoCapacityDrain() ServiceLbPoliciesAutoCapacityDrainPtrOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) ServiceLbPoliciesAutoCapacityDrainPtrOutput { return v.AutoCapacityDrain }).(ServiceLbPoliciesAutoCapacityDrainPtrOutput)
}

// Time the ServiceLbPolicy was created in UTC.
func (o ServiceLbPoliciesOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A free-text description of the resource. Max length 1024 characters.
func (o ServiceLbPoliciesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ServiceLbPoliciesOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
// Structure is documented below.
func (o ServiceLbPoliciesOutput) FailoverConfig() ServiceLbPoliciesFailoverConfigPtrOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) ServiceLbPoliciesFailoverConfigPtrOutput { return v.FailoverConfig }).(ServiceLbPoliciesFailoverConfigPtrOutput)
}

// Set of label tags associated with the ServiceLbPolicy resource.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ServiceLbPoliciesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
func (o ServiceLbPoliciesOutput) LoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringPtrOutput { return v.LoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// The location of the service lb policy.
//
// ***
func (o ServiceLbPoliciesOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
func (o ServiceLbPoliciesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ServiceLbPoliciesOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ServiceLbPoliciesOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Time the ServiceLbPolicy was updated in UTC.
func (o ServiceLbPoliciesOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLbPolicies) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ServiceLbPoliciesArrayOutput struct{ *pulumi.OutputState }

func (ServiceLbPoliciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceLbPolicies)(nil)).Elem()
}

func (o ServiceLbPoliciesArrayOutput) ToServiceLbPoliciesArrayOutput() ServiceLbPoliciesArrayOutput {
	return o
}

func (o ServiceLbPoliciesArrayOutput) ToServiceLbPoliciesArrayOutputWithContext(ctx context.Context) ServiceLbPoliciesArrayOutput {
	return o
}

func (o ServiceLbPoliciesArrayOutput) Index(i pulumi.IntInput) ServiceLbPoliciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceLbPolicies {
		return vs[0].([]*ServiceLbPolicies)[vs[1].(int)]
	}).(ServiceLbPoliciesOutput)
}

type ServiceLbPoliciesMapOutput struct{ *pulumi.OutputState }

func (ServiceLbPoliciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceLbPolicies)(nil)).Elem()
}

func (o ServiceLbPoliciesMapOutput) ToServiceLbPoliciesMapOutput() ServiceLbPoliciesMapOutput {
	return o
}

func (o ServiceLbPoliciesMapOutput) ToServiceLbPoliciesMapOutputWithContext(ctx context.Context) ServiceLbPoliciesMapOutput {
	return o
}

func (o ServiceLbPoliciesMapOutput) MapIndex(k pulumi.StringInput) ServiceLbPoliciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceLbPolicies {
		return vs[0].(map[string]*ServiceLbPolicies)[vs[1].(string)]
	}).(ServiceLbPoliciesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLbPoliciesInput)(nil)).Elem(), &ServiceLbPolicies{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLbPoliciesArrayInput)(nil)).Elem(), ServiceLbPoliciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLbPoliciesMapInput)(nil)).Elem(), ServiceLbPoliciesMap{})
	pulumi.RegisterOutputType(ServiceLbPoliciesOutput{})
	pulumi.RegisterOutputType(ServiceLbPoliciesArrayOutput{})
	pulumi.RegisterOutputType(ServiceLbPoliciesMapOutput{})
}
