// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blockchainnodeengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A representation of a blockchain node.
//
// To get more information about BlockchainNodes, see:
//
// * [API documentation](https://cloud.google.com/blockchain-node-engine/docs/reference/rest/v1/projects.locations.blockchainNodes)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/blockchain-node-engine)
//
// ## Example Usage
// ### Blockchain Nodes Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/blockchainnodeengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := blockchainnodeengine.NewBlockchainNodes(ctx, "default_node", &blockchainnodeengine.BlockchainNodesArgs{
//				Location:         pulumi.String("us-central1"),
//				BlockchainType:   pulumi.String("ETHEREUM"),
//				BlockchainNodeId: pulumi.String("blockchain_basic_node"),
//				EthereumDetails: &blockchainnodeengine.BlockchainNodesEthereumDetailsArgs{
//					ApiEnableAdmin: pulumi.Bool(true),
//					ApiEnableDebug: pulumi.Bool(true),
//					ValidatorConfig: &blockchainnodeengine.BlockchainNodesEthereumDetailsValidatorConfigArgs{
//						MevRelayUrls: pulumi.StringArray{
//							pulumi.String("https://mev1.example.org/"),
//							pulumi.String("https://mev2.example.org/"),
//						},
//					},
//					NodeType:        pulumi.String("ARCHIVE"),
//					ConsensusClient: pulumi.String("LIGHTHOUSE"),
//					ExecutionClient: pulumi.String("ERIGON"),
//					Network:         pulumi.String("MAINNET"),
//				},
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("dev"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Blockchain Nodes Geth Details
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/blockchainnodeengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := blockchainnodeengine.NewBlockchainNodes(ctx, "default_node_geth", &blockchainnodeengine.BlockchainNodesArgs{
//				Location:         pulumi.String("us-central1"),
//				BlockchainType:   pulumi.String("ETHEREUM"),
//				BlockchainNodeId: pulumi.String("blockchain_geth_node"),
//				EthereumDetails: &blockchainnodeengine.BlockchainNodesEthereumDetailsArgs{
//					ApiEnableAdmin: pulumi.Bool(true),
//					ApiEnableDebug: pulumi.Bool(true),
//					ValidatorConfig: &blockchainnodeengine.BlockchainNodesEthereumDetailsValidatorConfigArgs{
//						MevRelayUrls: pulumi.StringArray{
//							pulumi.String("https://mev1.example.org/"),
//							pulumi.String("https://mev2.example.org/"),
//						},
//					},
//					NodeType:        pulumi.String("FULL"),
//					ConsensusClient: pulumi.String("LIGHTHOUSE"),
//					ExecutionClient: pulumi.String("GETH"),
//					Network:         pulumi.String("MAINNET"),
//					GethDetails: &blockchainnodeengine.BlockchainNodesEthereumDetailsGethDetailsArgs{
//						GarbageCollectionMode: pulumi.String("FULL"),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("dev"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BlockchainNodes can be imported using any of these accepted formats:
//
//   - `projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}`
//
//   - `{{project}}/{{location}}/{{blockchain_node_id}}`
//
//   - `{{location}}/{{blockchain_node_id}}`
//
//     When using the `pulumi import` command, BlockchainNodes can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}
// ```
//
// ```sh
// $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{project}}/{{location}}/{{blockchain_node_id}}
// ```
//
// ```sh
// $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{location}}/{{blockchain_node_id}}
// ```
type BlockchainNodes struct {
	pulumi.CustomResourceState

	// ID of the requesting object.
	//
	// ***
	BlockchainNodeId pulumi.StringOutput `pulumi:"blockchainNodeId"`
	// User-provided key-value pairs
	// Possible values are: `ETHEREUM`.
	BlockchainType pulumi.StringPtrOutput `pulumi:"blockchainType"`
	// The connection information through which to interact with a blockchain node.
	// Structure is documented below.
	ConnectionInfos BlockchainNodesConnectionInfoArrayOutput `pulumi:"connectionInfos"`
	// The timestamp at which the blockchain node was first created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// User-provided key-value pairs
	// Structure is documented below.
	EthereumDetails BlockchainNodesEthereumDetailsPtrOutput `pulumi:"ethereumDetails"`
	// User-provided key-value pairs
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location of Blockchain Node being created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The timestamp at which the blockchain node was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBlockchainNodes registers a new resource with the given unique name, arguments, and options.
func NewBlockchainNodes(ctx *pulumi.Context,
	name string, args *BlockchainNodesArgs, opts ...pulumi.ResourceOption) (*BlockchainNodes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlockchainNodeId == nil {
		return nil, errors.New("invalid value for required argument 'BlockchainNodeId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BlockchainNodes
	err := ctx.RegisterResource("gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockchainNodes gets an existing BlockchainNodes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockchainNodes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockchainNodesState, opts ...pulumi.ResourceOption) (*BlockchainNodes, error) {
	var resource BlockchainNodes
	err := ctx.ReadResource("gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockchainNodes resources.
type blockchainNodesState struct {
	// ID of the requesting object.
	//
	// ***
	BlockchainNodeId *string `pulumi:"blockchainNodeId"`
	// User-provided key-value pairs
	// Possible values are: `ETHEREUM`.
	BlockchainType *string `pulumi:"blockchainType"`
	// The connection information through which to interact with a blockchain node.
	// Structure is documented below.
	ConnectionInfos []BlockchainNodesConnectionInfo `pulumi:"connectionInfos"`
	// The timestamp at which the blockchain node was first created.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// User-provided key-value pairs
	// Structure is documented below.
	EthereumDetails *BlockchainNodesEthereumDetails `pulumi:"ethereumDetails"`
	// User-provided key-value pairs
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of Blockchain Node being created.
	Location *string `pulumi:"location"`
	// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The timestamp at which the blockchain node was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type BlockchainNodesState struct {
	// ID of the requesting object.
	//
	// ***
	BlockchainNodeId pulumi.StringPtrInput
	// User-provided key-value pairs
	// Possible values are: `ETHEREUM`.
	BlockchainType pulumi.StringPtrInput
	// The connection information through which to interact with a blockchain node.
	// Structure is documented below.
	ConnectionInfos BlockchainNodesConnectionInfoArrayInput
	// The timestamp at which the blockchain node was first created.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// User-provided key-value pairs
	// Structure is documented below.
	EthereumDetails BlockchainNodesEthereumDetailsPtrInput
	// User-provided key-value pairs
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of Blockchain Node being created.
	Location pulumi.StringPtrInput
	// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The timestamp at which the blockchain node was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (BlockchainNodesState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainNodesState)(nil)).Elem()
}

type blockchainNodesArgs struct {
	// ID of the requesting object.
	//
	// ***
	BlockchainNodeId string `pulumi:"blockchainNodeId"`
	// User-provided key-value pairs
	// Possible values are: `ETHEREUM`.
	BlockchainType *string `pulumi:"blockchainType"`
	// User-provided key-value pairs
	// Structure is documented below.
	EthereumDetails *BlockchainNodesEthereumDetails `pulumi:"ethereumDetails"`
	// User-provided key-value pairs
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of Blockchain Node being created.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a BlockchainNodes resource.
type BlockchainNodesArgs struct {
	// ID of the requesting object.
	//
	// ***
	BlockchainNodeId pulumi.StringInput
	// User-provided key-value pairs
	// Possible values are: `ETHEREUM`.
	BlockchainType pulumi.StringPtrInput
	// User-provided key-value pairs
	// Structure is documented below.
	EthereumDetails BlockchainNodesEthereumDetailsPtrInput
	// User-provided key-value pairs
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of Blockchain Node being created.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (BlockchainNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainNodesArgs)(nil)).Elem()
}

type BlockchainNodesInput interface {
	pulumi.Input

	ToBlockchainNodesOutput() BlockchainNodesOutput
	ToBlockchainNodesOutputWithContext(ctx context.Context) BlockchainNodesOutput
}

func (*BlockchainNodes) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainNodes)(nil)).Elem()
}

func (i *BlockchainNodes) ToBlockchainNodesOutput() BlockchainNodesOutput {
	return i.ToBlockchainNodesOutputWithContext(context.Background())
}

func (i *BlockchainNodes) ToBlockchainNodesOutputWithContext(ctx context.Context) BlockchainNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainNodesOutput)
}

// BlockchainNodesArrayInput is an input type that accepts BlockchainNodesArray and BlockchainNodesArrayOutput values.
// You can construct a concrete instance of `BlockchainNodesArrayInput` via:
//
//	BlockchainNodesArray{ BlockchainNodesArgs{...} }
type BlockchainNodesArrayInput interface {
	pulumi.Input

	ToBlockchainNodesArrayOutput() BlockchainNodesArrayOutput
	ToBlockchainNodesArrayOutputWithContext(context.Context) BlockchainNodesArrayOutput
}

type BlockchainNodesArray []BlockchainNodesInput

func (BlockchainNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockchainNodes)(nil)).Elem()
}

func (i BlockchainNodesArray) ToBlockchainNodesArrayOutput() BlockchainNodesArrayOutput {
	return i.ToBlockchainNodesArrayOutputWithContext(context.Background())
}

func (i BlockchainNodesArray) ToBlockchainNodesArrayOutputWithContext(ctx context.Context) BlockchainNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainNodesArrayOutput)
}

// BlockchainNodesMapInput is an input type that accepts BlockchainNodesMap and BlockchainNodesMapOutput values.
// You can construct a concrete instance of `BlockchainNodesMapInput` via:
//
//	BlockchainNodesMap{ "key": BlockchainNodesArgs{...} }
type BlockchainNodesMapInput interface {
	pulumi.Input

	ToBlockchainNodesMapOutput() BlockchainNodesMapOutput
	ToBlockchainNodesMapOutputWithContext(context.Context) BlockchainNodesMapOutput
}

type BlockchainNodesMap map[string]BlockchainNodesInput

func (BlockchainNodesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockchainNodes)(nil)).Elem()
}

func (i BlockchainNodesMap) ToBlockchainNodesMapOutput() BlockchainNodesMapOutput {
	return i.ToBlockchainNodesMapOutputWithContext(context.Background())
}

func (i BlockchainNodesMap) ToBlockchainNodesMapOutputWithContext(ctx context.Context) BlockchainNodesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainNodesMapOutput)
}

type BlockchainNodesOutput struct{ *pulumi.OutputState }

func (BlockchainNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainNodes)(nil)).Elem()
}

func (o BlockchainNodesOutput) ToBlockchainNodesOutput() BlockchainNodesOutput {
	return o
}

func (o BlockchainNodesOutput) ToBlockchainNodesOutputWithContext(ctx context.Context) BlockchainNodesOutput {
	return o
}

// ID of the requesting object.
//
// ***
func (o BlockchainNodesOutput) BlockchainNodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringOutput { return v.BlockchainNodeId }).(pulumi.StringOutput)
}

// User-provided key-value pairs
// Possible values are: `ETHEREUM`.
func (o BlockchainNodesOutput) BlockchainType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringPtrOutput { return v.BlockchainType }).(pulumi.StringPtrOutput)
}

// The connection information through which to interact with a blockchain node.
// Structure is documented below.
func (o BlockchainNodesOutput) ConnectionInfos() BlockchainNodesConnectionInfoArrayOutput {
	return o.ApplyT(func(v *BlockchainNodes) BlockchainNodesConnectionInfoArrayOutput { return v.ConnectionInfos }).(BlockchainNodesConnectionInfoArrayOutput)
}

// The timestamp at which the blockchain node was first created.
func (o BlockchainNodesOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o BlockchainNodesOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// User-provided key-value pairs
// Structure is documented below.
func (o BlockchainNodesOutput) EthereumDetails() BlockchainNodesEthereumDetailsPtrOutput {
	return o.ApplyT(func(v *BlockchainNodes) BlockchainNodesEthereumDetailsPtrOutput { return v.EthereumDetails }).(BlockchainNodesEthereumDetailsPtrOutput)
}

// User-provided key-value pairs
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o BlockchainNodesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location of Blockchain Node being created.
func (o BlockchainNodesOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
func (o BlockchainNodesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BlockchainNodesOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o BlockchainNodesOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The timestamp at which the blockchain node was last updated.
func (o BlockchainNodesOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodes) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type BlockchainNodesArrayOutput struct{ *pulumi.OutputState }

func (BlockchainNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockchainNodes)(nil)).Elem()
}

func (o BlockchainNodesArrayOutput) ToBlockchainNodesArrayOutput() BlockchainNodesArrayOutput {
	return o
}

func (o BlockchainNodesArrayOutput) ToBlockchainNodesArrayOutputWithContext(ctx context.Context) BlockchainNodesArrayOutput {
	return o
}

func (o BlockchainNodesArrayOutput) Index(i pulumi.IntInput) BlockchainNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlockchainNodes {
		return vs[0].([]*BlockchainNodes)[vs[1].(int)]
	}).(BlockchainNodesOutput)
}

type BlockchainNodesMapOutput struct{ *pulumi.OutputState }

func (BlockchainNodesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockchainNodes)(nil)).Elem()
}

func (o BlockchainNodesMapOutput) ToBlockchainNodesMapOutput() BlockchainNodesMapOutput {
	return o
}

func (o BlockchainNodesMapOutput) ToBlockchainNodesMapOutputWithContext(ctx context.Context) BlockchainNodesMapOutput {
	return o
}

func (o BlockchainNodesMapOutput) MapIndex(k pulumi.StringInput) BlockchainNodesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlockchainNodes {
		return vs[0].(map[string]*BlockchainNodes)[vs[1].(string)]
	}).(BlockchainNodesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockchainNodesInput)(nil)).Elem(), &BlockchainNodes{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockchainNodesArrayInput)(nil)).Elem(), BlockchainNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockchainNodesMapInput)(nil)).Elem(), BlockchainNodesMap{})
	pulumi.RegisterOutputType(BlockchainNodesOutput{})
	pulumi.RegisterOutputType(BlockchainNodesArrayOutput{})
	pulumi.RegisterOutputType(BlockchainNodesMapOutput{})
}
