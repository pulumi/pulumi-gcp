// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clouddomains

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RegistrationContactSettings struct {
	// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
	// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
	// avoid domain suspension.
	// Structure is documented below.
	AdminContact RegistrationContactSettingsAdminContact `pulumi:"adminContact"`
	// Required. Privacy setting for the contacts associated with the Registration.
	// Values are PUBLIC_CONTACT_DATA, PRIVATE_CONTACT_DATA, and REDACTED_CONTACT_DATA
	Privacy string `pulumi:"privacy"`
	// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
	// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
	// avoid domain suspension.
	// Structure is documented below.
	RegistrantContact RegistrationContactSettingsRegistrantContact `pulumi:"registrantContact"`
	// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
	// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
	// avoid domain suspension.
	// Structure is documented below.
	TechnicalContact RegistrationContactSettingsTechnicalContact `pulumi:"technicalContact"`
}

// RegistrationContactSettingsInput is an input type that accepts RegistrationContactSettingsArgs and RegistrationContactSettingsOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsInput` via:
//
//	RegistrationContactSettingsArgs{...}
type RegistrationContactSettingsInput interface {
	pulumi.Input

	ToRegistrationContactSettingsOutput() RegistrationContactSettingsOutput
	ToRegistrationContactSettingsOutputWithContext(context.Context) RegistrationContactSettingsOutput
}

type RegistrationContactSettingsArgs struct {
	// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
	// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
	// avoid domain suspension.
	// Structure is documented below.
	AdminContact RegistrationContactSettingsAdminContactInput `pulumi:"adminContact"`
	// Required. Privacy setting for the contacts associated with the Registration.
	// Values are PUBLIC_CONTACT_DATA, PRIVATE_CONTACT_DATA, and REDACTED_CONTACT_DATA
	Privacy pulumi.StringInput `pulumi:"privacy"`
	// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
	// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
	// avoid domain suspension.
	// Structure is documented below.
	RegistrantContact RegistrationContactSettingsRegistrantContactInput `pulumi:"registrantContact"`
	// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
	// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
	// avoid domain suspension.
	// Structure is documented below.
	TechnicalContact RegistrationContactSettingsTechnicalContactInput `pulumi:"technicalContact"`
}

func (RegistrationContactSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettings)(nil)).Elem()
}

func (i RegistrationContactSettingsArgs) ToRegistrationContactSettingsOutput() RegistrationContactSettingsOutput {
	return i.ToRegistrationContactSettingsOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsArgs) ToRegistrationContactSettingsOutputWithContext(ctx context.Context) RegistrationContactSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsOutput)
}

func (i RegistrationContactSettingsArgs) ToRegistrationContactSettingsPtrOutput() RegistrationContactSettingsPtrOutput {
	return i.ToRegistrationContactSettingsPtrOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsArgs) ToRegistrationContactSettingsPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsOutput).ToRegistrationContactSettingsPtrOutputWithContext(ctx)
}

// RegistrationContactSettingsPtrInput is an input type that accepts RegistrationContactSettingsArgs, RegistrationContactSettingsPtr and RegistrationContactSettingsPtrOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsPtrInput` via:
//
//	        RegistrationContactSettingsArgs{...}
//
//	or:
//
//	        nil
type RegistrationContactSettingsPtrInput interface {
	pulumi.Input

	ToRegistrationContactSettingsPtrOutput() RegistrationContactSettingsPtrOutput
	ToRegistrationContactSettingsPtrOutputWithContext(context.Context) RegistrationContactSettingsPtrOutput
}

type registrationContactSettingsPtrType RegistrationContactSettingsArgs

func RegistrationContactSettingsPtr(v *RegistrationContactSettingsArgs) RegistrationContactSettingsPtrInput {
	return (*registrationContactSettingsPtrType)(v)
}

func (*registrationContactSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettings)(nil)).Elem()
}

func (i *registrationContactSettingsPtrType) ToRegistrationContactSettingsPtrOutput() RegistrationContactSettingsPtrOutput {
	return i.ToRegistrationContactSettingsPtrOutputWithContext(context.Background())
}

func (i *registrationContactSettingsPtrType) ToRegistrationContactSettingsPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsPtrOutput)
}

type RegistrationContactSettingsOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettings)(nil)).Elem()
}

func (o RegistrationContactSettingsOutput) ToRegistrationContactSettingsOutput() RegistrationContactSettingsOutput {
	return o
}

func (o RegistrationContactSettingsOutput) ToRegistrationContactSettingsOutputWithContext(ctx context.Context) RegistrationContactSettingsOutput {
	return o
}

func (o RegistrationContactSettingsOutput) ToRegistrationContactSettingsPtrOutput() RegistrationContactSettingsPtrOutput {
	return o.ToRegistrationContactSettingsPtrOutputWithContext(context.Background())
}

func (o RegistrationContactSettingsOutput) ToRegistrationContactSettingsPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationContactSettings) *RegistrationContactSettings {
		return &v
	}).(RegistrationContactSettingsPtrOutput)
}

// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
// avoid domain suspension.
// Structure is documented below.
func (o RegistrationContactSettingsOutput) AdminContact() RegistrationContactSettingsAdminContactOutput {
	return o.ApplyT(func(v RegistrationContactSettings) RegistrationContactSettingsAdminContact { return v.AdminContact }).(RegistrationContactSettingsAdminContactOutput)
}

// Required. Privacy setting for the contacts associated with the Registration.
// Values are PUBLIC_CONTACT_DATA, PRIVATE_CONTACT_DATA, and REDACTED_CONTACT_DATA
func (o RegistrationContactSettingsOutput) Privacy() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettings) string { return v.Privacy }).(pulumi.StringOutput)
}

// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
// avoid domain suspension.
// Structure is documented below.
func (o RegistrationContactSettingsOutput) RegistrantContact() RegistrationContactSettingsRegistrantContactOutput {
	return o.ApplyT(func(v RegistrationContactSettings) RegistrationContactSettingsRegistrantContact {
		return v.RegistrantContact
	}).(RegistrationContactSettingsRegistrantContactOutput)
}

// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
// avoid domain suspension.
// Structure is documented below.
func (o RegistrationContactSettingsOutput) TechnicalContact() RegistrationContactSettingsTechnicalContactOutput {
	return o.ApplyT(func(v RegistrationContactSettings) RegistrationContactSettingsTechnicalContact {
		return v.TechnicalContact
	}).(RegistrationContactSettingsTechnicalContactOutput)
}

type RegistrationContactSettingsPtrOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettings)(nil)).Elem()
}

func (o RegistrationContactSettingsPtrOutput) ToRegistrationContactSettingsPtrOutput() RegistrationContactSettingsPtrOutput {
	return o
}

func (o RegistrationContactSettingsPtrOutput) ToRegistrationContactSettingsPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsPtrOutput {
	return o
}

func (o RegistrationContactSettingsPtrOutput) Elem() RegistrationContactSettingsOutput {
	return o.ApplyT(func(v *RegistrationContactSettings) RegistrationContactSettings {
		if v != nil {
			return *v
		}
		var ret RegistrationContactSettings
		return ret
	}).(RegistrationContactSettingsOutput)
}

// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
// avoid domain suspension.
// Structure is documented below.
func (o RegistrationContactSettingsPtrOutput) AdminContact() RegistrationContactSettingsAdminContactPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettings) *RegistrationContactSettingsAdminContact {
		if v == nil {
			return nil
		}
		return &v.AdminContact
	}).(RegistrationContactSettingsAdminContactPtrOutput)
}

// Required. Privacy setting for the contacts associated with the Registration.
// Values are PUBLIC_CONTACT_DATA, PRIVATE_CONTACT_DATA, and REDACTED_CONTACT_DATA
func (o RegistrationContactSettingsPtrOutput) Privacy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Privacy
	}).(pulumi.StringPtrOutput)
}

// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
// avoid domain suspension.
// Structure is documented below.
func (o RegistrationContactSettingsPtrOutput) RegistrantContact() RegistrationContactSettingsRegistrantContactPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettings) *RegistrationContactSettingsRegistrantContact {
		if v == nil {
			return nil
		}
		return &v.RegistrantContact
	}).(RegistrationContactSettingsRegistrantContactPtrOutput)
}

// Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
// Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
// avoid domain suspension.
// Structure is documented below.
func (o RegistrationContactSettingsPtrOutput) TechnicalContact() RegistrationContactSettingsTechnicalContactPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettings) *RegistrationContactSettingsTechnicalContact {
		if v == nil {
			return nil
		}
		return &v.TechnicalContact
	}).(RegistrationContactSettingsTechnicalContactPtrOutput)
}

type RegistrationContactSettingsAdminContact struct {
	// Required. Email address of the contact.
	Email string `pulumi:"email"`
	// Fax number of the contact in international format. For example, "+1-800-555-0123".
	FaxNumber *string `pulumi:"faxNumber"`
	// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
	PhoneNumber string `pulumi:"phoneNumber"`
	// Required. Postal address of the contact.
	// Structure is documented below.
	PostalAddress RegistrationContactSettingsAdminContactPostalAddress `pulumi:"postalAddress"`
}

// RegistrationContactSettingsAdminContactInput is an input type that accepts RegistrationContactSettingsAdminContactArgs and RegistrationContactSettingsAdminContactOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsAdminContactInput` via:
//
//	RegistrationContactSettingsAdminContactArgs{...}
type RegistrationContactSettingsAdminContactInput interface {
	pulumi.Input

	ToRegistrationContactSettingsAdminContactOutput() RegistrationContactSettingsAdminContactOutput
	ToRegistrationContactSettingsAdminContactOutputWithContext(context.Context) RegistrationContactSettingsAdminContactOutput
}

type RegistrationContactSettingsAdminContactArgs struct {
	// Required. Email address of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// Fax number of the contact in international format. For example, "+1-800-555-0123".
	FaxNumber pulumi.StringPtrInput `pulumi:"faxNumber"`
	// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
	// Required. Postal address of the contact.
	// Structure is documented below.
	PostalAddress RegistrationContactSettingsAdminContactPostalAddressInput `pulumi:"postalAddress"`
}

func (RegistrationContactSettingsAdminContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsAdminContact)(nil)).Elem()
}

func (i RegistrationContactSettingsAdminContactArgs) ToRegistrationContactSettingsAdminContactOutput() RegistrationContactSettingsAdminContactOutput {
	return i.ToRegistrationContactSettingsAdminContactOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsAdminContactArgs) ToRegistrationContactSettingsAdminContactOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsAdminContactOutput)
}

func (i RegistrationContactSettingsAdminContactArgs) ToRegistrationContactSettingsAdminContactPtrOutput() RegistrationContactSettingsAdminContactPtrOutput {
	return i.ToRegistrationContactSettingsAdminContactPtrOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsAdminContactArgs) ToRegistrationContactSettingsAdminContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsAdminContactOutput).ToRegistrationContactSettingsAdminContactPtrOutputWithContext(ctx)
}

// RegistrationContactSettingsAdminContactPtrInput is an input type that accepts RegistrationContactSettingsAdminContactArgs, RegistrationContactSettingsAdminContactPtr and RegistrationContactSettingsAdminContactPtrOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsAdminContactPtrInput` via:
//
//	        RegistrationContactSettingsAdminContactArgs{...}
//
//	or:
//
//	        nil
type RegistrationContactSettingsAdminContactPtrInput interface {
	pulumi.Input

	ToRegistrationContactSettingsAdminContactPtrOutput() RegistrationContactSettingsAdminContactPtrOutput
	ToRegistrationContactSettingsAdminContactPtrOutputWithContext(context.Context) RegistrationContactSettingsAdminContactPtrOutput
}

type registrationContactSettingsAdminContactPtrType RegistrationContactSettingsAdminContactArgs

func RegistrationContactSettingsAdminContactPtr(v *RegistrationContactSettingsAdminContactArgs) RegistrationContactSettingsAdminContactPtrInput {
	return (*registrationContactSettingsAdminContactPtrType)(v)
}

func (*registrationContactSettingsAdminContactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsAdminContact)(nil)).Elem()
}

func (i *registrationContactSettingsAdminContactPtrType) ToRegistrationContactSettingsAdminContactPtrOutput() RegistrationContactSettingsAdminContactPtrOutput {
	return i.ToRegistrationContactSettingsAdminContactPtrOutputWithContext(context.Background())
}

func (i *registrationContactSettingsAdminContactPtrType) ToRegistrationContactSettingsAdminContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsAdminContactPtrOutput)
}

type RegistrationContactSettingsAdminContactOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsAdminContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsAdminContact)(nil)).Elem()
}

func (o RegistrationContactSettingsAdminContactOutput) ToRegistrationContactSettingsAdminContactOutput() RegistrationContactSettingsAdminContactOutput {
	return o
}

func (o RegistrationContactSettingsAdminContactOutput) ToRegistrationContactSettingsAdminContactOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactOutput {
	return o
}

func (o RegistrationContactSettingsAdminContactOutput) ToRegistrationContactSettingsAdminContactPtrOutput() RegistrationContactSettingsAdminContactPtrOutput {
	return o.ToRegistrationContactSettingsAdminContactPtrOutputWithContext(context.Background())
}

func (o RegistrationContactSettingsAdminContactOutput) ToRegistrationContactSettingsAdminContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationContactSettingsAdminContact) *RegistrationContactSettingsAdminContact {
		return &v
	}).(RegistrationContactSettingsAdminContactPtrOutput)
}

// Required. Email address of the contact.
func (o RegistrationContactSettingsAdminContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContact) string { return v.Email }).(pulumi.StringOutput)
}

// Fax number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsAdminContactOutput) FaxNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContact) *string { return v.FaxNumber }).(pulumi.StringPtrOutput)
}

// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsAdminContactOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContact) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// Required. Postal address of the contact.
// Structure is documented below.
func (o RegistrationContactSettingsAdminContactOutput) PostalAddress() RegistrationContactSettingsAdminContactPostalAddressOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContact) RegistrationContactSettingsAdminContactPostalAddress {
		return v.PostalAddress
	}).(RegistrationContactSettingsAdminContactPostalAddressOutput)
}

type RegistrationContactSettingsAdminContactPtrOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsAdminContactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsAdminContact)(nil)).Elem()
}

func (o RegistrationContactSettingsAdminContactPtrOutput) ToRegistrationContactSettingsAdminContactPtrOutput() RegistrationContactSettingsAdminContactPtrOutput {
	return o
}

func (o RegistrationContactSettingsAdminContactPtrOutput) ToRegistrationContactSettingsAdminContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPtrOutput {
	return o
}

func (o RegistrationContactSettingsAdminContactPtrOutput) Elem() RegistrationContactSettingsAdminContactOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContact) RegistrationContactSettingsAdminContact {
		if v != nil {
			return *v
		}
		var ret RegistrationContactSettingsAdminContact
		return ret
	}).(RegistrationContactSettingsAdminContactOutput)
}

// Required. Email address of the contact.
func (o RegistrationContactSettingsAdminContactPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContact) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// Fax number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsAdminContactPtrOutput) FaxNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContact) *string {
		if v == nil {
			return nil
		}
		return v.FaxNumber
	}).(pulumi.StringPtrOutput)
}

// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsAdminContactPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContact) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

// Required. Postal address of the contact.
// Structure is documented below.
func (o RegistrationContactSettingsAdminContactPtrOutput) PostalAddress() RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContact) *RegistrationContactSettingsAdminContactPostalAddress {
		if v == nil {
			return nil
		}
		return &v.PostalAddress
	}).(RegistrationContactSettingsAdminContactPostalAddressPtrOutput)
}

type RegistrationContactSettingsAdminContactPostalAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
	// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
	// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
	// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
	// the most specific line of an address can be selected based on the language.
	AddressLines []string `pulumi:"addressLines"`
	// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
	// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
	// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
	// this should be left unpopulated.
	AdministrativeArea *string `pulumi:"administrativeArea"`
	// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
	// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
	Locality *string `pulumi:"locality"`
	// The name of the organization at the address.
	Organization *string `pulumi:"organization"`
	// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
	// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `pulumi:"postalCode"`
	// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
	// it might contain "care of" information.
	//
	// ***
	Recipients []string `pulumi:"recipients"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
	// ensure the value is correct. See https://cldr.unicode.org/ and
	// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode string `pulumi:"regionCode"`
}

// RegistrationContactSettingsAdminContactPostalAddressInput is an input type that accepts RegistrationContactSettingsAdminContactPostalAddressArgs and RegistrationContactSettingsAdminContactPostalAddressOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsAdminContactPostalAddressInput` via:
//
//	RegistrationContactSettingsAdminContactPostalAddressArgs{...}
type RegistrationContactSettingsAdminContactPostalAddressInput interface {
	pulumi.Input

	ToRegistrationContactSettingsAdminContactPostalAddressOutput() RegistrationContactSettingsAdminContactPostalAddressOutput
	ToRegistrationContactSettingsAdminContactPostalAddressOutputWithContext(context.Context) RegistrationContactSettingsAdminContactPostalAddressOutput
}

type RegistrationContactSettingsAdminContactPostalAddressArgs struct {
	// Unstructured address lines describing the lower levels of an address.
	// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
	// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
	// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
	// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
	// the most specific line of an address can be selected based on the language.
	AddressLines pulumi.StringArrayInput `pulumi:"addressLines"`
	// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
	// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
	// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
	// this should be left unpopulated.
	AdministrativeArea pulumi.StringPtrInput `pulumi:"administrativeArea"`
	// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
	// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// The name of the organization at the address.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
	// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode pulumi.StringPtrInput `pulumi:"postalCode"`
	// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
	// it might contain "care of" information.
	//
	// ***
	Recipients pulumi.StringArrayInput `pulumi:"recipients"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
	// ensure the value is correct. See https://cldr.unicode.org/ and
	// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode pulumi.StringInput `pulumi:"regionCode"`
}

func (RegistrationContactSettingsAdminContactPostalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsAdminContactPostalAddress)(nil)).Elem()
}

func (i RegistrationContactSettingsAdminContactPostalAddressArgs) ToRegistrationContactSettingsAdminContactPostalAddressOutput() RegistrationContactSettingsAdminContactPostalAddressOutput {
	return i.ToRegistrationContactSettingsAdminContactPostalAddressOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsAdminContactPostalAddressArgs) ToRegistrationContactSettingsAdminContactPostalAddressOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPostalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsAdminContactPostalAddressOutput)
}

func (i RegistrationContactSettingsAdminContactPostalAddressArgs) ToRegistrationContactSettingsAdminContactPostalAddressPtrOutput() RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return i.ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsAdminContactPostalAddressArgs) ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsAdminContactPostalAddressOutput).ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(ctx)
}

// RegistrationContactSettingsAdminContactPostalAddressPtrInput is an input type that accepts RegistrationContactSettingsAdminContactPostalAddressArgs, RegistrationContactSettingsAdminContactPostalAddressPtr and RegistrationContactSettingsAdminContactPostalAddressPtrOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsAdminContactPostalAddressPtrInput` via:
//
//	        RegistrationContactSettingsAdminContactPostalAddressArgs{...}
//
//	or:
//
//	        nil
type RegistrationContactSettingsAdminContactPostalAddressPtrInput interface {
	pulumi.Input

	ToRegistrationContactSettingsAdminContactPostalAddressPtrOutput() RegistrationContactSettingsAdminContactPostalAddressPtrOutput
	ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(context.Context) RegistrationContactSettingsAdminContactPostalAddressPtrOutput
}

type registrationContactSettingsAdminContactPostalAddressPtrType RegistrationContactSettingsAdminContactPostalAddressArgs

func RegistrationContactSettingsAdminContactPostalAddressPtr(v *RegistrationContactSettingsAdminContactPostalAddressArgs) RegistrationContactSettingsAdminContactPostalAddressPtrInput {
	return (*registrationContactSettingsAdminContactPostalAddressPtrType)(v)
}

func (*registrationContactSettingsAdminContactPostalAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsAdminContactPostalAddress)(nil)).Elem()
}

func (i *registrationContactSettingsAdminContactPostalAddressPtrType) ToRegistrationContactSettingsAdminContactPostalAddressPtrOutput() RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return i.ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(context.Background())
}

func (i *registrationContactSettingsAdminContactPostalAddressPtrType) ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsAdminContactPostalAddressPtrOutput)
}

type RegistrationContactSettingsAdminContactPostalAddressOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsAdminContactPostalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsAdminContactPostalAddress)(nil)).Elem()
}

func (o RegistrationContactSettingsAdminContactPostalAddressOutput) ToRegistrationContactSettingsAdminContactPostalAddressOutput() RegistrationContactSettingsAdminContactPostalAddressOutput {
	return o
}

func (o RegistrationContactSettingsAdminContactPostalAddressOutput) ToRegistrationContactSettingsAdminContactPostalAddressOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPostalAddressOutput {
	return o
}

func (o RegistrationContactSettingsAdminContactPostalAddressOutput) ToRegistrationContactSettingsAdminContactPostalAddressPtrOutput() RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return o.ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(context.Background())
}

func (o RegistrationContactSettingsAdminContactPostalAddressOutput) ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationContactSettingsAdminContactPostalAddress) *RegistrationContactSettingsAdminContactPostalAddress {
		return &v
	}).(RegistrationContactSettingsAdminContactPostalAddressPtrOutput)
}

// Unstructured address lines describing the lower levels of an address.
// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
// the most specific line of an address can be selected based on the language.
func (o RegistrationContactSettingsAdminContactPostalAddressOutput) AddressLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContactPostalAddress) []string { return v.AddressLines }).(pulumi.StringArrayOutput)
}

// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
// this should be left unpopulated.
func (o RegistrationContactSettingsAdminContactPostalAddressOutput) AdministrativeArea() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContactPostalAddress) *string { return v.AdministrativeArea }).(pulumi.StringPtrOutput)
}

// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
func (o RegistrationContactSettingsAdminContactPostalAddressOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContactPostalAddress) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// The name of the organization at the address.
func (o RegistrationContactSettingsAdminContactPostalAddressOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContactPostalAddress) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
func (o RegistrationContactSettingsAdminContactPostalAddressOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContactPostalAddress) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
// it might contain "care of" information.
//
// ***
func (o RegistrationContactSettingsAdminContactPostalAddressOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContactPostalAddress) []string { return v.Recipients }).(pulumi.StringArrayOutput)
}

// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
// ensure the value is correct. See https://cldr.unicode.org/ and
// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
func (o RegistrationContactSettingsAdminContactPostalAddressOutput) RegionCode() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsAdminContactPostalAddress) string { return v.RegionCode }).(pulumi.StringOutput)
}

type RegistrationContactSettingsAdminContactPostalAddressPtrOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsAdminContactPostalAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsAdminContactPostalAddress)(nil)).Elem()
}

func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) ToRegistrationContactSettingsAdminContactPostalAddressPtrOutput() RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return o
}

func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) ToRegistrationContactSettingsAdminContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsAdminContactPostalAddressPtrOutput {
	return o
}

func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) Elem() RegistrationContactSettingsAdminContactPostalAddressOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContactPostalAddress) RegistrationContactSettingsAdminContactPostalAddress {
		if v != nil {
			return *v
		}
		var ret RegistrationContactSettingsAdminContactPostalAddress
		return ret
	}).(RegistrationContactSettingsAdminContactPostalAddressOutput)
}

// Unstructured address lines describing the lower levels of an address.
// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
// the most specific line of an address can be selected based on the language.
func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) AddressLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContactPostalAddress) []string {
		if v == nil {
			return nil
		}
		return v.AddressLines
	}).(pulumi.StringArrayOutput)
}

// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
// this should be left unpopulated.
func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) AdministrativeArea() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.AdministrativeArea
	}).(pulumi.StringPtrOutput)
}

// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

// The name of the organization at the address.
func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.Organization
	}).(pulumi.StringPtrOutput)
}

// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
// it might contain "care of" information.
//
// ***
func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContactPostalAddress) []string {
		if v == nil {
			return nil
		}
		return v.Recipients
	}).(pulumi.StringArrayOutput)
}

// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
// ensure the value is correct. See https://cldr.unicode.org/ and
// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
func (o RegistrationContactSettingsAdminContactPostalAddressPtrOutput) RegionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsAdminContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return &v.RegionCode
	}).(pulumi.StringPtrOutput)
}

type RegistrationContactSettingsRegistrantContact struct {
	// Required. Email address of the contact.
	Email string `pulumi:"email"`
	// Fax number of the contact in international format. For example, "+1-800-555-0123".
	FaxNumber *string `pulumi:"faxNumber"`
	// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
	PhoneNumber string `pulumi:"phoneNumber"`
	// Required. Postal address of the contact.
	// Structure is documented below.
	PostalAddress RegistrationContactSettingsRegistrantContactPostalAddress `pulumi:"postalAddress"`
}

// RegistrationContactSettingsRegistrantContactInput is an input type that accepts RegistrationContactSettingsRegistrantContactArgs and RegistrationContactSettingsRegistrantContactOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsRegistrantContactInput` via:
//
//	RegistrationContactSettingsRegistrantContactArgs{...}
type RegistrationContactSettingsRegistrantContactInput interface {
	pulumi.Input

	ToRegistrationContactSettingsRegistrantContactOutput() RegistrationContactSettingsRegistrantContactOutput
	ToRegistrationContactSettingsRegistrantContactOutputWithContext(context.Context) RegistrationContactSettingsRegistrantContactOutput
}

type RegistrationContactSettingsRegistrantContactArgs struct {
	// Required. Email address of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// Fax number of the contact in international format. For example, "+1-800-555-0123".
	FaxNumber pulumi.StringPtrInput `pulumi:"faxNumber"`
	// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
	// Required. Postal address of the contact.
	// Structure is documented below.
	PostalAddress RegistrationContactSettingsRegistrantContactPostalAddressInput `pulumi:"postalAddress"`
}

func (RegistrationContactSettingsRegistrantContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsRegistrantContact)(nil)).Elem()
}

func (i RegistrationContactSettingsRegistrantContactArgs) ToRegistrationContactSettingsRegistrantContactOutput() RegistrationContactSettingsRegistrantContactOutput {
	return i.ToRegistrationContactSettingsRegistrantContactOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsRegistrantContactArgs) ToRegistrationContactSettingsRegistrantContactOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsRegistrantContactOutput)
}

func (i RegistrationContactSettingsRegistrantContactArgs) ToRegistrationContactSettingsRegistrantContactPtrOutput() RegistrationContactSettingsRegistrantContactPtrOutput {
	return i.ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsRegistrantContactArgs) ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsRegistrantContactOutput).ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(ctx)
}

// RegistrationContactSettingsRegistrantContactPtrInput is an input type that accepts RegistrationContactSettingsRegistrantContactArgs, RegistrationContactSettingsRegistrantContactPtr and RegistrationContactSettingsRegistrantContactPtrOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsRegistrantContactPtrInput` via:
//
//	        RegistrationContactSettingsRegistrantContactArgs{...}
//
//	or:
//
//	        nil
type RegistrationContactSettingsRegistrantContactPtrInput interface {
	pulumi.Input

	ToRegistrationContactSettingsRegistrantContactPtrOutput() RegistrationContactSettingsRegistrantContactPtrOutput
	ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(context.Context) RegistrationContactSettingsRegistrantContactPtrOutput
}

type registrationContactSettingsRegistrantContactPtrType RegistrationContactSettingsRegistrantContactArgs

func RegistrationContactSettingsRegistrantContactPtr(v *RegistrationContactSettingsRegistrantContactArgs) RegistrationContactSettingsRegistrantContactPtrInput {
	return (*registrationContactSettingsRegistrantContactPtrType)(v)
}

func (*registrationContactSettingsRegistrantContactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsRegistrantContact)(nil)).Elem()
}

func (i *registrationContactSettingsRegistrantContactPtrType) ToRegistrationContactSettingsRegistrantContactPtrOutput() RegistrationContactSettingsRegistrantContactPtrOutput {
	return i.ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(context.Background())
}

func (i *registrationContactSettingsRegistrantContactPtrType) ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsRegistrantContactPtrOutput)
}

type RegistrationContactSettingsRegistrantContactOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsRegistrantContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsRegistrantContact)(nil)).Elem()
}

func (o RegistrationContactSettingsRegistrantContactOutput) ToRegistrationContactSettingsRegistrantContactOutput() RegistrationContactSettingsRegistrantContactOutput {
	return o
}

func (o RegistrationContactSettingsRegistrantContactOutput) ToRegistrationContactSettingsRegistrantContactOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactOutput {
	return o
}

func (o RegistrationContactSettingsRegistrantContactOutput) ToRegistrationContactSettingsRegistrantContactPtrOutput() RegistrationContactSettingsRegistrantContactPtrOutput {
	return o.ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(context.Background())
}

func (o RegistrationContactSettingsRegistrantContactOutput) ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationContactSettingsRegistrantContact) *RegistrationContactSettingsRegistrantContact {
		return &v
	}).(RegistrationContactSettingsRegistrantContactPtrOutput)
}

// Required. Email address of the contact.
func (o RegistrationContactSettingsRegistrantContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContact) string { return v.Email }).(pulumi.StringOutput)
}

// Fax number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsRegistrantContactOutput) FaxNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContact) *string { return v.FaxNumber }).(pulumi.StringPtrOutput)
}

// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsRegistrantContactOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContact) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// Required. Postal address of the contact.
// Structure is documented below.
func (o RegistrationContactSettingsRegistrantContactOutput) PostalAddress() RegistrationContactSettingsRegistrantContactPostalAddressOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContact) RegistrationContactSettingsRegistrantContactPostalAddress {
		return v.PostalAddress
	}).(RegistrationContactSettingsRegistrantContactPostalAddressOutput)
}

type RegistrationContactSettingsRegistrantContactPtrOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsRegistrantContactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsRegistrantContact)(nil)).Elem()
}

func (o RegistrationContactSettingsRegistrantContactPtrOutput) ToRegistrationContactSettingsRegistrantContactPtrOutput() RegistrationContactSettingsRegistrantContactPtrOutput {
	return o
}

func (o RegistrationContactSettingsRegistrantContactPtrOutput) ToRegistrationContactSettingsRegistrantContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPtrOutput {
	return o
}

func (o RegistrationContactSettingsRegistrantContactPtrOutput) Elem() RegistrationContactSettingsRegistrantContactOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContact) RegistrationContactSettingsRegistrantContact {
		if v != nil {
			return *v
		}
		var ret RegistrationContactSettingsRegistrantContact
		return ret
	}).(RegistrationContactSettingsRegistrantContactOutput)
}

// Required. Email address of the contact.
func (o RegistrationContactSettingsRegistrantContactPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContact) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// Fax number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsRegistrantContactPtrOutput) FaxNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContact) *string {
		if v == nil {
			return nil
		}
		return v.FaxNumber
	}).(pulumi.StringPtrOutput)
}

// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsRegistrantContactPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContact) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

// Required. Postal address of the contact.
// Structure is documented below.
func (o RegistrationContactSettingsRegistrantContactPtrOutput) PostalAddress() RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContact) *RegistrationContactSettingsRegistrantContactPostalAddress {
		if v == nil {
			return nil
		}
		return &v.PostalAddress
	}).(RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput)
}

type RegistrationContactSettingsRegistrantContactPostalAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
	// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
	// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
	// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
	// the most specific line of an address can be selected based on the language.
	AddressLines []string `pulumi:"addressLines"`
	// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
	// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
	// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
	// this should be left unpopulated.
	AdministrativeArea *string `pulumi:"administrativeArea"`
	// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
	// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
	Locality *string `pulumi:"locality"`
	// The name of the organization at the address.
	Organization *string `pulumi:"organization"`
	// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
	// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `pulumi:"postalCode"`
	// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
	// it might contain "care of" information.
	//
	// ***
	Recipients []string `pulumi:"recipients"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
	// ensure the value is correct. See https://cldr.unicode.org/ and
	// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode string `pulumi:"regionCode"`
}

// RegistrationContactSettingsRegistrantContactPostalAddressInput is an input type that accepts RegistrationContactSettingsRegistrantContactPostalAddressArgs and RegistrationContactSettingsRegistrantContactPostalAddressOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsRegistrantContactPostalAddressInput` via:
//
//	RegistrationContactSettingsRegistrantContactPostalAddressArgs{...}
type RegistrationContactSettingsRegistrantContactPostalAddressInput interface {
	pulumi.Input

	ToRegistrationContactSettingsRegistrantContactPostalAddressOutput() RegistrationContactSettingsRegistrantContactPostalAddressOutput
	ToRegistrationContactSettingsRegistrantContactPostalAddressOutputWithContext(context.Context) RegistrationContactSettingsRegistrantContactPostalAddressOutput
}

type RegistrationContactSettingsRegistrantContactPostalAddressArgs struct {
	// Unstructured address lines describing the lower levels of an address.
	// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
	// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
	// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
	// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
	// the most specific line of an address can be selected based on the language.
	AddressLines pulumi.StringArrayInput `pulumi:"addressLines"`
	// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
	// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
	// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
	// this should be left unpopulated.
	AdministrativeArea pulumi.StringPtrInput `pulumi:"administrativeArea"`
	// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
	// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// The name of the organization at the address.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
	// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode pulumi.StringPtrInput `pulumi:"postalCode"`
	// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
	// it might contain "care of" information.
	//
	// ***
	Recipients pulumi.StringArrayInput `pulumi:"recipients"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
	// ensure the value is correct. See https://cldr.unicode.org/ and
	// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode pulumi.StringInput `pulumi:"regionCode"`
}

func (RegistrationContactSettingsRegistrantContactPostalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsRegistrantContactPostalAddress)(nil)).Elem()
}

func (i RegistrationContactSettingsRegistrantContactPostalAddressArgs) ToRegistrationContactSettingsRegistrantContactPostalAddressOutput() RegistrationContactSettingsRegistrantContactPostalAddressOutput {
	return i.ToRegistrationContactSettingsRegistrantContactPostalAddressOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsRegistrantContactPostalAddressArgs) ToRegistrationContactSettingsRegistrantContactPostalAddressOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPostalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsRegistrantContactPostalAddressOutput)
}

func (i RegistrationContactSettingsRegistrantContactPostalAddressArgs) ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutput() RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return i.ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsRegistrantContactPostalAddressArgs) ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsRegistrantContactPostalAddressOutput).ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(ctx)
}

// RegistrationContactSettingsRegistrantContactPostalAddressPtrInput is an input type that accepts RegistrationContactSettingsRegistrantContactPostalAddressArgs, RegistrationContactSettingsRegistrantContactPostalAddressPtr and RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsRegistrantContactPostalAddressPtrInput` via:
//
//	        RegistrationContactSettingsRegistrantContactPostalAddressArgs{...}
//
//	or:
//
//	        nil
type RegistrationContactSettingsRegistrantContactPostalAddressPtrInput interface {
	pulumi.Input

	ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutput() RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput
	ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(context.Context) RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput
}

type registrationContactSettingsRegistrantContactPostalAddressPtrType RegistrationContactSettingsRegistrantContactPostalAddressArgs

func RegistrationContactSettingsRegistrantContactPostalAddressPtr(v *RegistrationContactSettingsRegistrantContactPostalAddressArgs) RegistrationContactSettingsRegistrantContactPostalAddressPtrInput {
	return (*registrationContactSettingsRegistrantContactPostalAddressPtrType)(v)
}

func (*registrationContactSettingsRegistrantContactPostalAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsRegistrantContactPostalAddress)(nil)).Elem()
}

func (i *registrationContactSettingsRegistrantContactPostalAddressPtrType) ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutput() RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return i.ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(context.Background())
}

func (i *registrationContactSettingsRegistrantContactPostalAddressPtrType) ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput)
}

type RegistrationContactSettingsRegistrantContactPostalAddressOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsRegistrantContactPostalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsRegistrantContactPostalAddress)(nil)).Elem()
}

func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) ToRegistrationContactSettingsRegistrantContactPostalAddressOutput() RegistrationContactSettingsRegistrantContactPostalAddressOutput {
	return o
}

func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) ToRegistrationContactSettingsRegistrantContactPostalAddressOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPostalAddressOutput {
	return o
}

func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutput() RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return o.ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(context.Background())
}

func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationContactSettingsRegistrantContactPostalAddress) *RegistrationContactSettingsRegistrantContactPostalAddress {
		return &v
	}).(RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput)
}

// Unstructured address lines describing the lower levels of an address.
// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
// the most specific line of an address can be selected based on the language.
func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) AddressLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContactPostalAddress) []string { return v.AddressLines }).(pulumi.StringArrayOutput)
}

// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
// this should be left unpopulated.
func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) AdministrativeArea() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContactPostalAddress) *string { return v.AdministrativeArea }).(pulumi.StringPtrOutput)
}

// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContactPostalAddress) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// The name of the organization at the address.
func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContactPostalAddress) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContactPostalAddress) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
// it might contain "care of" information.
//
// ***
func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContactPostalAddress) []string { return v.Recipients }).(pulumi.StringArrayOutput)
}

// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
// ensure the value is correct. See https://cldr.unicode.org/ and
// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
func (o RegistrationContactSettingsRegistrantContactPostalAddressOutput) RegionCode() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsRegistrantContactPostalAddress) string { return v.RegionCode }).(pulumi.StringOutput)
}

type RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsRegistrantContactPostalAddress)(nil)).Elem()
}

func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutput() RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return o
}

func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) ToRegistrationContactSettingsRegistrantContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput {
	return o
}

func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) Elem() RegistrationContactSettingsRegistrantContactPostalAddressOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContactPostalAddress) RegistrationContactSettingsRegistrantContactPostalAddress {
		if v != nil {
			return *v
		}
		var ret RegistrationContactSettingsRegistrantContactPostalAddress
		return ret
	}).(RegistrationContactSettingsRegistrantContactPostalAddressOutput)
}

// Unstructured address lines describing the lower levels of an address.
// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
// the most specific line of an address can be selected based on the language.
func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) AddressLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContactPostalAddress) []string {
		if v == nil {
			return nil
		}
		return v.AddressLines
	}).(pulumi.StringArrayOutput)
}

// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
// this should be left unpopulated.
func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) AdministrativeArea() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.AdministrativeArea
	}).(pulumi.StringPtrOutput)
}

// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

// The name of the organization at the address.
func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.Organization
	}).(pulumi.StringPtrOutput)
}

// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
// it might contain "care of" information.
//
// ***
func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContactPostalAddress) []string {
		if v == nil {
			return nil
		}
		return v.Recipients
	}).(pulumi.StringArrayOutput)
}

// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
// ensure the value is correct. See https://cldr.unicode.org/ and
// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
func (o RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput) RegionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsRegistrantContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return &v.RegionCode
	}).(pulumi.StringPtrOutput)
}

type RegistrationContactSettingsTechnicalContact struct {
	// Required. Email address of the contact.
	Email string `pulumi:"email"`
	// Fax number of the contact in international format. For example, "+1-800-555-0123".
	FaxNumber *string `pulumi:"faxNumber"`
	// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
	PhoneNumber string `pulumi:"phoneNumber"`
	// Required. Postal address of the contact.
	// Structure is documented below.
	PostalAddress RegistrationContactSettingsTechnicalContactPostalAddress `pulumi:"postalAddress"`
}

// RegistrationContactSettingsTechnicalContactInput is an input type that accepts RegistrationContactSettingsTechnicalContactArgs and RegistrationContactSettingsTechnicalContactOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsTechnicalContactInput` via:
//
//	RegistrationContactSettingsTechnicalContactArgs{...}
type RegistrationContactSettingsTechnicalContactInput interface {
	pulumi.Input

	ToRegistrationContactSettingsTechnicalContactOutput() RegistrationContactSettingsTechnicalContactOutput
	ToRegistrationContactSettingsTechnicalContactOutputWithContext(context.Context) RegistrationContactSettingsTechnicalContactOutput
}

type RegistrationContactSettingsTechnicalContactArgs struct {
	// Required. Email address of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// Fax number of the contact in international format. For example, "+1-800-555-0123".
	FaxNumber pulumi.StringPtrInput `pulumi:"faxNumber"`
	// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
	// Required. Postal address of the contact.
	// Structure is documented below.
	PostalAddress RegistrationContactSettingsTechnicalContactPostalAddressInput `pulumi:"postalAddress"`
}

func (RegistrationContactSettingsTechnicalContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsTechnicalContact)(nil)).Elem()
}

func (i RegistrationContactSettingsTechnicalContactArgs) ToRegistrationContactSettingsTechnicalContactOutput() RegistrationContactSettingsTechnicalContactOutput {
	return i.ToRegistrationContactSettingsTechnicalContactOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsTechnicalContactArgs) ToRegistrationContactSettingsTechnicalContactOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsTechnicalContactOutput)
}

func (i RegistrationContactSettingsTechnicalContactArgs) ToRegistrationContactSettingsTechnicalContactPtrOutput() RegistrationContactSettingsTechnicalContactPtrOutput {
	return i.ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsTechnicalContactArgs) ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsTechnicalContactOutput).ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(ctx)
}

// RegistrationContactSettingsTechnicalContactPtrInput is an input type that accepts RegistrationContactSettingsTechnicalContactArgs, RegistrationContactSettingsTechnicalContactPtr and RegistrationContactSettingsTechnicalContactPtrOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsTechnicalContactPtrInput` via:
//
//	        RegistrationContactSettingsTechnicalContactArgs{...}
//
//	or:
//
//	        nil
type RegistrationContactSettingsTechnicalContactPtrInput interface {
	pulumi.Input

	ToRegistrationContactSettingsTechnicalContactPtrOutput() RegistrationContactSettingsTechnicalContactPtrOutput
	ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(context.Context) RegistrationContactSettingsTechnicalContactPtrOutput
}

type registrationContactSettingsTechnicalContactPtrType RegistrationContactSettingsTechnicalContactArgs

func RegistrationContactSettingsTechnicalContactPtr(v *RegistrationContactSettingsTechnicalContactArgs) RegistrationContactSettingsTechnicalContactPtrInput {
	return (*registrationContactSettingsTechnicalContactPtrType)(v)
}

func (*registrationContactSettingsTechnicalContactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsTechnicalContact)(nil)).Elem()
}

func (i *registrationContactSettingsTechnicalContactPtrType) ToRegistrationContactSettingsTechnicalContactPtrOutput() RegistrationContactSettingsTechnicalContactPtrOutput {
	return i.ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(context.Background())
}

func (i *registrationContactSettingsTechnicalContactPtrType) ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsTechnicalContactPtrOutput)
}

type RegistrationContactSettingsTechnicalContactOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsTechnicalContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsTechnicalContact)(nil)).Elem()
}

func (o RegistrationContactSettingsTechnicalContactOutput) ToRegistrationContactSettingsTechnicalContactOutput() RegistrationContactSettingsTechnicalContactOutput {
	return o
}

func (o RegistrationContactSettingsTechnicalContactOutput) ToRegistrationContactSettingsTechnicalContactOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactOutput {
	return o
}

func (o RegistrationContactSettingsTechnicalContactOutput) ToRegistrationContactSettingsTechnicalContactPtrOutput() RegistrationContactSettingsTechnicalContactPtrOutput {
	return o.ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(context.Background())
}

func (o RegistrationContactSettingsTechnicalContactOutput) ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationContactSettingsTechnicalContact) *RegistrationContactSettingsTechnicalContact {
		return &v
	}).(RegistrationContactSettingsTechnicalContactPtrOutput)
}

// Required. Email address of the contact.
func (o RegistrationContactSettingsTechnicalContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContact) string { return v.Email }).(pulumi.StringOutput)
}

// Fax number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsTechnicalContactOutput) FaxNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContact) *string { return v.FaxNumber }).(pulumi.StringPtrOutput)
}

// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsTechnicalContactOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContact) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// Required. Postal address of the contact.
// Structure is documented below.
func (o RegistrationContactSettingsTechnicalContactOutput) PostalAddress() RegistrationContactSettingsTechnicalContactPostalAddressOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContact) RegistrationContactSettingsTechnicalContactPostalAddress {
		return v.PostalAddress
	}).(RegistrationContactSettingsTechnicalContactPostalAddressOutput)
}

type RegistrationContactSettingsTechnicalContactPtrOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsTechnicalContactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsTechnicalContact)(nil)).Elem()
}

func (o RegistrationContactSettingsTechnicalContactPtrOutput) ToRegistrationContactSettingsTechnicalContactPtrOutput() RegistrationContactSettingsTechnicalContactPtrOutput {
	return o
}

func (o RegistrationContactSettingsTechnicalContactPtrOutput) ToRegistrationContactSettingsTechnicalContactPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPtrOutput {
	return o
}

func (o RegistrationContactSettingsTechnicalContactPtrOutput) Elem() RegistrationContactSettingsTechnicalContactOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContact) RegistrationContactSettingsTechnicalContact {
		if v != nil {
			return *v
		}
		var ret RegistrationContactSettingsTechnicalContact
		return ret
	}).(RegistrationContactSettingsTechnicalContactOutput)
}

// Required. Email address of the contact.
func (o RegistrationContactSettingsTechnicalContactPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContact) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// Fax number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsTechnicalContactPtrOutput) FaxNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContact) *string {
		if v == nil {
			return nil
		}
		return v.FaxNumber
	}).(pulumi.StringPtrOutput)
}

// Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
func (o RegistrationContactSettingsTechnicalContactPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContact) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

// Required. Postal address of the contact.
// Structure is documented below.
func (o RegistrationContactSettingsTechnicalContactPtrOutput) PostalAddress() RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContact) *RegistrationContactSettingsTechnicalContactPostalAddress {
		if v == nil {
			return nil
		}
		return &v.PostalAddress
	}).(RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput)
}

type RegistrationContactSettingsTechnicalContactPostalAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
	// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
	// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
	// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
	// the most specific line of an address can be selected based on the language.
	AddressLines []string `pulumi:"addressLines"`
	// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
	// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
	// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
	// this should be left unpopulated.
	AdministrativeArea *string `pulumi:"administrativeArea"`
	// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
	// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
	Locality *string `pulumi:"locality"`
	// The name of the organization at the address.
	Organization *string `pulumi:"organization"`
	// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
	// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `pulumi:"postalCode"`
	// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
	// it might contain "care of" information.
	//
	// ***
	Recipients []string `pulumi:"recipients"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
	// ensure the value is correct. See https://cldr.unicode.org/ and
	// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode string `pulumi:"regionCode"`
}

// RegistrationContactSettingsTechnicalContactPostalAddressInput is an input type that accepts RegistrationContactSettingsTechnicalContactPostalAddressArgs and RegistrationContactSettingsTechnicalContactPostalAddressOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsTechnicalContactPostalAddressInput` via:
//
//	RegistrationContactSettingsTechnicalContactPostalAddressArgs{...}
type RegistrationContactSettingsTechnicalContactPostalAddressInput interface {
	pulumi.Input

	ToRegistrationContactSettingsTechnicalContactPostalAddressOutput() RegistrationContactSettingsTechnicalContactPostalAddressOutput
	ToRegistrationContactSettingsTechnicalContactPostalAddressOutputWithContext(context.Context) RegistrationContactSettingsTechnicalContactPostalAddressOutput
}

type RegistrationContactSettingsTechnicalContactPostalAddressArgs struct {
	// Unstructured address lines describing the lower levels of an address.
	// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
	// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
	// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
	// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
	// the most specific line of an address can be selected based on the language.
	AddressLines pulumi.StringArrayInput `pulumi:"addressLines"`
	// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
	// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
	// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
	// this should be left unpopulated.
	AdministrativeArea pulumi.StringPtrInput `pulumi:"administrativeArea"`
	// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
	// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// The name of the organization at the address.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
	// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode pulumi.StringPtrInput `pulumi:"postalCode"`
	// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
	// it might contain "care of" information.
	//
	// ***
	Recipients pulumi.StringArrayInput `pulumi:"recipients"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
	// ensure the value is correct. See https://cldr.unicode.org/ and
	// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode pulumi.StringInput `pulumi:"regionCode"`
}

func (RegistrationContactSettingsTechnicalContactPostalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsTechnicalContactPostalAddress)(nil)).Elem()
}

func (i RegistrationContactSettingsTechnicalContactPostalAddressArgs) ToRegistrationContactSettingsTechnicalContactPostalAddressOutput() RegistrationContactSettingsTechnicalContactPostalAddressOutput {
	return i.ToRegistrationContactSettingsTechnicalContactPostalAddressOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsTechnicalContactPostalAddressArgs) ToRegistrationContactSettingsTechnicalContactPostalAddressOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPostalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsTechnicalContactPostalAddressOutput)
}

func (i RegistrationContactSettingsTechnicalContactPostalAddressArgs) ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutput() RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return i.ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(context.Background())
}

func (i RegistrationContactSettingsTechnicalContactPostalAddressArgs) ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsTechnicalContactPostalAddressOutput).ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(ctx)
}

// RegistrationContactSettingsTechnicalContactPostalAddressPtrInput is an input type that accepts RegistrationContactSettingsTechnicalContactPostalAddressArgs, RegistrationContactSettingsTechnicalContactPostalAddressPtr and RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput values.
// You can construct a concrete instance of `RegistrationContactSettingsTechnicalContactPostalAddressPtrInput` via:
//
//	        RegistrationContactSettingsTechnicalContactPostalAddressArgs{...}
//
//	or:
//
//	        nil
type RegistrationContactSettingsTechnicalContactPostalAddressPtrInput interface {
	pulumi.Input

	ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutput() RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput
	ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(context.Context) RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput
}

type registrationContactSettingsTechnicalContactPostalAddressPtrType RegistrationContactSettingsTechnicalContactPostalAddressArgs

func RegistrationContactSettingsTechnicalContactPostalAddressPtr(v *RegistrationContactSettingsTechnicalContactPostalAddressArgs) RegistrationContactSettingsTechnicalContactPostalAddressPtrInput {
	return (*registrationContactSettingsTechnicalContactPostalAddressPtrType)(v)
}

func (*registrationContactSettingsTechnicalContactPostalAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsTechnicalContactPostalAddress)(nil)).Elem()
}

func (i *registrationContactSettingsTechnicalContactPostalAddressPtrType) ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutput() RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return i.ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(context.Background())
}

func (i *registrationContactSettingsTechnicalContactPostalAddressPtrType) ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput)
}

type RegistrationContactSettingsTechnicalContactPostalAddressOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsTechnicalContactPostalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationContactSettingsTechnicalContactPostalAddress)(nil)).Elem()
}

func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) ToRegistrationContactSettingsTechnicalContactPostalAddressOutput() RegistrationContactSettingsTechnicalContactPostalAddressOutput {
	return o
}

func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) ToRegistrationContactSettingsTechnicalContactPostalAddressOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPostalAddressOutput {
	return o
}

func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutput() RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return o.ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(context.Background())
}

func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationContactSettingsTechnicalContactPostalAddress) *RegistrationContactSettingsTechnicalContactPostalAddress {
		return &v
	}).(RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput)
}

// Unstructured address lines describing the lower levels of an address.
// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
// the most specific line of an address can be selected based on the language.
func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) AddressLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContactPostalAddress) []string { return v.AddressLines }).(pulumi.StringArrayOutput)
}

// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
// this should be left unpopulated.
func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) AdministrativeArea() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContactPostalAddress) *string { return v.AdministrativeArea }).(pulumi.StringPtrOutput)
}

// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContactPostalAddress) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// The name of the organization at the address.
func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContactPostalAddress) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContactPostalAddress) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
// it might contain "care of" information.
//
// ***
func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContactPostalAddress) []string { return v.Recipients }).(pulumi.StringArrayOutput)
}

// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
// ensure the value is correct. See https://cldr.unicode.org/ and
// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
func (o RegistrationContactSettingsTechnicalContactPostalAddressOutput) RegionCode() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationContactSettingsTechnicalContactPostalAddress) string { return v.RegionCode }).(pulumi.StringOutput)
}

type RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput struct{ *pulumi.OutputState }

func (RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationContactSettingsTechnicalContactPostalAddress)(nil)).Elem()
}

func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutput() RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return o
}

func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) ToRegistrationContactSettingsTechnicalContactPostalAddressPtrOutputWithContext(ctx context.Context) RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput {
	return o
}

func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) Elem() RegistrationContactSettingsTechnicalContactPostalAddressOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContactPostalAddress) RegistrationContactSettingsTechnicalContactPostalAddress {
		if v != nil {
			return *v
		}
		var ret RegistrationContactSettingsTechnicalContactPostalAddress
		return ret
	}).(RegistrationContactSettingsTechnicalContactPostalAddressOutput)
}

// Unstructured address lines describing the lower levels of an address.
// Because values in addressLines do not have type information and may sometimes contain multiple values in a single
// field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
// "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), addressLanguage
// is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
// the most specific line of an address can be selected based on the language.
func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) AddressLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContactPostalAddress) []string {
		if v == nil {
			return nil
		}
		return v.AddressLines
	}).(pulumi.StringArrayOutput)
}

// Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
// a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
// (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
// this should be left unpopulated.
func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) AdministrativeArea() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.AdministrativeArea
	}).(pulumi.StringPtrOutput)
}

// Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
// where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

// The name of the organization at the address.
func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.Organization
	}).(pulumi.StringPtrOutput)
}

// Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
// they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
// it might contain "care of" information.
//
// ***
func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContactPostalAddress) []string {
		if v == nil {
			return nil
		}
		return v.Recipients
	}).(pulumi.StringArrayOutput)
}

// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
// ensure the value is correct. See https://cldr.unicode.org/ and
// https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
func (o RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput) RegionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationContactSettingsTechnicalContactPostalAddress) *string {
		if v == nil {
			return nil
		}
		return &v.RegionCode
	}).(pulumi.StringPtrOutput)
}

type RegistrationDnsSettings struct {
	// Configuration for an arbitrary DNS provider.
	// Structure is documented below.
	CustomDns *RegistrationDnsSettingsCustomDns `pulumi:"customDns"`
	// The list of glue records for this Registration. Commonly empty.
	// Structure is documented below.
	GlueRecords []RegistrationDnsSettingsGlueRecord `pulumi:"glueRecords"`
}

// RegistrationDnsSettingsInput is an input type that accepts RegistrationDnsSettingsArgs and RegistrationDnsSettingsOutput values.
// You can construct a concrete instance of `RegistrationDnsSettingsInput` via:
//
//	RegistrationDnsSettingsArgs{...}
type RegistrationDnsSettingsInput interface {
	pulumi.Input

	ToRegistrationDnsSettingsOutput() RegistrationDnsSettingsOutput
	ToRegistrationDnsSettingsOutputWithContext(context.Context) RegistrationDnsSettingsOutput
}

type RegistrationDnsSettingsArgs struct {
	// Configuration for an arbitrary DNS provider.
	// Structure is documented below.
	CustomDns RegistrationDnsSettingsCustomDnsPtrInput `pulumi:"customDns"`
	// The list of glue records for this Registration. Commonly empty.
	// Structure is documented below.
	GlueRecords RegistrationDnsSettingsGlueRecordArrayInput `pulumi:"glueRecords"`
}

func (RegistrationDnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationDnsSettings)(nil)).Elem()
}

func (i RegistrationDnsSettingsArgs) ToRegistrationDnsSettingsOutput() RegistrationDnsSettingsOutput {
	return i.ToRegistrationDnsSettingsOutputWithContext(context.Background())
}

func (i RegistrationDnsSettingsArgs) ToRegistrationDnsSettingsOutputWithContext(ctx context.Context) RegistrationDnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsOutput)
}

func (i RegistrationDnsSettingsArgs) ToRegistrationDnsSettingsPtrOutput() RegistrationDnsSettingsPtrOutput {
	return i.ToRegistrationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i RegistrationDnsSettingsArgs) ToRegistrationDnsSettingsPtrOutputWithContext(ctx context.Context) RegistrationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsOutput).ToRegistrationDnsSettingsPtrOutputWithContext(ctx)
}

// RegistrationDnsSettingsPtrInput is an input type that accepts RegistrationDnsSettingsArgs, RegistrationDnsSettingsPtr and RegistrationDnsSettingsPtrOutput values.
// You can construct a concrete instance of `RegistrationDnsSettingsPtrInput` via:
//
//	        RegistrationDnsSettingsArgs{...}
//
//	or:
//
//	        nil
type RegistrationDnsSettingsPtrInput interface {
	pulumi.Input

	ToRegistrationDnsSettingsPtrOutput() RegistrationDnsSettingsPtrOutput
	ToRegistrationDnsSettingsPtrOutputWithContext(context.Context) RegistrationDnsSettingsPtrOutput
}

type registrationDnsSettingsPtrType RegistrationDnsSettingsArgs

func RegistrationDnsSettingsPtr(v *RegistrationDnsSettingsArgs) RegistrationDnsSettingsPtrInput {
	return (*registrationDnsSettingsPtrType)(v)
}

func (*registrationDnsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationDnsSettings)(nil)).Elem()
}

func (i *registrationDnsSettingsPtrType) ToRegistrationDnsSettingsPtrOutput() RegistrationDnsSettingsPtrOutput {
	return i.ToRegistrationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i *registrationDnsSettingsPtrType) ToRegistrationDnsSettingsPtrOutputWithContext(ctx context.Context) RegistrationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsPtrOutput)
}

type RegistrationDnsSettingsOutput struct{ *pulumi.OutputState }

func (RegistrationDnsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationDnsSettings)(nil)).Elem()
}

func (o RegistrationDnsSettingsOutput) ToRegistrationDnsSettingsOutput() RegistrationDnsSettingsOutput {
	return o
}

func (o RegistrationDnsSettingsOutput) ToRegistrationDnsSettingsOutputWithContext(ctx context.Context) RegistrationDnsSettingsOutput {
	return o
}

func (o RegistrationDnsSettingsOutput) ToRegistrationDnsSettingsPtrOutput() RegistrationDnsSettingsPtrOutput {
	return o.ToRegistrationDnsSettingsPtrOutputWithContext(context.Background())
}

func (o RegistrationDnsSettingsOutput) ToRegistrationDnsSettingsPtrOutputWithContext(ctx context.Context) RegistrationDnsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationDnsSettings) *RegistrationDnsSettings {
		return &v
	}).(RegistrationDnsSettingsPtrOutput)
}

// Configuration for an arbitrary DNS provider.
// Structure is documented below.
func (o RegistrationDnsSettingsOutput) CustomDns() RegistrationDnsSettingsCustomDnsPtrOutput {
	return o.ApplyT(func(v RegistrationDnsSettings) *RegistrationDnsSettingsCustomDns { return v.CustomDns }).(RegistrationDnsSettingsCustomDnsPtrOutput)
}

// The list of glue records for this Registration. Commonly empty.
// Structure is documented below.
func (o RegistrationDnsSettingsOutput) GlueRecords() RegistrationDnsSettingsGlueRecordArrayOutput {
	return o.ApplyT(func(v RegistrationDnsSettings) []RegistrationDnsSettingsGlueRecord { return v.GlueRecords }).(RegistrationDnsSettingsGlueRecordArrayOutput)
}

type RegistrationDnsSettingsPtrOutput struct{ *pulumi.OutputState }

func (RegistrationDnsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationDnsSettings)(nil)).Elem()
}

func (o RegistrationDnsSettingsPtrOutput) ToRegistrationDnsSettingsPtrOutput() RegistrationDnsSettingsPtrOutput {
	return o
}

func (o RegistrationDnsSettingsPtrOutput) ToRegistrationDnsSettingsPtrOutputWithContext(ctx context.Context) RegistrationDnsSettingsPtrOutput {
	return o
}

func (o RegistrationDnsSettingsPtrOutput) Elem() RegistrationDnsSettingsOutput {
	return o.ApplyT(func(v *RegistrationDnsSettings) RegistrationDnsSettings {
		if v != nil {
			return *v
		}
		var ret RegistrationDnsSettings
		return ret
	}).(RegistrationDnsSettingsOutput)
}

// Configuration for an arbitrary DNS provider.
// Structure is documented below.
func (o RegistrationDnsSettingsPtrOutput) CustomDns() RegistrationDnsSettingsCustomDnsPtrOutput {
	return o.ApplyT(func(v *RegistrationDnsSettings) *RegistrationDnsSettingsCustomDns {
		if v == nil {
			return nil
		}
		return v.CustomDns
	}).(RegistrationDnsSettingsCustomDnsPtrOutput)
}

// The list of glue records for this Registration. Commonly empty.
// Structure is documented below.
func (o RegistrationDnsSettingsPtrOutput) GlueRecords() RegistrationDnsSettingsGlueRecordArrayOutput {
	return o.ApplyT(func(v *RegistrationDnsSettings) []RegistrationDnsSettingsGlueRecord {
		if v == nil {
			return nil
		}
		return v.GlueRecords
	}).(RegistrationDnsSettingsGlueRecordArrayOutput)
}

type RegistrationDnsSettingsCustomDns struct {
	// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide
	// the values to set here. If this field is empty, DNSSEC is disabled.
	// Structure is documented below.
	DsRecords []RegistrationDnsSettingsCustomDnsDsRecord `pulumi:"dsRecords"`
	// Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
	// name, with Unicode domain names expressed in Punycode format.
	NameServers []string `pulumi:"nameServers"`
}

// RegistrationDnsSettingsCustomDnsInput is an input type that accepts RegistrationDnsSettingsCustomDnsArgs and RegistrationDnsSettingsCustomDnsOutput values.
// You can construct a concrete instance of `RegistrationDnsSettingsCustomDnsInput` via:
//
//	RegistrationDnsSettingsCustomDnsArgs{...}
type RegistrationDnsSettingsCustomDnsInput interface {
	pulumi.Input

	ToRegistrationDnsSettingsCustomDnsOutput() RegistrationDnsSettingsCustomDnsOutput
	ToRegistrationDnsSettingsCustomDnsOutputWithContext(context.Context) RegistrationDnsSettingsCustomDnsOutput
}

type RegistrationDnsSettingsCustomDnsArgs struct {
	// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide
	// the values to set here. If this field is empty, DNSSEC is disabled.
	// Structure is documented below.
	DsRecords RegistrationDnsSettingsCustomDnsDsRecordArrayInput `pulumi:"dsRecords"`
	// Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
	// name, with Unicode domain names expressed in Punycode format.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
}

func (RegistrationDnsSettingsCustomDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationDnsSettingsCustomDns)(nil)).Elem()
}

func (i RegistrationDnsSettingsCustomDnsArgs) ToRegistrationDnsSettingsCustomDnsOutput() RegistrationDnsSettingsCustomDnsOutput {
	return i.ToRegistrationDnsSettingsCustomDnsOutputWithContext(context.Background())
}

func (i RegistrationDnsSettingsCustomDnsArgs) ToRegistrationDnsSettingsCustomDnsOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsCustomDnsOutput)
}

func (i RegistrationDnsSettingsCustomDnsArgs) ToRegistrationDnsSettingsCustomDnsPtrOutput() RegistrationDnsSettingsCustomDnsPtrOutput {
	return i.ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(context.Background())
}

func (i RegistrationDnsSettingsCustomDnsArgs) ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsCustomDnsOutput).ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(ctx)
}

// RegistrationDnsSettingsCustomDnsPtrInput is an input type that accepts RegistrationDnsSettingsCustomDnsArgs, RegistrationDnsSettingsCustomDnsPtr and RegistrationDnsSettingsCustomDnsPtrOutput values.
// You can construct a concrete instance of `RegistrationDnsSettingsCustomDnsPtrInput` via:
//
//	        RegistrationDnsSettingsCustomDnsArgs{...}
//
//	or:
//
//	        nil
type RegistrationDnsSettingsCustomDnsPtrInput interface {
	pulumi.Input

	ToRegistrationDnsSettingsCustomDnsPtrOutput() RegistrationDnsSettingsCustomDnsPtrOutput
	ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(context.Context) RegistrationDnsSettingsCustomDnsPtrOutput
}

type registrationDnsSettingsCustomDnsPtrType RegistrationDnsSettingsCustomDnsArgs

func RegistrationDnsSettingsCustomDnsPtr(v *RegistrationDnsSettingsCustomDnsArgs) RegistrationDnsSettingsCustomDnsPtrInput {
	return (*registrationDnsSettingsCustomDnsPtrType)(v)
}

func (*registrationDnsSettingsCustomDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationDnsSettingsCustomDns)(nil)).Elem()
}

func (i *registrationDnsSettingsCustomDnsPtrType) ToRegistrationDnsSettingsCustomDnsPtrOutput() RegistrationDnsSettingsCustomDnsPtrOutput {
	return i.ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(context.Background())
}

func (i *registrationDnsSettingsCustomDnsPtrType) ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsCustomDnsPtrOutput)
}

type RegistrationDnsSettingsCustomDnsOutput struct{ *pulumi.OutputState }

func (RegistrationDnsSettingsCustomDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationDnsSettingsCustomDns)(nil)).Elem()
}

func (o RegistrationDnsSettingsCustomDnsOutput) ToRegistrationDnsSettingsCustomDnsOutput() RegistrationDnsSettingsCustomDnsOutput {
	return o
}

func (o RegistrationDnsSettingsCustomDnsOutput) ToRegistrationDnsSettingsCustomDnsOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsOutput {
	return o
}

func (o RegistrationDnsSettingsCustomDnsOutput) ToRegistrationDnsSettingsCustomDnsPtrOutput() RegistrationDnsSettingsCustomDnsPtrOutput {
	return o.ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(context.Background())
}

func (o RegistrationDnsSettingsCustomDnsOutput) ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationDnsSettingsCustomDns) *RegistrationDnsSettingsCustomDns {
		return &v
	}).(RegistrationDnsSettingsCustomDnsPtrOutput)
}

// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide
// the values to set here. If this field is empty, DNSSEC is disabled.
// Structure is documented below.
func (o RegistrationDnsSettingsCustomDnsOutput) DsRecords() RegistrationDnsSettingsCustomDnsDsRecordArrayOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsCustomDns) []RegistrationDnsSettingsCustomDnsDsRecord {
		return v.DsRecords
	}).(RegistrationDnsSettingsCustomDnsDsRecordArrayOutput)
}

// Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
// name, with Unicode domain names expressed in Punycode format.
func (o RegistrationDnsSettingsCustomDnsOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsCustomDns) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

type RegistrationDnsSettingsCustomDnsPtrOutput struct{ *pulumi.OutputState }

func (RegistrationDnsSettingsCustomDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationDnsSettingsCustomDns)(nil)).Elem()
}

func (o RegistrationDnsSettingsCustomDnsPtrOutput) ToRegistrationDnsSettingsCustomDnsPtrOutput() RegistrationDnsSettingsCustomDnsPtrOutput {
	return o
}

func (o RegistrationDnsSettingsCustomDnsPtrOutput) ToRegistrationDnsSettingsCustomDnsPtrOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsPtrOutput {
	return o
}

func (o RegistrationDnsSettingsCustomDnsPtrOutput) Elem() RegistrationDnsSettingsCustomDnsOutput {
	return o.ApplyT(func(v *RegistrationDnsSettingsCustomDns) RegistrationDnsSettingsCustomDns {
		if v != nil {
			return *v
		}
		var ret RegistrationDnsSettingsCustomDns
		return ret
	}).(RegistrationDnsSettingsCustomDnsOutput)
}

// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide
// the values to set here. If this field is empty, DNSSEC is disabled.
// Structure is documented below.
func (o RegistrationDnsSettingsCustomDnsPtrOutput) DsRecords() RegistrationDnsSettingsCustomDnsDsRecordArrayOutput {
	return o.ApplyT(func(v *RegistrationDnsSettingsCustomDns) []RegistrationDnsSettingsCustomDnsDsRecord {
		if v == nil {
			return nil
		}
		return v.DsRecords
	}).(RegistrationDnsSettingsCustomDnsDsRecordArrayOutput)
}

// Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
// name, with Unicode domain names expressed in Punycode format.
func (o RegistrationDnsSettingsCustomDnsPtrOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistrationDnsSettingsCustomDns) []string {
		if v == nil {
			return nil
		}
		return v.NameServers
	}).(pulumi.StringArrayOutput)
}

type RegistrationDnsSettingsCustomDnsDsRecord struct {
	// The algorithm used to generate the referenced DNSKEY.
	Algorithm *string `pulumi:"algorithm"`
	// The digest generated from the referenced DNSKEY.
	Digest *string `pulumi:"digest"`
	// The hash function used to generate the digest of the referenced DNSKEY.
	DigestType *string `pulumi:"digestType"`
	// The key tag of the record. Must be set in range 0 -- 65535.
	KeyTag *int `pulumi:"keyTag"`
}

// RegistrationDnsSettingsCustomDnsDsRecordInput is an input type that accepts RegistrationDnsSettingsCustomDnsDsRecordArgs and RegistrationDnsSettingsCustomDnsDsRecordOutput values.
// You can construct a concrete instance of `RegistrationDnsSettingsCustomDnsDsRecordInput` via:
//
//	RegistrationDnsSettingsCustomDnsDsRecordArgs{...}
type RegistrationDnsSettingsCustomDnsDsRecordInput interface {
	pulumi.Input

	ToRegistrationDnsSettingsCustomDnsDsRecordOutput() RegistrationDnsSettingsCustomDnsDsRecordOutput
	ToRegistrationDnsSettingsCustomDnsDsRecordOutputWithContext(context.Context) RegistrationDnsSettingsCustomDnsDsRecordOutput
}

type RegistrationDnsSettingsCustomDnsDsRecordArgs struct {
	// The algorithm used to generate the referenced DNSKEY.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// The digest generated from the referenced DNSKEY.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// The hash function used to generate the digest of the referenced DNSKEY.
	DigestType pulumi.StringPtrInput `pulumi:"digestType"`
	// The key tag of the record. Must be set in range 0 -- 65535.
	KeyTag pulumi.IntPtrInput `pulumi:"keyTag"`
}

func (RegistrationDnsSettingsCustomDnsDsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationDnsSettingsCustomDnsDsRecord)(nil)).Elem()
}

func (i RegistrationDnsSettingsCustomDnsDsRecordArgs) ToRegistrationDnsSettingsCustomDnsDsRecordOutput() RegistrationDnsSettingsCustomDnsDsRecordOutput {
	return i.ToRegistrationDnsSettingsCustomDnsDsRecordOutputWithContext(context.Background())
}

func (i RegistrationDnsSettingsCustomDnsDsRecordArgs) ToRegistrationDnsSettingsCustomDnsDsRecordOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsDsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsCustomDnsDsRecordOutput)
}

// RegistrationDnsSettingsCustomDnsDsRecordArrayInput is an input type that accepts RegistrationDnsSettingsCustomDnsDsRecordArray and RegistrationDnsSettingsCustomDnsDsRecordArrayOutput values.
// You can construct a concrete instance of `RegistrationDnsSettingsCustomDnsDsRecordArrayInput` via:
//
//	RegistrationDnsSettingsCustomDnsDsRecordArray{ RegistrationDnsSettingsCustomDnsDsRecordArgs{...} }
type RegistrationDnsSettingsCustomDnsDsRecordArrayInput interface {
	pulumi.Input

	ToRegistrationDnsSettingsCustomDnsDsRecordArrayOutput() RegistrationDnsSettingsCustomDnsDsRecordArrayOutput
	ToRegistrationDnsSettingsCustomDnsDsRecordArrayOutputWithContext(context.Context) RegistrationDnsSettingsCustomDnsDsRecordArrayOutput
}

type RegistrationDnsSettingsCustomDnsDsRecordArray []RegistrationDnsSettingsCustomDnsDsRecordInput

func (RegistrationDnsSettingsCustomDnsDsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistrationDnsSettingsCustomDnsDsRecord)(nil)).Elem()
}

func (i RegistrationDnsSettingsCustomDnsDsRecordArray) ToRegistrationDnsSettingsCustomDnsDsRecordArrayOutput() RegistrationDnsSettingsCustomDnsDsRecordArrayOutput {
	return i.ToRegistrationDnsSettingsCustomDnsDsRecordArrayOutputWithContext(context.Background())
}

func (i RegistrationDnsSettingsCustomDnsDsRecordArray) ToRegistrationDnsSettingsCustomDnsDsRecordArrayOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsDsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsCustomDnsDsRecordArrayOutput)
}

type RegistrationDnsSettingsCustomDnsDsRecordOutput struct{ *pulumi.OutputState }

func (RegistrationDnsSettingsCustomDnsDsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationDnsSettingsCustomDnsDsRecord)(nil)).Elem()
}

func (o RegistrationDnsSettingsCustomDnsDsRecordOutput) ToRegistrationDnsSettingsCustomDnsDsRecordOutput() RegistrationDnsSettingsCustomDnsDsRecordOutput {
	return o
}

func (o RegistrationDnsSettingsCustomDnsDsRecordOutput) ToRegistrationDnsSettingsCustomDnsDsRecordOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsDsRecordOutput {
	return o
}

// The algorithm used to generate the referenced DNSKEY.
func (o RegistrationDnsSettingsCustomDnsDsRecordOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsCustomDnsDsRecord) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// The digest generated from the referenced DNSKEY.
func (o RegistrationDnsSettingsCustomDnsDsRecordOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsCustomDnsDsRecord) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The hash function used to generate the digest of the referenced DNSKEY.
func (o RegistrationDnsSettingsCustomDnsDsRecordOutput) DigestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsCustomDnsDsRecord) *string { return v.DigestType }).(pulumi.StringPtrOutput)
}

// The key tag of the record. Must be set in range 0 -- 65535.
func (o RegistrationDnsSettingsCustomDnsDsRecordOutput) KeyTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsCustomDnsDsRecord) *int { return v.KeyTag }).(pulumi.IntPtrOutput)
}

type RegistrationDnsSettingsCustomDnsDsRecordArrayOutput struct{ *pulumi.OutputState }

func (RegistrationDnsSettingsCustomDnsDsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistrationDnsSettingsCustomDnsDsRecord)(nil)).Elem()
}

func (o RegistrationDnsSettingsCustomDnsDsRecordArrayOutput) ToRegistrationDnsSettingsCustomDnsDsRecordArrayOutput() RegistrationDnsSettingsCustomDnsDsRecordArrayOutput {
	return o
}

func (o RegistrationDnsSettingsCustomDnsDsRecordArrayOutput) ToRegistrationDnsSettingsCustomDnsDsRecordArrayOutputWithContext(ctx context.Context) RegistrationDnsSettingsCustomDnsDsRecordArrayOutput {
	return o
}

func (o RegistrationDnsSettingsCustomDnsDsRecordArrayOutput) Index(i pulumi.IntInput) RegistrationDnsSettingsCustomDnsDsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistrationDnsSettingsCustomDnsDsRecord {
		return vs[0].([]RegistrationDnsSettingsCustomDnsDsRecord)[vs[1].(int)]
	}).(RegistrationDnsSettingsCustomDnsDsRecordOutput)
}

type RegistrationDnsSettingsGlueRecord struct {
	// Required. Domain name of the host in Punycode format.
	HostName string `pulumi:"hostName"`
	// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
	// At least one of ipv4Address and ipv6Address must be set.
	Ipv4Addresses []string `pulumi:"ipv4Addresses"`
	// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
	// At least one of ipv4Address and ipv6Address must be set.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
}

// RegistrationDnsSettingsGlueRecordInput is an input type that accepts RegistrationDnsSettingsGlueRecordArgs and RegistrationDnsSettingsGlueRecordOutput values.
// You can construct a concrete instance of `RegistrationDnsSettingsGlueRecordInput` via:
//
//	RegistrationDnsSettingsGlueRecordArgs{...}
type RegistrationDnsSettingsGlueRecordInput interface {
	pulumi.Input

	ToRegistrationDnsSettingsGlueRecordOutput() RegistrationDnsSettingsGlueRecordOutput
	ToRegistrationDnsSettingsGlueRecordOutputWithContext(context.Context) RegistrationDnsSettingsGlueRecordOutput
}

type RegistrationDnsSettingsGlueRecordArgs struct {
	// Required. Domain name of the host in Punycode format.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
	// At least one of ipv4Address and ipv6Address must be set.
	Ipv4Addresses pulumi.StringArrayInput `pulumi:"ipv4Addresses"`
	// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
	// At least one of ipv4Address and ipv6Address must be set.
	Ipv6Addresses pulumi.StringArrayInput `pulumi:"ipv6Addresses"`
}

func (RegistrationDnsSettingsGlueRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationDnsSettingsGlueRecord)(nil)).Elem()
}

func (i RegistrationDnsSettingsGlueRecordArgs) ToRegistrationDnsSettingsGlueRecordOutput() RegistrationDnsSettingsGlueRecordOutput {
	return i.ToRegistrationDnsSettingsGlueRecordOutputWithContext(context.Background())
}

func (i RegistrationDnsSettingsGlueRecordArgs) ToRegistrationDnsSettingsGlueRecordOutputWithContext(ctx context.Context) RegistrationDnsSettingsGlueRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsGlueRecordOutput)
}

// RegistrationDnsSettingsGlueRecordArrayInput is an input type that accepts RegistrationDnsSettingsGlueRecordArray and RegistrationDnsSettingsGlueRecordArrayOutput values.
// You can construct a concrete instance of `RegistrationDnsSettingsGlueRecordArrayInput` via:
//
//	RegistrationDnsSettingsGlueRecordArray{ RegistrationDnsSettingsGlueRecordArgs{...} }
type RegistrationDnsSettingsGlueRecordArrayInput interface {
	pulumi.Input

	ToRegistrationDnsSettingsGlueRecordArrayOutput() RegistrationDnsSettingsGlueRecordArrayOutput
	ToRegistrationDnsSettingsGlueRecordArrayOutputWithContext(context.Context) RegistrationDnsSettingsGlueRecordArrayOutput
}

type RegistrationDnsSettingsGlueRecordArray []RegistrationDnsSettingsGlueRecordInput

func (RegistrationDnsSettingsGlueRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistrationDnsSettingsGlueRecord)(nil)).Elem()
}

func (i RegistrationDnsSettingsGlueRecordArray) ToRegistrationDnsSettingsGlueRecordArrayOutput() RegistrationDnsSettingsGlueRecordArrayOutput {
	return i.ToRegistrationDnsSettingsGlueRecordArrayOutputWithContext(context.Background())
}

func (i RegistrationDnsSettingsGlueRecordArray) ToRegistrationDnsSettingsGlueRecordArrayOutputWithContext(ctx context.Context) RegistrationDnsSettingsGlueRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationDnsSettingsGlueRecordArrayOutput)
}

type RegistrationDnsSettingsGlueRecordOutput struct{ *pulumi.OutputState }

func (RegistrationDnsSettingsGlueRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationDnsSettingsGlueRecord)(nil)).Elem()
}

func (o RegistrationDnsSettingsGlueRecordOutput) ToRegistrationDnsSettingsGlueRecordOutput() RegistrationDnsSettingsGlueRecordOutput {
	return o
}

func (o RegistrationDnsSettingsGlueRecordOutput) ToRegistrationDnsSettingsGlueRecordOutputWithContext(ctx context.Context) RegistrationDnsSettingsGlueRecordOutput {
	return o
}

// Required. Domain name of the host in Punycode format.
func (o RegistrationDnsSettingsGlueRecordOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsGlueRecord) string { return v.HostName }).(pulumi.StringOutput)
}

// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
// At least one of ipv4Address and ipv6Address must be set.
func (o RegistrationDnsSettingsGlueRecordOutput) Ipv4Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsGlueRecord) []string { return v.Ipv4Addresses }).(pulumi.StringArrayOutput)
}

// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
// At least one of ipv4Address and ipv6Address must be set.
func (o RegistrationDnsSettingsGlueRecordOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistrationDnsSettingsGlueRecord) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

type RegistrationDnsSettingsGlueRecordArrayOutput struct{ *pulumi.OutputState }

func (RegistrationDnsSettingsGlueRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistrationDnsSettingsGlueRecord)(nil)).Elem()
}

func (o RegistrationDnsSettingsGlueRecordArrayOutput) ToRegistrationDnsSettingsGlueRecordArrayOutput() RegistrationDnsSettingsGlueRecordArrayOutput {
	return o
}

func (o RegistrationDnsSettingsGlueRecordArrayOutput) ToRegistrationDnsSettingsGlueRecordArrayOutputWithContext(ctx context.Context) RegistrationDnsSettingsGlueRecordArrayOutput {
	return o
}

func (o RegistrationDnsSettingsGlueRecordArrayOutput) Index(i pulumi.IntInput) RegistrationDnsSettingsGlueRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistrationDnsSettingsGlueRecord {
		return vs[0].([]RegistrationDnsSettingsGlueRecord)[vs[1].(int)]
	}).(RegistrationDnsSettingsGlueRecordOutput)
}

type RegistrationManagementSettings struct {
	// The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
	// If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
	// You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
	// resource has state ACTIVE or SUSPENDED.
	// When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
	// problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
	// the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
	PreferredRenewalMethod *string `pulumi:"preferredRenewalMethod"`
	// (Output)
	// Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
	// the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
	// or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
	// renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
	RenewalMethod *string `pulumi:"renewalMethod"`
	// Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
	TransferLockState *string `pulumi:"transferLockState"`
}

// RegistrationManagementSettingsInput is an input type that accepts RegistrationManagementSettingsArgs and RegistrationManagementSettingsOutput values.
// You can construct a concrete instance of `RegistrationManagementSettingsInput` via:
//
//	RegistrationManagementSettingsArgs{...}
type RegistrationManagementSettingsInput interface {
	pulumi.Input

	ToRegistrationManagementSettingsOutput() RegistrationManagementSettingsOutput
	ToRegistrationManagementSettingsOutputWithContext(context.Context) RegistrationManagementSettingsOutput
}

type RegistrationManagementSettingsArgs struct {
	// The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
	// If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
	// You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
	// resource has state ACTIVE or SUSPENDED.
	// When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
	// problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
	// the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
	PreferredRenewalMethod pulumi.StringPtrInput `pulumi:"preferredRenewalMethod"`
	// (Output)
	// Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
	// the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
	// or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
	// renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
	RenewalMethod pulumi.StringPtrInput `pulumi:"renewalMethod"`
	// Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
	TransferLockState pulumi.StringPtrInput `pulumi:"transferLockState"`
}

func (RegistrationManagementSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationManagementSettings)(nil)).Elem()
}

func (i RegistrationManagementSettingsArgs) ToRegistrationManagementSettingsOutput() RegistrationManagementSettingsOutput {
	return i.ToRegistrationManagementSettingsOutputWithContext(context.Background())
}

func (i RegistrationManagementSettingsArgs) ToRegistrationManagementSettingsOutputWithContext(ctx context.Context) RegistrationManagementSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationManagementSettingsOutput)
}

func (i RegistrationManagementSettingsArgs) ToRegistrationManagementSettingsPtrOutput() RegistrationManagementSettingsPtrOutput {
	return i.ToRegistrationManagementSettingsPtrOutputWithContext(context.Background())
}

func (i RegistrationManagementSettingsArgs) ToRegistrationManagementSettingsPtrOutputWithContext(ctx context.Context) RegistrationManagementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationManagementSettingsOutput).ToRegistrationManagementSettingsPtrOutputWithContext(ctx)
}

// RegistrationManagementSettingsPtrInput is an input type that accepts RegistrationManagementSettingsArgs, RegistrationManagementSettingsPtr and RegistrationManagementSettingsPtrOutput values.
// You can construct a concrete instance of `RegistrationManagementSettingsPtrInput` via:
//
//	        RegistrationManagementSettingsArgs{...}
//
//	or:
//
//	        nil
type RegistrationManagementSettingsPtrInput interface {
	pulumi.Input

	ToRegistrationManagementSettingsPtrOutput() RegistrationManagementSettingsPtrOutput
	ToRegistrationManagementSettingsPtrOutputWithContext(context.Context) RegistrationManagementSettingsPtrOutput
}

type registrationManagementSettingsPtrType RegistrationManagementSettingsArgs

func RegistrationManagementSettingsPtr(v *RegistrationManagementSettingsArgs) RegistrationManagementSettingsPtrInput {
	return (*registrationManagementSettingsPtrType)(v)
}

func (*registrationManagementSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationManagementSettings)(nil)).Elem()
}

func (i *registrationManagementSettingsPtrType) ToRegistrationManagementSettingsPtrOutput() RegistrationManagementSettingsPtrOutput {
	return i.ToRegistrationManagementSettingsPtrOutputWithContext(context.Background())
}

func (i *registrationManagementSettingsPtrType) ToRegistrationManagementSettingsPtrOutputWithContext(ctx context.Context) RegistrationManagementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationManagementSettingsPtrOutput)
}

type RegistrationManagementSettingsOutput struct{ *pulumi.OutputState }

func (RegistrationManagementSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationManagementSettings)(nil)).Elem()
}

func (o RegistrationManagementSettingsOutput) ToRegistrationManagementSettingsOutput() RegistrationManagementSettingsOutput {
	return o
}

func (o RegistrationManagementSettingsOutput) ToRegistrationManagementSettingsOutputWithContext(ctx context.Context) RegistrationManagementSettingsOutput {
	return o
}

func (o RegistrationManagementSettingsOutput) ToRegistrationManagementSettingsPtrOutput() RegistrationManagementSettingsPtrOutput {
	return o.ToRegistrationManagementSettingsPtrOutputWithContext(context.Background())
}

func (o RegistrationManagementSettingsOutput) ToRegistrationManagementSettingsPtrOutputWithContext(ctx context.Context) RegistrationManagementSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationManagementSettings) *RegistrationManagementSettings {
		return &v
	}).(RegistrationManagementSettingsPtrOutput)
}

// The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
// If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
// You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
// resource has state ACTIVE or SUSPENDED.
// When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
// problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
// the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
func (o RegistrationManagementSettingsOutput) PreferredRenewalMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationManagementSettings) *string { return v.PreferredRenewalMethod }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
// the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
// or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
// renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
func (o RegistrationManagementSettingsOutput) RenewalMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationManagementSettings) *string { return v.RenewalMethod }).(pulumi.StringPtrOutput)
}

// Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
func (o RegistrationManagementSettingsOutput) TransferLockState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationManagementSettings) *string { return v.TransferLockState }).(pulumi.StringPtrOutput)
}

type RegistrationManagementSettingsPtrOutput struct{ *pulumi.OutputState }

func (RegistrationManagementSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationManagementSettings)(nil)).Elem()
}

func (o RegistrationManagementSettingsPtrOutput) ToRegistrationManagementSettingsPtrOutput() RegistrationManagementSettingsPtrOutput {
	return o
}

func (o RegistrationManagementSettingsPtrOutput) ToRegistrationManagementSettingsPtrOutputWithContext(ctx context.Context) RegistrationManagementSettingsPtrOutput {
	return o
}

func (o RegistrationManagementSettingsPtrOutput) Elem() RegistrationManagementSettingsOutput {
	return o.ApplyT(func(v *RegistrationManagementSettings) RegistrationManagementSettings {
		if v != nil {
			return *v
		}
		var ret RegistrationManagementSettings
		return ret
	}).(RegistrationManagementSettingsOutput)
}

// The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
// If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
// You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
// resource has state ACTIVE or SUSPENDED.
// When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
// problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
// the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
func (o RegistrationManagementSettingsPtrOutput) PreferredRenewalMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationManagementSettings) *string {
		if v == nil {
			return nil
		}
		return v.PreferredRenewalMethod
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
// the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
// or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
// renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
func (o RegistrationManagementSettingsPtrOutput) RenewalMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationManagementSettings) *string {
		if v == nil {
			return nil
		}
		return v.RenewalMethod
	}).(pulumi.StringPtrOutput)
}

// Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
func (o RegistrationManagementSettingsPtrOutput) TransferLockState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationManagementSettings) *string {
		if v == nil {
			return nil
		}
		return v.TransferLockState
	}).(pulumi.StringPtrOutput)
}

type RegistrationYearlyPrice struct {
	// The three-letter currency code defined in ISO 4217.
	CurrencyCode *string `pulumi:"currencyCode"`
	// The whole units of the amount. For example if currencyCode is "USD", then 1 unit is one US dollar.
	Units *string `pulumi:"units"`
}

// RegistrationYearlyPriceInput is an input type that accepts RegistrationYearlyPriceArgs and RegistrationYearlyPriceOutput values.
// You can construct a concrete instance of `RegistrationYearlyPriceInput` via:
//
//	RegistrationYearlyPriceArgs{...}
type RegistrationYearlyPriceInput interface {
	pulumi.Input

	ToRegistrationYearlyPriceOutput() RegistrationYearlyPriceOutput
	ToRegistrationYearlyPriceOutputWithContext(context.Context) RegistrationYearlyPriceOutput
}

type RegistrationYearlyPriceArgs struct {
	// The three-letter currency code defined in ISO 4217.
	CurrencyCode pulumi.StringPtrInput `pulumi:"currencyCode"`
	// The whole units of the amount. For example if currencyCode is "USD", then 1 unit is one US dollar.
	Units pulumi.StringPtrInput `pulumi:"units"`
}

func (RegistrationYearlyPriceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationYearlyPrice)(nil)).Elem()
}

func (i RegistrationYearlyPriceArgs) ToRegistrationYearlyPriceOutput() RegistrationYearlyPriceOutput {
	return i.ToRegistrationYearlyPriceOutputWithContext(context.Background())
}

func (i RegistrationYearlyPriceArgs) ToRegistrationYearlyPriceOutputWithContext(ctx context.Context) RegistrationYearlyPriceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationYearlyPriceOutput)
}

func (i RegistrationYearlyPriceArgs) ToRegistrationYearlyPricePtrOutput() RegistrationYearlyPricePtrOutput {
	return i.ToRegistrationYearlyPricePtrOutputWithContext(context.Background())
}

func (i RegistrationYearlyPriceArgs) ToRegistrationYearlyPricePtrOutputWithContext(ctx context.Context) RegistrationYearlyPricePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationYearlyPriceOutput).ToRegistrationYearlyPricePtrOutputWithContext(ctx)
}

// RegistrationYearlyPricePtrInput is an input type that accepts RegistrationYearlyPriceArgs, RegistrationYearlyPricePtr and RegistrationYearlyPricePtrOutput values.
// You can construct a concrete instance of `RegistrationYearlyPricePtrInput` via:
//
//	        RegistrationYearlyPriceArgs{...}
//
//	or:
//
//	        nil
type RegistrationYearlyPricePtrInput interface {
	pulumi.Input

	ToRegistrationYearlyPricePtrOutput() RegistrationYearlyPricePtrOutput
	ToRegistrationYearlyPricePtrOutputWithContext(context.Context) RegistrationYearlyPricePtrOutput
}

type registrationYearlyPricePtrType RegistrationYearlyPriceArgs

func RegistrationYearlyPricePtr(v *RegistrationYearlyPriceArgs) RegistrationYearlyPricePtrInput {
	return (*registrationYearlyPricePtrType)(v)
}

func (*registrationYearlyPricePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationYearlyPrice)(nil)).Elem()
}

func (i *registrationYearlyPricePtrType) ToRegistrationYearlyPricePtrOutput() RegistrationYearlyPricePtrOutput {
	return i.ToRegistrationYearlyPricePtrOutputWithContext(context.Background())
}

func (i *registrationYearlyPricePtrType) ToRegistrationYearlyPricePtrOutputWithContext(ctx context.Context) RegistrationYearlyPricePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationYearlyPricePtrOutput)
}

type RegistrationYearlyPriceOutput struct{ *pulumi.OutputState }

func (RegistrationYearlyPriceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationYearlyPrice)(nil)).Elem()
}

func (o RegistrationYearlyPriceOutput) ToRegistrationYearlyPriceOutput() RegistrationYearlyPriceOutput {
	return o
}

func (o RegistrationYearlyPriceOutput) ToRegistrationYearlyPriceOutputWithContext(ctx context.Context) RegistrationYearlyPriceOutput {
	return o
}

func (o RegistrationYearlyPriceOutput) ToRegistrationYearlyPricePtrOutput() RegistrationYearlyPricePtrOutput {
	return o.ToRegistrationYearlyPricePtrOutputWithContext(context.Background())
}

func (o RegistrationYearlyPriceOutput) ToRegistrationYearlyPricePtrOutputWithContext(ctx context.Context) RegistrationYearlyPricePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationYearlyPrice) *RegistrationYearlyPrice {
		return &v
	}).(RegistrationYearlyPricePtrOutput)
}

// The three-letter currency code defined in ISO 4217.
func (o RegistrationYearlyPriceOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationYearlyPrice) *string { return v.CurrencyCode }).(pulumi.StringPtrOutput)
}

// The whole units of the amount. For example if currencyCode is "USD", then 1 unit is one US dollar.
func (o RegistrationYearlyPriceOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationYearlyPrice) *string { return v.Units }).(pulumi.StringPtrOutput)
}

type RegistrationYearlyPricePtrOutput struct{ *pulumi.OutputState }

func (RegistrationYearlyPricePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationYearlyPrice)(nil)).Elem()
}

func (o RegistrationYearlyPricePtrOutput) ToRegistrationYearlyPricePtrOutput() RegistrationYearlyPricePtrOutput {
	return o
}

func (o RegistrationYearlyPricePtrOutput) ToRegistrationYearlyPricePtrOutputWithContext(ctx context.Context) RegistrationYearlyPricePtrOutput {
	return o
}

func (o RegistrationYearlyPricePtrOutput) Elem() RegistrationYearlyPriceOutput {
	return o.ApplyT(func(v *RegistrationYearlyPrice) RegistrationYearlyPrice {
		if v != nil {
			return *v
		}
		var ret RegistrationYearlyPrice
		return ret
	}).(RegistrationYearlyPriceOutput)
}

// The three-letter currency code defined in ISO 4217.
func (o RegistrationYearlyPricePtrOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationYearlyPrice) *string {
		if v == nil {
			return nil
		}
		return v.CurrencyCode
	}).(pulumi.StringPtrOutput)
}

// The whole units of the amount. For example if currencyCode is "USD", then 1 unit is one US dollar.
func (o RegistrationYearlyPricePtrOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationYearlyPrice) *string {
		if v == nil {
			return nil
		}
		return v.Units
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsInput)(nil)).Elem(), RegistrationContactSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsPtrInput)(nil)).Elem(), RegistrationContactSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsAdminContactInput)(nil)).Elem(), RegistrationContactSettingsAdminContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsAdminContactPtrInput)(nil)).Elem(), RegistrationContactSettingsAdminContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsAdminContactPostalAddressInput)(nil)).Elem(), RegistrationContactSettingsAdminContactPostalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsAdminContactPostalAddressPtrInput)(nil)).Elem(), RegistrationContactSettingsAdminContactPostalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsRegistrantContactInput)(nil)).Elem(), RegistrationContactSettingsRegistrantContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsRegistrantContactPtrInput)(nil)).Elem(), RegistrationContactSettingsRegistrantContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsRegistrantContactPostalAddressInput)(nil)).Elem(), RegistrationContactSettingsRegistrantContactPostalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsRegistrantContactPostalAddressPtrInput)(nil)).Elem(), RegistrationContactSettingsRegistrantContactPostalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsTechnicalContactInput)(nil)).Elem(), RegistrationContactSettingsTechnicalContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsTechnicalContactPtrInput)(nil)).Elem(), RegistrationContactSettingsTechnicalContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsTechnicalContactPostalAddressInput)(nil)).Elem(), RegistrationContactSettingsTechnicalContactPostalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationContactSettingsTechnicalContactPostalAddressPtrInput)(nil)).Elem(), RegistrationContactSettingsTechnicalContactPostalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationDnsSettingsInput)(nil)).Elem(), RegistrationDnsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationDnsSettingsPtrInput)(nil)).Elem(), RegistrationDnsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationDnsSettingsCustomDnsInput)(nil)).Elem(), RegistrationDnsSettingsCustomDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationDnsSettingsCustomDnsPtrInput)(nil)).Elem(), RegistrationDnsSettingsCustomDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationDnsSettingsCustomDnsDsRecordInput)(nil)).Elem(), RegistrationDnsSettingsCustomDnsDsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationDnsSettingsCustomDnsDsRecordArrayInput)(nil)).Elem(), RegistrationDnsSettingsCustomDnsDsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationDnsSettingsGlueRecordInput)(nil)).Elem(), RegistrationDnsSettingsGlueRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationDnsSettingsGlueRecordArrayInput)(nil)).Elem(), RegistrationDnsSettingsGlueRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationManagementSettingsInput)(nil)).Elem(), RegistrationManagementSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationManagementSettingsPtrInput)(nil)).Elem(), RegistrationManagementSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationYearlyPriceInput)(nil)).Elem(), RegistrationYearlyPriceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationYearlyPricePtrInput)(nil)).Elem(), RegistrationYearlyPriceArgs{})
	pulumi.RegisterOutputType(RegistrationContactSettingsOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsPtrOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsAdminContactOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsAdminContactPtrOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsAdminContactPostalAddressOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsAdminContactPostalAddressPtrOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsRegistrantContactOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsRegistrantContactPtrOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsRegistrantContactPostalAddressOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsRegistrantContactPostalAddressPtrOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsTechnicalContactOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsTechnicalContactPtrOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsTechnicalContactPostalAddressOutput{})
	pulumi.RegisterOutputType(RegistrationContactSettingsTechnicalContactPostalAddressPtrOutput{})
	pulumi.RegisterOutputType(RegistrationDnsSettingsOutput{})
	pulumi.RegisterOutputType(RegistrationDnsSettingsPtrOutput{})
	pulumi.RegisterOutputType(RegistrationDnsSettingsCustomDnsOutput{})
	pulumi.RegisterOutputType(RegistrationDnsSettingsCustomDnsPtrOutput{})
	pulumi.RegisterOutputType(RegistrationDnsSettingsCustomDnsDsRecordOutput{})
	pulumi.RegisterOutputType(RegistrationDnsSettingsCustomDnsDsRecordArrayOutput{})
	pulumi.RegisterOutputType(RegistrationDnsSettingsGlueRecordOutput{})
	pulumi.RegisterOutputType(RegistrationDnsSettingsGlueRecordArrayOutput{})
	pulumi.RegisterOutputType(RegistrationManagementSettingsOutput{})
	pulumi.RegisterOutputType(RegistrationManagementSettingsPtrOutput{})
	pulumi.RegisterOutputType(RegistrationYearlyPriceOutput{})
	pulumi.RegisterOutputType(RegistrationYearlyPricePtrOutput{})
}
