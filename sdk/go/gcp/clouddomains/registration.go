// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clouddomains

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Clouddomains Registration Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/clouddomains"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clouddomains.NewRegistration(ctx, "my_registration", &clouddomains.RegistrationArgs{
//				DomainName: pulumi.String("example-domain.com"),
//				Location:   pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"labelkey": pulumi.String("labelvalue"),
//				},
//				YearlyPrice: &clouddomains.RegistrationYearlyPriceArgs{
//					CurrencyCode: pulumi.String("USD"),
//					Units:        pulumi.String("12"),
//				},
//				DnsSettings: &clouddomains.RegistrationDnsSettingsArgs{
//					CustomDns: &clouddomains.RegistrationDnsSettingsCustomDnsArgs{
//						NameServers: pulumi.StringArray{
//							pulumi.String("ns-cloud-a1.googledomains.com."),
//							pulumi.String("ns-cloud-a2.googledomains.com."),
//							pulumi.String("ns-cloud-a3.googledomains.com."),
//							pulumi.String("ns-cloud-a4.googledomains.com."),
//						},
//					},
//				},
//				ContactSettings: &clouddomains.RegistrationContactSettingsArgs{
//					Privacy: pulumi.String("REDACTED_CONTACT_DATA"),
//					RegistrantContact: &clouddomains.RegistrationContactSettingsRegistrantContactArgs{
//						PhoneNumber: pulumi.String("+12345000000"),
//						Email:       pulumi.String("user@example.com"),
//						PostalAddress: &clouddomains.RegistrationContactSettingsRegistrantContactPostalAddressArgs{
//							RegionCode:         pulumi.String("US"),
//							PostalCode:         pulumi.String("95050"),
//							AdministrativeArea: pulumi.String("CA"),
//							Locality:           pulumi.String("Example City"),
//							AddressLines: pulumi.StringArray{
//								pulumi.String("1234 Example street"),
//							},
//							Recipients: pulumi.StringArray{
//								pulumi.String("example recipient"),
//							},
//						},
//					},
//					AdminContact: &clouddomains.RegistrationContactSettingsAdminContactArgs{
//						PhoneNumber: pulumi.String("+12345000000"),
//						Email:       pulumi.String("user@example.com"),
//						PostalAddress: &clouddomains.RegistrationContactSettingsAdminContactPostalAddressArgs{
//							RegionCode:         pulumi.String("US"),
//							PostalCode:         pulumi.String("95050"),
//							AdministrativeArea: pulumi.String("CA"),
//							Locality:           pulumi.String("Example City"),
//							AddressLines: pulumi.StringArray{
//								pulumi.String("1234 Example street"),
//							},
//							Recipients: pulumi.StringArray{
//								pulumi.String("example recipient"),
//							},
//						},
//					},
//					TechnicalContact: &clouddomains.RegistrationContactSettingsTechnicalContactArgs{
//						PhoneNumber: pulumi.String("+12345000000"),
//						Email:       pulumi.String("user@example.com"),
//						PostalAddress: &clouddomains.RegistrationContactSettingsTechnicalContactPostalAddressArgs{
//							RegionCode:         pulumi.String("US"),
//							PostalCode:         pulumi.String("95050"),
//							AdministrativeArea: pulumi.String("CA"),
//							Locality:           pulumi.String("Example City"),
//							AddressLines: pulumi.StringArray{
//								pulumi.String("1234 Example street"),
//							},
//							Recipients: pulumi.StringArray{
//								pulumi.String("example recipient"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Registration can be imported using any of these accepted formats:
//
//   - `projects/{{project}}/locations/{{location}}/registrations/{{domain_name}}`
//
//   - `{{project}}/{{location}}/{{domain_name}}`
//
//   - `{{location}}/{{domain_name}}`
//
//     When using the `pulumi import` command, Registration can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:clouddomains/registration:Registration default projects/{{project}}/locations/{{location}}/registrations/{{domain_name}}
// ```
//
// ```sh
// $ pulumi import gcp:clouddomains/registration:Registration default {{project}}/{{location}}/{{domain_name}}
// ```
//
// ```sh
// $ pulumi import gcp:clouddomains/registration:Registration default {{location}}/{{domain_name}}
// ```
type Registration struct {
	pulumi.CustomResourceState

	// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
	ContactNotices pulumi.StringArrayOutput `pulumi:"contactNotices"`
	// Required. Settings for contact information linked to the Registration.
	// Structure is documented below.
	ContactSettings RegistrationContactSettingsOutput `pulumi:"contactSettings"`
	// Output only. Time at which the automation was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Settings controlling the DNS configuration of the Registration.
	// Structure is documented below.
	DnsSettings RegistrationDnsSettingsPtrOutput `pulumi:"dnsSettings"`
	// Required. The domain name. Unicode domain names must be expressed in Punycode format.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
	DomainNotices pulumi.StringArrayOutput `pulumi:"domainNotices"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Output only. Time at which the automation was updated.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Output only. The set of issues with the Registration that require attention.
	Issues pulumi.StringArrayOutput `pulumi:"issues"`
	// Set of labels associated with the Registration.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Settings for management of the Registration, including renewal, billing, and transfer
	// Structure is documented below.
	ManagementSettings RegistrationManagementSettingsOutput `pulumi:"managementSettings"`
	// Output only. Name of the Registration resource, in the format projects/*/locations/*/registrations/<domain_name>.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
	RegisterFailureReason pulumi.StringOutput `pulumi:"registerFailureReason"`
	// Output only. The current state of the Registration.
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. Set of options for the contactSettings.privacy field that this Registration supports.
	SupportedPrivacies pulumi.StringArrayOutput `pulumi:"supportedPrivacies"`
	// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
	// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
	// Structure is documented below.
	YearlyPrice RegistrationYearlyPriceOutput `pulumi:"yearlyPrice"`
}

// NewRegistration registers a new resource with the given unique name, arguments, and options.
func NewRegistration(ctx *pulumi.Context,
	name string, args *RegistrationArgs, opts ...pulumi.ResourceOption) (*Registration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactSettings == nil {
		return nil, errors.New("invalid value for required argument 'ContactSettings'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.YearlyPrice == nil {
		return nil, errors.New("invalid value for required argument 'YearlyPrice'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Registration
	err := ctx.RegisterResource("gcp:clouddomains/registration:Registration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistration gets an existing Registration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistrationState, opts ...pulumi.ResourceOption) (*Registration, error) {
	var resource Registration
	err := ctx.ReadResource("gcp:clouddomains/registration:Registration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Registration resources.
type registrationState struct {
	// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
	ContactNotices []string `pulumi:"contactNotices"`
	// Required. Settings for contact information linked to the Registration.
	// Structure is documented below.
	ContactSettings *RegistrationContactSettings `pulumi:"contactSettings"`
	// Output only. Time at which the automation was created.
	CreateTime *string `pulumi:"createTime"`
	// Settings controlling the DNS configuration of the Registration.
	// Structure is documented below.
	DnsSettings *RegistrationDnsSettings `pulumi:"dnsSettings"`
	// Required. The domain name. Unicode domain names must be expressed in Punycode format.
	DomainName *string `pulumi:"domainName"`
	// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
	DomainNotices []string `pulumi:"domainNotices"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Output only. Time at which the automation was updated.
	ExpireTime *string `pulumi:"expireTime"`
	// Output only. The set of issues with the Registration that require attention.
	Issues []string `pulumi:"issues"`
	// Set of labels associated with the Registration.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Settings for management of the Registration, including renewal, billing, and transfer
	// Structure is documented below.
	ManagementSettings *RegistrationManagementSettings `pulumi:"managementSettings"`
	// Output only. Name of the Registration resource, in the format projects/*/locations/*/registrations/<domain_name>.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
	RegisterFailureReason *string `pulumi:"registerFailureReason"`
	// Output only. The current state of the Registration.
	State *string `pulumi:"state"`
	// Output only. Set of options for the contactSettings.privacy field that this Registration supports.
	SupportedPrivacies []string `pulumi:"supportedPrivacies"`
	// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
	// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
	// Structure is documented below.
	YearlyPrice *RegistrationYearlyPrice `pulumi:"yearlyPrice"`
}

type RegistrationState struct {
	// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
	ContactNotices pulumi.StringArrayInput
	// Required. Settings for contact information linked to the Registration.
	// Structure is documented below.
	ContactSettings RegistrationContactSettingsPtrInput
	// Output only. Time at which the automation was created.
	CreateTime pulumi.StringPtrInput
	// Settings controlling the DNS configuration of the Registration.
	// Structure is documented below.
	DnsSettings RegistrationDnsSettingsPtrInput
	// Required. The domain name. Unicode domain names must be expressed in Punycode format.
	DomainName pulumi.StringPtrInput
	// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
	DomainNotices pulumi.StringArrayInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Output only. Time at which the automation was updated.
	ExpireTime pulumi.StringPtrInput
	// Output only. The set of issues with the Registration that require attention.
	Issues pulumi.StringArrayInput
	// Set of labels associated with the Registration.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Settings for management of the Registration, including renewal, billing, and transfer
	// Structure is documented below.
	ManagementSettings RegistrationManagementSettingsPtrInput
	// Output only. Name of the Registration resource, in the format projects/*/locations/*/registrations/<domain_name>.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
	RegisterFailureReason pulumi.StringPtrInput
	// Output only. The current state of the Registration.
	State pulumi.StringPtrInput
	// Output only. Set of options for the contactSettings.privacy field that this Registration supports.
	SupportedPrivacies pulumi.StringArrayInput
	// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
	// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
	// Structure is documented below.
	YearlyPrice RegistrationYearlyPricePtrInput
}

func (RegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*registrationState)(nil)).Elem()
}

type registrationArgs struct {
	// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
	ContactNotices []string `pulumi:"contactNotices"`
	// Required. Settings for contact information linked to the Registration.
	// Structure is documented below.
	ContactSettings RegistrationContactSettings `pulumi:"contactSettings"`
	// Settings controlling the DNS configuration of the Registration.
	// Structure is documented below.
	DnsSettings *RegistrationDnsSettings `pulumi:"dnsSettings"`
	// Required. The domain name. Unicode domain names must be expressed in Punycode format.
	DomainName string `pulumi:"domainName"`
	// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
	DomainNotices []string `pulumi:"domainNotices"`
	// Set of labels associated with the Registration.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Settings for management of the Registration, including renewal, billing, and transfer
	// Structure is documented below.
	ManagementSettings *RegistrationManagementSettings `pulumi:"managementSettings"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
	// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
	// Structure is documented below.
	YearlyPrice RegistrationYearlyPrice `pulumi:"yearlyPrice"`
}

// The set of arguments for constructing a Registration resource.
type RegistrationArgs struct {
	// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
	ContactNotices pulumi.StringArrayInput
	// Required. Settings for contact information linked to the Registration.
	// Structure is documented below.
	ContactSettings RegistrationContactSettingsInput
	// Settings controlling the DNS configuration of the Registration.
	// Structure is documented below.
	DnsSettings RegistrationDnsSettingsPtrInput
	// Required. The domain name. Unicode domain names must be expressed in Punycode format.
	DomainName pulumi.StringInput
	// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
	DomainNotices pulumi.StringArrayInput
	// Set of labels associated with the Registration.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringInput
	// Settings for management of the Registration, including renewal, billing, and transfer
	// Structure is documented below.
	ManagementSettings RegistrationManagementSettingsPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
	// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
	// Structure is documented below.
	YearlyPrice RegistrationYearlyPriceInput
}

func (RegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registrationArgs)(nil)).Elem()
}

type RegistrationInput interface {
	pulumi.Input

	ToRegistrationOutput() RegistrationOutput
	ToRegistrationOutputWithContext(ctx context.Context) RegistrationOutput
}

func (*Registration) ElementType() reflect.Type {
	return reflect.TypeOf((**Registration)(nil)).Elem()
}

func (i *Registration) ToRegistrationOutput() RegistrationOutput {
	return i.ToRegistrationOutputWithContext(context.Background())
}

func (i *Registration) ToRegistrationOutputWithContext(ctx context.Context) RegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationOutput)
}

// RegistrationArrayInput is an input type that accepts RegistrationArray and RegistrationArrayOutput values.
// You can construct a concrete instance of `RegistrationArrayInput` via:
//
//	RegistrationArray{ RegistrationArgs{...} }
type RegistrationArrayInput interface {
	pulumi.Input

	ToRegistrationArrayOutput() RegistrationArrayOutput
	ToRegistrationArrayOutputWithContext(context.Context) RegistrationArrayOutput
}

type RegistrationArray []RegistrationInput

func (RegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Registration)(nil)).Elem()
}

func (i RegistrationArray) ToRegistrationArrayOutput() RegistrationArrayOutput {
	return i.ToRegistrationArrayOutputWithContext(context.Background())
}

func (i RegistrationArray) ToRegistrationArrayOutputWithContext(ctx context.Context) RegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationArrayOutput)
}

// RegistrationMapInput is an input type that accepts RegistrationMap and RegistrationMapOutput values.
// You can construct a concrete instance of `RegistrationMapInput` via:
//
//	RegistrationMap{ "key": RegistrationArgs{...} }
type RegistrationMapInput interface {
	pulumi.Input

	ToRegistrationMapOutput() RegistrationMapOutput
	ToRegistrationMapOutputWithContext(context.Context) RegistrationMapOutput
}

type RegistrationMap map[string]RegistrationInput

func (RegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Registration)(nil)).Elem()
}

func (i RegistrationMap) ToRegistrationMapOutput() RegistrationMapOutput {
	return i.ToRegistrationMapOutputWithContext(context.Background())
}

func (i RegistrationMap) ToRegistrationMapOutputWithContext(ctx context.Context) RegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationMapOutput)
}

type RegistrationOutput struct{ *pulumi.OutputState }

func (RegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Registration)(nil)).Elem()
}

func (o RegistrationOutput) ToRegistrationOutput() RegistrationOutput {
	return o
}

func (o RegistrationOutput) ToRegistrationOutputWithContext(ctx context.Context) RegistrationOutput {
	return o
}

// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
func (o RegistrationOutput) ContactNotices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringArrayOutput { return v.ContactNotices }).(pulumi.StringArrayOutput)
}

// Required. Settings for contact information linked to the Registration.
// Structure is documented below.
func (o RegistrationOutput) ContactSettings() RegistrationContactSettingsOutput {
	return o.ApplyT(func(v *Registration) RegistrationContactSettingsOutput { return v.ContactSettings }).(RegistrationContactSettingsOutput)
}

// Output only. Time at which the automation was created.
func (o RegistrationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Settings controlling the DNS configuration of the Registration.
// Structure is documented below.
func (o RegistrationOutput) DnsSettings() RegistrationDnsSettingsPtrOutput {
	return o.ApplyT(func(v *Registration) RegistrationDnsSettingsPtrOutput { return v.DnsSettings }).(RegistrationDnsSettingsPtrOutput)
}

// Required. The domain name. Unicode domain names must be expressed in Punycode format.
func (o RegistrationOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
func (o RegistrationOutput) DomainNotices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringArrayOutput { return v.DomainNotices }).(pulumi.StringArrayOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o RegistrationOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Output only. Time at which the automation was updated.
func (o RegistrationOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// Output only. The set of issues with the Registration that require attention.
func (o RegistrationOutput) Issues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringArrayOutput { return v.Issues }).(pulumi.StringArrayOutput)
}

// Set of labels associated with the Registration.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o RegistrationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location for the resource
func (o RegistrationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Settings for management of the Registration, including renewal, billing, and transfer
// Structure is documented below.
func (o RegistrationOutput) ManagementSettings() RegistrationManagementSettingsOutput {
	return o.ApplyT(func(v *Registration) RegistrationManagementSettingsOutput { return v.ManagementSettings }).(RegistrationManagementSettingsOutput)
}

// Output only. Name of the Registration resource, in the format projects/*/locations/*/registrations/<domain_name>.
func (o RegistrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegistrationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o RegistrationOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
func (o RegistrationOutput) RegisterFailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringOutput { return v.RegisterFailureReason }).(pulumi.StringOutput)
}

// Output only. The current state of the Registration.
func (o RegistrationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. Set of options for the contactSettings.privacy field that this Registration supports.
func (o RegistrationOutput) SupportedPrivacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Registration) pulumi.StringArrayOutput { return v.SupportedPrivacies }).(pulumi.StringArrayOutput)
}

// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
// Structure is documented below.
func (o RegistrationOutput) YearlyPrice() RegistrationYearlyPriceOutput {
	return o.ApplyT(func(v *Registration) RegistrationYearlyPriceOutput { return v.YearlyPrice }).(RegistrationYearlyPriceOutput)
}

type RegistrationArrayOutput struct{ *pulumi.OutputState }

func (RegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Registration)(nil)).Elem()
}

func (o RegistrationArrayOutput) ToRegistrationArrayOutput() RegistrationArrayOutput {
	return o
}

func (o RegistrationArrayOutput) ToRegistrationArrayOutputWithContext(ctx context.Context) RegistrationArrayOutput {
	return o
}

func (o RegistrationArrayOutput) Index(i pulumi.IntInput) RegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Registration {
		return vs[0].([]*Registration)[vs[1].(int)]
	}).(RegistrationOutput)
}

type RegistrationMapOutput struct{ *pulumi.OutputState }

func (RegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Registration)(nil)).Elem()
}

func (o RegistrationMapOutput) ToRegistrationMapOutput() RegistrationMapOutput {
	return o
}

func (o RegistrationMapOutput) ToRegistrationMapOutputWithContext(ctx context.Context) RegistrationMapOutput {
	return o
}

func (o RegistrationMapOutput) MapIndex(k pulumi.StringInput) RegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Registration {
		return vs[0].(map[string]*Registration)[vs[1].(string)]
	}).(RegistrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationInput)(nil)).Elem(), &Registration{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationArrayInput)(nil)).Elem(), RegistrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrationMapInput)(nil)).Elem(), RegistrationMap{})
	pulumi.RegisterOutputType(RegistrationOutput{})
	pulumi.RegisterOutputType(RegistrationArrayOutput{})
	pulumi.RegisterOutputType(RegistrationMapOutput{})
}
