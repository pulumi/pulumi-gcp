// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workstations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}} * {{project}}/{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}/{{workstation_id}} * {{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}/{{workstation_id}} * {{workstation_id}} Any variables not passed in the import command will be taken from the provider configuration. Cloud Workstations workstation IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationIamMember:WorkstationIamMember editor "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationIamMember:WorkstationIamMember editor "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationIamMember:WorkstationIamMember editor projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type WorkstationIamMember struct {
	pulumi.CustomResourceState

	Condition WorkstationIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	Member   pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role                 pulumi.StringOutput `pulumi:"role"`
	WorkstationClusterId pulumi.StringOutput `pulumi:"workstationClusterId"`
	WorkstationConfigId  pulumi.StringOutput `pulumi:"workstationConfigId"`
	WorkstationId        pulumi.StringOutput `pulumi:"workstationId"`
}

// NewWorkstationIamMember registers a new resource with the given unique name, arguments, and options.
func NewWorkstationIamMember(ctx *pulumi.Context,
	name string, args *WorkstationIamMemberArgs, opts ...pulumi.ResourceOption) (*WorkstationIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	if args.WorkstationId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkstationIamMember
	err := ctx.RegisterResource("gcp:workstations/workstationIamMember:WorkstationIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstationIamMember gets an existing WorkstationIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstationIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationIamMemberState, opts ...pulumi.ResourceOption) (*WorkstationIamMember, error) {
	var resource WorkstationIamMember
	err := ctx.ReadResource("gcp:workstations/workstationIamMember:WorkstationIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkstationIamMember resources.
type workstationIamMemberState struct {
	Condition *WorkstationIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role                 *string `pulumi:"role"`
	WorkstationClusterId *string `pulumi:"workstationClusterId"`
	WorkstationConfigId  *string `pulumi:"workstationConfigId"`
	WorkstationId        *string `pulumi:"workstationId"`
}

type WorkstationIamMemberState struct {
	Condition WorkstationIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role                 pulumi.StringPtrInput
	WorkstationClusterId pulumi.StringPtrInput
	WorkstationConfigId  pulumi.StringPtrInput
	WorkstationId        pulumi.StringPtrInput
}

func (WorkstationIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationIamMemberState)(nil)).Elem()
}

type workstationIamMemberArgs struct {
	Condition *WorkstationIamMemberCondition `pulumi:"condition"`
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   string  `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role                 string `pulumi:"role"`
	WorkstationClusterId string `pulumi:"workstationClusterId"`
	WorkstationConfigId  string `pulumi:"workstationConfigId"`
	WorkstationId        string `pulumi:"workstationId"`
}

// The set of arguments for constructing a WorkstationIamMember resource.
type WorkstationIamMemberArgs struct {
	Condition WorkstationIamMemberConditionPtrInput
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role                 pulumi.StringInput
	WorkstationClusterId pulumi.StringInput
	WorkstationConfigId  pulumi.StringInput
	WorkstationId        pulumi.StringInput
}

func (WorkstationIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationIamMemberArgs)(nil)).Elem()
}

type WorkstationIamMemberInput interface {
	pulumi.Input

	ToWorkstationIamMemberOutput() WorkstationIamMemberOutput
	ToWorkstationIamMemberOutputWithContext(ctx context.Context) WorkstationIamMemberOutput
}

func (*WorkstationIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationIamMember)(nil)).Elem()
}

func (i *WorkstationIamMember) ToWorkstationIamMemberOutput() WorkstationIamMemberOutput {
	return i.ToWorkstationIamMemberOutputWithContext(context.Background())
}

func (i *WorkstationIamMember) ToWorkstationIamMemberOutputWithContext(ctx context.Context) WorkstationIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamMemberOutput)
}

// WorkstationIamMemberArrayInput is an input type that accepts WorkstationIamMemberArray and WorkstationIamMemberArrayOutput values.
// You can construct a concrete instance of `WorkstationIamMemberArrayInput` via:
//
//	WorkstationIamMemberArray{ WorkstationIamMemberArgs{...} }
type WorkstationIamMemberArrayInput interface {
	pulumi.Input

	ToWorkstationIamMemberArrayOutput() WorkstationIamMemberArrayOutput
	ToWorkstationIamMemberArrayOutputWithContext(context.Context) WorkstationIamMemberArrayOutput
}

type WorkstationIamMemberArray []WorkstationIamMemberInput

func (WorkstationIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationIamMember)(nil)).Elem()
}

func (i WorkstationIamMemberArray) ToWorkstationIamMemberArrayOutput() WorkstationIamMemberArrayOutput {
	return i.ToWorkstationIamMemberArrayOutputWithContext(context.Background())
}

func (i WorkstationIamMemberArray) ToWorkstationIamMemberArrayOutputWithContext(ctx context.Context) WorkstationIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamMemberArrayOutput)
}

// WorkstationIamMemberMapInput is an input type that accepts WorkstationIamMemberMap and WorkstationIamMemberMapOutput values.
// You can construct a concrete instance of `WorkstationIamMemberMapInput` via:
//
//	WorkstationIamMemberMap{ "key": WorkstationIamMemberArgs{...} }
type WorkstationIamMemberMapInput interface {
	pulumi.Input

	ToWorkstationIamMemberMapOutput() WorkstationIamMemberMapOutput
	ToWorkstationIamMemberMapOutputWithContext(context.Context) WorkstationIamMemberMapOutput
}

type WorkstationIamMemberMap map[string]WorkstationIamMemberInput

func (WorkstationIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationIamMember)(nil)).Elem()
}

func (i WorkstationIamMemberMap) ToWorkstationIamMemberMapOutput() WorkstationIamMemberMapOutput {
	return i.ToWorkstationIamMemberMapOutputWithContext(context.Background())
}

func (i WorkstationIamMemberMap) ToWorkstationIamMemberMapOutputWithContext(ctx context.Context) WorkstationIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamMemberMapOutput)
}

type WorkstationIamMemberOutput struct{ *pulumi.OutputState }

func (WorkstationIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationIamMember)(nil)).Elem()
}

func (o WorkstationIamMemberOutput) ToWorkstationIamMemberOutput() WorkstationIamMemberOutput {
	return o
}

func (o WorkstationIamMemberOutput) ToWorkstationIamMemberOutputWithContext(ctx context.Context) WorkstationIamMemberOutput {
	return o
}

func (o WorkstationIamMemberOutput) Condition() WorkstationIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *WorkstationIamMember) WorkstationIamMemberConditionPtrOutput { return v.Condition }).(WorkstationIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o WorkstationIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where the workstation parent resources reside.
// Used to find the parent resource to bind the IAM policy to
func (o WorkstationIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o WorkstationIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o WorkstationIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) WorkstationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.WorkstationId }).(pulumi.StringOutput)
}

type WorkstationIamMemberArrayOutput struct{ *pulumi.OutputState }

func (WorkstationIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationIamMember)(nil)).Elem()
}

func (o WorkstationIamMemberArrayOutput) ToWorkstationIamMemberArrayOutput() WorkstationIamMemberArrayOutput {
	return o
}

func (o WorkstationIamMemberArrayOutput) ToWorkstationIamMemberArrayOutputWithContext(ctx context.Context) WorkstationIamMemberArrayOutput {
	return o
}

func (o WorkstationIamMemberArrayOutput) Index(i pulumi.IntInput) WorkstationIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkstationIamMember {
		return vs[0].([]*WorkstationIamMember)[vs[1].(int)]
	}).(WorkstationIamMemberOutput)
}

type WorkstationIamMemberMapOutput struct{ *pulumi.OutputState }

func (WorkstationIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationIamMember)(nil)).Elem()
}

func (o WorkstationIamMemberMapOutput) ToWorkstationIamMemberMapOutput() WorkstationIamMemberMapOutput {
	return o
}

func (o WorkstationIamMemberMapOutput) ToWorkstationIamMemberMapOutputWithContext(ctx context.Context) WorkstationIamMemberMapOutput {
	return o
}

func (o WorkstationIamMemberMapOutput) MapIndex(k pulumi.StringInput) WorkstationIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkstationIamMember {
		return vs[0].(map[string]*WorkstationIamMember)[vs[1].(string)]
	}).(WorkstationIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamMemberInput)(nil)).Elem(), &WorkstationIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamMemberArrayInput)(nil)).Elem(), WorkstationIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamMemberMapInput)(nil)).Elem(), WorkstationIamMemberMap{})
	pulumi.RegisterOutputType(WorkstationIamMemberOutput{})
	pulumi.RegisterOutputType(WorkstationIamMemberArrayOutput{})
	pulumi.RegisterOutputType(WorkstationIamMemberMapOutput{})
}
