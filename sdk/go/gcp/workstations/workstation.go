// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workstations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
// ### Workstation Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.Name,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultWorkstationCluster, err := workstations.NewWorkstationCluster(ctx, "defaultWorkstationCluster", &workstations.WorkstationClusterArgs{
//				WorkstationClusterId: pulumi.String("workstation-cluster"),
//				Network:              defaultNetwork.ID(),
//				Subnetwork:           defaultSubnetwork.ID(),
//				Location:             pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//				Annotations: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultWorkstationConfig, err := workstations.NewWorkstationConfig(ctx, "defaultWorkstationConfig", &workstations.WorkstationConfigArgs{
//				WorkstationConfigId:  pulumi.String("workstation-config"),
//				WorkstationClusterId: defaultWorkstationCluster.WorkstationClusterId,
//				Location:             pulumi.String("us-central1"),
//				Host: &workstations.WorkstationConfigHostArgs{
//					GceInstance: &workstations.WorkstationConfigHostGceInstanceArgs{
//						MachineType:              pulumi.String("e2-standard-4"),
//						BootDiskSizeGb:           pulumi.Int(35),
//						DisablePublicIpAddresses: pulumi.Bool(true),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstation(ctx, "defaultWorkstation", &workstations.WorkstationArgs{
//				WorkstationId:        pulumi.String("work-station"),
//				WorkstationConfigId:  defaultWorkstationConfig.WorkstationConfigId,
//				WorkstationClusterId: defaultWorkstationCluster.WorkstationClusterId,
//				Location:             pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//				Env: pulumi.StringMap{
//					"name": pulumi.String("foo"),
//				},
//				Annotations: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Workstation can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstation:Workstation default projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstation:Workstation default {{project}}/{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}/{{workstation_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstation:Workstation default {{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}/{{workstation_id}}
//
// ```
type Workstation struct {
	pulumi.CustomResourceState

	// Client-specified annotations. This is distinct from labels.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Time when this resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Human-readable name for this resource.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// 'Client-specified environment variables passed to the workstation container's entrypoint.'
	Env pulumi.StringMapOutput `pulumi:"env"`
	// Host to which clients can send HTTPS traffic that will be received by the workstation.
	// Authorized traffic will be received to the workstation as HTTP on port 80.
	// To send traffic to a different port, clients may prefix the host with the destination port in the format "{port}-{host}".
	Host pulumi.StringOutput `pulumi:"host"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where the workstation parent resources reside.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// Full name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Current state of the workstation.
	State pulumi.StringOutput `pulumi:"state"`
	// A system-assigned unique identified for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The ID of the parent workstation cluster.
	WorkstationClusterId pulumi.StringOutput `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	WorkstationConfigId pulumi.StringOutput `pulumi:"workstationConfigId"`
	// ID to use for the workstation.
	WorkstationId pulumi.StringOutput `pulumi:"workstationId"`
}

// NewWorkstation registers a new resource with the given unique name, arguments, and options.
func NewWorkstation(ctx *pulumi.Context,
	name string, args *WorkstationArgs, opts ...pulumi.ResourceOption) (*Workstation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	if args.WorkstationId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workstation
	err := ctx.RegisterResource("gcp:workstations/workstation:Workstation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstation gets an existing Workstation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationState, opts ...pulumi.ResourceOption) (*Workstation, error) {
	var resource Workstation
	err := ctx.ReadResource("gcp:workstations/workstation:Workstation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workstation resources.
type workstationState struct {
	// Client-specified annotations. This is distinct from labels.
	Annotations map[string]string `pulumi:"annotations"`
	// Time when this resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Human-readable name for this resource.
	DisplayName *string `pulumi:"displayName"`
	// 'Client-specified environment variables passed to the workstation container's entrypoint.'
	Env map[string]string `pulumi:"env"`
	// Host to which clients can send HTTPS traffic that will be received by the workstation.
	// Authorized traffic will be received to the workstation as HTTP on port 80.
	// To send traffic to a different port, clients may prefix the host with the destination port in the format "{port}-{host}".
	Host *string `pulumi:"host"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels map[string]string `pulumi:"labels"`
	// The location where the workstation parent resources reside.
	//
	// ***
	Location *string `pulumi:"location"`
	// Full name of this resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Current state of the workstation.
	State *string `pulumi:"state"`
	// A system-assigned unique identified for this resource.
	Uid *string `pulumi:"uid"`
	// The ID of the parent workstation cluster.
	WorkstationClusterId *string `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	WorkstationConfigId *string `pulumi:"workstationConfigId"`
	// ID to use for the workstation.
	WorkstationId *string `pulumi:"workstationId"`
}

type WorkstationState struct {
	// Client-specified annotations. This is distinct from labels.
	Annotations pulumi.StringMapInput
	// Time when this resource was created.
	CreateTime pulumi.StringPtrInput
	// Human-readable name for this resource.
	DisplayName pulumi.StringPtrInput
	// 'Client-specified environment variables passed to the workstation container's entrypoint.'
	Env pulumi.StringMapInput
	// Host to which clients can send HTTPS traffic that will be received by the workstation.
	// Authorized traffic will be received to the workstation as HTTP on port 80.
	// To send traffic to a different port, clients may prefix the host with the destination port in the format "{port}-{host}".
	Host pulumi.StringPtrInput
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels pulumi.StringMapInput
	// The location where the workstation parent resources reside.
	//
	// ***
	Location pulumi.StringPtrInput
	// Full name of this resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Current state of the workstation.
	State pulumi.StringPtrInput
	// A system-assigned unique identified for this resource.
	Uid pulumi.StringPtrInput
	// The ID of the parent workstation cluster.
	WorkstationClusterId pulumi.StringPtrInput
	// The ID of the parent workstation cluster config.
	WorkstationConfigId pulumi.StringPtrInput
	// ID to use for the workstation.
	WorkstationId pulumi.StringPtrInput
}

func (WorkstationState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationState)(nil)).Elem()
}

type workstationArgs struct {
	// Client-specified annotations. This is distinct from labels.
	Annotations map[string]string `pulumi:"annotations"`
	// Human-readable name for this resource.
	DisplayName *string `pulumi:"displayName"`
	// 'Client-specified environment variables passed to the workstation container's entrypoint.'
	Env map[string]string `pulumi:"env"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels map[string]string `pulumi:"labels"`
	// The location where the workstation parent resources reside.
	//
	// ***
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID of the parent workstation cluster.
	WorkstationClusterId string `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	WorkstationConfigId string `pulumi:"workstationConfigId"`
	// ID to use for the workstation.
	WorkstationId string `pulumi:"workstationId"`
}

// The set of arguments for constructing a Workstation resource.
type WorkstationArgs struct {
	// Client-specified annotations. This is distinct from labels.
	Annotations pulumi.StringMapInput
	// Human-readable name for this resource.
	DisplayName pulumi.StringPtrInput
	// 'Client-specified environment variables passed to the workstation container's entrypoint.'
	Env pulumi.StringMapInput
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels pulumi.StringMapInput
	// The location where the workstation parent resources reside.
	//
	// ***
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID of the parent workstation cluster.
	WorkstationClusterId pulumi.StringInput
	// The ID of the parent workstation cluster config.
	WorkstationConfigId pulumi.StringInput
	// ID to use for the workstation.
	WorkstationId pulumi.StringInput
}

func (WorkstationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationArgs)(nil)).Elem()
}

type WorkstationInput interface {
	pulumi.Input

	ToWorkstationOutput() WorkstationOutput
	ToWorkstationOutputWithContext(ctx context.Context) WorkstationOutput
}

func (*Workstation) ElementType() reflect.Type {
	return reflect.TypeOf((**Workstation)(nil)).Elem()
}

func (i *Workstation) ToWorkstationOutput() WorkstationOutput {
	return i.ToWorkstationOutputWithContext(context.Background())
}

func (i *Workstation) ToWorkstationOutputWithContext(ctx context.Context) WorkstationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationOutput)
}

func (i *Workstation) ToOutput(ctx context.Context) pulumix.Output[*Workstation] {
	return pulumix.Output[*Workstation]{
		OutputState: i.ToWorkstationOutputWithContext(ctx).OutputState,
	}
}

// WorkstationArrayInput is an input type that accepts WorkstationArray and WorkstationArrayOutput values.
// You can construct a concrete instance of `WorkstationArrayInput` via:
//
//	WorkstationArray{ WorkstationArgs{...} }
type WorkstationArrayInput interface {
	pulumi.Input

	ToWorkstationArrayOutput() WorkstationArrayOutput
	ToWorkstationArrayOutputWithContext(context.Context) WorkstationArrayOutput
}

type WorkstationArray []WorkstationInput

func (WorkstationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workstation)(nil)).Elem()
}

func (i WorkstationArray) ToWorkstationArrayOutput() WorkstationArrayOutput {
	return i.ToWorkstationArrayOutputWithContext(context.Background())
}

func (i WorkstationArray) ToWorkstationArrayOutputWithContext(ctx context.Context) WorkstationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationArrayOutput)
}

func (i WorkstationArray) ToOutput(ctx context.Context) pulumix.Output[[]*Workstation] {
	return pulumix.Output[[]*Workstation]{
		OutputState: i.ToWorkstationArrayOutputWithContext(ctx).OutputState,
	}
}

// WorkstationMapInput is an input type that accepts WorkstationMap and WorkstationMapOutput values.
// You can construct a concrete instance of `WorkstationMapInput` via:
//
//	WorkstationMap{ "key": WorkstationArgs{...} }
type WorkstationMapInput interface {
	pulumi.Input

	ToWorkstationMapOutput() WorkstationMapOutput
	ToWorkstationMapOutputWithContext(context.Context) WorkstationMapOutput
}

type WorkstationMap map[string]WorkstationInput

func (WorkstationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workstation)(nil)).Elem()
}

func (i WorkstationMap) ToWorkstationMapOutput() WorkstationMapOutput {
	return i.ToWorkstationMapOutputWithContext(context.Background())
}

func (i WorkstationMap) ToWorkstationMapOutputWithContext(ctx context.Context) WorkstationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationMapOutput)
}

func (i WorkstationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Workstation] {
	return pulumix.Output[map[string]*Workstation]{
		OutputState: i.ToWorkstationMapOutputWithContext(ctx).OutputState,
	}
}

type WorkstationOutput struct{ *pulumi.OutputState }

func (WorkstationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workstation)(nil)).Elem()
}

func (o WorkstationOutput) ToWorkstationOutput() WorkstationOutput {
	return o
}

func (o WorkstationOutput) ToWorkstationOutputWithContext(ctx context.Context) WorkstationOutput {
	return o
}

func (o WorkstationOutput) ToOutput(ctx context.Context) pulumix.Output[*Workstation] {
	return pulumix.Output[*Workstation]{
		OutputState: o.OutputState,
	}
}

// Client-specified annotations. This is distinct from labels.
func (o WorkstationOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Time when this resource was created.
func (o WorkstationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Human-readable name for this resource.
func (o WorkstationOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// 'Client-specified environment variables passed to the workstation container's entrypoint.'
func (o WorkstationOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringMapOutput { return v.Env }).(pulumi.StringMapOutput)
}

// Host to which clients can send HTTPS traffic that will be received by the workstation.
// Authorized traffic will be received to the workstation as HTTP on port 80.
// To send traffic to a different port, clients may prefix the host with the destination port in the format "{port}-{host}".
func (o WorkstationOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
func (o WorkstationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the workstation parent resources reside.
//
// ***
func (o WorkstationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Full name of this resource.
func (o WorkstationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o WorkstationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Current state of the workstation.
func (o WorkstationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A system-assigned unique identified for this resource.
func (o WorkstationOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The ID of the parent workstation cluster.
func (o WorkstationOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

// The ID of the parent workstation cluster config.
func (o WorkstationOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

// ID to use for the workstation.
func (o WorkstationOutput) WorkstationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workstation) pulumi.StringOutput { return v.WorkstationId }).(pulumi.StringOutput)
}

type WorkstationArrayOutput struct{ *pulumi.OutputState }

func (WorkstationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workstation)(nil)).Elem()
}

func (o WorkstationArrayOutput) ToWorkstationArrayOutput() WorkstationArrayOutput {
	return o
}

func (o WorkstationArrayOutput) ToWorkstationArrayOutputWithContext(ctx context.Context) WorkstationArrayOutput {
	return o
}

func (o WorkstationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Workstation] {
	return pulumix.Output[[]*Workstation]{
		OutputState: o.OutputState,
	}
}

func (o WorkstationArrayOutput) Index(i pulumi.IntInput) WorkstationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workstation {
		return vs[0].([]*Workstation)[vs[1].(int)]
	}).(WorkstationOutput)
}

type WorkstationMapOutput struct{ *pulumi.OutputState }

func (WorkstationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workstation)(nil)).Elem()
}

func (o WorkstationMapOutput) ToWorkstationMapOutput() WorkstationMapOutput {
	return o
}

func (o WorkstationMapOutput) ToWorkstationMapOutputWithContext(ctx context.Context) WorkstationMapOutput {
	return o
}

func (o WorkstationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Workstation] {
	return pulumix.Output[map[string]*Workstation]{
		OutputState: o.OutputState,
	}
}

func (o WorkstationMapOutput) MapIndex(k pulumi.StringInput) WorkstationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workstation {
		return vs[0].(map[string]*Workstation)[vs[1].(string)]
	}).(WorkstationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationInput)(nil)).Elem(), &Workstation{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationArrayInput)(nil)).Elem(), WorkstationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationMapInput)(nil)).Elem(), WorkstationMap{})
	pulumi.RegisterOutputType(WorkstationOutput{})
	pulumi.RegisterOutputType(WorkstationArrayOutput{})
	pulumi.RegisterOutputType(WorkstationMapOutput{})
}
