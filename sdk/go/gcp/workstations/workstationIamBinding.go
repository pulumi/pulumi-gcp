// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workstations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Workstations Workstation. Each of these resources serves a different use case:
//
// * `workstations.WorkstationIamPolicy`: Authoritative. Sets the IAM policy for the workstation and replaces any existing policy already attached.
// * `workstations.WorkstationIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the workstation are preserved.
// * `workstations.WorkstationIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the workstation are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `workstations.WorkstationIamPolicy`: Retrieves the IAM policy for the workstation
//
// > **Note:** `workstations.WorkstationIamPolicy` **cannot** be used in conjunction with `workstations.WorkstationIamBinding` and `workstations.WorkstationIamMember` or they will fight over what your policy should be.
//
// > **Note:** `workstations.WorkstationIamBinding` resources **can be** used in conjunction with `workstations.WorkstationIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## workstations.WorkstationIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationIamPolicy(ctx, "policy", &workstations.WorkstationIamPolicyArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				PolicyData:           pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## workstations.WorkstationIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workstations.NewWorkstationIamBinding(ctx, "binding", &workstations.WorkstationIamBindingArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				Role:                 pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## workstations.WorkstationIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workstations.NewWorkstationIamMember(ctx, "member", &workstations.WorkstationIamMemberArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				Role:                 pulumi.String("roles/viewer"),
//				Member:               pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Cloud Workstations Workstation
//
// Three different resources help you manage your IAM policy for Cloud Workstations Workstation. Each of these resources serves a different use case:
//
// * `workstations.WorkstationIamPolicy`: Authoritative. Sets the IAM policy for the workstation and replaces any existing policy already attached.
// * `workstations.WorkstationIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the workstation are preserved.
// * `workstations.WorkstationIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the workstation are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `workstations.WorkstationIamPolicy`: Retrieves the IAM policy for the workstation
//
// > **Note:** `workstations.WorkstationIamPolicy` **cannot** be used in conjunction with `workstations.WorkstationIamBinding` and `workstations.WorkstationIamMember` or they will fight over what your policy should be.
//
// > **Note:** `workstations.WorkstationIamBinding` resources **can be** used in conjunction with `workstations.WorkstationIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## workstations.WorkstationIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationIamPolicy(ctx, "policy", &workstations.WorkstationIamPolicyArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				PolicyData:           pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## workstations.WorkstationIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workstations.NewWorkstationIamBinding(ctx, "binding", &workstations.WorkstationIamBindingArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				Role:                 pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## workstations.WorkstationIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workstations.NewWorkstationIamMember(ctx, "member", &workstations.WorkstationIamMemberArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				Role:                 pulumi.String("roles/viewer"),
//				Member:               pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}}
//
// * {{project}}/{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}/{{workstation_id}}
//
// * {{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}/{{workstation_id}}
//
// * {{workstation_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Cloud Workstations workstation IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:workstations/workstationIamBinding:WorkstationIamBinding editor "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:workstations/workstationIamBinding:WorkstationIamBinding editor "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:workstations/workstationIamBinding:WorkstationIamBinding editor projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type WorkstationIamBinding struct {
	pulumi.CustomResourceState

	Condition WorkstationIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId pulumi.StringOutput `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId pulumi.StringOutput `pulumi:"workstationConfigId"`
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId pulumi.StringOutput `pulumi:"workstationId"`
}

// NewWorkstationIamBinding registers a new resource with the given unique name, arguments, and options.
func NewWorkstationIamBinding(ctx *pulumi.Context,
	name string, args *WorkstationIamBindingArgs, opts ...pulumi.ResourceOption) (*WorkstationIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	if args.WorkstationId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkstationIamBinding
	err := ctx.RegisterResource("gcp:workstations/workstationIamBinding:WorkstationIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstationIamBinding gets an existing WorkstationIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstationIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationIamBindingState, opts ...pulumi.ResourceOption) (*WorkstationIamBinding, error) {
	var resource WorkstationIamBinding
	err := ctx.ReadResource("gcp:workstations/workstationIamBinding:WorkstationIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkstationIamBinding resources.
type workstationIamBindingState struct {
	Condition *WorkstationIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId *string `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId *string `pulumi:"workstationConfigId"`
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId *string `pulumi:"workstationId"`
}

type WorkstationIamBindingState struct {
	Condition WorkstationIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId pulumi.StringPtrInput
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId pulumi.StringPtrInput
}

func (WorkstationIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationIamBindingState)(nil)).Elem()
}

type workstationIamBindingArgs struct {
	Condition *WorkstationIamBindingCondition `pulumi:"condition"`
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId string `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId string `pulumi:"workstationConfigId"`
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId string `pulumi:"workstationId"`
}

// The set of arguments for constructing a WorkstationIamBinding resource.
type WorkstationIamBindingArgs struct {
	Condition WorkstationIamBindingConditionPtrInput
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId pulumi.StringInput
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId pulumi.StringInput
}

func (WorkstationIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationIamBindingArgs)(nil)).Elem()
}

type WorkstationIamBindingInput interface {
	pulumi.Input

	ToWorkstationIamBindingOutput() WorkstationIamBindingOutput
	ToWorkstationIamBindingOutputWithContext(ctx context.Context) WorkstationIamBindingOutput
}

func (*WorkstationIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationIamBinding)(nil)).Elem()
}

func (i *WorkstationIamBinding) ToWorkstationIamBindingOutput() WorkstationIamBindingOutput {
	return i.ToWorkstationIamBindingOutputWithContext(context.Background())
}

func (i *WorkstationIamBinding) ToWorkstationIamBindingOutputWithContext(ctx context.Context) WorkstationIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamBindingOutput)
}

// WorkstationIamBindingArrayInput is an input type that accepts WorkstationIamBindingArray and WorkstationIamBindingArrayOutput values.
// You can construct a concrete instance of `WorkstationIamBindingArrayInput` via:
//
//	WorkstationIamBindingArray{ WorkstationIamBindingArgs{...} }
type WorkstationIamBindingArrayInput interface {
	pulumi.Input

	ToWorkstationIamBindingArrayOutput() WorkstationIamBindingArrayOutput
	ToWorkstationIamBindingArrayOutputWithContext(context.Context) WorkstationIamBindingArrayOutput
}

type WorkstationIamBindingArray []WorkstationIamBindingInput

func (WorkstationIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationIamBinding)(nil)).Elem()
}

func (i WorkstationIamBindingArray) ToWorkstationIamBindingArrayOutput() WorkstationIamBindingArrayOutput {
	return i.ToWorkstationIamBindingArrayOutputWithContext(context.Background())
}

func (i WorkstationIamBindingArray) ToWorkstationIamBindingArrayOutputWithContext(ctx context.Context) WorkstationIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamBindingArrayOutput)
}

// WorkstationIamBindingMapInput is an input type that accepts WorkstationIamBindingMap and WorkstationIamBindingMapOutput values.
// You can construct a concrete instance of `WorkstationIamBindingMapInput` via:
//
//	WorkstationIamBindingMap{ "key": WorkstationIamBindingArgs{...} }
type WorkstationIamBindingMapInput interface {
	pulumi.Input

	ToWorkstationIamBindingMapOutput() WorkstationIamBindingMapOutput
	ToWorkstationIamBindingMapOutputWithContext(context.Context) WorkstationIamBindingMapOutput
}

type WorkstationIamBindingMap map[string]WorkstationIamBindingInput

func (WorkstationIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationIamBinding)(nil)).Elem()
}

func (i WorkstationIamBindingMap) ToWorkstationIamBindingMapOutput() WorkstationIamBindingMapOutput {
	return i.ToWorkstationIamBindingMapOutputWithContext(context.Background())
}

func (i WorkstationIamBindingMap) ToWorkstationIamBindingMapOutputWithContext(ctx context.Context) WorkstationIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamBindingMapOutput)
}

type WorkstationIamBindingOutput struct{ *pulumi.OutputState }

func (WorkstationIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationIamBinding)(nil)).Elem()
}

func (o WorkstationIamBindingOutput) ToWorkstationIamBindingOutput() WorkstationIamBindingOutput {
	return o
}

func (o WorkstationIamBindingOutput) ToWorkstationIamBindingOutputWithContext(ctx context.Context) WorkstationIamBindingOutput {
	return o
}

func (o WorkstationIamBindingOutput) Condition() WorkstationIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) WorkstationIamBindingConditionPtrOutput { return v.Condition }).(WorkstationIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o WorkstationIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where the workstation parent resources reside.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o WorkstationIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o WorkstationIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o WorkstationIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `workstations.WorkstationIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o WorkstationIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The ID of the parent workstation cluster.
// Used to find the parent resource to bind the IAM policy to
func (o WorkstationIamBindingOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

// The ID of the parent workstation cluster config.
// Used to find the parent resource to bind the IAM policy to
func (o WorkstationIamBindingOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o WorkstationIamBindingOutput) WorkstationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamBinding) pulumi.StringOutput { return v.WorkstationId }).(pulumi.StringOutput)
}

type WorkstationIamBindingArrayOutput struct{ *pulumi.OutputState }

func (WorkstationIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationIamBinding)(nil)).Elem()
}

func (o WorkstationIamBindingArrayOutput) ToWorkstationIamBindingArrayOutput() WorkstationIamBindingArrayOutput {
	return o
}

func (o WorkstationIamBindingArrayOutput) ToWorkstationIamBindingArrayOutputWithContext(ctx context.Context) WorkstationIamBindingArrayOutput {
	return o
}

func (o WorkstationIamBindingArrayOutput) Index(i pulumi.IntInput) WorkstationIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkstationIamBinding {
		return vs[0].([]*WorkstationIamBinding)[vs[1].(int)]
	}).(WorkstationIamBindingOutput)
}

type WorkstationIamBindingMapOutput struct{ *pulumi.OutputState }

func (WorkstationIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationIamBinding)(nil)).Elem()
}

func (o WorkstationIamBindingMapOutput) ToWorkstationIamBindingMapOutput() WorkstationIamBindingMapOutput {
	return o
}

func (o WorkstationIamBindingMapOutput) ToWorkstationIamBindingMapOutputWithContext(ctx context.Context) WorkstationIamBindingMapOutput {
	return o
}

func (o WorkstationIamBindingMapOutput) MapIndex(k pulumi.StringInput) WorkstationIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkstationIamBinding {
		return vs[0].(map[string]*WorkstationIamBinding)[vs[1].(string)]
	}).(WorkstationIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamBindingInput)(nil)).Elem(), &WorkstationIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamBindingArrayInput)(nil)).Elem(), WorkstationIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamBindingMapInput)(nil)).Elem(), WorkstationIamBindingMap{})
	pulumi.RegisterOutputType(WorkstationIamBindingOutput{})
	pulumi.RegisterOutputType(WorkstationIamBindingArrayOutput{})
	pulumi.RegisterOutputType(WorkstationIamBindingMapOutput{})
}
