// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workstations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}} * {{project}}/{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}} * {{location}}/{{workstation_cluster_id}}/{{workstation_config_id}} * {{workstation_config_id}} Any variables not passed in the import command will be taken from the provider configuration. Cloud Workstations workstationconfig IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy editor "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy editor "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy editor projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type WorkstationConfigIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where the workstation cluster config should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project              pulumi.StringOutput `pulumi:"project"`
	WorkstationClusterId pulumi.StringOutput `pulumi:"workstationClusterId"`
	WorkstationConfigId  pulumi.StringOutput `pulumi:"workstationConfigId"`
}

// NewWorkstationConfigIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewWorkstationConfigIamPolicy(ctx *pulumi.Context,
	name string, args *WorkstationConfigIamPolicyArgs, opts ...pulumi.ResourceOption) (*WorkstationConfigIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkstationConfigIamPolicy
	err := ctx.RegisterResource("gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstationConfigIamPolicy gets an existing WorkstationConfigIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstationConfigIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationConfigIamPolicyState, opts ...pulumi.ResourceOption) (*WorkstationConfigIamPolicy, error) {
	var resource WorkstationConfigIamPolicy
	err := ctx.ReadResource("gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkstationConfigIamPolicy resources.
type workstationConfigIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where the workstation cluster config should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project              *string `pulumi:"project"`
	WorkstationClusterId *string `pulumi:"workstationClusterId"`
	WorkstationConfigId  *string `pulumi:"workstationConfigId"`
}

type WorkstationConfigIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where the workstation cluster config should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project              pulumi.StringPtrInput
	WorkstationClusterId pulumi.StringPtrInput
	WorkstationConfigId  pulumi.StringPtrInput
}

func (WorkstationConfigIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationConfigIamPolicyState)(nil)).Elem()
}

type workstationConfigIamPolicyArgs struct {
	// The location where the workstation cluster config should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project              *string `pulumi:"project"`
	WorkstationClusterId string  `pulumi:"workstationClusterId"`
	WorkstationConfigId  string  `pulumi:"workstationConfigId"`
}

// The set of arguments for constructing a WorkstationConfigIamPolicy resource.
type WorkstationConfigIamPolicyArgs struct {
	// The location where the workstation cluster config should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project              pulumi.StringPtrInput
	WorkstationClusterId pulumi.StringInput
	WorkstationConfigId  pulumi.StringInput
}

func (WorkstationConfigIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationConfigIamPolicyArgs)(nil)).Elem()
}

type WorkstationConfigIamPolicyInput interface {
	pulumi.Input

	ToWorkstationConfigIamPolicyOutput() WorkstationConfigIamPolicyOutput
	ToWorkstationConfigIamPolicyOutputWithContext(ctx context.Context) WorkstationConfigIamPolicyOutput
}

func (*WorkstationConfigIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationConfigIamPolicy)(nil)).Elem()
}

func (i *WorkstationConfigIamPolicy) ToWorkstationConfigIamPolicyOutput() WorkstationConfigIamPolicyOutput {
	return i.ToWorkstationConfigIamPolicyOutputWithContext(context.Background())
}

func (i *WorkstationConfigIamPolicy) ToWorkstationConfigIamPolicyOutputWithContext(ctx context.Context) WorkstationConfigIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigIamPolicyOutput)
}

// WorkstationConfigIamPolicyArrayInput is an input type that accepts WorkstationConfigIamPolicyArray and WorkstationConfigIamPolicyArrayOutput values.
// You can construct a concrete instance of `WorkstationConfigIamPolicyArrayInput` via:
//
//	WorkstationConfigIamPolicyArray{ WorkstationConfigIamPolicyArgs{...} }
type WorkstationConfigIamPolicyArrayInput interface {
	pulumi.Input

	ToWorkstationConfigIamPolicyArrayOutput() WorkstationConfigIamPolicyArrayOutput
	ToWorkstationConfigIamPolicyArrayOutputWithContext(context.Context) WorkstationConfigIamPolicyArrayOutput
}

type WorkstationConfigIamPolicyArray []WorkstationConfigIamPolicyInput

func (WorkstationConfigIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationConfigIamPolicy)(nil)).Elem()
}

func (i WorkstationConfigIamPolicyArray) ToWorkstationConfigIamPolicyArrayOutput() WorkstationConfigIamPolicyArrayOutput {
	return i.ToWorkstationConfigIamPolicyArrayOutputWithContext(context.Background())
}

func (i WorkstationConfigIamPolicyArray) ToWorkstationConfigIamPolicyArrayOutputWithContext(ctx context.Context) WorkstationConfigIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigIamPolicyArrayOutput)
}

// WorkstationConfigIamPolicyMapInput is an input type that accepts WorkstationConfigIamPolicyMap and WorkstationConfigIamPolicyMapOutput values.
// You can construct a concrete instance of `WorkstationConfigIamPolicyMapInput` via:
//
//	WorkstationConfigIamPolicyMap{ "key": WorkstationConfigIamPolicyArgs{...} }
type WorkstationConfigIamPolicyMapInput interface {
	pulumi.Input

	ToWorkstationConfigIamPolicyMapOutput() WorkstationConfigIamPolicyMapOutput
	ToWorkstationConfigIamPolicyMapOutputWithContext(context.Context) WorkstationConfigIamPolicyMapOutput
}

type WorkstationConfigIamPolicyMap map[string]WorkstationConfigIamPolicyInput

func (WorkstationConfigIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationConfigIamPolicy)(nil)).Elem()
}

func (i WorkstationConfigIamPolicyMap) ToWorkstationConfigIamPolicyMapOutput() WorkstationConfigIamPolicyMapOutput {
	return i.ToWorkstationConfigIamPolicyMapOutputWithContext(context.Background())
}

func (i WorkstationConfigIamPolicyMap) ToWorkstationConfigIamPolicyMapOutputWithContext(ctx context.Context) WorkstationConfigIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigIamPolicyMapOutput)
}

type WorkstationConfigIamPolicyOutput struct{ *pulumi.OutputState }

func (WorkstationConfigIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationConfigIamPolicy)(nil)).Elem()
}

func (o WorkstationConfigIamPolicyOutput) ToWorkstationConfigIamPolicyOutput() WorkstationConfigIamPolicyOutput {
	return o
}

func (o WorkstationConfigIamPolicyOutput) ToWorkstationConfigIamPolicyOutputWithContext(ctx context.Context) WorkstationConfigIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o WorkstationConfigIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where the workstation cluster config should reside.
// Used to find the parent resource to bind the IAM policy to
func (o WorkstationConfigIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o WorkstationConfigIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o WorkstationConfigIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o WorkstationConfigIamPolicyOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamPolicy) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

func (o WorkstationConfigIamPolicyOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamPolicy) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

type WorkstationConfigIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (WorkstationConfigIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationConfigIamPolicy)(nil)).Elem()
}

func (o WorkstationConfigIamPolicyArrayOutput) ToWorkstationConfigIamPolicyArrayOutput() WorkstationConfigIamPolicyArrayOutput {
	return o
}

func (o WorkstationConfigIamPolicyArrayOutput) ToWorkstationConfigIamPolicyArrayOutputWithContext(ctx context.Context) WorkstationConfigIamPolicyArrayOutput {
	return o
}

func (o WorkstationConfigIamPolicyArrayOutput) Index(i pulumi.IntInput) WorkstationConfigIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkstationConfigIamPolicy {
		return vs[0].([]*WorkstationConfigIamPolicy)[vs[1].(int)]
	}).(WorkstationConfigIamPolicyOutput)
}

type WorkstationConfigIamPolicyMapOutput struct{ *pulumi.OutputState }

func (WorkstationConfigIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationConfigIamPolicy)(nil)).Elem()
}

func (o WorkstationConfigIamPolicyMapOutput) ToWorkstationConfigIamPolicyMapOutput() WorkstationConfigIamPolicyMapOutput {
	return o
}

func (o WorkstationConfigIamPolicyMapOutput) ToWorkstationConfigIamPolicyMapOutputWithContext(ctx context.Context) WorkstationConfigIamPolicyMapOutput {
	return o
}

func (o WorkstationConfigIamPolicyMapOutput) MapIndex(k pulumi.StringInput) WorkstationConfigIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkstationConfigIamPolicy {
		return vs[0].(map[string]*WorkstationConfigIamPolicy)[vs[1].(string)]
	}).(WorkstationConfigIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigIamPolicyInput)(nil)).Elem(), &WorkstationConfigIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigIamPolicyArrayInput)(nil)).Elem(), WorkstationConfigIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigIamPolicyMapInput)(nil)).Elem(), WorkstationConfigIamPolicyMap{})
	pulumi.RegisterOutputType(WorkstationConfigIamPolicyOutput{})
	pulumi.RegisterOutputType(WorkstationConfigIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(WorkstationConfigIamPolicyMapOutput{})
}
