// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workstations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Workstations Workstation. Each of these resources serves a different use case:
//
// * `workstations.WorkstationIamPolicy`: Authoritative. Sets the IAM policy for the workstation and replaces any existing policy already attached.
// * `workstations.WorkstationIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the workstation are preserved.
// * `workstations.WorkstationIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the workstation are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `workstations.WorkstationIamPolicy`: Retrieves the IAM policy for the workstation
//
// > **Note:** `workstations.WorkstationIamPolicy` **cannot** be used in conjunction with `workstations.WorkstationIamBinding` and `workstations.WorkstationIamMember` or they will fight over what your policy should be.
//
// > **Note:** `workstations.WorkstationIamBinding` resources **can be** used in conjunction with `workstations.WorkstationIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## workstations.WorkstationIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationIamPolicy(ctx, "policy", &workstations.WorkstationIamPolicyArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				PolicyData:           pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## workstations.WorkstationIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workstations.NewWorkstationIamBinding(ctx, "binding", &workstations.WorkstationIamBindingArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				Role:                 pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## workstations.WorkstationIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workstations.NewWorkstationIamMember(ctx, "member", &workstations.WorkstationIamMemberArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				Role:                 pulumi.String("roles/viewer"),
//				Member:               pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Cloud Workstations Workstation
//
// Three different resources help you manage your IAM policy for Cloud Workstations Workstation. Each of these resources serves a different use case:
//
// * `workstations.WorkstationIamPolicy`: Authoritative. Sets the IAM policy for the workstation and replaces any existing policy already attached.
// * `workstations.WorkstationIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the workstation are preserved.
// * `workstations.WorkstationIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the workstation are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `workstations.WorkstationIamPolicy`: Retrieves the IAM policy for the workstation
//
// > **Note:** `workstations.WorkstationIamPolicy` **cannot** be used in conjunction with `workstations.WorkstationIamBinding` and `workstations.WorkstationIamMember` or they will fight over what your policy should be.
//
// > **Note:** `workstations.WorkstationIamBinding` resources **can be** used in conjunction with `workstations.WorkstationIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## workstations.WorkstationIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationIamPolicy(ctx, "policy", &workstations.WorkstationIamPolicyArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				PolicyData:           pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## workstations.WorkstationIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workstations.NewWorkstationIamBinding(ctx, "binding", &workstations.WorkstationIamBindingArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				Role:                 pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## workstations.WorkstationIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workstations.NewWorkstationIamMember(ctx, "member", &workstations.WorkstationIamMemberArgs{
//				Project:              pulumi.Any(_default.Project),
//				Location:             pulumi.Any(_default.Location),
//				WorkstationClusterId: pulumi.Any(_default.WorkstationClusterId),
//				WorkstationConfigId:  pulumi.Any(_default.WorkstationConfigId),
//				WorkstationId:        pulumi.Any(_default.WorkstationId),
//				Role:                 pulumi.String("roles/viewer"),
//				Member:               pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}}
//
// * {{project}}/{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}/{{workstation_id}}
//
// * {{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}/{{workstation_id}}
//
// * {{workstation_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Cloud Workstations workstation IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:workstations/workstationIamPolicy:WorkstationIamPolicy editor "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:workstations/workstationIamPolicy:WorkstationIamPolicy editor "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:workstations/workstationIamPolicy:WorkstationIamPolicy editor projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}/workstations/{{workstation_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type WorkstationIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId pulumi.StringOutput `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId pulumi.StringOutput `pulumi:"workstationConfigId"`
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId pulumi.StringOutput `pulumi:"workstationId"`
}

// NewWorkstationIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewWorkstationIamPolicy(ctx *pulumi.Context,
	name string, args *WorkstationIamPolicyArgs, opts ...pulumi.ResourceOption) (*WorkstationIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	if args.WorkstationId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkstationIamPolicy
	err := ctx.RegisterResource("gcp:workstations/workstationIamPolicy:WorkstationIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstationIamPolicy gets an existing WorkstationIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstationIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationIamPolicyState, opts ...pulumi.ResourceOption) (*WorkstationIamPolicy, error) {
	var resource WorkstationIamPolicy
	err := ctx.ReadResource("gcp:workstations/workstationIamPolicy:WorkstationIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkstationIamPolicy resources.
type workstationIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId *string `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId *string `pulumi:"workstationConfigId"`
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId *string `pulumi:"workstationId"`
}

type WorkstationIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId pulumi.StringPtrInput
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId pulumi.StringPtrInput
}

func (WorkstationIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationIamPolicyState)(nil)).Elem()
}

type workstationIamPolicyArgs struct {
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId string `pulumi:"workstationClusterId"`
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId string `pulumi:"workstationConfigId"`
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId string `pulumi:"workstationId"`
}

// The set of arguments for constructing a WorkstationIamPolicy resource.
type WorkstationIamPolicyArgs struct {
	// The location where the workstation parent resources reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID of the parent workstation cluster.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationClusterId pulumi.StringInput
	// The ID of the parent workstation cluster config.
	// Used to find the parent resource to bind the IAM policy to
	WorkstationConfigId pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	WorkstationId pulumi.StringInput
}

func (WorkstationIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationIamPolicyArgs)(nil)).Elem()
}

type WorkstationIamPolicyInput interface {
	pulumi.Input

	ToWorkstationIamPolicyOutput() WorkstationIamPolicyOutput
	ToWorkstationIamPolicyOutputWithContext(ctx context.Context) WorkstationIamPolicyOutput
}

func (*WorkstationIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationIamPolicy)(nil)).Elem()
}

func (i *WorkstationIamPolicy) ToWorkstationIamPolicyOutput() WorkstationIamPolicyOutput {
	return i.ToWorkstationIamPolicyOutputWithContext(context.Background())
}

func (i *WorkstationIamPolicy) ToWorkstationIamPolicyOutputWithContext(ctx context.Context) WorkstationIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamPolicyOutput)
}

// WorkstationIamPolicyArrayInput is an input type that accepts WorkstationIamPolicyArray and WorkstationIamPolicyArrayOutput values.
// You can construct a concrete instance of `WorkstationIamPolicyArrayInput` via:
//
//	WorkstationIamPolicyArray{ WorkstationIamPolicyArgs{...} }
type WorkstationIamPolicyArrayInput interface {
	pulumi.Input

	ToWorkstationIamPolicyArrayOutput() WorkstationIamPolicyArrayOutput
	ToWorkstationIamPolicyArrayOutputWithContext(context.Context) WorkstationIamPolicyArrayOutput
}

type WorkstationIamPolicyArray []WorkstationIamPolicyInput

func (WorkstationIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationIamPolicy)(nil)).Elem()
}

func (i WorkstationIamPolicyArray) ToWorkstationIamPolicyArrayOutput() WorkstationIamPolicyArrayOutput {
	return i.ToWorkstationIamPolicyArrayOutputWithContext(context.Background())
}

func (i WorkstationIamPolicyArray) ToWorkstationIamPolicyArrayOutputWithContext(ctx context.Context) WorkstationIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamPolicyArrayOutput)
}

// WorkstationIamPolicyMapInput is an input type that accepts WorkstationIamPolicyMap and WorkstationIamPolicyMapOutput values.
// You can construct a concrete instance of `WorkstationIamPolicyMapInput` via:
//
//	WorkstationIamPolicyMap{ "key": WorkstationIamPolicyArgs{...} }
type WorkstationIamPolicyMapInput interface {
	pulumi.Input

	ToWorkstationIamPolicyMapOutput() WorkstationIamPolicyMapOutput
	ToWorkstationIamPolicyMapOutputWithContext(context.Context) WorkstationIamPolicyMapOutput
}

type WorkstationIamPolicyMap map[string]WorkstationIamPolicyInput

func (WorkstationIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationIamPolicy)(nil)).Elem()
}

func (i WorkstationIamPolicyMap) ToWorkstationIamPolicyMapOutput() WorkstationIamPolicyMapOutput {
	return i.ToWorkstationIamPolicyMapOutputWithContext(context.Background())
}

func (i WorkstationIamPolicyMap) ToWorkstationIamPolicyMapOutputWithContext(ctx context.Context) WorkstationIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamPolicyMapOutput)
}

type WorkstationIamPolicyOutput struct{ *pulumi.OutputState }

func (WorkstationIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationIamPolicy)(nil)).Elem()
}

func (o WorkstationIamPolicyOutput) ToWorkstationIamPolicyOutput() WorkstationIamPolicyOutput {
	return o
}

func (o WorkstationIamPolicyOutput) ToWorkstationIamPolicyOutputWithContext(ctx context.Context) WorkstationIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o WorkstationIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where the workstation parent resources reside.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o WorkstationIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o WorkstationIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o WorkstationIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The ID of the parent workstation cluster.
// Used to find the parent resource to bind the IAM policy to
func (o WorkstationIamPolicyOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamPolicy) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

// The ID of the parent workstation cluster config.
// Used to find the parent resource to bind the IAM policy to
func (o WorkstationIamPolicyOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamPolicy) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o WorkstationIamPolicyOutput) WorkstationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamPolicy) pulumi.StringOutput { return v.WorkstationId }).(pulumi.StringOutput)
}

type WorkstationIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (WorkstationIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationIamPolicy)(nil)).Elem()
}

func (o WorkstationIamPolicyArrayOutput) ToWorkstationIamPolicyArrayOutput() WorkstationIamPolicyArrayOutput {
	return o
}

func (o WorkstationIamPolicyArrayOutput) ToWorkstationIamPolicyArrayOutputWithContext(ctx context.Context) WorkstationIamPolicyArrayOutput {
	return o
}

func (o WorkstationIamPolicyArrayOutput) Index(i pulumi.IntInput) WorkstationIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkstationIamPolicy {
		return vs[0].([]*WorkstationIamPolicy)[vs[1].(int)]
	}).(WorkstationIamPolicyOutput)
}

type WorkstationIamPolicyMapOutput struct{ *pulumi.OutputState }

func (WorkstationIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationIamPolicy)(nil)).Elem()
}

func (o WorkstationIamPolicyMapOutput) ToWorkstationIamPolicyMapOutput() WorkstationIamPolicyMapOutput {
	return o
}

func (o WorkstationIamPolicyMapOutput) ToWorkstationIamPolicyMapOutputWithContext(ctx context.Context) WorkstationIamPolicyMapOutput {
	return o
}

func (o WorkstationIamPolicyMapOutput) MapIndex(k pulumi.StringInput) WorkstationIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkstationIamPolicy {
		return vs[0].(map[string]*WorkstationIamPolicy)[vs[1].(string)]
	}).(WorkstationIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamPolicyInput)(nil)).Elem(), &WorkstationIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamPolicyArrayInput)(nil)).Elem(), WorkstationIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamPolicyMapInput)(nil)).Elem(), WorkstationIamPolicyMap{})
	pulumi.RegisterOutputType(WorkstationIamPolicyOutput{})
	pulumi.RegisterOutputType(WorkstationIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(WorkstationIamPolicyMapOutput{})
}
