// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workstations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Workstation Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.Name,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultWorkstationCluster, err := workstations.NewWorkstationCluster(ctx, "defaultWorkstationCluster", &workstations.WorkstationClusterArgs{
//				WorkstationClusterId: pulumi.String("workstation-cluster"),
//				Network:              defaultNetwork.ID(),
//				Subnetwork:           defaultSubnetwork.ID(),
//				Location:             pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//				Annotations: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationConfig(ctx, "defaultWorkstationConfig", &workstations.WorkstationConfigArgs{
//				WorkstationConfigId:  pulumi.String("workstation-config"),
//				WorkstationClusterId: defaultWorkstationCluster.WorkstationClusterId,
//				Location:             pulumi.String("us-central1"),
//				Host: &workstations.WorkstationConfigHostArgs{
//					GceInstance: &workstations.WorkstationConfigHostGceInstanceArgs{
//						MachineType:              pulumi.String("e2-standard-4"),
//						BootDiskSizeGb:           pulumi.Int(35),
//						DisablePublicIpAddresses: pulumi.Bool(true),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Workstation Config Container
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.Name,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultWorkstationCluster, err := workstations.NewWorkstationCluster(ctx, "defaultWorkstationCluster", &workstations.WorkstationClusterArgs{
//				WorkstationClusterId: pulumi.String("workstation-cluster"),
//				Network:              defaultNetwork.ID(),
//				Subnetwork:           defaultSubnetwork.ID(),
//				Location:             pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//				Annotations: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationConfig(ctx, "defaultWorkstationConfig", &workstations.WorkstationConfigArgs{
//				WorkstationConfigId:  pulumi.String("workstation-config"),
//				WorkstationClusterId: defaultWorkstationCluster.WorkstationClusterId,
//				Location:             pulumi.String("us-central1"),
//				Host: &workstations.WorkstationConfigHostArgs{
//					GceInstance: &workstations.WorkstationConfigHostGceInstanceArgs{
//						MachineType:              pulumi.String("e2-standard-4"),
//						BootDiskSizeGb:           pulumi.Int(35),
//						DisablePublicIpAddresses: pulumi.Bool(true),
//					},
//				},
//				Container: &workstations.WorkstationConfigContainerArgs{
//					Image: pulumi.String("intellij"),
//					Env: pulumi.StringMap{
//						"NAME": pulumi.String("FOO"),
//						"BABE": pulumi.String("bar"),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Workstation Config Persistent Directories
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.Name,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultWorkstationCluster, err := workstations.NewWorkstationCluster(ctx, "defaultWorkstationCluster", &workstations.WorkstationClusterArgs{
//				WorkstationClusterId: pulumi.String("workstation-cluster"),
//				Network:              defaultNetwork.ID(),
//				Subnetwork:           defaultSubnetwork.ID(),
//				Location:             pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//				Annotations: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationConfig(ctx, "defaultWorkstationConfig", &workstations.WorkstationConfigArgs{
//				WorkstationConfigId:  pulumi.String("workstation-config"),
//				WorkstationClusterId: defaultWorkstationCluster.WorkstationClusterId,
//				Location:             pulumi.String("us-central1"),
//				Host: &workstations.WorkstationConfigHostArgs{
//					GceInstance: &workstations.WorkstationConfigHostGceInstanceArgs{
//						MachineType:              pulumi.String("e2-standard-4"),
//						BootDiskSizeGb:           pulumi.Int(35),
//						DisablePublicIpAddresses: pulumi.Bool(true),
//						ShieldedInstanceConfig: &workstations.WorkstationConfigHostGceInstanceShieldedInstanceConfigArgs{
//							EnableSecureBoot: pulumi.Bool(true),
//							EnableVtpm:       pulumi.Bool(true),
//						},
//					},
//				},
//				PersistentDirectories: workstations.WorkstationConfigPersistentDirectoryArray{
//					&workstations.WorkstationConfigPersistentDirectoryArgs{
//						MountPath: pulumi.String("/home"),
//						GcePd: &workstations.WorkstationConfigPersistentDirectoryGcePdArgs{
//							SizeGb:        pulumi.Int(200),
//							ReclaimPolicy: pulumi.String("DELETE"),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Workstation Config Source Snapshot
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.Name,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			mySourceDisk, err := compute.NewDisk(ctx, "mySourceDisk", &compute.DiskArgs{
//				Size: pulumi.Int(10),
//				Type: pulumi.String("pd-ssd"),
//				Zone: pulumi.String("us-central1-a"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			mySourceSnapshot, err := compute.NewSnapshot(ctx, "mySourceSnapshot", &compute.SnapshotArgs{
//				SourceDisk: mySourceDisk.Name,
//				Zone:       pulumi.String("us-central1-a"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultWorkstationCluster, err := workstations.NewWorkstationCluster(ctx, "defaultWorkstationCluster", &workstations.WorkstationClusterArgs{
//				WorkstationClusterId: pulumi.String("workstation-cluster"),
//				Network:              defaultNetwork.ID(),
//				Subnetwork:           defaultSubnetwork.ID(),
//				Location:             pulumi.String("us-central1"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationConfig(ctx, "defaultWorkstationConfig", &workstations.WorkstationConfigArgs{
//				WorkstationConfigId:  pulumi.String("workstation-config"),
//				WorkstationClusterId: defaultWorkstationCluster.WorkstationClusterId,
//				Location:             defaultWorkstationCluster.Location,
//				PersistentDirectories: workstations.WorkstationConfigPersistentDirectoryArray{
//					&workstations.WorkstationConfigPersistentDirectoryArgs{
//						MountPath: pulumi.String("/home"),
//						GcePd: &workstations.WorkstationConfigPersistentDirectoryGcePdArgs{
//							SourceSnapshot: mySourceSnapshot.ID(),
//							ReclaimPolicy:  pulumi.String("DELETE"),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Workstation Config Shielded Instance Config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.Name,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultWorkstationCluster, err := workstations.NewWorkstationCluster(ctx, "defaultWorkstationCluster", &workstations.WorkstationClusterArgs{
//				WorkstationClusterId: pulumi.String("workstation-cluster"),
//				Network:              defaultNetwork.ID(),
//				Subnetwork:           defaultSubnetwork.ID(),
//				Location:             pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//				Annotations: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationConfig(ctx, "defaultWorkstationConfig", &workstations.WorkstationConfigArgs{
//				WorkstationConfigId:  pulumi.String("workstation-config"),
//				WorkstationClusterId: defaultWorkstationCluster.WorkstationClusterId,
//				Location:             pulumi.String("us-central1"),
//				Host: &workstations.WorkstationConfigHostArgs{
//					GceInstance: &workstations.WorkstationConfigHostGceInstanceArgs{
//						MachineType:              pulumi.String("e2-standard-4"),
//						BootDiskSizeGb:           pulumi.Int(35),
//						DisablePublicIpAddresses: pulumi.Bool(true),
//						ShieldedInstanceConfig: &workstations.WorkstationConfigHostGceInstanceShieldedInstanceConfigArgs{
//							EnableSecureBoot: pulumi.Bool(true),
//							EnableVtpm:       pulumi.Bool(true),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Workstation Config Encryption Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/serviceAccount"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/workstations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.Name,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultWorkstationCluster, err := workstations.NewWorkstationCluster(ctx, "defaultWorkstationCluster", &workstations.WorkstationClusterArgs{
//				WorkstationClusterId: pulumi.String("workstation-cluster"),
//				Network:              defaultNetwork.ID(),
//				Subnetwork:           defaultSubnetwork.ID(),
//				Location:             pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//				Annotations: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultKeyRing, err := kms.NewKeyRing(ctx, "defaultKeyRing", &kms.KeyRingArgs{
//				Location: pulumi.String("global"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultCryptoKey, err := kms.NewCryptoKey(ctx, "defaultCryptoKey", &kms.CryptoKeyArgs{
//				KeyRing: defaultKeyRing.ID(),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultAccount, err := serviceAccount.NewAccount(ctx, "defaultAccount", &serviceAccount.AccountArgs{
//				AccountId:   pulumi.String("my-account"),
//				DisplayName: pulumi.String("Service Account"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = workstations.NewWorkstationConfig(ctx, "defaultWorkstationConfig", &workstations.WorkstationConfigArgs{
//				WorkstationConfigId:  pulumi.String("workstation-config"),
//				WorkstationClusterId: defaultWorkstationCluster.WorkstationClusterId,
//				Location:             pulumi.String("us-central1"),
//				Host: &workstations.WorkstationConfigHostArgs{
//					GceInstance: &workstations.WorkstationConfigHostGceInstanceArgs{
//						MachineType:              pulumi.String("e2-standard-4"),
//						BootDiskSizeGb:           pulumi.Int(35),
//						DisablePublicIpAddresses: pulumi.Bool(true),
//						ShieldedInstanceConfig: &workstations.WorkstationConfigHostGceInstanceShieldedInstanceConfigArgs{
//							EnableSecureBoot: pulumi.Bool(true),
//							EnableVtpm:       pulumi.Bool(true),
//						},
//					},
//				},
//				EncryptionKey: &workstations.WorkstationConfigEncryptionKeyArgs{
//					KmsKey:               defaultCryptoKey.ID(),
//					KmsKeyServiceAccount: defaultAccount.Email,
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # WorkstationConfig can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationConfig:WorkstationConfig default projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationConfig:WorkstationConfig default {{project}}/{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:workstations/workstationConfig:WorkstationConfig default {{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}
//
// ```
type WorkstationConfig struct {
	pulumi.CustomResourceState

	// Client-specified annotations. This is distinct from labels.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Status conditions describing the current resource state.
	// Structure is documented below.
	Conditions WorkstationConfigConditionArrayOutput `pulumi:"conditions"`
	// Container that will be run for each workstation using this configuration when that workstation is started.
	// Structure is documented below.
	Container WorkstationConfigContainerOutput `pulumi:"container"`
	// Time when this resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
	Degraded pulumi.BoolOutput `pulumi:"degraded"`
	// Human-readable name for this resource.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Encrypts resources of this workstation configuration using a customer-managed encryption key.
	// If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
	// If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
	// If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
	// Structure is documented below.
	EncryptionKey WorkstationConfigEncryptionKeyPtrOutput `pulumi:"encryptionKey"`
	// Checksum computed by the server.
	// May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Runtime host for a workstation.
	// Structure is documented below.
	Host WorkstationConfigHostOutput `pulumi:"host"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where the workstation cluster config should reside.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// Full name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Directories to persist across workstation sessions.
	// Structure is documented below.
	PersistentDirectories WorkstationConfigPersistentDirectoryArrayOutput `pulumi:"persistentDirectories"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The system-generated UID of the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The ID of the parent workstation cluster.
	WorkstationClusterId pulumi.StringOutput `pulumi:"workstationClusterId"`
	// The ID to be assigned to the workstation cluster config.
	WorkstationConfigId pulumi.StringOutput `pulumi:"workstationConfigId"`
}

// NewWorkstationConfig registers a new resource with the given unique name, arguments, and options.
func NewWorkstationConfig(ctx *pulumi.Context,
	name string, args *WorkstationConfigArgs, opts ...pulumi.ResourceOption) (*WorkstationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	var resource WorkstationConfig
	err := ctx.RegisterResource("gcp:workstations/workstationConfig:WorkstationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstationConfig gets an existing WorkstationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationConfigState, opts ...pulumi.ResourceOption) (*WorkstationConfig, error) {
	var resource WorkstationConfig
	err := ctx.ReadResource("gcp:workstations/workstationConfig:WorkstationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkstationConfig resources.
type workstationConfigState struct {
	// Client-specified annotations. This is distinct from labels.
	Annotations map[string]string `pulumi:"annotations"`
	// Status conditions describing the current resource state.
	// Structure is documented below.
	Conditions []WorkstationConfigCondition `pulumi:"conditions"`
	// Container that will be run for each workstation using this configuration when that workstation is started.
	// Structure is documented below.
	Container *WorkstationConfigContainer `pulumi:"container"`
	// Time when this resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
	Degraded *bool `pulumi:"degraded"`
	// Human-readable name for this resource.
	DisplayName *string `pulumi:"displayName"`
	// Encrypts resources of this workstation configuration using a customer-managed encryption key.
	// If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
	// If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
	// If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
	// Structure is documented below.
	EncryptionKey *WorkstationConfigEncryptionKey `pulumi:"encryptionKey"`
	// Checksum computed by the server.
	// May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Runtime host for a workstation.
	// Structure is documented below.
	Host *WorkstationConfigHost `pulumi:"host"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels map[string]string `pulumi:"labels"`
	// The location where the workstation cluster config should reside.
	//
	// ***
	Location *string `pulumi:"location"`
	// Full name of this resource.
	Name *string `pulumi:"name"`
	// Directories to persist across workstation sessions.
	// Structure is documented below.
	PersistentDirectories []WorkstationConfigPersistentDirectory `pulumi:"persistentDirectories"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The system-generated UID of the resource.
	Uid *string `pulumi:"uid"`
	// The ID of the parent workstation cluster.
	WorkstationClusterId *string `pulumi:"workstationClusterId"`
	// The ID to be assigned to the workstation cluster config.
	WorkstationConfigId *string `pulumi:"workstationConfigId"`
}

type WorkstationConfigState struct {
	// Client-specified annotations. This is distinct from labels.
	Annotations pulumi.StringMapInput
	// Status conditions describing the current resource state.
	// Structure is documented below.
	Conditions WorkstationConfigConditionArrayInput
	// Container that will be run for each workstation using this configuration when that workstation is started.
	// Structure is documented below.
	Container WorkstationConfigContainerPtrInput
	// Time when this resource was created.
	CreateTime pulumi.StringPtrInput
	// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
	Degraded pulumi.BoolPtrInput
	// Human-readable name for this resource.
	DisplayName pulumi.StringPtrInput
	// Encrypts resources of this workstation configuration using a customer-managed encryption key.
	// If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
	// If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
	// If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
	// Structure is documented below.
	EncryptionKey WorkstationConfigEncryptionKeyPtrInput
	// Checksum computed by the server.
	// May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Runtime host for a workstation.
	// Structure is documented below.
	Host WorkstationConfigHostPtrInput
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels pulumi.StringMapInput
	// The location where the workstation cluster config should reside.
	//
	// ***
	Location pulumi.StringPtrInput
	// Full name of this resource.
	Name pulumi.StringPtrInput
	// Directories to persist across workstation sessions.
	// Structure is documented below.
	PersistentDirectories WorkstationConfigPersistentDirectoryArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The system-generated UID of the resource.
	Uid pulumi.StringPtrInput
	// The ID of the parent workstation cluster.
	WorkstationClusterId pulumi.StringPtrInput
	// The ID to be assigned to the workstation cluster config.
	WorkstationConfigId pulumi.StringPtrInput
}

func (WorkstationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationConfigState)(nil)).Elem()
}

type workstationConfigArgs struct {
	// Client-specified annotations. This is distinct from labels.
	Annotations map[string]string `pulumi:"annotations"`
	// Container that will be run for each workstation using this configuration when that workstation is started.
	// Structure is documented below.
	Container *WorkstationConfigContainer `pulumi:"container"`
	// Human-readable name for this resource.
	DisplayName *string `pulumi:"displayName"`
	// Encrypts resources of this workstation configuration using a customer-managed encryption key.
	// If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
	// If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
	// If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
	// Structure is documented below.
	EncryptionKey *WorkstationConfigEncryptionKey `pulumi:"encryptionKey"`
	// Runtime host for a workstation.
	// Structure is documented below.
	Host *WorkstationConfigHost `pulumi:"host"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels map[string]string `pulumi:"labels"`
	// The location where the workstation cluster config should reside.
	//
	// ***
	Location string `pulumi:"location"`
	// Directories to persist across workstation sessions.
	// Structure is documented below.
	PersistentDirectories []WorkstationConfigPersistentDirectory `pulumi:"persistentDirectories"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID of the parent workstation cluster.
	WorkstationClusterId string `pulumi:"workstationClusterId"`
	// The ID to be assigned to the workstation cluster config.
	WorkstationConfigId string `pulumi:"workstationConfigId"`
}

// The set of arguments for constructing a WorkstationConfig resource.
type WorkstationConfigArgs struct {
	// Client-specified annotations. This is distinct from labels.
	Annotations pulumi.StringMapInput
	// Container that will be run for each workstation using this configuration when that workstation is started.
	// Structure is documented below.
	Container WorkstationConfigContainerPtrInput
	// Human-readable name for this resource.
	DisplayName pulumi.StringPtrInput
	// Encrypts resources of this workstation configuration using a customer-managed encryption key.
	// If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
	// If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
	// If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
	// Structure is documented below.
	EncryptionKey WorkstationConfigEncryptionKeyPtrInput
	// Runtime host for a workstation.
	// Structure is documented below.
	Host WorkstationConfigHostPtrInput
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels pulumi.StringMapInput
	// The location where the workstation cluster config should reside.
	//
	// ***
	Location pulumi.StringInput
	// Directories to persist across workstation sessions.
	// Structure is documented below.
	PersistentDirectories WorkstationConfigPersistentDirectoryArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID of the parent workstation cluster.
	WorkstationClusterId pulumi.StringInput
	// The ID to be assigned to the workstation cluster config.
	WorkstationConfigId pulumi.StringInput
}

func (WorkstationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationConfigArgs)(nil)).Elem()
}

type WorkstationConfigInput interface {
	pulumi.Input

	ToWorkstationConfigOutput() WorkstationConfigOutput
	ToWorkstationConfigOutputWithContext(ctx context.Context) WorkstationConfigOutput
}

func (*WorkstationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationConfig)(nil)).Elem()
}

func (i *WorkstationConfig) ToWorkstationConfigOutput() WorkstationConfigOutput {
	return i.ToWorkstationConfigOutputWithContext(context.Background())
}

func (i *WorkstationConfig) ToWorkstationConfigOutputWithContext(ctx context.Context) WorkstationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigOutput)
}

// WorkstationConfigArrayInput is an input type that accepts WorkstationConfigArray and WorkstationConfigArrayOutput values.
// You can construct a concrete instance of `WorkstationConfigArrayInput` via:
//
//	WorkstationConfigArray{ WorkstationConfigArgs{...} }
type WorkstationConfigArrayInput interface {
	pulumi.Input

	ToWorkstationConfigArrayOutput() WorkstationConfigArrayOutput
	ToWorkstationConfigArrayOutputWithContext(context.Context) WorkstationConfigArrayOutput
}

type WorkstationConfigArray []WorkstationConfigInput

func (WorkstationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationConfig)(nil)).Elem()
}

func (i WorkstationConfigArray) ToWorkstationConfigArrayOutput() WorkstationConfigArrayOutput {
	return i.ToWorkstationConfigArrayOutputWithContext(context.Background())
}

func (i WorkstationConfigArray) ToWorkstationConfigArrayOutputWithContext(ctx context.Context) WorkstationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigArrayOutput)
}

// WorkstationConfigMapInput is an input type that accepts WorkstationConfigMap and WorkstationConfigMapOutput values.
// You can construct a concrete instance of `WorkstationConfigMapInput` via:
//
//	WorkstationConfigMap{ "key": WorkstationConfigArgs{...} }
type WorkstationConfigMapInput interface {
	pulumi.Input

	ToWorkstationConfigMapOutput() WorkstationConfigMapOutput
	ToWorkstationConfigMapOutputWithContext(context.Context) WorkstationConfigMapOutput
}

type WorkstationConfigMap map[string]WorkstationConfigInput

func (WorkstationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationConfig)(nil)).Elem()
}

func (i WorkstationConfigMap) ToWorkstationConfigMapOutput() WorkstationConfigMapOutput {
	return i.ToWorkstationConfigMapOutputWithContext(context.Background())
}

func (i WorkstationConfigMap) ToWorkstationConfigMapOutputWithContext(ctx context.Context) WorkstationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigMapOutput)
}

type WorkstationConfigOutput struct{ *pulumi.OutputState }

func (WorkstationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationConfig)(nil)).Elem()
}

func (o WorkstationConfigOutput) ToWorkstationConfigOutput() WorkstationConfigOutput {
	return o
}

func (o WorkstationConfigOutput) ToWorkstationConfigOutputWithContext(ctx context.Context) WorkstationConfigOutput {
	return o
}

// Client-specified annotations. This is distinct from labels.
func (o WorkstationConfigOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Status conditions describing the current resource state.
// Structure is documented below.
func (o WorkstationConfigOutput) Conditions() WorkstationConfigConditionArrayOutput {
	return o.ApplyT(func(v *WorkstationConfig) WorkstationConfigConditionArrayOutput { return v.Conditions }).(WorkstationConfigConditionArrayOutput)
}

// Container that will be run for each workstation using this configuration when that workstation is started.
// Structure is documented below.
func (o WorkstationConfigOutput) Container() WorkstationConfigContainerOutput {
	return o.ApplyT(func(v *WorkstationConfig) WorkstationConfigContainerOutput { return v.Container }).(WorkstationConfigContainerOutput)
}

// Time when this resource was created.
func (o WorkstationConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
func (o WorkstationConfigOutput) Degraded() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.BoolOutput { return v.Degraded }).(pulumi.BoolOutput)
}

// Human-readable name for this resource.
func (o WorkstationConfigOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Encrypts resources of this workstation configuration using a customer-managed encryption key.
// If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
// If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
// If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
// Structure is documented below.
func (o WorkstationConfigOutput) EncryptionKey() WorkstationConfigEncryptionKeyPtrOutput {
	return o.ApplyT(func(v *WorkstationConfig) WorkstationConfigEncryptionKeyPtrOutput { return v.EncryptionKey }).(WorkstationConfigEncryptionKeyPtrOutput)
}

// Checksum computed by the server.
// May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
func (o WorkstationConfigOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Runtime host for a workstation.
// Structure is documented below.
func (o WorkstationConfigOutput) Host() WorkstationConfigHostOutput {
	return o.ApplyT(func(v *WorkstationConfig) WorkstationConfigHostOutput { return v.Host }).(WorkstationConfigHostOutput)
}

// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
func (o WorkstationConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the workstation cluster config should reside.
//
// ***
func (o WorkstationConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Full name of this resource.
func (o WorkstationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Directories to persist across workstation sessions.
// Structure is documented below.
func (o WorkstationConfigOutput) PersistentDirectories() WorkstationConfigPersistentDirectoryArrayOutput {
	return o.ApplyT(func(v *WorkstationConfig) WorkstationConfigPersistentDirectoryArrayOutput {
		return v.PersistentDirectories
	}).(WorkstationConfigPersistentDirectoryArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o WorkstationConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The system-generated UID of the resource.
func (o WorkstationConfigOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The ID of the parent workstation cluster.
func (o WorkstationConfigOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

// The ID to be assigned to the workstation cluster config.
func (o WorkstationConfigOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

type WorkstationConfigArrayOutput struct{ *pulumi.OutputState }

func (WorkstationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationConfig)(nil)).Elem()
}

func (o WorkstationConfigArrayOutput) ToWorkstationConfigArrayOutput() WorkstationConfigArrayOutput {
	return o
}

func (o WorkstationConfigArrayOutput) ToWorkstationConfigArrayOutputWithContext(ctx context.Context) WorkstationConfigArrayOutput {
	return o
}

func (o WorkstationConfigArrayOutput) Index(i pulumi.IntInput) WorkstationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkstationConfig {
		return vs[0].([]*WorkstationConfig)[vs[1].(int)]
	}).(WorkstationConfigOutput)
}

type WorkstationConfigMapOutput struct{ *pulumi.OutputState }

func (WorkstationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationConfig)(nil)).Elem()
}

func (o WorkstationConfigMapOutput) ToWorkstationConfigMapOutput() WorkstationConfigMapOutput {
	return o
}

func (o WorkstationConfigMapOutput) ToWorkstationConfigMapOutputWithContext(ctx context.Context) WorkstationConfigMapOutput {
	return o
}

func (o WorkstationConfigMapOutput) MapIndex(k pulumi.StringInput) WorkstationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkstationConfig {
		return vs[0].(map[string]*WorkstationConfig)[vs[1].(string)]
	}).(WorkstationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigInput)(nil)).Elem(), &WorkstationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigArrayInput)(nil)).Elem(), WorkstationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigMapInput)(nil)).Elem(), WorkstationConfigMap{})
	pulumi.RegisterOutputType(WorkstationConfigOutput{})
	pulumi.RegisterOutputType(WorkstationConfigArrayOutput{})
	pulumi.RegisterOutputType(WorkstationConfigMapOutput{})
}
