// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package edgenetwork

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A Distributed Cloud Edge subnet, which provides L2 isolation within a network.
//
// To get more information about Subnet, see:
//
// * [API documentation](https://cloud.google.com/distributed-cloud/edge/latest/docs/reference/network/rest/v1/projects.locations.zones.subnets)
// * How-to Guides
//   - [Create and manage subnetworks](https://cloud.google.com/distributed-cloud/edge/latest/docs/subnetworks#api)
//
// ## Example Usage
// ### Edgenetwork Subnet
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/edgenetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleNetwork, err := edgenetwork.NewNetwork(ctx, "exampleNetwork", &edgenetwork.NetworkArgs{
//				NetworkId:   pulumi.String("example-network"),
//				Location:    pulumi.String("us-west1"),
//				Zone:        pulumi.String(""),
//				Description: pulumi.String("Example network."),
//				Mtu:         pulumi.Int(9000),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edgenetwork.NewSubnet(ctx, "exampleSubnet", &edgenetwork.SubnetArgs{
//				SubnetId:    pulumi.String("example-subnet"),
//				Location:    pulumi.String("us-west1"),
//				Zone:        pulumi.String(""),
//				Description: pulumi.String("Example subnet."),
//				Network:     exampleNetwork.ID(),
//				Ipv4Cidrs: pulumi.StringArray{
//					pulumi.String("4.4.4.1/24"),
//				},
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("dev"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Edgenetwork Subnet With Vlan Id
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/edgenetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleNetwork, err := edgenetwork.NewNetwork(ctx, "exampleNetwork", &edgenetwork.NetworkArgs{
//				NetworkId:   pulumi.String("example-network"),
//				Location:    pulumi.String("us-west1"),
//				Zone:        pulumi.String(""),
//				Description: pulumi.String("Example network."),
//				Mtu:         pulumi.Int(9000),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edgenetwork.NewSubnet(ctx, "exampleSubnetWithVlanId", &edgenetwork.SubnetArgs{
//				SubnetId:    pulumi.String("example-subnet-with-vlan-id"),
//				Location:    pulumi.String("us-west1"),
//				Zone:        pulumi.String(""),
//				Description: pulumi.String("Example subnet with VLAN ID."),
//				Network:     exampleNetwork.ID(),
//				Ipv6Cidrs: pulumi.StringArray{
//					pulumi.String("4444:4444:4444:4444::1/64"),
//				},
//				VlanId: pulumi.Int(44),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("dev"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Subnet can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:edgenetwork/subnet:Subnet default projects/{{project}}/locations/{{location}}/zones/{{zone}}/subnets/{{subnet_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:edgenetwork/subnet:Subnet default {{project}}/{{location}}/{{zone}}/{{subnet_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:edgenetwork/subnet:Subnet default {{location}}/{{zone}}/{{subnet_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:edgenetwork/subnet:Subnet default {{location}}/{{subnet_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:edgenetwork/subnet:Subnet default {{name}}
//
// ```
type Subnet struct {
	pulumi.CustomResourceState

	// The time when the subnet was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: `2014-10-02T15:01:23Z` and `2014-10-02T15:01:23.045123456Z`.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
	Ipv4Cidrs pulumi.StringArrayOutput `pulumi:"ipv4Cidrs"`
	// The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
	Ipv6Cidrs pulumi.StringArrayOutput `pulumi:"ipv6Cidrs"`
	// Labels associated with this resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
	Location pulumi.StringOutput `pulumi:"location"`
	// The canonical name of this resource, with format
	// `projects/{{project}}/locations/{{location}}/zones/{{zone}}/subnets/{{subnet_id}}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the network to which this router belongs.
	// Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Current stage of the resource to the device by config push.
	State pulumi.StringOutput `pulumi:"state"`
	// A unique ID that identifies this subnet.
	//
	// ***
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The time when the subnet was last updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: `2014-10-02T15:01:23Z` and `2014-10-02T15:01:23.045123456Z`.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// VLAN ID for this subnetwork. If not specified, one is assigned automatically.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
	// The name of the target Distributed Cloud Edge zone.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("gcp:edgenetwork/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("gcp:edgenetwork/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// The time when the subnet was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: `2014-10-02T15:01:23Z` and `2014-10-02T15:01:23.045123456Z`.
	CreateTime *string `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
	Ipv4Cidrs []string `pulumi:"ipv4Cidrs"`
	// The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
	Ipv6Cidrs []string `pulumi:"ipv6Cidrs"`
	// Labels associated with this resource.
	Labels map[string]string `pulumi:"labels"`
	// The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
	Location *string `pulumi:"location"`
	// The canonical name of this resource, with format
	// `projects/{{project}}/locations/{{location}}/zones/{{zone}}/subnets/{{subnet_id}}`
	Name *string `pulumi:"name"`
	// The ID of the network to which this router belongs.
	// Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Current stage of the resource to the device by config push.
	State *string `pulumi:"state"`
	// A unique ID that identifies this subnet.
	//
	// ***
	SubnetId *string `pulumi:"subnetId"`
	// The time when the subnet was last updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: `2014-10-02T15:01:23Z` and `2014-10-02T15:01:23.045123456Z`.
	UpdateTime *string `pulumi:"updateTime"`
	// VLAN ID for this subnetwork. If not specified, one is assigned automatically.
	VlanId *int `pulumi:"vlanId"`
	// The name of the target Distributed Cloud Edge zone.
	Zone *string `pulumi:"zone"`
}

type SubnetState struct {
	// The time when the subnet was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: `2014-10-02T15:01:23Z` and `2014-10-02T15:01:23.045123456Z`.
	CreateTime pulumi.StringPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
	Ipv4Cidrs pulumi.StringArrayInput
	// The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
	Ipv6Cidrs pulumi.StringArrayInput
	// Labels associated with this resource.
	Labels pulumi.StringMapInput
	// The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
	Location pulumi.StringPtrInput
	// The canonical name of this resource, with format
	// `projects/{{project}}/locations/{{location}}/zones/{{zone}}/subnets/{{subnet_id}}`
	Name pulumi.StringPtrInput
	// The ID of the network to which this router belongs.
	// Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Current stage of the resource to the device by config push.
	State pulumi.StringPtrInput
	// A unique ID that identifies this subnet.
	//
	// ***
	SubnetId pulumi.StringPtrInput
	// The time when the subnet was last updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: `2014-10-02T15:01:23Z` and `2014-10-02T15:01:23.045123456Z`.
	UpdateTime pulumi.StringPtrInput
	// VLAN ID for this subnetwork. If not specified, one is assigned automatically.
	VlanId pulumi.IntPtrInput
	// The name of the target Distributed Cloud Edge zone.
	Zone pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
	Ipv4Cidrs []string `pulumi:"ipv4Cidrs"`
	// The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
	Ipv6Cidrs []string `pulumi:"ipv6Cidrs"`
	// Labels associated with this resource.
	Labels map[string]string `pulumi:"labels"`
	// The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
	Location string `pulumi:"location"`
	// The ID of the network to which this router belongs.
	// Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
	Network string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A unique ID that identifies this subnet.
	//
	// ***
	SubnetId string `pulumi:"subnetId"`
	// VLAN ID for this subnetwork. If not specified, one is assigned automatically.
	VlanId *int `pulumi:"vlanId"`
	// The name of the target Distributed Cloud Edge zone.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
	Ipv4Cidrs pulumi.StringArrayInput
	// The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
	Ipv6Cidrs pulumi.StringArrayInput
	// Labels associated with this resource.
	Labels pulumi.StringMapInput
	// The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
	Location pulumi.StringInput
	// The ID of the network to which this router belongs.
	// Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
	Network pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A unique ID that identifies this subnet.
	//
	// ***
	SubnetId pulumi.StringInput
	// VLAN ID for this subnetwork. If not specified, one is assigned automatically.
	VlanId pulumi.IntPtrInput
	// The name of the target Distributed Cloud Edge zone.
	Zone pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

func (i *Subnet) ToOutput(ctx context.Context) pulumix.Output[*Subnet] {
	return pulumix.Output[*Subnet]{
		OutputState: i.ToSubnetOutputWithContext(ctx).OutputState,
	}
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

func (i SubnetArray) ToOutput(ctx context.Context) pulumix.Output[[]*Subnet] {
	return pulumix.Output[[]*Subnet]{
		OutputState: i.ToSubnetArrayOutputWithContext(ctx).OutputState,
	}
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

func (i SubnetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Subnet] {
	return pulumix.Output[map[string]*Subnet]{
		OutputState: i.ToSubnetMapOutputWithContext(ctx).OutputState,
	}
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

func (o SubnetOutput) ToOutput(ctx context.Context) pulumix.Output[*Subnet] {
	return pulumix.Output[*Subnet]{
		OutputState: o.OutputState,
	}
}

// The time when the subnet was created.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: `2014-10-02T15:01:23Z` and `2014-10-02T15:01:23.045123456Z`.
func (o SubnetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A free-text description of the resource. Max length 1024 characters.
func (o SubnetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
func (o SubnetOutput) Ipv4Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.Ipv4Cidrs }).(pulumi.StringArrayOutput)
}

// The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
func (o SubnetOutput) Ipv6Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.Ipv6Cidrs }).(pulumi.StringArrayOutput)
}

// Labels associated with this resource.
func (o SubnetOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
func (o SubnetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The canonical name of this resource, with format
// `projects/{{project}}/locations/{{location}}/zones/{{zone}}/subnets/{{subnet_id}}`
func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the network to which this router belongs.
// Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
func (o SubnetOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o SubnetOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Current stage of the resource to the device by config push.
func (o SubnetOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A unique ID that identifies this subnet.
//
// ***
func (o SubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The time when the subnet was last updated.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: `2014-10-02T15:01:23Z` and `2014-10-02T15:01:23.045123456Z`.
func (o SubnetOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// VLAN ID for this subnetwork. If not specified, one is assigned automatically.
func (o SubnetOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

// The name of the target Distributed Cloud Edge zone.
func (o SubnetOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Subnet] {
	return pulumix.Output[[]*Subnet]{
		OutputState: o.OutputState,
	}
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Subnet] {
	return pulumix.Output[map[string]*Subnet]{
		OutputState: o.OutputState,
	}
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
