// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkebackup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a Restore Plan instance.
//
// To get more information about RestorePlan, see:
//
// * [API documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/projects.locations.restorePlans)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke)
//
// ## Example Usage
// ### Gkebackup Restoreplan All Namespaces
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := container.NewCluster(ctx, "primary", &container.ClusterArgs{
//				Location:         pulumi.String("us-central1"),
//				InitialNodeCount: pulumi.Int(1),
//				WorkloadIdentityConfig: &container.ClusterWorkloadIdentityConfigArgs{
//					WorkloadPool: pulumi.String("my-project-name.svc.id.goog"),
//				},
//				AddonsConfig: &container.ClusterAddonsConfigArgs{
//					GkeBackupAgentConfig: &container.ClusterAddonsConfigGkeBackupAgentConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basic, err := gkebackup.NewBackupPlan(ctx, "basic", &gkebackup.BackupPlanArgs{
//				Cluster:  primary.ID(),
//				Location: pulumi.String("us-central1"),
//				BackupConfig: &gkebackup.BackupPlanBackupConfigArgs{
//					IncludeVolumeData: pulumi.Bool(true),
//					IncludeSecrets:    pulumi.Bool(true),
//					AllNamespaces:     pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkebackup.NewRestorePlan(ctx, "allNs", &gkebackup.RestorePlanArgs{
//				Location:   pulumi.String("us-central1"),
//				BackupPlan: basic.ID(),
//				Cluster:    primary.ID(),
//				RestoreConfig: &gkebackup.RestorePlanRestoreConfigArgs{
//					AllNamespaces:                 pulumi.Bool(true),
//					NamespacedResourceRestoreMode: pulumi.String("FAIL_ON_CONFLICT"),
//					VolumeDataRestorePolicy:       pulumi.String("RESTORE_VOLUME_DATA_FROM_BACKUP"),
//					ClusterResourceRestoreScope: &gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs{
//						AllGroupKinds: pulumi.Bool(true),
//					},
//					ClusterResourceConflictPolicy: pulumi.String("USE_EXISTING_VERSION"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Gkebackup Restoreplan Rollback Namespace
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := container.NewCluster(ctx, "primary", &container.ClusterArgs{
//				Location:         pulumi.String("us-central1"),
//				InitialNodeCount: pulumi.Int(1),
//				WorkloadIdentityConfig: &container.ClusterWorkloadIdentityConfigArgs{
//					WorkloadPool: pulumi.String("my-project-name.svc.id.goog"),
//				},
//				AddonsConfig: &container.ClusterAddonsConfigArgs{
//					GkeBackupAgentConfig: &container.ClusterAddonsConfigGkeBackupAgentConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basic, err := gkebackup.NewBackupPlan(ctx, "basic", &gkebackup.BackupPlanArgs{
//				Cluster:  primary.ID(),
//				Location: pulumi.String("us-central1"),
//				BackupConfig: &gkebackup.BackupPlanBackupConfigArgs{
//					IncludeVolumeData: pulumi.Bool(true),
//					IncludeSecrets:    pulumi.Bool(true),
//					AllNamespaces:     pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkebackup.NewRestorePlan(ctx, "rollbackNs", &gkebackup.RestorePlanArgs{
//				Location:   pulumi.String("us-central1"),
//				BackupPlan: basic.ID(),
//				Cluster:    primary.ID(),
//				RestoreConfig: &gkebackup.RestorePlanRestoreConfigArgs{
//					SelectedNamespaces: &gkebackup.RestorePlanRestoreConfigSelectedNamespacesArgs{
//						Namespaces: pulumi.StringArray{
//							pulumi.String("my-ns"),
//						},
//					},
//					NamespacedResourceRestoreMode: pulumi.String("DELETE_AND_RESTORE"),
//					VolumeDataRestorePolicy:       pulumi.String("RESTORE_VOLUME_DATA_FROM_BACKUP"),
//					ClusterResourceRestoreScope: &gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs{
//						SelectedGroupKinds: gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArray{
//							&gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArgs{
//								ResourceGroup: pulumi.String("apiextension.k8s.io"),
//								ResourceKind:  pulumi.String("CustomResourceDefinition"),
//							},
//							&gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArgs{
//								ResourceGroup: pulumi.String("storage.k8s.io"),
//								ResourceKind:  pulumi.String("StorageClass"),
//							},
//						},
//					},
//					ClusterResourceConflictPolicy: pulumi.String("USE_EXISTING_VERSION"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Gkebackup Restoreplan Protected Application
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := container.NewCluster(ctx, "primary", &container.ClusterArgs{
//				Location:         pulumi.String("us-central1"),
//				InitialNodeCount: pulumi.Int(1),
//				WorkloadIdentityConfig: &container.ClusterWorkloadIdentityConfigArgs{
//					WorkloadPool: pulumi.String("my-project-name.svc.id.goog"),
//				},
//				AddonsConfig: &container.ClusterAddonsConfigArgs{
//					GkeBackupAgentConfig: &container.ClusterAddonsConfigGkeBackupAgentConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basic, err := gkebackup.NewBackupPlan(ctx, "basic", &gkebackup.BackupPlanArgs{
//				Cluster:  primary.ID(),
//				Location: pulumi.String("us-central1"),
//				BackupConfig: &gkebackup.BackupPlanBackupConfigArgs{
//					IncludeVolumeData: pulumi.Bool(true),
//					IncludeSecrets:    pulumi.Bool(true),
//					AllNamespaces:     pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkebackup.NewRestorePlan(ctx, "rollbackApp", &gkebackup.RestorePlanArgs{
//				Location:   pulumi.String("us-central1"),
//				BackupPlan: basic.ID(),
//				Cluster:    primary.ID(),
//				RestoreConfig: &gkebackup.RestorePlanRestoreConfigArgs{
//					SelectedApplications: &gkebackup.RestorePlanRestoreConfigSelectedApplicationsArgs{
//						NamespacedNames: gkebackup.RestorePlanRestoreConfigSelectedApplicationsNamespacedNameArray{
//							&gkebackup.RestorePlanRestoreConfigSelectedApplicationsNamespacedNameArgs{
//								Name:      pulumi.String("my-app"),
//								Namespace: pulumi.String("my-ns"),
//							},
//						},
//					},
//					NamespacedResourceRestoreMode: pulumi.String("DELETE_AND_RESTORE"),
//					VolumeDataRestorePolicy:       pulumi.String("REUSE_VOLUME_HANDLE_FROM_BACKUP"),
//					ClusterResourceRestoreScope: &gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs{
//						NoGroupKinds: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Gkebackup Restoreplan All Cluster Resources
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := container.NewCluster(ctx, "primary", &container.ClusterArgs{
//				Location:         pulumi.String("us-central1"),
//				InitialNodeCount: pulumi.Int(1),
//				WorkloadIdentityConfig: &container.ClusterWorkloadIdentityConfigArgs{
//					WorkloadPool: pulumi.String("my-project-name.svc.id.goog"),
//				},
//				AddonsConfig: &container.ClusterAddonsConfigArgs{
//					GkeBackupAgentConfig: &container.ClusterAddonsConfigGkeBackupAgentConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basic, err := gkebackup.NewBackupPlan(ctx, "basic", &gkebackup.BackupPlanArgs{
//				Cluster:  primary.ID(),
//				Location: pulumi.String("us-central1"),
//				BackupConfig: &gkebackup.BackupPlanBackupConfigArgs{
//					IncludeVolumeData: pulumi.Bool(true),
//					IncludeSecrets:    pulumi.Bool(true),
//					AllNamespaces:     pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkebackup.NewRestorePlan(ctx, "allClusterResources", &gkebackup.RestorePlanArgs{
//				Location:   pulumi.String("us-central1"),
//				BackupPlan: basic.ID(),
//				Cluster:    primary.ID(),
//				RestoreConfig: &gkebackup.RestorePlanRestoreConfigArgs{
//					NoNamespaces:                  pulumi.Bool(true),
//					NamespacedResourceRestoreMode: pulumi.String("FAIL_ON_CONFLICT"),
//					ClusterResourceRestoreScope: &gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs{
//						AllGroupKinds: pulumi.Bool(true),
//					},
//					ClusterResourceConflictPolicy: pulumi.String("USE_EXISTING_VERSION"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Gkebackup Restoreplan Rename Namespace
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := container.NewCluster(ctx, "primary", &container.ClusterArgs{
//				Location:         pulumi.String("us-central1"),
//				InitialNodeCount: pulumi.Int(1),
//				WorkloadIdentityConfig: &container.ClusterWorkloadIdentityConfigArgs{
//					WorkloadPool: pulumi.String("my-project-name.svc.id.goog"),
//				},
//				AddonsConfig: &container.ClusterAddonsConfigArgs{
//					GkeBackupAgentConfig: &container.ClusterAddonsConfigGkeBackupAgentConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basic, err := gkebackup.NewBackupPlan(ctx, "basic", &gkebackup.BackupPlanArgs{
//				Cluster:  primary.ID(),
//				Location: pulumi.String("us-central1"),
//				BackupConfig: &gkebackup.BackupPlanBackupConfigArgs{
//					IncludeVolumeData: pulumi.Bool(true),
//					IncludeSecrets:    pulumi.Bool(true),
//					AllNamespaces:     pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkebackup.NewRestorePlan(ctx, "renameNs", &gkebackup.RestorePlanArgs{
//				Location:   pulumi.String("us-central1"),
//				BackupPlan: basic.ID(),
//				Cluster:    primary.ID(),
//				RestoreConfig: &gkebackup.RestorePlanRestoreConfigArgs{
//					SelectedNamespaces: &gkebackup.RestorePlanRestoreConfigSelectedNamespacesArgs{
//						Namespaces: pulumi.StringArray{
//							pulumi.String("ns1"),
//						},
//					},
//					NamespacedResourceRestoreMode: pulumi.String("FAIL_ON_CONFLICT"),
//					VolumeDataRestorePolicy:       pulumi.String("REUSE_VOLUME_HANDLE_FROM_BACKUP"),
//					ClusterResourceRestoreScope: &gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs{
//						NoGroupKinds: pulumi.Bool(true),
//					},
//					TransformationRules: gkebackup.RestorePlanRestoreConfigTransformationRuleArray{
//						&gkebackup.RestorePlanRestoreConfigTransformationRuleArgs{
//							Description: pulumi.String("rename namespace from ns1 to ns2"),
//							ResourceFilter: &gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs{
//								GroupKinds: gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArray{
//									&gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs{
//										ResourceKind: pulumi.String("Namespace"),
//									},
//								},
//								JsonPath: pulumi.String(".metadata[?(@.name == 'ns1')]"),
//							},
//							FieldActions: gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArray{
//								&gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs{
//									Op:    pulumi.String("REPLACE"),
//									Path:  pulumi.String("/metadata/name"),
//									Value: pulumi.String("ns2"),
//								},
//							},
//						},
//						&gkebackup.RestorePlanRestoreConfigTransformationRuleArgs{
//							Description: pulumi.String("move all resources from ns1 to ns2"),
//							ResourceFilter: &gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs{
//								Namespaces: pulumi.StringArray{
//									pulumi.String("ns1"),
//								},
//							},
//							FieldActions: gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArray{
//								&gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs{
//									Op:    pulumi.String("REPLACE"),
//									Path:  pulumi.String("/metadata/namespace"),
//									Value: pulumi.String("ns2"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Gkebackup Restoreplan Second Transformation
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := container.NewCluster(ctx, "primary", &container.ClusterArgs{
//				Location:         pulumi.String("us-central1"),
//				InitialNodeCount: pulumi.Int(1),
//				WorkloadIdentityConfig: &container.ClusterWorkloadIdentityConfigArgs{
//					WorkloadPool: pulumi.String("my-project-name.svc.id.goog"),
//				},
//				AddonsConfig: &container.ClusterAddonsConfigArgs{
//					GkeBackupAgentConfig: &container.ClusterAddonsConfigGkeBackupAgentConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basic, err := gkebackup.NewBackupPlan(ctx, "basic", &gkebackup.BackupPlanArgs{
//				Cluster:  primary.ID(),
//				Location: pulumi.String("us-central1"),
//				BackupConfig: &gkebackup.BackupPlanBackupConfigArgs{
//					IncludeVolumeData: pulumi.Bool(true),
//					IncludeSecrets:    pulumi.Bool(true),
//					AllNamespaces:     pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkebackup.NewRestorePlan(ctx, "transformRule", &gkebackup.RestorePlanArgs{
//				Description: pulumi.String("copy nginx env variables"),
//				Labels: pulumi.StringMap{
//					"app": pulumi.String("nginx"),
//				},
//				Location:   pulumi.String("us-central1"),
//				BackupPlan: basic.ID(),
//				Cluster:    primary.ID(),
//				RestoreConfig: &gkebackup.RestorePlanRestoreConfigArgs{
//					ExcludedNamespaces: &gkebackup.RestorePlanRestoreConfigExcludedNamespacesArgs{
//						Namespaces: pulumi.StringArray{
//							pulumi.String("my-ns"),
//						},
//					},
//					NamespacedResourceRestoreMode: pulumi.String("DELETE_AND_RESTORE"),
//					VolumeDataRestorePolicy:       pulumi.String("RESTORE_VOLUME_DATA_FROM_BACKUP"),
//					ClusterResourceRestoreScope: &gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs{
//						ExcludedGroupKinds: gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindArray{
//							&gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindArgs{
//								ResourceGroup: pulumi.String("apiextension.k8s.io"),
//								ResourceKind:  pulumi.String("CustomResourceDefinition"),
//							},
//						},
//					},
//					ClusterResourceConflictPolicy: pulumi.String("USE_EXISTING_VERSION"),
//					TransformationRules: gkebackup.RestorePlanRestoreConfigTransformationRuleArray{
//						&gkebackup.RestorePlanRestoreConfigTransformationRuleArgs{
//							Description: pulumi.String("Copy environment variables from the nginx container to the install init container."),
//							ResourceFilter: &gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs{
//								GroupKinds: gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArray{
//									&gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs{
//										ResourceKind:  pulumi.String("Pod"),
//										ResourceGroup: pulumi.String(""),
//									},
//								},
//								JsonPath: pulumi.String(".metadata[?(@.name == 'nginx')]"),
//							},
//							FieldActions: gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArray{
//								&gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs{
//									Op:       pulumi.String("COPY"),
//									Path:     pulumi.String("/spec/initContainers/0/env"),
//									FromPath: pulumi.String("/spec/containers/0/env"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # RestorePlan can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default projects/{{project}}/locations/{{location}}/restorePlans/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default {{location}}/{{name}}
//
// ```
type RestorePlanIamMember struct {
	pulumi.CustomResourceState

	Condition RestorePlanIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput                    `pulumi:"etag"`
	// The region of the Restore Plan.
	Location pulumi.StringOutput `pulumi:"location"`
	Member   pulumi.StringOutput `pulumi:"member"`
	// The full name of the BackupPlan Resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	Role    pulumi.StringOutput `pulumi:"role"`
}

// NewRestorePlanIamMember registers a new resource with the given unique name, arguments, and options.
func NewRestorePlanIamMember(ctx *pulumi.Context,
	name string, args *RestorePlanIamMemberArgs, opts ...pulumi.ResourceOption) (*RestorePlanIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RestorePlanIamMember
	err := ctx.RegisterResource("gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestorePlanIamMember gets an existing RestorePlanIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestorePlanIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestorePlanIamMemberState, opts ...pulumi.ResourceOption) (*RestorePlanIamMember, error) {
	var resource RestorePlanIamMember
	err := ctx.ReadResource("gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestorePlanIamMember resources.
type restorePlanIamMemberState struct {
	Condition *RestorePlanIamMemberCondition `pulumi:"condition"`
	Etag      *string                        `pulumi:"etag"`
	// The region of the Restore Plan.
	Location *string `pulumi:"location"`
	Member   *string `pulumi:"member"`
	// The full name of the BackupPlan Resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	Role    *string `pulumi:"role"`
}

type RestorePlanIamMemberState struct {
	Condition RestorePlanIamMemberConditionPtrInput
	Etag      pulumi.StringPtrInput
	// The region of the Restore Plan.
	Location pulumi.StringPtrInput
	Member   pulumi.StringPtrInput
	// The full name of the BackupPlan Resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	Role    pulumi.StringPtrInput
}

func (RestorePlanIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*restorePlanIamMemberState)(nil)).Elem()
}

type restorePlanIamMemberArgs struct {
	Condition *RestorePlanIamMemberCondition `pulumi:"condition"`
	// The region of the Restore Plan.
	Location *string `pulumi:"location"`
	Member   string  `pulumi:"member"`
	// The full name of the BackupPlan Resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	Role    string  `pulumi:"role"`
}

// The set of arguments for constructing a RestorePlanIamMember resource.
type RestorePlanIamMemberArgs struct {
	Condition RestorePlanIamMemberConditionPtrInput
	// The region of the Restore Plan.
	Location pulumi.StringPtrInput
	Member   pulumi.StringInput
	// The full name of the BackupPlan Resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	Role    pulumi.StringInput
}

func (RestorePlanIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restorePlanIamMemberArgs)(nil)).Elem()
}

type RestorePlanIamMemberInput interface {
	pulumi.Input

	ToRestorePlanIamMemberOutput() RestorePlanIamMemberOutput
	ToRestorePlanIamMemberOutputWithContext(ctx context.Context) RestorePlanIamMemberOutput
}

func (*RestorePlanIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePlanIamMember)(nil)).Elem()
}

func (i *RestorePlanIamMember) ToRestorePlanIamMemberOutput() RestorePlanIamMemberOutput {
	return i.ToRestorePlanIamMemberOutputWithContext(context.Background())
}

func (i *RestorePlanIamMember) ToRestorePlanIamMemberOutputWithContext(ctx context.Context) RestorePlanIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePlanIamMemberOutput)
}

func (i *RestorePlanIamMember) ToOutput(ctx context.Context) pulumix.Output[*RestorePlanIamMember] {
	return pulumix.Output[*RestorePlanIamMember]{
		OutputState: i.ToRestorePlanIamMemberOutputWithContext(ctx).OutputState,
	}
}

// RestorePlanIamMemberArrayInput is an input type that accepts RestorePlanIamMemberArray and RestorePlanIamMemberArrayOutput values.
// You can construct a concrete instance of `RestorePlanIamMemberArrayInput` via:
//
//	RestorePlanIamMemberArray{ RestorePlanIamMemberArgs{...} }
type RestorePlanIamMemberArrayInput interface {
	pulumi.Input

	ToRestorePlanIamMemberArrayOutput() RestorePlanIamMemberArrayOutput
	ToRestorePlanIamMemberArrayOutputWithContext(context.Context) RestorePlanIamMemberArrayOutput
}

type RestorePlanIamMemberArray []RestorePlanIamMemberInput

func (RestorePlanIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestorePlanIamMember)(nil)).Elem()
}

func (i RestorePlanIamMemberArray) ToRestorePlanIamMemberArrayOutput() RestorePlanIamMemberArrayOutput {
	return i.ToRestorePlanIamMemberArrayOutputWithContext(context.Background())
}

func (i RestorePlanIamMemberArray) ToRestorePlanIamMemberArrayOutputWithContext(ctx context.Context) RestorePlanIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePlanIamMemberArrayOutput)
}

func (i RestorePlanIamMemberArray) ToOutput(ctx context.Context) pulumix.Output[[]*RestorePlanIamMember] {
	return pulumix.Output[[]*RestorePlanIamMember]{
		OutputState: i.ToRestorePlanIamMemberArrayOutputWithContext(ctx).OutputState,
	}
}

// RestorePlanIamMemberMapInput is an input type that accepts RestorePlanIamMemberMap and RestorePlanIamMemberMapOutput values.
// You can construct a concrete instance of `RestorePlanIamMemberMapInput` via:
//
//	RestorePlanIamMemberMap{ "key": RestorePlanIamMemberArgs{...} }
type RestorePlanIamMemberMapInput interface {
	pulumi.Input

	ToRestorePlanIamMemberMapOutput() RestorePlanIamMemberMapOutput
	ToRestorePlanIamMemberMapOutputWithContext(context.Context) RestorePlanIamMemberMapOutput
}

type RestorePlanIamMemberMap map[string]RestorePlanIamMemberInput

func (RestorePlanIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestorePlanIamMember)(nil)).Elem()
}

func (i RestorePlanIamMemberMap) ToRestorePlanIamMemberMapOutput() RestorePlanIamMemberMapOutput {
	return i.ToRestorePlanIamMemberMapOutputWithContext(context.Background())
}

func (i RestorePlanIamMemberMap) ToRestorePlanIamMemberMapOutputWithContext(ctx context.Context) RestorePlanIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePlanIamMemberMapOutput)
}

func (i RestorePlanIamMemberMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RestorePlanIamMember] {
	return pulumix.Output[map[string]*RestorePlanIamMember]{
		OutputState: i.ToRestorePlanIamMemberMapOutputWithContext(ctx).OutputState,
	}
}

type RestorePlanIamMemberOutput struct{ *pulumi.OutputState }

func (RestorePlanIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePlanIamMember)(nil)).Elem()
}

func (o RestorePlanIamMemberOutput) ToRestorePlanIamMemberOutput() RestorePlanIamMemberOutput {
	return o
}

func (o RestorePlanIamMemberOutput) ToRestorePlanIamMemberOutputWithContext(ctx context.Context) RestorePlanIamMemberOutput {
	return o
}

func (o RestorePlanIamMemberOutput) ToOutput(ctx context.Context) pulumix.Output[*RestorePlanIamMember] {
	return pulumix.Output[*RestorePlanIamMember]{
		OutputState: o.OutputState,
	}
}

func (o RestorePlanIamMemberOutput) Condition() RestorePlanIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *RestorePlanIamMember) RestorePlanIamMemberConditionPtrOutput { return v.Condition }).(RestorePlanIamMemberConditionPtrOutput)
}

func (o RestorePlanIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RestorePlanIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The region of the Restore Plan.
func (o RestorePlanIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RestorePlanIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o RestorePlanIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *RestorePlanIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The full name of the BackupPlan Resource.
func (o RestorePlanIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RestorePlanIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RestorePlanIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RestorePlanIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RestorePlanIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RestorePlanIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RestorePlanIamMemberArrayOutput struct{ *pulumi.OutputState }

func (RestorePlanIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestorePlanIamMember)(nil)).Elem()
}

func (o RestorePlanIamMemberArrayOutput) ToRestorePlanIamMemberArrayOutput() RestorePlanIamMemberArrayOutput {
	return o
}

func (o RestorePlanIamMemberArrayOutput) ToRestorePlanIamMemberArrayOutputWithContext(ctx context.Context) RestorePlanIamMemberArrayOutput {
	return o
}

func (o RestorePlanIamMemberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RestorePlanIamMember] {
	return pulumix.Output[[]*RestorePlanIamMember]{
		OutputState: o.OutputState,
	}
}

func (o RestorePlanIamMemberArrayOutput) Index(i pulumi.IntInput) RestorePlanIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestorePlanIamMember {
		return vs[0].([]*RestorePlanIamMember)[vs[1].(int)]
	}).(RestorePlanIamMemberOutput)
}

type RestorePlanIamMemberMapOutput struct{ *pulumi.OutputState }

func (RestorePlanIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestorePlanIamMember)(nil)).Elem()
}

func (o RestorePlanIamMemberMapOutput) ToRestorePlanIamMemberMapOutput() RestorePlanIamMemberMapOutput {
	return o
}

func (o RestorePlanIamMemberMapOutput) ToRestorePlanIamMemberMapOutputWithContext(ctx context.Context) RestorePlanIamMemberMapOutput {
	return o
}

func (o RestorePlanIamMemberMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RestorePlanIamMember] {
	return pulumix.Output[map[string]*RestorePlanIamMember]{
		OutputState: o.OutputState,
	}
}

func (o RestorePlanIamMemberMapOutput) MapIndex(k pulumi.StringInput) RestorePlanIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestorePlanIamMember {
		return vs[0].(map[string]*RestorePlanIamMember)[vs[1].(string)]
	}).(RestorePlanIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestorePlanIamMemberInput)(nil)).Elem(), &RestorePlanIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestorePlanIamMemberArrayInput)(nil)).Elem(), RestorePlanIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestorePlanIamMemberMapInput)(nil)).Elem(), RestorePlanIamMemberMap{})
	pulumi.RegisterOutputType(RestorePlanIamMemberOutput{})
	pulumi.RegisterOutputType(RestorePlanIamMemberArrayOutput{})
	pulumi.RegisterOutputType(RestorePlanIamMemberMapOutput{})
}
