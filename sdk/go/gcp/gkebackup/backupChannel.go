// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkebackup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A BackupChannel imposes constraints on where clusters can be backed up.
// The BackupChannel should be in the same project and region
// as the cluster being backed up.
// The backup can be created only in destination_project.
//
// To get more information about BackupChannel, see:
//
// * [API documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/projects.locations.backupChannels)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke)
//
// ## Example Usage
//
// ### Gkebackup Backupchannel Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkebackup.NewBackupChannel(ctx, "basic", &gkebackup.BackupChannelArgs{
//				Name:               pulumi.String("basic-channel"),
//				Location:           pulumi.String("us-central1"),
//				Description:        pulumi.String("Description"),
//				DestinationProject: pulumi.String("projects/24240755850"),
//				Labels: pulumi.StringMap{
//					"key": pulumi.String("some-value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BackupChannel can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backupChannels/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, BackupChannel can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default projects/{{project}}/locations/{{location}}/backupChannels/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default {{location}}/{{name}}
// ```
type BackupChannel struct {
	pulumi.CustomResourceState

	// User specified descriptive string for this BackupChannel.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The project where Backups are allowed to be stored.
	// The format is `projects/{project}`.
	// {project} can be project number or project id.
	DestinationProject pulumi.StringOutput `pulumi:"destinationProject"`
	// The projectId where Backups are allowed to be stored.
	// Example Project ID: "my-project-id".
	DestinationProjectId pulumi.StringOutput `pulumi:"destinationProjectId"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous
	// updates of a backup channel from overwriting each other. It is strongly suggested that
	// systems make use of the 'etag' in the read-modify-write cycle to perform BackupChannel updates
	// in order to avoid race conditions: An etag is returned in the response to backupChannels.get,
	// and systems are expected to put that etag in the request to backupChannels.patch or
	// backupChannels.delete to ensure that their change will be applied to the same version of the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Description: A set of custom labels supplied by the user.
	// A list of key->value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The region of the Backup Channel.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// The full name of the BackupChannel Resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Server generated, unique identifier of UUID format.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewBackupChannel registers a new resource with the given unique name, arguments, and options.
func NewBackupChannel(ctx *pulumi.Context,
	name string, args *BackupChannelArgs, opts ...pulumi.ResourceOption) (*BackupChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationProject == nil {
		return nil, errors.New("invalid value for required argument 'DestinationProject'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupChannel
	err := ctx.RegisterResource("gcp:gkebackup/backupChannel:BackupChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupChannel gets an existing BackupChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupChannelState, opts ...pulumi.ResourceOption) (*BackupChannel, error) {
	var resource BackupChannel
	err := ctx.ReadResource("gcp:gkebackup/backupChannel:BackupChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupChannel resources.
type backupChannelState struct {
	// User specified descriptive string for this BackupChannel.
	Description *string `pulumi:"description"`
	// The project where Backups are allowed to be stored.
	// The format is `projects/{project}`.
	// {project} can be project number or project id.
	DestinationProject *string `pulumi:"destinationProject"`
	// The projectId where Backups are allowed to be stored.
	// Example Project ID: "my-project-id".
	DestinationProjectId *string `pulumi:"destinationProjectId"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous
	// updates of a backup channel from overwriting each other. It is strongly suggested that
	// systems make use of the 'etag' in the read-modify-write cycle to perform BackupChannel updates
	// in order to avoid race conditions: An etag is returned in the response to backupChannels.get,
	// and systems are expected to put that etag in the request to backupChannels.patch or
	// backupChannels.delete to ensure that their change will be applied to the same version of the resource.
	Etag *string `pulumi:"etag"`
	// Description: A set of custom labels supplied by the user.
	// A list of key->value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The region of the Backup Channel.
	//
	// ***
	Location *string `pulumi:"location"`
	// The full name of the BackupChannel Resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Server generated, unique identifier of UUID format.
	Uid *string `pulumi:"uid"`
}

type BackupChannelState struct {
	// User specified descriptive string for this BackupChannel.
	Description pulumi.StringPtrInput
	// The project where Backups are allowed to be stored.
	// The format is `projects/{project}`.
	// {project} can be project number or project id.
	DestinationProject pulumi.StringPtrInput
	// The projectId where Backups are allowed to be stored.
	// Example Project ID: "my-project-id".
	DestinationProjectId pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous
	// updates of a backup channel from overwriting each other. It is strongly suggested that
	// systems make use of the 'etag' in the read-modify-write cycle to perform BackupChannel updates
	// in order to avoid race conditions: An etag is returned in the response to backupChannels.get,
	// and systems are expected to put that etag in the request to backupChannels.patch or
	// backupChannels.delete to ensure that their change will be applied to the same version of the resource.
	Etag pulumi.StringPtrInput
	// Description: A set of custom labels supplied by the user.
	// A list of key->value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The region of the Backup Channel.
	//
	// ***
	Location pulumi.StringPtrInput
	// The full name of the BackupChannel Resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Server generated, unique identifier of UUID format.
	Uid pulumi.StringPtrInput
}

func (BackupChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupChannelState)(nil)).Elem()
}

type backupChannelArgs struct {
	// User specified descriptive string for this BackupChannel.
	Description *string `pulumi:"description"`
	// The project where Backups are allowed to be stored.
	// The format is `projects/{project}`.
	// {project} can be project number or project id.
	DestinationProject string `pulumi:"destinationProject"`
	// Description: A set of custom labels supplied by the user.
	// A list of key->value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The region of the Backup Channel.
	//
	// ***
	Location string `pulumi:"location"`
	// The full name of the BackupChannel Resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a BackupChannel resource.
type BackupChannelArgs struct {
	// User specified descriptive string for this BackupChannel.
	Description pulumi.StringPtrInput
	// The project where Backups are allowed to be stored.
	// The format is `projects/{project}`.
	// {project} can be project number or project id.
	DestinationProject pulumi.StringInput
	// Description: A set of custom labels supplied by the user.
	// A list of key->value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The region of the Backup Channel.
	//
	// ***
	Location pulumi.StringInput
	// The full name of the BackupChannel Resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (BackupChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupChannelArgs)(nil)).Elem()
}

type BackupChannelInput interface {
	pulumi.Input

	ToBackupChannelOutput() BackupChannelOutput
	ToBackupChannelOutputWithContext(ctx context.Context) BackupChannelOutput
}

func (*BackupChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupChannel)(nil)).Elem()
}

func (i *BackupChannel) ToBackupChannelOutput() BackupChannelOutput {
	return i.ToBackupChannelOutputWithContext(context.Background())
}

func (i *BackupChannel) ToBackupChannelOutputWithContext(ctx context.Context) BackupChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupChannelOutput)
}

// BackupChannelArrayInput is an input type that accepts BackupChannelArray and BackupChannelArrayOutput values.
// You can construct a concrete instance of `BackupChannelArrayInput` via:
//
//	BackupChannelArray{ BackupChannelArgs{...} }
type BackupChannelArrayInput interface {
	pulumi.Input

	ToBackupChannelArrayOutput() BackupChannelArrayOutput
	ToBackupChannelArrayOutputWithContext(context.Context) BackupChannelArrayOutput
}

type BackupChannelArray []BackupChannelInput

func (BackupChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupChannel)(nil)).Elem()
}

func (i BackupChannelArray) ToBackupChannelArrayOutput() BackupChannelArrayOutput {
	return i.ToBackupChannelArrayOutputWithContext(context.Background())
}

func (i BackupChannelArray) ToBackupChannelArrayOutputWithContext(ctx context.Context) BackupChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupChannelArrayOutput)
}

// BackupChannelMapInput is an input type that accepts BackupChannelMap and BackupChannelMapOutput values.
// You can construct a concrete instance of `BackupChannelMapInput` via:
//
//	BackupChannelMap{ "key": BackupChannelArgs{...} }
type BackupChannelMapInput interface {
	pulumi.Input

	ToBackupChannelMapOutput() BackupChannelMapOutput
	ToBackupChannelMapOutputWithContext(context.Context) BackupChannelMapOutput
}

type BackupChannelMap map[string]BackupChannelInput

func (BackupChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupChannel)(nil)).Elem()
}

func (i BackupChannelMap) ToBackupChannelMapOutput() BackupChannelMapOutput {
	return i.ToBackupChannelMapOutputWithContext(context.Background())
}

func (i BackupChannelMap) ToBackupChannelMapOutputWithContext(ctx context.Context) BackupChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupChannelMapOutput)
}

type BackupChannelOutput struct{ *pulumi.OutputState }

func (BackupChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupChannel)(nil)).Elem()
}

func (o BackupChannelOutput) ToBackupChannelOutput() BackupChannelOutput {
	return o
}

func (o BackupChannelOutput) ToBackupChannelOutputWithContext(ctx context.Context) BackupChannelOutput {
	return o
}

// User specified descriptive string for this BackupChannel.
func (o BackupChannelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The project where Backups are allowed to be stored.
// The format is `projects/{project}`.
// {project} can be project number or project id.
func (o BackupChannelOutput) DestinationProject() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringOutput { return v.DestinationProject }).(pulumi.StringOutput)
}

// The projectId where Backups are allowed to be stored.
// Example Project ID: "my-project-id".
func (o BackupChannelOutput) DestinationProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringOutput { return v.DestinationProjectId }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o BackupChannelOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// etag is used for optimistic concurrency control as a way to help prevent simultaneous
// updates of a backup channel from overwriting each other. It is strongly suggested that
// systems make use of the 'etag' in the read-modify-write cycle to perform BackupChannel updates
// in order to avoid race conditions: An etag is returned in the response to backupChannels.get,
// and systems are expected to put that etag in the request to backupChannels.patch or
// backupChannels.delete to ensure that their change will be applied to the same version of the resource.
func (o BackupChannelOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Description: A set of custom labels supplied by the user.
// A list of key->value pairs.
// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o BackupChannelOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The region of the Backup Channel.
//
// ***
func (o BackupChannelOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The full name of the BackupChannel Resource.
func (o BackupChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BackupChannelOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o BackupChannelOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Server generated, unique identifier of UUID format.
func (o BackupChannelOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupChannel) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type BackupChannelArrayOutput struct{ *pulumi.OutputState }

func (BackupChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupChannel)(nil)).Elem()
}

func (o BackupChannelArrayOutput) ToBackupChannelArrayOutput() BackupChannelArrayOutput {
	return o
}

func (o BackupChannelArrayOutput) ToBackupChannelArrayOutputWithContext(ctx context.Context) BackupChannelArrayOutput {
	return o
}

func (o BackupChannelArrayOutput) Index(i pulumi.IntInput) BackupChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupChannel {
		return vs[0].([]*BackupChannel)[vs[1].(int)]
	}).(BackupChannelOutput)
}

type BackupChannelMapOutput struct{ *pulumi.OutputState }

func (BackupChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupChannel)(nil)).Elem()
}

func (o BackupChannelMapOutput) ToBackupChannelMapOutput() BackupChannelMapOutput {
	return o
}

func (o BackupChannelMapOutput) ToBackupChannelMapOutputWithContext(ctx context.Context) BackupChannelMapOutput {
	return o
}

func (o BackupChannelMapOutput) MapIndex(k pulumi.StringInput) BackupChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupChannel {
		return vs[0].(map[string]*BackupChannel)[vs[1].(string)]
	}).(BackupChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupChannelInput)(nil)).Elem(), &BackupChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupChannelArrayInput)(nil)).Elem(), BackupChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupChannelMapInput)(nil)).Elem(), BackupChannelMap{})
	pulumi.RegisterOutputType(BackupChannelOutput{})
	pulumi.RegisterOutputType(BackupChannelArrayOutput{})
	pulumi.RegisterOutputType(BackupChannelMapOutput{})
}
