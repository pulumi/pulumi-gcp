// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkebackup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Backup for GKE BackupPlan. Each of these resources serves a different use case:
//
// * `gkebackup.BackupPlanIamPolicy`: Authoritative. Sets the IAM policy for the backupplan and replaces any existing policy already attached.
// * `gkebackup.BackupPlanIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the backupplan are preserved.
// * `gkebackup.BackupPlanIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the backupplan are preserved.
//
// > **Note:** `gkebackup.BackupPlanIamPolicy` **cannot** be used in conjunction with `gkebackup.BackupPlanIamBinding` and `gkebackup.BackupPlanIamMember` or they will fight over what your policy should be.
//
// > **Note:** `gkebackup.BackupPlanIamBinding` resources **can be** used in conjunction with `gkebackup.BackupPlanIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_gke\_backup\_backup\_plan\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gkebackup.NewBackupPlanIamPolicy(ctx, "policy", &gkebackup.BackupPlanIamPolicyArgs{
//				Project:    pulumi.Any(google_gke_backup_backup_plan.Basic.Project),
//				Location:   pulumi.Any(google_gke_backup_backup_plan.Basic.Location),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_backup\_backup\_plan\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkebackup.NewBackupPlanIamBinding(ctx, "binding", &gkebackup.BackupPlanIamBindingArgs{
//				Project:  pulumi.Any(google_gke_backup_backup_plan.Basic.Project),
//				Location: pulumi.Any(google_gke_backup_backup_plan.Basic.Location),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_backup\_backup\_plan\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkebackup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkebackup.NewBackupPlanIamMember(ctx, "member", &gkebackup.BackupPlanIamMemberArgs{
//				Project:  pulumi.Any(google_gke_backup_backup_plan.Basic.Project),
//				Location: pulumi.Any(google_gke_backup_backup_plan.Basic.Location),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/backupPlans/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Backup for GKE backupplan IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkebackup/backupPlanIamBinding:BackupPlanIamBinding editor "projects/{{project}}/locations/{{location}}/backupPlans/{{backup_plan}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkebackup/backupPlanIamBinding:BackupPlanIamBinding editor "projects/{{project}}/locations/{{location}}/backupPlans/{{backup_plan}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkebackup/backupPlanIamBinding:BackupPlanIamBinding editor projects/{{project}}/locations/{{location}}/backupPlans/{{backup_plan}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type BackupPlanIamBinding struct {
	pulumi.CustomResourceState

	Condition BackupPlanIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The region of the Backup Plan.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput      `pulumi:"location"`
	Members  pulumi.StringArrayOutput `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkebackup.BackupPlanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewBackupPlanIamBinding registers a new resource with the given unique name, arguments, and options.
func NewBackupPlanIamBinding(ctx *pulumi.Context,
	name string, args *BackupPlanIamBindingArgs, opts ...pulumi.ResourceOption) (*BackupPlanIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource BackupPlanIamBinding
	err := ctx.RegisterResource("gcp:gkebackup/backupPlanIamBinding:BackupPlanIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPlanIamBinding gets an existing BackupPlanIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPlanIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPlanIamBindingState, opts ...pulumi.ResourceOption) (*BackupPlanIamBinding, error) {
	var resource BackupPlanIamBinding
	err := ctx.ReadResource("gcp:gkebackup/backupPlanIamBinding:BackupPlanIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPlanIamBinding resources.
type backupPlanIamBindingState struct {
	Condition *BackupPlanIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The region of the Backup Plan.
	// Used to find the parent resource to bind the IAM policy to
	Location *string  `pulumi:"location"`
	Members  []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkebackup.BackupPlanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type BackupPlanIamBindingState struct {
	Condition BackupPlanIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The region of the Backup Plan.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Members  pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkebackup.BackupPlanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (BackupPlanIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanIamBindingState)(nil)).Elem()
}

type backupPlanIamBindingArgs struct {
	Condition *BackupPlanIamBindingCondition `pulumi:"condition"`
	// The region of the Backup Plan.
	// Used to find the parent resource to bind the IAM policy to
	Location *string  `pulumi:"location"`
	Members  []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkebackup.BackupPlanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a BackupPlanIamBinding resource.
type BackupPlanIamBindingArgs struct {
	Condition BackupPlanIamBindingConditionPtrInput
	// The region of the Backup Plan.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Members  pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkebackup.BackupPlanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (BackupPlanIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanIamBindingArgs)(nil)).Elem()
}

type BackupPlanIamBindingInput interface {
	pulumi.Input

	ToBackupPlanIamBindingOutput() BackupPlanIamBindingOutput
	ToBackupPlanIamBindingOutputWithContext(ctx context.Context) BackupPlanIamBindingOutput
}

func (*BackupPlanIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlanIamBinding)(nil)).Elem()
}

func (i *BackupPlanIamBinding) ToBackupPlanIamBindingOutput() BackupPlanIamBindingOutput {
	return i.ToBackupPlanIamBindingOutputWithContext(context.Background())
}

func (i *BackupPlanIamBinding) ToBackupPlanIamBindingOutputWithContext(ctx context.Context) BackupPlanIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanIamBindingOutput)
}

// BackupPlanIamBindingArrayInput is an input type that accepts BackupPlanIamBindingArray and BackupPlanIamBindingArrayOutput values.
// You can construct a concrete instance of `BackupPlanIamBindingArrayInput` via:
//
//	BackupPlanIamBindingArray{ BackupPlanIamBindingArgs{...} }
type BackupPlanIamBindingArrayInput interface {
	pulumi.Input

	ToBackupPlanIamBindingArrayOutput() BackupPlanIamBindingArrayOutput
	ToBackupPlanIamBindingArrayOutputWithContext(context.Context) BackupPlanIamBindingArrayOutput
}

type BackupPlanIamBindingArray []BackupPlanIamBindingInput

func (BackupPlanIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPlanIamBinding)(nil)).Elem()
}

func (i BackupPlanIamBindingArray) ToBackupPlanIamBindingArrayOutput() BackupPlanIamBindingArrayOutput {
	return i.ToBackupPlanIamBindingArrayOutputWithContext(context.Background())
}

func (i BackupPlanIamBindingArray) ToBackupPlanIamBindingArrayOutputWithContext(ctx context.Context) BackupPlanIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanIamBindingArrayOutput)
}

// BackupPlanIamBindingMapInput is an input type that accepts BackupPlanIamBindingMap and BackupPlanIamBindingMapOutput values.
// You can construct a concrete instance of `BackupPlanIamBindingMapInput` via:
//
//	BackupPlanIamBindingMap{ "key": BackupPlanIamBindingArgs{...} }
type BackupPlanIamBindingMapInput interface {
	pulumi.Input

	ToBackupPlanIamBindingMapOutput() BackupPlanIamBindingMapOutput
	ToBackupPlanIamBindingMapOutputWithContext(context.Context) BackupPlanIamBindingMapOutput
}

type BackupPlanIamBindingMap map[string]BackupPlanIamBindingInput

func (BackupPlanIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPlanIamBinding)(nil)).Elem()
}

func (i BackupPlanIamBindingMap) ToBackupPlanIamBindingMapOutput() BackupPlanIamBindingMapOutput {
	return i.ToBackupPlanIamBindingMapOutputWithContext(context.Background())
}

func (i BackupPlanIamBindingMap) ToBackupPlanIamBindingMapOutputWithContext(ctx context.Context) BackupPlanIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanIamBindingMapOutput)
}

type BackupPlanIamBindingOutput struct{ *pulumi.OutputState }

func (BackupPlanIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlanIamBinding)(nil)).Elem()
}

func (o BackupPlanIamBindingOutput) ToBackupPlanIamBindingOutput() BackupPlanIamBindingOutput {
	return o
}

func (o BackupPlanIamBindingOutput) ToBackupPlanIamBindingOutputWithContext(ctx context.Context) BackupPlanIamBindingOutput {
	return o
}

func (o BackupPlanIamBindingOutput) Condition() BackupPlanIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *BackupPlanIamBinding) BackupPlanIamBindingConditionPtrOutput { return v.Condition }).(BackupPlanIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o BackupPlanIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlanIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The region of the Backup Plan.
// Used to find the parent resource to bind the IAM policy to
func (o BackupPlanIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlanIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o BackupPlanIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupPlanIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o BackupPlanIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlanIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o BackupPlanIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlanIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `gkebackup.BackupPlanIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o BackupPlanIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlanIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type BackupPlanIamBindingArrayOutput struct{ *pulumi.OutputState }

func (BackupPlanIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPlanIamBinding)(nil)).Elem()
}

func (o BackupPlanIamBindingArrayOutput) ToBackupPlanIamBindingArrayOutput() BackupPlanIamBindingArrayOutput {
	return o
}

func (o BackupPlanIamBindingArrayOutput) ToBackupPlanIamBindingArrayOutputWithContext(ctx context.Context) BackupPlanIamBindingArrayOutput {
	return o
}

func (o BackupPlanIamBindingArrayOutput) Index(i pulumi.IntInput) BackupPlanIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupPlanIamBinding {
		return vs[0].([]*BackupPlanIamBinding)[vs[1].(int)]
	}).(BackupPlanIamBindingOutput)
}

type BackupPlanIamBindingMapOutput struct{ *pulumi.OutputState }

func (BackupPlanIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPlanIamBinding)(nil)).Elem()
}

func (o BackupPlanIamBindingMapOutput) ToBackupPlanIamBindingMapOutput() BackupPlanIamBindingMapOutput {
	return o
}

func (o BackupPlanIamBindingMapOutput) ToBackupPlanIamBindingMapOutputWithContext(ctx context.Context) BackupPlanIamBindingMapOutput {
	return o
}

func (o BackupPlanIamBindingMapOutput) MapIndex(k pulumi.StringInput) BackupPlanIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupPlanIamBinding {
		return vs[0].(map[string]*BackupPlanIamBinding)[vs[1].(string)]
	}).(BackupPlanIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanIamBindingInput)(nil)).Elem(), &BackupPlanIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanIamBindingArrayInput)(nil)).Elem(), BackupPlanIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanIamBindingMapInput)(nil)).Elem(), BackupPlanIamBindingMap{})
	pulumi.RegisterOutputType(BackupPlanIamBindingOutput{})
	pulumi.RegisterOutputType(BackupPlanIamBindingArrayOutput{})
	pulumi.RegisterOutputType(BackupPlanIamBindingMapOutput{})
}
