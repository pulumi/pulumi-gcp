// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseEncryptionConfig struct {
	// Fully qualified name of the KMS key to use to encrypt this database. This key must exist
	// in the same location as the Spanner Database.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// DatabaseEncryptionConfigInput is an input type that accepts DatabaseEncryptionConfigArgs and DatabaseEncryptionConfigOutput values.
// You can construct a concrete instance of `DatabaseEncryptionConfigInput` via:
//
//          DatabaseEncryptionConfigArgs{...}
type DatabaseEncryptionConfigInput interface {
	pulumi.Input

	ToDatabaseEncryptionConfigOutput() DatabaseEncryptionConfigOutput
	ToDatabaseEncryptionConfigOutputWithContext(context.Context) DatabaseEncryptionConfigOutput
}

type DatabaseEncryptionConfigArgs struct {
	// Fully qualified name of the KMS key to use to encrypt this database. This key must exist
	// in the same location as the Spanner Database.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (DatabaseEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionConfig)(nil)).Elem()
}

func (i DatabaseEncryptionConfigArgs) ToDatabaseEncryptionConfigOutput() DatabaseEncryptionConfigOutput {
	return i.ToDatabaseEncryptionConfigOutputWithContext(context.Background())
}

func (i DatabaseEncryptionConfigArgs) ToDatabaseEncryptionConfigOutputWithContext(ctx context.Context) DatabaseEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionConfigOutput)
}

func (i DatabaseEncryptionConfigArgs) ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput {
	return i.ToDatabaseEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i DatabaseEncryptionConfigArgs) ToDatabaseEncryptionConfigPtrOutputWithContext(ctx context.Context) DatabaseEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionConfigOutput).ToDatabaseEncryptionConfigPtrOutputWithContext(ctx)
}

// DatabaseEncryptionConfigPtrInput is an input type that accepts DatabaseEncryptionConfigArgs, DatabaseEncryptionConfigPtr and DatabaseEncryptionConfigPtrOutput values.
// You can construct a concrete instance of `DatabaseEncryptionConfigPtrInput` via:
//
//          DatabaseEncryptionConfigArgs{...}
//
//  or:
//
//          nil
type DatabaseEncryptionConfigPtrInput interface {
	pulumi.Input

	ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput
	ToDatabaseEncryptionConfigPtrOutputWithContext(context.Context) DatabaseEncryptionConfigPtrOutput
}

type databaseEncryptionConfigPtrType DatabaseEncryptionConfigArgs

func DatabaseEncryptionConfigPtr(v *DatabaseEncryptionConfigArgs) DatabaseEncryptionConfigPtrInput {
	return (*databaseEncryptionConfigPtrType)(v)
}

func (*databaseEncryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryptionConfig)(nil)).Elem()
}

func (i *databaseEncryptionConfigPtrType) ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput {
	return i.ToDatabaseEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *databaseEncryptionConfigPtrType) ToDatabaseEncryptionConfigPtrOutputWithContext(ctx context.Context) DatabaseEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionConfigPtrOutput)
}

type DatabaseEncryptionConfigOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionConfig)(nil)).Elem()
}

func (o DatabaseEncryptionConfigOutput) ToDatabaseEncryptionConfigOutput() DatabaseEncryptionConfigOutput {
	return o
}

func (o DatabaseEncryptionConfigOutput) ToDatabaseEncryptionConfigOutputWithContext(ctx context.Context) DatabaseEncryptionConfigOutput {
	return o
}

func (o DatabaseEncryptionConfigOutput) ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput {
	return o.ToDatabaseEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o DatabaseEncryptionConfigOutput) ToDatabaseEncryptionConfigPtrOutputWithContext(ctx context.Context) DatabaseEncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseEncryptionConfig) *DatabaseEncryptionConfig {
		return &v
	}).(DatabaseEncryptionConfigPtrOutput)
}

// Fully qualified name of the KMS key to use to encrypt this database. This key must exist
// in the same location as the Spanner Database.
func (o DatabaseEncryptionConfigOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEncryptionConfig) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatabaseEncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryptionConfig)(nil)).Elem()
}

func (o DatabaseEncryptionConfigPtrOutput) ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput {
	return o
}

func (o DatabaseEncryptionConfigPtrOutput) ToDatabaseEncryptionConfigPtrOutputWithContext(ctx context.Context) DatabaseEncryptionConfigPtrOutput {
	return o
}

func (o DatabaseEncryptionConfigPtrOutput) Elem() DatabaseEncryptionConfigOutput {
	return o.ApplyT(func(v *DatabaseEncryptionConfig) DatabaseEncryptionConfig {
		if v != nil {
			return *v
		}
		var ret DatabaseEncryptionConfig
		return ret
	}).(DatabaseEncryptionConfigOutput)
}

// Fully qualified name of the KMS key to use to encrypt this database. This key must exist
// in the same location as the Spanner Database.
func (o DatabaseEncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type DatabaseIAMBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DatabaseIAMBindingConditionInput is an input type that accepts DatabaseIAMBindingConditionArgs and DatabaseIAMBindingConditionOutput values.
// You can construct a concrete instance of `DatabaseIAMBindingConditionInput` via:
//
//          DatabaseIAMBindingConditionArgs{...}
type DatabaseIAMBindingConditionInput interface {
	pulumi.Input

	ToDatabaseIAMBindingConditionOutput() DatabaseIAMBindingConditionOutput
	ToDatabaseIAMBindingConditionOutputWithContext(context.Context) DatabaseIAMBindingConditionOutput
}

type DatabaseIAMBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DatabaseIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIAMBindingCondition)(nil)).Elem()
}

func (i DatabaseIAMBindingConditionArgs) ToDatabaseIAMBindingConditionOutput() DatabaseIAMBindingConditionOutput {
	return i.ToDatabaseIAMBindingConditionOutputWithContext(context.Background())
}

func (i DatabaseIAMBindingConditionArgs) ToDatabaseIAMBindingConditionOutputWithContext(ctx context.Context) DatabaseIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIAMBindingConditionOutput)
}

func (i DatabaseIAMBindingConditionArgs) ToDatabaseIAMBindingConditionPtrOutput() DatabaseIAMBindingConditionPtrOutput {
	return i.ToDatabaseIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i DatabaseIAMBindingConditionArgs) ToDatabaseIAMBindingConditionPtrOutputWithContext(ctx context.Context) DatabaseIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIAMBindingConditionOutput).ToDatabaseIAMBindingConditionPtrOutputWithContext(ctx)
}

// DatabaseIAMBindingConditionPtrInput is an input type that accepts DatabaseIAMBindingConditionArgs, DatabaseIAMBindingConditionPtr and DatabaseIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `DatabaseIAMBindingConditionPtrInput` via:
//
//          DatabaseIAMBindingConditionArgs{...}
//
//  or:
//
//          nil
type DatabaseIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToDatabaseIAMBindingConditionPtrOutput() DatabaseIAMBindingConditionPtrOutput
	ToDatabaseIAMBindingConditionPtrOutputWithContext(context.Context) DatabaseIAMBindingConditionPtrOutput
}

type databaseIAMBindingConditionPtrType DatabaseIAMBindingConditionArgs

func DatabaseIAMBindingConditionPtr(v *DatabaseIAMBindingConditionArgs) DatabaseIAMBindingConditionPtrInput {
	return (*databaseIAMBindingConditionPtrType)(v)
}

func (*databaseIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIAMBindingCondition)(nil)).Elem()
}

func (i *databaseIAMBindingConditionPtrType) ToDatabaseIAMBindingConditionPtrOutput() DatabaseIAMBindingConditionPtrOutput {
	return i.ToDatabaseIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *databaseIAMBindingConditionPtrType) ToDatabaseIAMBindingConditionPtrOutputWithContext(ctx context.Context) DatabaseIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIAMBindingConditionPtrOutput)
}

type DatabaseIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (DatabaseIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIAMBindingCondition)(nil)).Elem()
}

func (o DatabaseIAMBindingConditionOutput) ToDatabaseIAMBindingConditionOutput() DatabaseIAMBindingConditionOutput {
	return o
}

func (o DatabaseIAMBindingConditionOutput) ToDatabaseIAMBindingConditionOutputWithContext(ctx context.Context) DatabaseIAMBindingConditionOutput {
	return o
}

func (o DatabaseIAMBindingConditionOutput) ToDatabaseIAMBindingConditionPtrOutput() DatabaseIAMBindingConditionPtrOutput {
	return o.ToDatabaseIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o DatabaseIAMBindingConditionOutput) ToDatabaseIAMBindingConditionPtrOutputWithContext(ctx context.Context) DatabaseIAMBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseIAMBindingCondition) *DatabaseIAMBindingCondition {
		return &v
	}).(DatabaseIAMBindingConditionPtrOutput)
}

func (o DatabaseIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatabaseIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatabaseIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DatabaseIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIAMBindingCondition)(nil)).Elem()
}

func (o DatabaseIAMBindingConditionPtrOutput) ToDatabaseIAMBindingConditionPtrOutput() DatabaseIAMBindingConditionPtrOutput {
	return o
}

func (o DatabaseIAMBindingConditionPtrOutput) ToDatabaseIAMBindingConditionPtrOutputWithContext(ctx context.Context) DatabaseIAMBindingConditionPtrOutput {
	return o
}

func (o DatabaseIAMBindingConditionPtrOutput) Elem() DatabaseIAMBindingConditionOutput {
	return o.ApplyT(func(v *DatabaseIAMBindingCondition) DatabaseIAMBindingCondition {
		if v != nil {
			return *v
		}
		var ret DatabaseIAMBindingCondition
		return ret
	}).(DatabaseIAMBindingConditionOutput)
}

func (o DatabaseIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DatabaseIAMMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DatabaseIAMMemberConditionInput is an input type that accepts DatabaseIAMMemberConditionArgs and DatabaseIAMMemberConditionOutput values.
// You can construct a concrete instance of `DatabaseIAMMemberConditionInput` via:
//
//          DatabaseIAMMemberConditionArgs{...}
type DatabaseIAMMemberConditionInput interface {
	pulumi.Input

	ToDatabaseIAMMemberConditionOutput() DatabaseIAMMemberConditionOutput
	ToDatabaseIAMMemberConditionOutputWithContext(context.Context) DatabaseIAMMemberConditionOutput
}

type DatabaseIAMMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DatabaseIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIAMMemberCondition)(nil)).Elem()
}

func (i DatabaseIAMMemberConditionArgs) ToDatabaseIAMMemberConditionOutput() DatabaseIAMMemberConditionOutput {
	return i.ToDatabaseIAMMemberConditionOutputWithContext(context.Background())
}

func (i DatabaseIAMMemberConditionArgs) ToDatabaseIAMMemberConditionOutputWithContext(ctx context.Context) DatabaseIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIAMMemberConditionOutput)
}

func (i DatabaseIAMMemberConditionArgs) ToDatabaseIAMMemberConditionPtrOutput() DatabaseIAMMemberConditionPtrOutput {
	return i.ToDatabaseIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i DatabaseIAMMemberConditionArgs) ToDatabaseIAMMemberConditionPtrOutputWithContext(ctx context.Context) DatabaseIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIAMMemberConditionOutput).ToDatabaseIAMMemberConditionPtrOutputWithContext(ctx)
}

// DatabaseIAMMemberConditionPtrInput is an input type that accepts DatabaseIAMMemberConditionArgs, DatabaseIAMMemberConditionPtr and DatabaseIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `DatabaseIAMMemberConditionPtrInput` via:
//
//          DatabaseIAMMemberConditionArgs{...}
//
//  or:
//
//          nil
type DatabaseIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToDatabaseIAMMemberConditionPtrOutput() DatabaseIAMMemberConditionPtrOutput
	ToDatabaseIAMMemberConditionPtrOutputWithContext(context.Context) DatabaseIAMMemberConditionPtrOutput
}

type databaseIAMMemberConditionPtrType DatabaseIAMMemberConditionArgs

func DatabaseIAMMemberConditionPtr(v *DatabaseIAMMemberConditionArgs) DatabaseIAMMemberConditionPtrInput {
	return (*databaseIAMMemberConditionPtrType)(v)
}

func (*databaseIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIAMMemberCondition)(nil)).Elem()
}

func (i *databaseIAMMemberConditionPtrType) ToDatabaseIAMMemberConditionPtrOutput() DatabaseIAMMemberConditionPtrOutput {
	return i.ToDatabaseIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *databaseIAMMemberConditionPtrType) ToDatabaseIAMMemberConditionPtrOutputWithContext(ctx context.Context) DatabaseIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIAMMemberConditionPtrOutput)
}

type DatabaseIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (DatabaseIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIAMMemberCondition)(nil)).Elem()
}

func (o DatabaseIAMMemberConditionOutput) ToDatabaseIAMMemberConditionOutput() DatabaseIAMMemberConditionOutput {
	return o
}

func (o DatabaseIAMMemberConditionOutput) ToDatabaseIAMMemberConditionOutputWithContext(ctx context.Context) DatabaseIAMMemberConditionOutput {
	return o
}

func (o DatabaseIAMMemberConditionOutput) ToDatabaseIAMMemberConditionPtrOutput() DatabaseIAMMemberConditionPtrOutput {
	return o.ToDatabaseIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o DatabaseIAMMemberConditionOutput) ToDatabaseIAMMemberConditionPtrOutputWithContext(ctx context.Context) DatabaseIAMMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseIAMMemberCondition) *DatabaseIAMMemberCondition {
		return &v
	}).(DatabaseIAMMemberConditionPtrOutput)
}

func (o DatabaseIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatabaseIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatabaseIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DatabaseIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIAMMemberCondition)(nil)).Elem()
}

func (o DatabaseIAMMemberConditionPtrOutput) ToDatabaseIAMMemberConditionPtrOutput() DatabaseIAMMemberConditionPtrOutput {
	return o
}

func (o DatabaseIAMMemberConditionPtrOutput) ToDatabaseIAMMemberConditionPtrOutputWithContext(ctx context.Context) DatabaseIAMMemberConditionPtrOutput {
	return o
}

func (o DatabaseIAMMemberConditionPtrOutput) Elem() DatabaseIAMMemberConditionOutput {
	return o.ApplyT(func(v *DatabaseIAMMemberCondition) DatabaseIAMMemberCondition {
		if v != nil {
			return *v
		}
		var ret DatabaseIAMMemberCondition
		return ret
	}).(DatabaseIAMMemberConditionOutput)
}

func (o DatabaseIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type InstanceIAMBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// InstanceIAMBindingConditionInput is an input type that accepts InstanceIAMBindingConditionArgs and InstanceIAMBindingConditionOutput values.
// You can construct a concrete instance of `InstanceIAMBindingConditionInput` via:
//
//          InstanceIAMBindingConditionArgs{...}
type InstanceIAMBindingConditionInput interface {
	pulumi.Input

	ToInstanceIAMBindingConditionOutput() InstanceIAMBindingConditionOutput
	ToInstanceIAMBindingConditionOutputWithContext(context.Context) InstanceIAMBindingConditionOutput
}

type InstanceIAMBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIAMBindingCondition)(nil)).Elem()
}

func (i InstanceIAMBindingConditionArgs) ToInstanceIAMBindingConditionOutput() InstanceIAMBindingConditionOutput {
	return i.ToInstanceIAMBindingConditionOutputWithContext(context.Background())
}

func (i InstanceIAMBindingConditionArgs) ToInstanceIAMBindingConditionOutputWithContext(ctx context.Context) InstanceIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMBindingConditionOutput)
}

func (i InstanceIAMBindingConditionArgs) ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput {
	return i.ToInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIAMBindingConditionArgs) ToInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMBindingConditionOutput).ToInstanceIAMBindingConditionPtrOutputWithContext(ctx)
}

// InstanceIAMBindingConditionPtrInput is an input type that accepts InstanceIAMBindingConditionArgs, InstanceIAMBindingConditionPtr and InstanceIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `InstanceIAMBindingConditionPtrInput` via:
//
//          InstanceIAMBindingConditionArgs{...}
//
//  or:
//
//          nil
type InstanceIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput
	ToInstanceIAMBindingConditionPtrOutputWithContext(context.Context) InstanceIAMBindingConditionPtrOutput
}

type instanceIAMBindingConditionPtrType InstanceIAMBindingConditionArgs

func InstanceIAMBindingConditionPtr(v *InstanceIAMBindingConditionArgs) InstanceIAMBindingConditionPtrInput {
	return (*instanceIAMBindingConditionPtrType)(v)
}

func (*instanceIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIAMBindingCondition)(nil)).Elem()
}

func (i *instanceIAMBindingConditionPtrType) ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput {
	return i.ToInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIAMBindingConditionPtrType) ToInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMBindingConditionPtrOutput)
}

type InstanceIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (InstanceIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIAMBindingCondition)(nil)).Elem()
}

func (o InstanceIAMBindingConditionOutput) ToInstanceIAMBindingConditionOutput() InstanceIAMBindingConditionOutput {
	return o
}

func (o InstanceIAMBindingConditionOutput) ToInstanceIAMBindingConditionOutputWithContext(ctx context.Context) InstanceIAMBindingConditionOutput {
	return o
}

func (o InstanceIAMBindingConditionOutput) ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput {
	return o.ToInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIAMBindingConditionOutput) ToInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIAMBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceIAMBindingCondition) *InstanceIAMBindingCondition {
		return &v
	}).(InstanceIAMBindingConditionPtrOutput)
}

func (o InstanceIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIAMBindingCondition)(nil)).Elem()
}

func (o InstanceIAMBindingConditionPtrOutput) ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput {
	return o
}

func (o InstanceIAMBindingConditionPtrOutput) ToInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIAMBindingConditionPtrOutput {
	return o
}

func (o InstanceIAMBindingConditionPtrOutput) Elem() InstanceIAMBindingConditionOutput {
	return o.ApplyT(func(v *InstanceIAMBindingCondition) InstanceIAMBindingCondition {
		if v != nil {
			return *v
		}
		var ret InstanceIAMBindingCondition
		return ret
	}).(InstanceIAMBindingConditionOutput)
}

func (o InstanceIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type InstanceIAMMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// InstanceIAMMemberConditionInput is an input type that accepts InstanceIAMMemberConditionArgs and InstanceIAMMemberConditionOutput values.
// You can construct a concrete instance of `InstanceIAMMemberConditionInput` via:
//
//          InstanceIAMMemberConditionArgs{...}
type InstanceIAMMemberConditionInput interface {
	pulumi.Input

	ToInstanceIAMMemberConditionOutput() InstanceIAMMemberConditionOutput
	ToInstanceIAMMemberConditionOutputWithContext(context.Context) InstanceIAMMemberConditionOutput
}

type InstanceIAMMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIAMMemberCondition)(nil)).Elem()
}

func (i InstanceIAMMemberConditionArgs) ToInstanceIAMMemberConditionOutput() InstanceIAMMemberConditionOutput {
	return i.ToInstanceIAMMemberConditionOutputWithContext(context.Background())
}

func (i InstanceIAMMemberConditionArgs) ToInstanceIAMMemberConditionOutputWithContext(ctx context.Context) InstanceIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMMemberConditionOutput)
}

func (i InstanceIAMMemberConditionArgs) ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput {
	return i.ToInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIAMMemberConditionArgs) ToInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMMemberConditionOutput).ToInstanceIAMMemberConditionPtrOutputWithContext(ctx)
}

// InstanceIAMMemberConditionPtrInput is an input type that accepts InstanceIAMMemberConditionArgs, InstanceIAMMemberConditionPtr and InstanceIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `InstanceIAMMemberConditionPtrInput` via:
//
//          InstanceIAMMemberConditionArgs{...}
//
//  or:
//
//          nil
type InstanceIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput
	ToInstanceIAMMemberConditionPtrOutputWithContext(context.Context) InstanceIAMMemberConditionPtrOutput
}

type instanceIAMMemberConditionPtrType InstanceIAMMemberConditionArgs

func InstanceIAMMemberConditionPtr(v *InstanceIAMMemberConditionArgs) InstanceIAMMemberConditionPtrInput {
	return (*instanceIAMMemberConditionPtrType)(v)
}

func (*instanceIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIAMMemberCondition)(nil)).Elem()
}

func (i *instanceIAMMemberConditionPtrType) ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput {
	return i.ToInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIAMMemberConditionPtrType) ToInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMMemberConditionPtrOutput)
}

type InstanceIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (InstanceIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIAMMemberCondition)(nil)).Elem()
}

func (o InstanceIAMMemberConditionOutput) ToInstanceIAMMemberConditionOutput() InstanceIAMMemberConditionOutput {
	return o
}

func (o InstanceIAMMemberConditionOutput) ToInstanceIAMMemberConditionOutputWithContext(ctx context.Context) InstanceIAMMemberConditionOutput {
	return o
}

func (o InstanceIAMMemberConditionOutput) ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput {
	return o.ToInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIAMMemberConditionOutput) ToInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIAMMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceIAMMemberCondition) *InstanceIAMMemberCondition {
		return &v
	}).(InstanceIAMMemberConditionPtrOutput)
}

func (o InstanceIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIAMMemberCondition)(nil)).Elem()
}

func (o InstanceIAMMemberConditionPtrOutput) ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput {
	return o
}

func (o InstanceIAMMemberConditionPtrOutput) ToInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIAMMemberConditionPtrOutput {
	return o
}

func (o InstanceIAMMemberConditionPtrOutput) Elem() InstanceIAMMemberConditionOutput {
	return o.ApplyT(func(v *InstanceIAMMemberCondition) InstanceIAMMemberCondition {
		if v != nil {
			return *v
		}
		var ret InstanceIAMMemberCondition
		return ret
	}).(InstanceIAMMemberConditionOutput)
}

func (o InstanceIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseEncryptionConfigOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(DatabaseIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(DatabaseIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(DatabaseIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(InstanceIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(InstanceIAMMemberConditionPtrOutput{})
}
