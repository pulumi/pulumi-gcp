// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A possible configuration for a Cloud Spanner instance. Configurations
// define the geographic placement of nodes and their replication.
//
// To get more information about InstanceConfig, see:
//
// * [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instanceConfigs)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/spanner/)
//
// ## Import
//
// InstanceConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/instanceConfigs/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, InstanceConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:spanner/instanceConfig:InstanceConfig default projects/{{project}}/instanceConfigs/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:spanner/instanceConfig:InstanceConfig default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:spanner/instanceConfig:InstanceConfig default {{name}}
// ```
type InstanceConfig struct {
	pulumi.CustomResourceState

	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig pulumi.StringOutput `pulumi:"baseConfig"`
	// Output only. Whether this instance config is a Google or User Managed Configuration.
	ConfigType pulumi.StringOutput `pulumi:"configType"`
	// The name of this instance configuration as it appears in UIs.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// A unique identifier for the instance configuration. Values are of the
	// form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The geographic placement of nodes in this instance configuration and their replication properties.
	// Structure is documented below.
	Replicas InstanceConfigReplicaArrayOutput `pulumi:"replicas"`
}

// NewInstanceConfig registers a new resource with the given unique name, arguments, and options.
func NewInstanceConfig(ctx *pulumi.Context,
	name string, args *InstanceConfigArgs, opts ...pulumi.ResourceOption) (*InstanceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceConfig
	err := ctx.RegisterResource("gcp:spanner/instanceConfig:InstanceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceConfig gets an existing InstanceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceConfigState, opts ...pulumi.ResourceOption) (*InstanceConfig, error) {
	var resource InstanceConfig
	err := ctx.ReadResource("gcp:spanner/instanceConfig:InstanceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceConfig resources.
type instanceConfigState struct {
	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig *string `pulumi:"baseConfig"`
	// Output only. Whether this instance config is a Google or User Managed Configuration.
	ConfigType *string `pulumi:"configType"`
	// The name of this instance configuration as it appears in UIs.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// A unique identifier for the instance configuration. Values are of the
	// form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The geographic placement of nodes in this instance configuration and their replication properties.
	// Structure is documented below.
	Replicas []InstanceConfigReplica `pulumi:"replicas"`
}

type InstanceConfigState struct {
	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig pulumi.StringPtrInput
	// Output only. Whether this instance config is a Google or User Managed Configuration.
	ConfigType pulumi.StringPtrInput
	// The name of this instance configuration as it appears in UIs.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// A unique identifier for the instance configuration. Values are of the
	// form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The geographic placement of nodes in this instance configuration and their replication properties.
	// Structure is documented below.
	Replicas InstanceConfigReplicaArrayInput
}

func (InstanceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceConfigState)(nil)).Elem()
}

type instanceConfigArgs struct {
	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig *string `pulumi:"baseConfig"`
	// The name of this instance configuration as it appears in UIs.
	DisplayName string `pulumi:"displayName"`
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// A unique identifier for the instance configuration. Values are of the
	// form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The geographic placement of nodes in this instance configuration and their replication properties.
	// Structure is documented below.
	Replicas []InstanceConfigReplica `pulumi:"replicas"`
}

// The set of arguments for constructing a InstanceConfig resource.
type InstanceConfigArgs struct {
	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig pulumi.StringPtrInput
	// The name of this instance configuration as it appears in UIs.
	DisplayName pulumi.StringInput
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// A unique identifier for the instance configuration. Values are of the
	// form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The geographic placement of nodes in this instance configuration and their replication properties.
	// Structure is documented below.
	Replicas InstanceConfigReplicaArrayInput
}

func (InstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceConfigArgs)(nil)).Elem()
}

type InstanceConfigInput interface {
	pulumi.Input

	ToInstanceConfigOutput() InstanceConfigOutput
	ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput
}

func (*InstanceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfig)(nil)).Elem()
}

func (i *InstanceConfig) ToInstanceConfigOutput() InstanceConfigOutput {
	return i.ToInstanceConfigOutputWithContext(context.Background())
}

func (i *InstanceConfig) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigOutput)
}

// InstanceConfigArrayInput is an input type that accepts InstanceConfigArray and InstanceConfigArrayOutput values.
// You can construct a concrete instance of `InstanceConfigArrayInput` via:
//
//	InstanceConfigArray{ InstanceConfigArgs{...} }
type InstanceConfigArrayInput interface {
	pulumi.Input

	ToInstanceConfigArrayOutput() InstanceConfigArrayOutput
	ToInstanceConfigArrayOutputWithContext(context.Context) InstanceConfigArrayOutput
}

type InstanceConfigArray []InstanceConfigInput

func (InstanceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return i.ToInstanceConfigArrayOutputWithContext(context.Background())
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigArrayOutput)
}

// InstanceConfigMapInput is an input type that accepts InstanceConfigMap and InstanceConfigMapOutput values.
// You can construct a concrete instance of `InstanceConfigMapInput` via:
//
//	InstanceConfigMap{ "key": InstanceConfigArgs{...} }
type InstanceConfigMapInput interface {
	pulumi.Input

	ToInstanceConfigMapOutput() InstanceConfigMapOutput
	ToInstanceConfigMapOutputWithContext(context.Context) InstanceConfigMapOutput
}

type InstanceConfigMap map[string]InstanceConfigInput

func (InstanceConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigMap) ToInstanceConfigMapOutput() InstanceConfigMapOutput {
	return i.ToInstanceConfigMapOutputWithContext(context.Background())
}

func (i InstanceConfigMap) ToInstanceConfigMapOutputWithContext(ctx context.Context) InstanceConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigMapOutput)
}

type InstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigOutput) ToInstanceConfigOutput() InstanceConfigOutput {
	return o
}

func (o InstanceConfigOutput) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return o
}

// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
// configuration.
func (o InstanceConfigOutput) BaseConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.BaseConfig }).(pulumi.StringOutput)
}

// Output only. Whether this instance config is a Google or User Managed Configuration.
func (o InstanceConfigOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.ConfigType }).(pulumi.StringOutput)
}

// The name of this instance configuration as it appears in UIs.
func (o InstanceConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o InstanceConfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
// to the field 'effective_labels' for all of the labels present on the resource.
func (o InstanceConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// A unique identifier for the instance configuration. Values are of the
// form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
func (o InstanceConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o InstanceConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o InstanceConfigOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The geographic placement of nodes in this instance configuration and their replication properties.
// Structure is documented below.
func (o InstanceConfigOutput) Replicas() InstanceConfigReplicaArrayOutput {
	return o.ApplyT(func(v *InstanceConfig) InstanceConfigReplicaArrayOutput { return v.Replicas }).(InstanceConfigReplicaArrayOutput)
}

type InstanceConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) Index(i pulumi.IntInput) InstanceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceConfig {
		return vs[0].([]*InstanceConfig)[vs[1].(int)]
	}).(InstanceConfigOutput)
}

type InstanceConfigMapOutput struct{ *pulumi.OutputState }

func (InstanceConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigMapOutput) ToInstanceConfigMapOutput() InstanceConfigMapOutput {
	return o
}

func (o InstanceConfigMapOutput) ToInstanceConfigMapOutputWithContext(ctx context.Context) InstanceConfigMapOutput {
	return o
}

func (o InstanceConfigMapOutput) MapIndex(k pulumi.StringInput) InstanceConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceConfig {
		return vs[0].(map[string]*InstanceConfig)[vs[1].(string)]
	}).(InstanceConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigInput)(nil)).Elem(), &InstanceConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigArrayInput)(nil)).Elem(), InstanceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigMapInput)(nil)).Elem(), InstanceConfigMap{})
	pulumi.RegisterOutputType(InstanceConfigOutput{})
	pulumi.RegisterOutputType(InstanceConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceConfigMapOutput{})
}
