// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A backup schedule for a Cloud Spanner Database.
// This resource is owned by the database it is backing up, and is deleted along with the database.
// The actual backups are not though.
//
// To get more information about BackupSchedule, see:
//
// * [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.databases.backupSchedules)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/spanner/docs/backup)
//
// > **Warning:** This resource creates a Spanner Backup Schedule on a project that already has
// a Spanner database.
// This resource is owned by the database it is backing up, and is deleted along
// with the database. The actual backups are not though.
//
// ## Example Usage
//
// ### Spanner Backup Schedule Daily Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := spanner.NewInstance(ctx, "main", &spanner.InstanceArgs{
//				Name:        pulumi.String("instance-id"),
//				Config:      pulumi.String("regional-europe-west1"),
//				DisplayName: pulumi.String("main-instance"),
//				NumNodes:    pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			database, err := spanner.NewDatabase(ctx, "database", &spanner.DatabaseArgs{
//				Instance:               main.Name,
//				Name:                   pulumi.String("database-id"),
//				VersionRetentionPeriod: pulumi.String("3d"),
//				Ddls: pulumi.StringArray{
//					pulumi.String("CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)"),
//					pulumi.String("CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)"),
//				},
//				DeletionProtection: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spanner.NewBackupSchedule(ctx, "full-backup", &spanner.BackupScheduleArgs{
//				Instance:          main.Name,
//				Database:          database.Name,
//				Name:              pulumi.String("backup-schedule-id"),
//				RetentionDuration: pulumi.String("31620000s"),
//				Spec: &spanner.BackupScheduleSpecArgs{
//					CronSpec: &spanner.BackupScheduleSpecCronSpecArgs{
//						Text: pulumi.String("0 12 * * *"),
//					},
//				},
//				FullBackupSpec: &spanner.BackupScheduleFullBackupSpecArgs{},
//				EncryptionConfig: &spanner.BackupScheduleEncryptionConfigArgs{
//					EncryptionType: pulumi.String("USE_DATABASE_ENCRYPTION"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Spanner Backup Schedule Daily Incremental
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := spanner.NewInstance(ctx, "main", &spanner.InstanceArgs{
//				Name:        pulumi.String("instance-id"),
//				Config:      pulumi.String("regional-europe-west1"),
//				DisplayName: pulumi.String("main-instance"),
//				NumNodes:    pulumi.Int(1),
//				Edition:     pulumi.String("ENTERPRISE"),
//			})
//			if err != nil {
//				return err
//			}
//			database, err := spanner.NewDatabase(ctx, "database", &spanner.DatabaseArgs{
//				Instance:               main.Name,
//				Name:                   pulumi.String("database-id"),
//				VersionRetentionPeriod: pulumi.String("3d"),
//				Ddls: pulumi.StringArray{
//					pulumi.String("CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)"),
//					pulumi.String("CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)"),
//				},
//				DeletionProtection: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spanner.NewBackupSchedule(ctx, "incremental-backup", &spanner.BackupScheduleArgs{
//				Instance:          main.Name,
//				Database:          database.Name,
//				Name:              pulumi.String("backup-schedule-id"),
//				RetentionDuration: pulumi.String("31620000s"),
//				Spec: &spanner.BackupScheduleSpecArgs{
//					CronSpec: &spanner.BackupScheduleSpecCronSpecArgs{
//						Text: pulumi.String("0 12 * * *"),
//					},
//				},
//				IncrementalBackupSpec: &spanner.BackupScheduleIncrementalBackupSpecArgs{},
//				EncryptionConfig: &spanner.BackupScheduleEncryptionConfigArgs{
//					EncryptionType: pulumi.String("GOOGLE_DEFAULT_ENCRYPTION"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BackupSchedule can be imported using any of these accepted formats:
//
// * `projects/{{project}}/instances/{{instance}}/databases/{{database}}/backupSchedules/{{name}}`
//
// * `{{project}}/{{instance}}/{{database}}/{{name}}`
//
// * `{{instance}}/{{database}}/{{name}}`
//
// When using the `pulumi import` command, BackupSchedule can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:spanner/backupSchedule:BackupSchedule default projects/{{project}}/instances/{{instance}}/databases/{{database}}/backupSchedules/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:spanner/backupSchedule:BackupSchedule default {{project}}/{{instance}}/{{database}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:spanner/backupSchedule:BackupSchedule default {{instance}}/{{database}}/{{name}}
// ```
type BackupSchedule struct {
	pulumi.CustomResourceState

	// The database to create the backup schedule on.
	//
	// ***
	Database pulumi.StringOutput `pulumi:"database"`
	// Configuration for the encryption of the backup schedule.
	// Structure is documented below.
	EncryptionConfig BackupScheduleEncryptionConfigOutput `pulumi:"encryptionConfig"`
	// The schedule creates only full backups..
	FullBackupSpec BackupScheduleFullBackupSpecPtrOutput `pulumi:"fullBackupSpec"`
	// The schedule creates incremental backup chains.
	IncrementalBackupSpec BackupScheduleIncrementalBackupSpecPtrOutput `pulumi:"incrementalBackupSpec"`
	// The instance to create the database on.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// A unique identifier for the backup schedule, which cannot be changed after
	// the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
	// You can set this to a value up to 366 days.
	RetentionDuration pulumi.StringOutput `pulumi:"retentionDuration"`
	// Defines specifications of the backup schedule.
	// Structure is documented below.
	Spec BackupScheduleSpecPtrOutput `pulumi:"spec"`
}

// NewBackupSchedule registers a new resource with the given unique name, arguments, and options.
func NewBackupSchedule(ctx *pulumi.Context,
	name string, args *BackupScheduleArgs, opts ...pulumi.ResourceOption) (*BackupSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.RetentionDuration == nil {
		return nil, errors.New("invalid value for required argument 'RetentionDuration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupSchedule
	err := ctx.RegisterResource("gcp:spanner/backupSchedule:BackupSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupSchedule gets an existing BackupSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupScheduleState, opts ...pulumi.ResourceOption) (*BackupSchedule, error) {
	var resource BackupSchedule
	err := ctx.ReadResource("gcp:spanner/backupSchedule:BackupSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupSchedule resources.
type backupScheduleState struct {
	// The database to create the backup schedule on.
	//
	// ***
	Database *string `pulumi:"database"`
	// Configuration for the encryption of the backup schedule.
	// Structure is documented below.
	EncryptionConfig *BackupScheduleEncryptionConfig `pulumi:"encryptionConfig"`
	// The schedule creates only full backups..
	FullBackupSpec *BackupScheduleFullBackupSpec `pulumi:"fullBackupSpec"`
	// The schedule creates incremental backup chains.
	IncrementalBackupSpec *BackupScheduleIncrementalBackupSpec `pulumi:"incrementalBackupSpec"`
	// The instance to create the database on.
	Instance *string `pulumi:"instance"`
	// A unique identifier for the backup schedule, which cannot be changed after
	// the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
	// You can set this to a value up to 366 days.
	RetentionDuration *string `pulumi:"retentionDuration"`
	// Defines specifications of the backup schedule.
	// Structure is documented below.
	Spec *BackupScheduleSpec `pulumi:"spec"`
}

type BackupScheduleState struct {
	// The database to create the backup schedule on.
	//
	// ***
	Database pulumi.StringPtrInput
	// Configuration for the encryption of the backup schedule.
	// Structure is documented below.
	EncryptionConfig BackupScheduleEncryptionConfigPtrInput
	// The schedule creates only full backups..
	FullBackupSpec BackupScheduleFullBackupSpecPtrInput
	// The schedule creates incremental backup chains.
	IncrementalBackupSpec BackupScheduleIncrementalBackupSpecPtrInput
	// The instance to create the database on.
	Instance pulumi.StringPtrInput
	// A unique identifier for the backup schedule, which cannot be changed after
	// the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
	// You can set this to a value up to 366 days.
	RetentionDuration pulumi.StringPtrInput
	// Defines specifications of the backup schedule.
	// Structure is documented below.
	Spec BackupScheduleSpecPtrInput
}

func (BackupScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupScheduleState)(nil)).Elem()
}

type backupScheduleArgs struct {
	// The database to create the backup schedule on.
	//
	// ***
	Database string `pulumi:"database"`
	// Configuration for the encryption of the backup schedule.
	// Structure is documented below.
	EncryptionConfig *BackupScheduleEncryptionConfig `pulumi:"encryptionConfig"`
	// The schedule creates only full backups..
	FullBackupSpec *BackupScheduleFullBackupSpec `pulumi:"fullBackupSpec"`
	// The schedule creates incremental backup chains.
	IncrementalBackupSpec *BackupScheduleIncrementalBackupSpec `pulumi:"incrementalBackupSpec"`
	// The instance to create the database on.
	Instance string `pulumi:"instance"`
	// A unique identifier for the backup schedule, which cannot be changed after
	// the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
	// You can set this to a value up to 366 days.
	RetentionDuration string `pulumi:"retentionDuration"`
	// Defines specifications of the backup schedule.
	// Structure is documented below.
	Spec *BackupScheduleSpec `pulumi:"spec"`
}

// The set of arguments for constructing a BackupSchedule resource.
type BackupScheduleArgs struct {
	// The database to create the backup schedule on.
	//
	// ***
	Database pulumi.StringInput
	// Configuration for the encryption of the backup schedule.
	// Structure is documented below.
	EncryptionConfig BackupScheduleEncryptionConfigPtrInput
	// The schedule creates only full backups..
	FullBackupSpec BackupScheduleFullBackupSpecPtrInput
	// The schedule creates incremental backup chains.
	IncrementalBackupSpec BackupScheduleIncrementalBackupSpecPtrInput
	// The instance to create the database on.
	Instance pulumi.StringInput
	// A unique identifier for the backup schedule, which cannot be changed after
	// the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
	// You can set this to a value up to 366 days.
	RetentionDuration pulumi.StringInput
	// Defines specifications of the backup schedule.
	// Structure is documented below.
	Spec BackupScheduleSpecPtrInput
}

func (BackupScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupScheduleArgs)(nil)).Elem()
}

type BackupScheduleInput interface {
	pulumi.Input

	ToBackupScheduleOutput() BackupScheduleOutput
	ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput
}

func (*BackupSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (i *BackupSchedule) ToBackupScheduleOutput() BackupScheduleOutput {
	return i.ToBackupScheduleOutputWithContext(context.Background())
}

func (i *BackupSchedule) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleOutput)
}

// BackupScheduleArrayInput is an input type that accepts BackupScheduleArray and BackupScheduleArrayOutput values.
// You can construct a concrete instance of `BackupScheduleArrayInput` via:
//
//	BackupScheduleArray{ BackupScheduleArgs{...} }
type BackupScheduleArrayInput interface {
	pulumi.Input

	ToBackupScheduleArrayOutput() BackupScheduleArrayOutput
	ToBackupScheduleArrayOutputWithContext(context.Context) BackupScheduleArrayOutput
}

type BackupScheduleArray []BackupScheduleInput

func (BackupScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupSchedule)(nil)).Elem()
}

func (i BackupScheduleArray) ToBackupScheduleArrayOutput() BackupScheduleArrayOutput {
	return i.ToBackupScheduleArrayOutputWithContext(context.Background())
}

func (i BackupScheduleArray) ToBackupScheduleArrayOutputWithContext(ctx context.Context) BackupScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleArrayOutput)
}

// BackupScheduleMapInput is an input type that accepts BackupScheduleMap and BackupScheduleMapOutput values.
// You can construct a concrete instance of `BackupScheduleMapInput` via:
//
//	BackupScheduleMap{ "key": BackupScheduleArgs{...} }
type BackupScheduleMapInput interface {
	pulumi.Input

	ToBackupScheduleMapOutput() BackupScheduleMapOutput
	ToBackupScheduleMapOutputWithContext(context.Context) BackupScheduleMapOutput
}

type BackupScheduleMap map[string]BackupScheduleInput

func (BackupScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupSchedule)(nil)).Elem()
}

func (i BackupScheduleMap) ToBackupScheduleMapOutput() BackupScheduleMapOutput {
	return i.ToBackupScheduleMapOutputWithContext(context.Background())
}

func (i BackupScheduleMap) ToBackupScheduleMapOutputWithContext(ctx context.Context) BackupScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleMapOutput)
}

type BackupScheduleOutput struct{ *pulumi.OutputState }

func (BackupScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleOutput) ToBackupScheduleOutput() BackupScheduleOutput {
	return o
}

func (o BackupScheduleOutput) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return o
}

// The database to create the backup schedule on.
//
// ***
func (o BackupScheduleOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Configuration for the encryption of the backup schedule.
// Structure is documented below.
func (o BackupScheduleOutput) EncryptionConfig() BackupScheduleEncryptionConfigOutput {
	return o.ApplyT(func(v *BackupSchedule) BackupScheduleEncryptionConfigOutput { return v.EncryptionConfig }).(BackupScheduleEncryptionConfigOutput)
}

// The schedule creates only full backups..
func (o BackupScheduleOutput) FullBackupSpec() BackupScheduleFullBackupSpecPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) BackupScheduleFullBackupSpecPtrOutput { return v.FullBackupSpec }).(BackupScheduleFullBackupSpecPtrOutput)
}

// The schedule creates incremental backup chains.
func (o BackupScheduleOutput) IncrementalBackupSpec() BackupScheduleIncrementalBackupSpecPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) BackupScheduleIncrementalBackupSpecPtrOutput { return v.IncrementalBackupSpec }).(BackupScheduleIncrementalBackupSpecPtrOutput)
}

// The instance to create the database on.
func (o BackupScheduleOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// A unique identifier for the backup schedule, which cannot be changed after
// the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
func (o BackupScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BackupScheduleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
// A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
// You can set this to a value up to 366 days.
func (o BackupScheduleOutput) RetentionDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.RetentionDuration }).(pulumi.StringOutput)
}

// Defines specifications of the backup schedule.
// Structure is documented below.
func (o BackupScheduleOutput) Spec() BackupScheduleSpecPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) BackupScheduleSpecPtrOutput { return v.Spec }).(BackupScheduleSpecPtrOutput)
}

type BackupScheduleArrayOutput struct{ *pulumi.OutputState }

func (BackupScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleArrayOutput) ToBackupScheduleArrayOutput() BackupScheduleArrayOutput {
	return o
}

func (o BackupScheduleArrayOutput) ToBackupScheduleArrayOutputWithContext(ctx context.Context) BackupScheduleArrayOutput {
	return o
}

func (o BackupScheduleArrayOutput) Index(i pulumi.IntInput) BackupScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupSchedule {
		return vs[0].([]*BackupSchedule)[vs[1].(int)]
	}).(BackupScheduleOutput)
}

type BackupScheduleMapOutput struct{ *pulumi.OutputState }

func (BackupScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleMapOutput) ToBackupScheduleMapOutput() BackupScheduleMapOutput {
	return o
}

func (o BackupScheduleMapOutput) ToBackupScheduleMapOutputWithContext(ctx context.Context) BackupScheduleMapOutput {
	return o
}

func (o BackupScheduleMapOutput) MapIndex(k pulumi.StringInput) BackupScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupSchedule {
		return vs[0].(map[string]*BackupSchedule)[vs[1].(string)]
	}).(BackupScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleInput)(nil)).Elem(), &BackupSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleArrayInput)(nil)).Elem(), BackupScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleMapInput)(nil)).Elem(), BackupScheduleMap{})
	pulumi.RegisterOutputType(BackupScheduleOutput{})
	pulumi.RegisterOutputType(BackupScheduleArrayOutput{})
	pulumi.RegisterOutputType(BackupScheduleMapOutput{})
}
