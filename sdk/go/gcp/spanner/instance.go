// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// An isolated set of Cloud Spanner resources on which databases can be
// hosted.
// 
// 
// To get more information about Instance, see:
// 
// * [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/spanner/)
// 
// <div class = "oics-button" style="float: right; margin: 0 0 -15px">
//   <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=spanner_instance_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
//     <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
//   </a>
// </div>
type Instance struct {
	s *pulumi.ResourceState
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOpt) (*Instance, error) {
	if args == nil || args.Config == nil {
		return nil, errors.New("missing required argument 'Config'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["config"] = nil
		inputs["displayName"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["numNodes"] = nil
		inputs["project"] = nil
	} else {
		inputs["config"] = args.Config
		inputs["displayName"] = args.DisplayName
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["numNodes"] = args.NumNodes
		inputs["project"] = args.Project
	}
	inputs["state"] = nil
	s, err := ctx.RegisterResource("gcp:spanner/instance:Instance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceState, opts ...pulumi.ResourceOpt) (*Instance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["config"] = state.Config
		inputs["displayName"] = state.DisplayName
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["numNodes"] = state.NumNodes
		inputs["project"] = state.Project
		inputs["state"] = state.State
	}
	s, err := ctx.ReadResource("gcp:spanner/instance:Instance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Instance) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Instance) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Instance) Config() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["config"])
}

func (r *Instance) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

func (r *Instance) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Instance) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Instance) NumNodes() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["numNodes"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Instance) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *Instance) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// Input properties used for looking up and filtering Instance resources.
type InstanceState struct {
	Config interface{}
	DisplayName interface{}
	Labels interface{}
	Name interface{}
	NumNodes interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	State interface{}
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	Config interface{}
	DisplayName interface{}
	Labels interface{}
	Name interface{}
	NumNodes interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
