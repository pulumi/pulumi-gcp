// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Spanner instance partition is a unit of Cloud Spanner database capacity
// that can be used to partition data and processing capacity within an instance.
//
// To get more information about InstancePartition, see:
//
// * [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.instancePartitions)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/spanner/docs/geo-partitioning)
//
// ## Example Usage
//
// ### Spanner Instance Partition Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := spanner.NewInstance(ctx, "main", &spanner.InstanceArgs{
//				Name:        pulumi.String("test-instance"),
//				Config:      pulumi.String("nam6"),
//				DisplayName: pulumi.String("main-instance"),
//				NumNodes:    pulumi.Int(1),
//				Edition:     pulumi.String("ENTERPRISE_PLUS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spanner.NewInstancePartition(ctx, "partition", &spanner.InstancePartitionArgs{
//				Name:        pulumi.String("test-partition"),
//				Instance:    main.Name,
//				Config:      pulumi.String("nam8"),
//				DisplayName: pulumi.String("test-spanner-partition"),
//				NodeCount:   pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// InstancePartition can be imported using any of these accepted formats:
//
// * `projects/{{project}}/instances/{{instance}}/instancePartitions/{{name}}`
//
// * `{{project}}/{{instance}}/{{name}}`
//
// * `{{instance}}/{{name}}`
//
// When using the `pulumi import` command, InstancePartition can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:spanner/instancePartition:InstancePartition default projects/{{project}}/instances/{{instance}}/instancePartitions/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:spanner/instancePartition:InstancePartition default {{project}}/{{instance}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:spanner/instancePartition:InstancePartition default {{instance}}/{{name}}
// ```
type InstancePartition struct {
	pulumi.CustomResourceState

	// The name of the instance partition's configuration (similar to a region) which
	// defines the geographic placement and replication of data in this instance partition.
	Config pulumi.StringOutput `pulumi:"config"`
	// The descriptive name for this instance partition as it appears in UIs.
	// Must be unique per project and between 4 and 30 characters in length.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The instance to create the instance partition in.
	//
	// ***
	Instance pulumi.StringOutput `pulumi:"instance"`
	// A unique identifier for the instance partition, which cannot be changed after
	// the instance partition is created. The name must be between 2 and 64 characters
	// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of nodes allocated to this instance partition. One node equals
	// 1000 processing units. Exactly one of either nodeCount or processingUnits
	// must be present.
	NodeCount pulumi.IntPtrOutput `pulumi:"nodeCount"`
	// The number of processing units allocated to this instance partition.
	// Exactly one of either nodeCount or processingUnits must be present.
	ProcessingUnits pulumi.IntPtrOutput `pulumi:"processingUnits"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The current instance partition state. Possible values are:
	// CREATING: The instance partition is being created. Resources are being
	// allocated for the instance partition.
	// READY: The instance partition has been allocated resources and is ready for use.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewInstancePartition registers a new resource with the given unique name, arguments, and options.
func NewInstancePartition(ctx *pulumi.Context,
	name string, args *InstancePartitionArgs, opts ...pulumi.ResourceOption) (*InstancePartition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstancePartition
	err := ctx.RegisterResource("gcp:spanner/instancePartition:InstancePartition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstancePartition gets an existing InstancePartition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstancePartition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstancePartitionState, opts ...pulumi.ResourceOption) (*InstancePartition, error) {
	var resource InstancePartition
	err := ctx.ReadResource("gcp:spanner/instancePartition:InstancePartition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstancePartition resources.
type instancePartitionState struct {
	// The name of the instance partition's configuration (similar to a region) which
	// defines the geographic placement and replication of data in this instance partition.
	Config *string `pulumi:"config"`
	// The descriptive name for this instance partition as it appears in UIs.
	// Must be unique per project and between 4 and 30 characters in length.
	DisplayName *string `pulumi:"displayName"`
	// The instance to create the instance partition in.
	//
	// ***
	Instance *string `pulumi:"instance"`
	// A unique identifier for the instance partition, which cannot be changed after
	// the instance partition is created. The name must be between 2 and 64 characters
	// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
	Name *string `pulumi:"name"`
	// The number of nodes allocated to this instance partition. One node equals
	// 1000 processing units. Exactly one of either nodeCount or processingUnits
	// must be present.
	NodeCount *int `pulumi:"nodeCount"`
	// The number of processing units allocated to this instance partition.
	// Exactly one of either nodeCount or processingUnits must be present.
	ProcessingUnits *int `pulumi:"processingUnits"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The current instance partition state. Possible values are:
	// CREATING: The instance partition is being created. Resources are being
	// allocated for the instance partition.
	// READY: The instance partition has been allocated resources and is ready for use.
	State *string `pulumi:"state"`
}

type InstancePartitionState struct {
	// The name of the instance partition's configuration (similar to a region) which
	// defines the geographic placement and replication of data in this instance partition.
	Config pulumi.StringPtrInput
	// The descriptive name for this instance partition as it appears in UIs.
	// Must be unique per project and between 4 and 30 characters in length.
	DisplayName pulumi.StringPtrInput
	// The instance to create the instance partition in.
	//
	// ***
	Instance pulumi.StringPtrInput
	// A unique identifier for the instance partition, which cannot be changed after
	// the instance partition is created. The name must be between 2 and 64 characters
	// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
	Name pulumi.StringPtrInput
	// The number of nodes allocated to this instance partition. One node equals
	// 1000 processing units. Exactly one of either nodeCount or processingUnits
	// must be present.
	NodeCount pulumi.IntPtrInput
	// The number of processing units allocated to this instance partition.
	// Exactly one of either nodeCount or processingUnits must be present.
	ProcessingUnits pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The current instance partition state. Possible values are:
	// CREATING: The instance partition is being created. Resources are being
	// allocated for the instance partition.
	// READY: The instance partition has been allocated resources and is ready for use.
	State pulumi.StringPtrInput
}

func (InstancePartitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePartitionState)(nil)).Elem()
}

type instancePartitionArgs struct {
	// The name of the instance partition's configuration (similar to a region) which
	// defines the geographic placement and replication of data in this instance partition.
	Config string `pulumi:"config"`
	// The descriptive name for this instance partition as it appears in UIs.
	// Must be unique per project and between 4 and 30 characters in length.
	DisplayName string `pulumi:"displayName"`
	// The instance to create the instance partition in.
	//
	// ***
	Instance string `pulumi:"instance"`
	// A unique identifier for the instance partition, which cannot be changed after
	// the instance partition is created. The name must be between 2 and 64 characters
	// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
	Name *string `pulumi:"name"`
	// The number of nodes allocated to this instance partition. One node equals
	// 1000 processing units. Exactly one of either nodeCount or processingUnits
	// must be present.
	NodeCount *int `pulumi:"nodeCount"`
	// The number of processing units allocated to this instance partition.
	// Exactly one of either nodeCount or processingUnits must be present.
	ProcessingUnits *int `pulumi:"processingUnits"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a InstancePartition resource.
type InstancePartitionArgs struct {
	// The name of the instance partition's configuration (similar to a region) which
	// defines the geographic placement and replication of data in this instance partition.
	Config pulumi.StringInput
	// The descriptive name for this instance partition as it appears in UIs.
	// Must be unique per project and between 4 and 30 characters in length.
	DisplayName pulumi.StringInput
	// The instance to create the instance partition in.
	//
	// ***
	Instance pulumi.StringInput
	// A unique identifier for the instance partition, which cannot be changed after
	// the instance partition is created. The name must be between 2 and 64 characters
	// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
	Name pulumi.StringPtrInput
	// The number of nodes allocated to this instance partition. One node equals
	// 1000 processing units. Exactly one of either nodeCount or processingUnits
	// must be present.
	NodeCount pulumi.IntPtrInput
	// The number of processing units allocated to this instance partition.
	// Exactly one of either nodeCount or processingUnits must be present.
	ProcessingUnits pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (InstancePartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePartitionArgs)(nil)).Elem()
}

type InstancePartitionInput interface {
	pulumi.Input

	ToInstancePartitionOutput() InstancePartitionOutput
	ToInstancePartitionOutputWithContext(ctx context.Context) InstancePartitionOutput
}

func (*InstancePartition) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePartition)(nil)).Elem()
}

func (i *InstancePartition) ToInstancePartitionOutput() InstancePartitionOutput {
	return i.ToInstancePartitionOutputWithContext(context.Background())
}

func (i *InstancePartition) ToInstancePartitionOutputWithContext(ctx context.Context) InstancePartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePartitionOutput)
}

// InstancePartitionArrayInput is an input type that accepts InstancePartitionArray and InstancePartitionArrayOutput values.
// You can construct a concrete instance of `InstancePartitionArrayInput` via:
//
//	InstancePartitionArray{ InstancePartitionArgs{...} }
type InstancePartitionArrayInput interface {
	pulumi.Input

	ToInstancePartitionArrayOutput() InstancePartitionArrayOutput
	ToInstancePartitionArrayOutputWithContext(context.Context) InstancePartitionArrayOutput
}

type InstancePartitionArray []InstancePartitionInput

func (InstancePartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstancePartition)(nil)).Elem()
}

func (i InstancePartitionArray) ToInstancePartitionArrayOutput() InstancePartitionArrayOutput {
	return i.ToInstancePartitionArrayOutputWithContext(context.Background())
}

func (i InstancePartitionArray) ToInstancePartitionArrayOutputWithContext(ctx context.Context) InstancePartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePartitionArrayOutput)
}

// InstancePartitionMapInput is an input type that accepts InstancePartitionMap and InstancePartitionMapOutput values.
// You can construct a concrete instance of `InstancePartitionMapInput` via:
//
//	InstancePartitionMap{ "key": InstancePartitionArgs{...} }
type InstancePartitionMapInput interface {
	pulumi.Input

	ToInstancePartitionMapOutput() InstancePartitionMapOutput
	ToInstancePartitionMapOutputWithContext(context.Context) InstancePartitionMapOutput
}

type InstancePartitionMap map[string]InstancePartitionInput

func (InstancePartitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstancePartition)(nil)).Elem()
}

func (i InstancePartitionMap) ToInstancePartitionMapOutput() InstancePartitionMapOutput {
	return i.ToInstancePartitionMapOutputWithContext(context.Background())
}

func (i InstancePartitionMap) ToInstancePartitionMapOutputWithContext(ctx context.Context) InstancePartitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePartitionMapOutput)
}

type InstancePartitionOutput struct{ *pulumi.OutputState }

func (InstancePartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePartition)(nil)).Elem()
}

func (o InstancePartitionOutput) ToInstancePartitionOutput() InstancePartitionOutput {
	return o
}

func (o InstancePartitionOutput) ToInstancePartitionOutputWithContext(ctx context.Context) InstancePartitionOutput {
	return o
}

// The name of the instance partition's configuration (similar to a region) which
// defines the geographic placement and replication of data in this instance partition.
func (o InstancePartitionOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The descriptive name for this instance partition as it appears in UIs.
// Must be unique per project and between 4 and 30 characters in length.
func (o InstancePartitionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The instance to create the instance partition in.
//
// ***
func (o InstancePartitionOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// A unique identifier for the instance partition, which cannot be changed after
// the instance partition is created. The name must be between 2 and 64 characters
// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
func (o InstancePartitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of nodes allocated to this instance partition. One node equals
// 1000 processing units. Exactly one of either nodeCount or processingUnits
// must be present.
func (o InstancePartitionOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.IntPtrOutput { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// The number of processing units allocated to this instance partition.
// Exactly one of either nodeCount or processingUnits must be present.
func (o InstancePartitionOutput) ProcessingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.IntPtrOutput { return v.ProcessingUnits }).(pulumi.IntPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InstancePartitionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The current instance partition state. Possible values are:
// CREATING: The instance partition is being created. Resources are being
// allocated for the instance partition.
// READY: The instance partition has been allocated resources and is ready for use.
func (o InstancePartitionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type InstancePartitionArrayOutput struct{ *pulumi.OutputState }

func (InstancePartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstancePartition)(nil)).Elem()
}

func (o InstancePartitionArrayOutput) ToInstancePartitionArrayOutput() InstancePartitionArrayOutput {
	return o
}

func (o InstancePartitionArrayOutput) ToInstancePartitionArrayOutputWithContext(ctx context.Context) InstancePartitionArrayOutput {
	return o
}

func (o InstancePartitionArrayOutput) Index(i pulumi.IntInput) InstancePartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstancePartition {
		return vs[0].([]*InstancePartition)[vs[1].(int)]
	}).(InstancePartitionOutput)
}

type InstancePartitionMapOutput struct{ *pulumi.OutputState }

func (InstancePartitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstancePartition)(nil)).Elem()
}

func (o InstancePartitionMapOutput) ToInstancePartitionMapOutput() InstancePartitionMapOutput {
	return o
}

func (o InstancePartitionMapOutput) ToInstancePartitionMapOutputWithContext(ctx context.Context) InstancePartitionMapOutput {
	return o
}

func (o InstancePartitionMapOutput) MapIndex(k pulumi.StringInput) InstancePartitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstancePartition {
		return vs[0].(map[string]*InstancePartition)[vs[1].(string)]
	}).(InstancePartitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePartitionInput)(nil)).Elem(), &InstancePartition{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePartitionArrayInput)(nil)).Elem(), InstancePartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePartitionMapInput)(nil)).Elem(), InstancePartitionMap{})
	pulumi.RegisterOutputType(InstancePartitionOutput{})
	pulumi.RegisterOutputType(InstancePartitionArrayOutput{})
	pulumi.RegisterOutputType(InstancePartitionMapOutput{})
}
