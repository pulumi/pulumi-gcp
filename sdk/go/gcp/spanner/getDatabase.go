// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a spanner database from Google Cloud by its name and instance name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spanner.LookupDatabase(ctx, &spanner.LookupDatabaseArgs{
//				Name:     "foo",
//				Instance: instance.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDatabase(ctx *pulumi.Context, args *LookupDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseResult
	err := ctx.Invoke("gcp:spanner/getDatabase:getDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseArgs struct {
	// The name of the database's spanner instance.
	//
	// ***
	Instance string `pulumi:"instance"`
	// The name of the spanner database.
	Name string `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getDatabase.
type LookupDatabaseResult struct {
	DatabaseDialect      string                        `pulumi:"databaseDialect"`
	Ddls                 []string                      `pulumi:"ddls"`
	DefaultTimeZone      string                        `pulumi:"defaultTimeZone"`
	DeletionProtection   bool                          `pulumi:"deletionProtection"`
	EnableDropProtection bool                          `pulumi:"enableDropProtection"`
	EncryptionConfigs    []GetDatabaseEncryptionConfig `pulumi:"encryptionConfigs"`
	// The provider-assigned unique ID for this managed resource.
	Id                     string  `pulumi:"id"`
	Instance               string  `pulumi:"instance"`
	Name                   string  `pulumi:"name"`
	Project                *string `pulumi:"project"`
	State                  string  `pulumi:"state"`
	VersionRetentionPeriod string  `pulumi:"versionRetentionPeriod"`
}

func LookupDatabaseOutput(ctx *pulumi.Context, args LookupDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDatabaseResultOutput, error) {
			args := v.(LookupDatabaseArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:spanner/getDatabase:getDatabase", args, LookupDatabaseResultOutput{}, options).(LookupDatabaseResultOutput), nil
		}).(LookupDatabaseResultOutput)
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseOutputArgs struct {
	// The name of the database's spanner instance.
	//
	// ***
	Instance pulumi.StringInput `pulumi:"instance"`
	// The name of the spanner database.
	Name pulumi.StringInput `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getDatabase.
type LookupDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseResult)(nil)).Elem()
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutput() LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutputWithContext(ctx context.Context) LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) DatabaseDialect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.DatabaseDialect }).(pulumi.StringOutput)
}

func (o LookupDatabaseResultOutput) Ddls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDatabaseResult) []string { return v.Ddls }).(pulumi.StringArrayOutput)
}

func (o LookupDatabaseResultOutput) DefaultTimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.DefaultTimeZone }).(pulumi.StringOutput)
}

func (o LookupDatabaseResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

func (o LookupDatabaseResultOutput) EnableDropProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.EnableDropProtection }).(pulumi.BoolOutput)
}

func (o LookupDatabaseResultOutput) EncryptionConfigs() GetDatabaseEncryptionConfigArrayOutput {
	return o.ApplyT(func(v LookupDatabaseResult) []GetDatabaseEncryptionConfig { return v.EncryptionConfigs }).(GetDatabaseEncryptionConfigArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDatabaseResultOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Instance }).(pulumi.StringOutput)
}

func (o LookupDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDatabaseResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupDatabaseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupDatabaseResultOutput) VersionRetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.VersionRetentionPeriod }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseResultOutput{})
}
