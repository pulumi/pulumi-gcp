// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package projects

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows management of a single API service for an existing Google Cloud Platform project. 
// 
// For a list of services available, visit the
// [API library page](https://console.cloud.google.com/apis/library) or run `gcloud services list`.
// 
// ~> **Note:** This resource _must not_ be used in conjunction with
//    `google_project_services` or they will fight over which services should be enabled.
type Service struct {
	s *pulumi.ResourceState
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOpt) (*Service, error) {
	if args == nil || args.Service == nil {
		return nil, errors.New("missing required argument 'Service'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["disableOnDestroy"] = nil
		inputs["project"] = nil
		inputs["service"] = nil
	} else {
		inputs["disableOnDestroy"] = args.DisableOnDestroy
		inputs["project"] = args.Project
		inputs["service"] = args.Service
	}
	s, err := ctx.RegisterResource("gcp:projects/service:Service", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceState, opts ...pulumi.ResourceOpt) (*Service, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["disableOnDestroy"] = state.DisableOnDestroy
		inputs["project"] = state.Project
		inputs["service"] = state.Service
	}
	s, err := ctx.ReadResource("gcp:projects/service:Service", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Service) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Service) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// If true, disable the service when the terraform resource is destroyed.  Defaults to true.  May be useful in the event that a project is long-lived but the infrastructure running in that project changes frequently.
func (r *Service) DisableOnDestroy() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disableOnDestroy"])
}

// The project ID. If not provided, the provider project is used.
func (r *Service) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The service to enable.
func (r *Service) Service() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["service"])
}

// Input properties used for looking up and filtering Service resources.
type ServiceState struct {
	// If true, disable the service when the terraform resource is destroyed.  Defaults to true.  May be useful in the event that a project is long-lived but the infrastructure running in that project changes frequently.
	DisableOnDestroy interface{}
	// The project ID. If not provided, the provider project is used.
	Project interface{}
	// The service to enable.
	Service interface{}
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// If true, disable the service when the terraform resource is destroyed.  Defaults to true.  May be useful in the event that a project is long-lived but the infrastructure running in that project changes frequently.
	DisableOnDestroy interface{}
	// The project ID. If not provided, the provider project is used.
	Project interface{}
	// The service to enable.
	Service interface{}
}
