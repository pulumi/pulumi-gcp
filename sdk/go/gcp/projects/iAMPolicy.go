// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package projects

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type IAMPolicy struct {
	s *pulumi.ResourceState
}

// NewIAMPolicy registers a new resource with the given unique name, arguments, and options.
func NewIAMPolicy(ctx *pulumi.Context,
	name string, args *IAMPolicyArgs, opts ...pulumi.ResourceOpt) (*IAMPolicy, error) {
	if args == nil || args.PolicyData == nil {
		return nil, errors.New("missing required argument 'PolicyData'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authoritative"] = nil
		inputs["disableProject"] = nil
		inputs["policyData"] = nil
		inputs["project"] = nil
	} else {
		inputs["authoritative"] = args.Authoritative
		inputs["disableProject"] = args.DisableProject
		inputs["policyData"] = args.PolicyData
		inputs["project"] = args.Project
	}
	inputs["etag"] = nil
	inputs["restorePolicy"] = nil
	s, err := ctx.RegisterResource("gcp:projects/iAMPolicy:IAMPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IAMPolicy{s: s}, nil
}

// GetIAMPolicy gets an existing IAMPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIAMPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IAMPolicyState, opts ...pulumi.ResourceOpt) (*IAMPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authoritative"] = state.Authoritative
		inputs["disableProject"] = state.DisableProject
		inputs["etag"] = state.Etag
		inputs["policyData"] = state.PolicyData
		inputs["project"] = state.Project
		inputs["restorePolicy"] = state.RestorePolicy
	}
	s, err := ctx.ReadResource("gcp:projects/iAMPolicy:IAMPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IAMPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IAMPolicy) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IAMPolicy) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *IAMPolicy) Authoritative() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["authoritative"])
}

func (r *IAMPolicy) DisableProject() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disableProject"])
}

func (r *IAMPolicy) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

func (r *IAMPolicy) PolicyData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyData"])
}

func (r *IAMPolicy) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *IAMPolicy) RestorePolicy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["restorePolicy"])
}

// Input properties used for looking up and filtering IAMPolicy resources.
type IAMPolicyState struct {
	Authoritative interface{}
	DisableProject interface{}
	Etag interface{}
	PolicyData interface{}
	Project interface{}
	RestorePolicy interface{}
}

// The set of arguments for constructing a IAMPolicy resource.
type IAMPolicyArgs struct {
	Authoritative interface{}
	DisableProject interface{}
	PolicyData interface{}
	Project interface{}
}
