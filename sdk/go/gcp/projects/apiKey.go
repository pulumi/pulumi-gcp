// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package projects

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Apikeys Key resource
//
// ## Example Usage
// ### Android_key
// A basic example of a android api keys key
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		basic, err := organizations.NewProject(ctx, "basic", &organizations.ProjectArgs{
// 			ProjectId: pulumi.String("app"),
// 			OrgId:     pulumi.String("123456789"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = projects.NewApiKey(ctx, "primary", &projects.ApiKeyArgs{
// 			DisplayName: pulumi.String("sample-key"),
// 			Project:     basic.Name,
// 			Restrictions: &projects.ApiKeyRestrictionsArgs{
// 				AndroidKeyRestrictions: &projects.ApiKeyRestrictionsAndroidKeyRestrictionsArgs{
// 					AllowedApplications: projects.ApiKeyRestrictionsAndroidKeyRestrictionsAllowedApplicationArray{
// 						&projects.ApiKeyRestrictionsAndroidKeyRestrictionsAllowedApplicationArgs{
// 							PackageName:     pulumi.String("com.example.app123"),
// 							Sha1Fingerprint: pulumi.String("1699466a142d4682a5f91b50fdf400f2358e2b0b"),
// 						},
// 					},
// 				},
// 				ApiTargets: projects.ApiKeyRestrictionsApiTargetArray{
// 					&projects.ApiKeyRestrictionsApiTargetArgs{
// 						Service: pulumi.String("translate.googleapis.com"),
// 						Methods: pulumi.StringArray{
// 							pulumi.String("GET*"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Basic_key
// A basic example of a api keys key
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		basic, err := organizations.NewProject(ctx, "basic", &organizations.ProjectArgs{
// 			ProjectId: pulumi.String("app"),
// 			OrgId:     pulumi.String("123456789"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = projects.NewApiKey(ctx, "primary", &projects.ApiKeyArgs{
// 			DisplayName: pulumi.String("sample-key"),
// 			Project:     basic.Name,
// 			Restrictions: &projects.ApiKeyRestrictionsArgs{
// 				ApiTargets: projects.ApiKeyRestrictionsApiTargetArray{
// 					&projects.ApiKeyRestrictionsApiTargetArgs{
// 						Service: pulumi.String("translate.googleapis.com"),
// 						Methods: pulumi.StringArray{
// 							pulumi.String("GET*"),
// 						},
// 					},
// 				},
// 				BrowserKeyRestrictions: &projects.ApiKeyRestrictionsBrowserKeyRestrictionsArgs{
// 					AllowedReferrers: pulumi.StringArray{
// 						pulumi.String(".*"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Ios_key
// A basic example of a ios api keys key
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		basic, err := organizations.NewProject(ctx, "basic", &organizations.ProjectArgs{
// 			ProjectId: pulumi.String("app"),
// 			OrgId:     pulumi.String("123456789"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = projects.NewApiKey(ctx, "primary", &projects.ApiKeyArgs{
// 			DisplayName: pulumi.String("sample-key"),
// 			Project:     basic.Name,
// 			Restrictions: &projects.ApiKeyRestrictionsArgs{
// 				ApiTargets: projects.ApiKeyRestrictionsApiTargetArray{
// 					&projects.ApiKeyRestrictionsApiTargetArgs{
// 						Service: pulumi.String("translate.googleapis.com"),
// 						Methods: pulumi.StringArray{
// 							pulumi.String("GET*"),
// 						},
// 					},
// 				},
// 				IosKeyRestrictions: &projects.ApiKeyRestrictionsIosKeyRestrictionsArgs{
// 					AllowedBundleIds: pulumi.StringArray{
// 						pulumi.String("com.google.app.macos"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Minimal_key
// A minimal example of a api keys key
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		basic, err := organizations.NewProject(ctx, "basic", &organizations.ProjectArgs{
// 			ProjectId: pulumi.String("app"),
// 			OrgId:     pulumi.String("123456789"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = projects.NewApiKey(ctx, "primary", &projects.ApiKeyArgs{
// 			DisplayName: pulumi.String("sample-key"),
// 			Project:     basic.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Server_key
// A basic example of a server api keys key
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		basic, err := organizations.NewProject(ctx, "basic", &organizations.ProjectArgs{
// 			ProjectId: pulumi.String("app"),
// 			OrgId:     pulumi.String("123456789"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = projects.NewApiKey(ctx, "primary", &projects.ApiKeyArgs{
// 			DisplayName: pulumi.String("sample-key"),
// 			Project:     basic.Name,
// 			Restrictions: &projects.ApiKeyRestrictionsArgs{
// 				ApiTargets: projects.ApiKeyRestrictionsApiTargetArray{
// 					&projects.ApiKeyRestrictionsApiTargetArgs{
// 						Service: pulumi.String("translate.googleapis.com"),
// 						Methods: pulumi.StringArray{
// 							pulumi.String("GET*"),
// 						},
// 					},
// 				},
// 				ServerKeyRestrictions: &projects.ApiKeyRestrictionsServerKeyRestrictionsArgs{
// 					AllowedIps: pulumi.StringArray{
// 						pulumi.String("127.0.0.1"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Key can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:projects/apiKey:ApiKey default projects/{{project}}/locations/global/keys/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:projects/apiKey:ApiKey default {{project}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:projects/apiKey:ApiKey default {{name}}
// ```
type ApiKey struct {
	pulumi.CustomResourceState

	// Human-readable display name of this API key. Modifiable by user.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Output only. An encrypted and signed value held by this key. This field can be accessed only through the `GetKeyString`
	// method.
	KeyString pulumi.StringOutput `pulumi:"keyString"`
	// The resource name of the key. The name must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. In another word, the name must match the regular expression: `a-z?`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Key restrictions.
	Restrictions ApiKeyRestrictionsPtrOutput `pulumi:"restrictions"`
	// Output only. Unique id in UUID4 format.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewApiKey registers a new resource with the given unique name, arguments, and options.
func NewApiKey(ctx *pulumi.Context,
	name string, args *ApiKeyArgs, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	if args == nil {
		args = &ApiKeyArgs{}
	}

	var resource ApiKey
	err := ctx.RegisterResource("gcp:projects/apiKey:ApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiKey gets an existing ApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiKeyState, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	var resource ApiKey
	err := ctx.ReadResource("gcp:projects/apiKey:ApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiKey resources.
type apiKeyState struct {
	// Human-readable display name of this API key. Modifiable by user.
	DisplayName *string `pulumi:"displayName"`
	// Output only. An encrypted and signed value held by this key. This field can be accessed only through the `GetKeyString`
	// method.
	KeyString *string `pulumi:"keyString"`
	// The resource name of the key. The name must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. In another word, the name must match the regular expression: `a-z?`.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Key restrictions.
	Restrictions *ApiKeyRestrictions `pulumi:"restrictions"`
	// Output only. Unique id in UUID4 format.
	Uid *string `pulumi:"uid"`
}

type ApiKeyState struct {
	// Human-readable display name of this API key. Modifiable by user.
	DisplayName pulumi.StringPtrInput
	// Output only. An encrypted and signed value held by this key. This field can be accessed only through the `GetKeyString`
	// method.
	KeyString pulumi.StringPtrInput
	// The resource name of the key. The name must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. In another word, the name must match the regular expression: `a-z?`.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Key restrictions.
	Restrictions ApiKeyRestrictionsPtrInput
	// Output only. Unique id in UUID4 format.
	Uid pulumi.StringPtrInput
}

func (ApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyState)(nil)).Elem()
}

type apiKeyArgs struct {
	// Human-readable display name of this API key. Modifiable by user.
	DisplayName *string `pulumi:"displayName"`
	// The resource name of the key. The name must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. In another word, the name must match the regular expression: `a-z?`.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Key restrictions.
	Restrictions *ApiKeyRestrictions `pulumi:"restrictions"`
}

// The set of arguments for constructing a ApiKey resource.
type ApiKeyArgs struct {
	// Human-readable display name of this API key. Modifiable by user.
	DisplayName pulumi.StringPtrInput
	// The resource name of the key. The name must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. In another word, the name must match the regular expression: `a-z?`.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Key restrictions.
	Restrictions ApiKeyRestrictionsPtrInput
}

func (ApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyArgs)(nil)).Elem()
}

type ApiKeyInput interface {
	pulumi.Input

	ToApiKeyOutput() ApiKeyOutput
	ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput
}

func (*ApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (i *ApiKey) ToApiKeyOutput() ApiKeyOutput {
	return i.ToApiKeyOutputWithContext(context.Background())
}

func (i *ApiKey) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyOutput)
}

// ApiKeyArrayInput is an input type that accepts ApiKeyArray and ApiKeyArrayOutput values.
// You can construct a concrete instance of `ApiKeyArrayInput` via:
//
//          ApiKeyArray{ ApiKeyArgs{...} }
type ApiKeyArrayInput interface {
	pulumi.Input

	ToApiKeyArrayOutput() ApiKeyArrayOutput
	ToApiKeyArrayOutputWithContext(context.Context) ApiKeyArrayOutput
}

type ApiKeyArray []ApiKeyInput

func (ApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (i ApiKeyArray) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return i.ToApiKeyArrayOutputWithContext(context.Background())
}

func (i ApiKeyArray) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyArrayOutput)
}

// ApiKeyMapInput is an input type that accepts ApiKeyMap and ApiKeyMapOutput values.
// You can construct a concrete instance of `ApiKeyMapInput` via:
//
//          ApiKeyMap{ "key": ApiKeyArgs{...} }
type ApiKeyMapInput interface {
	pulumi.Input

	ToApiKeyMapOutput() ApiKeyMapOutput
	ToApiKeyMapOutputWithContext(context.Context) ApiKeyMapOutput
}

type ApiKeyMap map[string]ApiKeyInput

func (ApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (i ApiKeyMap) ToApiKeyMapOutput() ApiKeyMapOutput {
	return i.ToApiKeyMapOutputWithContext(context.Background())
}

func (i ApiKeyMap) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyMapOutput)
}

type ApiKeyOutput struct{ *pulumi.OutputState }

func (ApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (o ApiKeyOutput) ToApiKeyOutput() ApiKeyOutput {
	return o
}

func (o ApiKeyOutput) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return o
}

// Human-readable display name of this API key. Modifiable by user.
func (o ApiKeyOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Output only. An encrypted and signed value held by this key. This field can be accessed only through the `GetKeyString`
// method.
func (o ApiKeyOutput) KeyString() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.KeyString }).(pulumi.StringOutput)
}

// The resource name of the key. The name must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. In another word, the name must match the regular expression: `a-z?`.
func (o ApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o ApiKeyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Key restrictions.
func (o ApiKeyOutput) Restrictions() ApiKeyRestrictionsPtrOutput {
	return o.ApplyT(func(v *ApiKey) ApiKeyRestrictionsPtrOutput { return v.Restrictions }).(ApiKeyRestrictionsPtrOutput)
}

// Output only. Unique id in UUID4 format.
func (o ApiKeyOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type ApiKeyArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) Index(i pulumi.IntInput) ApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].([]*ApiKey)[vs[1].(int)]
	}).(ApiKeyOutput)
}

type ApiKeyMapOutput struct{ *pulumi.OutputState }

func (ApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (o ApiKeyMapOutput) ToApiKeyMapOutput() ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) MapIndex(k pulumi.StringInput) ApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].(map[string]*ApiKey)[vs[1].(string)]
	}).(ApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyInput)(nil)).Elem(), &ApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyArrayInput)(nil)).Elem(), ApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyMapInput)(nil)).Elem(), ApiKeyMap{})
	pulumi.RegisterOutputType(ApiKeyOutput{})
	pulumi.RegisterOutputType(ApiKeyArrayOutput{})
	pulumi.RegisterOutputType(ApiKeyMapOutput{})
}
