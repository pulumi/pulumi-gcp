// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package projects

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows creation and management of a Google Cloud Platform project.
// 
// Projects created with this resource must be associated with an Organization.
// See the [Organization documentation](https://cloud.google.com/resource-manager/docs/quickstarts) for more details.
// 
// The service account used to run Terraform when creating a `google_project`
// resource must have `roles/resourcemanager.projectCreator`. See the
// [Access Control for Organizations Using IAM](https://cloud.google.com/resource-manager/docs/access-control-org)
// doc for more information.
// 
// Note that prior to 0.8.5, `google_project` functioned like a data source,
// meaning any project referenced by it had to be created and managed outside
// Terraform. As of 0.8.5, `google_project` functions like any other Terraform
// resource, with Terraform creating and managing the project. To replicate the old
// behavior, either:
// 
// * Use the project ID directly in whatever is referencing the project, using the
//   [google_project_iam_policy](https://www.terraform.io/docs/providers/google/r/google_project_iam.html)
//   to replace the old `policy_data` property.
// * Use the [import](https://www.terraform.io/docs/import/usage.html) functionality
//   to import your pre-existing project into Terraform, where it can be referenced and
//   used just like always, keeping in mind that Terraform will attempt to undo any changes
//   made outside Terraform.
// 
// ~> It's important to note that any project resources that were added to your Terraform config
// prior to 0.8.5 will continue to function as they always have, and will not be managed by
// Terraform. Only newly added projects are affected.
type UsageExportBucket struct {
	s *pulumi.ResourceState
}

// NewUsageExportBucket registers a new resource with the given unique name, arguments, and options.
func NewUsageExportBucket(ctx *pulumi.Context,
	name string, args *UsageExportBucketArgs, opts ...pulumi.ResourceOpt) (*UsageExportBucket, error) {
	if args == nil || args.BucketName == nil {
		return nil, errors.New("missing required argument 'BucketName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bucketName"] = nil
		inputs["prefix"] = nil
		inputs["project"] = nil
	} else {
		inputs["bucketName"] = args.BucketName
		inputs["prefix"] = args.Prefix
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("gcp:projects/usageExportBucket:UsageExportBucket", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UsageExportBucket{s: s}, nil
}

// GetUsageExportBucket gets an existing UsageExportBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsageExportBucket(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UsageExportBucketState, opts ...pulumi.ResourceOpt) (*UsageExportBucket, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bucketName"] = state.BucketName
		inputs["prefix"] = state.Prefix
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:projects/usageExportBucket:UsageExportBucket", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UsageExportBucket{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UsageExportBucket) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UsageExportBucket) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *UsageExportBucket) BucketName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["bucketName"])
}

func (r *UsageExportBucket) Prefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["prefix"])
}

func (r *UsageExportBucket) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering UsageExportBucket resources.
type UsageExportBucketState struct {
	BucketName interface{}
	Prefix interface{}
	Project interface{}
}

// The set of arguments for constructing a UsageExportBucket resource.
type UsageExportBucketArgs struct {
	BucketName interface{}
	Prefix interface{}
	Project interface{}
}
