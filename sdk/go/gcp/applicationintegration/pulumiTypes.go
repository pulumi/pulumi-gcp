// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package applicationintegration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClientCloudKmsConfig struct {
	// A Cloud KMS key is a named object containing one or more key versions, along
	// with metadata for the key. A key exists on exactly one key ring tied to a
	// specific location.
	Key string `pulumi:"key"`
	// Each version of a key contains key material used for encryption or signing.
	// A key's version is represented by an integer, starting at 1. To decrypt data
	// or verify a signature, you must use the same key version that was used to
	// encrypt or sign the data.
	KeyVersion *string `pulumi:"keyVersion"`
	// Location name of the key ring, e.g. "us-west1".
	KmsLocation string `pulumi:"kmsLocation"`
	// The Google Cloud project id of the project where the kms key stored. If empty,
	// the kms key is stored at the same project as customer's project and ecrypted
	// with CMEK, otherwise, the kms key is stored in the tenant project and
	// encrypted with GMEK.
	KmsProjectId *string `pulumi:"kmsProjectId"`
	// A key ring organizes keys in a specific Google Cloud location and allows you to
	// manage access control on groups of keys. A key ring's name does not need to be
	// unique across a Google Cloud project, but must be unique within a given location.
	KmsRing string `pulumi:"kmsRing"`
}

// ClientCloudKmsConfigInput is an input type that accepts ClientCloudKmsConfigArgs and ClientCloudKmsConfigOutput values.
// You can construct a concrete instance of `ClientCloudKmsConfigInput` via:
//
//	ClientCloudKmsConfigArgs{...}
type ClientCloudKmsConfigInput interface {
	pulumi.Input

	ToClientCloudKmsConfigOutput() ClientCloudKmsConfigOutput
	ToClientCloudKmsConfigOutputWithContext(context.Context) ClientCloudKmsConfigOutput
}

type ClientCloudKmsConfigArgs struct {
	// A Cloud KMS key is a named object containing one or more key versions, along
	// with metadata for the key. A key exists on exactly one key ring tied to a
	// specific location.
	Key pulumi.StringInput `pulumi:"key"`
	// Each version of a key contains key material used for encryption or signing.
	// A key's version is represented by an integer, starting at 1. To decrypt data
	// or verify a signature, you must use the same key version that was used to
	// encrypt or sign the data.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
	// Location name of the key ring, e.g. "us-west1".
	KmsLocation pulumi.StringInput `pulumi:"kmsLocation"`
	// The Google Cloud project id of the project where the kms key stored. If empty,
	// the kms key is stored at the same project as customer's project and ecrypted
	// with CMEK, otherwise, the kms key is stored in the tenant project and
	// encrypted with GMEK.
	KmsProjectId pulumi.StringPtrInput `pulumi:"kmsProjectId"`
	// A key ring organizes keys in a specific Google Cloud location and allows you to
	// manage access control on groups of keys. A key ring's name does not need to be
	// unique across a Google Cloud project, but must be unique within a given location.
	KmsRing pulumi.StringInput `pulumi:"kmsRing"`
}

func (ClientCloudKmsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCloudKmsConfig)(nil)).Elem()
}

func (i ClientCloudKmsConfigArgs) ToClientCloudKmsConfigOutput() ClientCloudKmsConfigOutput {
	return i.ToClientCloudKmsConfigOutputWithContext(context.Background())
}

func (i ClientCloudKmsConfigArgs) ToClientCloudKmsConfigOutputWithContext(ctx context.Context) ClientCloudKmsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCloudKmsConfigOutput)
}

func (i ClientCloudKmsConfigArgs) ToClientCloudKmsConfigPtrOutput() ClientCloudKmsConfigPtrOutput {
	return i.ToClientCloudKmsConfigPtrOutputWithContext(context.Background())
}

func (i ClientCloudKmsConfigArgs) ToClientCloudKmsConfigPtrOutputWithContext(ctx context.Context) ClientCloudKmsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCloudKmsConfigOutput).ToClientCloudKmsConfigPtrOutputWithContext(ctx)
}

// ClientCloudKmsConfigPtrInput is an input type that accepts ClientCloudKmsConfigArgs, ClientCloudKmsConfigPtr and ClientCloudKmsConfigPtrOutput values.
// You can construct a concrete instance of `ClientCloudKmsConfigPtrInput` via:
//
//	        ClientCloudKmsConfigArgs{...}
//
//	or:
//
//	        nil
type ClientCloudKmsConfigPtrInput interface {
	pulumi.Input

	ToClientCloudKmsConfigPtrOutput() ClientCloudKmsConfigPtrOutput
	ToClientCloudKmsConfigPtrOutputWithContext(context.Context) ClientCloudKmsConfigPtrOutput
}

type clientCloudKmsConfigPtrType ClientCloudKmsConfigArgs

func ClientCloudKmsConfigPtr(v *ClientCloudKmsConfigArgs) ClientCloudKmsConfigPtrInput {
	return (*clientCloudKmsConfigPtrType)(v)
}

func (*clientCloudKmsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCloudKmsConfig)(nil)).Elem()
}

func (i *clientCloudKmsConfigPtrType) ToClientCloudKmsConfigPtrOutput() ClientCloudKmsConfigPtrOutput {
	return i.ToClientCloudKmsConfigPtrOutputWithContext(context.Background())
}

func (i *clientCloudKmsConfigPtrType) ToClientCloudKmsConfigPtrOutputWithContext(ctx context.Context) ClientCloudKmsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCloudKmsConfigPtrOutput)
}

type ClientCloudKmsConfigOutput struct{ *pulumi.OutputState }

func (ClientCloudKmsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCloudKmsConfig)(nil)).Elem()
}

func (o ClientCloudKmsConfigOutput) ToClientCloudKmsConfigOutput() ClientCloudKmsConfigOutput {
	return o
}

func (o ClientCloudKmsConfigOutput) ToClientCloudKmsConfigOutputWithContext(ctx context.Context) ClientCloudKmsConfigOutput {
	return o
}

func (o ClientCloudKmsConfigOutput) ToClientCloudKmsConfigPtrOutput() ClientCloudKmsConfigPtrOutput {
	return o.ToClientCloudKmsConfigPtrOutputWithContext(context.Background())
}

func (o ClientCloudKmsConfigOutput) ToClientCloudKmsConfigPtrOutputWithContext(ctx context.Context) ClientCloudKmsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientCloudKmsConfig) *ClientCloudKmsConfig {
		return &v
	}).(ClientCloudKmsConfigPtrOutput)
}

// A Cloud KMS key is a named object containing one or more key versions, along
// with metadata for the key. A key exists on exactly one key ring tied to a
// specific location.
func (o ClientCloudKmsConfigOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCloudKmsConfig) string { return v.Key }).(pulumi.StringOutput)
}

// Each version of a key contains key material used for encryption or signing.
// A key's version is represented by an integer, starting at 1. To decrypt data
// or verify a signature, you must use the same key version that was used to
// encrypt or sign the data.
func (o ClientCloudKmsConfigOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCloudKmsConfig) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// Location name of the key ring, e.g. "us-west1".
func (o ClientCloudKmsConfigOutput) KmsLocation() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCloudKmsConfig) string { return v.KmsLocation }).(pulumi.StringOutput)
}

// The Google Cloud project id of the project where the kms key stored. If empty,
// the kms key is stored at the same project as customer's project and ecrypted
// with CMEK, otherwise, the kms key is stored in the tenant project and
// encrypted with GMEK.
func (o ClientCloudKmsConfigOutput) KmsProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCloudKmsConfig) *string { return v.KmsProjectId }).(pulumi.StringPtrOutput)
}

// A key ring organizes keys in a specific Google Cloud location and allows you to
// manage access control on groups of keys. A key ring's name does not need to be
// unique across a Google Cloud project, but must be unique within a given location.
func (o ClientCloudKmsConfigOutput) KmsRing() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCloudKmsConfig) string { return v.KmsRing }).(pulumi.StringOutput)
}

type ClientCloudKmsConfigPtrOutput struct{ *pulumi.OutputState }

func (ClientCloudKmsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCloudKmsConfig)(nil)).Elem()
}

func (o ClientCloudKmsConfigPtrOutput) ToClientCloudKmsConfigPtrOutput() ClientCloudKmsConfigPtrOutput {
	return o
}

func (o ClientCloudKmsConfigPtrOutput) ToClientCloudKmsConfigPtrOutputWithContext(ctx context.Context) ClientCloudKmsConfigPtrOutput {
	return o
}

func (o ClientCloudKmsConfigPtrOutput) Elem() ClientCloudKmsConfigOutput {
	return o.ApplyT(func(v *ClientCloudKmsConfig) ClientCloudKmsConfig {
		if v != nil {
			return *v
		}
		var ret ClientCloudKmsConfig
		return ret
	}).(ClientCloudKmsConfigOutput)
}

// A Cloud KMS key is a named object containing one or more key versions, along
// with metadata for the key. A key exists on exactly one key ring tied to a
// specific location.
func (o ClientCloudKmsConfigPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCloudKmsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Each version of a key contains key material used for encryption or signing.
// A key's version is represented by an integer, starting at 1. To decrypt data
// or verify a signature, you must use the same key version that was used to
// encrypt or sign the data.
func (o ClientCloudKmsConfigPtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCloudKmsConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// Location name of the key ring, e.g. "us-west1".
func (o ClientCloudKmsConfigPtrOutput) KmsLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCloudKmsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.KmsLocation
	}).(pulumi.StringPtrOutput)
}

// The Google Cloud project id of the project where the kms key stored. If empty,
// the kms key is stored at the same project as customer's project and ecrypted
// with CMEK, otherwise, the kms key is stored in the tenant project and
// encrypted with GMEK.
func (o ClientCloudKmsConfigPtrOutput) KmsProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCloudKmsConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsProjectId
	}).(pulumi.StringPtrOutput)
}

// A key ring organizes keys in a specific Google Cloud location and allows you to
// manage access control on groups of keys. A key ring's name does not need to be
// unique across a Google Cloud project, but must be unique within a given location.
func (o ClientCloudKmsConfigPtrOutput) KmsRing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCloudKmsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.KmsRing
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCloudKmsConfigInput)(nil)).Elem(), ClientCloudKmsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCloudKmsConfigPtrInput)(nil)).Elem(), ClientCloudKmsConfigArgs{})
	pulumi.RegisterOutputType(ClientCloudKmsConfigOutput{})
	pulumi.RegisterOutputType(ClientCloudKmsConfigPtrOutput{})
}
