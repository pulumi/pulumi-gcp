// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PolicyOrchestrator helps managing project+zone level policy resources (e.g.
// OS Policy Assignments), by providing tools to create, update and delete them
// across projects and locations, at scale.
//
// ## Example Usage
//
// ### Osconfigv2 Policy Orchestrator For Folder Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/folder"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/osconfig"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myFolder, err := organizations.NewFolder(ctx, "my_folder", &organizations.FolderArgs{
//				DisplayName:        pulumi.String("po-folder"),
//				Parent:             pulumi.String("organizations/123456789"),
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			osconfigSa, err := folder.NewServiceIdentity(ctx, "osconfig_sa", &folder.ServiceIdentityArgs{
//				Folder:  myFolder.FolderId,
//				Service: pulumi.String("osconfig.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			rippleSa, err := folder.NewServiceIdentity(ctx, "ripple_sa", &folder.ServiceIdentityArgs{
//				Folder:  myFolder.FolderId,
//				Service: pulumi.String("progressiverollout.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			wait30Sec, err := time.NewSleep(ctx, "wait_30_sec", &time.SleepArgs{
//				CreateDuration: "30s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				osconfigSa,
//				rippleSa,
//			}))
//			if err != nil {
//				return err
//			}
//			iamOsconfigServiceAgent, err := folder.NewIAMMember(ctx, "iam_osconfig_service_agent", &folder.IAMMemberArgs{
//				Folder: myFolder.FolderId,
//				Role:   pulumi.String("roles/osconfig.serviceAgent"),
//				Member: osconfigSa.Member,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait30Sec,
//			}))
//			if err != nil {
//				return err
//			}
//			iamOsconfigRolloutServiceAgent, err := folder.NewIAMMember(ctx, "iam_osconfig_rollout_service_agent", &folder.IAMMemberArgs{
//				Folder: myFolder.FolderId,
//				Role:   pulumi.String("roles/osconfig.rolloutServiceAgent"),
//				Member: myFolder.FolderId.ApplyT(func(folderId string) (string, error) {
//					return fmt.Sprintf("serviceAccount:service-folder-%v@gcp-sa-osconfig-rollout.iam.gserviceaccount.com", folderId), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				iamOsconfigServiceAgent,
//			}))
//			if err != nil {
//				return err
//			}
//			iamProgressiverolloutServiceAgent, err := folder.NewIAMMember(ctx, "iam_progressiverollout_service_agent", &folder.IAMMemberArgs{
//				Folder: myFolder.FolderId,
//				Role:   pulumi.String("roles/progressiverollout.serviceAgent"),
//				Member: rippleSa.Member,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				iamOsconfigRolloutServiceAgent,
//			}))
//			if err != nil {
//				return err
//			}
//			wait3Min, err := time.NewSleep(ctx, "wait_3_min", &time.SleepArgs{
//				CreateDuration: "180s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				iamProgressiverolloutServiceAgent,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = osconfig.NewV2PolicyOrchestratorForFolder(ctx, "policy_orchestrator_for_folder", &osconfig.V2PolicyOrchestratorForFolderArgs{
//				PolicyOrchestratorId: pulumi.String("po-folder"),
//				FolderId:             myFolder.FolderId,
//				State:                pulumi.String("ACTIVE"),
//				Action:               pulumi.String("UPSERT"),
//				OrchestratedResource: &osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceArgs{
//					Id: pulumi.String("test-orchestrated-resource-folder"),
//					OsPolicyAssignmentV1Payload: &osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs{
//						OsPolicies: osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArray{
//							&osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs{
//								Id:   pulumi.String("test-os-policy-folder"),
//								Mode: pulumi.String("VALIDATION"),
//								ResourceGroups: osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArray{
//									&osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs{
//										Resources: osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArray{
//											&osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs{
//												Id: pulumi.String("resource-tf"),
//												File: &osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs{
//													Content: pulumi.String("file-content-tf"),
//													Path:    pulumi.String("file-path-tf-1"),
//													State:   pulumi.String("PRESENT"),
//												},
//											},
//										},
//									},
//								},
//							},
//						},
//						InstanceFilter: &osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs{
//							Inventories: osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArray{
//								&osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs{
//									OsShortName: pulumi.String("windows-10"),
//								},
//							},
//						},
//						Rollout: &osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs{
//							DisruptionBudget: &osconfig.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutDisruptionBudgetArgs{
//								Percent: pulumi.Int(100),
//							},
//							MinWaitDuration: pulumi.String("60s"),
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"state": pulumi.String("active"),
//				},
//				OrchestrationScope: &osconfig.V2PolicyOrchestratorForFolderOrchestrationScopeArgs{
//					Selectors: osconfig.V2PolicyOrchestratorForFolderOrchestrationScopeSelectorArray{
//						&osconfig.V2PolicyOrchestratorForFolderOrchestrationScopeSelectorArgs{
//							LocationSelector: &osconfig.V2PolicyOrchestratorForFolderOrchestrationScopeSelectorLocationSelectorArgs{
//								IncludedLocations: pulumi.StringArray{
//									pulumi.String(""),
//								},
//							},
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait3Min,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PolicyOrchestratorForFolder can be imported using any of these accepted formats:
//
// * `folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`
//
// * `{{folder_id}}/{{policy_orchestrator_id}}`
//
// When using the `pulumi import` command, PolicyOrchestratorForFolder can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder default folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}
// ```
//
// ```sh
// $ pulumi import gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder default {{folder_id}}/{{policy_orchestrator_id}}
// ```
type V2PolicyOrchestratorForFolder struct {
	pulumi.CustomResourceState

	// Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringOutput `pulumi:"action"`
	// Timestamp when the policy orchestrator resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The parent resource name in the form of `folders/{folder_id}/locations/global`.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorForFolderOrchestratedResourceOutput `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope V2PolicyOrchestratorForFolderOrchestrationScopePtrOutput `pulumi:"orchestrationScope"`
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates V2PolicyOrchestratorForFolderOrchestrationStateArrayOutput `pulumi:"orchestrationStates"`
	// The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringOutput `pulumi:"policyOrchestratorId"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// (Output)
	// State of the iteration.
	// Possible values:
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Timestamp when the policy orchestrator resource was last modified.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewV2PolicyOrchestratorForFolder registers a new resource with the given unique name, arguments, and options.
func NewV2PolicyOrchestratorForFolder(ctx *pulumi.Context,
	name string, args *V2PolicyOrchestratorForFolderArgs, opts ...pulumi.ResourceOption) (*V2PolicyOrchestratorForFolder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.FolderId == nil {
		return nil, errors.New("invalid value for required argument 'FolderId'")
	}
	if args.OrchestratedResource == nil {
		return nil, errors.New("invalid value for required argument 'OrchestratedResource'")
	}
	if args.PolicyOrchestratorId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyOrchestratorId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2PolicyOrchestratorForFolder
	err := ctx.RegisterResource("gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2PolicyOrchestratorForFolder gets an existing V2PolicyOrchestratorForFolder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2PolicyOrchestratorForFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2PolicyOrchestratorForFolderState, opts ...pulumi.ResourceOption) (*V2PolicyOrchestratorForFolder, error) {
	var resource V2PolicyOrchestratorForFolder
	err := ctx.ReadResource("gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2PolicyOrchestratorForFolder resources.
type v2policyOrchestratorForFolderState struct {
	// Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action *string `pulumi:"action"`
	// Timestamp when the policy orchestrator resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Freeform text describing the purpose of the resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// The parent resource name in the form of `folders/{folder_id}/locations/global`.
	FolderId *string `pulumi:"folderId"`
	// Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name *string `pulumi:"name"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource *V2PolicyOrchestratorForFolderOrchestratedResource `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope *V2PolicyOrchestratorForFolderOrchestrationScope `pulumi:"orchestrationScope"`
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates []V2PolicyOrchestratorForFolderOrchestrationState `pulumi:"orchestrationStates"`
	// The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId *string `pulumi:"policyOrchestratorId"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling *bool `pulumi:"reconciling"`
	// (Output)
	// State of the iteration.
	// Possible values:
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State *string `pulumi:"state"`
	// Timestamp when the policy orchestrator resource was last modified.
	UpdateTime *string `pulumi:"updateTime"`
}

type V2PolicyOrchestratorForFolderState struct {
	// Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringPtrInput
	// Timestamp when the policy orchestrator resource was created.
	CreateTime pulumi.StringPtrInput
	// Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// The parent resource name in the form of `folders/{folder_id}/locations/global`.
	FolderId pulumi.StringPtrInput
	// Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name pulumi.StringPtrInput
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorForFolderOrchestratedResourcePtrInput
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope V2PolicyOrchestratorForFolderOrchestrationScopePtrInput
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates V2PolicyOrchestratorForFolderOrchestrationStateArrayInput
	// The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling pulumi.BoolPtrInput
	// (Output)
	// State of the iteration.
	// Possible values:
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State pulumi.StringPtrInput
	// Timestamp when the policy orchestrator resource was last modified.
	UpdateTime pulumi.StringPtrInput
}

func (V2PolicyOrchestratorForFolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2policyOrchestratorForFolderState)(nil)).Elem()
}

type v2policyOrchestratorForFolderArgs struct {
	// Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action string `pulumi:"action"`
	// Freeform text describing the purpose of the resource.
	Description *string `pulumi:"description"`
	// The parent resource name in the form of `folders/{folder_id}/locations/global`.
	FolderId string `pulumi:"folderId"`
	// Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorForFolderOrchestratedResource `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope *V2PolicyOrchestratorForFolderOrchestrationScope `pulumi:"orchestrationScope"`
	// The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId string `pulumi:"policyOrchestratorId"`
	// (Output)
	// State of the iteration.
	// Possible values:
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a V2PolicyOrchestratorForFolder resource.
type V2PolicyOrchestratorForFolderArgs struct {
	// Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringInput
	// Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrInput
	// The parent resource name in the form of `folders/{folder_id}/locations/global`.
	FolderId pulumi.StringInput
	// Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorForFolderOrchestratedResourceInput
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope V2PolicyOrchestratorForFolderOrchestrationScopePtrInput
	// The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringInput
	// (Output)
	// State of the iteration.
	// Possible values:
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State pulumi.StringPtrInput
}

func (V2PolicyOrchestratorForFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2policyOrchestratorForFolderArgs)(nil)).Elem()
}

type V2PolicyOrchestratorForFolderInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorForFolderOutput() V2PolicyOrchestratorForFolderOutput
	ToV2PolicyOrchestratorForFolderOutputWithContext(ctx context.Context) V2PolicyOrchestratorForFolderOutput
}

func (*V2PolicyOrchestratorForFolder) ElementType() reflect.Type {
	return reflect.TypeOf((**V2PolicyOrchestratorForFolder)(nil)).Elem()
}

func (i *V2PolicyOrchestratorForFolder) ToV2PolicyOrchestratorForFolderOutput() V2PolicyOrchestratorForFolderOutput {
	return i.ToV2PolicyOrchestratorForFolderOutputWithContext(context.Background())
}

func (i *V2PolicyOrchestratorForFolder) ToV2PolicyOrchestratorForFolderOutputWithContext(ctx context.Context) V2PolicyOrchestratorForFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorForFolderOutput)
}

// V2PolicyOrchestratorForFolderArrayInput is an input type that accepts V2PolicyOrchestratorForFolderArray and V2PolicyOrchestratorForFolderArrayOutput values.
// You can construct a concrete instance of `V2PolicyOrchestratorForFolderArrayInput` via:
//
//	V2PolicyOrchestratorForFolderArray{ V2PolicyOrchestratorForFolderArgs{...} }
type V2PolicyOrchestratorForFolderArrayInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorForFolderArrayOutput() V2PolicyOrchestratorForFolderArrayOutput
	ToV2PolicyOrchestratorForFolderArrayOutputWithContext(context.Context) V2PolicyOrchestratorForFolderArrayOutput
}

type V2PolicyOrchestratorForFolderArray []V2PolicyOrchestratorForFolderInput

func (V2PolicyOrchestratorForFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2PolicyOrchestratorForFolder)(nil)).Elem()
}

func (i V2PolicyOrchestratorForFolderArray) ToV2PolicyOrchestratorForFolderArrayOutput() V2PolicyOrchestratorForFolderArrayOutput {
	return i.ToV2PolicyOrchestratorForFolderArrayOutputWithContext(context.Background())
}

func (i V2PolicyOrchestratorForFolderArray) ToV2PolicyOrchestratorForFolderArrayOutputWithContext(ctx context.Context) V2PolicyOrchestratorForFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorForFolderArrayOutput)
}

// V2PolicyOrchestratorForFolderMapInput is an input type that accepts V2PolicyOrchestratorForFolderMap and V2PolicyOrchestratorForFolderMapOutput values.
// You can construct a concrete instance of `V2PolicyOrchestratorForFolderMapInput` via:
//
//	V2PolicyOrchestratorForFolderMap{ "key": V2PolicyOrchestratorForFolderArgs{...} }
type V2PolicyOrchestratorForFolderMapInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorForFolderMapOutput() V2PolicyOrchestratorForFolderMapOutput
	ToV2PolicyOrchestratorForFolderMapOutputWithContext(context.Context) V2PolicyOrchestratorForFolderMapOutput
}

type V2PolicyOrchestratorForFolderMap map[string]V2PolicyOrchestratorForFolderInput

func (V2PolicyOrchestratorForFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2PolicyOrchestratorForFolder)(nil)).Elem()
}

func (i V2PolicyOrchestratorForFolderMap) ToV2PolicyOrchestratorForFolderMapOutput() V2PolicyOrchestratorForFolderMapOutput {
	return i.ToV2PolicyOrchestratorForFolderMapOutputWithContext(context.Background())
}

func (i V2PolicyOrchestratorForFolderMap) ToV2PolicyOrchestratorForFolderMapOutputWithContext(ctx context.Context) V2PolicyOrchestratorForFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorForFolderMapOutput)
}

type V2PolicyOrchestratorForFolderOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorForFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2PolicyOrchestratorForFolder)(nil)).Elem()
}

func (o V2PolicyOrchestratorForFolderOutput) ToV2PolicyOrchestratorForFolderOutput() V2PolicyOrchestratorForFolderOutput {
	return o
}

func (o V2PolicyOrchestratorForFolderOutput) ToV2PolicyOrchestratorForFolderOutputWithContext(ctx context.Context) V2PolicyOrchestratorForFolderOutput {
	return o
}

// Action to be done by the orchestrator in
// `projects/{project_id}/zones/{zone_id}` locations defined by the
// `orchestrationScope`. Allowed values:
// - `UPSERT` - Orchestrator will create or update target resources.
// - `DELETE` - Orchestrator will delete target resources, if they exist
func (o V2PolicyOrchestratorForFolderOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Timestamp when the policy orchestrator resource was created.
func (o V2PolicyOrchestratorForFolderOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Freeform text describing the purpose of the resource.
func (o V2PolicyOrchestratorForFolderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o V2PolicyOrchestratorForFolderOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// This checksum is computed by the server based on the value of other
// fields, and may be sent on update and delete requests to ensure the
// client has an up-to-date value before proceeding.
func (o V2PolicyOrchestratorForFolderOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The parent resource name in the form of `folders/{folder_id}/locations/global`.
func (o V2PolicyOrchestratorForFolderOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o V2PolicyOrchestratorForFolderOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Identifier. In form of
// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
func (o V2PolicyOrchestratorForFolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Represents a resource that is being orchestrated by the policy orchestrator.
// Structure is documented below.
func (o V2PolicyOrchestratorForFolderOutput) OrchestratedResource() V2PolicyOrchestratorForFolderOrchestratedResourceOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) V2PolicyOrchestratorForFolderOrchestratedResourceOutput {
		return v.OrchestratedResource
	}).(V2PolicyOrchestratorForFolderOrchestratedResourceOutput)
}

// Defines a set of selectors which drive which resources are in scope of policy orchestration.
func (o V2PolicyOrchestratorForFolderOutput) OrchestrationScope() V2PolicyOrchestratorForFolderOrchestrationScopePtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) V2PolicyOrchestratorForFolderOrchestrationScopePtrOutput {
		return v.OrchestrationScope
	}).(V2PolicyOrchestratorForFolderOrchestrationScopePtrOutput)
}

// Describes the state of the orchestration process.
// Structure is documented below.
func (o V2PolicyOrchestratorForFolderOutput) OrchestrationStates() V2PolicyOrchestratorForFolderOrchestrationStateArrayOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) V2PolicyOrchestratorForFolderOrchestrationStateArrayOutput {
		return v.OrchestrationStates
	}).(V2PolicyOrchestratorForFolderOrchestrationStateArrayOutput)
}

// The logical identifier of the policy orchestrator, with the following
// restrictions:
// * Must contain only lowercase letters, numbers, and hyphens.
// * Must start with a letter.
// * Must be between 1-63 characters.
// * Must end with a number or a letter.
// * Must be unique within the parent.
func (o V2PolicyOrchestratorForFolderOutput) PolicyOrchestratorId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringOutput { return v.PolicyOrchestratorId }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o V2PolicyOrchestratorForFolderOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Set to true, if the there are ongoing changes being applied by the
// orchestrator.
func (o V2PolicyOrchestratorForFolderOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// (Output)
// State of the iteration.
// Possible values:
// PROCESSING
// COMPLETED
// FAILED
// CANCELLED
// UNKNOWN
func (o V2PolicyOrchestratorForFolderOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Timestamp when the policy orchestrator resource was last modified.
func (o V2PolicyOrchestratorForFolderOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForFolder) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type V2PolicyOrchestratorForFolderArrayOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorForFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2PolicyOrchestratorForFolder)(nil)).Elem()
}

func (o V2PolicyOrchestratorForFolderArrayOutput) ToV2PolicyOrchestratorForFolderArrayOutput() V2PolicyOrchestratorForFolderArrayOutput {
	return o
}

func (o V2PolicyOrchestratorForFolderArrayOutput) ToV2PolicyOrchestratorForFolderArrayOutputWithContext(ctx context.Context) V2PolicyOrchestratorForFolderArrayOutput {
	return o
}

func (o V2PolicyOrchestratorForFolderArrayOutput) Index(i pulumi.IntInput) V2PolicyOrchestratorForFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2PolicyOrchestratorForFolder {
		return vs[0].([]*V2PolicyOrchestratorForFolder)[vs[1].(int)]
	}).(V2PolicyOrchestratorForFolderOutput)
}

type V2PolicyOrchestratorForFolderMapOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorForFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2PolicyOrchestratorForFolder)(nil)).Elem()
}

func (o V2PolicyOrchestratorForFolderMapOutput) ToV2PolicyOrchestratorForFolderMapOutput() V2PolicyOrchestratorForFolderMapOutput {
	return o
}

func (o V2PolicyOrchestratorForFolderMapOutput) ToV2PolicyOrchestratorForFolderMapOutputWithContext(ctx context.Context) V2PolicyOrchestratorForFolderMapOutput {
	return o
}

func (o V2PolicyOrchestratorForFolderMapOutput) MapIndex(k pulumi.StringInput) V2PolicyOrchestratorForFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2PolicyOrchestratorForFolder {
		return vs[0].(map[string]*V2PolicyOrchestratorForFolder)[vs[1].(string)]
	}).(V2PolicyOrchestratorForFolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorForFolderInput)(nil)).Elem(), &V2PolicyOrchestratorForFolder{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorForFolderArrayInput)(nil)).Elem(), V2PolicyOrchestratorForFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorForFolderMapInput)(nil)).Elem(), V2PolicyOrchestratorForFolderMap{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorForFolderOutput{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorForFolderArrayOutput{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorForFolderMapOutput{})
}
