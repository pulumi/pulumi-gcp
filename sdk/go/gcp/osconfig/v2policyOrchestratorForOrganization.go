// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PolicyOrchestrator helps managing project+zone level policy resources (e.g.
// OS Policy Assignments), by providing tools to create, update and delete them
// across projects and locations, at scale.
//
// ## Example Usage
//
// ### Osconfigv2 Policy Orchestrator For Organization Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/osconfig"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osconfig.NewV2PolicyOrchestratorForOrganization(ctx, "policy_orchestrator_for_organization", &osconfig.V2PolicyOrchestratorForOrganizationArgs{
//				PolicyOrchestratorId: pulumi.String("po-org"),
//				OrganizationId:       pulumi.String("123456789"),
//				State:                pulumi.String("ACTIVE"),
//				Action:               pulumi.String("UPSERT"),
//				OrchestratedResource: &osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceArgs{
//					Id: pulumi.String("test-orchestrated-resource-org"),
//					OsPolicyAssignmentV1Payload: &osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadArgs{
//						OsPolicies: osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArray{
//							&osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs{
//								Id:   pulumi.String("test-os-policy-org"),
//								Mode: pulumi.String("VALIDATION"),
//								ResourceGroups: osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArray{
//									&osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs{
//										Resources: osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArray{
//											&osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs{
//												Id: pulumi.String("resource-tf"),
//												File: &osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs{
//													Content: pulumi.String("file-content-tf"),
//													Path:    pulumi.String("file-path-tf-1"),
//													State:   pulumi.String("PRESENT"),
//												},
//											},
//										},
//									},
//								},
//							},
//						},
//						InstanceFilter: &osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs{
//							Inventories: osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArray{
//								&osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs{
//									OsShortName: pulumi.String("windows-10"),
//								},
//							},
//						},
//						Rollout: &osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs{
//							DisruptionBudget: &osconfig.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutDisruptionBudgetArgs{
//								Percent: pulumi.Int(100),
//							},
//							MinWaitDuration: pulumi.String("60s"),
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"state": pulumi.String("active"),
//				},
//				OrchestrationScope: &osconfig.V2PolicyOrchestratorForOrganizationOrchestrationScopeArgs{
//					Selectors: osconfig.V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorArray{
//						&osconfig.V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorArgs{
//							LocationSelector: &osconfig.V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorLocationSelectorArgs{
//								IncludedLocations: pulumi.StringArray{
//									pulumi.String(""),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PolicyOrchestratorForOrganization can be imported using any of these accepted formats:
//
// * `organizations/{{organization_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`
//
// * `{{organization_id}}/{{policy_orchestrator_id}}`
//
// When using the `pulumi import` command, PolicyOrchestratorForOrganization can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:osconfig/v2PolicyOrchestratorForOrganization:V2PolicyOrchestratorForOrganization default organizations/{{organization_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}
// ```
//
// ```sh
// $ pulumi import gcp:osconfig/v2PolicyOrchestratorForOrganization:V2PolicyOrchestratorForOrganization default {{organization_id}}/{{policy_orchestrator_id}}
// ```
type V2PolicyOrchestratorForOrganization struct {
	pulumi.CustomResourceState

	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringOutput `pulumi:"action"`
	// Output only. Timestamp when the policy orchestrator resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Immutable. Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorForOrganizationOrchestratedResourceOutput `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope V2PolicyOrchestratorForOrganizationOrchestrationScopePtrOutput `pulumi:"orchestrationScope"`
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates V2PolicyOrchestratorForOrganizationOrchestrationStateArrayOutput `pulumi:"orchestrationStates"`
	// Part of `parent`. Required. The parent resource name in the form of:
	// * `organizations/{organization_id}/locations/global`
	// * `folders/{folder_id}/locations/global`
	// * `projects/{project_id_or_number}/locations/global`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringOutput `pulumi:"policyOrchestratorId"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// (Output)
	// Output only. State of the iteration.
	// Possible values:
	// STATE_UNSPECIFIED
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Output only. Timestamp when the policy orchestrator resource was last modified.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewV2PolicyOrchestratorForOrganization registers a new resource with the given unique name, arguments, and options.
func NewV2PolicyOrchestratorForOrganization(ctx *pulumi.Context,
	name string, args *V2PolicyOrchestratorForOrganizationArgs, opts ...pulumi.ResourceOption) (*V2PolicyOrchestratorForOrganization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.OrchestratedResource == nil {
		return nil, errors.New("invalid value for required argument 'OrchestratedResource'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.PolicyOrchestratorId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyOrchestratorId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2PolicyOrchestratorForOrganization
	err := ctx.RegisterResource("gcp:osconfig/v2PolicyOrchestratorForOrganization:V2PolicyOrchestratorForOrganization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2PolicyOrchestratorForOrganization gets an existing V2PolicyOrchestratorForOrganization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2PolicyOrchestratorForOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2PolicyOrchestratorForOrganizationState, opts ...pulumi.ResourceOption) (*V2PolicyOrchestratorForOrganization, error) {
	var resource V2PolicyOrchestratorForOrganization
	err := ctx.ReadResource("gcp:osconfig/v2PolicyOrchestratorForOrganization:V2PolicyOrchestratorForOrganization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2PolicyOrchestratorForOrganization resources.
type v2policyOrchestratorForOrganizationState struct {
	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action *string `pulumi:"action"`
	// Output only. Timestamp when the policy orchestrator resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Optional. Freeform text describing the purpose of the resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Immutable. Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name *string `pulumi:"name"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource *V2PolicyOrchestratorForOrganizationOrchestratedResource `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope *V2PolicyOrchestratorForOrganizationOrchestrationScope `pulumi:"orchestrationScope"`
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates []V2PolicyOrchestratorForOrganizationOrchestrationState `pulumi:"orchestrationStates"`
	// Part of `parent`. Required. The parent resource name in the form of:
	// * `organizations/{organization_id}/locations/global`
	// * `folders/{folder_id}/locations/global`
	// * `projects/{project_id_or_number}/locations/global`
	OrganizationId *string `pulumi:"organizationId"`
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId *string `pulumi:"policyOrchestratorId"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling *bool `pulumi:"reconciling"`
	// (Output)
	// Output only. State of the iteration.
	// Possible values:
	// STATE_UNSPECIFIED
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State *string `pulumi:"state"`
	// Output only. Timestamp when the policy orchestrator resource was last modified.
	UpdateTime *string `pulumi:"updateTime"`
}

type V2PolicyOrchestratorForOrganizationState struct {
	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringPtrInput
	// Output only. Timestamp when the policy orchestrator resource was created.
	CreateTime pulumi.StringPtrInput
	// Optional. Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Immutable. Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name pulumi.StringPtrInput
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorForOrganizationOrchestratedResourcePtrInput
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope V2PolicyOrchestratorForOrganizationOrchestrationScopePtrInput
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates V2PolicyOrchestratorForOrganizationOrchestrationStateArrayInput
	// Part of `parent`. Required. The parent resource name in the form of:
	// * `organizations/{organization_id}/locations/global`
	// * `folders/{folder_id}/locations/global`
	// * `projects/{project_id_or_number}/locations/global`
	OrganizationId pulumi.StringPtrInput
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling pulumi.BoolPtrInput
	// (Output)
	// Output only. State of the iteration.
	// Possible values:
	// STATE_UNSPECIFIED
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State pulumi.StringPtrInput
	// Output only. Timestamp when the policy orchestrator resource was last modified.
	UpdateTime pulumi.StringPtrInput
}

func (V2PolicyOrchestratorForOrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2policyOrchestratorForOrganizationState)(nil)).Elem()
}

type v2policyOrchestratorForOrganizationArgs struct {
	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action string `pulumi:"action"`
	// Optional. Freeform text describing the purpose of the resource.
	Description *string `pulumi:"description"`
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorForOrganizationOrchestratedResource `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope *V2PolicyOrchestratorForOrganizationOrchestrationScope `pulumi:"orchestrationScope"`
	// Part of `parent`. Required. The parent resource name in the form of:
	// * `organizations/{organization_id}/locations/global`
	// * `folders/{folder_id}/locations/global`
	// * `projects/{project_id_or_number}/locations/global`
	OrganizationId string `pulumi:"organizationId"`
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId string `pulumi:"policyOrchestratorId"`
	// (Output)
	// Output only. State of the iteration.
	// Possible values:
	// STATE_UNSPECIFIED
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a V2PolicyOrchestratorForOrganization resource.
type V2PolicyOrchestratorForOrganizationArgs struct {
	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringInput
	// Optional. Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrInput
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorForOrganizationOrchestratedResourceInput
	// Defines a set of selectors which drive which resources are in scope of policy orchestration.
	OrchestrationScope V2PolicyOrchestratorForOrganizationOrchestrationScopePtrInput
	// Part of `parent`. Required. The parent resource name in the form of:
	// * `organizations/{organization_id}/locations/global`
	// * `folders/{folder_id}/locations/global`
	// * `projects/{project_id_or_number}/locations/global`
	OrganizationId pulumi.StringInput
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringInput
	// (Output)
	// Output only. State of the iteration.
	// Possible values:
	// STATE_UNSPECIFIED
	// PROCESSING
	// COMPLETED
	// FAILED
	// CANCELLED
	// UNKNOWN
	State pulumi.StringPtrInput
}

func (V2PolicyOrchestratorForOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2policyOrchestratorForOrganizationArgs)(nil)).Elem()
}

type V2PolicyOrchestratorForOrganizationInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorForOrganizationOutput() V2PolicyOrchestratorForOrganizationOutput
	ToV2PolicyOrchestratorForOrganizationOutputWithContext(ctx context.Context) V2PolicyOrchestratorForOrganizationOutput
}

func (*V2PolicyOrchestratorForOrganization) ElementType() reflect.Type {
	return reflect.TypeOf((**V2PolicyOrchestratorForOrganization)(nil)).Elem()
}

func (i *V2PolicyOrchestratorForOrganization) ToV2PolicyOrchestratorForOrganizationOutput() V2PolicyOrchestratorForOrganizationOutput {
	return i.ToV2PolicyOrchestratorForOrganizationOutputWithContext(context.Background())
}

func (i *V2PolicyOrchestratorForOrganization) ToV2PolicyOrchestratorForOrganizationOutputWithContext(ctx context.Context) V2PolicyOrchestratorForOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorForOrganizationOutput)
}

// V2PolicyOrchestratorForOrganizationArrayInput is an input type that accepts V2PolicyOrchestratorForOrganizationArray and V2PolicyOrchestratorForOrganizationArrayOutput values.
// You can construct a concrete instance of `V2PolicyOrchestratorForOrganizationArrayInput` via:
//
//	V2PolicyOrchestratorForOrganizationArray{ V2PolicyOrchestratorForOrganizationArgs{...} }
type V2PolicyOrchestratorForOrganizationArrayInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorForOrganizationArrayOutput() V2PolicyOrchestratorForOrganizationArrayOutput
	ToV2PolicyOrchestratorForOrganizationArrayOutputWithContext(context.Context) V2PolicyOrchestratorForOrganizationArrayOutput
}

type V2PolicyOrchestratorForOrganizationArray []V2PolicyOrchestratorForOrganizationInput

func (V2PolicyOrchestratorForOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2PolicyOrchestratorForOrganization)(nil)).Elem()
}

func (i V2PolicyOrchestratorForOrganizationArray) ToV2PolicyOrchestratorForOrganizationArrayOutput() V2PolicyOrchestratorForOrganizationArrayOutput {
	return i.ToV2PolicyOrchestratorForOrganizationArrayOutputWithContext(context.Background())
}

func (i V2PolicyOrchestratorForOrganizationArray) ToV2PolicyOrchestratorForOrganizationArrayOutputWithContext(ctx context.Context) V2PolicyOrchestratorForOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorForOrganizationArrayOutput)
}

// V2PolicyOrchestratorForOrganizationMapInput is an input type that accepts V2PolicyOrchestratorForOrganizationMap and V2PolicyOrchestratorForOrganizationMapOutput values.
// You can construct a concrete instance of `V2PolicyOrchestratorForOrganizationMapInput` via:
//
//	V2PolicyOrchestratorForOrganizationMap{ "key": V2PolicyOrchestratorForOrganizationArgs{...} }
type V2PolicyOrchestratorForOrganizationMapInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorForOrganizationMapOutput() V2PolicyOrchestratorForOrganizationMapOutput
	ToV2PolicyOrchestratorForOrganizationMapOutputWithContext(context.Context) V2PolicyOrchestratorForOrganizationMapOutput
}

type V2PolicyOrchestratorForOrganizationMap map[string]V2PolicyOrchestratorForOrganizationInput

func (V2PolicyOrchestratorForOrganizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2PolicyOrchestratorForOrganization)(nil)).Elem()
}

func (i V2PolicyOrchestratorForOrganizationMap) ToV2PolicyOrchestratorForOrganizationMapOutput() V2PolicyOrchestratorForOrganizationMapOutput {
	return i.ToV2PolicyOrchestratorForOrganizationMapOutputWithContext(context.Background())
}

func (i V2PolicyOrchestratorForOrganizationMap) ToV2PolicyOrchestratorForOrganizationMapOutputWithContext(ctx context.Context) V2PolicyOrchestratorForOrganizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorForOrganizationMapOutput)
}

type V2PolicyOrchestratorForOrganizationOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorForOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2PolicyOrchestratorForOrganization)(nil)).Elem()
}

func (o V2PolicyOrchestratorForOrganizationOutput) ToV2PolicyOrchestratorForOrganizationOutput() V2PolicyOrchestratorForOrganizationOutput {
	return o
}

func (o V2PolicyOrchestratorForOrganizationOutput) ToV2PolicyOrchestratorForOrganizationOutputWithContext(ctx context.Context) V2PolicyOrchestratorForOrganizationOutput {
	return o
}

// Required. Action to be done by the orchestrator in
// `projects/{project_id}/zones/{zone_id}` locations defined by the
// `orchestrationScope`. Allowed values:
// - `UPSERT` - Orchestrator will create or update target resources.
// - `DELETE` - Orchestrator will delete target resources, if they exist
func (o V2PolicyOrchestratorForOrganizationOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Output only. Timestamp when the policy orchestrator resource was created.
func (o V2PolicyOrchestratorForOrganizationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Freeform text describing the purpose of the resource.
func (o V2PolicyOrchestratorForOrganizationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o V2PolicyOrchestratorForOrganizationOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Output only. This checksum is computed by the server based on the value of other
// fields, and may be sent on update and delete requests to ensure the
// client has an up-to-date value before proceeding.
func (o V2PolicyOrchestratorForOrganizationOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o V2PolicyOrchestratorForOrganizationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Immutable. Identifier. In form of
// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
func (o V2PolicyOrchestratorForOrganizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Represents a resource that is being orchestrated by the policy orchestrator.
// Structure is documented below.
func (o V2PolicyOrchestratorForOrganizationOutput) OrchestratedResource() V2PolicyOrchestratorForOrganizationOrchestratedResourceOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) V2PolicyOrchestratorForOrganizationOrchestratedResourceOutput {
		return v.OrchestratedResource
	}).(V2PolicyOrchestratorForOrganizationOrchestratedResourceOutput)
}

// Defines a set of selectors which drive which resources are in scope of policy orchestration.
func (o V2PolicyOrchestratorForOrganizationOutput) OrchestrationScope() V2PolicyOrchestratorForOrganizationOrchestrationScopePtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) V2PolicyOrchestratorForOrganizationOrchestrationScopePtrOutput {
		return v.OrchestrationScope
	}).(V2PolicyOrchestratorForOrganizationOrchestrationScopePtrOutput)
}

// Describes the state of the orchestration process.
// Structure is documented below.
func (o V2PolicyOrchestratorForOrganizationOutput) OrchestrationStates() V2PolicyOrchestratorForOrganizationOrchestrationStateArrayOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) V2PolicyOrchestratorForOrganizationOrchestrationStateArrayOutput {
		return v.OrchestrationStates
	}).(V2PolicyOrchestratorForOrganizationOrchestrationStateArrayOutput)
}

// Part of `parent`. Required. The parent resource name in the form of:
// * `organizations/{organization_id}/locations/global`
// * `folders/{folder_id}/locations/global`
// * `projects/{project_id_or_number}/locations/global`
func (o V2PolicyOrchestratorForOrganizationOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Required. The logical identifier of the policy orchestrator, with the following
// restrictions:
// * Must contain only lowercase letters, numbers, and hyphens.
// * Must start with a letter.
// * Must be between 1-63 characters.
// * Must end with a number or a letter.
// * Must be unique within the parent.
func (o V2PolicyOrchestratorForOrganizationOutput) PolicyOrchestratorId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringOutput { return v.PolicyOrchestratorId }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o V2PolicyOrchestratorForOrganizationOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Set to true, if the there are ongoing changes being applied by the
// orchestrator.
func (o V2PolicyOrchestratorForOrganizationOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// (Output)
// Output only. State of the iteration.
// Possible values:
// STATE_UNSPECIFIED
// PROCESSING
// COMPLETED
// FAILED
// CANCELLED
// UNKNOWN
func (o V2PolicyOrchestratorForOrganizationOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Output only. Timestamp when the policy orchestrator resource was last modified.
func (o V2PolicyOrchestratorForOrganizationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestratorForOrganization) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type V2PolicyOrchestratorForOrganizationArrayOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorForOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2PolicyOrchestratorForOrganization)(nil)).Elem()
}

func (o V2PolicyOrchestratorForOrganizationArrayOutput) ToV2PolicyOrchestratorForOrganizationArrayOutput() V2PolicyOrchestratorForOrganizationArrayOutput {
	return o
}

func (o V2PolicyOrchestratorForOrganizationArrayOutput) ToV2PolicyOrchestratorForOrganizationArrayOutputWithContext(ctx context.Context) V2PolicyOrchestratorForOrganizationArrayOutput {
	return o
}

func (o V2PolicyOrchestratorForOrganizationArrayOutput) Index(i pulumi.IntInput) V2PolicyOrchestratorForOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2PolicyOrchestratorForOrganization {
		return vs[0].([]*V2PolicyOrchestratorForOrganization)[vs[1].(int)]
	}).(V2PolicyOrchestratorForOrganizationOutput)
}

type V2PolicyOrchestratorForOrganizationMapOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorForOrganizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2PolicyOrchestratorForOrganization)(nil)).Elem()
}

func (o V2PolicyOrchestratorForOrganizationMapOutput) ToV2PolicyOrchestratorForOrganizationMapOutput() V2PolicyOrchestratorForOrganizationMapOutput {
	return o
}

func (o V2PolicyOrchestratorForOrganizationMapOutput) ToV2PolicyOrchestratorForOrganizationMapOutputWithContext(ctx context.Context) V2PolicyOrchestratorForOrganizationMapOutput {
	return o
}

func (o V2PolicyOrchestratorForOrganizationMapOutput) MapIndex(k pulumi.StringInput) V2PolicyOrchestratorForOrganizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2PolicyOrchestratorForOrganization {
		return vs[0].(map[string]*V2PolicyOrchestratorForOrganization)[vs[1].(string)]
	}).(V2PolicyOrchestratorForOrganizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorForOrganizationInput)(nil)).Elem(), &V2PolicyOrchestratorForOrganization{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorForOrganizationArrayInput)(nil)).Elem(), V2PolicyOrchestratorForOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorForOrganizationMapInput)(nil)).Elem(), V2PolicyOrchestratorForOrganizationMap{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorForOrganizationOutput{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorForOrganizationArrayOutput{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorForOrganizationMapOutput{})
}
