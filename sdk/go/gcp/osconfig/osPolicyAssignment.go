// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package osconfig

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an OSPolicyAssignment resource.
//
// ## Example Usage
// ### Fixed_os_policy_assignment
// An example of an osconfig os policy assignment with fixed rollout disruption budget
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/osconfig"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := osconfig.NewOsPolicyAssignment(ctx, "primary", &osconfig.OsPolicyAssignmentArgs{
// 			Description: pulumi.String("A test os policy assignment"),
// 			InstanceFilter: &osconfig.OsPolicyAssignmentInstanceFilterArgs{
// 				All: pulumi.Bool(false),
// 				ExclusionLabels: osconfig.OsPolicyAssignmentInstanceFilterExclusionLabelArray{
// 					&osconfig.OsPolicyAssignmentInstanceFilterExclusionLabelArgs{
// 						Labels: pulumi.StringMap{
// 							"label-two": pulumi.String("value-two"),
// 						},
// 					},
// 				},
// 				InclusionLabels: osconfig.OsPolicyAssignmentInstanceFilterInclusionLabelArray{
// 					&osconfig.OsPolicyAssignmentInstanceFilterInclusionLabelArgs{
// 						Labels: pulumi.StringMap{
// 							"label-one": pulumi.String("value-one"),
// 						},
// 					},
// 				},
// 				Inventories: osconfig.OsPolicyAssignmentInstanceFilterInventoryArray{
// 					&osconfig.OsPolicyAssignmentInstanceFilterInventoryArgs{
// 						OsShortName: pulumi.String("centos"),
// 						OsVersion:   pulumi.String("8.*"),
// 					},
// 				},
// 			},
// 			Location: pulumi.String("us-west1-a"),
// 			OsPolicies: osconfig.OsPolicyAssignmentOsPolicyArray{
// 				&osconfig.OsPolicyAssignmentOsPolicyArgs{
// 					AllowNoResourceGroupMatch: pulumi.Bool(false),
// 					Description:               pulumi.String("A test os policy"),
// 					Id:                        pulumi.String("policy"),
// 					Mode:                      pulumi.String("VALIDATION"),
// 					ResourceGroups: osconfig.OsPolicyAssignmentOsPolicyResourceGroupArray{
// 						&osconfig.OsPolicyAssignmentOsPolicyResourceGroupArgs{
// 							InventoryFilters: osconfig.OsPolicyAssignmentOsPolicyResourceGroupInventoryFilterArray{
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupInventoryFilterArgs{
// 									OsShortName: pulumi.String("centos"),
// 									OsVersion:   pulumi.String("8.*"),
// 								},
// 							},
// 							Resources: osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArray{
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("apt"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										Apt: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgAptArgs{
// 											Name: pulumi.String("bazel"),
// 										},
// 										DesiredState: pulumi.String("INSTALLED"),
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("deb1"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										Deb: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebArgs{
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceArgs{
// 												LocalPath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/package.deb")),
// 											},
// 										},
// 										DesiredState: pulumi.String("INSTALLED"),
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("deb2"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										Deb: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebArgs{
// 											PullDeps: pulumi.Bool(true),
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceArgs{
// 												AllowInsecure: pulumi.Bool(true),
// 												Remote: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceRemoteArgs{
// 													Sha256Checksum: pulumi.String("3bbfd1043cd7afdb78cf9afec36c0c5370d2fea98166537b4e67f3816f256025"),
// 													Uri:            pulumi.String("ftp.us.debian.org/debian/package.deb"),
// 												},
// 											},
// 										},
// 										DesiredState: pulumi.String("INSTALLED"),
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("deb3"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										Deb: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebArgs{
// 											PullDeps: pulumi.Bool(true),
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceArgs{
// 												Gcs: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceGcsArgs{
// 													Bucket:     pulumi.String("test-bucket"),
// 													Generation: pulumi.Int(1),
// 													Object:     pulumi.String("test-object"),
// 												},
// 											},
// 										},
// 										DesiredState: pulumi.String("INSTALLED"),
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("yum"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Yum: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgYumArgs{
// 											Name: pulumi.String("gstreamer-plugins-base-devel.x86_64"),
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("zypper"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Zypper: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgZypperArgs{
// 											Name: pulumi.String("gcc"),
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("rpm1"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Rpm: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmArgs{
// 											PullDeps: pulumi.Bool(true),
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceArgs{
// 												LocalPath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/package.rpm")),
// 											},
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("rpm2"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Rpm: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmArgs{
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceArgs{
// 												AllowInsecure: pulumi.Bool(true),
// 												Remote: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceRemoteArgs{
// 													Sha256Checksum: pulumi.String("3bbfd1043cd7afdb78cf9afec36c0c5370d2fea98166537b4e67f3816f256025"),
// 													Uri:            pulumi.String("https://mirror.jaleco.com/centos/8.3.2011/BaseOS/x86_64/os/Packages/efi-filesystem-3-2.el8.noarch.rpm"),
// 												},
// 											},
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("rpm3"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Rpm: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmArgs{
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceArgs{
// 												Gcs: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceGcsArgs{
// 													Bucket:     pulumi.String("test-bucket"),
// 													Generation: pulumi.Int(1),
// 													Object:     pulumi.String("test-object"),
// 												},
// 											},
// 										},
// 									},
// 								},
// 							},
// 						},
// 						&osconfig.OsPolicyAssignmentOsPolicyResourceGroupArgs{
// 							Resources: osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArray{
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("apt-to-deb"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										Apt: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgAptArgs{
// 											Name: pulumi.String("bazel"),
// 										},
// 										DesiredState: pulumi.String("INSTALLED"),
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("deb-local-path-to-gcs"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										Deb: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebArgs{
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceArgs{
// 												LocalPath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/package.deb")),
// 											},
// 										},
// 										DesiredState: pulumi.String("INSTALLED"),
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("googet"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Googet: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgGoogetArgs{
// 											Name: pulumi.String("gcc"),
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("msi1"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Msi: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiArgs{
// 											Properties: pulumi.StringArray{
// 												pulumi.String("REBOOT=ReallySuppress"),
// 											},
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceArgs{
// 												LocalPath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/package.msi")),
// 											},
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("msi2"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Msi: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiArgs{
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceArgs{
// 												AllowInsecure: pulumi.Bool(true),
// 												Remote: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceRemoteArgs{
// 													Sha256Checksum: pulumi.String("3bbfd1043cd7afdb78cf9afec36c0c5370d2fea98166537b4e67f3816f256025"),
// 													Uri:            pulumi.String("https://remote.uri.com/package.msi"),
// 												},
// 											},
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("msi3"),
// 									Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
// 										DesiredState: pulumi.String("INSTALLED"),
// 										Msi: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiArgs{
// 											Source: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceArgs{
// 												Gcs: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceGcsArgs{
// 													Bucket:     pulumi.String("test-bucket"),
// 													Generation: pulumi.Int(1),
// 													Object:     pulumi.String("test-object"),
// 												},
// 											},
// 										},
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 			Project: pulumi.String("my-project-name"),
// 			Rollout: &osconfig.OsPolicyAssignmentRolloutArgs{
// 				DisruptionBudget: &osconfig.OsPolicyAssignmentRolloutDisruptionBudgetArgs{
// 					Fixed: pulumi.Int(1),
// 				},
// 				MinWaitDuration: pulumi.String("3.5s"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Percent_os_policy_assignment
// An example of an osconfig os policy assignment with percent rollout disruption budget
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/osconfig"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := osconfig.NewOsPolicyAssignment(ctx, "primary", &osconfig.OsPolicyAssignmentArgs{
// 			Description: pulumi.String("A test os policy assignment"),
// 			InstanceFilter: &osconfig.OsPolicyAssignmentInstanceFilterArgs{
// 				All: pulumi.Bool(true),
// 			},
// 			Location: pulumi.String("us-west1-a"),
// 			OsPolicies: osconfig.OsPolicyAssignmentOsPolicyArray{
// 				&osconfig.OsPolicyAssignmentOsPolicyArgs{
// 					Id:   pulumi.String("policy"),
// 					Mode: pulumi.String("VALIDATION"),
// 					ResourceGroups: osconfig.OsPolicyAssignmentOsPolicyResourceGroupArray{
// 						&osconfig.OsPolicyAssignmentOsPolicyResourceGroupArgs{
// 							Resources: osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArray{
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("apt-to-yum"),
// 									Repository: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryArgs{
// 										Apt: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryAptArgs{
// 											ArchiveType: pulumi.String("DEB"),
// 											Components: pulumi.StringArray{
// 												pulumi.String("doc"),
// 											},
// 											Distribution: pulumi.String("debian"),
// 											GpgKey:       pulumi.String(".gnupg/pubring.kbx"),
// 											Uri:          pulumi.String("https://atl.mirrors.clouvider.net/debian"),
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("yum"),
// 									Repository: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryArgs{
// 										Yum: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryYumArgs{
// 											BaseUrl:     pulumi.String("http://centos.s.uw.edu/centos/"),
// 											DisplayName: pulumi.String("yum"),
// 											GpgKeys: pulumi.StringArray{
// 												pulumi.String("RPM-GPG-KEY-CentOS-7"),
// 											},
// 											Id: pulumi.String("yum"),
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("zypper"),
// 									Repository: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryArgs{
// 										Zypper: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryZypperArgs{
// 											BaseUrl:     pulumi.String("http://mirror.dal10.us.leaseweb.net/opensuse"),
// 											DisplayName: pulumi.String("zypper"),
// 											GpgKeys: pulumi.StringArray{
// 												pulumi.String("sample-key-uri"),
// 											},
// 											Id: pulumi.String("zypper"),
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Id: pulumi.String("goo"),
// 									Repository: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryArgs{
// 										Goo: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryGooArgs{
// 											Name: pulumi.String("goo"),
// 											Url:  pulumi.String("https://foo.com/googet/bar"),
// 										},
// 									},
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Exec: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecArgs{
// 										Enforce: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceArgs{
// 											Args: pulumi.StringArray{
// 												pulumi.String("arg1"),
// 											},
// 											File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileArgs{
// 												AllowInsecure: pulumi.Bool(true),
// 												Remote: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileRemoteArgs{
// 													Sha256Checksum: pulumi.String("c7938fed83afdccbb0e86a2a2e4cad7d5035012ca3214b4a61268393635c3063"),
// 													Uri:            pulumi.String("https://www.example.com/script.sh"),
// 												},
// 											},
// 											Interpreter:    pulumi.String("SHELL"),
// 											OutputFilePath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/out")),
// 										},
// 										Validate: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateArgs{
// 											Args: pulumi.StringArray{
// 												pulumi.String("arg1"),
// 											},
// 											File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileArgs{
// 												LocalPath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/script.sh")),
// 											},
// 											Interpreter:    pulumi.String("SHELL"),
// 											OutputFilePath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/out")),
// 										},
// 									},
// 									Id: pulumi.String("exec1"),
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Exec: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecArgs{
// 										Enforce: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceArgs{
// 											Args: pulumi.StringArray{
// 												pulumi.String("arg1"),
// 											},
// 											File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileArgs{
// 												LocalPath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/script.sh")),
// 											},
// 											Interpreter:    pulumi.String("SHELL"),
// 											OutputFilePath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/out")),
// 										},
// 										Validate: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateArgs{
// 											Args: pulumi.StringArray{
// 												pulumi.String("arg1"),
// 											},
// 											File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileArgs{
// 												AllowInsecure: pulumi.Bool(true),
// 												Remote: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileRemoteArgs{
// 													Sha256Checksum: pulumi.String("c7938fed83afdccbb0e86a2a2e4cad7d5035012ca3214b4a61268393635c3063"),
// 													Uri:            pulumi.String("https://www.example.com/script.sh"),
// 												},
// 											},
// 											Interpreter:    pulumi.String("SHELL"),
// 											OutputFilePath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/out")),
// 										},
// 									},
// 									Id: pulumi.String("exec2"),
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Exec: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecArgs{
// 										Enforce: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceArgs{
// 											Interpreter:    pulumi.String("SHELL"),
// 											OutputFilePath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/out")),
// 											Script:         pulumi.String("pwd"),
// 										},
// 										Validate: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateArgs{
// 											File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileArgs{
// 												AllowInsecure: pulumi.Bool(true),
// 												Gcs: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileGcsArgs{
// 													Bucket:     pulumi.String("test-bucket"),
// 													Generation: pulumi.Int(1),
// 													Object:     pulumi.String("test-object"),
// 												},
// 											},
// 											Interpreter:    pulumi.String("SHELL"),
// 											OutputFilePath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/out")),
// 										},
// 									},
// 									Id: pulumi.String("exec3"),
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									Exec: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecArgs{
// 										Enforce: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceArgs{
// 											File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileArgs{
// 												AllowInsecure: pulumi.Bool(true),
// 												Gcs: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileGcsArgs{
// 													Bucket:     pulumi.String("test-bucket"),
// 													Generation: pulumi.Int(1),
// 													Object:     pulumi.String("test-object"),
// 												},
// 											},
// 											Interpreter:    pulumi.String("SHELL"),
// 											OutputFilePath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/out")),
// 										},
// 										Validate: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateArgs{
// 											Interpreter:    pulumi.String("SHELL"),
// 											OutputFilePath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/out")),
// 											Script:         pulumi.String("pwd"),
// 										},
// 									},
// 									Id: pulumi.String("exec4"),
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileArgs{
// 										File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileArgs{
// 											LocalPath: pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/file")),
// 										},
// 										Path:  pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/file")),
// 										State: pulumi.String("PRESENT"),
// 									},
// 									Id: pulumi.String("file1"),
// 								},
// 							},
// 						},
// 						&osconfig.OsPolicyAssignmentOsPolicyResourceGroupArgs{
// 							Resources: osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArray{
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileArgs{
// 										File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileArgs{
// 											AllowInsecure: pulumi.Bool(true),
// 											Remote: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileRemoteArgs{
// 												Sha256Checksum: pulumi.String("c7938fed83afdccbb0e86a2a2e4cad7d5035012ca3214b4a61268393635c3063"),
// 												Uri:            pulumi.String("https://www.example.com/file"),
// 											},
// 										},
// 										Path:  pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/file")),
// 										State: pulumi.String("PRESENT"),
// 									},
// 									Id: pulumi.String("file2"),
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileArgs{
// 										File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileArgs{
// 											Gcs: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileGcsArgs{
// 												Bucket:     pulumi.String("test-bucket"),
// 												Generation: pulumi.Int(1),
// 												Object:     pulumi.String("test-object"),
// 											},
// 										},
// 										Path:  pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/file")),
// 										State: pulumi.String("PRESENT"),
// 									},
// 									Id: pulumi.String("file3"),
// 								},
// 								&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
// 									File: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceFileArgs{
// 										Content: pulumi.String("sample-content"),
// 										Path:    pulumi.String(fmt.Sprintf("%v%v", "$", "HOME/file")),
// 										State:   pulumi.String("PRESENT"),
// 									},
// 									Id: pulumi.String("file4"),
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 			Project: pulumi.String("my-project-name"),
// 			Rollout: &osconfig.OsPolicyAssignmentRolloutArgs{
// 				DisruptionBudget: &osconfig.OsPolicyAssignmentRolloutDisruptionBudgetArgs{
// 					Percent: pulumi.Int(1),
// 				},
// 				MinWaitDuration: pulumi.String("3.5s"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// OSPolicyAssignment can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default projects/{{project}}/locations/{{location}}/osPolicyAssignments/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{location}}/{{name}}
// ```
type OsPolicyAssignment struct {
	pulumi.CustomResourceState

	// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
	// policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
	// this field.
	Baseline pulumi.BoolOutput `pulumi:"baseline"`
	// Output only. Indicates that this revision deletes the OS policy assignment.
	Deleted pulumi.BoolOutput `pulumi:"deleted"`
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Required. Filter to select VMs.
	InstanceFilter OsPolicyAssignmentInstanceFilterOutput `pulumi:"instanceFilter"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. The name of the repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies OsPolicyAssignmentOsPolicyArrayOutput `pulumi:"osPolicies"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
	// `rollout_state` is one of: * IN_PROGRESS * CANCELLING
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime pulumi.StringOutput `pulumi:"revisionCreateTime"`
	// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
	// assignment
	RevisionId pulumi.StringOutput `pulumi:"revisionId"`
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout OsPolicyAssignmentRolloutOutput `pulumi:"rollout"`
	// Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
	// CANCELLED, SUCCEEDED
	RolloutState pulumi.StringOutput `pulumi:"rolloutState"`
	// Output only. Server generated unique id for the OS policy assignment resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewOsPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewOsPolicyAssignment(ctx *pulumi.Context,
	name string, args *OsPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*OsPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceFilter == nil {
		return nil, errors.New("invalid value for required argument 'InstanceFilter'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.OsPolicies == nil {
		return nil, errors.New("invalid value for required argument 'OsPolicies'")
	}
	if args.Rollout == nil {
		return nil, errors.New("invalid value for required argument 'Rollout'")
	}
	var resource OsPolicyAssignment
	err := ctx.RegisterResource("gcp:osconfig/osPolicyAssignment:OsPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOsPolicyAssignment gets an existing OsPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOsPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OsPolicyAssignmentState, opts ...pulumi.ResourceOption) (*OsPolicyAssignment, error) {
	var resource OsPolicyAssignment
	err := ctx.ReadResource("gcp:osconfig/osPolicyAssignment:OsPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OsPolicyAssignment resources.
type osPolicyAssignmentState struct {
	// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
	// policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
	// this field.
	Baseline *bool `pulumi:"baseline"`
	// Output only. Indicates that this revision deletes the OS policy assignment.
	Deleted *bool `pulumi:"deleted"`
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
	Etag *string `pulumi:"etag"`
	// Required. Filter to select VMs.
	InstanceFilter *OsPolicyAssignmentInstanceFilter `pulumi:"instanceFilter"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Required. The name of the repository.
	Name *string `pulumi:"name"`
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies []OsPolicyAssignmentOsPolicy `pulumi:"osPolicies"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
	// `rollout_state` is one of: * IN_PROGRESS * CANCELLING
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime *string `pulumi:"revisionCreateTime"`
	// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
	// assignment
	RevisionId *string `pulumi:"revisionId"`
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout *OsPolicyAssignmentRollout `pulumi:"rollout"`
	// Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
	// CANCELLED, SUCCEEDED
	RolloutState *string `pulumi:"rolloutState"`
	// Output only. Server generated unique id for the OS policy assignment resource.
	Uid *string `pulumi:"uid"`
}

type OsPolicyAssignmentState struct {
	// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
	// policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
	// this field.
	Baseline pulumi.BoolPtrInput
	// Output only. Indicates that this revision deletes the OS policy assignment.
	Deleted pulumi.BoolPtrInput
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput
	// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringPtrInput
	// Required. Filter to select VMs.
	InstanceFilter OsPolicyAssignmentInstanceFilterPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Required. The name of the repository.
	Name pulumi.StringPtrInput
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies OsPolicyAssignmentOsPolicyArrayInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
	// `rollout_state` is one of: * IN_PROGRESS * CANCELLING
	Reconciling pulumi.BoolPtrInput
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime pulumi.StringPtrInput
	// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
	// assignment
	RevisionId pulumi.StringPtrInput
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout OsPolicyAssignmentRolloutPtrInput
	// Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
	// CANCELLED, SUCCEEDED
	RolloutState pulumi.StringPtrInput
	// Output only. Server generated unique id for the OS policy assignment resource.
	Uid pulumi.StringPtrInput
}

func (OsPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*osPolicyAssignmentState)(nil)).Elem()
}

type osPolicyAssignmentArgs struct {
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// Required. Filter to select VMs.
	InstanceFilter OsPolicyAssignmentInstanceFilter `pulumi:"instanceFilter"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Required. The name of the repository.
	Name *string `pulumi:"name"`
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies []OsPolicyAssignmentOsPolicy `pulumi:"osPolicies"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout OsPolicyAssignmentRollout `pulumi:"rollout"`
}

// The set of arguments for constructing a OsPolicyAssignment resource.
type OsPolicyAssignmentArgs struct {
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput
	// Required. Filter to select VMs.
	InstanceFilter OsPolicyAssignmentInstanceFilterInput
	// The location for the resource
	Location pulumi.StringInput
	// Required. The name of the repository.
	Name pulumi.StringPtrInput
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies OsPolicyAssignmentOsPolicyArrayInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout OsPolicyAssignmentRolloutInput
}

func (OsPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*osPolicyAssignmentArgs)(nil)).Elem()
}

type OsPolicyAssignmentInput interface {
	pulumi.Input

	ToOsPolicyAssignmentOutput() OsPolicyAssignmentOutput
	ToOsPolicyAssignmentOutputWithContext(ctx context.Context) OsPolicyAssignmentOutput
}

func (*OsPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((*OsPolicyAssignment)(nil))
}

func (i *OsPolicyAssignment) ToOsPolicyAssignmentOutput() OsPolicyAssignmentOutput {
	return i.ToOsPolicyAssignmentOutputWithContext(context.Background())
}

func (i *OsPolicyAssignment) ToOsPolicyAssignmentOutputWithContext(ctx context.Context) OsPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsPolicyAssignmentOutput)
}

func (i *OsPolicyAssignment) ToOsPolicyAssignmentPtrOutput() OsPolicyAssignmentPtrOutput {
	return i.ToOsPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (i *OsPolicyAssignment) ToOsPolicyAssignmentPtrOutputWithContext(ctx context.Context) OsPolicyAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsPolicyAssignmentPtrOutput)
}

type OsPolicyAssignmentPtrInput interface {
	pulumi.Input

	ToOsPolicyAssignmentPtrOutput() OsPolicyAssignmentPtrOutput
	ToOsPolicyAssignmentPtrOutputWithContext(ctx context.Context) OsPolicyAssignmentPtrOutput
}

type osPolicyAssignmentPtrType OsPolicyAssignmentArgs

func (*osPolicyAssignmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OsPolicyAssignment)(nil))
}

func (i *osPolicyAssignmentPtrType) ToOsPolicyAssignmentPtrOutput() OsPolicyAssignmentPtrOutput {
	return i.ToOsPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (i *osPolicyAssignmentPtrType) ToOsPolicyAssignmentPtrOutputWithContext(ctx context.Context) OsPolicyAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsPolicyAssignmentPtrOutput)
}

// OsPolicyAssignmentArrayInput is an input type that accepts OsPolicyAssignmentArray and OsPolicyAssignmentArrayOutput values.
// You can construct a concrete instance of `OsPolicyAssignmentArrayInput` via:
//
//          OsPolicyAssignmentArray{ OsPolicyAssignmentArgs{...} }
type OsPolicyAssignmentArrayInput interface {
	pulumi.Input

	ToOsPolicyAssignmentArrayOutput() OsPolicyAssignmentArrayOutput
	ToOsPolicyAssignmentArrayOutputWithContext(context.Context) OsPolicyAssignmentArrayOutput
}

type OsPolicyAssignmentArray []OsPolicyAssignmentInput

func (OsPolicyAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OsPolicyAssignment)(nil)).Elem()
}

func (i OsPolicyAssignmentArray) ToOsPolicyAssignmentArrayOutput() OsPolicyAssignmentArrayOutput {
	return i.ToOsPolicyAssignmentArrayOutputWithContext(context.Background())
}

func (i OsPolicyAssignmentArray) ToOsPolicyAssignmentArrayOutputWithContext(ctx context.Context) OsPolicyAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsPolicyAssignmentArrayOutput)
}

// OsPolicyAssignmentMapInput is an input type that accepts OsPolicyAssignmentMap and OsPolicyAssignmentMapOutput values.
// You can construct a concrete instance of `OsPolicyAssignmentMapInput` via:
//
//          OsPolicyAssignmentMap{ "key": OsPolicyAssignmentArgs{...} }
type OsPolicyAssignmentMapInput interface {
	pulumi.Input

	ToOsPolicyAssignmentMapOutput() OsPolicyAssignmentMapOutput
	ToOsPolicyAssignmentMapOutputWithContext(context.Context) OsPolicyAssignmentMapOutput
}

type OsPolicyAssignmentMap map[string]OsPolicyAssignmentInput

func (OsPolicyAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OsPolicyAssignment)(nil)).Elem()
}

func (i OsPolicyAssignmentMap) ToOsPolicyAssignmentMapOutput() OsPolicyAssignmentMapOutput {
	return i.ToOsPolicyAssignmentMapOutputWithContext(context.Background())
}

func (i OsPolicyAssignmentMap) ToOsPolicyAssignmentMapOutputWithContext(ctx context.Context) OsPolicyAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsPolicyAssignmentMapOutput)
}

type OsPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (OsPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsPolicyAssignment)(nil))
}

func (o OsPolicyAssignmentOutput) ToOsPolicyAssignmentOutput() OsPolicyAssignmentOutput {
	return o
}

func (o OsPolicyAssignmentOutput) ToOsPolicyAssignmentOutputWithContext(ctx context.Context) OsPolicyAssignmentOutput {
	return o
}

func (o OsPolicyAssignmentOutput) ToOsPolicyAssignmentPtrOutput() OsPolicyAssignmentPtrOutput {
	return o.ToOsPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (o OsPolicyAssignmentOutput) ToOsPolicyAssignmentPtrOutputWithContext(ctx context.Context) OsPolicyAssignmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OsPolicyAssignment) *OsPolicyAssignment {
		return &v
	}).(OsPolicyAssignmentPtrOutput)
}

type OsPolicyAssignmentPtrOutput struct{ *pulumi.OutputState }

func (OsPolicyAssignmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsPolicyAssignment)(nil))
}

func (o OsPolicyAssignmentPtrOutput) ToOsPolicyAssignmentPtrOutput() OsPolicyAssignmentPtrOutput {
	return o
}

func (o OsPolicyAssignmentPtrOutput) ToOsPolicyAssignmentPtrOutputWithContext(ctx context.Context) OsPolicyAssignmentPtrOutput {
	return o
}

func (o OsPolicyAssignmentPtrOutput) Elem() OsPolicyAssignmentOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) OsPolicyAssignment {
		if v != nil {
			return *v
		}
		var ret OsPolicyAssignment
		return ret
	}).(OsPolicyAssignmentOutput)
}

type OsPolicyAssignmentArrayOutput struct{ *pulumi.OutputState }

func (OsPolicyAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OsPolicyAssignment)(nil))
}

func (o OsPolicyAssignmentArrayOutput) ToOsPolicyAssignmentArrayOutput() OsPolicyAssignmentArrayOutput {
	return o
}

func (o OsPolicyAssignmentArrayOutput) ToOsPolicyAssignmentArrayOutputWithContext(ctx context.Context) OsPolicyAssignmentArrayOutput {
	return o
}

func (o OsPolicyAssignmentArrayOutput) Index(i pulumi.IntInput) OsPolicyAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OsPolicyAssignment {
		return vs[0].([]OsPolicyAssignment)[vs[1].(int)]
	}).(OsPolicyAssignmentOutput)
}

type OsPolicyAssignmentMapOutput struct{ *pulumi.OutputState }

func (OsPolicyAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OsPolicyAssignment)(nil))
}

func (o OsPolicyAssignmentMapOutput) ToOsPolicyAssignmentMapOutput() OsPolicyAssignmentMapOutput {
	return o
}

func (o OsPolicyAssignmentMapOutput) ToOsPolicyAssignmentMapOutputWithContext(ctx context.Context) OsPolicyAssignmentMapOutput {
	return o
}

func (o OsPolicyAssignmentMapOutput) MapIndex(k pulumi.StringInput) OsPolicyAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OsPolicyAssignment {
		return vs[0].(map[string]OsPolicyAssignment)[vs[1].(string)]
	}).(OsPolicyAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OsPolicyAssignmentInput)(nil)).Elem(), &OsPolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*OsPolicyAssignmentPtrInput)(nil)).Elem(), &OsPolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*OsPolicyAssignmentArrayInput)(nil)).Elem(), OsPolicyAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OsPolicyAssignmentMapInput)(nil)).Elem(), OsPolicyAssignmentMap{})
	pulumi.RegisterOutputType(OsPolicyAssignmentOutput{})
	pulumi.RegisterOutputType(OsPolicyAssignmentPtrOutput{})
	pulumi.RegisterOutputType(OsPolicyAssignmentArrayOutput{})
	pulumi.RegisterOutputType(OsPolicyAssignmentMapOutput{})
}
