// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osconfig

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an OSPolicyAssignment resource.
//
// ## Example Usage
// ### Fixed_os_policy_assignment
// An example of an osconfig os policy assignment with fixed rollout disruption budget
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/osconfig"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osconfig.NewOsPolicyAssignment(ctx, "primary", &osconfig.OsPolicyAssignmentArgs{
//				Description: pulumi.String("A test os policy assignment"),
//				InstanceFilter: &osconfig.OsPolicyAssignmentInstanceFilterArgs{
//					All: pulumi.Bool(false),
//					ExclusionLabels: osconfig.OsPolicyAssignmentInstanceFilterExclusionLabelArray{
//						&osconfig.OsPolicyAssignmentInstanceFilterExclusionLabelArgs{
//							Labels: pulumi.StringMap{
//								"label-two": pulumi.String("value-two"),
//							},
//						},
//					},
//					InclusionLabels: osconfig.OsPolicyAssignmentInstanceFilterInclusionLabelArray{
//						&osconfig.OsPolicyAssignmentInstanceFilterInclusionLabelArgs{
//							Labels: pulumi.StringMap{
//								"label-one": pulumi.String("value-one"),
//							},
//						},
//					},
//					Inventories: osconfig.OsPolicyAssignmentInstanceFilterInventoryArray{
//						&osconfig.OsPolicyAssignmentInstanceFilterInventoryArgs{
//							OsShortName: pulumi.String("centos"),
//							OsVersion:   pulumi.String("8.*"),
//						},
//					},
//				},
//				Location: pulumi.String("us-west1-a"),
//				OsPolicies: osconfig.OsPolicyAssignmentOsPolicyArray{
//					&osconfig.OsPolicyAssignmentOsPolicyArgs{
//						AllowNoResourceGroupMatch: pulumi.Bool(false),
//						Description:               pulumi.String("A test os policy"),
//						Id:                        pulumi.String("policy"),
//						Mode:                      pulumi.String("VALIDATION"),
//						ResourceGroups: osconfig.OsPolicyAssignmentOsPolicyResourceGroupArray{
//							&osconfig.OsPolicyAssignmentOsPolicyResourceGroupArgs{
//								InventoryFilters: osconfig.OsPolicyAssignmentOsPolicyResourceGroupInventoryFilterArray{
//									&osconfig.OsPolicyAssignmentOsPolicyResourceGroupInventoryFilterArgs{
//										OsShortName: pulumi.String("centos"),
//										OsVersion:   pulumi.String("8.*"),
//									},
//								},
//								Resources: osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArray{
//									&osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourceArgs{
//										Id: pulumi.String("apt"),
//										Pkg: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgArgs{
//											Apt: &osconfig.OsPolicyAssignmentOsPolicyResourceGroupResourcePkgAptArgs{
//												Name: pulumi.String("bazel"),
//											},
//											DesiredState: pulumi.String("INSTALLED"),
//										},
//									},
//								},
//							},
//						},
//					},
//				},
//				Project: pulumi.String("my-project-name"),
//				Rollout: &osconfig.OsPolicyAssignmentRolloutArgs{
//					DisruptionBudget: &osconfig.OsPolicyAssignmentRolloutDisruptionBudgetArgs{
//						Fixed: pulumi.Int(1),
//					},
//					MinWaitDuration: pulumi.String("3.5s"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # OSPolicyAssignment can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default projects/{{project}}/locations/{{location}}/osPolicyAssignments/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{location}}/{{name}}
//
// ```
type OsPolicyAssignment struct {
	pulumi.CustomResourceState

	// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
	// policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
	// this field.
	Baseline pulumi.BoolOutput `pulumi:"baseline"`
	// Output only. Indicates that this revision deletes the OS policy assignment.
	Deleted pulumi.BoolOutput `pulumi:"deleted"`
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Required. Filter to select VMs.
	InstanceFilter OsPolicyAssignmentInstanceFilterOutput `pulumi:"instanceFilter"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. The name of the repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies OsPolicyAssignmentOsPolicyArrayOutput `pulumi:"osPolicies"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
	// `rollout_state` is one of: * IN_PROGRESS * CANCELLING
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime pulumi.StringOutput `pulumi:"revisionCreateTime"`
	// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
	// assignment
	RevisionId pulumi.StringOutput `pulumi:"revisionId"`
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout OsPolicyAssignmentRolloutOutput `pulumi:"rollout"`
	// Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
	// CANCELLED, SUCCEEDED
	RolloutState pulumi.StringOutput `pulumi:"rolloutState"`
	// Set to true to skip awaiting rollout during resource creation and update.
	SkipAwaitRollout pulumi.BoolPtrOutput `pulumi:"skipAwaitRollout"`
	// Output only. Server generated unique id for the OS policy assignment resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewOsPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewOsPolicyAssignment(ctx *pulumi.Context,
	name string, args *OsPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*OsPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceFilter == nil {
		return nil, errors.New("invalid value for required argument 'InstanceFilter'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.OsPolicies == nil {
		return nil, errors.New("invalid value for required argument 'OsPolicies'")
	}
	if args.Rollout == nil {
		return nil, errors.New("invalid value for required argument 'Rollout'")
	}
	var resource OsPolicyAssignment
	err := ctx.RegisterResource("gcp:osconfig/osPolicyAssignment:OsPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOsPolicyAssignment gets an existing OsPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOsPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OsPolicyAssignmentState, opts ...pulumi.ResourceOption) (*OsPolicyAssignment, error) {
	var resource OsPolicyAssignment
	err := ctx.ReadResource("gcp:osconfig/osPolicyAssignment:OsPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OsPolicyAssignment resources.
type osPolicyAssignmentState struct {
	// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
	// policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
	// this field.
	Baseline *bool `pulumi:"baseline"`
	// Output only. Indicates that this revision deletes the OS policy assignment.
	Deleted *bool `pulumi:"deleted"`
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
	Etag *string `pulumi:"etag"`
	// Required. Filter to select VMs.
	InstanceFilter *OsPolicyAssignmentInstanceFilter `pulumi:"instanceFilter"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Required. The name of the repository.
	Name *string `pulumi:"name"`
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies []OsPolicyAssignmentOsPolicy `pulumi:"osPolicies"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
	// `rollout_state` is one of: * IN_PROGRESS * CANCELLING
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime *string `pulumi:"revisionCreateTime"`
	// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
	// assignment
	RevisionId *string `pulumi:"revisionId"`
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout *OsPolicyAssignmentRollout `pulumi:"rollout"`
	// Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
	// CANCELLED, SUCCEEDED
	RolloutState *string `pulumi:"rolloutState"`
	// Set to true to skip awaiting rollout during resource creation and update.
	SkipAwaitRollout *bool `pulumi:"skipAwaitRollout"`
	// Output only. Server generated unique id for the OS policy assignment resource.
	Uid *string `pulumi:"uid"`
}

type OsPolicyAssignmentState struct {
	// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
	// policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
	// this field.
	Baseline pulumi.BoolPtrInput
	// Output only. Indicates that this revision deletes the OS policy assignment.
	Deleted pulumi.BoolPtrInput
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput
	// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringPtrInput
	// Required. Filter to select VMs.
	InstanceFilter OsPolicyAssignmentInstanceFilterPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Required. The name of the repository.
	Name pulumi.StringPtrInput
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies OsPolicyAssignmentOsPolicyArrayInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
	// `rollout_state` is one of: * IN_PROGRESS * CANCELLING
	Reconciling pulumi.BoolPtrInput
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime pulumi.StringPtrInput
	// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
	// assignment
	RevisionId pulumi.StringPtrInput
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout OsPolicyAssignmentRolloutPtrInput
	// Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
	// CANCELLED, SUCCEEDED
	RolloutState pulumi.StringPtrInput
	// Set to true to skip awaiting rollout during resource creation and update.
	SkipAwaitRollout pulumi.BoolPtrInput
	// Output only. Server generated unique id for the OS policy assignment resource.
	Uid pulumi.StringPtrInput
}

func (OsPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*osPolicyAssignmentState)(nil)).Elem()
}

type osPolicyAssignmentArgs struct {
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// Required. Filter to select VMs.
	InstanceFilter OsPolicyAssignmentInstanceFilter `pulumi:"instanceFilter"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Required. The name of the repository.
	Name *string `pulumi:"name"`
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies []OsPolicyAssignmentOsPolicy `pulumi:"osPolicies"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout OsPolicyAssignmentRollout `pulumi:"rollout"`
	// Set to true to skip awaiting rollout during resource creation and update.
	SkipAwaitRollout *bool `pulumi:"skipAwaitRollout"`
}

// The set of arguments for constructing a OsPolicyAssignment resource.
type OsPolicyAssignmentArgs struct {
	// OS policy assignment description. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput
	// Required. Filter to select VMs.
	InstanceFilter OsPolicyAssignmentInstanceFilterInput
	// The location for the resource
	Location pulumi.StringInput
	// Required. The name of the repository.
	Name pulumi.StringPtrInput
	// Required. List of OS policies to be applied to the VMs.
	OsPolicies OsPolicyAssignmentOsPolicyArrayInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
	Rollout OsPolicyAssignmentRolloutInput
	// Set to true to skip awaiting rollout during resource creation and update.
	SkipAwaitRollout pulumi.BoolPtrInput
}

func (OsPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*osPolicyAssignmentArgs)(nil)).Elem()
}

type OsPolicyAssignmentInput interface {
	pulumi.Input

	ToOsPolicyAssignmentOutput() OsPolicyAssignmentOutput
	ToOsPolicyAssignmentOutputWithContext(ctx context.Context) OsPolicyAssignmentOutput
}

func (*OsPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**OsPolicyAssignment)(nil)).Elem()
}

func (i *OsPolicyAssignment) ToOsPolicyAssignmentOutput() OsPolicyAssignmentOutput {
	return i.ToOsPolicyAssignmentOutputWithContext(context.Background())
}

func (i *OsPolicyAssignment) ToOsPolicyAssignmentOutputWithContext(ctx context.Context) OsPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsPolicyAssignmentOutput)
}

// OsPolicyAssignmentArrayInput is an input type that accepts OsPolicyAssignmentArray and OsPolicyAssignmentArrayOutput values.
// You can construct a concrete instance of `OsPolicyAssignmentArrayInput` via:
//
//	OsPolicyAssignmentArray{ OsPolicyAssignmentArgs{...} }
type OsPolicyAssignmentArrayInput interface {
	pulumi.Input

	ToOsPolicyAssignmentArrayOutput() OsPolicyAssignmentArrayOutput
	ToOsPolicyAssignmentArrayOutputWithContext(context.Context) OsPolicyAssignmentArrayOutput
}

type OsPolicyAssignmentArray []OsPolicyAssignmentInput

func (OsPolicyAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OsPolicyAssignment)(nil)).Elem()
}

func (i OsPolicyAssignmentArray) ToOsPolicyAssignmentArrayOutput() OsPolicyAssignmentArrayOutput {
	return i.ToOsPolicyAssignmentArrayOutputWithContext(context.Background())
}

func (i OsPolicyAssignmentArray) ToOsPolicyAssignmentArrayOutputWithContext(ctx context.Context) OsPolicyAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsPolicyAssignmentArrayOutput)
}

// OsPolicyAssignmentMapInput is an input type that accepts OsPolicyAssignmentMap and OsPolicyAssignmentMapOutput values.
// You can construct a concrete instance of `OsPolicyAssignmentMapInput` via:
//
//	OsPolicyAssignmentMap{ "key": OsPolicyAssignmentArgs{...} }
type OsPolicyAssignmentMapInput interface {
	pulumi.Input

	ToOsPolicyAssignmentMapOutput() OsPolicyAssignmentMapOutput
	ToOsPolicyAssignmentMapOutputWithContext(context.Context) OsPolicyAssignmentMapOutput
}

type OsPolicyAssignmentMap map[string]OsPolicyAssignmentInput

func (OsPolicyAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OsPolicyAssignment)(nil)).Elem()
}

func (i OsPolicyAssignmentMap) ToOsPolicyAssignmentMapOutput() OsPolicyAssignmentMapOutput {
	return i.ToOsPolicyAssignmentMapOutputWithContext(context.Background())
}

func (i OsPolicyAssignmentMap) ToOsPolicyAssignmentMapOutputWithContext(ctx context.Context) OsPolicyAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsPolicyAssignmentMapOutput)
}

type OsPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (OsPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsPolicyAssignment)(nil)).Elem()
}

func (o OsPolicyAssignmentOutput) ToOsPolicyAssignmentOutput() OsPolicyAssignmentOutput {
	return o
}

func (o OsPolicyAssignmentOutput) ToOsPolicyAssignmentOutputWithContext(ctx context.Context) OsPolicyAssignmentOutput {
	return o
}

// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
// policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
// this field.
func (o OsPolicyAssignmentOutput) Baseline() pulumi.BoolOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.BoolOutput { return v.Baseline }).(pulumi.BoolOutput)
}

// Output only. Indicates that this revision deletes the OS policy assignment.
func (o OsPolicyAssignmentOutput) Deleted() pulumi.BoolOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.BoolOutput { return v.Deleted }).(pulumi.BoolOutput)
}

// OS policy assignment description. Length of the description is limited to 1024 characters.
func (o OsPolicyAssignmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
func (o OsPolicyAssignmentOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Required. Filter to select VMs.
func (o OsPolicyAssignmentOutput) InstanceFilter() OsPolicyAssignmentInstanceFilterOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) OsPolicyAssignmentInstanceFilterOutput { return v.InstanceFilter }).(OsPolicyAssignmentInstanceFilterOutput)
}

// The location for the resource
func (o OsPolicyAssignmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. The name of the repository.
func (o OsPolicyAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. List of OS policies to be applied to the VMs.
func (o OsPolicyAssignmentOutput) OsPolicies() OsPolicyAssignmentOsPolicyArrayOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) OsPolicyAssignmentOsPolicyArrayOutput { return v.OsPolicies }).(OsPolicyAssignmentOsPolicyArrayOutput)
}

// The project for the resource
func (o OsPolicyAssignmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
// `rollout_state` is one of: * IN_PROGRESS * CANCELLING
func (o OsPolicyAssignmentOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Output only. The timestamp that the revision was created.
func (o OsPolicyAssignmentOutput) RevisionCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringOutput { return v.RevisionCreateTime }).(pulumi.StringOutput)
}

// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
// assignment
func (o OsPolicyAssignmentOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment is deleted.
func (o OsPolicyAssignmentOutput) Rollout() OsPolicyAssignmentRolloutOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) OsPolicyAssignmentRolloutOutput { return v.Rollout }).(OsPolicyAssignmentRolloutOutput)
}

// Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
// CANCELLED, SUCCEEDED
func (o OsPolicyAssignmentOutput) RolloutState() pulumi.StringOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringOutput { return v.RolloutState }).(pulumi.StringOutput)
}

// Set to true to skip awaiting rollout during resource creation and update.
func (o OsPolicyAssignmentOutput) SkipAwaitRollout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.BoolPtrOutput { return v.SkipAwaitRollout }).(pulumi.BoolPtrOutput)
}

// Output only. Server generated unique id for the OS policy assignment resource.
func (o OsPolicyAssignmentOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *OsPolicyAssignment) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type OsPolicyAssignmentArrayOutput struct{ *pulumi.OutputState }

func (OsPolicyAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OsPolicyAssignment)(nil)).Elem()
}

func (o OsPolicyAssignmentArrayOutput) ToOsPolicyAssignmentArrayOutput() OsPolicyAssignmentArrayOutput {
	return o
}

func (o OsPolicyAssignmentArrayOutput) ToOsPolicyAssignmentArrayOutputWithContext(ctx context.Context) OsPolicyAssignmentArrayOutput {
	return o
}

func (o OsPolicyAssignmentArrayOutput) Index(i pulumi.IntInput) OsPolicyAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OsPolicyAssignment {
		return vs[0].([]*OsPolicyAssignment)[vs[1].(int)]
	}).(OsPolicyAssignmentOutput)
}

type OsPolicyAssignmentMapOutput struct{ *pulumi.OutputState }

func (OsPolicyAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OsPolicyAssignment)(nil)).Elem()
}

func (o OsPolicyAssignmentMapOutput) ToOsPolicyAssignmentMapOutput() OsPolicyAssignmentMapOutput {
	return o
}

func (o OsPolicyAssignmentMapOutput) ToOsPolicyAssignmentMapOutputWithContext(ctx context.Context) OsPolicyAssignmentMapOutput {
	return o
}

func (o OsPolicyAssignmentMapOutput) MapIndex(k pulumi.StringInput) OsPolicyAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OsPolicyAssignment {
		return vs[0].(map[string]*OsPolicyAssignment)[vs[1].(string)]
	}).(OsPolicyAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OsPolicyAssignmentInput)(nil)).Elem(), &OsPolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*OsPolicyAssignmentArrayInput)(nil)).Elem(), OsPolicyAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OsPolicyAssignmentMapInput)(nil)).Elem(), OsPolicyAssignmentMap{})
	pulumi.RegisterOutputType(OsPolicyAssignmentOutput{})
	pulumi.RegisterOutputType(OsPolicyAssignmentArrayOutput{})
	pulumi.RegisterOutputType(OsPolicyAssignmentMapOutput{})
}
