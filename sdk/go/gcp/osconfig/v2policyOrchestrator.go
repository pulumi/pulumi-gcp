// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PolicyOrchestrator helps managing project+zone level policy resources (e.g.
// OS Policy Assignments), by providing tools to create, update and delete them
// across projects and locations, at scale.
//
// ## Example Usage
//
// ### Osconfigv2 Policy Orchestrator Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/osconfig"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osconfig.NewV2PolicyOrchestrator(ctx, "policy_orchestrator", &osconfig.V2PolicyOrchestratorArgs{
//				PolicyOrchestratorId: pulumi.String("po"),
//				State:                pulumi.String("ACTIVE"),
//				Action:               pulumi.String("UPSERT"),
//				OrchestratedResource: &osconfig.V2PolicyOrchestratorOrchestratedResourceArgs{
//					Id: pulumi.String("test-orchestrated-resource"),
//					OsPolicyAssignmentV1Payload: &osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadArgs{
//						OsPolicies: osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArray{
//							&osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs{
//								Id:   pulumi.String("test-os-policy"),
//								Mode: pulumi.String("VALIDATION"),
//								ResourceGroups: osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArray{
//									&osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs{
//										Resources: osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArray{
//											&osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs{
//												Id: pulumi.String("resource-tf"),
//												File: &osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs{
//													Content: pulumi.String("file-content-tf"),
//													Path:    pulumi.String("file-path-tf-1"),
//													State:   pulumi.String("PRESENT"),
//												},
//											},
//										},
//									},
//								},
//							},
//						},
//						InstanceFilter: &osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs{
//							Inventories: osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArray{
//								&osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs{
//									OsShortName: pulumi.String("windows-10"),
//								},
//							},
//						},
//						Rollout: &osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs{
//							DisruptionBudget: &osconfig.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutDisruptionBudgetArgs{
//								Percent: pulumi.Int(100),
//							},
//							MinWaitDuration: pulumi.String("60s"),
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"state": pulumi.String("active"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PolicyOrchestrator can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`
//
// * `{{project}}/{{policy_orchestrator_id}}`
//
// * `{{policy_orchestrator_id}}`
//
// When using the `pulumi import` command, PolicyOrchestrator can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default projects/{{project}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}
// ```
//
// ```sh
// $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default {{project}}/{{policy_orchestrator_id}}
// ```
//
// ```sh
// $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default {{policy_orchestrator_id}}
// ```
type V2PolicyOrchestrator struct {
	pulumi.CustomResourceState

	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringOutput `pulumi:"action"`
	// Output only. Timestamp when the policy orchestrator resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Immutable. Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorOrchestratedResourceOutput `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy
	// orchestration.
	// Structure is documented below.
	OrchestrationScope V2PolicyOrchestratorOrchestrationScopePtrOutput `pulumi:"orchestrationScope"`
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates V2PolicyOrchestratorOrchestrationStateArrayOutput `pulumi:"orchestrationStates"`
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringOutput `pulumi:"policyOrchestratorId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
	// Allowed values:
	// - `ACTIVE` - orchestrator is actively looking for actions to be taken.
	// - `STOPPED` - orchestrator won't make any changes.
	//   Note: There might be more states added in the future. We use string here
	//   instead of an enum, to avoid the need of propagating new states to all the
	//   client code.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Output only. Timestamp when the policy orchestrator resource was last modified.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewV2PolicyOrchestrator registers a new resource with the given unique name, arguments, and options.
func NewV2PolicyOrchestrator(ctx *pulumi.Context,
	name string, args *V2PolicyOrchestratorArgs, opts ...pulumi.ResourceOption) (*V2PolicyOrchestrator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.OrchestratedResource == nil {
		return nil, errors.New("invalid value for required argument 'OrchestratedResource'")
	}
	if args.PolicyOrchestratorId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyOrchestratorId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2PolicyOrchestrator
	err := ctx.RegisterResource("gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2PolicyOrchestrator gets an existing V2PolicyOrchestrator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2PolicyOrchestrator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2PolicyOrchestratorState, opts ...pulumi.ResourceOption) (*V2PolicyOrchestrator, error) {
	var resource V2PolicyOrchestrator
	err := ctx.ReadResource("gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2PolicyOrchestrator resources.
type v2policyOrchestratorState struct {
	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action *string `pulumi:"action"`
	// Output only. Timestamp when the policy orchestrator resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Optional. Freeform text describing the purpose of the resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Immutable. Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name *string `pulumi:"name"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource *V2PolicyOrchestratorOrchestratedResource `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy
	// orchestration.
	// Structure is documented below.
	OrchestrationScope *V2PolicyOrchestratorOrchestrationScope `pulumi:"orchestrationScope"`
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates []V2PolicyOrchestratorOrchestrationState `pulumi:"orchestrationStates"`
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId *string `pulumi:"policyOrchestratorId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling *bool `pulumi:"reconciling"`
	// Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
	// Allowed values:
	// - `ACTIVE` - orchestrator is actively looking for actions to be taken.
	// - `STOPPED` - orchestrator won't make any changes.
	//   Note: There might be more states added in the future. We use string here
	//   instead of an enum, to avoid the need of propagating new states to all the
	//   client code.
	State *string `pulumi:"state"`
	// Output only. Timestamp when the policy orchestrator resource was last modified.
	UpdateTime *string `pulumi:"updateTime"`
}

type V2PolicyOrchestratorState struct {
	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringPtrInput
	// Output only. Timestamp when the policy orchestrator resource was created.
	CreateTime pulumi.StringPtrInput
	// Optional. Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Immutable. Identifier. In form of
	// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
	// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
	Name pulumi.StringPtrInput
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorOrchestratedResourcePtrInput
	// Defines a set of selectors which drive which resources are in scope of policy
	// orchestration.
	// Structure is documented below.
	OrchestrationScope V2PolicyOrchestratorOrchestrationScopePtrInput
	// Describes the state of the orchestration process.
	// Structure is documented below.
	OrchestrationStates V2PolicyOrchestratorOrchestrationStateArrayInput
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Set to true, if the there are ongoing changes being applied by the
	// orchestrator.
	Reconciling pulumi.BoolPtrInput
	// Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
	// Allowed values:
	// - `ACTIVE` - orchestrator is actively looking for actions to be taken.
	// - `STOPPED` - orchestrator won't make any changes.
	//   Note: There might be more states added in the future. We use string here
	//   instead of an enum, to avoid the need of propagating new states to all the
	//   client code.
	State pulumi.StringPtrInput
	// Output only. Timestamp when the policy orchestrator resource was last modified.
	UpdateTime pulumi.StringPtrInput
}

func (V2PolicyOrchestratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2policyOrchestratorState)(nil)).Elem()
}

type v2policyOrchestratorArgs struct {
	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action string `pulumi:"action"`
	// Optional. Freeform text describing the purpose of the resource.
	Description *string `pulumi:"description"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorOrchestratedResource `pulumi:"orchestratedResource"`
	// Defines a set of selectors which drive which resources are in scope of policy
	// orchestration.
	// Structure is documented below.
	OrchestrationScope *V2PolicyOrchestratorOrchestrationScope `pulumi:"orchestrationScope"`
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId string `pulumi:"policyOrchestratorId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
	// Allowed values:
	// - `ACTIVE` - orchestrator is actively looking for actions to be taken.
	// - `STOPPED` - orchestrator won't make any changes.
	//   Note: There might be more states added in the future. We use string here
	//   instead of an enum, to avoid the need of propagating new states to all the
	//   client code.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a V2PolicyOrchestrator resource.
type V2PolicyOrchestratorArgs struct {
	// Required. Action to be done by the orchestrator in
	// `projects/{project_id}/zones/{zone_id}` locations defined by the
	// `orchestrationScope`. Allowed values:
	// - `UPSERT` - Orchestrator will create or update target resources.
	// - `DELETE` - Orchestrator will delete target resources, if they exist
	Action pulumi.StringInput
	// Optional. Freeform text describing the purpose of the resource.
	Description pulumi.StringPtrInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Represents a resource that is being orchestrated by the policy orchestrator.
	// Structure is documented below.
	OrchestratedResource V2PolicyOrchestratorOrchestratedResourceInput
	// Defines a set of selectors which drive which resources are in scope of policy
	// orchestration.
	// Structure is documented below.
	OrchestrationScope V2PolicyOrchestratorOrchestrationScopePtrInput
	// Required. The logical identifier of the policy orchestrator, with the following
	// restrictions:
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the parent.
	PolicyOrchestratorId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
	// Allowed values:
	// - `ACTIVE` - orchestrator is actively looking for actions to be taken.
	// - `STOPPED` - orchestrator won't make any changes.
	//   Note: There might be more states added in the future. We use string here
	//   instead of an enum, to avoid the need of propagating new states to all the
	//   client code.
	State pulumi.StringPtrInput
}

func (V2PolicyOrchestratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2policyOrchestratorArgs)(nil)).Elem()
}

type V2PolicyOrchestratorInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorOutput() V2PolicyOrchestratorOutput
	ToV2PolicyOrchestratorOutputWithContext(ctx context.Context) V2PolicyOrchestratorOutput
}

func (*V2PolicyOrchestrator) ElementType() reflect.Type {
	return reflect.TypeOf((**V2PolicyOrchestrator)(nil)).Elem()
}

func (i *V2PolicyOrchestrator) ToV2PolicyOrchestratorOutput() V2PolicyOrchestratorOutput {
	return i.ToV2PolicyOrchestratorOutputWithContext(context.Background())
}

func (i *V2PolicyOrchestrator) ToV2PolicyOrchestratorOutputWithContext(ctx context.Context) V2PolicyOrchestratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorOutput)
}

// V2PolicyOrchestratorArrayInput is an input type that accepts V2PolicyOrchestratorArray and V2PolicyOrchestratorArrayOutput values.
// You can construct a concrete instance of `V2PolicyOrchestratorArrayInput` via:
//
//	V2PolicyOrchestratorArray{ V2PolicyOrchestratorArgs{...} }
type V2PolicyOrchestratorArrayInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorArrayOutput() V2PolicyOrchestratorArrayOutput
	ToV2PolicyOrchestratorArrayOutputWithContext(context.Context) V2PolicyOrchestratorArrayOutput
}

type V2PolicyOrchestratorArray []V2PolicyOrchestratorInput

func (V2PolicyOrchestratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2PolicyOrchestrator)(nil)).Elem()
}

func (i V2PolicyOrchestratorArray) ToV2PolicyOrchestratorArrayOutput() V2PolicyOrchestratorArrayOutput {
	return i.ToV2PolicyOrchestratorArrayOutputWithContext(context.Background())
}

func (i V2PolicyOrchestratorArray) ToV2PolicyOrchestratorArrayOutputWithContext(ctx context.Context) V2PolicyOrchestratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorArrayOutput)
}

// V2PolicyOrchestratorMapInput is an input type that accepts V2PolicyOrchestratorMap and V2PolicyOrchestratorMapOutput values.
// You can construct a concrete instance of `V2PolicyOrchestratorMapInput` via:
//
//	V2PolicyOrchestratorMap{ "key": V2PolicyOrchestratorArgs{...} }
type V2PolicyOrchestratorMapInput interface {
	pulumi.Input

	ToV2PolicyOrchestratorMapOutput() V2PolicyOrchestratorMapOutput
	ToV2PolicyOrchestratorMapOutputWithContext(context.Context) V2PolicyOrchestratorMapOutput
}

type V2PolicyOrchestratorMap map[string]V2PolicyOrchestratorInput

func (V2PolicyOrchestratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2PolicyOrchestrator)(nil)).Elem()
}

func (i V2PolicyOrchestratorMap) ToV2PolicyOrchestratorMapOutput() V2PolicyOrchestratorMapOutput {
	return i.ToV2PolicyOrchestratorMapOutputWithContext(context.Background())
}

func (i V2PolicyOrchestratorMap) ToV2PolicyOrchestratorMapOutputWithContext(ctx context.Context) V2PolicyOrchestratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2PolicyOrchestratorMapOutput)
}

type V2PolicyOrchestratorOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2PolicyOrchestrator)(nil)).Elem()
}

func (o V2PolicyOrchestratorOutput) ToV2PolicyOrchestratorOutput() V2PolicyOrchestratorOutput {
	return o
}

func (o V2PolicyOrchestratorOutput) ToV2PolicyOrchestratorOutputWithContext(ctx context.Context) V2PolicyOrchestratorOutput {
	return o
}

// Required. Action to be done by the orchestrator in
// `projects/{project_id}/zones/{zone_id}` locations defined by the
// `orchestrationScope`. Allowed values:
// - `UPSERT` - Orchestrator will create or update target resources.
// - `DELETE` - Orchestrator will delete target resources, if they exist
func (o V2PolicyOrchestratorOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Output only. Timestamp when the policy orchestrator resource was created.
func (o V2PolicyOrchestratorOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Freeform text describing the purpose of the resource.
func (o V2PolicyOrchestratorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o V2PolicyOrchestratorOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. Labels as key value pairs
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o V2PolicyOrchestratorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Immutable. Identifier. In form of
// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
func (o V2PolicyOrchestratorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Represents a resource that is being orchestrated by the policy orchestrator.
// Structure is documented below.
func (o V2PolicyOrchestratorOutput) OrchestratedResource() V2PolicyOrchestratorOrchestratedResourceOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) V2PolicyOrchestratorOrchestratedResourceOutput {
		return v.OrchestratedResource
	}).(V2PolicyOrchestratorOrchestratedResourceOutput)
}

// Defines a set of selectors which drive which resources are in scope of policy
// orchestration.
// Structure is documented below.
func (o V2PolicyOrchestratorOutput) OrchestrationScope() V2PolicyOrchestratorOrchestrationScopePtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) V2PolicyOrchestratorOrchestrationScopePtrOutput {
		return v.OrchestrationScope
	}).(V2PolicyOrchestratorOrchestrationScopePtrOutput)
}

// Describes the state of the orchestration process.
// Structure is documented below.
func (o V2PolicyOrchestratorOutput) OrchestrationStates() V2PolicyOrchestratorOrchestrationStateArrayOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) V2PolicyOrchestratorOrchestrationStateArrayOutput {
		return v.OrchestrationStates
	}).(V2PolicyOrchestratorOrchestrationStateArrayOutput)
}

// Required. The logical identifier of the policy orchestrator, with the following
// restrictions:
// * Must contain only lowercase letters, numbers, and hyphens.
// * Must start with a letter.
// * Must be between 1-63 characters.
// * Must end with a number or a letter.
// * Must be unique within the parent.
func (o V2PolicyOrchestratorOutput) PolicyOrchestratorId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringOutput { return v.PolicyOrchestratorId }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o V2PolicyOrchestratorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o V2PolicyOrchestratorOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Set to true, if the there are ongoing changes being applied by the
// orchestrator.
func (o V2PolicyOrchestratorOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
// Allowed values:
//   - `ACTIVE` - orchestrator is actively looking for actions to be taken.
//   - `STOPPED` - orchestrator won't make any changes.
//     Note: There might be more states added in the future. We use string here
//     instead of an enum, to avoid the need of propagating new states to all the
//     client code.
func (o V2PolicyOrchestratorOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Output only. Timestamp when the policy orchestrator resource was last modified.
func (o V2PolicyOrchestratorOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2PolicyOrchestrator) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type V2PolicyOrchestratorArrayOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2PolicyOrchestrator)(nil)).Elem()
}

func (o V2PolicyOrchestratorArrayOutput) ToV2PolicyOrchestratorArrayOutput() V2PolicyOrchestratorArrayOutput {
	return o
}

func (o V2PolicyOrchestratorArrayOutput) ToV2PolicyOrchestratorArrayOutputWithContext(ctx context.Context) V2PolicyOrchestratorArrayOutput {
	return o
}

func (o V2PolicyOrchestratorArrayOutput) Index(i pulumi.IntInput) V2PolicyOrchestratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2PolicyOrchestrator {
		return vs[0].([]*V2PolicyOrchestrator)[vs[1].(int)]
	}).(V2PolicyOrchestratorOutput)
}

type V2PolicyOrchestratorMapOutput struct{ *pulumi.OutputState }

func (V2PolicyOrchestratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2PolicyOrchestrator)(nil)).Elem()
}

func (o V2PolicyOrchestratorMapOutput) ToV2PolicyOrchestratorMapOutput() V2PolicyOrchestratorMapOutput {
	return o
}

func (o V2PolicyOrchestratorMapOutput) ToV2PolicyOrchestratorMapOutputWithContext(ctx context.Context) V2PolicyOrchestratorMapOutput {
	return o
}

func (o V2PolicyOrchestratorMapOutput) MapIndex(k pulumi.StringInput) V2PolicyOrchestratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2PolicyOrchestrator {
		return vs[0].(map[string]*V2PolicyOrchestrator)[vs[1].(string)]
	}).(V2PolicyOrchestratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorInput)(nil)).Elem(), &V2PolicyOrchestrator{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorArrayInput)(nil)).Elem(), V2PolicyOrchestratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2PolicyOrchestratorMapInput)(nil)).Elem(), V2PolicyOrchestratorMap{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorOutput{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorArrayOutput{})
	pulumi.RegisterOutputType(V2PolicyOrchestratorMapOutput{})
}
