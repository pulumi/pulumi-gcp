// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package documentaiwarehouse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A location is used to initialize a project.
//
// To get more information about Location, see:
//
// * [API documentation](https://cloud.google.com/document-warehouse/docs/reference/rest/v1/projects.locations)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/document-warehouse/docs/overview)
//
// ## Example Usage
// ### Document Ai Warehouse Location
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewLocation(ctx, "example", &documentaiwarehouse.LocationArgs{
//				Location:                   pulumi.String("us"),
//				ProjectNumber:              *pulumi.String(project.Number),
//				AccessControlMode:          pulumi.String("ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI"),
//				DatabaseType:               pulumi.String("DB_INFRA_SPANNER"),
//				KmsKey:                     pulumi.String("dummy_key"),
//				DocumentCreatorDefaultRole: pulumi.String("DOCUMENT_ADMIN"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource does not support import.
type Location struct {
	pulumi.CustomResourceState

	// The access control mode for accessing the customer data.
	// Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
	AccessControlMode pulumi.StringOutput `pulumi:"accessControlMode"`
	// The type of database used to store customer data.
	// Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
	DatabaseType pulumi.StringOutput `pulumi:"databaseType"`
	// The default role for the person who create a document.
	// Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
	DocumentCreatorDefaultRole pulumi.StringPtrOutput `pulumi:"documentCreatorDefaultRole"`
	// The KMS key used for CMEK encryption. It is required that
	// the kms key is in the same region as the endpoint. The
	// same key will be used for all provisioned resources, if
	// encryption is available. If the kmsKey is left empty, no
	// encryption will be enforced.
	KmsKey pulumi.StringPtrOutput `pulumi:"kmsKey"`
	// The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique identifier of the project.
	ProjectNumber pulumi.StringOutput `pulumi:"projectNumber"`
}

// NewLocation registers a new resource with the given unique name, arguments, and options.
func NewLocation(ctx *pulumi.Context,
	name string, args *LocationArgs, opts ...pulumi.ResourceOption) (*Location, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessControlMode == nil {
		return nil, errors.New("invalid value for required argument 'AccessControlMode'")
	}
	if args.DatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseType'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProjectNumber == nil {
		return nil, errors.New("invalid value for required argument 'ProjectNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Location
	err := ctx.RegisterResource("gcp:documentaiwarehouse/location:Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocation gets an existing Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationState, opts ...pulumi.ResourceOption) (*Location, error) {
	var resource Location
	err := ctx.ReadResource("gcp:documentaiwarehouse/location:Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Location resources.
type locationState struct {
	// The access control mode for accessing the customer data.
	// Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
	AccessControlMode *string `pulumi:"accessControlMode"`
	// The type of database used to store customer data.
	// Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
	DatabaseType *string `pulumi:"databaseType"`
	// The default role for the person who create a document.
	// Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
	DocumentCreatorDefaultRole *string `pulumi:"documentCreatorDefaultRole"`
	// The KMS key used for CMEK encryption. It is required that
	// the kms key is in the same region as the endpoint. The
	// same key will be used for all provisioned resources, if
	// encryption is available. If the kmsKey is left empty, no
	// encryption will be enforced.
	KmsKey *string `pulumi:"kmsKey"`
	// The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
	//
	// ***
	Location *string `pulumi:"location"`
	// The unique identifier of the project.
	ProjectNumber *string `pulumi:"projectNumber"`
}

type LocationState struct {
	// The access control mode for accessing the customer data.
	// Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
	AccessControlMode pulumi.StringPtrInput
	// The type of database used to store customer data.
	// Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
	DatabaseType pulumi.StringPtrInput
	// The default role for the person who create a document.
	// Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
	DocumentCreatorDefaultRole pulumi.StringPtrInput
	// The KMS key used for CMEK encryption. It is required that
	// the kms key is in the same region as the endpoint. The
	// same key will be used for all provisioned resources, if
	// encryption is available. If the kmsKey is left empty, no
	// encryption will be enforced.
	KmsKey pulumi.StringPtrInput
	// The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
	//
	// ***
	Location pulumi.StringPtrInput
	// The unique identifier of the project.
	ProjectNumber pulumi.StringPtrInput
}

func (LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationState)(nil)).Elem()
}

type locationArgs struct {
	// The access control mode for accessing the customer data.
	// Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
	AccessControlMode string `pulumi:"accessControlMode"`
	// The type of database used to store customer data.
	// Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
	DatabaseType string `pulumi:"databaseType"`
	// The default role for the person who create a document.
	// Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
	DocumentCreatorDefaultRole *string `pulumi:"documentCreatorDefaultRole"`
	// The KMS key used for CMEK encryption. It is required that
	// the kms key is in the same region as the endpoint. The
	// same key will be used for all provisioned resources, if
	// encryption is available. If the kmsKey is left empty, no
	// encryption will be enforced.
	KmsKey *string `pulumi:"kmsKey"`
	// The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
	//
	// ***
	Location string `pulumi:"location"`
	// The unique identifier of the project.
	ProjectNumber string `pulumi:"projectNumber"`
}

// The set of arguments for constructing a Location resource.
type LocationArgs struct {
	// The access control mode for accessing the customer data.
	// Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
	AccessControlMode pulumi.StringInput
	// The type of database used to store customer data.
	// Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
	DatabaseType pulumi.StringInput
	// The default role for the person who create a document.
	// Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
	DocumentCreatorDefaultRole pulumi.StringPtrInput
	// The KMS key used for CMEK encryption. It is required that
	// the kms key is in the same region as the endpoint. The
	// same key will be used for all provisioned resources, if
	// encryption is available. If the kmsKey is left empty, no
	// encryption will be enforced.
	KmsKey pulumi.StringPtrInput
	// The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
	//
	// ***
	Location pulumi.StringInput
	// The unique identifier of the project.
	ProjectNumber pulumi.StringInput
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationArgs)(nil)).Elem()
}

type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(ctx context.Context) LocationOutput
}

func (*Location) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (i *Location) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i *Location) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//	LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// LocationMapInput is an input type that accepts LocationMap and LocationMapOutput values.
// You can construct a concrete instance of `LocationMapInput` via:
//
//	LocationMap{ "key": LocationArgs{...} }
type LocationMapInput interface {
	pulumi.Input

	ToLocationMapOutput() LocationMapOutput
	ToLocationMapOutputWithContext(context.Context) LocationMapOutput
}

type LocationMap map[string]LocationInput

func (LocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (i LocationMap) ToLocationMapOutput() LocationMapOutput {
	return i.ToLocationMapOutputWithContext(context.Background())
}

func (i LocationMap) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationMapOutput)
}

type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// The access control mode for accessing the customer data.
// Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
func (o LocationOutput) AccessControlMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.AccessControlMode }).(pulumi.StringOutput)
}

// The type of database used to store customer data.
// Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
func (o LocationOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.DatabaseType }).(pulumi.StringOutput)
}

// The default role for the person who create a document.
// Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
func (o LocationOutput) DocumentCreatorDefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Location) pulumi.StringPtrOutput { return v.DocumentCreatorDefaultRole }).(pulumi.StringPtrOutput)
}

// The KMS key used for CMEK encryption. It is required that
// the kms key is in the same region as the endpoint. The
// same key will be used for all provisioned resources, if
// encryption is available. If the kmsKey is left empty, no
// encryption will be enforced.
func (o LocationOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Location) pulumi.StringPtrOutput { return v.KmsKey }).(pulumi.StringPtrOutput)
}

// The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
//
// ***
func (o LocationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique identifier of the project.
func (o LocationOutput) ProjectNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.ProjectNumber }).(pulumi.StringOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Location {
		return vs[0].([]*Location)[vs[1].(int)]
	}).(LocationOutput)
}

type LocationMapOutput struct{ *pulumi.OutputState }

func (LocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (o LocationMapOutput) ToLocationMapOutput() LocationMapOutput {
	return o
}

func (o LocationMapOutput) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return o
}

func (o LocationMapOutput) MapIndex(k pulumi.StringInput) LocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Location {
		return vs[0].(map[string]*Location)[vs[1].(string)]
	}).(LocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), &Location{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationArrayInput)(nil)).Elem(), LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationMapInput)(nil)).Elem(), LocationMap{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationMapOutput{})
}
