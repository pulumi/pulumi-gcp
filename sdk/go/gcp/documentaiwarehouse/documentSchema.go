// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package documentaiwarehouse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A document schema is used to define document structure.
//
// To get more information about DocumentSchema, see:
//
// * [API documentation](https://cloud.google.com/document-warehouse/docs/reference/rest/v1/projects.locations.documentSchemas)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/document-warehouse/docs/manage-document-schemas)
//
// ## Example Usage
// ### Document Ai Warehouse Document Schema Text
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "exampleText", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber:    *pulumi.String(project.Number),
//				DisplayName:      pulumi.String("test-property-text"),
//				Location:         pulumi.String("us"),
//				DocumentIsFolder: pulumi.Bool(false),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop3"),
//						DisplayName:         pulumi.String("propdisp3"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						TextTypeOptions: nil,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Document Ai Warehouse Document Schema Integer
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "exampleInteger", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber: *pulumi.String(project.Number),
//				DisplayName:   pulumi.String("test-property-integer"),
//				Location:      pulumi.String("us"),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop1"),
//						DisplayName:         pulumi.String("propdisp1"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						IntegerTypeOptions: nil,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Document Ai Warehouse Document Schema Float
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "exampleFloat", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber: *pulumi.String(project.Number),
//				DisplayName:   pulumi.String("test-property-float"),
//				Location:      pulumi.String("us"),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop2"),
//						DisplayName:         pulumi.String("propdisp2"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						FloatTypeOptions: nil,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Document Ai Warehouse Document Schema Property
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "exampleProperty", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber:    *pulumi.String(project.Number),
//				DisplayName:      pulumi.String("test-property-property"),
//				Location:         pulumi.String("us"),
//				DocumentIsFolder: pulumi.Bool(false),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop8"),
//						DisplayName:         pulumi.String("propdisp8"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						PropertyTypeOptions: &documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs{
//							PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArray{
//								&documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs{
//									Name:                pulumi.String("prop8_nested"),
//									DisplayName:         pulumi.String("propdisp8_nested"),
//									IsRepeatable:        pulumi.Bool(false),
//									IsFilterable:        pulumi.Bool(true),
//									IsSearchable:        pulumi.Bool(true),
//									IsMetadata:          pulumi.Bool(false),
//									IsRequired:          pulumi.Bool(false),
//									RetrievalImportance: pulumi.String("HIGHEST"),
//									SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArray{
//										&documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs{
//											Name:          pulumi.String("dummy_source_nested"),
//											ProcessorType: pulumi.String("dummy_processor_nested"),
//										},
//									},
//									TextTypeOptions: nil,
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Document Ai Warehouse Document Schema Property Enum
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "examplePropertyEnum", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber:    *pulumi.String(project.Number),
//				DisplayName:      pulumi.String("test-property-property"),
//				Location:         pulumi.String("us"),
//				DocumentIsFolder: pulumi.Bool(false),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop8"),
//						DisplayName:         pulumi.String("propdisp8"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						PropertyTypeOptions: &documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs{
//							PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArray{
//								&documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs{
//									Name:                pulumi.String("prop8_nested"),
//									DisplayName:         pulumi.String("propdisp8_nested"),
//									IsRepeatable:        pulumi.Bool(false),
//									IsFilterable:        pulumi.Bool(true),
//									IsSearchable:        pulumi.Bool(true),
//									IsMetadata:          pulumi.Bool(false),
//									IsRequired:          pulumi.Bool(false),
//									RetrievalImportance: pulumi.String("HIGHEST"),
//									SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArray{
//										&documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs{
//											Name:          pulumi.String("dummy_source_nested"),
//											ProcessorType: pulumi.String("dummy_processor_nested"),
//										},
//									},
//									EnumTypeOptions: &documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptionsArgs{
//										PossibleValues: pulumi.StringArray{
//											pulumi.String("M"),
//											pulumi.String("F"),
//											pulumi.String("X"),
//										},
//										ValidationCheckDisabled: pulumi.Bool(false),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Document Ai Warehouse Document Schema Enum
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "exampleEnum", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber: *pulumi.String(project.Number),
//				DisplayName:   pulumi.String("test-property-enum"),
//				Location:      pulumi.String("us"),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop6"),
//						DisplayName:         pulumi.String("propdisp6"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						EnumTypeOptions: &documentaiwarehouse.DocumentSchemaPropertyDefinitionEnumTypeOptionsArgs{
//							PossibleValues: pulumi.StringArray{
//								pulumi.String("M"),
//								pulumi.String("F"),
//								pulumi.String("X"),
//							},
//							ValidationCheckDisabled: pulumi.Bool(false),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Document Ai Warehouse Document Schema Map
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "exampleMap", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber: *pulumi.String(project.Number),
//				DisplayName:   pulumi.String("test-property-map"),
//				Location:      pulumi.String("us"),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop4"),
//						DisplayName:         pulumi.String("propdisp4"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						MapTypeOptions: nil,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Document Ai Warehouse Document Schema Datetime
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "exampleDatetime", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber: *pulumi.String(project.Number),
//				DisplayName:   pulumi.String("test-property-date_time"),
//				Location:      pulumi.String("us"),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop7"),
//						DisplayName:         pulumi.String("propdisp7"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						DateTimeTypeOptions: nil,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Document Ai Warehouse Document Schema Timestamp
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/documentaiwarehouse"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = documentaiwarehouse.NewDocumentSchema(ctx, "exampleTimestamp", &documentaiwarehouse.DocumentSchemaArgs{
//				ProjectNumber: *pulumi.String(project.Number),
//				DisplayName:   pulumi.String("test-property-timestamp"),
//				Location:      pulumi.String("us"),
//				PropertyDefinitions: documentaiwarehouse.DocumentSchemaPropertyDefinitionArray{
//					&documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs{
//						Name:                pulumi.String("prop5"),
//						DisplayName:         pulumi.String("propdisp5"),
//						IsRepeatable:        pulumi.Bool(false),
//						IsFilterable:        pulumi.Bool(true),
//						IsSearchable:        pulumi.Bool(true),
//						IsMetadata:          pulumi.Bool(false),
//						IsRequired:          pulumi.Bool(false),
//						RetrievalImportance: pulumi.String("HIGHEST"),
//						SchemaSources: documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArray{
//							&documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs{
//								Name:          pulumi.String("dummy_source"),
//								ProcessorType: pulumi.String("dummy_processor"),
//							},
//						},
//						TimestampTypeOptions: nil,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # DocumentSchema can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:documentaiwarehouse/documentSchema:DocumentSchema default projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:documentaiwarehouse/documentSchema:DocumentSchema default {{project_number}}/{{location}}/{{name}}
//
// ```
type DocumentSchema struct {
	pulumi.CustomResourceState

	// Name of the schema given by the user.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder pulumi.BoolPtrOutput `pulumi:"documentIsFolder"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the metadata property.
	//
	// (Optional)
	// The schema name in the source.
	//
	// (Required)
	// The name of the metadata property.
	//
	// (Optional)
	// The schema name in the source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier of the project.
	ProjectNumber pulumi.StringOutput `pulumi:"projectNumber"`
	// Defines the metadata for a schema property.
	// Structure is documented below.
	PropertyDefinitions DocumentSchemaPropertyDefinitionArrayOutput `pulumi:"propertyDefinitions"`
}

// NewDocumentSchema registers a new resource with the given unique name, arguments, and options.
func NewDocumentSchema(ctx *pulumi.Context,
	name string, args *DocumentSchemaArgs, opts ...pulumi.ResourceOption) (*DocumentSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProjectNumber == nil {
		return nil, errors.New("invalid value for required argument 'ProjectNumber'")
	}
	if args.PropertyDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'PropertyDefinitions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DocumentSchema
	err := ctx.RegisterResource("gcp:documentaiwarehouse/documentSchema:DocumentSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentSchema gets an existing DocumentSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentSchemaState, opts ...pulumi.ResourceOption) (*DocumentSchema, error) {
	var resource DocumentSchema
	err := ctx.ReadResource("gcp:documentaiwarehouse/documentSchema:DocumentSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentSchema resources.
type documentSchemaState struct {
	// Name of the schema given by the user.
	DisplayName *string `pulumi:"displayName"`
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder *bool `pulumi:"documentIsFolder"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The name of the metadata property.
	//
	// (Optional)
	// The schema name in the source.
	//
	// (Required)
	// The name of the metadata property.
	//
	// (Optional)
	// The schema name in the source.
	Name *string `pulumi:"name"`
	// The unique identifier of the project.
	ProjectNumber *string `pulumi:"projectNumber"`
	// Defines the metadata for a schema property.
	// Structure is documented below.
	PropertyDefinitions []DocumentSchemaPropertyDefinition `pulumi:"propertyDefinitions"`
}

type DocumentSchemaState struct {
	// Name of the schema given by the user.
	DisplayName pulumi.StringPtrInput
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder pulumi.BoolPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The name of the metadata property.
	//
	// (Optional)
	// The schema name in the source.
	//
	// (Required)
	// The name of the metadata property.
	//
	// (Optional)
	// The schema name in the source.
	Name pulumi.StringPtrInput
	// The unique identifier of the project.
	ProjectNumber pulumi.StringPtrInput
	// Defines the metadata for a schema property.
	// Structure is documented below.
	PropertyDefinitions DocumentSchemaPropertyDefinitionArrayInput
}

func (DocumentSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentSchemaState)(nil)).Elem()
}

type documentSchemaArgs struct {
	// Name of the schema given by the user.
	DisplayName string `pulumi:"displayName"`
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder *bool `pulumi:"documentIsFolder"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The unique identifier of the project.
	ProjectNumber string `pulumi:"projectNumber"`
	// Defines the metadata for a schema property.
	// Structure is documented below.
	PropertyDefinitions []DocumentSchemaPropertyDefinition `pulumi:"propertyDefinitions"`
}

// The set of arguments for constructing a DocumentSchema resource.
type DocumentSchemaArgs struct {
	// Name of the schema given by the user.
	DisplayName pulumi.StringInput
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder pulumi.BoolPtrInput
	// The location of the resource.
	Location pulumi.StringInput
	// The unique identifier of the project.
	ProjectNumber pulumi.StringInput
	// Defines the metadata for a schema property.
	// Structure is documented below.
	PropertyDefinitions DocumentSchemaPropertyDefinitionArrayInput
}

func (DocumentSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentSchemaArgs)(nil)).Elem()
}

type DocumentSchemaInput interface {
	pulumi.Input

	ToDocumentSchemaOutput() DocumentSchemaOutput
	ToDocumentSchemaOutputWithContext(ctx context.Context) DocumentSchemaOutput
}

func (*DocumentSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentSchema)(nil)).Elem()
}

func (i *DocumentSchema) ToDocumentSchemaOutput() DocumentSchemaOutput {
	return i.ToDocumentSchemaOutputWithContext(context.Background())
}

func (i *DocumentSchema) ToDocumentSchemaOutputWithContext(ctx context.Context) DocumentSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentSchemaOutput)
}

// DocumentSchemaArrayInput is an input type that accepts DocumentSchemaArray and DocumentSchemaArrayOutput values.
// You can construct a concrete instance of `DocumentSchemaArrayInput` via:
//
//	DocumentSchemaArray{ DocumentSchemaArgs{...} }
type DocumentSchemaArrayInput interface {
	pulumi.Input

	ToDocumentSchemaArrayOutput() DocumentSchemaArrayOutput
	ToDocumentSchemaArrayOutputWithContext(context.Context) DocumentSchemaArrayOutput
}

type DocumentSchemaArray []DocumentSchemaInput

func (DocumentSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentSchema)(nil)).Elem()
}

func (i DocumentSchemaArray) ToDocumentSchemaArrayOutput() DocumentSchemaArrayOutput {
	return i.ToDocumentSchemaArrayOutputWithContext(context.Background())
}

func (i DocumentSchemaArray) ToDocumentSchemaArrayOutputWithContext(ctx context.Context) DocumentSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentSchemaArrayOutput)
}

// DocumentSchemaMapInput is an input type that accepts DocumentSchemaMap and DocumentSchemaMapOutput values.
// You can construct a concrete instance of `DocumentSchemaMapInput` via:
//
//	DocumentSchemaMap{ "key": DocumentSchemaArgs{...} }
type DocumentSchemaMapInput interface {
	pulumi.Input

	ToDocumentSchemaMapOutput() DocumentSchemaMapOutput
	ToDocumentSchemaMapOutputWithContext(context.Context) DocumentSchemaMapOutput
}

type DocumentSchemaMap map[string]DocumentSchemaInput

func (DocumentSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentSchema)(nil)).Elem()
}

func (i DocumentSchemaMap) ToDocumentSchemaMapOutput() DocumentSchemaMapOutput {
	return i.ToDocumentSchemaMapOutputWithContext(context.Background())
}

func (i DocumentSchemaMap) ToDocumentSchemaMapOutputWithContext(ctx context.Context) DocumentSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentSchemaMapOutput)
}

type DocumentSchemaOutput struct{ *pulumi.OutputState }

func (DocumentSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentSchema)(nil)).Elem()
}

func (o DocumentSchemaOutput) ToDocumentSchemaOutput() DocumentSchemaOutput {
	return o
}

func (o DocumentSchemaOutput) ToDocumentSchemaOutputWithContext(ctx context.Context) DocumentSchemaOutput {
	return o
}

// Name of the schema given by the user.
func (o DocumentSchemaOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Tells whether the document is a folder or a typical document.
func (o DocumentSchemaOutput) DocumentIsFolder() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.BoolPtrOutput { return v.DocumentIsFolder }).(pulumi.BoolPtrOutput)
}

// The location of the resource.
func (o DocumentSchemaOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the metadata property.
//
// (Optional)
// The schema name in the source.
//
// (Required)
// The name of the metadata property.
//
// (Optional)
// The schema name in the source.
func (o DocumentSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier of the project.
func (o DocumentSchemaOutput) ProjectNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.ProjectNumber }).(pulumi.StringOutput)
}

// Defines the metadata for a schema property.
// Structure is documented below.
func (o DocumentSchemaOutput) PropertyDefinitions() DocumentSchemaPropertyDefinitionArrayOutput {
	return o.ApplyT(func(v *DocumentSchema) DocumentSchemaPropertyDefinitionArrayOutput { return v.PropertyDefinitions }).(DocumentSchemaPropertyDefinitionArrayOutput)
}

type DocumentSchemaArrayOutput struct{ *pulumi.OutputState }

func (DocumentSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentSchema)(nil)).Elem()
}

func (o DocumentSchemaArrayOutput) ToDocumentSchemaArrayOutput() DocumentSchemaArrayOutput {
	return o
}

func (o DocumentSchemaArrayOutput) ToDocumentSchemaArrayOutputWithContext(ctx context.Context) DocumentSchemaArrayOutput {
	return o
}

func (o DocumentSchemaArrayOutput) Index(i pulumi.IntInput) DocumentSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DocumentSchema {
		return vs[0].([]*DocumentSchema)[vs[1].(int)]
	}).(DocumentSchemaOutput)
}

type DocumentSchemaMapOutput struct{ *pulumi.OutputState }

func (DocumentSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentSchema)(nil)).Elem()
}

func (o DocumentSchemaMapOutput) ToDocumentSchemaMapOutput() DocumentSchemaMapOutput {
	return o
}

func (o DocumentSchemaMapOutput) ToDocumentSchemaMapOutputWithContext(ctx context.Context) DocumentSchemaMapOutput {
	return o
}

func (o DocumentSchemaMapOutput) MapIndex(k pulumi.StringInput) DocumentSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DocumentSchema {
		return vs[0].(map[string]*DocumentSchema)[vs[1].(string)]
	}).(DocumentSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentSchemaInput)(nil)).Elem(), &DocumentSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentSchemaArrayInput)(nil)).Elem(), DocumentSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentSchemaMapInput)(nil)).Elem(), DocumentSchemaMap{})
	pulumi.RegisterOutputType(DocumentSchemaOutput{})
	pulumi.RegisterOutputType(DocumentSchemaArrayOutput{})
	pulumi.RegisterOutputType(DocumentSchemaMapOutput{})
}
