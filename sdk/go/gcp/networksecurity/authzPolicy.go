// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AuthzPolicy is a resource that allows to forward traffic to a callout backend designed to scan the traffic for security purposes.
//
// To get more information about AuthzPolicy, see:
//
// * [API documentation](https://cloud.google.com/load-balancing/docs/reference/network-security/rest/v1beta1/projects.locations.authzPolicies)
//
// ## Example Usage
//
// ## Import
//
// AuthzPolicy can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/authzPolicies/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, AuthzPolicy can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networksecurity/authzPolicy:AuthzPolicy default projects/{{project}}/locations/{{location}}/authzPolicies/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/authzPolicy:AuthzPolicy default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/authzPolicy:AuthzPolicy default {{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/authzPolicy:AuthzPolicy default {{name}}
// ```
type AuthzPolicy struct {
	pulumi.CustomResourceState

	// When the action is CUSTOM, customProvider must be specified.
	// When the action is ALLOW, only requests matching the policy will be allowed.
	// When the action is DENY, only requests matching the policy will be denied.
	// When a request arrives, the policies are evaluated in the following order:
	// 1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
	// 2. If there are any DENY policies that match the request, the request is denied.
	// 3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
	// 4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
	//    Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
	Action pulumi.StringOutput `pulumi:"action"`
	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
	// of cloudIap or authzExtension must be specified.
	CustomProvider AuthzPolicyCustomProviderPtrOutput `pulumi:"customProvider"`
	// A human-readable description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
	// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
	// or Deny Action. Limited to 5 rules.
	HttpRules AuthzPolicyHttpRuleArrayOutput `pulumi:"httpRules"`
	// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. Name of the AuthzPolicy resource.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Specifies the set of resources to which this policy should be applied to.
	// Structure is documented below.
	Target AuthzPolicyTargetOutput `pulumi:"target"`
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAuthzPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthzPolicy(ctx *pulumi.Context,
	name string, args *AuthzPolicyArgs, opts ...pulumi.ResourceOption) (*AuthzPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthzPolicy
	err := ctx.RegisterResource("gcp:networksecurity/authzPolicy:AuthzPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthzPolicy gets an existing AuthzPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthzPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthzPolicyState, opts ...pulumi.ResourceOption) (*AuthzPolicy, error) {
	var resource AuthzPolicy
	err := ctx.ReadResource("gcp:networksecurity/authzPolicy:AuthzPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthzPolicy resources.
type authzPolicyState struct {
	// When the action is CUSTOM, customProvider must be specified.
	// When the action is ALLOW, only requests matching the policy will be allowed.
	// When the action is DENY, only requests matching the policy will be denied.
	// When a request arrives, the policies are evaluated in the following order:
	// 1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
	// 2. If there are any DENY policies that match the request, the request is denied.
	// 3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
	// 4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
	//    Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
	Action *string `pulumi:"action"`
	// The timestamp when the resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
	// of cloudIap or authzExtension must be specified.
	CustomProvider *AuthzPolicyCustomProvider `pulumi:"customProvider"`
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
	// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
	// or Deny Action. Limited to 5 rules.
	HttpRules []AuthzPolicyHttpRule `pulumi:"httpRules"`
	// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// Identifier. Name of the AuthzPolicy resource.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Specifies the set of resources to which this policy should be applied to.
	// Structure is documented below.
	Target *AuthzPolicyTarget `pulumi:"target"`
	// The timestamp when the resource was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AuthzPolicyState struct {
	// When the action is CUSTOM, customProvider must be specified.
	// When the action is ALLOW, only requests matching the policy will be allowed.
	// When the action is DENY, only requests matching the policy will be denied.
	// When a request arrives, the policies are evaluated in the following order:
	// 1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
	// 2. If there are any DENY policies that match the request, the request is denied.
	// 3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
	// 4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
	//    Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
	Action pulumi.StringPtrInput
	// The timestamp when the resource was created.
	CreateTime pulumi.StringPtrInput
	// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
	// of cloudIap or authzExtension must be specified.
	CustomProvider AuthzPolicyCustomProviderPtrInput
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
	// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
	// or Deny Action. Limited to 5 rules.
	HttpRules AuthzPolicyHttpRuleArrayInput
	// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// Identifier. Name of the AuthzPolicy resource.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Specifies the set of resources to which this policy should be applied to.
	// Structure is documented below.
	Target AuthzPolicyTargetPtrInput
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringPtrInput
}

func (AuthzPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authzPolicyState)(nil)).Elem()
}

type authzPolicyArgs struct {
	// When the action is CUSTOM, customProvider must be specified.
	// When the action is ALLOW, only requests matching the policy will be allowed.
	// When the action is DENY, only requests matching the policy will be denied.
	// When a request arrives, the policies are evaluated in the following order:
	// 1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
	// 2. If there are any DENY policies that match the request, the request is denied.
	// 3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
	// 4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
	//    Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
	Action string `pulumi:"action"`
	// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
	// of cloudIap or authzExtension must be specified.
	CustomProvider *AuthzPolicyCustomProvider `pulumi:"customProvider"`
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
	// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
	// or Deny Action. Limited to 5 rules.
	HttpRules []AuthzPolicyHttpRule `pulumi:"httpRules"`
	// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// Identifier. Name of the AuthzPolicy resource.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Specifies the set of resources to which this policy should be applied to.
	// Structure is documented below.
	Target AuthzPolicyTarget `pulumi:"target"`
}

// The set of arguments for constructing a AuthzPolicy resource.
type AuthzPolicyArgs struct {
	// When the action is CUSTOM, customProvider must be specified.
	// When the action is ALLOW, only requests matching the policy will be allowed.
	// When the action is DENY, only requests matching the policy will be denied.
	// When a request arrives, the policies are evaluated in the following order:
	// 1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
	// 2. If there are any DENY policies that match the request, the request is denied.
	// 3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
	// 4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
	//    Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
	Action pulumi.StringInput
	// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
	// of cloudIap or authzExtension must be specified.
	CustomProvider AuthzPolicyCustomProviderPtrInput
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
	// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
	// or Deny Action. Limited to 5 rules.
	HttpRules AuthzPolicyHttpRuleArrayInput
	// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The location of the resource.
	Location pulumi.StringInput
	// Identifier. Name of the AuthzPolicy resource.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Specifies the set of resources to which this policy should be applied to.
	// Structure is documented below.
	Target AuthzPolicyTargetInput
}

func (AuthzPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authzPolicyArgs)(nil)).Elem()
}

type AuthzPolicyInput interface {
	pulumi.Input

	ToAuthzPolicyOutput() AuthzPolicyOutput
	ToAuthzPolicyOutputWithContext(ctx context.Context) AuthzPolicyOutput
}

func (*AuthzPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicy)(nil)).Elem()
}

func (i *AuthzPolicy) ToAuthzPolicyOutput() AuthzPolicyOutput {
	return i.ToAuthzPolicyOutputWithContext(context.Background())
}

func (i *AuthzPolicy) ToAuthzPolicyOutputWithContext(ctx context.Context) AuthzPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyOutput)
}

// AuthzPolicyArrayInput is an input type that accepts AuthzPolicyArray and AuthzPolicyArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyArrayInput` via:
//
//	AuthzPolicyArray{ AuthzPolicyArgs{...} }
type AuthzPolicyArrayInput interface {
	pulumi.Input

	ToAuthzPolicyArrayOutput() AuthzPolicyArrayOutput
	ToAuthzPolicyArrayOutputWithContext(context.Context) AuthzPolicyArrayOutput
}

type AuthzPolicyArray []AuthzPolicyInput

func (AuthzPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthzPolicy)(nil)).Elem()
}

func (i AuthzPolicyArray) ToAuthzPolicyArrayOutput() AuthzPolicyArrayOutput {
	return i.ToAuthzPolicyArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyArray) ToAuthzPolicyArrayOutputWithContext(ctx context.Context) AuthzPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyArrayOutput)
}

// AuthzPolicyMapInput is an input type that accepts AuthzPolicyMap and AuthzPolicyMapOutput values.
// You can construct a concrete instance of `AuthzPolicyMapInput` via:
//
//	AuthzPolicyMap{ "key": AuthzPolicyArgs{...} }
type AuthzPolicyMapInput interface {
	pulumi.Input

	ToAuthzPolicyMapOutput() AuthzPolicyMapOutput
	ToAuthzPolicyMapOutputWithContext(context.Context) AuthzPolicyMapOutput
}

type AuthzPolicyMap map[string]AuthzPolicyInput

func (AuthzPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthzPolicy)(nil)).Elem()
}

func (i AuthzPolicyMap) ToAuthzPolicyMapOutput() AuthzPolicyMapOutput {
	return i.ToAuthzPolicyMapOutputWithContext(context.Background())
}

func (i AuthzPolicyMap) ToAuthzPolicyMapOutputWithContext(ctx context.Context) AuthzPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyMapOutput)
}

type AuthzPolicyOutput struct{ *pulumi.OutputState }

func (AuthzPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicy)(nil)).Elem()
}

func (o AuthzPolicyOutput) ToAuthzPolicyOutput() AuthzPolicyOutput {
	return o
}

func (o AuthzPolicyOutput) ToAuthzPolicyOutputWithContext(ctx context.Context) AuthzPolicyOutput {
	return o
}

// When the action is CUSTOM, customProvider must be specified.
// When the action is ALLOW, only requests matching the policy will be allowed.
// When the action is DENY, only requests matching the policy will be denied.
// When a request arrives, the policies are evaluated in the following order:
//  1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
//  2. If there are any DENY policies that match the request, the request is denied.
//  3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
//  4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
//     Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
func (o AuthzPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The timestamp when the resource was created.
func (o AuthzPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
// of cloudIap or authzExtension must be specified.
func (o AuthzPolicyOutput) CustomProvider() AuthzPolicyCustomProviderPtrOutput {
	return o.ApplyT(func(v *AuthzPolicy) AuthzPolicyCustomProviderPtrOutput { return v.CustomProvider }).(AuthzPolicyCustomProviderPtrOutput)
}

// A human-readable description of the resource.
func (o AuthzPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AuthzPolicyOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
// or Deny Action. Limited to 5 rules.
func (o AuthzPolicyOutput) HttpRules() AuthzPolicyHttpRuleArrayOutput {
	return o.ApplyT(func(v *AuthzPolicy) AuthzPolicyHttpRuleArrayOutput { return v.HttpRules }).(AuthzPolicyHttpRuleArrayOutput)
}

// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o AuthzPolicyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the resource.
func (o AuthzPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. Name of the AuthzPolicy resource.
func (o AuthzPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AuthzPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AuthzPolicyOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Specifies the set of resources to which this policy should be applied to.
// Structure is documented below.
func (o AuthzPolicyOutput) Target() AuthzPolicyTargetOutput {
	return o.ApplyT(func(v *AuthzPolicy) AuthzPolicyTargetOutput { return v.Target }).(AuthzPolicyTargetOutput)
}

// The timestamp when the resource was updated.
func (o AuthzPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthzPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AuthzPolicyArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthzPolicy)(nil)).Elem()
}

func (o AuthzPolicyArrayOutput) ToAuthzPolicyArrayOutput() AuthzPolicyArrayOutput {
	return o
}

func (o AuthzPolicyArrayOutput) ToAuthzPolicyArrayOutputWithContext(ctx context.Context) AuthzPolicyArrayOutput {
	return o
}

func (o AuthzPolicyArrayOutput) Index(i pulumi.IntInput) AuthzPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthzPolicy {
		return vs[0].([]*AuthzPolicy)[vs[1].(int)]
	}).(AuthzPolicyOutput)
}

type AuthzPolicyMapOutput struct{ *pulumi.OutputState }

func (AuthzPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthzPolicy)(nil)).Elem()
}

func (o AuthzPolicyMapOutput) ToAuthzPolicyMapOutput() AuthzPolicyMapOutput {
	return o
}

func (o AuthzPolicyMapOutput) ToAuthzPolicyMapOutputWithContext(ctx context.Context) AuthzPolicyMapOutput {
	return o
}

func (o AuthzPolicyMapOutput) MapIndex(k pulumi.StringInput) AuthzPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthzPolicy {
		return vs[0].(map[string]*AuthzPolicy)[vs[1].(string)]
	}).(AuthzPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyInput)(nil)).Elem(), &AuthzPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyArrayInput)(nil)).Elem(), AuthzPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyMapInput)(nil)).Elem(), AuthzPolicyMap{})
	pulumi.RegisterOutputType(AuthzPolicyOutput{})
	pulumi.RegisterOutputType(AuthzPolicyArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyMapOutput{})
}
