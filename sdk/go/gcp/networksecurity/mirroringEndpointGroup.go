// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Network Security Mirroring Endpoint Group Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Name:                  pulumi.String("example-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			deploymentGroup, err := networksecurity.NewMirroringDeploymentGroup(ctx, "deployment_group", &networksecurity.MirroringDeploymentGroupArgs{
//				MirroringDeploymentGroupId: pulumi.String("example-dg"),
//				Location:                   pulumi.String("global"),
//				Network:                    network.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewMirroringEndpointGroup(ctx, "default", &networksecurity.MirroringEndpointGroupArgs{
//				MirroringEndpointGroupId: pulumi.String("example-eg"),
//				Location:                 pulumi.String("global"),
//				MirroringDeploymentGroup: deploymentGroup.ID(),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MirroringEndpointGroup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/mirroringEndpointGroups/{{mirroring_endpoint_group_id}}`
//
// * `{{project}}/{{location}}/{{mirroring_endpoint_group_id}}`
//
// * `{{location}}/{{mirroring_endpoint_group_id}}`
//
// When using the `pulumi import` command, MirroringEndpointGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringEndpointGroup:MirroringEndpointGroup default projects/{{project}}/locations/{{location}}/mirroringEndpointGroups/{{mirroring_endpoint_group_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringEndpointGroup:MirroringEndpointGroup default {{project}}/{{location}}/{{mirroring_endpoint_group_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringEndpointGroup:MirroringEndpointGroup default {{location}}/{{mirroring_endpoint_group_id}}
// ```
type MirroringEndpointGroup struct {
	pulumi.CustomResourceState

	// Output only. [Output only] Create time stamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroup`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. Immutable. The Mirroring Deployment Group that this resource is connected to. Format
	// is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup pulumi.StringOutput `pulumi:"mirroringDeploymentGroup"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringEndpointGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringEndpointGroupId pulumi.StringOutput `pulumi:"mirroringEndpointGroupId"`
	// Immutable. Identifier. The name of the MirroringEndpointGroup.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. Current state of the endpoint group.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CLOSED
	// CREATING
	// DELETING
	// OUT_OF_SYNC
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. [Output only] Update time stamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMirroringEndpointGroup registers a new resource with the given unique name, arguments, and options.
func NewMirroringEndpointGroup(ctx *pulumi.Context,
	name string, args *MirroringEndpointGroupArgs, opts ...pulumi.ResourceOption) (*MirroringEndpointGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MirroringDeploymentGroup == nil {
		return nil, errors.New("invalid value for required argument 'MirroringDeploymentGroup'")
	}
	if args.MirroringEndpointGroupId == nil {
		return nil, errors.New("invalid value for required argument 'MirroringEndpointGroupId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MirroringEndpointGroup
	err := ctx.RegisterResource("gcp:networksecurity/mirroringEndpointGroup:MirroringEndpointGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMirroringEndpointGroup gets an existing MirroringEndpointGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMirroringEndpointGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MirroringEndpointGroupState, opts ...pulumi.ResourceOption) (*MirroringEndpointGroup, error) {
	var resource MirroringEndpointGroup
	err := ctx.ReadResource("gcp:networksecurity/mirroringEndpointGroup:MirroringEndpointGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MirroringEndpointGroup resources.
type mirroringEndpointGroupState struct {
	// Output only. [Output only] Create time stamp
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroup`.
	Location *string `pulumi:"location"`
	// Required. Immutable. The Mirroring Deployment Group that this resource is connected to. Format
	// is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup *string `pulumi:"mirroringDeploymentGroup"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringEndpointGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringEndpointGroupId *string `pulumi:"mirroringEndpointGroupId"`
	// Immutable. Identifier. The name of the MirroringEndpointGroup.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. Current state of the endpoint group.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CLOSED
	// CREATING
	// DELETING
	// OUT_OF_SYNC
	State *string `pulumi:"state"`
	// Output only. [Output only] Update time stamp
	UpdateTime *string `pulumi:"updateTime"`
}

type MirroringEndpointGroupState struct {
	// Output only. [Output only] Create time stamp
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroup`.
	Location pulumi.StringPtrInput
	// Required. Immutable. The Mirroring Deployment Group that this resource is connected to. Format
	// is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup pulumi.StringPtrInput
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringEndpointGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringEndpointGroupId pulumi.StringPtrInput
	// Immutable. Identifier. The name of the MirroringEndpointGroup.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling pulumi.BoolPtrInput
	// Output only. Current state of the endpoint group.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CLOSED
	// CREATING
	// DELETING
	// OUT_OF_SYNC
	State pulumi.StringPtrInput
	// Output only. [Output only] Update time stamp
	UpdateTime pulumi.StringPtrInput
}

func (MirroringEndpointGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*mirroringEndpointGroupState)(nil)).Elem()
}

type mirroringEndpointGroupArgs struct {
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroup`.
	Location string `pulumi:"location"`
	// Required. Immutable. The Mirroring Deployment Group that this resource is connected to. Format
	// is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup string `pulumi:"mirroringDeploymentGroup"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringEndpointGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringEndpointGroupId string `pulumi:"mirroringEndpointGroupId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a MirroringEndpointGroup resource.
type MirroringEndpointGroupArgs struct {
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroup`.
	Location pulumi.StringInput
	// Required. Immutable. The Mirroring Deployment Group that this resource is connected to. Format
	// is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup pulumi.StringInput
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringEndpointGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringEndpointGroupId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (MirroringEndpointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mirroringEndpointGroupArgs)(nil)).Elem()
}

type MirroringEndpointGroupInput interface {
	pulumi.Input

	ToMirroringEndpointGroupOutput() MirroringEndpointGroupOutput
	ToMirroringEndpointGroupOutputWithContext(ctx context.Context) MirroringEndpointGroupOutput
}

func (*MirroringEndpointGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**MirroringEndpointGroup)(nil)).Elem()
}

func (i *MirroringEndpointGroup) ToMirroringEndpointGroupOutput() MirroringEndpointGroupOutput {
	return i.ToMirroringEndpointGroupOutputWithContext(context.Background())
}

func (i *MirroringEndpointGroup) ToMirroringEndpointGroupOutputWithContext(ctx context.Context) MirroringEndpointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringEndpointGroupOutput)
}

// MirroringEndpointGroupArrayInput is an input type that accepts MirroringEndpointGroupArray and MirroringEndpointGroupArrayOutput values.
// You can construct a concrete instance of `MirroringEndpointGroupArrayInput` via:
//
//	MirroringEndpointGroupArray{ MirroringEndpointGroupArgs{...} }
type MirroringEndpointGroupArrayInput interface {
	pulumi.Input

	ToMirroringEndpointGroupArrayOutput() MirroringEndpointGroupArrayOutput
	ToMirroringEndpointGroupArrayOutputWithContext(context.Context) MirroringEndpointGroupArrayOutput
}

type MirroringEndpointGroupArray []MirroringEndpointGroupInput

func (MirroringEndpointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirroringEndpointGroup)(nil)).Elem()
}

func (i MirroringEndpointGroupArray) ToMirroringEndpointGroupArrayOutput() MirroringEndpointGroupArrayOutput {
	return i.ToMirroringEndpointGroupArrayOutputWithContext(context.Background())
}

func (i MirroringEndpointGroupArray) ToMirroringEndpointGroupArrayOutputWithContext(ctx context.Context) MirroringEndpointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringEndpointGroupArrayOutput)
}

// MirroringEndpointGroupMapInput is an input type that accepts MirroringEndpointGroupMap and MirroringEndpointGroupMapOutput values.
// You can construct a concrete instance of `MirroringEndpointGroupMapInput` via:
//
//	MirroringEndpointGroupMap{ "key": MirroringEndpointGroupArgs{...} }
type MirroringEndpointGroupMapInput interface {
	pulumi.Input

	ToMirroringEndpointGroupMapOutput() MirroringEndpointGroupMapOutput
	ToMirroringEndpointGroupMapOutputWithContext(context.Context) MirroringEndpointGroupMapOutput
}

type MirroringEndpointGroupMap map[string]MirroringEndpointGroupInput

func (MirroringEndpointGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirroringEndpointGroup)(nil)).Elem()
}

func (i MirroringEndpointGroupMap) ToMirroringEndpointGroupMapOutput() MirroringEndpointGroupMapOutput {
	return i.ToMirroringEndpointGroupMapOutputWithContext(context.Background())
}

func (i MirroringEndpointGroupMap) ToMirroringEndpointGroupMapOutputWithContext(ctx context.Context) MirroringEndpointGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringEndpointGroupMapOutput)
}

type MirroringEndpointGroupOutput struct{ *pulumi.OutputState }

func (MirroringEndpointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MirroringEndpointGroup)(nil)).Elem()
}

func (o MirroringEndpointGroupOutput) ToMirroringEndpointGroupOutput() MirroringEndpointGroupOutput {
	return o
}

func (o MirroringEndpointGroupOutput) ToMirroringEndpointGroupOutputWithContext(ctx context.Context) MirroringEndpointGroupOutput {
	return o
}

// Output only. [Output only] Create time stamp
func (o MirroringEndpointGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o MirroringEndpointGroupOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. Labels as key value pairs
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o MirroringEndpointGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroup`.
func (o MirroringEndpointGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. Immutable. The Mirroring Deployment Group that this resource is connected to. Format
// is:
// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
func (o MirroringEndpointGroupOutput) MirroringDeploymentGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringOutput { return v.MirroringDeploymentGroup }).(pulumi.StringOutput)
}

// Required. Id of the requesting object
// If auto-generating Id server-side, remove this field and
// mirroringEndpointGroupId from the methodSignature of Create RPC
//
// ***
func (o MirroringEndpointGroupOutput) MirroringEndpointGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringOutput { return v.MirroringEndpointGroupId }).(pulumi.StringOutput)
}

// Immutable. Identifier. The name of the MirroringEndpointGroup.
func (o MirroringEndpointGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o MirroringEndpointGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o MirroringEndpointGroupOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Whether reconciling is in progress, recommended per
// https://google.aip.dev/128.
func (o MirroringEndpointGroupOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Output only. Current state of the endpoint group.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// CLOSED
// CREATING
// DELETING
// OUT_OF_SYNC
func (o MirroringEndpointGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. [Output only] Update time stamp
func (o MirroringEndpointGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MirroringEndpointGroupArrayOutput struct{ *pulumi.OutputState }

func (MirroringEndpointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirroringEndpointGroup)(nil)).Elem()
}

func (o MirroringEndpointGroupArrayOutput) ToMirroringEndpointGroupArrayOutput() MirroringEndpointGroupArrayOutput {
	return o
}

func (o MirroringEndpointGroupArrayOutput) ToMirroringEndpointGroupArrayOutputWithContext(ctx context.Context) MirroringEndpointGroupArrayOutput {
	return o
}

func (o MirroringEndpointGroupArrayOutput) Index(i pulumi.IntInput) MirroringEndpointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MirroringEndpointGroup {
		return vs[0].([]*MirroringEndpointGroup)[vs[1].(int)]
	}).(MirroringEndpointGroupOutput)
}

type MirroringEndpointGroupMapOutput struct{ *pulumi.OutputState }

func (MirroringEndpointGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirroringEndpointGroup)(nil)).Elem()
}

func (o MirroringEndpointGroupMapOutput) ToMirroringEndpointGroupMapOutput() MirroringEndpointGroupMapOutput {
	return o
}

func (o MirroringEndpointGroupMapOutput) ToMirroringEndpointGroupMapOutputWithContext(ctx context.Context) MirroringEndpointGroupMapOutput {
	return o
}

func (o MirroringEndpointGroupMapOutput) MapIndex(k pulumi.StringInput) MirroringEndpointGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MirroringEndpointGroup {
		return vs[0].(map[string]*MirroringEndpointGroup)[vs[1].(string)]
	}).(MirroringEndpointGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringEndpointGroupInput)(nil)).Elem(), &MirroringEndpointGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringEndpointGroupArrayInput)(nil)).Elem(), MirroringEndpointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringEndpointGroupMapInput)(nil)).Elem(), MirroringEndpointGroupMap{})
	pulumi.RegisterOutputType(MirroringEndpointGroupOutput{})
	pulumi.RegisterOutputType(MirroringEndpointGroupArrayOutput{})
	pulumi.RegisterOutputType(MirroringEndpointGroupMapOutput{})
}
