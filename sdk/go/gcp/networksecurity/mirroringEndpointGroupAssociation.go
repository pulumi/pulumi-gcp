// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An endpoint group association represents a link between a network and an
// endpoint group in the organization.
//
// Creating an association creates the networking infrastructure linking the
// network to the endpoint group, but does not enable mirroring by itself.
// To enable mirroring, the user must also create a network firewall policy
// containing mirroring rules and associate it with the network.
//
// To get more information about MirroringEndpointGroupAssociation, see:
//
// * [API documentation](https://cloud.google.com/network-security-integration/docs/reference/rest/v1/projects.locations.mirroringEndpointGroupAssociations)
// * How-to Guides
//   - [Mirroring endpoint group association overview](https://cloud.google.com/network-security-integration/docs/out-of-band/endpoint-groups-overview#mirroring-endpoint-group-association)
//
// ## Example Usage
//
// ### Network Security Mirroring Endpoint Group Association Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			producerNetwork, err := compute.NewNetwork(ctx, "producer_network", &compute.NetworkArgs{
//				Name:                  pulumi.String("example-prod-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			consumerNetwork, err := compute.NewNetwork(ctx, "consumer_network", &compute.NetworkArgs{
//				Name:                  pulumi.String("example-cons-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			deploymentGroup, err := networksecurity.NewMirroringDeploymentGroup(ctx, "deployment_group", &networksecurity.MirroringDeploymentGroupArgs{
//				MirroringDeploymentGroupId: pulumi.String("example-dg"),
//				Location:                   pulumi.String("global"),
//				Network:                    producerNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			endpointGroup, err := networksecurity.NewMirroringEndpointGroup(ctx, "endpoint_group", &networksecurity.MirroringEndpointGroupArgs{
//				MirroringEndpointGroupId: pulumi.String("example-eg"),
//				Location:                 pulumi.String("global"),
//				MirroringDeploymentGroup: deploymentGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewMirroringEndpointGroupAssociation(ctx, "default", &networksecurity.MirroringEndpointGroupAssociationArgs{
//				MirroringEndpointGroupAssociationId: pulumi.String("example-ega"),
//				Location:                            pulumi.String("global"),
//				Network:                             consumerNetwork.ID(),
//				MirroringEndpointGroup:              endpointGroup.ID(),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MirroringEndpointGroupAssociation can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/mirroringEndpointGroupAssociations/{{mirroring_endpoint_group_association_id}}`
//
// * `{{project}}/{{location}}/{{mirroring_endpoint_group_association_id}}`
//
// * `{{location}}/{{mirroring_endpoint_group_association_id}}`
//
// When using the `pulumi import` command, MirroringEndpointGroupAssociation can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringEndpointGroupAssociation:MirroringEndpointGroupAssociation default projects/{{project}}/locations/{{location}}/mirroringEndpointGroupAssociations/{{mirroring_endpoint_group_association_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringEndpointGroupAssociation:MirroringEndpointGroupAssociation default {{project}}/{{location}}/{{mirroring_endpoint_group_association_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringEndpointGroupAssociation:MirroringEndpointGroupAssociation default {{location}}/{{mirroring_endpoint_group_association_id}}
// ```
type MirroringEndpointGroupAssociation struct {
	pulumi.CustomResourceState

	// The timestamp when the resource was created.
	// See https://google.aip.dev/148#timestamps.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Labels are key/value pairs that help to organize and filter resources.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The cloud location of the association, currently restricted to `global`.
	Location pulumi.StringOutput `pulumi:"location"`
	// The list of locations where the association is configured. This information
	// is retrieved from the linked endpoint group.
	// Structure is documented below.
	Locations MirroringEndpointGroupAssociationLocationArrayOutput `pulumi:"locations"`
	// (Deprecated)
	// The list of locations where the association is present. This information
	// is retrieved from the linked endpoint group, and not configured as part
	// of the association itself.
	// Structure is documented below.
	//
	// Deprecated: `locationsDetails` is deprecated and will be removed in a future major release. Use `locations` instead.
	LocationsDetails MirroringEndpointGroupAssociationLocationsDetailArrayOutput `pulumi:"locationsDetails"`
	// The endpoint group that this association is connected to, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	MirroringEndpointGroup pulumi.StringOutput `pulumi:"mirroringEndpointGroup"`
	// The ID to use for the new association, which will become the final
	// component of the endpoint group's resource name. If not provided, the
	// server will generate a unique ID.
	MirroringEndpointGroupAssociationId pulumi.StringPtrOutput `pulumi:"mirroringEndpointGroupAssociationId"`
	// The resource name of this endpoint group association, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroupAssociations/my-eg-association`.
	// See https://google.aip.dev/122 for more details.
	Name pulumi.StringOutput `pulumi:"name"`
	// The VPC network that is associated. for example:
	// `projects/123456789/global/networks/my-network`.
	// See https://google.aip.dev/124.
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The current state of the resource does not match the user's intended state,
	// and the system is working to reconcile them. This part of the normal
	// operation (e.g. adding a new location to the target deployment group).
	// See https://google.aip.dev/128.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State pulumi.StringOutput `pulumi:"state"`
	// The timestamp when the resource was most recently updated.
	// See https://google.aip.dev/148#timestamps.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMirroringEndpointGroupAssociation registers a new resource with the given unique name, arguments, and options.
func NewMirroringEndpointGroupAssociation(ctx *pulumi.Context,
	name string, args *MirroringEndpointGroupAssociationArgs, opts ...pulumi.ResourceOption) (*MirroringEndpointGroupAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MirroringEndpointGroup == nil {
		return nil, errors.New("invalid value for required argument 'MirroringEndpointGroup'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MirroringEndpointGroupAssociation
	err := ctx.RegisterResource("gcp:networksecurity/mirroringEndpointGroupAssociation:MirroringEndpointGroupAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMirroringEndpointGroupAssociation gets an existing MirroringEndpointGroupAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMirroringEndpointGroupAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MirroringEndpointGroupAssociationState, opts ...pulumi.ResourceOption) (*MirroringEndpointGroupAssociation, error) {
	var resource MirroringEndpointGroupAssociation
	err := ctx.ReadResource("gcp:networksecurity/mirroringEndpointGroupAssociation:MirroringEndpointGroupAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MirroringEndpointGroupAssociation resources.
type mirroringEndpointGroupAssociationState struct {
	// The timestamp when the resource was created.
	// See https://google.aip.dev/148#timestamps.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Labels are key/value pairs that help to organize and filter resources.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The cloud location of the association, currently restricted to `global`.
	Location *string `pulumi:"location"`
	// The list of locations where the association is configured. This information
	// is retrieved from the linked endpoint group.
	// Structure is documented below.
	Locations []MirroringEndpointGroupAssociationLocation `pulumi:"locations"`
	// (Deprecated)
	// The list of locations where the association is present. This information
	// is retrieved from the linked endpoint group, and not configured as part
	// of the association itself.
	// Structure is documented below.
	//
	// Deprecated: `locationsDetails` is deprecated and will be removed in a future major release. Use `locations` instead.
	LocationsDetails []MirroringEndpointGroupAssociationLocationsDetail `pulumi:"locationsDetails"`
	// The endpoint group that this association is connected to, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	MirroringEndpointGroup *string `pulumi:"mirroringEndpointGroup"`
	// The ID to use for the new association, which will become the final
	// component of the endpoint group's resource name. If not provided, the
	// server will generate a unique ID.
	MirroringEndpointGroupAssociationId *string `pulumi:"mirroringEndpointGroupAssociationId"`
	// The resource name of this endpoint group association, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroupAssociations/my-eg-association`.
	// See https://google.aip.dev/122 for more details.
	Name *string `pulumi:"name"`
	// The VPC network that is associated. for example:
	// `projects/123456789/global/networks/my-network`.
	// See https://google.aip.dev/124.
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The current state of the resource does not match the user's intended state,
	// and the system is working to reconcile them. This part of the normal
	// operation (e.g. adding a new location to the target deployment group).
	// See https://google.aip.dev/128.
	Reconciling *bool `pulumi:"reconciling"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State *string `pulumi:"state"`
	// The timestamp when the resource was most recently updated.
	// See https://google.aip.dev/148#timestamps.
	UpdateTime *string `pulumi:"updateTime"`
}

type MirroringEndpointGroupAssociationState struct {
	// The timestamp when the resource was created.
	// See https://google.aip.dev/148#timestamps.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Labels are key/value pairs that help to organize and filter resources.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The cloud location of the association, currently restricted to `global`.
	Location pulumi.StringPtrInput
	// The list of locations where the association is configured. This information
	// is retrieved from the linked endpoint group.
	// Structure is documented below.
	Locations MirroringEndpointGroupAssociationLocationArrayInput
	// (Deprecated)
	// The list of locations where the association is present. This information
	// is retrieved from the linked endpoint group, and not configured as part
	// of the association itself.
	// Structure is documented below.
	//
	// Deprecated: `locationsDetails` is deprecated and will be removed in a future major release. Use `locations` instead.
	LocationsDetails MirroringEndpointGroupAssociationLocationsDetailArrayInput
	// The endpoint group that this association is connected to, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	MirroringEndpointGroup pulumi.StringPtrInput
	// The ID to use for the new association, which will become the final
	// component of the endpoint group's resource name. If not provided, the
	// server will generate a unique ID.
	MirroringEndpointGroupAssociationId pulumi.StringPtrInput
	// The resource name of this endpoint group association, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroupAssociations/my-eg-association`.
	// See https://google.aip.dev/122 for more details.
	Name pulumi.StringPtrInput
	// The VPC network that is associated. for example:
	// `projects/123456789/global/networks/my-network`.
	// See https://google.aip.dev/124.
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The current state of the resource does not match the user's intended state,
	// and the system is working to reconcile them. This part of the normal
	// operation (e.g. adding a new location to the target deployment group).
	// See https://google.aip.dev/128.
	Reconciling pulumi.BoolPtrInput
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State pulumi.StringPtrInput
	// The timestamp when the resource was most recently updated.
	// See https://google.aip.dev/148#timestamps.
	UpdateTime pulumi.StringPtrInput
}

func (MirroringEndpointGroupAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*mirroringEndpointGroupAssociationState)(nil)).Elem()
}

type mirroringEndpointGroupAssociationArgs struct {
	// Labels are key/value pairs that help to organize and filter resources.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The cloud location of the association, currently restricted to `global`.
	Location string `pulumi:"location"`
	// The endpoint group that this association is connected to, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	MirroringEndpointGroup string `pulumi:"mirroringEndpointGroup"`
	// The ID to use for the new association, which will become the final
	// component of the endpoint group's resource name. If not provided, the
	// server will generate a unique ID.
	MirroringEndpointGroupAssociationId *string `pulumi:"mirroringEndpointGroupAssociationId"`
	// The VPC network that is associated. for example:
	// `projects/123456789/global/networks/my-network`.
	// See https://google.aip.dev/124.
	Network string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a MirroringEndpointGroupAssociation resource.
type MirroringEndpointGroupAssociationArgs struct {
	// Labels are key/value pairs that help to organize and filter resources.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The cloud location of the association, currently restricted to `global`.
	Location pulumi.StringInput
	// The endpoint group that this association is connected to, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	MirroringEndpointGroup pulumi.StringInput
	// The ID to use for the new association, which will become the final
	// component of the endpoint group's resource name. If not provided, the
	// server will generate a unique ID.
	MirroringEndpointGroupAssociationId pulumi.StringPtrInput
	// The VPC network that is associated. for example:
	// `projects/123456789/global/networks/my-network`.
	// See https://google.aip.dev/124.
	Network pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (MirroringEndpointGroupAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mirroringEndpointGroupAssociationArgs)(nil)).Elem()
}

type MirroringEndpointGroupAssociationInput interface {
	pulumi.Input

	ToMirroringEndpointGroupAssociationOutput() MirroringEndpointGroupAssociationOutput
	ToMirroringEndpointGroupAssociationOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationOutput
}

func (*MirroringEndpointGroupAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**MirroringEndpointGroupAssociation)(nil)).Elem()
}

func (i *MirroringEndpointGroupAssociation) ToMirroringEndpointGroupAssociationOutput() MirroringEndpointGroupAssociationOutput {
	return i.ToMirroringEndpointGroupAssociationOutputWithContext(context.Background())
}

func (i *MirroringEndpointGroupAssociation) ToMirroringEndpointGroupAssociationOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringEndpointGroupAssociationOutput)
}

// MirroringEndpointGroupAssociationArrayInput is an input type that accepts MirroringEndpointGroupAssociationArray and MirroringEndpointGroupAssociationArrayOutput values.
// You can construct a concrete instance of `MirroringEndpointGroupAssociationArrayInput` via:
//
//	MirroringEndpointGroupAssociationArray{ MirroringEndpointGroupAssociationArgs{...} }
type MirroringEndpointGroupAssociationArrayInput interface {
	pulumi.Input

	ToMirroringEndpointGroupAssociationArrayOutput() MirroringEndpointGroupAssociationArrayOutput
	ToMirroringEndpointGroupAssociationArrayOutputWithContext(context.Context) MirroringEndpointGroupAssociationArrayOutput
}

type MirroringEndpointGroupAssociationArray []MirroringEndpointGroupAssociationInput

func (MirroringEndpointGroupAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirroringEndpointGroupAssociation)(nil)).Elem()
}

func (i MirroringEndpointGroupAssociationArray) ToMirroringEndpointGroupAssociationArrayOutput() MirroringEndpointGroupAssociationArrayOutput {
	return i.ToMirroringEndpointGroupAssociationArrayOutputWithContext(context.Background())
}

func (i MirroringEndpointGroupAssociationArray) ToMirroringEndpointGroupAssociationArrayOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringEndpointGroupAssociationArrayOutput)
}

// MirroringEndpointGroupAssociationMapInput is an input type that accepts MirroringEndpointGroupAssociationMap and MirroringEndpointGroupAssociationMapOutput values.
// You can construct a concrete instance of `MirroringEndpointGroupAssociationMapInput` via:
//
//	MirroringEndpointGroupAssociationMap{ "key": MirroringEndpointGroupAssociationArgs{...} }
type MirroringEndpointGroupAssociationMapInput interface {
	pulumi.Input

	ToMirroringEndpointGroupAssociationMapOutput() MirroringEndpointGroupAssociationMapOutput
	ToMirroringEndpointGroupAssociationMapOutputWithContext(context.Context) MirroringEndpointGroupAssociationMapOutput
}

type MirroringEndpointGroupAssociationMap map[string]MirroringEndpointGroupAssociationInput

func (MirroringEndpointGroupAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirroringEndpointGroupAssociation)(nil)).Elem()
}

func (i MirroringEndpointGroupAssociationMap) ToMirroringEndpointGroupAssociationMapOutput() MirroringEndpointGroupAssociationMapOutput {
	return i.ToMirroringEndpointGroupAssociationMapOutputWithContext(context.Background())
}

func (i MirroringEndpointGroupAssociationMap) ToMirroringEndpointGroupAssociationMapOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringEndpointGroupAssociationMapOutput)
}

type MirroringEndpointGroupAssociationOutput struct{ *pulumi.OutputState }

func (MirroringEndpointGroupAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MirroringEndpointGroupAssociation)(nil)).Elem()
}

func (o MirroringEndpointGroupAssociationOutput) ToMirroringEndpointGroupAssociationOutput() MirroringEndpointGroupAssociationOutput {
	return o
}

func (o MirroringEndpointGroupAssociationOutput) ToMirroringEndpointGroupAssociationOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationOutput {
	return o
}

// The timestamp when the resource was created.
// See https://google.aip.dev/148#timestamps.
func (o MirroringEndpointGroupAssociationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o MirroringEndpointGroupAssociationOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Labels are key/value pairs that help to organize and filter resources.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o MirroringEndpointGroupAssociationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The cloud location of the association, currently restricted to `global`.
func (o MirroringEndpointGroupAssociationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The list of locations where the association is configured. This information
// is retrieved from the linked endpoint group.
// Structure is documented below.
func (o MirroringEndpointGroupAssociationOutput) Locations() MirroringEndpointGroupAssociationLocationArrayOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) MirroringEndpointGroupAssociationLocationArrayOutput {
		return v.Locations
	}).(MirroringEndpointGroupAssociationLocationArrayOutput)
}

// (Deprecated)
// The list of locations where the association is present. This information
// is retrieved from the linked endpoint group, and not configured as part
// of the association itself.
// Structure is documented below.
//
// Deprecated: `locationsDetails` is deprecated and will be removed in a future major release. Use `locations` instead.
func (o MirroringEndpointGroupAssociationOutput) LocationsDetails() MirroringEndpointGroupAssociationLocationsDetailArrayOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) MirroringEndpointGroupAssociationLocationsDetailArrayOutput {
		return v.LocationsDetails
	}).(MirroringEndpointGroupAssociationLocationsDetailArrayOutput)
}

// The endpoint group that this association is connected to, for example:
// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
// See https://google.aip.dev/124.
func (o MirroringEndpointGroupAssociationOutput) MirroringEndpointGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringOutput { return v.MirroringEndpointGroup }).(pulumi.StringOutput)
}

// The ID to use for the new association, which will become the final
// component of the endpoint group's resource name. If not provided, the
// server will generate a unique ID.
func (o MirroringEndpointGroupAssociationOutput) MirroringEndpointGroupAssociationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringPtrOutput {
		return v.MirroringEndpointGroupAssociationId
	}).(pulumi.StringPtrOutput)
}

// The resource name of this endpoint group association, for example:
// `projects/123456789/locations/global/mirroringEndpointGroupAssociations/my-eg-association`.
// See https://google.aip.dev/122 for more details.
func (o MirroringEndpointGroupAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The VPC network that is associated. for example:
// `projects/123456789/global/networks/my-network`.
// See https://google.aip.dev/124.
func (o MirroringEndpointGroupAssociationOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o MirroringEndpointGroupAssociationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o MirroringEndpointGroupAssociationOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The current state of the resource does not match the user's intended state,
// and the system is working to reconcile them. This part of the normal
// operation (e.g. adding a new location to the target deployment group).
// See https://google.aip.dev/128.
func (o MirroringEndpointGroupAssociationOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// (Output)
// The current state of the association in this location.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// OUT_OF_SYNC
func (o MirroringEndpointGroupAssociationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The timestamp when the resource was most recently updated.
// See https://google.aip.dev/148#timestamps.
func (o MirroringEndpointGroupAssociationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringEndpointGroupAssociation) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MirroringEndpointGroupAssociationArrayOutput struct{ *pulumi.OutputState }

func (MirroringEndpointGroupAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirroringEndpointGroupAssociation)(nil)).Elem()
}

func (o MirroringEndpointGroupAssociationArrayOutput) ToMirroringEndpointGroupAssociationArrayOutput() MirroringEndpointGroupAssociationArrayOutput {
	return o
}

func (o MirroringEndpointGroupAssociationArrayOutput) ToMirroringEndpointGroupAssociationArrayOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationArrayOutput {
	return o
}

func (o MirroringEndpointGroupAssociationArrayOutput) Index(i pulumi.IntInput) MirroringEndpointGroupAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MirroringEndpointGroupAssociation {
		return vs[0].([]*MirroringEndpointGroupAssociation)[vs[1].(int)]
	}).(MirroringEndpointGroupAssociationOutput)
}

type MirroringEndpointGroupAssociationMapOutput struct{ *pulumi.OutputState }

func (MirroringEndpointGroupAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirroringEndpointGroupAssociation)(nil)).Elem()
}

func (o MirroringEndpointGroupAssociationMapOutput) ToMirroringEndpointGroupAssociationMapOutput() MirroringEndpointGroupAssociationMapOutput {
	return o
}

func (o MirroringEndpointGroupAssociationMapOutput) ToMirroringEndpointGroupAssociationMapOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationMapOutput {
	return o
}

func (o MirroringEndpointGroupAssociationMapOutput) MapIndex(k pulumi.StringInput) MirroringEndpointGroupAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MirroringEndpointGroupAssociation {
		return vs[0].(map[string]*MirroringEndpointGroupAssociation)[vs[1].(string)]
	}).(MirroringEndpointGroupAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringEndpointGroupAssociationInput)(nil)).Elem(), &MirroringEndpointGroupAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringEndpointGroupAssociationArrayInput)(nil)).Elem(), MirroringEndpointGroupAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringEndpointGroupAssociationMapInput)(nil)).Elem(), MirroringEndpointGroupAssociationMap{})
	pulumi.RegisterOutputType(MirroringEndpointGroupAssociationOutput{})
	pulumi.RegisterOutputType(MirroringEndpointGroupAssociationArrayOutput{})
	pulumi.RegisterOutputType(MirroringEndpointGroupAssociationMapOutput{})
}
