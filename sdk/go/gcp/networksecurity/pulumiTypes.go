// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AuthorizationPolicyRule struct {
	// List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
	// If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
	// Structure is documented below.
	Destinations []AuthorizationPolicyRuleDestination `pulumi:"destinations"`
	// List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
	// If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
	// Structure is documented below.
	Sources []AuthorizationPolicyRuleSource `pulumi:"sources"`
}

// AuthorizationPolicyRuleInput is an input type that accepts AuthorizationPolicyRuleArgs and AuthorizationPolicyRuleOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleInput` via:
//
//	AuthorizationPolicyRuleArgs{...}
type AuthorizationPolicyRuleInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleOutput() AuthorizationPolicyRuleOutput
	ToAuthorizationPolicyRuleOutputWithContext(context.Context) AuthorizationPolicyRuleOutput
}

type AuthorizationPolicyRuleArgs struct {
	// List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
	// If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
	// Structure is documented below.
	Destinations AuthorizationPolicyRuleDestinationArrayInput `pulumi:"destinations"`
	// List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
	// If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
	// Structure is documented below.
	Sources AuthorizationPolicyRuleSourceArrayInput `pulumi:"sources"`
}

func (AuthorizationPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRule)(nil)).Elem()
}

func (i AuthorizationPolicyRuleArgs) ToAuthorizationPolicyRuleOutput() AuthorizationPolicyRuleOutput {
	return i.ToAuthorizationPolicyRuleOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleArgs) ToAuthorizationPolicyRuleOutputWithContext(ctx context.Context) AuthorizationPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleOutput)
}

func (i AuthorizationPolicyRuleArgs) ToOutput(ctx context.Context) pulumix.Output[AuthorizationPolicyRule] {
	return pulumix.Output[AuthorizationPolicyRule]{
		OutputState: i.ToAuthorizationPolicyRuleOutputWithContext(ctx).OutputState,
	}
}

// AuthorizationPolicyRuleArrayInput is an input type that accepts AuthorizationPolicyRuleArray and AuthorizationPolicyRuleArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleArrayInput` via:
//
//	AuthorizationPolicyRuleArray{ AuthorizationPolicyRuleArgs{...} }
type AuthorizationPolicyRuleArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleArrayOutput() AuthorizationPolicyRuleArrayOutput
	ToAuthorizationPolicyRuleArrayOutputWithContext(context.Context) AuthorizationPolicyRuleArrayOutput
}

type AuthorizationPolicyRuleArray []AuthorizationPolicyRuleInput

func (AuthorizationPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRule)(nil)).Elem()
}

func (i AuthorizationPolicyRuleArray) ToAuthorizationPolicyRuleArrayOutput() AuthorizationPolicyRuleArrayOutput {
	return i.ToAuthorizationPolicyRuleArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleArray) ToAuthorizationPolicyRuleArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleArrayOutput)
}

func (i AuthorizationPolicyRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]AuthorizationPolicyRule] {
	return pulumix.Output[[]AuthorizationPolicyRule]{
		OutputState: i.ToAuthorizationPolicyRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type AuthorizationPolicyRuleOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRule)(nil)).Elem()
}

func (o AuthorizationPolicyRuleOutput) ToAuthorizationPolicyRuleOutput() AuthorizationPolicyRuleOutput {
	return o
}

func (o AuthorizationPolicyRuleOutput) ToAuthorizationPolicyRuleOutputWithContext(ctx context.Context) AuthorizationPolicyRuleOutput {
	return o
}

func (o AuthorizationPolicyRuleOutput) ToOutput(ctx context.Context) pulumix.Output[AuthorizationPolicyRule] {
	return pulumix.Output[AuthorizationPolicyRule]{
		OutputState: o.OutputState,
	}
}

// List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
// If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
// Structure is documented below.
func (o AuthorizationPolicyRuleOutput) Destinations() AuthorizationPolicyRuleDestinationArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRule) []AuthorizationPolicyRuleDestination { return v.Destinations }).(AuthorizationPolicyRuleDestinationArrayOutput)
}

// List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
// If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
// Structure is documented below.
func (o AuthorizationPolicyRuleOutput) Sources() AuthorizationPolicyRuleSourceArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRule) []AuthorizationPolicyRuleSource { return v.Sources }).(AuthorizationPolicyRuleSourceArrayOutput)
}

type AuthorizationPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRule)(nil)).Elem()
}

func (o AuthorizationPolicyRuleArrayOutput) ToAuthorizationPolicyRuleArrayOutput() AuthorizationPolicyRuleArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleArrayOutput) ToAuthorizationPolicyRuleArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuthorizationPolicyRule] {
	return pulumix.Output[[]AuthorizationPolicyRule]{
		OutputState: o.OutputState,
	}
}

func (o AuthorizationPolicyRuleArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationPolicyRule {
		return vs[0].([]AuthorizationPolicyRule)[vs[1].(int)]
	}).(AuthorizationPolicyRuleOutput)
}

type AuthorizationPolicyRuleDestination struct {
	// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
	Hosts []string `pulumi:"hosts"`
	// Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
	// Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
	// Structure is documented below.
	HttpHeaderMatch *AuthorizationPolicyRuleDestinationHttpHeaderMatch `pulumi:"httpHeaderMatch"`
	// A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
	Methods []string `pulumi:"methods"`
	// List of destination ports to match. At least one port should match.
	Ports []int `pulumi:"ports"`
}

// AuthorizationPolicyRuleDestinationInput is an input type that accepts AuthorizationPolicyRuleDestinationArgs and AuthorizationPolicyRuleDestinationOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleDestinationInput` via:
//
//	AuthorizationPolicyRuleDestinationArgs{...}
type AuthorizationPolicyRuleDestinationInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleDestinationOutput() AuthorizationPolicyRuleDestinationOutput
	ToAuthorizationPolicyRuleDestinationOutputWithContext(context.Context) AuthorizationPolicyRuleDestinationOutput
}

type AuthorizationPolicyRuleDestinationArgs struct {
	// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
	// Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
	// Structure is documented below.
	HttpHeaderMatch AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput `pulumi:"httpHeaderMatch"`
	// A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
	Methods pulumi.StringArrayInput `pulumi:"methods"`
	// List of destination ports to match. At least one port should match.
	Ports pulumi.IntArrayInput `pulumi:"ports"`
}

func (AuthorizationPolicyRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleDestination)(nil)).Elem()
}

func (i AuthorizationPolicyRuleDestinationArgs) ToAuthorizationPolicyRuleDestinationOutput() AuthorizationPolicyRuleDestinationOutput {
	return i.ToAuthorizationPolicyRuleDestinationOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleDestinationArgs) ToAuthorizationPolicyRuleDestinationOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationOutput)
}

func (i AuthorizationPolicyRuleDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[AuthorizationPolicyRuleDestination] {
	return pulumix.Output[AuthorizationPolicyRuleDestination]{
		OutputState: i.ToAuthorizationPolicyRuleDestinationOutputWithContext(ctx).OutputState,
	}
}

// AuthorizationPolicyRuleDestinationArrayInput is an input type that accepts AuthorizationPolicyRuleDestinationArray and AuthorizationPolicyRuleDestinationArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleDestinationArrayInput` via:
//
//	AuthorizationPolicyRuleDestinationArray{ AuthorizationPolicyRuleDestinationArgs{...} }
type AuthorizationPolicyRuleDestinationArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleDestinationArrayOutput() AuthorizationPolicyRuleDestinationArrayOutput
	ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(context.Context) AuthorizationPolicyRuleDestinationArrayOutput
}

type AuthorizationPolicyRuleDestinationArray []AuthorizationPolicyRuleDestinationInput

func (AuthorizationPolicyRuleDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRuleDestination)(nil)).Elem()
}

func (i AuthorizationPolicyRuleDestinationArray) ToAuthorizationPolicyRuleDestinationArrayOutput() AuthorizationPolicyRuleDestinationArrayOutput {
	return i.ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleDestinationArray) ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationArrayOutput)
}

func (i AuthorizationPolicyRuleDestinationArray) ToOutput(ctx context.Context) pulumix.Output[[]AuthorizationPolicyRuleDestination] {
	return pulumix.Output[[]AuthorizationPolicyRuleDestination]{
		OutputState: i.ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(ctx).OutputState,
	}
}

type AuthorizationPolicyRuleDestinationOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleDestination)(nil)).Elem()
}

func (o AuthorizationPolicyRuleDestinationOutput) ToAuthorizationPolicyRuleDestinationOutput() AuthorizationPolicyRuleDestinationOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationOutput) ToAuthorizationPolicyRuleDestinationOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[AuthorizationPolicyRuleDestination] {
	return pulumix.Output[AuthorizationPolicyRuleDestination]{
		OutputState: o.OutputState,
	}
}

// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
func (o AuthorizationPolicyRuleDestinationOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestination) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
// Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
// Structure is documented below.
func (o AuthorizationPolicyRuleDestinationOutput) HttpHeaderMatch() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestination) *AuthorizationPolicyRuleDestinationHttpHeaderMatch {
		return v.HttpHeaderMatch
	}).(AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput)
}

// A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
func (o AuthorizationPolicyRuleDestinationOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestination) []string { return v.Methods }).(pulumi.StringArrayOutput)
}

// List of destination ports to match. At least one port should match.
func (o AuthorizationPolicyRuleDestinationOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestination) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type AuthorizationPolicyRuleDestinationArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRuleDestination)(nil)).Elem()
}

func (o AuthorizationPolicyRuleDestinationArrayOutput) ToAuthorizationPolicyRuleDestinationArrayOutput() AuthorizationPolicyRuleDestinationArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationArrayOutput) ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuthorizationPolicyRuleDestination] {
	return pulumix.Output[[]AuthorizationPolicyRuleDestination]{
		OutputState: o.OutputState,
	}
}

func (o AuthorizationPolicyRuleDestinationArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyRuleDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationPolicyRuleDestination {
		return vs[0].([]AuthorizationPolicyRuleDestination)[vs[1].(int)]
	}).(AuthorizationPolicyRuleDestinationOutput)
}

type AuthorizationPolicyRuleDestinationHttpHeaderMatch struct {
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
	HeaderName string `pulumi:"headerName"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
	RegexMatch string `pulumi:"regexMatch"`
}

// AuthorizationPolicyRuleDestinationHttpHeaderMatchInput is an input type that accepts AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs and AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleDestinationHttpHeaderMatchInput` via:
//
//	AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{...}
type AuthorizationPolicyRuleDestinationHttpHeaderMatchInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput
	ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput
}

type AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs struct {
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
	RegexMatch pulumi.StringInput `pulumi:"regexMatch"`
}

func (AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleDestinationHttpHeaderMatch)(nil)).Elem()
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return i.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput)
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[AuthorizationPolicyRuleDestinationHttpHeaderMatch] {
	return pulumix.Output[AuthorizationPolicyRuleDestinationHttpHeaderMatch]{
		OutputState: i.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(ctx).OutputState,
	}
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return i.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput).ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx)
}

// AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput is an input type that accepts AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs, AuthorizationPolicyRuleDestinationHttpHeaderMatchPtr and AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput` via:
//
//	        AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{...}
//
//	or:
//
//	        nil
type AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput
	ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput
}

type authorizationPolicyRuleDestinationHttpHeaderMatchPtrType AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs

func AuthorizationPolicyRuleDestinationHttpHeaderMatchPtr(v *AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput {
	return (*authorizationPolicyRuleDestinationHttpHeaderMatchPtrType)(v)
}

func (*authorizationPolicyRuleDestinationHttpHeaderMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicyRuleDestinationHttpHeaderMatch)(nil)).Elem()
}

func (i *authorizationPolicyRuleDestinationHttpHeaderMatchPtrType) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return i.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (i *authorizationPolicyRuleDestinationHttpHeaderMatchPtrType) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput)
}

func (i *authorizationPolicyRuleDestinationHttpHeaderMatchPtrType) ToOutput(ctx context.Context) pulumix.Output[*AuthorizationPolicyRuleDestinationHttpHeaderMatch] {
	return pulumix.Output[*AuthorizationPolicyRuleDestinationHttpHeaderMatch]{
		OutputState: i.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx).OutputState,
	}
}

type AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleDestinationHttpHeaderMatch)(nil)).Elem()
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthorizationPolicyRuleDestinationHttpHeaderMatch) *AuthorizationPolicyRuleDestinationHttpHeaderMatch {
		return &v
	}).(AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput)
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[AuthorizationPolicyRuleDestinationHttpHeaderMatch] {
	return pulumix.Output[AuthorizationPolicyRuleDestinationHttpHeaderMatch]{
		OutputState: o.OutputState,
	}
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestinationHttpHeaderMatch) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestinationHttpHeaderMatch) string { return v.RegexMatch }).(pulumi.StringOutput)
}

type AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicyRuleDestinationHttpHeaderMatch)(nil)).Elem()
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuthorizationPolicyRuleDestinationHttpHeaderMatch] {
	return pulumix.Output[*AuthorizationPolicyRuleDestinationHttpHeaderMatch]{
		OutputState: o.OutputState,
	}
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) Elem() AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return o.ApplyT(func(v *AuthorizationPolicyRuleDestinationHttpHeaderMatch) AuthorizationPolicyRuleDestinationHttpHeaderMatch {
		if v != nil {
			return *v
		}
		var ret AuthorizationPolicyRuleDestinationHttpHeaderMatch
		return ret
	}).(AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput)
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicyRuleDestinationHttpHeaderMatch) *string {
		if v == nil {
			return nil
		}
		return &v.HeaderName
	}).(pulumi.StringPtrOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicyRuleDestinationHttpHeaderMatch) *string {
		if v == nil {
			return nil
		}
		return &v.RegexMatch
	}).(pulumi.StringPtrOutput)
}

type AuthorizationPolicyRuleSource struct {
	// List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
	// The IP addresses of any load balancers or proxies should be considered untrusted.
	IpBlocks []string `pulumi:"ipBlocks"`
	// List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
	// Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
	Principals []string `pulumi:"principals"`
}

// AuthorizationPolicyRuleSourceInput is an input type that accepts AuthorizationPolicyRuleSourceArgs and AuthorizationPolicyRuleSourceOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleSourceInput` via:
//
//	AuthorizationPolicyRuleSourceArgs{...}
type AuthorizationPolicyRuleSourceInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleSourceOutput() AuthorizationPolicyRuleSourceOutput
	ToAuthorizationPolicyRuleSourceOutputWithContext(context.Context) AuthorizationPolicyRuleSourceOutput
}

type AuthorizationPolicyRuleSourceArgs struct {
	// List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
	// The IP addresses of any load balancers or proxies should be considered untrusted.
	IpBlocks pulumi.StringArrayInput `pulumi:"ipBlocks"`
	// List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
	// Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
	Principals pulumi.StringArrayInput `pulumi:"principals"`
}

func (AuthorizationPolicyRuleSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleSource)(nil)).Elem()
}

func (i AuthorizationPolicyRuleSourceArgs) ToAuthorizationPolicyRuleSourceOutput() AuthorizationPolicyRuleSourceOutput {
	return i.ToAuthorizationPolicyRuleSourceOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleSourceArgs) ToAuthorizationPolicyRuleSourceOutputWithContext(ctx context.Context) AuthorizationPolicyRuleSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleSourceOutput)
}

func (i AuthorizationPolicyRuleSourceArgs) ToOutput(ctx context.Context) pulumix.Output[AuthorizationPolicyRuleSource] {
	return pulumix.Output[AuthorizationPolicyRuleSource]{
		OutputState: i.ToAuthorizationPolicyRuleSourceOutputWithContext(ctx).OutputState,
	}
}

// AuthorizationPolicyRuleSourceArrayInput is an input type that accepts AuthorizationPolicyRuleSourceArray and AuthorizationPolicyRuleSourceArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleSourceArrayInput` via:
//
//	AuthorizationPolicyRuleSourceArray{ AuthorizationPolicyRuleSourceArgs{...} }
type AuthorizationPolicyRuleSourceArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleSourceArrayOutput() AuthorizationPolicyRuleSourceArrayOutput
	ToAuthorizationPolicyRuleSourceArrayOutputWithContext(context.Context) AuthorizationPolicyRuleSourceArrayOutput
}

type AuthorizationPolicyRuleSourceArray []AuthorizationPolicyRuleSourceInput

func (AuthorizationPolicyRuleSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRuleSource)(nil)).Elem()
}

func (i AuthorizationPolicyRuleSourceArray) ToAuthorizationPolicyRuleSourceArrayOutput() AuthorizationPolicyRuleSourceArrayOutput {
	return i.ToAuthorizationPolicyRuleSourceArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleSourceArray) ToAuthorizationPolicyRuleSourceArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleSourceArrayOutput)
}

func (i AuthorizationPolicyRuleSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]AuthorizationPolicyRuleSource] {
	return pulumix.Output[[]AuthorizationPolicyRuleSource]{
		OutputState: i.ToAuthorizationPolicyRuleSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type AuthorizationPolicyRuleSourceOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleSource)(nil)).Elem()
}

func (o AuthorizationPolicyRuleSourceOutput) ToAuthorizationPolicyRuleSourceOutput() AuthorizationPolicyRuleSourceOutput {
	return o
}

func (o AuthorizationPolicyRuleSourceOutput) ToAuthorizationPolicyRuleSourceOutputWithContext(ctx context.Context) AuthorizationPolicyRuleSourceOutput {
	return o
}

func (o AuthorizationPolicyRuleSourceOutput) ToOutput(ctx context.Context) pulumix.Output[AuthorizationPolicyRuleSource] {
	return pulumix.Output[AuthorizationPolicyRuleSource]{
		OutputState: o.OutputState,
	}
}

// List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
// The IP addresses of any load balancers or proxies should be considered untrusted.
func (o AuthorizationPolicyRuleSourceOutput) IpBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleSource) []string { return v.IpBlocks }).(pulumi.StringArrayOutput)
}

// List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
// Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
func (o AuthorizationPolicyRuleSourceOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleSource) []string { return v.Principals }).(pulumi.StringArrayOutput)
}

type AuthorizationPolicyRuleSourceArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRuleSource)(nil)).Elem()
}

func (o AuthorizationPolicyRuleSourceArrayOutput) ToAuthorizationPolicyRuleSourceArrayOutput() AuthorizationPolicyRuleSourceArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleSourceArrayOutput) ToAuthorizationPolicyRuleSourceArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleSourceArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuthorizationPolicyRuleSource] {
	return pulumix.Output[[]AuthorizationPolicyRuleSource]{
		OutputState: o.OutputState,
	}
}

func (o AuthorizationPolicyRuleSourceArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyRuleSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationPolicyRuleSource {
		return vs[0].([]AuthorizationPolicyRuleSource)[vs[1].(int)]
	}).(AuthorizationPolicyRuleSourceOutput)
}

type ClientTlsPolicyClientCertificate struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	// Structure is documented below.
	CertificateProviderInstance *ClientTlsPolicyClientCertificateCertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint *ClientTlsPolicyClientCertificateGrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ClientTlsPolicyClientCertificateInput is an input type that accepts ClientTlsPolicyClientCertificateArgs and ClientTlsPolicyClientCertificateOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateInput` via:
//
//	ClientTlsPolicyClientCertificateArgs{...}
type ClientTlsPolicyClientCertificateInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateOutput() ClientTlsPolicyClientCertificateOutput
	ToClientTlsPolicyClientCertificateOutputWithContext(context.Context) ClientTlsPolicyClientCertificateOutput
}

type ClientTlsPolicyClientCertificateArgs struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	// Structure is documented below.
	CertificateProviderInstance ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint ClientTlsPolicyClientCertificateGrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ClientTlsPolicyClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificate)(nil)).Elem()
}

func (i ClientTlsPolicyClientCertificateArgs) ToClientTlsPolicyClientCertificateOutput() ClientTlsPolicyClientCertificateOutput {
	return i.ToClientTlsPolicyClientCertificateOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateArgs) ToClientTlsPolicyClientCertificateOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateOutput)
}

func (i ClientTlsPolicyClientCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyClientCertificate] {
	return pulumix.Output[ClientTlsPolicyClientCertificate]{
		OutputState: i.ToClientTlsPolicyClientCertificateOutputWithContext(ctx).OutputState,
	}
}

func (i ClientTlsPolicyClientCertificateArgs) ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput {
	return i.ToClientTlsPolicyClientCertificatePtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateArgs) ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateOutput).ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx)
}

// ClientTlsPolicyClientCertificatePtrInput is an input type that accepts ClientTlsPolicyClientCertificateArgs, ClientTlsPolicyClientCertificatePtr and ClientTlsPolicyClientCertificatePtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificatePtrInput` via:
//
//	        ClientTlsPolicyClientCertificateArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyClientCertificatePtrInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput
	ToClientTlsPolicyClientCertificatePtrOutputWithContext(context.Context) ClientTlsPolicyClientCertificatePtrOutput
}

type clientTlsPolicyClientCertificatePtrType ClientTlsPolicyClientCertificateArgs

func ClientTlsPolicyClientCertificatePtr(v *ClientTlsPolicyClientCertificateArgs) ClientTlsPolicyClientCertificatePtrInput {
	return (*clientTlsPolicyClientCertificatePtrType)(v)
}

func (*clientTlsPolicyClientCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificate)(nil)).Elem()
}

func (i *clientTlsPolicyClientCertificatePtrType) ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput {
	return i.ToClientTlsPolicyClientCertificatePtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyClientCertificatePtrType) ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificatePtrOutput)
}

func (i *clientTlsPolicyClientCertificatePtrType) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyClientCertificate] {
	return pulumix.Output[*ClientTlsPolicyClientCertificate]{
		OutputState: i.ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx).OutputState,
	}
}

type ClientTlsPolicyClientCertificateOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificate)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateOutput) ToClientTlsPolicyClientCertificateOutput() ClientTlsPolicyClientCertificateOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateOutput) ToClientTlsPolicyClientCertificateOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateOutput) ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput {
	return o.ToClientTlsPolicyClientCertificatePtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyClientCertificateOutput) ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificate {
		return &v
	}).(ClientTlsPolicyClientCertificatePtrOutput)
}

func (o ClientTlsPolicyClientCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyClientCertificate] {
	return pulumix.Output[ClientTlsPolicyClientCertificate]{
		OutputState: o.OutputState,
	}
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
// Structure is documented below.
func (o ClientTlsPolicyClientCertificateOutput) CertificateProviderInstance() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificateCertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ClientTlsPolicyClientCertificateOutput) GrpcEndpoint() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o.ApplyT(func(v ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificateGrpcEndpoint {
		return v.GrpcEndpoint
	}).(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput)
}

type ClientTlsPolicyClientCertificatePtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificate)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificatePtrOutput) ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificatePtrOutput) ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificatePtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyClientCertificate] {
	return pulumix.Output[*ClientTlsPolicyClientCertificate]{
		OutputState: o.OutputState,
	}
}

func (o ClientTlsPolicyClientCertificatePtrOutput) Elem() ClientTlsPolicyClientCertificateOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificate) ClientTlsPolicyClientCertificate {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyClientCertificate
		return ret
	}).(ClientTlsPolicyClientCertificateOutput)
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
// Structure is documented below.
func (o ClientTlsPolicyClientCertificatePtrOutput) CertificateProviderInstance() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificateCertificateProviderInstance {
		if v == nil {
			return nil
		}
		return v.CertificateProviderInstance
	}).(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ClientTlsPolicyClientCertificatePtrOutput) GrpcEndpoint() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificateGrpcEndpoint {
		if v == nil {
			return nil
		}
		return v.GrpcEndpoint
	}).(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput)
}

type ClientTlsPolicyClientCertificateCertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// ClientTlsPolicyClientCertificateCertificateProviderInstanceInput is an input type that accepts ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs and ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateCertificateProviderInstanceInput` via:
//
//	ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs{...}
type ClientTlsPolicyClientCertificateCertificateProviderInstanceInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutput() ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput
	ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput
}

type ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificateCertificateProviderInstance)(nil)).Elem()
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutput() ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return i.ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput)
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyClientCertificateCertificateProviderInstance] {
	return pulumix.Output[ClientTlsPolicyClientCertificateCertificateProviderInstance]{
		OutputState: i.ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(ctx).OutputState,
	}
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return i.ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput).ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx)
}

// ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput is an input type that accepts ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs, ClientTlsPolicyClientCertificateCertificateProviderInstancePtr and ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput` via:
//
//	        ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput
	ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput
}

type clientTlsPolicyClientCertificateCertificateProviderInstancePtrType ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs

func ClientTlsPolicyClientCertificateCertificateProviderInstancePtr(v *ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput {
	return (*clientTlsPolicyClientCertificateCertificateProviderInstancePtrType)(v)
}

func (*clientTlsPolicyClientCertificateCertificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificateCertificateProviderInstance)(nil)).Elem()
}

func (i *clientTlsPolicyClientCertificateCertificateProviderInstancePtrType) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return i.ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyClientCertificateCertificateProviderInstancePtrType) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput)
}

func (i *clientTlsPolicyClientCertificateCertificateProviderInstancePtrType) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyClientCertificateCertificateProviderInstance] {
	return pulumix.Output[*ClientTlsPolicyClientCertificateCertificateProviderInstance]{
		OutputState: i.ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx).OutputState,
	}
}

type ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificateCertificateProviderInstance)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutput() ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o.ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyClientCertificateCertificateProviderInstance) *ClientTlsPolicyClientCertificateCertificateProviderInstance {
		return &v
	}).(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput)
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyClientCertificateCertificateProviderInstance] {
	return pulumix.Output[ClientTlsPolicyClientCertificateCertificateProviderInstance]{
		OutputState: o.OutputState,
	}
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v ClientTlsPolicyClientCertificateCertificateProviderInstance) string { return v.PluginInstance }).(pulumi.StringOutput)
}

type ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificateCertificateProviderInstance)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyClientCertificateCertificateProviderInstance] {
	return pulumix.Output[*ClientTlsPolicyClientCertificateCertificateProviderInstance]{
		OutputState: o.OutputState,
	}
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) Elem() ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificateCertificateProviderInstance) ClientTlsPolicyClientCertificateCertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyClientCertificateCertificateProviderInstance
		return ret
	}).(ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificateCertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

type ClientTlsPolicyClientCertificateGrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// ClientTlsPolicyClientCertificateGrpcEndpointInput is an input type that accepts ClientTlsPolicyClientCertificateGrpcEndpointArgs and ClientTlsPolicyClientCertificateGrpcEndpointOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateGrpcEndpointInput` via:
//
//	ClientTlsPolicyClientCertificateGrpcEndpointArgs{...}
type ClientTlsPolicyClientCertificateGrpcEndpointInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateGrpcEndpointOutput() ClientTlsPolicyClientCertificateGrpcEndpointOutput
	ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(context.Context) ClientTlsPolicyClientCertificateGrpcEndpointOutput
}

type ClientTlsPolicyClientCertificateGrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (ClientTlsPolicyClientCertificateGrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificateGrpcEndpoint)(nil)).Elem()
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToClientTlsPolicyClientCertificateGrpcEndpointOutput() ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return i.ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateGrpcEndpointOutput)
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyClientCertificateGrpcEndpoint] {
	return pulumix.Output[ClientTlsPolicyClientCertificateGrpcEndpoint]{
		OutputState: i.ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(ctx).OutputState,
	}
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return i.ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateGrpcEndpointOutput).ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx)
}

// ClientTlsPolicyClientCertificateGrpcEndpointPtrInput is an input type that accepts ClientTlsPolicyClientCertificateGrpcEndpointArgs, ClientTlsPolicyClientCertificateGrpcEndpointPtr and ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateGrpcEndpointPtrInput` via:
//
//	        ClientTlsPolicyClientCertificateGrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyClientCertificateGrpcEndpointPtrInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput
	ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput
}

type clientTlsPolicyClientCertificateGrpcEndpointPtrType ClientTlsPolicyClientCertificateGrpcEndpointArgs

func ClientTlsPolicyClientCertificateGrpcEndpointPtr(v *ClientTlsPolicyClientCertificateGrpcEndpointArgs) ClientTlsPolicyClientCertificateGrpcEndpointPtrInput {
	return (*clientTlsPolicyClientCertificateGrpcEndpointPtrType)(v)
}

func (*clientTlsPolicyClientCertificateGrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificateGrpcEndpoint)(nil)).Elem()
}

func (i *clientTlsPolicyClientCertificateGrpcEndpointPtrType) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return i.ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyClientCertificateGrpcEndpointPtrType) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput)
}

func (i *clientTlsPolicyClientCertificateGrpcEndpointPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyClientCertificateGrpcEndpoint] {
	return pulumix.Output[*ClientTlsPolicyClientCertificateGrpcEndpoint]{
		OutputState: i.ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx).OutputState,
	}
}

type ClientTlsPolicyClientCertificateGrpcEndpointOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateGrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificateGrpcEndpoint)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToClientTlsPolicyClientCertificateGrpcEndpointOutput() ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o.ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyClientCertificateGrpcEndpoint) *ClientTlsPolicyClientCertificateGrpcEndpoint {
		return &v
	}).(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput)
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyClientCertificateGrpcEndpoint] {
	return pulumix.Output[ClientTlsPolicyClientCertificateGrpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v ClientTlsPolicyClientCertificateGrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificateGrpcEndpoint)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyClientCertificateGrpcEndpoint] {
	return pulumix.Output[*ClientTlsPolicyClientCertificateGrpcEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) Elem() ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificateGrpcEndpoint) ClientTlsPolicyClientCertificateGrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyClientCertificateGrpcEndpoint
		return ret
	}).(ClientTlsPolicyClientCertificateGrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificateGrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

type ClientTlsPolicyServerValidationCa struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	// Structure is documented below.
	CertificateProviderInstance *ClientTlsPolicyServerValidationCaCertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint *ClientTlsPolicyServerValidationCaGrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ClientTlsPolicyServerValidationCaInput is an input type that accepts ClientTlsPolicyServerValidationCaArgs and ClientTlsPolicyServerValidationCaOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaInput` via:
//
//	ClientTlsPolicyServerValidationCaArgs{...}
type ClientTlsPolicyServerValidationCaInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaOutput() ClientTlsPolicyServerValidationCaOutput
	ToClientTlsPolicyServerValidationCaOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaOutput
}

type ClientTlsPolicyServerValidationCaArgs struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	// Structure is documented below.
	CertificateProviderInstance ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ClientTlsPolicyServerValidationCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCa)(nil)).Elem()
}

func (i ClientTlsPolicyServerValidationCaArgs) ToClientTlsPolicyServerValidationCaOutput() ClientTlsPolicyServerValidationCaOutput {
	return i.ToClientTlsPolicyServerValidationCaOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaArgs) ToClientTlsPolicyServerValidationCaOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaOutput)
}

func (i ClientTlsPolicyServerValidationCaArgs) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyServerValidationCa] {
	return pulumix.Output[ClientTlsPolicyServerValidationCa]{
		OutputState: i.ToClientTlsPolicyServerValidationCaOutputWithContext(ctx).OutputState,
	}
}

// ClientTlsPolicyServerValidationCaArrayInput is an input type that accepts ClientTlsPolicyServerValidationCaArray and ClientTlsPolicyServerValidationCaArrayOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaArrayInput` via:
//
//	ClientTlsPolicyServerValidationCaArray{ ClientTlsPolicyServerValidationCaArgs{...} }
type ClientTlsPolicyServerValidationCaArrayInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaArrayOutput() ClientTlsPolicyServerValidationCaArrayOutput
	ToClientTlsPolicyServerValidationCaArrayOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaArrayOutput
}

type ClientTlsPolicyServerValidationCaArray []ClientTlsPolicyServerValidationCaInput

func (ClientTlsPolicyServerValidationCaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientTlsPolicyServerValidationCa)(nil)).Elem()
}

func (i ClientTlsPolicyServerValidationCaArray) ToClientTlsPolicyServerValidationCaArrayOutput() ClientTlsPolicyServerValidationCaArrayOutput {
	return i.ToClientTlsPolicyServerValidationCaArrayOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaArray) ToClientTlsPolicyServerValidationCaArrayOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaArrayOutput)
}

func (i ClientTlsPolicyServerValidationCaArray) ToOutput(ctx context.Context) pulumix.Output[[]ClientTlsPolicyServerValidationCa] {
	return pulumix.Output[[]ClientTlsPolicyServerValidationCa]{
		OutputState: i.ToClientTlsPolicyServerValidationCaArrayOutputWithContext(ctx).OutputState,
	}
}

type ClientTlsPolicyServerValidationCaOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCa)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaOutput) ToClientTlsPolicyServerValidationCaOutput() ClientTlsPolicyServerValidationCaOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaOutput) ToClientTlsPolicyServerValidationCaOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaOutput) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyServerValidationCa] {
	return pulumix.Output[ClientTlsPolicyServerValidationCa]{
		OutputState: o.OutputState,
	}
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
// Structure is documented below.
func (o ClientTlsPolicyServerValidationCaOutput) CertificateProviderInstance() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ClientTlsPolicyServerValidationCa) *ClientTlsPolicyServerValidationCaCertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ClientTlsPolicyServerValidationCaOutput) GrpcEndpoint() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o.ApplyT(func(v ClientTlsPolicyServerValidationCa) *ClientTlsPolicyServerValidationCaGrpcEndpoint {
		return v.GrpcEndpoint
	}).(ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput)
}

type ClientTlsPolicyServerValidationCaArrayOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientTlsPolicyServerValidationCa)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaArrayOutput) ToClientTlsPolicyServerValidationCaArrayOutput() ClientTlsPolicyServerValidationCaArrayOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaArrayOutput) ToClientTlsPolicyServerValidationCaArrayOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaArrayOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ClientTlsPolicyServerValidationCa] {
	return pulumix.Output[[]ClientTlsPolicyServerValidationCa]{
		OutputState: o.OutputState,
	}
}

func (o ClientTlsPolicyServerValidationCaArrayOutput) Index(i pulumi.IntInput) ClientTlsPolicyServerValidationCaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientTlsPolicyServerValidationCa {
		return vs[0].([]ClientTlsPolicyServerValidationCa)[vs[1].(int)]
	}).(ClientTlsPolicyServerValidationCaOutput)
}

type ClientTlsPolicyServerValidationCaCertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// ClientTlsPolicyServerValidationCaCertificateProviderInstanceInput is an input type that accepts ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs and ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaCertificateProviderInstanceInput` via:
//
//	ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs{...}
type ClientTlsPolicyServerValidationCaCertificateProviderInstanceInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput
	ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput
}

type ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return i.ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput)
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyServerValidationCaCertificateProviderInstance] {
	return pulumix.Output[ClientTlsPolicyServerValidationCaCertificateProviderInstance]{
		OutputState: i.ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(ctx).OutputState,
	}
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return i.ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput).ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx)
}

// ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput is an input type that accepts ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs, ClientTlsPolicyServerValidationCaCertificateProviderInstancePtr and ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput` via:
//
//	        ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput
	ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput
}

type clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs

func ClientTlsPolicyServerValidationCaCertificateProviderInstancePtr(v *ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput {
	return (*clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType)(v)
}

func (*clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyServerValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (i *clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return i.ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput)
}

func (i *clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyServerValidationCaCertificateProviderInstance] {
	return pulumix.Output[*ClientTlsPolicyServerValidationCaCertificateProviderInstance]{
		OutputState: i.ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx).OutputState,
	}
}

type ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o.ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyServerValidationCaCertificateProviderInstance) *ClientTlsPolicyServerValidationCaCertificateProviderInstance {
		return &v
	}).(ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput)
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyServerValidationCaCertificateProviderInstance] {
	return pulumix.Output[ClientTlsPolicyServerValidationCaCertificateProviderInstance]{
		OutputState: o.OutputState,
	}
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v ClientTlsPolicyServerValidationCaCertificateProviderInstance) string { return v.PluginInstance }).(pulumi.StringOutput)
}

type ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyServerValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyServerValidationCaCertificateProviderInstance] {
	return pulumix.Output[*ClientTlsPolicyServerValidationCaCertificateProviderInstance]{
		OutputState: o.OutputState,
	}
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) Elem() ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return o.ApplyT(func(v *ClientTlsPolicyServerValidationCaCertificateProviderInstance) ClientTlsPolicyServerValidationCaCertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyServerValidationCaCertificateProviderInstance
		return ret
	}).(ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyServerValidationCaCertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

type ClientTlsPolicyServerValidationCaGrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// ClientTlsPolicyServerValidationCaGrpcEndpointInput is an input type that accepts ClientTlsPolicyServerValidationCaGrpcEndpointArgs and ClientTlsPolicyServerValidationCaGrpcEndpointOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaGrpcEndpointInput` via:
//
//	ClientTlsPolicyServerValidationCaGrpcEndpointArgs{...}
type ClientTlsPolicyServerValidationCaGrpcEndpointInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaGrpcEndpointOutput() ClientTlsPolicyServerValidationCaGrpcEndpointOutput
	ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointOutput
}

type ClientTlsPolicyServerValidationCaGrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCaGrpcEndpoint)(nil)).Elem()
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToClientTlsPolicyServerValidationCaGrpcEndpointOutput() ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return i.ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaGrpcEndpointOutput)
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyServerValidationCaGrpcEndpoint] {
	return pulumix.Output[ClientTlsPolicyServerValidationCaGrpcEndpoint]{
		OutputState: i.ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(ctx).OutputState,
	}
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return i.ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaGrpcEndpointOutput).ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx)
}

// ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput is an input type that accepts ClientTlsPolicyServerValidationCaGrpcEndpointArgs, ClientTlsPolicyServerValidationCaGrpcEndpointPtr and ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput` via:
//
//	        ClientTlsPolicyServerValidationCaGrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput
	ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput
}

type clientTlsPolicyServerValidationCaGrpcEndpointPtrType ClientTlsPolicyServerValidationCaGrpcEndpointArgs

func ClientTlsPolicyServerValidationCaGrpcEndpointPtr(v *ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput {
	return (*clientTlsPolicyServerValidationCaGrpcEndpointPtrType)(v)
}

func (*clientTlsPolicyServerValidationCaGrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyServerValidationCaGrpcEndpoint)(nil)).Elem()
}

func (i *clientTlsPolicyServerValidationCaGrpcEndpointPtrType) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return i.ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyServerValidationCaGrpcEndpointPtrType) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput)
}

func (i *clientTlsPolicyServerValidationCaGrpcEndpointPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyServerValidationCaGrpcEndpoint] {
	return pulumix.Output[*ClientTlsPolicyServerValidationCaGrpcEndpoint]{
		OutputState: i.ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx).OutputState,
	}
}

type ClientTlsPolicyServerValidationCaGrpcEndpointOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCaGrpcEndpoint)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointOutput() ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o.ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyServerValidationCaGrpcEndpoint) *ClientTlsPolicyServerValidationCaGrpcEndpoint {
		return &v
	}).(ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput)
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ClientTlsPolicyServerValidationCaGrpcEndpoint] {
	return pulumix.Output[ClientTlsPolicyServerValidationCaGrpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v ClientTlsPolicyServerValidationCaGrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyServerValidationCaGrpcEndpoint)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientTlsPolicyServerValidationCaGrpcEndpoint] {
	return pulumix.Output[*ClientTlsPolicyServerValidationCaGrpcEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) Elem() ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return o.ApplyT(func(v *ClientTlsPolicyServerValidationCaGrpcEndpoint) ClientTlsPolicyServerValidationCaGrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyServerValidationCaGrpcEndpoint
		return ret
	}).(ClientTlsPolicyServerValidationCaGrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyServerValidationCaGrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyMtlsPolicy struct {
	// Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
	// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
	// Structure is documented below.
	ClientValidationCas []ServerTlsPolicyMtlsPolicyClientValidationCa `pulumi:"clientValidationCas"`
	// When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
	// Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
	// Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
	ClientValidationMode *string `pulumi:"clientValidationMode"`
	// Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
	// If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
	// Allowed only if the policy is to be used with external HTTPS load balancers.
	ClientValidationTrustConfig *string `pulumi:"clientValidationTrustConfig"`
}

// ServerTlsPolicyMtlsPolicyInput is an input type that accepts ServerTlsPolicyMtlsPolicyArgs and ServerTlsPolicyMtlsPolicyOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyInput` via:
//
//	ServerTlsPolicyMtlsPolicyArgs{...}
type ServerTlsPolicyMtlsPolicyInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyOutput() ServerTlsPolicyMtlsPolicyOutput
	ToServerTlsPolicyMtlsPolicyOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyOutput
}

type ServerTlsPolicyMtlsPolicyArgs struct {
	// Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
	// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
	// Structure is documented below.
	ClientValidationCas ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput `pulumi:"clientValidationCas"`
	// When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
	// Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
	// Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
	ClientValidationMode pulumi.StringPtrInput `pulumi:"clientValidationMode"`
	// Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
	// If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
	// Allowed only if the policy is to be used with external HTTPS load balancers.
	ClientValidationTrustConfig pulumi.StringPtrInput `pulumi:"clientValidationTrustConfig"`
}

func (ServerTlsPolicyMtlsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicy)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToServerTlsPolicyMtlsPolicyOutput() ServerTlsPolicyMtlsPolicyOutput {
	return i.ToServerTlsPolicyMtlsPolicyOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToServerTlsPolicyMtlsPolicyOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyOutput)
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyMtlsPolicy] {
	return pulumix.Output[ServerTlsPolicyMtlsPolicy]{
		OutputState: i.ToServerTlsPolicyMtlsPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyOutput).ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx)
}

// ServerTlsPolicyMtlsPolicyPtrInput is an input type that accepts ServerTlsPolicyMtlsPolicyArgs, ServerTlsPolicyMtlsPolicyPtr and ServerTlsPolicyMtlsPolicyPtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyPtrInput` via:
//
//	        ServerTlsPolicyMtlsPolicyArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyMtlsPolicyPtrInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput
	ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyPtrOutput
}

type serverTlsPolicyMtlsPolicyPtrType ServerTlsPolicyMtlsPolicyArgs

func ServerTlsPolicyMtlsPolicyPtr(v *ServerTlsPolicyMtlsPolicyArgs) ServerTlsPolicyMtlsPolicyPtrInput {
	return (*serverTlsPolicyMtlsPolicyPtrType)(v)
}

func (*serverTlsPolicyMtlsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicy)(nil)).Elem()
}

func (i *serverTlsPolicyMtlsPolicyPtrType) ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyMtlsPolicyPtrType) ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyPtrOutput)
}

func (i *serverTlsPolicyMtlsPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyMtlsPolicy] {
	return pulumix.Output[*ServerTlsPolicyMtlsPolicy]{
		OutputState: i.ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type ServerTlsPolicyMtlsPolicyOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicy)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToServerTlsPolicyMtlsPolicyOutput() ServerTlsPolicyMtlsPolicyOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToServerTlsPolicyMtlsPolicyOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput {
	return o.ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyMtlsPolicy) *ServerTlsPolicyMtlsPolicy {
		return &v
	}).(ServerTlsPolicyMtlsPolicyPtrOutput)
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyMtlsPolicy] {
	return pulumix.Output[ServerTlsPolicyMtlsPolicy]{
		OutputState: o.OutputState,
	}
}

// Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
// Structure is documented below.
func (o ServerTlsPolicyMtlsPolicyOutput) ClientValidationCas() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicy) []ServerTlsPolicyMtlsPolicyClientValidationCa {
		return v.ClientValidationCas
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput)
}

// When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
// Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
// Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
func (o ServerTlsPolicyMtlsPolicyOutput) ClientValidationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicy) *string { return v.ClientValidationMode }).(pulumi.StringPtrOutput)
}

// Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
// If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
// Allowed only if the policy is to be used with external HTTPS load balancers.
func (o ServerTlsPolicyMtlsPolicyOutput) ClientValidationTrustConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicy) *string { return v.ClientValidationTrustConfig }).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyMtlsPolicyPtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicy)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyPtrOutput) ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyPtrOutput) ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyPtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyMtlsPolicy] {
	return pulumix.Output[*ServerTlsPolicyMtlsPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ServerTlsPolicyMtlsPolicyPtrOutput) Elem() ServerTlsPolicyMtlsPolicyOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicy) ServerTlsPolicyMtlsPolicy {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyMtlsPolicy
		return ret
	}).(ServerTlsPolicyMtlsPolicyOutput)
}

// Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
// Structure is documented below.
func (o ServerTlsPolicyMtlsPolicyPtrOutput) ClientValidationCas() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicy) []ServerTlsPolicyMtlsPolicyClientValidationCa {
		if v == nil {
			return nil
		}
		return v.ClientValidationCas
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput)
}

// When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
// Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
// Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
func (o ServerTlsPolicyMtlsPolicyPtrOutput) ClientValidationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientValidationMode
	}).(pulumi.StringPtrOutput)
}

// Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
// If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
// Allowed only if the policy is to be used with external HTTPS load balancers.
func (o ServerTlsPolicyMtlsPolicyPtrOutput) ClientValidationTrustConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientValidationTrustConfig
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCa struct {
	// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
	// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
	// Structure is documented below.
	CertificateProviderInstance *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ServerTlsPolicyMtlsPolicyClientValidationCaInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaArgs and ServerTlsPolicyMtlsPolicyClientValidationCaOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaInput` via:
//
//	ServerTlsPolicyMtlsPolicyClientValidationCaArgs{...}
type ServerTlsPolicyMtlsPolicyClientValidationCaInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaOutput() ServerTlsPolicyMtlsPolicyClientValidationCaOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaOutput
}

type ServerTlsPolicyMtlsPolicyClientValidationCaArgs struct {
	// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
	// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
	// Structure is documented below.
	CertificateProviderInstance ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ServerTlsPolicyMtlsPolicyClientValidationCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCa)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaOutput() ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaOutput)
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArgs) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCa] {
	return pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCa]{
		OutputState: i.ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(ctx).OutputState,
	}
}

// ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaArray and ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput` via:
//
//	ServerTlsPolicyMtlsPolicyClientValidationCaArray{ ServerTlsPolicyMtlsPolicyClientValidationCaArgs{...} }
type ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput
}

type ServerTlsPolicyMtlsPolicyClientValidationCaArray []ServerTlsPolicyMtlsPolicyClientValidationCaInput

func (ServerTlsPolicyMtlsPolicyClientValidationCaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTlsPolicyMtlsPolicyClientValidationCa)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArray) ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArray) ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput)
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArray) ToOutput(ctx context.Context) pulumix.Output[[]ServerTlsPolicyMtlsPolicyClientValidationCa] {
	return pulumix.Output[[]ServerTlsPolicyMtlsPolicyClientValidationCa]{
		OutputState: i.ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(ctx).OutputState,
	}
}

type ServerTlsPolicyMtlsPolicyClientValidationCaOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCa)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaOutput() ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCa] {
	return pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCa]{
		OutputState: o.OutputState,
	}
}

// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
// Structure is documented below.
func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) CertificateProviderInstance() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicyClientValidationCa) *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) GrpcEndpoint() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicyClientValidationCa) *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint {
		return v.GrpcEndpoint
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTlsPolicyMtlsPolicyClientValidationCa)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServerTlsPolicyMtlsPolicyClientValidationCa] {
	return pulumix.Output[[]ServerTlsPolicyMtlsPolicyClientValidationCa]{
		OutputState: o.OutputState,
	}
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) Index(i pulumi.IntInput) ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerTlsPolicyMtlsPolicyClientValidationCa {
		return vs[0].([]ServerTlsPolicyMtlsPolicyClientValidationCa)[vs[1].(int)]
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs and ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceInput` via:
//
//	ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs{...}
type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput
}

type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput)
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance] {
	return pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance]{
		OutputState: i.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(ctx).OutputState,
	}
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput).ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx)
}

// ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs, ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtr and ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput` via:
//
//	        ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput
}

type serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs

func ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtr(v *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput {
	return (*serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType)(v)
}

func (*serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput)
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance] {
	return pulumix.Output[*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance]{
		OutputState: i.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx).OutputState,
	}
}

type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance) *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance {
		return &v
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput)
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance] {
	return pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance]{
		OutputState: o.OutputState,
	}
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance) string {
		return v.PluginInstance
	}).(pulumi.StringOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance] {
	return pulumix.Output[*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance]{
		OutputState: o.OutputState,
	}
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) Elem() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance
		return ret
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs and ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointInput` via:
//
//	ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs{...}
type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput
}

type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput)
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint] {
	return pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint]{
		OutputState: i.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(ctx).OutputState,
	}
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput).ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx)
}

// ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs, ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtr and ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput` via:
//
//	        ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput
}

type serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs

func ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtr(v *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput {
	return (*serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType)(v)
}

func (*serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint)(nil)).Elem()
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput)
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint] {
	return pulumix.Output[*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint]{
		OutputState: i.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx).OutputState,
	}
}

type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint) *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint {
		return &v
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput)
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint] {
	return pulumix.Output[ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint] {
	return pulumix.Output[*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) Elem() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint
		return ret
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyServerCertificate struct {
	// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
	// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
	// Structure is documented below.
	CertificateProviderInstance *ServerTlsPolicyServerCertificateCertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint *ServerTlsPolicyServerCertificateGrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ServerTlsPolicyServerCertificateInput is an input type that accepts ServerTlsPolicyServerCertificateArgs and ServerTlsPolicyServerCertificateOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateInput` via:
//
//	ServerTlsPolicyServerCertificateArgs{...}
type ServerTlsPolicyServerCertificateInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateOutput() ServerTlsPolicyServerCertificateOutput
	ToServerTlsPolicyServerCertificateOutputWithContext(context.Context) ServerTlsPolicyServerCertificateOutput
}

type ServerTlsPolicyServerCertificateArgs struct {
	// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
	// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
	// Structure is documented below.
	CertificateProviderInstance ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint ServerTlsPolicyServerCertificateGrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ServerTlsPolicyServerCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificate)(nil)).Elem()
}

func (i ServerTlsPolicyServerCertificateArgs) ToServerTlsPolicyServerCertificateOutput() ServerTlsPolicyServerCertificateOutput {
	return i.ToServerTlsPolicyServerCertificateOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateArgs) ToServerTlsPolicyServerCertificateOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateOutput)
}

func (i ServerTlsPolicyServerCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyServerCertificate] {
	return pulumix.Output[ServerTlsPolicyServerCertificate]{
		OutputState: i.ToServerTlsPolicyServerCertificateOutputWithContext(ctx).OutputState,
	}
}

func (i ServerTlsPolicyServerCertificateArgs) ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput {
	return i.ToServerTlsPolicyServerCertificatePtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateArgs) ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateOutput).ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx)
}

// ServerTlsPolicyServerCertificatePtrInput is an input type that accepts ServerTlsPolicyServerCertificateArgs, ServerTlsPolicyServerCertificatePtr and ServerTlsPolicyServerCertificatePtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificatePtrInput` via:
//
//	        ServerTlsPolicyServerCertificateArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyServerCertificatePtrInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput
	ToServerTlsPolicyServerCertificatePtrOutputWithContext(context.Context) ServerTlsPolicyServerCertificatePtrOutput
}

type serverTlsPolicyServerCertificatePtrType ServerTlsPolicyServerCertificateArgs

func ServerTlsPolicyServerCertificatePtr(v *ServerTlsPolicyServerCertificateArgs) ServerTlsPolicyServerCertificatePtrInput {
	return (*serverTlsPolicyServerCertificatePtrType)(v)
}

func (*serverTlsPolicyServerCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificate)(nil)).Elem()
}

func (i *serverTlsPolicyServerCertificatePtrType) ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput {
	return i.ToServerTlsPolicyServerCertificatePtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyServerCertificatePtrType) ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificatePtrOutput)
}

func (i *serverTlsPolicyServerCertificatePtrType) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyServerCertificate] {
	return pulumix.Output[*ServerTlsPolicyServerCertificate]{
		OutputState: i.ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx).OutputState,
	}
}

type ServerTlsPolicyServerCertificateOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificate)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateOutput) ToServerTlsPolicyServerCertificateOutput() ServerTlsPolicyServerCertificateOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateOutput) ToServerTlsPolicyServerCertificateOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateOutput) ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput {
	return o.ToServerTlsPolicyServerCertificatePtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyServerCertificateOutput) ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificate {
		return &v
	}).(ServerTlsPolicyServerCertificatePtrOutput)
}

func (o ServerTlsPolicyServerCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyServerCertificate] {
	return pulumix.Output[ServerTlsPolicyServerCertificate]{
		OutputState: o.OutputState,
	}
}

// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
// Structure is documented below.
func (o ServerTlsPolicyServerCertificateOutput) CertificateProviderInstance() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificateCertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ServerTlsPolicyServerCertificateOutput) GrpcEndpoint() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificateGrpcEndpoint {
		return v.GrpcEndpoint
	}).(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput)
}

type ServerTlsPolicyServerCertificatePtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificate)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificatePtrOutput) ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificatePtrOutput) ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificatePtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyServerCertificate] {
	return pulumix.Output[*ServerTlsPolicyServerCertificate]{
		OutputState: o.OutputState,
	}
}

func (o ServerTlsPolicyServerCertificatePtrOutput) Elem() ServerTlsPolicyServerCertificateOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificate) ServerTlsPolicyServerCertificate {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyServerCertificate
		return ret
	}).(ServerTlsPolicyServerCertificateOutput)
}

// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
// Structure is documented below.
func (o ServerTlsPolicyServerCertificatePtrOutput) CertificateProviderInstance() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificateCertificateProviderInstance {
		if v == nil {
			return nil
		}
		return v.CertificateProviderInstance
	}).(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ServerTlsPolicyServerCertificatePtrOutput) GrpcEndpoint() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificateGrpcEndpoint {
		if v == nil {
			return nil
		}
		return v.GrpcEndpoint
	}).(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput)
}

type ServerTlsPolicyServerCertificateCertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// ServerTlsPolicyServerCertificateCertificateProviderInstanceInput is an input type that accepts ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs and ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateCertificateProviderInstanceInput` via:
//
//	ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs{...}
type ServerTlsPolicyServerCertificateCertificateProviderInstanceInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutput() ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput
	ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput
}

type ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificateCertificateProviderInstance)(nil)).Elem()
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutput() ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return i.ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput)
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyServerCertificateCertificateProviderInstance] {
	return pulumix.Output[ServerTlsPolicyServerCertificateCertificateProviderInstance]{
		OutputState: i.ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(ctx).OutputState,
	}
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return i.ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput).ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx)
}

// ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput is an input type that accepts ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs, ServerTlsPolicyServerCertificateCertificateProviderInstancePtr and ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput` via:
//
//	        ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput
	ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput
}

type serverTlsPolicyServerCertificateCertificateProviderInstancePtrType ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs

func ServerTlsPolicyServerCertificateCertificateProviderInstancePtr(v *ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput {
	return (*serverTlsPolicyServerCertificateCertificateProviderInstancePtrType)(v)
}

func (*serverTlsPolicyServerCertificateCertificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificateCertificateProviderInstance)(nil)).Elem()
}

func (i *serverTlsPolicyServerCertificateCertificateProviderInstancePtrType) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return i.ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyServerCertificateCertificateProviderInstancePtrType) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput)
}

func (i *serverTlsPolicyServerCertificateCertificateProviderInstancePtrType) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyServerCertificateCertificateProviderInstance] {
	return pulumix.Output[*ServerTlsPolicyServerCertificateCertificateProviderInstance]{
		OutputState: i.ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx).OutputState,
	}
}

type ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificateCertificateProviderInstance)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutput() ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o.ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyServerCertificateCertificateProviderInstance) *ServerTlsPolicyServerCertificateCertificateProviderInstance {
		return &v
	}).(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput)
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyServerCertificateCertificateProviderInstance] {
	return pulumix.Output[ServerTlsPolicyServerCertificateCertificateProviderInstance]{
		OutputState: o.OutputState,
	}
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsPolicyServerCertificateCertificateProviderInstance) string { return v.PluginInstance }).(pulumi.StringOutput)
}

type ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificateCertificateProviderInstance)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyServerCertificateCertificateProviderInstance] {
	return pulumix.Output[*ServerTlsPolicyServerCertificateCertificateProviderInstance]{
		OutputState: o.OutputState,
	}
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) Elem() ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificateCertificateProviderInstance) ServerTlsPolicyServerCertificateCertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyServerCertificateCertificateProviderInstance
		return ret
	}).(ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificateCertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyServerCertificateGrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// ServerTlsPolicyServerCertificateGrpcEndpointInput is an input type that accepts ServerTlsPolicyServerCertificateGrpcEndpointArgs and ServerTlsPolicyServerCertificateGrpcEndpointOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateGrpcEndpointInput` via:
//
//	ServerTlsPolicyServerCertificateGrpcEndpointArgs{...}
type ServerTlsPolicyServerCertificateGrpcEndpointInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateGrpcEndpointOutput() ServerTlsPolicyServerCertificateGrpcEndpointOutput
	ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(context.Context) ServerTlsPolicyServerCertificateGrpcEndpointOutput
}

type ServerTlsPolicyServerCertificateGrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (ServerTlsPolicyServerCertificateGrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificateGrpcEndpoint)(nil)).Elem()
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToServerTlsPolicyServerCertificateGrpcEndpointOutput() ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return i.ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateGrpcEndpointOutput)
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyServerCertificateGrpcEndpoint] {
	return pulumix.Output[ServerTlsPolicyServerCertificateGrpcEndpoint]{
		OutputState: i.ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(ctx).OutputState,
	}
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return i.ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateGrpcEndpointOutput).ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx)
}

// ServerTlsPolicyServerCertificateGrpcEndpointPtrInput is an input type that accepts ServerTlsPolicyServerCertificateGrpcEndpointArgs, ServerTlsPolicyServerCertificateGrpcEndpointPtr and ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateGrpcEndpointPtrInput` via:
//
//	        ServerTlsPolicyServerCertificateGrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyServerCertificateGrpcEndpointPtrInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput
	ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput
}

type serverTlsPolicyServerCertificateGrpcEndpointPtrType ServerTlsPolicyServerCertificateGrpcEndpointArgs

func ServerTlsPolicyServerCertificateGrpcEndpointPtr(v *ServerTlsPolicyServerCertificateGrpcEndpointArgs) ServerTlsPolicyServerCertificateGrpcEndpointPtrInput {
	return (*serverTlsPolicyServerCertificateGrpcEndpointPtrType)(v)
}

func (*serverTlsPolicyServerCertificateGrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificateGrpcEndpoint)(nil)).Elem()
}

func (i *serverTlsPolicyServerCertificateGrpcEndpointPtrType) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return i.ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyServerCertificateGrpcEndpointPtrType) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput)
}

func (i *serverTlsPolicyServerCertificateGrpcEndpointPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyServerCertificateGrpcEndpoint] {
	return pulumix.Output[*ServerTlsPolicyServerCertificateGrpcEndpoint]{
		OutputState: i.ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx).OutputState,
	}
}

type ServerTlsPolicyServerCertificateGrpcEndpointOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateGrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificateGrpcEndpoint)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToServerTlsPolicyServerCertificateGrpcEndpointOutput() ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o.ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyServerCertificateGrpcEndpoint) *ServerTlsPolicyServerCertificateGrpcEndpoint {
		return &v
	}).(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput)
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ServerTlsPolicyServerCertificateGrpcEndpoint] {
	return pulumix.Output[ServerTlsPolicyServerCertificateGrpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsPolicyServerCertificateGrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificateGrpcEndpoint)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerTlsPolicyServerCertificateGrpcEndpoint] {
	return pulumix.Output[*ServerTlsPolicyServerCertificateGrpcEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) Elem() ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificateGrpcEndpoint) ServerTlsPolicyServerCertificateGrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyServerCertificateGrpcEndpoint
		return ret
	}).(ServerTlsPolicyServerCertificateGrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificateGrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleInput)(nil)).Elem(), AuthorizationPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleArrayInput)(nil)).Elem(), AuthorizationPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleDestinationInput)(nil)).Elem(), AuthorizationPolicyRuleDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleDestinationArrayInput)(nil)).Elem(), AuthorizationPolicyRuleDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleDestinationHttpHeaderMatchInput)(nil)).Elem(), AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput)(nil)).Elem(), AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleSourceInput)(nil)).Elem(), AuthorizationPolicyRuleSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleSourceArrayInput)(nil)).Elem(), AuthorizationPolicyRuleSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateInput)(nil)).Elem(), ClientTlsPolicyClientCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificatePtrInput)(nil)).Elem(), ClientTlsPolicyClientCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateCertificateProviderInstanceInput)(nil)).Elem(), ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput)(nil)).Elem(), ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateGrpcEndpointInput)(nil)).Elem(), ClientTlsPolicyClientCertificateGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateGrpcEndpointPtrInput)(nil)).Elem(), ClientTlsPolicyClientCertificateGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaArrayInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaCertificateProviderInstanceInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaGrpcEndpointInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyPtrInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateInput)(nil)).Elem(), ServerTlsPolicyServerCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificatePtrInput)(nil)).Elem(), ServerTlsPolicyServerCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateCertificateProviderInstanceInput)(nil)).Elem(), ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput)(nil)).Elem(), ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateGrpcEndpointInput)(nil)).Elem(), ServerTlsPolicyServerCertificateGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateGrpcEndpointPtrInput)(nil)).Elem(), ServerTlsPolicyServerCertificateGrpcEndpointArgs{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleDestinationOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleDestinationArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleSourceOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleSourceArrayOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificatePtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateGrpcEndpointOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaArrayOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaGrpcEndpointOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyPtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificatePtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateGrpcEndpointOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput{})
}
