// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AddressGroupIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// AddressGroupIamBindingConditionInput is an input type that accepts AddressGroupIamBindingConditionArgs and AddressGroupIamBindingConditionOutput values.
// You can construct a concrete instance of `AddressGroupIamBindingConditionInput` via:
//
//	AddressGroupIamBindingConditionArgs{...}
type AddressGroupIamBindingConditionInput interface {
	pulumi.Input

	ToAddressGroupIamBindingConditionOutput() AddressGroupIamBindingConditionOutput
	ToAddressGroupIamBindingConditionOutputWithContext(context.Context) AddressGroupIamBindingConditionOutput
}

type AddressGroupIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (AddressGroupIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressGroupIamBindingCondition)(nil)).Elem()
}

func (i AddressGroupIamBindingConditionArgs) ToAddressGroupIamBindingConditionOutput() AddressGroupIamBindingConditionOutput {
	return i.ToAddressGroupIamBindingConditionOutputWithContext(context.Background())
}

func (i AddressGroupIamBindingConditionArgs) ToAddressGroupIamBindingConditionOutputWithContext(ctx context.Context) AddressGroupIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupIamBindingConditionOutput)
}

func (i AddressGroupIamBindingConditionArgs) ToAddressGroupIamBindingConditionPtrOutput() AddressGroupIamBindingConditionPtrOutput {
	return i.ToAddressGroupIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i AddressGroupIamBindingConditionArgs) ToAddressGroupIamBindingConditionPtrOutputWithContext(ctx context.Context) AddressGroupIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupIamBindingConditionOutput).ToAddressGroupIamBindingConditionPtrOutputWithContext(ctx)
}

// AddressGroupIamBindingConditionPtrInput is an input type that accepts AddressGroupIamBindingConditionArgs, AddressGroupIamBindingConditionPtr and AddressGroupIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `AddressGroupIamBindingConditionPtrInput` via:
//
//	        AddressGroupIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type AddressGroupIamBindingConditionPtrInput interface {
	pulumi.Input

	ToAddressGroupIamBindingConditionPtrOutput() AddressGroupIamBindingConditionPtrOutput
	ToAddressGroupIamBindingConditionPtrOutputWithContext(context.Context) AddressGroupIamBindingConditionPtrOutput
}

type addressGroupIamBindingConditionPtrType AddressGroupIamBindingConditionArgs

func AddressGroupIamBindingConditionPtr(v *AddressGroupIamBindingConditionArgs) AddressGroupIamBindingConditionPtrInput {
	return (*addressGroupIamBindingConditionPtrType)(v)
}

func (*addressGroupIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressGroupIamBindingCondition)(nil)).Elem()
}

func (i *addressGroupIamBindingConditionPtrType) ToAddressGroupIamBindingConditionPtrOutput() AddressGroupIamBindingConditionPtrOutput {
	return i.ToAddressGroupIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *addressGroupIamBindingConditionPtrType) ToAddressGroupIamBindingConditionPtrOutputWithContext(ctx context.Context) AddressGroupIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupIamBindingConditionPtrOutput)
}

type AddressGroupIamBindingConditionOutput struct{ *pulumi.OutputState }

func (AddressGroupIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressGroupIamBindingCondition)(nil)).Elem()
}

func (o AddressGroupIamBindingConditionOutput) ToAddressGroupIamBindingConditionOutput() AddressGroupIamBindingConditionOutput {
	return o
}

func (o AddressGroupIamBindingConditionOutput) ToAddressGroupIamBindingConditionOutputWithContext(ctx context.Context) AddressGroupIamBindingConditionOutput {
	return o
}

func (o AddressGroupIamBindingConditionOutput) ToAddressGroupIamBindingConditionPtrOutput() AddressGroupIamBindingConditionPtrOutput {
	return o.ToAddressGroupIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o AddressGroupIamBindingConditionOutput) ToAddressGroupIamBindingConditionPtrOutputWithContext(ctx context.Context) AddressGroupIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AddressGroupIamBindingCondition) *AddressGroupIamBindingCondition {
		return &v
	}).(AddressGroupIamBindingConditionPtrOutput)
}

func (o AddressGroupIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressGroupIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AddressGroupIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AddressGroupIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o AddressGroupIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AddressGroupIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AddressGroupIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (AddressGroupIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressGroupIamBindingCondition)(nil)).Elem()
}

func (o AddressGroupIamBindingConditionPtrOutput) ToAddressGroupIamBindingConditionPtrOutput() AddressGroupIamBindingConditionPtrOutput {
	return o
}

func (o AddressGroupIamBindingConditionPtrOutput) ToAddressGroupIamBindingConditionPtrOutputWithContext(ctx context.Context) AddressGroupIamBindingConditionPtrOutput {
	return o
}

func (o AddressGroupIamBindingConditionPtrOutput) Elem() AddressGroupIamBindingConditionOutput {
	return o.ApplyT(func(v *AddressGroupIamBindingCondition) AddressGroupIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret AddressGroupIamBindingCondition
		return ret
	}).(AddressGroupIamBindingConditionOutput)
}

func (o AddressGroupIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressGroupIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o AddressGroupIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressGroupIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o AddressGroupIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressGroupIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type AddressGroupIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// AddressGroupIamMemberConditionInput is an input type that accepts AddressGroupIamMemberConditionArgs and AddressGroupIamMemberConditionOutput values.
// You can construct a concrete instance of `AddressGroupIamMemberConditionInput` via:
//
//	AddressGroupIamMemberConditionArgs{...}
type AddressGroupIamMemberConditionInput interface {
	pulumi.Input

	ToAddressGroupIamMemberConditionOutput() AddressGroupIamMemberConditionOutput
	ToAddressGroupIamMemberConditionOutputWithContext(context.Context) AddressGroupIamMemberConditionOutput
}

type AddressGroupIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (AddressGroupIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressGroupIamMemberCondition)(nil)).Elem()
}

func (i AddressGroupIamMemberConditionArgs) ToAddressGroupIamMemberConditionOutput() AddressGroupIamMemberConditionOutput {
	return i.ToAddressGroupIamMemberConditionOutputWithContext(context.Background())
}

func (i AddressGroupIamMemberConditionArgs) ToAddressGroupIamMemberConditionOutputWithContext(ctx context.Context) AddressGroupIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupIamMemberConditionOutput)
}

func (i AddressGroupIamMemberConditionArgs) ToAddressGroupIamMemberConditionPtrOutput() AddressGroupIamMemberConditionPtrOutput {
	return i.ToAddressGroupIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i AddressGroupIamMemberConditionArgs) ToAddressGroupIamMemberConditionPtrOutputWithContext(ctx context.Context) AddressGroupIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupIamMemberConditionOutput).ToAddressGroupIamMemberConditionPtrOutputWithContext(ctx)
}

// AddressGroupIamMemberConditionPtrInput is an input type that accepts AddressGroupIamMemberConditionArgs, AddressGroupIamMemberConditionPtr and AddressGroupIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `AddressGroupIamMemberConditionPtrInput` via:
//
//	        AddressGroupIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type AddressGroupIamMemberConditionPtrInput interface {
	pulumi.Input

	ToAddressGroupIamMemberConditionPtrOutput() AddressGroupIamMemberConditionPtrOutput
	ToAddressGroupIamMemberConditionPtrOutputWithContext(context.Context) AddressGroupIamMemberConditionPtrOutput
}

type addressGroupIamMemberConditionPtrType AddressGroupIamMemberConditionArgs

func AddressGroupIamMemberConditionPtr(v *AddressGroupIamMemberConditionArgs) AddressGroupIamMemberConditionPtrInput {
	return (*addressGroupIamMemberConditionPtrType)(v)
}

func (*addressGroupIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressGroupIamMemberCondition)(nil)).Elem()
}

func (i *addressGroupIamMemberConditionPtrType) ToAddressGroupIamMemberConditionPtrOutput() AddressGroupIamMemberConditionPtrOutput {
	return i.ToAddressGroupIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *addressGroupIamMemberConditionPtrType) ToAddressGroupIamMemberConditionPtrOutputWithContext(ctx context.Context) AddressGroupIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupIamMemberConditionPtrOutput)
}

type AddressGroupIamMemberConditionOutput struct{ *pulumi.OutputState }

func (AddressGroupIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressGroupIamMemberCondition)(nil)).Elem()
}

func (o AddressGroupIamMemberConditionOutput) ToAddressGroupIamMemberConditionOutput() AddressGroupIamMemberConditionOutput {
	return o
}

func (o AddressGroupIamMemberConditionOutput) ToAddressGroupIamMemberConditionOutputWithContext(ctx context.Context) AddressGroupIamMemberConditionOutput {
	return o
}

func (o AddressGroupIamMemberConditionOutput) ToAddressGroupIamMemberConditionPtrOutput() AddressGroupIamMemberConditionPtrOutput {
	return o.ToAddressGroupIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o AddressGroupIamMemberConditionOutput) ToAddressGroupIamMemberConditionPtrOutputWithContext(ctx context.Context) AddressGroupIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AddressGroupIamMemberCondition) *AddressGroupIamMemberCondition {
		return &v
	}).(AddressGroupIamMemberConditionPtrOutput)
}

func (o AddressGroupIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressGroupIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AddressGroupIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AddressGroupIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o AddressGroupIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AddressGroupIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AddressGroupIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (AddressGroupIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressGroupIamMemberCondition)(nil)).Elem()
}

func (o AddressGroupIamMemberConditionPtrOutput) ToAddressGroupIamMemberConditionPtrOutput() AddressGroupIamMemberConditionPtrOutput {
	return o
}

func (o AddressGroupIamMemberConditionPtrOutput) ToAddressGroupIamMemberConditionPtrOutputWithContext(ctx context.Context) AddressGroupIamMemberConditionPtrOutput {
	return o
}

func (o AddressGroupIamMemberConditionPtrOutput) Elem() AddressGroupIamMemberConditionOutput {
	return o.ApplyT(func(v *AddressGroupIamMemberCondition) AddressGroupIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret AddressGroupIamMemberCondition
		return ret
	}).(AddressGroupIamMemberConditionOutput)
}

func (o AddressGroupIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressGroupIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o AddressGroupIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressGroupIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o AddressGroupIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressGroupIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type AuthorizationPolicyRule struct {
	// List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
	// If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
	// Structure is documented below.
	Destinations []AuthorizationPolicyRuleDestination `pulumi:"destinations"`
	// List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
	// If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
	// Structure is documented below.
	Sources []AuthorizationPolicyRuleSource `pulumi:"sources"`
}

// AuthorizationPolicyRuleInput is an input type that accepts AuthorizationPolicyRuleArgs and AuthorizationPolicyRuleOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleInput` via:
//
//	AuthorizationPolicyRuleArgs{...}
type AuthorizationPolicyRuleInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleOutput() AuthorizationPolicyRuleOutput
	ToAuthorizationPolicyRuleOutputWithContext(context.Context) AuthorizationPolicyRuleOutput
}

type AuthorizationPolicyRuleArgs struct {
	// List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
	// If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
	// Structure is documented below.
	Destinations AuthorizationPolicyRuleDestinationArrayInput `pulumi:"destinations"`
	// List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
	// If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
	// Structure is documented below.
	Sources AuthorizationPolicyRuleSourceArrayInput `pulumi:"sources"`
}

func (AuthorizationPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRule)(nil)).Elem()
}

func (i AuthorizationPolicyRuleArgs) ToAuthorizationPolicyRuleOutput() AuthorizationPolicyRuleOutput {
	return i.ToAuthorizationPolicyRuleOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleArgs) ToAuthorizationPolicyRuleOutputWithContext(ctx context.Context) AuthorizationPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleOutput)
}

// AuthorizationPolicyRuleArrayInput is an input type that accepts AuthorizationPolicyRuleArray and AuthorizationPolicyRuleArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleArrayInput` via:
//
//	AuthorizationPolicyRuleArray{ AuthorizationPolicyRuleArgs{...} }
type AuthorizationPolicyRuleArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleArrayOutput() AuthorizationPolicyRuleArrayOutput
	ToAuthorizationPolicyRuleArrayOutputWithContext(context.Context) AuthorizationPolicyRuleArrayOutput
}

type AuthorizationPolicyRuleArray []AuthorizationPolicyRuleInput

func (AuthorizationPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRule)(nil)).Elem()
}

func (i AuthorizationPolicyRuleArray) ToAuthorizationPolicyRuleArrayOutput() AuthorizationPolicyRuleArrayOutput {
	return i.ToAuthorizationPolicyRuleArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleArray) ToAuthorizationPolicyRuleArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleArrayOutput)
}

type AuthorizationPolicyRuleOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRule)(nil)).Elem()
}

func (o AuthorizationPolicyRuleOutput) ToAuthorizationPolicyRuleOutput() AuthorizationPolicyRuleOutput {
	return o
}

func (o AuthorizationPolicyRuleOutput) ToAuthorizationPolicyRuleOutputWithContext(ctx context.Context) AuthorizationPolicyRuleOutput {
	return o
}

// List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
// If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
// Structure is documented below.
func (o AuthorizationPolicyRuleOutput) Destinations() AuthorizationPolicyRuleDestinationArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRule) []AuthorizationPolicyRuleDestination { return v.Destinations }).(AuthorizationPolicyRuleDestinationArrayOutput)
}

// List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
// If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
// Structure is documented below.
func (o AuthorizationPolicyRuleOutput) Sources() AuthorizationPolicyRuleSourceArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRule) []AuthorizationPolicyRuleSource { return v.Sources }).(AuthorizationPolicyRuleSourceArrayOutput)
}

type AuthorizationPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRule)(nil)).Elem()
}

func (o AuthorizationPolicyRuleArrayOutput) ToAuthorizationPolicyRuleArrayOutput() AuthorizationPolicyRuleArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleArrayOutput) ToAuthorizationPolicyRuleArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationPolicyRule {
		return vs[0].([]AuthorizationPolicyRule)[vs[1].(int)]
	}).(AuthorizationPolicyRuleOutput)
}

type AuthorizationPolicyRuleDestination struct {
	// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
	Hosts []string `pulumi:"hosts"`
	// Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
	// Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
	// Structure is documented below.
	HttpHeaderMatch *AuthorizationPolicyRuleDestinationHttpHeaderMatch `pulumi:"httpHeaderMatch"`
	// A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
	Methods []string `pulumi:"methods"`
	// List of destination ports to match. At least one port should match.
	Ports []int `pulumi:"ports"`
}

// AuthorizationPolicyRuleDestinationInput is an input type that accepts AuthorizationPolicyRuleDestinationArgs and AuthorizationPolicyRuleDestinationOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleDestinationInput` via:
//
//	AuthorizationPolicyRuleDestinationArgs{...}
type AuthorizationPolicyRuleDestinationInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleDestinationOutput() AuthorizationPolicyRuleDestinationOutput
	ToAuthorizationPolicyRuleDestinationOutputWithContext(context.Context) AuthorizationPolicyRuleDestinationOutput
}

type AuthorizationPolicyRuleDestinationArgs struct {
	// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
	// Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
	// Structure is documented below.
	HttpHeaderMatch AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput `pulumi:"httpHeaderMatch"`
	// A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
	Methods pulumi.StringArrayInput `pulumi:"methods"`
	// List of destination ports to match. At least one port should match.
	Ports pulumi.IntArrayInput `pulumi:"ports"`
}

func (AuthorizationPolicyRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleDestination)(nil)).Elem()
}

func (i AuthorizationPolicyRuleDestinationArgs) ToAuthorizationPolicyRuleDestinationOutput() AuthorizationPolicyRuleDestinationOutput {
	return i.ToAuthorizationPolicyRuleDestinationOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleDestinationArgs) ToAuthorizationPolicyRuleDestinationOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationOutput)
}

// AuthorizationPolicyRuleDestinationArrayInput is an input type that accepts AuthorizationPolicyRuleDestinationArray and AuthorizationPolicyRuleDestinationArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleDestinationArrayInput` via:
//
//	AuthorizationPolicyRuleDestinationArray{ AuthorizationPolicyRuleDestinationArgs{...} }
type AuthorizationPolicyRuleDestinationArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleDestinationArrayOutput() AuthorizationPolicyRuleDestinationArrayOutput
	ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(context.Context) AuthorizationPolicyRuleDestinationArrayOutput
}

type AuthorizationPolicyRuleDestinationArray []AuthorizationPolicyRuleDestinationInput

func (AuthorizationPolicyRuleDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRuleDestination)(nil)).Elem()
}

func (i AuthorizationPolicyRuleDestinationArray) ToAuthorizationPolicyRuleDestinationArrayOutput() AuthorizationPolicyRuleDestinationArrayOutput {
	return i.ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleDestinationArray) ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationArrayOutput)
}

type AuthorizationPolicyRuleDestinationOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleDestination)(nil)).Elem()
}

func (o AuthorizationPolicyRuleDestinationOutput) ToAuthorizationPolicyRuleDestinationOutput() AuthorizationPolicyRuleDestinationOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationOutput) ToAuthorizationPolicyRuleDestinationOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationOutput {
	return o
}

// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
func (o AuthorizationPolicyRuleDestinationOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestination) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
// Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
// Structure is documented below.
func (o AuthorizationPolicyRuleDestinationOutput) HttpHeaderMatch() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestination) *AuthorizationPolicyRuleDestinationHttpHeaderMatch {
		return v.HttpHeaderMatch
	}).(AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput)
}

// A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
func (o AuthorizationPolicyRuleDestinationOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestination) []string { return v.Methods }).(pulumi.StringArrayOutput)
}

// List of destination ports to match. At least one port should match.
func (o AuthorizationPolicyRuleDestinationOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestination) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type AuthorizationPolicyRuleDestinationArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRuleDestination)(nil)).Elem()
}

func (o AuthorizationPolicyRuleDestinationArrayOutput) ToAuthorizationPolicyRuleDestinationArrayOutput() AuthorizationPolicyRuleDestinationArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationArrayOutput) ToAuthorizationPolicyRuleDestinationArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyRuleDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationPolicyRuleDestination {
		return vs[0].([]AuthorizationPolicyRuleDestination)[vs[1].(int)]
	}).(AuthorizationPolicyRuleDestinationOutput)
}

type AuthorizationPolicyRuleDestinationHttpHeaderMatch struct {
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
	HeaderName string `pulumi:"headerName"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
	RegexMatch string `pulumi:"regexMatch"`
}

// AuthorizationPolicyRuleDestinationHttpHeaderMatchInput is an input type that accepts AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs and AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleDestinationHttpHeaderMatchInput` via:
//
//	AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{...}
type AuthorizationPolicyRuleDestinationHttpHeaderMatchInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput
	ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput
}

type AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs struct {
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
	RegexMatch pulumi.StringInput `pulumi:"regexMatch"`
}

func (AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleDestinationHttpHeaderMatch)(nil)).Elem()
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return i.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput)
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return i.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput).ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx)
}

// AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput is an input type that accepts AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs, AuthorizationPolicyRuleDestinationHttpHeaderMatchPtr and AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput` via:
//
//	        AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{...}
//
//	or:
//
//	        nil
type AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput
	ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput
}

type authorizationPolicyRuleDestinationHttpHeaderMatchPtrType AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs

func AuthorizationPolicyRuleDestinationHttpHeaderMatchPtr(v *AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput {
	return (*authorizationPolicyRuleDestinationHttpHeaderMatchPtrType)(v)
}

func (*authorizationPolicyRuleDestinationHttpHeaderMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicyRuleDestinationHttpHeaderMatch)(nil)).Elem()
}

func (i *authorizationPolicyRuleDestinationHttpHeaderMatchPtrType) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return i.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (i *authorizationPolicyRuleDestinationHttpHeaderMatchPtrType) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput)
}

type AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleDestinationHttpHeaderMatch)(nil)).Elem()
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o.ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthorizationPolicyRuleDestinationHttpHeaderMatch) *AuthorizationPolicyRuleDestinationHttpHeaderMatch {
		return &v
	}).(AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput)
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestinationHttpHeaderMatch) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleDestinationHttpHeaderMatch) string { return v.RegexMatch }).(pulumi.StringOutput)
}

type AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicyRuleDestinationHttpHeaderMatch)(nil)).Elem()
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput() AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) ToAuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutputWithContext(ctx context.Context) AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput {
	return o
}

func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) Elem() AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput {
	return o.ApplyT(func(v *AuthorizationPolicyRuleDestinationHttpHeaderMatch) AuthorizationPolicyRuleDestinationHttpHeaderMatch {
		if v != nil {
			return *v
		}
		var ret AuthorizationPolicyRuleDestinationHttpHeaderMatch
		return ret
	}).(AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput)
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicyRuleDestinationHttpHeaderMatch) *string {
		if v == nil {
			return nil
		}
		return &v.HeaderName
	}).(pulumi.StringPtrOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
func (o AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicyRuleDestinationHttpHeaderMatch) *string {
		if v == nil {
			return nil
		}
		return &v.RegexMatch
	}).(pulumi.StringPtrOutput)
}

type AuthorizationPolicyRuleSource struct {
	// List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
	// The IP addresses of any load balancers or proxies should be considered untrusted.
	IpBlocks []string `pulumi:"ipBlocks"`
	// List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
	// Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
	Principals []string `pulumi:"principals"`
}

// AuthorizationPolicyRuleSourceInput is an input type that accepts AuthorizationPolicyRuleSourceArgs and AuthorizationPolicyRuleSourceOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleSourceInput` via:
//
//	AuthorizationPolicyRuleSourceArgs{...}
type AuthorizationPolicyRuleSourceInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleSourceOutput() AuthorizationPolicyRuleSourceOutput
	ToAuthorizationPolicyRuleSourceOutputWithContext(context.Context) AuthorizationPolicyRuleSourceOutput
}

type AuthorizationPolicyRuleSourceArgs struct {
	// List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
	// The IP addresses of any load balancers or proxies should be considered untrusted.
	IpBlocks pulumi.StringArrayInput `pulumi:"ipBlocks"`
	// List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
	// Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
	Principals pulumi.StringArrayInput `pulumi:"principals"`
}

func (AuthorizationPolicyRuleSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleSource)(nil)).Elem()
}

func (i AuthorizationPolicyRuleSourceArgs) ToAuthorizationPolicyRuleSourceOutput() AuthorizationPolicyRuleSourceOutput {
	return i.ToAuthorizationPolicyRuleSourceOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleSourceArgs) ToAuthorizationPolicyRuleSourceOutputWithContext(ctx context.Context) AuthorizationPolicyRuleSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleSourceOutput)
}

// AuthorizationPolicyRuleSourceArrayInput is an input type that accepts AuthorizationPolicyRuleSourceArray and AuthorizationPolicyRuleSourceArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyRuleSourceArrayInput` via:
//
//	AuthorizationPolicyRuleSourceArray{ AuthorizationPolicyRuleSourceArgs{...} }
type AuthorizationPolicyRuleSourceArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyRuleSourceArrayOutput() AuthorizationPolicyRuleSourceArrayOutput
	ToAuthorizationPolicyRuleSourceArrayOutputWithContext(context.Context) AuthorizationPolicyRuleSourceArrayOutput
}

type AuthorizationPolicyRuleSourceArray []AuthorizationPolicyRuleSourceInput

func (AuthorizationPolicyRuleSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRuleSource)(nil)).Elem()
}

func (i AuthorizationPolicyRuleSourceArray) ToAuthorizationPolicyRuleSourceArrayOutput() AuthorizationPolicyRuleSourceArrayOutput {
	return i.ToAuthorizationPolicyRuleSourceArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyRuleSourceArray) ToAuthorizationPolicyRuleSourceArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyRuleSourceArrayOutput)
}

type AuthorizationPolicyRuleSourceOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationPolicyRuleSource)(nil)).Elem()
}

func (o AuthorizationPolicyRuleSourceOutput) ToAuthorizationPolicyRuleSourceOutput() AuthorizationPolicyRuleSourceOutput {
	return o
}

func (o AuthorizationPolicyRuleSourceOutput) ToAuthorizationPolicyRuleSourceOutputWithContext(ctx context.Context) AuthorizationPolicyRuleSourceOutput {
	return o
}

// List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
// The IP addresses of any load balancers or proxies should be considered untrusted.
func (o AuthorizationPolicyRuleSourceOutput) IpBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleSource) []string { return v.IpBlocks }).(pulumi.StringArrayOutput)
}

// List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
// Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
func (o AuthorizationPolicyRuleSourceOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationPolicyRuleSource) []string { return v.Principals }).(pulumi.StringArrayOutput)
}

type AuthorizationPolicyRuleSourceArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyRuleSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationPolicyRuleSource)(nil)).Elem()
}

func (o AuthorizationPolicyRuleSourceArrayOutput) ToAuthorizationPolicyRuleSourceArrayOutput() AuthorizationPolicyRuleSourceArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleSourceArrayOutput) ToAuthorizationPolicyRuleSourceArrayOutputWithContext(ctx context.Context) AuthorizationPolicyRuleSourceArrayOutput {
	return o
}

func (o AuthorizationPolicyRuleSourceArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyRuleSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationPolicyRuleSource {
		return vs[0].([]AuthorizationPolicyRuleSource)[vs[1].(int)]
	}).(AuthorizationPolicyRuleSourceOutput)
}

type AuthzPolicyCustomProvider struct {
	// Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
	// Structure is documented below.
	AuthzExtension *AuthzPolicyCustomProviderAuthzExtension `pulumi:"authzExtension"`
	// Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
	// Structure is documented below.
	CloudIap *AuthzPolicyCustomProviderCloudIap `pulumi:"cloudIap"`
}

// AuthzPolicyCustomProviderInput is an input type that accepts AuthzPolicyCustomProviderArgs and AuthzPolicyCustomProviderOutput values.
// You can construct a concrete instance of `AuthzPolicyCustomProviderInput` via:
//
//	AuthzPolicyCustomProviderArgs{...}
type AuthzPolicyCustomProviderInput interface {
	pulumi.Input

	ToAuthzPolicyCustomProviderOutput() AuthzPolicyCustomProviderOutput
	ToAuthzPolicyCustomProviderOutputWithContext(context.Context) AuthzPolicyCustomProviderOutput
}

type AuthzPolicyCustomProviderArgs struct {
	// Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
	// Structure is documented below.
	AuthzExtension AuthzPolicyCustomProviderAuthzExtensionPtrInput `pulumi:"authzExtension"`
	// Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
	// Structure is documented below.
	CloudIap AuthzPolicyCustomProviderCloudIapPtrInput `pulumi:"cloudIap"`
}

func (AuthzPolicyCustomProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyCustomProvider)(nil)).Elem()
}

func (i AuthzPolicyCustomProviderArgs) ToAuthzPolicyCustomProviderOutput() AuthzPolicyCustomProviderOutput {
	return i.ToAuthzPolicyCustomProviderOutputWithContext(context.Background())
}

func (i AuthzPolicyCustomProviderArgs) ToAuthzPolicyCustomProviderOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderOutput)
}

func (i AuthzPolicyCustomProviderArgs) ToAuthzPolicyCustomProviderPtrOutput() AuthzPolicyCustomProviderPtrOutput {
	return i.ToAuthzPolicyCustomProviderPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyCustomProviderArgs) ToAuthzPolicyCustomProviderPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderOutput).ToAuthzPolicyCustomProviderPtrOutputWithContext(ctx)
}

// AuthzPolicyCustomProviderPtrInput is an input type that accepts AuthzPolicyCustomProviderArgs, AuthzPolicyCustomProviderPtr and AuthzPolicyCustomProviderPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyCustomProviderPtrInput` via:
//
//	        AuthzPolicyCustomProviderArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyCustomProviderPtrInput interface {
	pulumi.Input

	ToAuthzPolicyCustomProviderPtrOutput() AuthzPolicyCustomProviderPtrOutput
	ToAuthzPolicyCustomProviderPtrOutputWithContext(context.Context) AuthzPolicyCustomProviderPtrOutput
}

type authzPolicyCustomProviderPtrType AuthzPolicyCustomProviderArgs

func AuthzPolicyCustomProviderPtr(v *AuthzPolicyCustomProviderArgs) AuthzPolicyCustomProviderPtrInput {
	return (*authzPolicyCustomProviderPtrType)(v)
}

func (*authzPolicyCustomProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyCustomProvider)(nil)).Elem()
}

func (i *authzPolicyCustomProviderPtrType) ToAuthzPolicyCustomProviderPtrOutput() AuthzPolicyCustomProviderPtrOutput {
	return i.ToAuthzPolicyCustomProviderPtrOutputWithContext(context.Background())
}

func (i *authzPolicyCustomProviderPtrType) ToAuthzPolicyCustomProviderPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderPtrOutput)
}

type AuthzPolicyCustomProviderOutput struct{ *pulumi.OutputState }

func (AuthzPolicyCustomProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyCustomProvider)(nil)).Elem()
}

func (o AuthzPolicyCustomProviderOutput) ToAuthzPolicyCustomProviderOutput() AuthzPolicyCustomProviderOutput {
	return o
}

func (o AuthzPolicyCustomProviderOutput) ToAuthzPolicyCustomProviderOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderOutput {
	return o
}

func (o AuthzPolicyCustomProviderOutput) ToAuthzPolicyCustomProviderPtrOutput() AuthzPolicyCustomProviderPtrOutput {
	return o.ToAuthzPolicyCustomProviderPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyCustomProviderOutput) ToAuthzPolicyCustomProviderPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyCustomProvider) *AuthzPolicyCustomProvider {
		return &v
	}).(AuthzPolicyCustomProviderPtrOutput)
}

// Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
// Structure is documented below.
func (o AuthzPolicyCustomProviderOutput) AuthzExtension() AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return o.ApplyT(func(v AuthzPolicyCustomProvider) *AuthzPolicyCustomProviderAuthzExtension { return v.AuthzExtension }).(AuthzPolicyCustomProviderAuthzExtensionPtrOutput)
}

// Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
// Structure is documented below.
func (o AuthzPolicyCustomProviderOutput) CloudIap() AuthzPolicyCustomProviderCloudIapPtrOutput {
	return o.ApplyT(func(v AuthzPolicyCustomProvider) *AuthzPolicyCustomProviderCloudIap { return v.CloudIap }).(AuthzPolicyCustomProviderCloudIapPtrOutput)
}

type AuthzPolicyCustomProviderPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyCustomProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyCustomProvider)(nil)).Elem()
}

func (o AuthzPolicyCustomProviderPtrOutput) ToAuthzPolicyCustomProviderPtrOutput() AuthzPolicyCustomProviderPtrOutput {
	return o
}

func (o AuthzPolicyCustomProviderPtrOutput) ToAuthzPolicyCustomProviderPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderPtrOutput {
	return o
}

func (o AuthzPolicyCustomProviderPtrOutput) Elem() AuthzPolicyCustomProviderOutput {
	return o.ApplyT(func(v *AuthzPolicyCustomProvider) AuthzPolicyCustomProvider {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyCustomProvider
		return ret
	}).(AuthzPolicyCustomProviderOutput)
}

// Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
// Structure is documented below.
func (o AuthzPolicyCustomProviderPtrOutput) AuthzExtension() AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyCustomProvider) *AuthzPolicyCustomProviderAuthzExtension {
		if v == nil {
			return nil
		}
		return v.AuthzExtension
	}).(AuthzPolicyCustomProviderAuthzExtensionPtrOutput)
}

// Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
// Structure is documented below.
func (o AuthzPolicyCustomProviderPtrOutput) CloudIap() AuthzPolicyCustomProviderCloudIapPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyCustomProvider) *AuthzPolicyCustomProviderCloudIap {
		if v == nil {
			return nil
		}
		return v.CloudIap
	}).(AuthzPolicyCustomProviderCloudIapPtrOutput)
}

type AuthzPolicyCustomProviderAuthzExtension struct {
	// A list of references to authorization extensions that will be invoked for requests matching this policy. Limited to 1 custom provider.
	Resources []string `pulumi:"resources"`
}

// AuthzPolicyCustomProviderAuthzExtensionInput is an input type that accepts AuthzPolicyCustomProviderAuthzExtensionArgs and AuthzPolicyCustomProviderAuthzExtensionOutput values.
// You can construct a concrete instance of `AuthzPolicyCustomProviderAuthzExtensionInput` via:
//
//	AuthzPolicyCustomProviderAuthzExtensionArgs{...}
type AuthzPolicyCustomProviderAuthzExtensionInput interface {
	pulumi.Input

	ToAuthzPolicyCustomProviderAuthzExtensionOutput() AuthzPolicyCustomProviderAuthzExtensionOutput
	ToAuthzPolicyCustomProviderAuthzExtensionOutputWithContext(context.Context) AuthzPolicyCustomProviderAuthzExtensionOutput
}

type AuthzPolicyCustomProviderAuthzExtensionArgs struct {
	// A list of references to authorization extensions that will be invoked for requests matching this policy. Limited to 1 custom provider.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (AuthzPolicyCustomProviderAuthzExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyCustomProviderAuthzExtension)(nil)).Elem()
}

func (i AuthzPolicyCustomProviderAuthzExtensionArgs) ToAuthzPolicyCustomProviderAuthzExtensionOutput() AuthzPolicyCustomProviderAuthzExtensionOutput {
	return i.ToAuthzPolicyCustomProviderAuthzExtensionOutputWithContext(context.Background())
}

func (i AuthzPolicyCustomProviderAuthzExtensionArgs) ToAuthzPolicyCustomProviderAuthzExtensionOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderAuthzExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderAuthzExtensionOutput)
}

func (i AuthzPolicyCustomProviderAuthzExtensionArgs) ToAuthzPolicyCustomProviderAuthzExtensionPtrOutput() AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return i.ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyCustomProviderAuthzExtensionArgs) ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderAuthzExtensionOutput).ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(ctx)
}

// AuthzPolicyCustomProviderAuthzExtensionPtrInput is an input type that accepts AuthzPolicyCustomProviderAuthzExtensionArgs, AuthzPolicyCustomProviderAuthzExtensionPtr and AuthzPolicyCustomProviderAuthzExtensionPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyCustomProviderAuthzExtensionPtrInput` via:
//
//	        AuthzPolicyCustomProviderAuthzExtensionArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyCustomProviderAuthzExtensionPtrInput interface {
	pulumi.Input

	ToAuthzPolicyCustomProviderAuthzExtensionPtrOutput() AuthzPolicyCustomProviderAuthzExtensionPtrOutput
	ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(context.Context) AuthzPolicyCustomProviderAuthzExtensionPtrOutput
}

type authzPolicyCustomProviderAuthzExtensionPtrType AuthzPolicyCustomProviderAuthzExtensionArgs

func AuthzPolicyCustomProviderAuthzExtensionPtr(v *AuthzPolicyCustomProviderAuthzExtensionArgs) AuthzPolicyCustomProviderAuthzExtensionPtrInput {
	return (*authzPolicyCustomProviderAuthzExtensionPtrType)(v)
}

func (*authzPolicyCustomProviderAuthzExtensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyCustomProviderAuthzExtension)(nil)).Elem()
}

func (i *authzPolicyCustomProviderAuthzExtensionPtrType) ToAuthzPolicyCustomProviderAuthzExtensionPtrOutput() AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return i.ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(context.Background())
}

func (i *authzPolicyCustomProviderAuthzExtensionPtrType) ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderAuthzExtensionPtrOutput)
}

type AuthzPolicyCustomProviderAuthzExtensionOutput struct{ *pulumi.OutputState }

func (AuthzPolicyCustomProviderAuthzExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyCustomProviderAuthzExtension)(nil)).Elem()
}

func (o AuthzPolicyCustomProviderAuthzExtensionOutput) ToAuthzPolicyCustomProviderAuthzExtensionOutput() AuthzPolicyCustomProviderAuthzExtensionOutput {
	return o
}

func (o AuthzPolicyCustomProviderAuthzExtensionOutput) ToAuthzPolicyCustomProviderAuthzExtensionOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderAuthzExtensionOutput {
	return o
}

func (o AuthzPolicyCustomProviderAuthzExtensionOutput) ToAuthzPolicyCustomProviderAuthzExtensionPtrOutput() AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return o.ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyCustomProviderAuthzExtensionOutput) ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyCustomProviderAuthzExtension) *AuthzPolicyCustomProviderAuthzExtension {
		return &v
	}).(AuthzPolicyCustomProviderAuthzExtensionPtrOutput)
}

// A list of references to authorization extensions that will be invoked for requests matching this policy. Limited to 1 custom provider.
func (o AuthzPolicyCustomProviderAuthzExtensionOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthzPolicyCustomProviderAuthzExtension) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type AuthzPolicyCustomProviderAuthzExtensionPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyCustomProviderAuthzExtensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyCustomProviderAuthzExtension)(nil)).Elem()
}

func (o AuthzPolicyCustomProviderAuthzExtensionPtrOutput) ToAuthzPolicyCustomProviderAuthzExtensionPtrOutput() AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return o
}

func (o AuthzPolicyCustomProviderAuthzExtensionPtrOutput) ToAuthzPolicyCustomProviderAuthzExtensionPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderAuthzExtensionPtrOutput {
	return o
}

func (o AuthzPolicyCustomProviderAuthzExtensionPtrOutput) Elem() AuthzPolicyCustomProviderAuthzExtensionOutput {
	return o.ApplyT(func(v *AuthzPolicyCustomProviderAuthzExtension) AuthzPolicyCustomProviderAuthzExtension {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyCustomProviderAuthzExtension
		return ret
	}).(AuthzPolicyCustomProviderAuthzExtensionOutput)
}

// A list of references to authorization extensions that will be invoked for requests matching this policy. Limited to 1 custom provider.
func (o AuthzPolicyCustomProviderAuthzExtensionPtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyCustomProviderAuthzExtension) []string {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

type AuthzPolicyCustomProviderCloudIap struct {
	// Enable Cloud IAP at the AuthzPolicy level.
	Enabled bool `pulumi:"enabled"`
}

// AuthzPolicyCustomProviderCloudIapInput is an input type that accepts AuthzPolicyCustomProviderCloudIapArgs and AuthzPolicyCustomProviderCloudIapOutput values.
// You can construct a concrete instance of `AuthzPolicyCustomProviderCloudIapInput` via:
//
//	AuthzPolicyCustomProviderCloudIapArgs{...}
type AuthzPolicyCustomProviderCloudIapInput interface {
	pulumi.Input

	ToAuthzPolicyCustomProviderCloudIapOutput() AuthzPolicyCustomProviderCloudIapOutput
	ToAuthzPolicyCustomProviderCloudIapOutputWithContext(context.Context) AuthzPolicyCustomProviderCloudIapOutput
}

type AuthzPolicyCustomProviderCloudIapArgs struct {
	// Enable Cloud IAP at the AuthzPolicy level.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (AuthzPolicyCustomProviderCloudIapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyCustomProviderCloudIap)(nil)).Elem()
}

func (i AuthzPolicyCustomProviderCloudIapArgs) ToAuthzPolicyCustomProviderCloudIapOutput() AuthzPolicyCustomProviderCloudIapOutput {
	return i.ToAuthzPolicyCustomProviderCloudIapOutputWithContext(context.Background())
}

func (i AuthzPolicyCustomProviderCloudIapArgs) ToAuthzPolicyCustomProviderCloudIapOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderCloudIapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderCloudIapOutput)
}

func (i AuthzPolicyCustomProviderCloudIapArgs) ToAuthzPolicyCustomProviderCloudIapPtrOutput() AuthzPolicyCustomProviderCloudIapPtrOutput {
	return i.ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyCustomProviderCloudIapArgs) ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderCloudIapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderCloudIapOutput).ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(ctx)
}

// AuthzPolicyCustomProviderCloudIapPtrInput is an input type that accepts AuthzPolicyCustomProviderCloudIapArgs, AuthzPolicyCustomProviderCloudIapPtr and AuthzPolicyCustomProviderCloudIapPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyCustomProviderCloudIapPtrInput` via:
//
//	        AuthzPolicyCustomProviderCloudIapArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyCustomProviderCloudIapPtrInput interface {
	pulumi.Input

	ToAuthzPolicyCustomProviderCloudIapPtrOutput() AuthzPolicyCustomProviderCloudIapPtrOutput
	ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(context.Context) AuthzPolicyCustomProviderCloudIapPtrOutput
}

type authzPolicyCustomProviderCloudIapPtrType AuthzPolicyCustomProviderCloudIapArgs

func AuthzPolicyCustomProviderCloudIapPtr(v *AuthzPolicyCustomProviderCloudIapArgs) AuthzPolicyCustomProviderCloudIapPtrInput {
	return (*authzPolicyCustomProviderCloudIapPtrType)(v)
}

func (*authzPolicyCustomProviderCloudIapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyCustomProviderCloudIap)(nil)).Elem()
}

func (i *authzPolicyCustomProviderCloudIapPtrType) ToAuthzPolicyCustomProviderCloudIapPtrOutput() AuthzPolicyCustomProviderCloudIapPtrOutput {
	return i.ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(context.Background())
}

func (i *authzPolicyCustomProviderCloudIapPtrType) ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderCloudIapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyCustomProviderCloudIapPtrOutput)
}

type AuthzPolicyCustomProviderCloudIapOutput struct{ *pulumi.OutputState }

func (AuthzPolicyCustomProviderCloudIapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyCustomProviderCloudIap)(nil)).Elem()
}

func (o AuthzPolicyCustomProviderCloudIapOutput) ToAuthzPolicyCustomProviderCloudIapOutput() AuthzPolicyCustomProviderCloudIapOutput {
	return o
}

func (o AuthzPolicyCustomProviderCloudIapOutput) ToAuthzPolicyCustomProviderCloudIapOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderCloudIapOutput {
	return o
}

func (o AuthzPolicyCustomProviderCloudIapOutput) ToAuthzPolicyCustomProviderCloudIapPtrOutput() AuthzPolicyCustomProviderCloudIapPtrOutput {
	return o.ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyCustomProviderCloudIapOutput) ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderCloudIapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyCustomProviderCloudIap) *AuthzPolicyCustomProviderCloudIap {
		return &v
	}).(AuthzPolicyCustomProviderCloudIapPtrOutput)
}

// Enable Cloud IAP at the AuthzPolicy level.
func (o AuthzPolicyCustomProviderCloudIapOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AuthzPolicyCustomProviderCloudIap) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type AuthzPolicyCustomProviderCloudIapPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyCustomProviderCloudIapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyCustomProviderCloudIap)(nil)).Elem()
}

func (o AuthzPolicyCustomProviderCloudIapPtrOutput) ToAuthzPolicyCustomProviderCloudIapPtrOutput() AuthzPolicyCustomProviderCloudIapPtrOutput {
	return o
}

func (o AuthzPolicyCustomProviderCloudIapPtrOutput) ToAuthzPolicyCustomProviderCloudIapPtrOutputWithContext(ctx context.Context) AuthzPolicyCustomProviderCloudIapPtrOutput {
	return o
}

func (o AuthzPolicyCustomProviderCloudIapPtrOutput) Elem() AuthzPolicyCustomProviderCloudIapOutput {
	return o.ApplyT(func(v *AuthzPolicyCustomProviderCloudIap) AuthzPolicyCustomProviderCloudIap {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyCustomProviderCloudIap
		return ret
	}).(AuthzPolicyCustomProviderCloudIapOutput)
}

// Enable Cloud IAP at the AuthzPolicy level.
func (o AuthzPolicyCustomProviderCloudIapPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyCustomProviderCloudIap) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type AuthzPolicyHttpRule struct {
	// Describes properties of one or more sources of a request.
	// Structure is documented below.
	From *AuthzPolicyHttpRuleFrom `pulumi:"from"`
	// Describes properties of one or more targets of a request
	// Structure is documented below.
	To *AuthzPolicyHttpRuleTo `pulumi:"to"`
	// CEL expression that describes the conditions to be satisfied for the action. The result of the CEL expression is ANDed with the from and to. Refer to the CEL language reference for a list of available attributes.
	When *string `pulumi:"when"`
}

// AuthzPolicyHttpRuleInput is an input type that accepts AuthzPolicyHttpRuleArgs and AuthzPolicyHttpRuleOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleInput` via:
//
//	AuthzPolicyHttpRuleArgs{...}
type AuthzPolicyHttpRuleInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleOutput() AuthzPolicyHttpRuleOutput
	ToAuthzPolicyHttpRuleOutputWithContext(context.Context) AuthzPolicyHttpRuleOutput
}

type AuthzPolicyHttpRuleArgs struct {
	// Describes properties of one or more sources of a request.
	// Structure is documented below.
	From AuthzPolicyHttpRuleFromPtrInput `pulumi:"from"`
	// Describes properties of one or more targets of a request
	// Structure is documented below.
	To AuthzPolicyHttpRuleToPtrInput `pulumi:"to"`
	// CEL expression that describes the conditions to be satisfied for the action. The result of the CEL expression is ANDed with the from and to. Refer to the CEL language reference for a list of available attributes.
	When pulumi.StringPtrInput `pulumi:"when"`
}

func (AuthzPolicyHttpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRule)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleArgs) ToAuthzPolicyHttpRuleOutput() AuthzPolicyHttpRuleOutput {
	return i.ToAuthzPolicyHttpRuleOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleArgs) ToAuthzPolicyHttpRuleOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleOutput)
}

// AuthzPolicyHttpRuleArrayInput is an input type that accepts AuthzPolicyHttpRuleArray and AuthzPolicyHttpRuleArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleArrayInput` via:
//
//	AuthzPolicyHttpRuleArray{ AuthzPolicyHttpRuleArgs{...} }
type AuthzPolicyHttpRuleArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleArrayOutput() AuthzPolicyHttpRuleArrayOutput
	ToAuthzPolicyHttpRuleArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleArrayOutput
}

type AuthzPolicyHttpRuleArray []AuthzPolicyHttpRuleInput

func (AuthzPolicyHttpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRule)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleArray) ToAuthzPolicyHttpRuleArrayOutput() AuthzPolicyHttpRuleArrayOutput {
	return i.ToAuthzPolicyHttpRuleArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleArray) ToAuthzPolicyHttpRuleArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleArrayOutput)
}

type AuthzPolicyHttpRuleOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRule)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleOutput) ToAuthzPolicyHttpRuleOutput() AuthzPolicyHttpRuleOutput {
	return o
}

func (o AuthzPolicyHttpRuleOutput) ToAuthzPolicyHttpRuleOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleOutput {
	return o
}

// Describes properties of one or more sources of a request.
// Structure is documented below.
func (o AuthzPolicyHttpRuleOutput) From() AuthzPolicyHttpRuleFromPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRule) *AuthzPolicyHttpRuleFrom { return v.From }).(AuthzPolicyHttpRuleFromPtrOutput)
}

// Describes properties of one or more targets of a request
// Structure is documented below.
func (o AuthzPolicyHttpRuleOutput) To() AuthzPolicyHttpRuleToPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRule) *AuthzPolicyHttpRuleTo { return v.To }).(AuthzPolicyHttpRuleToPtrOutput)
}

// CEL expression that describes the conditions to be satisfied for the action. The result of the CEL expression is ANDed with the from and to. Refer to the CEL language reference for a list of available attributes.
func (o AuthzPolicyHttpRuleOutput) When() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRule) *string { return v.When }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRule)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleArrayOutput) ToAuthzPolicyHttpRuleArrayOutput() AuthzPolicyHttpRuleArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleArrayOutput) ToAuthzPolicyHttpRuleArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRule {
		return vs[0].([]AuthzPolicyHttpRule)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleOutput)
}

type AuthzPolicyHttpRuleFrom struct {
	// Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
	// Structure is documented below.
	NotSources []AuthzPolicyHttpRuleFromNotSource `pulumi:"notSources"`
	// Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
	// Structure is documented below.
	Sources []AuthzPolicyHttpRuleFromSource `pulumi:"sources"`
}

// AuthzPolicyHttpRuleFromInput is an input type that accepts AuthzPolicyHttpRuleFromArgs and AuthzPolicyHttpRuleFromOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromInput` via:
//
//	AuthzPolicyHttpRuleFromArgs{...}
type AuthzPolicyHttpRuleFromInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromOutput() AuthzPolicyHttpRuleFromOutput
	ToAuthzPolicyHttpRuleFromOutputWithContext(context.Context) AuthzPolicyHttpRuleFromOutput
}

type AuthzPolicyHttpRuleFromArgs struct {
	// Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
	// Structure is documented below.
	NotSources AuthzPolicyHttpRuleFromNotSourceArrayInput `pulumi:"notSources"`
	// Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
	// Structure is documented below.
	Sources AuthzPolicyHttpRuleFromSourceArrayInput `pulumi:"sources"`
}

func (AuthzPolicyHttpRuleFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFrom)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromArgs) ToAuthzPolicyHttpRuleFromOutput() AuthzPolicyHttpRuleFromOutput {
	return i.ToAuthzPolicyHttpRuleFromOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromArgs) ToAuthzPolicyHttpRuleFromOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromOutput)
}

func (i AuthzPolicyHttpRuleFromArgs) ToAuthzPolicyHttpRuleFromPtrOutput() AuthzPolicyHttpRuleFromPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromArgs) ToAuthzPolicyHttpRuleFromPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromOutput).ToAuthzPolicyHttpRuleFromPtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleFromPtrInput is an input type that accepts AuthzPolicyHttpRuleFromArgs, AuthzPolicyHttpRuleFromPtr and AuthzPolicyHttpRuleFromPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromPtrInput` via:
//
//	        AuthzPolicyHttpRuleFromArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleFromPtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromPtrOutput() AuthzPolicyHttpRuleFromPtrOutput
	ToAuthzPolicyHttpRuleFromPtrOutputWithContext(context.Context) AuthzPolicyHttpRuleFromPtrOutput
}

type authzPolicyHttpRuleFromPtrType AuthzPolicyHttpRuleFromArgs

func AuthzPolicyHttpRuleFromPtr(v *AuthzPolicyHttpRuleFromArgs) AuthzPolicyHttpRuleFromPtrInput {
	return (*authzPolicyHttpRuleFromPtrType)(v)
}

func (*authzPolicyHttpRuleFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFrom)(nil)).Elem()
}

func (i *authzPolicyHttpRuleFromPtrType) ToAuthzPolicyHttpRuleFromPtrOutput() AuthzPolicyHttpRuleFromPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromPtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleFromPtrType) ToAuthzPolicyHttpRuleFromPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromPtrOutput)
}

type AuthzPolicyHttpRuleFromOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFrom)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromOutput) ToAuthzPolicyHttpRuleFromOutput() AuthzPolicyHttpRuleFromOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromOutput) ToAuthzPolicyHttpRuleFromOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromOutput) ToAuthzPolicyHttpRuleFromPtrOutput() AuthzPolicyHttpRuleFromPtrOutput {
	return o.ToAuthzPolicyHttpRuleFromPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleFromOutput) ToAuthzPolicyHttpRuleFromPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleFrom) *AuthzPolicyHttpRuleFrom {
		return &v
	}).(AuthzPolicyHttpRuleFromPtrOutput)
}

// Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromOutput) NotSources() AuthzPolicyHttpRuleFromNotSourceArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFrom) []AuthzPolicyHttpRuleFromNotSource { return v.NotSources }).(AuthzPolicyHttpRuleFromNotSourceArrayOutput)
}

// Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromOutput) Sources() AuthzPolicyHttpRuleFromSourceArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFrom) []AuthzPolicyHttpRuleFromSource { return v.Sources }).(AuthzPolicyHttpRuleFromSourceArrayOutput)
}

type AuthzPolicyHttpRuleFromPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFrom)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromPtrOutput) ToAuthzPolicyHttpRuleFromPtrOutput() AuthzPolicyHttpRuleFromPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromPtrOutput) ToAuthzPolicyHttpRuleFromPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromPtrOutput) Elem() AuthzPolicyHttpRuleFromOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFrom) AuthzPolicyHttpRuleFrom {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleFrom
		return ret
	}).(AuthzPolicyHttpRuleFromOutput)
}

// Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromPtrOutput) NotSources() AuthzPolicyHttpRuleFromNotSourceArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFrom) []AuthzPolicyHttpRuleFromNotSource {
		if v == nil {
			return nil
		}
		return v.NotSources
	}).(AuthzPolicyHttpRuleFromNotSourceArrayOutput)
}

// Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromPtrOutput) Sources() AuthzPolicyHttpRuleFromSourceArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFrom) []AuthzPolicyHttpRuleFromSource {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(AuthzPolicyHttpRuleFromSourceArrayOutput)
}

type AuthzPolicyHttpRuleFromNotSource struct {
	// A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
	// Limited to 5 principals.
	// Structure is documented below.
	Principals []AuthzPolicyHttpRuleFromNotSourcePrincipal `pulumi:"principals"`
	// A list of resources to match against the resource of the source VM of a request.
	// Limited to 5 resources.
	// Structure is documented below.
	Resources []AuthzPolicyHttpRuleFromNotSourceResource `pulumi:"resources"`
}

// AuthzPolicyHttpRuleFromNotSourceInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourceArgs and AuthzPolicyHttpRuleFromNotSourceOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourceInput` via:
//
//	AuthzPolicyHttpRuleFromNotSourceArgs{...}
type AuthzPolicyHttpRuleFromNotSourceInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourceOutput() AuthzPolicyHttpRuleFromNotSourceOutput
	ToAuthzPolicyHttpRuleFromNotSourceOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourceOutput
}

type AuthzPolicyHttpRuleFromNotSourceArgs struct {
	// A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
	// Limited to 5 principals.
	// Structure is documented below.
	Principals AuthzPolicyHttpRuleFromNotSourcePrincipalArrayInput `pulumi:"principals"`
	// A list of resources to match against the resource of the source VM of a request.
	// Limited to 5 resources.
	// Structure is documented below.
	Resources AuthzPolicyHttpRuleFromNotSourceResourceArrayInput `pulumi:"resources"`
}

func (AuthzPolicyHttpRuleFromNotSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSource)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromNotSourceArgs) ToAuthzPolicyHttpRuleFromNotSourceOutput() AuthzPolicyHttpRuleFromNotSourceOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourceArgs) ToAuthzPolicyHttpRuleFromNotSourceOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceOutput)
}

// AuthzPolicyHttpRuleFromNotSourceArrayInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourceArray and AuthzPolicyHttpRuleFromNotSourceArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourceArrayInput` via:
//
//	AuthzPolicyHttpRuleFromNotSourceArray{ AuthzPolicyHttpRuleFromNotSourceArgs{...} }
type AuthzPolicyHttpRuleFromNotSourceArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourceArrayOutput() AuthzPolicyHttpRuleFromNotSourceArrayOutput
	ToAuthzPolicyHttpRuleFromNotSourceArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourceArrayOutput
}

type AuthzPolicyHttpRuleFromNotSourceArray []AuthzPolicyHttpRuleFromNotSourceInput

func (AuthzPolicyHttpRuleFromNotSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromNotSource)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromNotSourceArray) ToAuthzPolicyHttpRuleFromNotSourceArrayOutput() AuthzPolicyHttpRuleFromNotSourceArrayOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourceArray) ToAuthzPolicyHttpRuleFromNotSourceArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceArrayOutput)
}

type AuthzPolicyHttpRuleFromNotSourceOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSource)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourceOutput) ToAuthzPolicyHttpRuleFromNotSourceOutput() AuthzPolicyHttpRuleFromNotSourceOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceOutput) ToAuthzPolicyHttpRuleFromNotSourceOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceOutput {
	return o
}

// A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
// Limited to 5 principals.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromNotSourceOutput) Principals() AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSource) []AuthzPolicyHttpRuleFromNotSourcePrincipal {
		return v.Principals
	}).(AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput)
}

// A list of resources to match against the resource of the source VM of a request.
// Limited to 5 resources.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromNotSourceOutput) Resources() AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSource) []AuthzPolicyHttpRuleFromNotSourceResource {
		return v.Resources
	}).(AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput)
}

type AuthzPolicyHttpRuleFromNotSourceArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromNotSource)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourceArrayOutput) ToAuthzPolicyHttpRuleFromNotSourceArrayOutput() AuthzPolicyHttpRuleFromNotSourceArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceArrayOutput) ToAuthzPolicyHttpRuleFromNotSourceArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleFromNotSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleFromNotSource {
		return vs[0].([]AuthzPolicyHttpRuleFromNotSource)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleFromNotSourceOutput)
}

type AuthzPolicyHttpRuleFromNotSourcePrincipal struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleFromNotSourcePrincipalInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourcePrincipalArgs and AuthzPolicyHttpRuleFromNotSourcePrincipalOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourcePrincipalInput` via:
//
//	AuthzPolicyHttpRuleFromNotSourcePrincipalArgs{...}
type AuthzPolicyHttpRuleFromNotSourcePrincipalInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourcePrincipalOutput() AuthzPolicyHttpRuleFromNotSourcePrincipalOutput
	ToAuthzPolicyHttpRuleFromNotSourcePrincipalOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourcePrincipalOutput
}

type AuthzPolicyHttpRuleFromNotSourcePrincipalArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleFromNotSourcePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourcePrincipal)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromNotSourcePrincipalArgs) ToAuthzPolicyHttpRuleFromNotSourcePrincipalOutput() AuthzPolicyHttpRuleFromNotSourcePrincipalOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourcePrincipalOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourcePrincipalArgs) ToAuthzPolicyHttpRuleFromNotSourcePrincipalOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourcePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourcePrincipalOutput)
}

// AuthzPolicyHttpRuleFromNotSourcePrincipalArrayInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourcePrincipalArray and AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourcePrincipalArrayInput` via:
//
//	AuthzPolicyHttpRuleFromNotSourcePrincipalArray{ AuthzPolicyHttpRuleFromNotSourcePrincipalArgs{...} }
type AuthzPolicyHttpRuleFromNotSourcePrincipalArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput() AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput
	ToAuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput
}

type AuthzPolicyHttpRuleFromNotSourcePrincipalArray []AuthzPolicyHttpRuleFromNotSourcePrincipalInput

func (AuthzPolicyHttpRuleFromNotSourcePrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromNotSourcePrincipal)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromNotSourcePrincipalArray) ToAuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput() AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourcePrincipalArray) ToAuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput)
}

type AuthzPolicyHttpRuleFromNotSourcePrincipalOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourcePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourcePrincipal)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourcePrincipalOutput) ToAuthzPolicyHttpRuleFromNotSourcePrincipalOutput() AuthzPolicyHttpRuleFromNotSourcePrincipalOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourcePrincipalOutput) ToAuthzPolicyHttpRuleFromNotSourcePrincipalOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourcePrincipalOutput {
	return o
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleFromNotSourcePrincipalOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourcePrincipal) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleFromNotSourcePrincipalOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourcePrincipal) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleFromNotSourcePrincipalOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourcePrincipal) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleFromNotSourcePrincipalOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourcePrincipal) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleFromNotSourcePrincipalOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourcePrincipal) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromNotSourcePrincipal)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput) ToAuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput() AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput) ToAuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleFromNotSourcePrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleFromNotSourcePrincipal {
		return vs[0].([]AuthzPolicyHttpRuleFromNotSourcePrincipal)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleFromNotSourcePrincipalOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResource struct {
	// An IAM service account to match against the source service account of the VM sending the request.
	// Structure is documented below.
	IamServiceAccount *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount `pulumi:"iamServiceAccount"`
	// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
	// Structure is documented below.
	TagValueIdSet *AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet `pulumi:"tagValueIdSet"`
}

// AuthzPolicyHttpRuleFromNotSourceResourceInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourceResourceArgs and AuthzPolicyHttpRuleFromNotSourceResourceOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourceResourceInput` via:
//
//	AuthzPolicyHttpRuleFromNotSourceResourceArgs{...}
type AuthzPolicyHttpRuleFromNotSourceResourceInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourceResourceOutput() AuthzPolicyHttpRuleFromNotSourceResourceOutput
	ToAuthzPolicyHttpRuleFromNotSourceResourceOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourceResourceOutput
}

type AuthzPolicyHttpRuleFromNotSourceResourceArgs struct {
	// An IAM service account to match against the source service account of the VM sending the request.
	// Structure is documented below.
	IamServiceAccount AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrInput `pulumi:"iamServiceAccount"`
	// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
	// Structure is documented below.
	TagValueIdSet AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrInput `pulumi:"tagValueIdSet"`
}

func (AuthzPolicyHttpRuleFromNotSourceResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResource)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceOutput() AuthzPolicyHttpRuleFromNotSourceResourceOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceResourceOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceResourceOutput)
}

// AuthzPolicyHttpRuleFromNotSourceResourceArrayInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourceResourceArray and AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourceResourceArrayInput` via:
//
//	AuthzPolicyHttpRuleFromNotSourceResourceArray{ AuthzPolicyHttpRuleFromNotSourceResourceArgs{...} }
type AuthzPolicyHttpRuleFromNotSourceResourceArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourceResourceArrayOutput() AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput
	ToAuthzPolicyHttpRuleFromNotSourceResourceArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput
}

type AuthzPolicyHttpRuleFromNotSourceResourceArray []AuthzPolicyHttpRuleFromNotSourceResourceInput

func (AuthzPolicyHttpRuleFromNotSourceResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromNotSourceResource)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceArray) ToAuthzPolicyHttpRuleFromNotSourceResourceArrayOutput() AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceResourceArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceArray) ToAuthzPolicyHttpRuleFromNotSourceResourceArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResourceOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourceResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResource)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceOutput() AuthzPolicyHttpRuleFromNotSourceResourceOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceOutput {
	return o
}

// An IAM service account to match against the source service account of the VM sending the request.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromNotSourceResourceOutput) IamServiceAccount() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourceResource) *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount {
		return v.IamServiceAccount
	}).(AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput)
}

// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromNotSourceResourceOutput) TagValueIdSet() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourceResource) *AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet {
		return v.TagValueIdSet
	}).(AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromNotSourceResource)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceArrayOutput() AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleFromNotSourceResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleFromNotSourceResource {
		return vs[0].([]AuthzPolicyHttpRuleFromNotSourceResource)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleFromNotSourceResourceOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs and AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountInput` via:
//
//	AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs{...}
type AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput
	ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput
}

type AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput)
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput).ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs, AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtr and AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrInput` via:
//
//	        AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput
	ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput
}

type authzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrType AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs

func AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtr(v *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrInput {
	return (*authzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrType)(v)
}

func (*authzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount)(nil)).Elem()
}

func (i *authzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrType) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrType) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return o.ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount {
		return &v
	}).(AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput)
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) Elem() AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount
		return ret
	}).(AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput)
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Contains
	}).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Exact
	}).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet struct {
	// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
	// Limited to 5 matches.
	Ids []string `pulumi:"ids"`
}

// AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs and AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetInput` via:
//
//	AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs{...}
type AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput
	ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput
}

type AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs struct {
	// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
	// Limited to 5 matches.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
}

func (AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput)
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput).ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrInput is an input type that accepts AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs, AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtr and AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrInput` via:
//
//	        AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput
	ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(context.Context) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput
}

type authzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrType AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs

func AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtr(v *AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrInput {
	return (*authzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrType)(v)
}

func (*authzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet)(nil)).Elem()
}

func (i *authzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrType) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrType) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return o.ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet) *AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet {
		return &v
	}).(AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput)
}

// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
// Limited to 5 matches.
func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

type AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput) ToAuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput) Elem() AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet) AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet
		return ret
	}).(AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput)
}

// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
// Limited to 5 matches.
func (o AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSet) []string {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.StringArrayOutput)
}

type AuthzPolicyHttpRuleFromSource struct {
	// A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
	// Limited to 5 principals.
	// Structure is documented below.
	Principals []AuthzPolicyHttpRuleFromSourcePrincipal `pulumi:"principals"`
	// A list of resources to match against the resource of the source VM of a request.
	// Limited to 5 resources.
	// Structure is documented below.
	Resources []AuthzPolicyHttpRuleFromSourceResource `pulumi:"resources"`
}

// AuthzPolicyHttpRuleFromSourceInput is an input type that accepts AuthzPolicyHttpRuleFromSourceArgs and AuthzPolicyHttpRuleFromSourceOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourceInput` via:
//
//	AuthzPolicyHttpRuleFromSourceArgs{...}
type AuthzPolicyHttpRuleFromSourceInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourceOutput() AuthzPolicyHttpRuleFromSourceOutput
	ToAuthzPolicyHttpRuleFromSourceOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourceOutput
}

type AuthzPolicyHttpRuleFromSourceArgs struct {
	// A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
	// Limited to 5 principals.
	// Structure is documented below.
	Principals AuthzPolicyHttpRuleFromSourcePrincipalArrayInput `pulumi:"principals"`
	// A list of resources to match against the resource of the source VM of a request.
	// Limited to 5 resources.
	// Structure is documented below.
	Resources AuthzPolicyHttpRuleFromSourceResourceArrayInput `pulumi:"resources"`
}

func (AuthzPolicyHttpRuleFromSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSource)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromSourceArgs) ToAuthzPolicyHttpRuleFromSourceOutput() AuthzPolicyHttpRuleFromSourceOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourceArgs) ToAuthzPolicyHttpRuleFromSourceOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceOutput)
}

// AuthzPolicyHttpRuleFromSourceArrayInput is an input type that accepts AuthzPolicyHttpRuleFromSourceArray and AuthzPolicyHttpRuleFromSourceArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourceArrayInput` via:
//
//	AuthzPolicyHttpRuleFromSourceArray{ AuthzPolicyHttpRuleFromSourceArgs{...} }
type AuthzPolicyHttpRuleFromSourceArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourceArrayOutput() AuthzPolicyHttpRuleFromSourceArrayOutput
	ToAuthzPolicyHttpRuleFromSourceArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourceArrayOutput
}

type AuthzPolicyHttpRuleFromSourceArray []AuthzPolicyHttpRuleFromSourceInput

func (AuthzPolicyHttpRuleFromSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromSource)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromSourceArray) ToAuthzPolicyHttpRuleFromSourceArrayOutput() AuthzPolicyHttpRuleFromSourceArrayOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourceArray) ToAuthzPolicyHttpRuleFromSourceArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceArrayOutput)
}

type AuthzPolicyHttpRuleFromSourceOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSource)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourceOutput) ToAuthzPolicyHttpRuleFromSourceOutput() AuthzPolicyHttpRuleFromSourceOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceOutput) ToAuthzPolicyHttpRuleFromSourceOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceOutput {
	return o
}

// A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
// Limited to 5 principals.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromSourceOutput) Principals() AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSource) []AuthzPolicyHttpRuleFromSourcePrincipal { return v.Principals }).(AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput)
}

// A list of resources to match against the resource of the source VM of a request.
// Limited to 5 resources.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromSourceOutput) Resources() AuthzPolicyHttpRuleFromSourceResourceArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSource) []AuthzPolicyHttpRuleFromSourceResource { return v.Resources }).(AuthzPolicyHttpRuleFromSourceResourceArrayOutput)
}

type AuthzPolicyHttpRuleFromSourceArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromSource)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourceArrayOutput) ToAuthzPolicyHttpRuleFromSourceArrayOutput() AuthzPolicyHttpRuleFromSourceArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceArrayOutput) ToAuthzPolicyHttpRuleFromSourceArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleFromSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleFromSource {
		return vs[0].([]AuthzPolicyHttpRuleFromSource)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleFromSourceOutput)
}

type AuthzPolicyHttpRuleFromSourcePrincipal struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleFromSourcePrincipalInput is an input type that accepts AuthzPolicyHttpRuleFromSourcePrincipalArgs and AuthzPolicyHttpRuleFromSourcePrincipalOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourcePrincipalInput` via:
//
//	AuthzPolicyHttpRuleFromSourcePrincipalArgs{...}
type AuthzPolicyHttpRuleFromSourcePrincipalInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourcePrincipalOutput() AuthzPolicyHttpRuleFromSourcePrincipalOutput
	ToAuthzPolicyHttpRuleFromSourcePrincipalOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourcePrincipalOutput
}

type AuthzPolicyHttpRuleFromSourcePrincipalArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleFromSourcePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSourcePrincipal)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromSourcePrincipalArgs) ToAuthzPolicyHttpRuleFromSourcePrincipalOutput() AuthzPolicyHttpRuleFromSourcePrincipalOutput {
	return i.ToAuthzPolicyHttpRuleFromSourcePrincipalOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourcePrincipalArgs) ToAuthzPolicyHttpRuleFromSourcePrincipalOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourcePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourcePrincipalOutput)
}

// AuthzPolicyHttpRuleFromSourcePrincipalArrayInput is an input type that accepts AuthzPolicyHttpRuleFromSourcePrincipalArray and AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourcePrincipalArrayInput` via:
//
//	AuthzPolicyHttpRuleFromSourcePrincipalArray{ AuthzPolicyHttpRuleFromSourcePrincipalArgs{...} }
type AuthzPolicyHttpRuleFromSourcePrincipalArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourcePrincipalArrayOutput() AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput
	ToAuthzPolicyHttpRuleFromSourcePrincipalArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput
}

type AuthzPolicyHttpRuleFromSourcePrincipalArray []AuthzPolicyHttpRuleFromSourcePrincipalInput

func (AuthzPolicyHttpRuleFromSourcePrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromSourcePrincipal)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromSourcePrincipalArray) ToAuthzPolicyHttpRuleFromSourcePrincipalArrayOutput() AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput {
	return i.ToAuthzPolicyHttpRuleFromSourcePrincipalArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourcePrincipalArray) ToAuthzPolicyHttpRuleFromSourcePrincipalArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput)
}

type AuthzPolicyHttpRuleFromSourcePrincipalOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourcePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSourcePrincipal)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourcePrincipalOutput) ToAuthzPolicyHttpRuleFromSourcePrincipalOutput() AuthzPolicyHttpRuleFromSourcePrincipalOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourcePrincipalOutput) ToAuthzPolicyHttpRuleFromSourcePrincipalOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourcePrincipalOutput {
	return o
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleFromSourcePrincipalOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourcePrincipal) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleFromSourcePrincipalOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourcePrincipal) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleFromSourcePrincipalOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourcePrincipal) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleFromSourcePrincipalOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourcePrincipal) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleFromSourcePrincipalOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourcePrincipal) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromSourcePrincipal)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput) ToAuthzPolicyHttpRuleFromSourcePrincipalArrayOutput() AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput) ToAuthzPolicyHttpRuleFromSourcePrincipalArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleFromSourcePrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleFromSourcePrincipal {
		return vs[0].([]AuthzPolicyHttpRuleFromSourcePrincipal)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleFromSourcePrincipalOutput)
}

type AuthzPolicyHttpRuleFromSourceResource struct {
	// An IAM service account to match against the source service account of the VM sending the request.
	// Structure is documented below.
	IamServiceAccount *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount `pulumi:"iamServiceAccount"`
	// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
	// Structure is documented below.
	TagValueIdSet *AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet `pulumi:"tagValueIdSet"`
}

// AuthzPolicyHttpRuleFromSourceResourceInput is an input type that accepts AuthzPolicyHttpRuleFromSourceResourceArgs and AuthzPolicyHttpRuleFromSourceResourceOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourceResourceInput` via:
//
//	AuthzPolicyHttpRuleFromSourceResourceArgs{...}
type AuthzPolicyHttpRuleFromSourceResourceInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourceResourceOutput() AuthzPolicyHttpRuleFromSourceResourceOutput
	ToAuthzPolicyHttpRuleFromSourceResourceOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourceResourceOutput
}

type AuthzPolicyHttpRuleFromSourceResourceArgs struct {
	// An IAM service account to match against the source service account of the VM sending the request.
	// Structure is documented below.
	IamServiceAccount AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrInput `pulumi:"iamServiceAccount"`
	// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
	// Structure is documented below.
	TagValueIdSet AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrInput `pulumi:"tagValueIdSet"`
}

func (AuthzPolicyHttpRuleFromSourceResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResource)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromSourceResourceArgs) ToAuthzPolicyHttpRuleFromSourceResourceOutput() AuthzPolicyHttpRuleFromSourceResourceOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceResourceOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourceResourceArgs) ToAuthzPolicyHttpRuleFromSourceResourceOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceResourceOutput)
}

// AuthzPolicyHttpRuleFromSourceResourceArrayInput is an input type that accepts AuthzPolicyHttpRuleFromSourceResourceArray and AuthzPolicyHttpRuleFromSourceResourceArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourceResourceArrayInput` via:
//
//	AuthzPolicyHttpRuleFromSourceResourceArray{ AuthzPolicyHttpRuleFromSourceResourceArgs{...} }
type AuthzPolicyHttpRuleFromSourceResourceArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourceResourceArrayOutput() AuthzPolicyHttpRuleFromSourceResourceArrayOutput
	ToAuthzPolicyHttpRuleFromSourceResourceArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourceResourceArrayOutput
}

type AuthzPolicyHttpRuleFromSourceResourceArray []AuthzPolicyHttpRuleFromSourceResourceInput

func (AuthzPolicyHttpRuleFromSourceResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromSourceResource)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromSourceResourceArray) ToAuthzPolicyHttpRuleFromSourceResourceArrayOutput() AuthzPolicyHttpRuleFromSourceResourceArrayOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceResourceArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourceResourceArray) ToAuthzPolicyHttpRuleFromSourceResourceArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceResourceArrayOutput)
}

type AuthzPolicyHttpRuleFromSourceResourceOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourceResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResource)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourceResourceOutput) ToAuthzPolicyHttpRuleFromSourceResourceOutput() AuthzPolicyHttpRuleFromSourceResourceOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceOutput) ToAuthzPolicyHttpRuleFromSourceResourceOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceOutput {
	return o
}

// An IAM service account to match against the source service account of the VM sending the request.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromSourceResourceOutput) IamServiceAccount() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourceResource) *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount {
		return v.IamServiceAccount
	}).(AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput)
}

// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
// Structure is documented below.
func (o AuthzPolicyHttpRuleFromSourceResourceOutput) TagValueIdSet() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourceResource) *AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet {
		return v.TagValueIdSet
	}).(AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput)
}

type AuthzPolicyHttpRuleFromSourceResourceArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourceResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleFromSourceResource)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourceResourceArrayOutput) ToAuthzPolicyHttpRuleFromSourceResourceArrayOutput() AuthzPolicyHttpRuleFromSourceResourceArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceArrayOutput) ToAuthzPolicyHttpRuleFromSourceResourceArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleFromSourceResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleFromSourceResource {
		return vs[0].([]AuthzPolicyHttpRuleFromSourceResource)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleFromSourceResourceOutput)
}

type AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountInput is an input type that accepts AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs and AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountInput` via:
//
//	AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs{...}
type AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput
	ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput
}

type AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput)
}

func (i AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput).ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrInput is an input type that accepts AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs, AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtr and AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrInput` via:
//
//	        AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput
	ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput
}

type authzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrType AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs

func AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtr(v *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrInput {
	return (*authzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrType)(v)
}

func (*authzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount)(nil)).Elem()
}

func (i *authzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrType) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrType) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput)
}

type AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return o.ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount {
		return &v
	}).(AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput)
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) ToAuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) Elem() AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount
		return ret
	}).(AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput)
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Contains
	}).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Exact
	}).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromSourceResourceIamServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet struct {
	// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
	// Limited to 5 matches.
	Ids []string `pulumi:"ids"`
}

// AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetInput is an input type that accepts AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs and AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetInput` via:
//
//	AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs{...}
type AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput
	ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput
}

type AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs struct {
	// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
	// Limited to 5 matches.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
}

func (AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput)
}

func (i AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput).ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrInput is an input type that accepts AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs, AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtr and AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrInput` via:
//
//	        AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput
	ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(context.Context) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput
}

type authzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrType AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs

func AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtr(v *AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrInput {
	return (*authzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrType)(v)
}

func (*authzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet)(nil)).Elem()
}

func (i *authzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrType) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return i.ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrType) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput)
}

type AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return o.ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet) *AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet {
		return &v
	}).(AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput)
}

// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
// Limited to 5 matches.
func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

type AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput) ToAuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput) Elem() AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet) AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet
		return ret
	}).(AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput)
}

// A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
// Limited to 5 matches.
func (o AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleFromSourceResourceTagValueIdSet) []string {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.StringArrayOutput)
}

type AuthzPolicyHttpRuleTo struct {
	// Describes the negated properties of the targets of a request. Matches requests for operations that do not match the criteria specified in this field. At least one of operations or notOperations must be specified.
	// Structure is documented below.
	NotOperations []AuthzPolicyHttpRuleToNotOperation `pulumi:"notOperations"`
	// Describes properties of one or more targets of a request. At least one of operations or notOperations must be specified. Limited to 5 operations. A match occurs when ANY operation (in operations or notOperations) matches. Within an operation, the match follows AND semantics across fields and OR semantics within a field, i.e. a match occurs when ANY path matches AND ANY header matches and ANY method matches.
	// Structure is documented below.
	Operations []AuthzPolicyHttpRuleToOperation `pulumi:"operations"`
}

// AuthzPolicyHttpRuleToInput is an input type that accepts AuthzPolicyHttpRuleToArgs and AuthzPolicyHttpRuleToOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToInput` via:
//
//	AuthzPolicyHttpRuleToArgs{...}
type AuthzPolicyHttpRuleToInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOutput() AuthzPolicyHttpRuleToOutput
	ToAuthzPolicyHttpRuleToOutputWithContext(context.Context) AuthzPolicyHttpRuleToOutput
}

type AuthzPolicyHttpRuleToArgs struct {
	// Describes the negated properties of the targets of a request. Matches requests for operations that do not match the criteria specified in this field. At least one of operations or notOperations must be specified.
	// Structure is documented below.
	NotOperations AuthzPolicyHttpRuleToNotOperationArrayInput `pulumi:"notOperations"`
	// Describes properties of one or more targets of a request. At least one of operations or notOperations must be specified. Limited to 5 operations. A match occurs when ANY operation (in operations or notOperations) matches. Within an operation, the match follows AND semantics across fields and OR semantics within a field, i.e. a match occurs when ANY path matches AND ANY header matches and ANY method matches.
	// Structure is documented below.
	Operations AuthzPolicyHttpRuleToOperationArrayInput `pulumi:"operations"`
}

func (AuthzPolicyHttpRuleToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleTo)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToArgs) ToAuthzPolicyHttpRuleToOutput() AuthzPolicyHttpRuleToOutput {
	return i.ToAuthzPolicyHttpRuleToOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToArgs) ToAuthzPolicyHttpRuleToOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOutput)
}

func (i AuthzPolicyHttpRuleToArgs) ToAuthzPolicyHttpRuleToPtrOutput() AuthzPolicyHttpRuleToPtrOutput {
	return i.ToAuthzPolicyHttpRuleToPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToArgs) ToAuthzPolicyHttpRuleToPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOutput).ToAuthzPolicyHttpRuleToPtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleToPtrInput is an input type that accepts AuthzPolicyHttpRuleToArgs, AuthzPolicyHttpRuleToPtr and AuthzPolicyHttpRuleToPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToPtrInput` via:
//
//	        AuthzPolicyHttpRuleToArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleToPtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToPtrOutput() AuthzPolicyHttpRuleToPtrOutput
	ToAuthzPolicyHttpRuleToPtrOutputWithContext(context.Context) AuthzPolicyHttpRuleToPtrOutput
}

type authzPolicyHttpRuleToPtrType AuthzPolicyHttpRuleToArgs

func AuthzPolicyHttpRuleToPtr(v *AuthzPolicyHttpRuleToArgs) AuthzPolicyHttpRuleToPtrInput {
	return (*authzPolicyHttpRuleToPtrType)(v)
}

func (*authzPolicyHttpRuleToPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleTo)(nil)).Elem()
}

func (i *authzPolicyHttpRuleToPtrType) ToAuthzPolicyHttpRuleToPtrOutput() AuthzPolicyHttpRuleToPtrOutput {
	return i.ToAuthzPolicyHttpRuleToPtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleToPtrType) ToAuthzPolicyHttpRuleToPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToPtrOutput)
}

type AuthzPolicyHttpRuleToOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleTo)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOutput) ToAuthzPolicyHttpRuleToOutput() AuthzPolicyHttpRuleToOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOutput) ToAuthzPolicyHttpRuleToOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOutput) ToAuthzPolicyHttpRuleToPtrOutput() AuthzPolicyHttpRuleToPtrOutput {
	return o.ToAuthzPolicyHttpRuleToPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleToOutput) ToAuthzPolicyHttpRuleToPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleTo) *AuthzPolicyHttpRuleTo {
		return &v
	}).(AuthzPolicyHttpRuleToPtrOutput)
}

// Describes the negated properties of the targets of a request. Matches requests for operations that do not match the criteria specified in this field. At least one of operations or notOperations must be specified.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToOutput) NotOperations() AuthzPolicyHttpRuleToNotOperationArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleTo) []AuthzPolicyHttpRuleToNotOperation { return v.NotOperations }).(AuthzPolicyHttpRuleToNotOperationArrayOutput)
}

// Describes properties of one or more targets of a request. At least one of operations or notOperations must be specified. Limited to 5 operations. A match occurs when ANY operation (in operations or notOperations) matches. Within an operation, the match follows AND semantics across fields and OR semantics within a field, i.e. a match occurs when ANY path matches AND ANY header matches and ANY method matches.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToOutput) Operations() AuthzPolicyHttpRuleToOperationArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleTo) []AuthzPolicyHttpRuleToOperation { return v.Operations }).(AuthzPolicyHttpRuleToOperationArrayOutput)
}

type AuthzPolicyHttpRuleToPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleTo)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToPtrOutput) ToAuthzPolicyHttpRuleToPtrOutput() AuthzPolicyHttpRuleToPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToPtrOutput) ToAuthzPolicyHttpRuleToPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToPtrOutput) Elem() AuthzPolicyHttpRuleToOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleTo) AuthzPolicyHttpRuleTo {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleTo
		return ret
	}).(AuthzPolicyHttpRuleToOutput)
}

// Describes the negated properties of the targets of a request. Matches requests for operations that do not match the criteria specified in this field. At least one of operations or notOperations must be specified.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToPtrOutput) NotOperations() AuthzPolicyHttpRuleToNotOperationArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleTo) []AuthzPolicyHttpRuleToNotOperation {
		if v == nil {
			return nil
		}
		return v.NotOperations
	}).(AuthzPolicyHttpRuleToNotOperationArrayOutput)
}

// Describes properties of one or more targets of a request. At least one of operations or notOperations must be specified. Limited to 5 operations. A match occurs when ANY operation (in operations or notOperations) matches. Within an operation, the match follows AND semantics across fields and OR semantics within a field, i.e. a match occurs when ANY path matches AND ANY header matches and ANY method matches.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToPtrOutput) Operations() AuthzPolicyHttpRuleToOperationArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleTo) []AuthzPolicyHttpRuleToOperation {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(AuthzPolicyHttpRuleToOperationArrayOutput)
}

type AuthzPolicyHttpRuleToNotOperation struct {
	// A list of headers to match against in http header.
	// Structure is documented below.
	HeaderSet *AuthzPolicyHttpRuleToNotOperationHeaderSet `pulumi:"headerSet"`
	// A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
	// Limited to 5 matches.
	// Structure is documented below.
	Hosts []AuthzPolicyHttpRuleToNotOperationHost `pulumi:"hosts"`
	// A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
	Methods []string `pulumi:"methods"`
	// A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
	// Limited to 5 matches.
	// Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
	// Structure is documented below.
	Paths []AuthzPolicyHttpRuleToNotOperationPath `pulumi:"paths"`
}

// AuthzPolicyHttpRuleToNotOperationInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationArgs and AuthzPolicyHttpRuleToNotOperationOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationArgs{...}
type AuthzPolicyHttpRuleToNotOperationInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationOutput() AuthzPolicyHttpRuleToNotOperationOutput
	ToAuthzPolicyHttpRuleToNotOperationOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationOutput
}

type AuthzPolicyHttpRuleToNotOperationArgs struct {
	// A list of headers to match against in http header.
	// Structure is documented below.
	HeaderSet AuthzPolicyHttpRuleToNotOperationHeaderSetPtrInput `pulumi:"headerSet"`
	// A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
	// Limited to 5 matches.
	// Structure is documented below.
	Hosts AuthzPolicyHttpRuleToNotOperationHostArrayInput `pulumi:"hosts"`
	// A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
	Methods pulumi.StringArrayInput `pulumi:"methods"`
	// A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
	// Limited to 5 matches.
	// Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
	// Structure is documented below.
	Paths AuthzPolicyHttpRuleToNotOperationPathArrayInput `pulumi:"paths"`
}

func (AuthzPolicyHttpRuleToNotOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperation)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationArgs) ToAuthzPolicyHttpRuleToNotOperationOutput() AuthzPolicyHttpRuleToNotOperationOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationArgs) ToAuthzPolicyHttpRuleToNotOperationOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationOutput)
}

// AuthzPolicyHttpRuleToNotOperationArrayInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationArray and AuthzPolicyHttpRuleToNotOperationArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationArrayInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationArray{ AuthzPolicyHttpRuleToNotOperationArgs{...} }
type AuthzPolicyHttpRuleToNotOperationArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationArrayOutput() AuthzPolicyHttpRuleToNotOperationArrayOutput
	ToAuthzPolicyHttpRuleToNotOperationArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationArrayOutput
}

type AuthzPolicyHttpRuleToNotOperationArray []AuthzPolicyHttpRuleToNotOperationInput

func (AuthzPolicyHttpRuleToNotOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToNotOperation)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationArray) ToAuthzPolicyHttpRuleToNotOperationArrayOutput() AuthzPolicyHttpRuleToNotOperationArrayOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationArray) ToAuthzPolicyHttpRuleToNotOperationArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationArrayOutput)
}

type AuthzPolicyHttpRuleToNotOperationOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperation)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationOutput) ToAuthzPolicyHttpRuleToNotOperationOutput() AuthzPolicyHttpRuleToNotOperationOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationOutput) ToAuthzPolicyHttpRuleToNotOperationOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationOutput {
	return o
}

// A list of headers to match against in http header.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToNotOperationOutput) HeaderSet() AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperation) *AuthzPolicyHttpRuleToNotOperationHeaderSet {
		return v.HeaderSet
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput)
}

// A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
// Limited to 5 matches.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToNotOperationOutput) Hosts() AuthzPolicyHttpRuleToNotOperationHostArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperation) []AuthzPolicyHttpRuleToNotOperationHost { return v.Hosts }).(AuthzPolicyHttpRuleToNotOperationHostArrayOutput)
}

// A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
func (o AuthzPolicyHttpRuleToNotOperationOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperation) []string { return v.Methods }).(pulumi.StringArrayOutput)
}

// A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
// Limited to 5 matches.
// Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToNotOperationOutput) Paths() AuthzPolicyHttpRuleToNotOperationPathArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperation) []AuthzPolicyHttpRuleToNotOperationPath { return v.Paths }).(AuthzPolicyHttpRuleToNotOperationPathArrayOutput)
}

type AuthzPolicyHttpRuleToNotOperationArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToNotOperation)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationArrayOutput) ToAuthzPolicyHttpRuleToNotOperationArrayOutput() AuthzPolicyHttpRuleToNotOperationArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationArrayOutput) ToAuthzPolicyHttpRuleToNotOperationArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleToNotOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleToNotOperation {
		return vs[0].([]AuthzPolicyHttpRuleToNotOperation)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleToNotOperationOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSet struct {
	// A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
	// Structure is documented below.
	Headers []AuthzPolicyHttpRuleToNotOperationHeaderSetHeader `pulumi:"headers"`
}

// AuthzPolicyHttpRuleToNotOperationHeaderSetInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationHeaderSetArgs and AuthzPolicyHttpRuleToNotOperationHeaderSetOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationHeaderSetInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationHeaderSetArgs{...}
type AuthzPolicyHttpRuleToNotOperationHeaderSetInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationHeaderSetOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetOutput
	ToAuthzPolicyHttpRuleToNotOperationHeaderSetOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetOutput
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetArgs struct {
	// A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
	// Structure is documented below.
	Headers AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayInput `pulumi:"headers"`
}

func (AuthzPolicyHttpRuleToNotOperationHeaderSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSet)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHeaderSetOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHeaderSetOutput)
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHeaderSetOutput).ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleToNotOperationHeaderSetPtrInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationHeaderSetArgs, AuthzPolicyHttpRuleToNotOperationHeaderSetPtr and AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationHeaderSetPtrInput` via:
//
//	        AuthzPolicyHttpRuleToNotOperationHeaderSetArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleToNotOperationHeaderSetPtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput
	ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput
}

type authzPolicyHttpRuleToNotOperationHeaderSetPtrType AuthzPolicyHttpRuleToNotOperationHeaderSetArgs

func AuthzPolicyHttpRuleToNotOperationHeaderSetPtr(v *AuthzPolicyHttpRuleToNotOperationHeaderSetArgs) AuthzPolicyHttpRuleToNotOperationHeaderSetPtrInput {
	return (*authzPolicyHttpRuleToNotOperationHeaderSetPtrType)(v)
}

func (*authzPolicyHttpRuleToNotOperationHeaderSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleToNotOperationHeaderSet)(nil)).Elem()
}

func (i *authzPolicyHttpRuleToNotOperationHeaderSetPtrType) ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleToNotOperationHeaderSetPtrType) ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationHeaderSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSet)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return o.ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleToNotOperationHeaderSet) *AuthzPolicyHttpRuleToNotOperationHeaderSet {
		return &v
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput)
}

// A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetOutput) Headers() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHeaderSet) []AuthzPolicyHttpRuleToNotOperationHeaderSetHeader {
		return v.Headers
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleToNotOperationHeaderSet)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput) Elem() AuthzPolicyHttpRuleToNotOperationHeaderSetOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToNotOperationHeaderSet) AuthzPolicyHttpRuleToNotOperationHeaderSet {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleToNotOperationHeaderSet
		return ret
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetOutput)
}

// A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput) Headers() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToNotOperationHeaderSet) []AuthzPolicyHttpRuleToNotOperationHeaderSetHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeader struct {
	// Specifies the name of the header in the request.
	Name *string `pulumi:"name"`
	// Specifies how the header match will be performed.
	// Structure is documented below.
	Value *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue `pulumi:"value"`
}

// AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArgs and AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArgs{...}
type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput
	ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArgs struct {
	// Specifies the name of the header in the request.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies how the header match will be performed.
	// Structure is documented below.
	Value AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrInput `pulumi:"value"`
}

func (AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetHeader)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput)
}

// AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArray and AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArray{ AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArgs{...} }
type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput
	ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArray []AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderInput

func (AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToNotOperationHeaderSetHeader)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArray) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArray) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetHeader)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput {
	return o
}

// Specifies the name of the header in the request.
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHeaderSetHeader) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies how the header match will be performed.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput) Value() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHeaderSetHeader) *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue {
		return v.Value
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToNotOperationHeaderSetHeader)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleToNotOperationHeaderSetHeader {
		return vs[0].([]AuthzPolicyHttpRuleToNotOperationHeaderSetHeader)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs and AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs{...}
type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput
	ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput)
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput).ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs, AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtr and AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrInput` via:
//
//	        AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput
	ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput
}

type authzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrType AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs

func AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtr(v *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrInput {
	return (*authzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrType)(v)
}

func (*authzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue)(nil)).Elem()
}

func (i *authzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrType) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrType) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return o.ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue {
		return &v
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput)
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) ToAuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) Elem() AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue
		return ret
	}).(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput)
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *string {
		if v == nil {
			return nil
		}
		return v.Contains
	}).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *string {
		if v == nil {
			return nil
		}
		return v.Exact
	}).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValue) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleToNotOperationHost struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleToNotOperationHostInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationHostArgs and AuthzPolicyHttpRuleToNotOperationHostOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationHostInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationHostArgs{...}
type AuthzPolicyHttpRuleToNotOperationHostInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationHostOutput() AuthzPolicyHttpRuleToNotOperationHostOutput
	ToAuthzPolicyHttpRuleToNotOperationHostOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationHostOutput
}

type AuthzPolicyHttpRuleToNotOperationHostArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleToNotOperationHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHost)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationHostArgs) ToAuthzPolicyHttpRuleToNotOperationHostOutput() AuthzPolicyHttpRuleToNotOperationHostOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHostOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationHostArgs) ToAuthzPolicyHttpRuleToNotOperationHostOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHostOutput)
}

// AuthzPolicyHttpRuleToNotOperationHostArrayInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationHostArray and AuthzPolicyHttpRuleToNotOperationHostArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationHostArrayInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationHostArray{ AuthzPolicyHttpRuleToNotOperationHostArgs{...} }
type AuthzPolicyHttpRuleToNotOperationHostArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationHostArrayOutput() AuthzPolicyHttpRuleToNotOperationHostArrayOutput
	ToAuthzPolicyHttpRuleToNotOperationHostArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationHostArrayOutput
}

type AuthzPolicyHttpRuleToNotOperationHostArray []AuthzPolicyHttpRuleToNotOperationHostInput

func (AuthzPolicyHttpRuleToNotOperationHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToNotOperationHost)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationHostArray) ToAuthzPolicyHttpRuleToNotOperationHostArrayOutput() AuthzPolicyHttpRuleToNotOperationHostArrayOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationHostArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationHostArray) ToAuthzPolicyHttpRuleToNotOperationHostArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationHostArrayOutput)
}

type AuthzPolicyHttpRuleToNotOperationHostOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHost)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationHostOutput) ToAuthzPolicyHttpRuleToNotOperationHostOutput() AuthzPolicyHttpRuleToNotOperationHostOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHostOutput) ToAuthzPolicyHttpRuleToNotOperationHostOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHostOutput {
	return o
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleToNotOperationHostOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHost) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleToNotOperationHostOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHost) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleToNotOperationHostOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHost) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleToNotOperationHostOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHost) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleToNotOperationHostOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationHost) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleToNotOperationHostArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToNotOperationHost)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationHostArrayOutput) ToAuthzPolicyHttpRuleToNotOperationHostArrayOutput() AuthzPolicyHttpRuleToNotOperationHostArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHostArrayOutput) ToAuthzPolicyHttpRuleToNotOperationHostArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationHostArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationHostArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleToNotOperationHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleToNotOperationHost {
		return vs[0].([]AuthzPolicyHttpRuleToNotOperationHost)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleToNotOperationHostOutput)
}

type AuthzPolicyHttpRuleToNotOperationPath struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleToNotOperationPathInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationPathArgs and AuthzPolicyHttpRuleToNotOperationPathOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationPathInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationPathArgs{...}
type AuthzPolicyHttpRuleToNotOperationPathInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationPathOutput() AuthzPolicyHttpRuleToNotOperationPathOutput
	ToAuthzPolicyHttpRuleToNotOperationPathOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationPathOutput
}

type AuthzPolicyHttpRuleToNotOperationPathArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleToNotOperationPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationPath)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationPathArgs) ToAuthzPolicyHttpRuleToNotOperationPathOutput() AuthzPolicyHttpRuleToNotOperationPathOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationPathOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationPathArgs) ToAuthzPolicyHttpRuleToNotOperationPathOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationPathOutput)
}

// AuthzPolicyHttpRuleToNotOperationPathArrayInput is an input type that accepts AuthzPolicyHttpRuleToNotOperationPathArray and AuthzPolicyHttpRuleToNotOperationPathArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToNotOperationPathArrayInput` via:
//
//	AuthzPolicyHttpRuleToNotOperationPathArray{ AuthzPolicyHttpRuleToNotOperationPathArgs{...} }
type AuthzPolicyHttpRuleToNotOperationPathArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToNotOperationPathArrayOutput() AuthzPolicyHttpRuleToNotOperationPathArrayOutput
	ToAuthzPolicyHttpRuleToNotOperationPathArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleToNotOperationPathArrayOutput
}

type AuthzPolicyHttpRuleToNotOperationPathArray []AuthzPolicyHttpRuleToNotOperationPathInput

func (AuthzPolicyHttpRuleToNotOperationPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToNotOperationPath)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToNotOperationPathArray) ToAuthzPolicyHttpRuleToNotOperationPathArrayOutput() AuthzPolicyHttpRuleToNotOperationPathArrayOutput {
	return i.ToAuthzPolicyHttpRuleToNotOperationPathArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToNotOperationPathArray) ToAuthzPolicyHttpRuleToNotOperationPathArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToNotOperationPathArrayOutput)
}

type AuthzPolicyHttpRuleToNotOperationPathOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationPath)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationPathOutput) ToAuthzPolicyHttpRuleToNotOperationPathOutput() AuthzPolicyHttpRuleToNotOperationPathOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationPathOutput) ToAuthzPolicyHttpRuleToNotOperationPathOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationPathOutput {
	return o
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleToNotOperationPathOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationPath) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleToNotOperationPathOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationPath) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleToNotOperationPathOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationPath) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleToNotOperationPathOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationPath) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleToNotOperationPathOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToNotOperationPath) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleToNotOperationPathArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToNotOperationPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToNotOperationPath)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToNotOperationPathArrayOutput) ToAuthzPolicyHttpRuleToNotOperationPathArrayOutput() AuthzPolicyHttpRuleToNotOperationPathArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationPathArrayOutput) ToAuthzPolicyHttpRuleToNotOperationPathArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToNotOperationPathArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToNotOperationPathArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleToNotOperationPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleToNotOperationPath {
		return vs[0].([]AuthzPolicyHttpRuleToNotOperationPath)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleToNotOperationPathOutput)
}

type AuthzPolicyHttpRuleToOperation struct {
	// A list of headers to match against in http header.
	// Structure is documented below.
	HeaderSet *AuthzPolicyHttpRuleToOperationHeaderSet `pulumi:"headerSet"`
	// A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
	// Limited to 5 matches.
	// Structure is documented below.
	Hosts []AuthzPolicyHttpRuleToOperationHost `pulumi:"hosts"`
	// A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
	Methods []string `pulumi:"methods"`
	// A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
	// Limited to 5 matches.
	// Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
	// Structure is documented below.
	Paths []AuthzPolicyHttpRuleToOperationPath `pulumi:"paths"`
}

// AuthzPolicyHttpRuleToOperationInput is an input type that accepts AuthzPolicyHttpRuleToOperationArgs and AuthzPolicyHttpRuleToOperationOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationInput` via:
//
//	AuthzPolicyHttpRuleToOperationArgs{...}
type AuthzPolicyHttpRuleToOperationInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationOutput() AuthzPolicyHttpRuleToOperationOutput
	ToAuthzPolicyHttpRuleToOperationOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationOutput
}

type AuthzPolicyHttpRuleToOperationArgs struct {
	// A list of headers to match against in http header.
	// Structure is documented below.
	HeaderSet AuthzPolicyHttpRuleToOperationHeaderSetPtrInput `pulumi:"headerSet"`
	// A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
	// Limited to 5 matches.
	// Structure is documented below.
	Hosts AuthzPolicyHttpRuleToOperationHostArrayInput `pulumi:"hosts"`
	// A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
	Methods pulumi.StringArrayInput `pulumi:"methods"`
	// A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
	// Limited to 5 matches.
	// Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
	// Structure is documented below.
	Paths AuthzPolicyHttpRuleToOperationPathArrayInput `pulumi:"paths"`
}

func (AuthzPolicyHttpRuleToOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperation)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationArgs) ToAuthzPolicyHttpRuleToOperationOutput() AuthzPolicyHttpRuleToOperationOutput {
	return i.ToAuthzPolicyHttpRuleToOperationOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationArgs) ToAuthzPolicyHttpRuleToOperationOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationOutput)
}

// AuthzPolicyHttpRuleToOperationArrayInput is an input type that accepts AuthzPolicyHttpRuleToOperationArray and AuthzPolicyHttpRuleToOperationArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationArrayInput` via:
//
//	AuthzPolicyHttpRuleToOperationArray{ AuthzPolicyHttpRuleToOperationArgs{...} }
type AuthzPolicyHttpRuleToOperationArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationArrayOutput() AuthzPolicyHttpRuleToOperationArrayOutput
	ToAuthzPolicyHttpRuleToOperationArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationArrayOutput
}

type AuthzPolicyHttpRuleToOperationArray []AuthzPolicyHttpRuleToOperationInput

func (AuthzPolicyHttpRuleToOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToOperation)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationArray) ToAuthzPolicyHttpRuleToOperationArrayOutput() AuthzPolicyHttpRuleToOperationArrayOutput {
	return i.ToAuthzPolicyHttpRuleToOperationArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationArray) ToAuthzPolicyHttpRuleToOperationArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationArrayOutput)
}

type AuthzPolicyHttpRuleToOperationOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperation)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationOutput) ToAuthzPolicyHttpRuleToOperationOutput() AuthzPolicyHttpRuleToOperationOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationOutput) ToAuthzPolicyHttpRuleToOperationOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationOutput {
	return o
}

// A list of headers to match against in http header.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToOperationOutput) HeaderSet() AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperation) *AuthzPolicyHttpRuleToOperationHeaderSet { return v.HeaderSet }).(AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput)
}

// A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
// Limited to 5 matches.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToOperationOutput) Hosts() AuthzPolicyHttpRuleToOperationHostArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperation) []AuthzPolicyHttpRuleToOperationHost { return v.Hosts }).(AuthzPolicyHttpRuleToOperationHostArrayOutput)
}

// A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
func (o AuthzPolicyHttpRuleToOperationOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperation) []string { return v.Methods }).(pulumi.StringArrayOutput)
}

// A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
// Limited to 5 matches.
// Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToOperationOutput) Paths() AuthzPolicyHttpRuleToOperationPathArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperation) []AuthzPolicyHttpRuleToOperationPath { return v.Paths }).(AuthzPolicyHttpRuleToOperationPathArrayOutput)
}

type AuthzPolicyHttpRuleToOperationArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToOperation)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationArrayOutput) ToAuthzPolicyHttpRuleToOperationArrayOutput() AuthzPolicyHttpRuleToOperationArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationArrayOutput) ToAuthzPolicyHttpRuleToOperationArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleToOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleToOperation {
		return vs[0].([]AuthzPolicyHttpRuleToOperation)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleToOperationOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSet struct {
	// A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
	// Structure is documented below.
	Headers []AuthzPolicyHttpRuleToOperationHeaderSetHeader `pulumi:"headers"`
}

// AuthzPolicyHttpRuleToOperationHeaderSetInput is an input type that accepts AuthzPolicyHttpRuleToOperationHeaderSetArgs and AuthzPolicyHttpRuleToOperationHeaderSetOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationHeaderSetInput` via:
//
//	AuthzPolicyHttpRuleToOperationHeaderSetArgs{...}
type AuthzPolicyHttpRuleToOperationHeaderSetInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationHeaderSetOutput() AuthzPolicyHttpRuleToOperationHeaderSetOutput
	ToAuthzPolicyHttpRuleToOperationHeaderSetOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationHeaderSetOutput
}

type AuthzPolicyHttpRuleToOperationHeaderSetArgs struct {
	// A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
	// Structure is documented below.
	Headers AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayInput `pulumi:"headers"`
}

func (AuthzPolicyHttpRuleToOperationHeaderSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSet)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetOutput() AuthzPolicyHttpRuleToOperationHeaderSetOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHeaderSetOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHeaderSetOutput)
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHeaderSetOutput).ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleToOperationHeaderSetPtrInput is an input type that accepts AuthzPolicyHttpRuleToOperationHeaderSetArgs, AuthzPolicyHttpRuleToOperationHeaderSetPtr and AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationHeaderSetPtrInput` via:
//
//	        AuthzPolicyHttpRuleToOperationHeaderSetArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleToOperationHeaderSetPtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput
	ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput
}

type authzPolicyHttpRuleToOperationHeaderSetPtrType AuthzPolicyHttpRuleToOperationHeaderSetArgs

func AuthzPolicyHttpRuleToOperationHeaderSetPtr(v *AuthzPolicyHttpRuleToOperationHeaderSetArgs) AuthzPolicyHttpRuleToOperationHeaderSetPtrInput {
	return (*authzPolicyHttpRuleToOperationHeaderSetPtrType)(v)
}

func (*authzPolicyHttpRuleToOperationHeaderSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleToOperationHeaderSet)(nil)).Elem()
}

func (i *authzPolicyHttpRuleToOperationHeaderSetPtrType) ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleToOperationHeaderSetPtrType) ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSetOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationHeaderSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSet)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetOutput() AuthzPolicyHttpRuleToOperationHeaderSetOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return o.ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleToOperationHeaderSet) *AuthzPolicyHttpRuleToOperationHeaderSet {
		return &v
	}).(AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput)
}

// A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToOperationHeaderSetOutput) Headers() AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHeaderSet) []AuthzPolicyHttpRuleToOperationHeaderSetHeader {
		return v.Headers
	}).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleToOperationHeaderSet)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetPtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput) Elem() AuthzPolicyHttpRuleToOperationHeaderSetOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToOperationHeaderSet) AuthzPolicyHttpRuleToOperationHeaderSet {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleToOperationHeaderSet
		return ret
	}).(AuthzPolicyHttpRuleToOperationHeaderSetOutput)
}

// A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput) Headers() AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToOperationHeaderSet) []AuthzPolicyHttpRuleToOperationHeaderSetHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeader struct {
	// Specifies the name of the header in the request.
	Name *string `pulumi:"name"`
	// Specifies how the header match will be performed.
	// Structure is documented below.
	Value *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue `pulumi:"value"`
}

// AuthzPolicyHttpRuleToOperationHeaderSetHeaderInput is an input type that accepts AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs and AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationHeaderSetHeaderInput` via:
//
//	AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs{...}
type AuthzPolicyHttpRuleToOperationHeaderSetHeaderInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput
	ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs struct {
	// Specifies the name of the header in the request.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies how the header match will be performed.
	// Structure is documented below.
	Value AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrInput `pulumi:"value"`
}

func (AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetHeader)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput)
}

// AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayInput is an input type that accepts AuthzPolicyHttpRuleToOperationHeaderSetHeaderArray and AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayInput` via:
//
//	AuthzPolicyHttpRuleToOperationHeaderSetHeaderArray{ AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs{...} }
type AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput
	ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeaderArray []AuthzPolicyHttpRuleToOperationHeaderSetHeaderInput

func (AuthzPolicyHttpRuleToOperationHeaderSetHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToOperationHeaderSetHeader)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetHeaderArray) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetHeaderArray) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetHeader)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput {
	return o
}

// Specifies the name of the header in the request.
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHeaderSetHeader) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies how the header match will be performed.
// Structure is documented below.
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput) Value() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHeaderSetHeader) *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue {
		return v.Value
	}).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToOperationHeaderSetHeader)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleToOperationHeaderSetHeader {
		return vs[0].([]AuthzPolicyHttpRuleToOperationHeaderSetHeader)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueInput is an input type that accepts AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs and AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueInput` via:
//
//	AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs{...}
type AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput
	ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput)
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput).ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(ctx)
}

// AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrInput is an input type that accepts AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs, AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtr and AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrInput` via:
//
//	        AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput
	ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput
}

type authzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrType AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs

func AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtr(v *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrInput {
	return (*authzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrType)(v)
}

func (*authzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue)(nil)).Elem()
}

func (i *authzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrType) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(context.Background())
}

func (i *authzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrType) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return o.ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(context.Background())
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue {
		return &v
	}).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput)
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) ToAuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) Elem() AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue
		return ret
	}).(AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput)
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *string {
		if v == nil {
			return nil
		}
		return v.Contains
	}).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *string {
		if v == nil {
			return nil
		}
		return v.Exact
	}).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyHttpRuleToOperationHeaderSetHeaderValue) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleToOperationHost struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleToOperationHostInput is an input type that accepts AuthzPolicyHttpRuleToOperationHostArgs and AuthzPolicyHttpRuleToOperationHostOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationHostInput` via:
//
//	AuthzPolicyHttpRuleToOperationHostArgs{...}
type AuthzPolicyHttpRuleToOperationHostInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationHostOutput() AuthzPolicyHttpRuleToOperationHostOutput
	ToAuthzPolicyHttpRuleToOperationHostOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationHostOutput
}

type AuthzPolicyHttpRuleToOperationHostArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleToOperationHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHost)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationHostArgs) ToAuthzPolicyHttpRuleToOperationHostOutput() AuthzPolicyHttpRuleToOperationHostOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHostOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationHostArgs) ToAuthzPolicyHttpRuleToOperationHostOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHostOutput)
}

// AuthzPolicyHttpRuleToOperationHostArrayInput is an input type that accepts AuthzPolicyHttpRuleToOperationHostArray and AuthzPolicyHttpRuleToOperationHostArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationHostArrayInput` via:
//
//	AuthzPolicyHttpRuleToOperationHostArray{ AuthzPolicyHttpRuleToOperationHostArgs{...} }
type AuthzPolicyHttpRuleToOperationHostArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationHostArrayOutput() AuthzPolicyHttpRuleToOperationHostArrayOutput
	ToAuthzPolicyHttpRuleToOperationHostArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationHostArrayOutput
}

type AuthzPolicyHttpRuleToOperationHostArray []AuthzPolicyHttpRuleToOperationHostInput

func (AuthzPolicyHttpRuleToOperationHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToOperationHost)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationHostArray) ToAuthzPolicyHttpRuleToOperationHostArrayOutput() AuthzPolicyHttpRuleToOperationHostArrayOutput {
	return i.ToAuthzPolicyHttpRuleToOperationHostArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationHostArray) ToAuthzPolicyHttpRuleToOperationHostArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationHostArrayOutput)
}

type AuthzPolicyHttpRuleToOperationHostOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHost)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationHostOutput) ToAuthzPolicyHttpRuleToOperationHostOutput() AuthzPolicyHttpRuleToOperationHostOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHostOutput) ToAuthzPolicyHttpRuleToOperationHostOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHostOutput {
	return o
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleToOperationHostOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHost) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleToOperationHostOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHost) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleToOperationHostOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHost) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleToOperationHostOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHost) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleToOperationHostOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationHost) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleToOperationHostArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToOperationHost)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationHostArrayOutput) ToAuthzPolicyHttpRuleToOperationHostArrayOutput() AuthzPolicyHttpRuleToOperationHostArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHostArrayOutput) ToAuthzPolicyHttpRuleToOperationHostArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationHostArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationHostArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleToOperationHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleToOperationHost {
		return vs[0].([]AuthzPolicyHttpRuleToOperationHost)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleToOperationHostOutput)
}

type AuthzPolicyHttpRuleToOperationPath struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains *string `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact *string `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix *string `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix *string `pulumi:"suffix"`
}

// AuthzPolicyHttpRuleToOperationPathInput is an input type that accepts AuthzPolicyHttpRuleToOperationPathArgs and AuthzPolicyHttpRuleToOperationPathOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationPathInput` via:
//
//	AuthzPolicyHttpRuleToOperationPathArgs{...}
type AuthzPolicyHttpRuleToOperationPathInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationPathOutput() AuthzPolicyHttpRuleToOperationPathOutput
	ToAuthzPolicyHttpRuleToOperationPathOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationPathOutput
}

type AuthzPolicyHttpRuleToOperationPathArgs struct {
	// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc.def
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	// The input string must match exactly the string specified here.
	// Examples:
	// * abc only matches the value abc.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value abc.xyz
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
	// Examples:
	// * abc matches the value xyz.abc
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (AuthzPolicyHttpRuleToOperationPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationPath)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationPathArgs) ToAuthzPolicyHttpRuleToOperationPathOutput() AuthzPolicyHttpRuleToOperationPathOutput {
	return i.ToAuthzPolicyHttpRuleToOperationPathOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationPathArgs) ToAuthzPolicyHttpRuleToOperationPathOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationPathOutput)
}

// AuthzPolicyHttpRuleToOperationPathArrayInput is an input type that accepts AuthzPolicyHttpRuleToOperationPathArray and AuthzPolicyHttpRuleToOperationPathArrayOutput values.
// You can construct a concrete instance of `AuthzPolicyHttpRuleToOperationPathArrayInput` via:
//
//	AuthzPolicyHttpRuleToOperationPathArray{ AuthzPolicyHttpRuleToOperationPathArgs{...} }
type AuthzPolicyHttpRuleToOperationPathArrayInput interface {
	pulumi.Input

	ToAuthzPolicyHttpRuleToOperationPathArrayOutput() AuthzPolicyHttpRuleToOperationPathArrayOutput
	ToAuthzPolicyHttpRuleToOperationPathArrayOutputWithContext(context.Context) AuthzPolicyHttpRuleToOperationPathArrayOutput
}

type AuthzPolicyHttpRuleToOperationPathArray []AuthzPolicyHttpRuleToOperationPathInput

func (AuthzPolicyHttpRuleToOperationPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToOperationPath)(nil)).Elem()
}

func (i AuthzPolicyHttpRuleToOperationPathArray) ToAuthzPolicyHttpRuleToOperationPathArrayOutput() AuthzPolicyHttpRuleToOperationPathArrayOutput {
	return i.ToAuthzPolicyHttpRuleToOperationPathArrayOutputWithContext(context.Background())
}

func (i AuthzPolicyHttpRuleToOperationPathArray) ToAuthzPolicyHttpRuleToOperationPathArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyHttpRuleToOperationPathArrayOutput)
}

type AuthzPolicyHttpRuleToOperationPathOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyHttpRuleToOperationPath)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationPathOutput) ToAuthzPolicyHttpRuleToOperationPathOutput() AuthzPolicyHttpRuleToOperationPathOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationPathOutput) ToAuthzPolicyHttpRuleToOperationPathOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationPathOutput {
	return o
}

// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc.def
func (o AuthzPolicyHttpRuleToOperationPathOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationPath) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

// The input string must match exactly the string specified here.
// Examples:
// * abc only matches the value abc.
func (o AuthzPolicyHttpRuleToOperationPathOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationPath) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
func (o AuthzPolicyHttpRuleToOperationPathOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationPath) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value abc.xyz
func (o AuthzPolicyHttpRuleToOperationPathOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationPath) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
// Examples:
// * abc matches the value xyz.abc
func (o AuthzPolicyHttpRuleToOperationPathOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthzPolicyHttpRuleToOperationPath) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type AuthzPolicyHttpRuleToOperationPathArrayOutput struct{ *pulumi.OutputState }

func (AuthzPolicyHttpRuleToOperationPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthzPolicyHttpRuleToOperationPath)(nil)).Elem()
}

func (o AuthzPolicyHttpRuleToOperationPathArrayOutput) ToAuthzPolicyHttpRuleToOperationPathArrayOutput() AuthzPolicyHttpRuleToOperationPathArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationPathArrayOutput) ToAuthzPolicyHttpRuleToOperationPathArrayOutputWithContext(ctx context.Context) AuthzPolicyHttpRuleToOperationPathArrayOutput {
	return o
}

func (o AuthzPolicyHttpRuleToOperationPathArrayOutput) Index(i pulumi.IntInput) AuthzPolicyHttpRuleToOperationPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthzPolicyHttpRuleToOperationPath {
		return vs[0].([]AuthzPolicyHttpRuleToOperationPath)[vs[1].(int)]
	}).(AuthzPolicyHttpRuleToOperationPathOutput)
}

type AuthzPolicyTarget struct {
	// All gateways and forwarding rules referenced by this policy and extensions must share the same load balancing scheme.
	// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
	LoadBalancingScheme string `pulumi:"loadBalancingScheme"`
	// A list of references to the Forwarding Rules on which this policy will be applied.
	//
	// ***
	Resources []string `pulumi:"resources"`
}

// AuthzPolicyTargetInput is an input type that accepts AuthzPolicyTargetArgs and AuthzPolicyTargetOutput values.
// You can construct a concrete instance of `AuthzPolicyTargetInput` via:
//
//	AuthzPolicyTargetArgs{...}
type AuthzPolicyTargetInput interface {
	pulumi.Input

	ToAuthzPolicyTargetOutput() AuthzPolicyTargetOutput
	ToAuthzPolicyTargetOutputWithContext(context.Context) AuthzPolicyTargetOutput
}

type AuthzPolicyTargetArgs struct {
	// All gateways and forwarding rules referenced by this policy and extensions must share the same load balancing scheme.
	// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
	// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
	LoadBalancingScheme pulumi.StringInput `pulumi:"loadBalancingScheme"`
	// A list of references to the Forwarding Rules on which this policy will be applied.
	//
	// ***
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (AuthzPolicyTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyTarget)(nil)).Elem()
}

func (i AuthzPolicyTargetArgs) ToAuthzPolicyTargetOutput() AuthzPolicyTargetOutput {
	return i.ToAuthzPolicyTargetOutputWithContext(context.Background())
}

func (i AuthzPolicyTargetArgs) ToAuthzPolicyTargetOutputWithContext(ctx context.Context) AuthzPolicyTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyTargetOutput)
}

func (i AuthzPolicyTargetArgs) ToAuthzPolicyTargetPtrOutput() AuthzPolicyTargetPtrOutput {
	return i.ToAuthzPolicyTargetPtrOutputWithContext(context.Background())
}

func (i AuthzPolicyTargetArgs) ToAuthzPolicyTargetPtrOutputWithContext(ctx context.Context) AuthzPolicyTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyTargetOutput).ToAuthzPolicyTargetPtrOutputWithContext(ctx)
}

// AuthzPolicyTargetPtrInput is an input type that accepts AuthzPolicyTargetArgs, AuthzPolicyTargetPtr and AuthzPolicyTargetPtrOutput values.
// You can construct a concrete instance of `AuthzPolicyTargetPtrInput` via:
//
//	        AuthzPolicyTargetArgs{...}
//
//	or:
//
//	        nil
type AuthzPolicyTargetPtrInput interface {
	pulumi.Input

	ToAuthzPolicyTargetPtrOutput() AuthzPolicyTargetPtrOutput
	ToAuthzPolicyTargetPtrOutputWithContext(context.Context) AuthzPolicyTargetPtrOutput
}

type authzPolicyTargetPtrType AuthzPolicyTargetArgs

func AuthzPolicyTargetPtr(v *AuthzPolicyTargetArgs) AuthzPolicyTargetPtrInput {
	return (*authzPolicyTargetPtrType)(v)
}

func (*authzPolicyTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyTarget)(nil)).Elem()
}

func (i *authzPolicyTargetPtrType) ToAuthzPolicyTargetPtrOutput() AuthzPolicyTargetPtrOutput {
	return i.ToAuthzPolicyTargetPtrOutputWithContext(context.Background())
}

func (i *authzPolicyTargetPtrType) ToAuthzPolicyTargetPtrOutputWithContext(ctx context.Context) AuthzPolicyTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthzPolicyTargetPtrOutput)
}

type AuthzPolicyTargetOutput struct{ *pulumi.OutputState }

func (AuthzPolicyTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthzPolicyTarget)(nil)).Elem()
}

func (o AuthzPolicyTargetOutput) ToAuthzPolicyTargetOutput() AuthzPolicyTargetOutput {
	return o
}

func (o AuthzPolicyTargetOutput) ToAuthzPolicyTargetOutputWithContext(ctx context.Context) AuthzPolicyTargetOutput {
	return o
}

func (o AuthzPolicyTargetOutput) ToAuthzPolicyTargetPtrOutput() AuthzPolicyTargetPtrOutput {
	return o.ToAuthzPolicyTargetPtrOutputWithContext(context.Background())
}

func (o AuthzPolicyTargetOutput) ToAuthzPolicyTargetPtrOutputWithContext(ctx context.Context) AuthzPolicyTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthzPolicyTarget) *AuthzPolicyTarget {
		return &v
	}).(AuthzPolicyTargetPtrOutput)
}

// All gateways and forwarding rules referenced by this policy and extensions must share the same load balancing scheme.
// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
func (o AuthzPolicyTargetOutput) LoadBalancingScheme() pulumi.StringOutput {
	return o.ApplyT(func(v AuthzPolicyTarget) string { return v.LoadBalancingScheme }).(pulumi.StringOutput)
}

// A list of references to the Forwarding Rules on which this policy will be applied.
//
// ***
func (o AuthzPolicyTargetOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthzPolicyTarget) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type AuthzPolicyTargetPtrOutput struct{ *pulumi.OutputState }

func (AuthzPolicyTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthzPolicyTarget)(nil)).Elem()
}

func (o AuthzPolicyTargetPtrOutput) ToAuthzPolicyTargetPtrOutput() AuthzPolicyTargetPtrOutput {
	return o
}

func (o AuthzPolicyTargetPtrOutput) ToAuthzPolicyTargetPtrOutputWithContext(ctx context.Context) AuthzPolicyTargetPtrOutput {
	return o
}

func (o AuthzPolicyTargetPtrOutput) Elem() AuthzPolicyTargetOutput {
	return o.ApplyT(func(v *AuthzPolicyTarget) AuthzPolicyTarget {
		if v != nil {
			return *v
		}
		var ret AuthzPolicyTarget
		return ret
	}).(AuthzPolicyTargetOutput)
}

// All gateways and forwarding rules referenced by this policy and extensions must share the same load balancing scheme.
// For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
// Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
func (o AuthzPolicyTargetPtrOutput) LoadBalancingScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthzPolicyTarget) *string {
		if v == nil {
			return nil
		}
		return &v.LoadBalancingScheme
	}).(pulumi.StringPtrOutput)
}

// A list of references to the Forwarding Rules on which this policy will be applied.
//
// ***
func (o AuthzPolicyTargetPtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthzPolicyTarget) []string {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

type ClientTlsPolicyClientCertificate struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	// Structure is documented below.
	CertificateProviderInstance *ClientTlsPolicyClientCertificateCertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint *ClientTlsPolicyClientCertificateGrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ClientTlsPolicyClientCertificateInput is an input type that accepts ClientTlsPolicyClientCertificateArgs and ClientTlsPolicyClientCertificateOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateInput` via:
//
//	ClientTlsPolicyClientCertificateArgs{...}
type ClientTlsPolicyClientCertificateInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateOutput() ClientTlsPolicyClientCertificateOutput
	ToClientTlsPolicyClientCertificateOutputWithContext(context.Context) ClientTlsPolicyClientCertificateOutput
}

type ClientTlsPolicyClientCertificateArgs struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	// Structure is documented below.
	CertificateProviderInstance ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint ClientTlsPolicyClientCertificateGrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ClientTlsPolicyClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificate)(nil)).Elem()
}

func (i ClientTlsPolicyClientCertificateArgs) ToClientTlsPolicyClientCertificateOutput() ClientTlsPolicyClientCertificateOutput {
	return i.ToClientTlsPolicyClientCertificateOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateArgs) ToClientTlsPolicyClientCertificateOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateOutput)
}

func (i ClientTlsPolicyClientCertificateArgs) ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput {
	return i.ToClientTlsPolicyClientCertificatePtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateArgs) ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateOutput).ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx)
}

// ClientTlsPolicyClientCertificatePtrInput is an input type that accepts ClientTlsPolicyClientCertificateArgs, ClientTlsPolicyClientCertificatePtr and ClientTlsPolicyClientCertificatePtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificatePtrInput` via:
//
//	        ClientTlsPolicyClientCertificateArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyClientCertificatePtrInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput
	ToClientTlsPolicyClientCertificatePtrOutputWithContext(context.Context) ClientTlsPolicyClientCertificatePtrOutput
}

type clientTlsPolicyClientCertificatePtrType ClientTlsPolicyClientCertificateArgs

func ClientTlsPolicyClientCertificatePtr(v *ClientTlsPolicyClientCertificateArgs) ClientTlsPolicyClientCertificatePtrInput {
	return (*clientTlsPolicyClientCertificatePtrType)(v)
}

func (*clientTlsPolicyClientCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificate)(nil)).Elem()
}

func (i *clientTlsPolicyClientCertificatePtrType) ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput {
	return i.ToClientTlsPolicyClientCertificatePtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyClientCertificatePtrType) ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificatePtrOutput)
}

type ClientTlsPolicyClientCertificateOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificate)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateOutput) ToClientTlsPolicyClientCertificateOutput() ClientTlsPolicyClientCertificateOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateOutput) ToClientTlsPolicyClientCertificateOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateOutput) ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput {
	return o.ToClientTlsPolicyClientCertificatePtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyClientCertificateOutput) ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificate {
		return &v
	}).(ClientTlsPolicyClientCertificatePtrOutput)
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
// Structure is documented below.
func (o ClientTlsPolicyClientCertificateOutput) CertificateProviderInstance() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificateCertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ClientTlsPolicyClientCertificateOutput) GrpcEndpoint() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o.ApplyT(func(v ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificateGrpcEndpoint {
		return v.GrpcEndpoint
	}).(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput)
}

type ClientTlsPolicyClientCertificatePtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificate)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificatePtrOutput) ToClientTlsPolicyClientCertificatePtrOutput() ClientTlsPolicyClientCertificatePtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificatePtrOutput) ToClientTlsPolicyClientCertificatePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificatePtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificatePtrOutput) Elem() ClientTlsPolicyClientCertificateOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificate) ClientTlsPolicyClientCertificate {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyClientCertificate
		return ret
	}).(ClientTlsPolicyClientCertificateOutput)
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
// Structure is documented below.
func (o ClientTlsPolicyClientCertificatePtrOutput) CertificateProviderInstance() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificateCertificateProviderInstance {
		if v == nil {
			return nil
		}
		return v.CertificateProviderInstance
	}).(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ClientTlsPolicyClientCertificatePtrOutput) GrpcEndpoint() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificate) *ClientTlsPolicyClientCertificateGrpcEndpoint {
		if v == nil {
			return nil
		}
		return v.GrpcEndpoint
	}).(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput)
}

type ClientTlsPolicyClientCertificateCertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// ClientTlsPolicyClientCertificateCertificateProviderInstanceInput is an input type that accepts ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs and ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateCertificateProviderInstanceInput` via:
//
//	ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs{...}
type ClientTlsPolicyClientCertificateCertificateProviderInstanceInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutput() ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput
	ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput
}

type ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificateCertificateProviderInstance)(nil)).Elem()
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutput() ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return i.ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput)
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return i.ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput).ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx)
}

// ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput is an input type that accepts ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs, ClientTlsPolicyClientCertificateCertificateProviderInstancePtr and ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput` via:
//
//	        ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput
	ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput
}

type clientTlsPolicyClientCertificateCertificateProviderInstancePtrType ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs

func ClientTlsPolicyClientCertificateCertificateProviderInstancePtr(v *ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput {
	return (*clientTlsPolicyClientCertificateCertificateProviderInstancePtrType)(v)
}

func (*clientTlsPolicyClientCertificateCertificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificateCertificateProviderInstance)(nil)).Elem()
}

func (i *clientTlsPolicyClientCertificateCertificateProviderInstancePtrType) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return i.ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyClientCertificateCertificateProviderInstancePtrType) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput)
}

type ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificateCertificateProviderInstance)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutput() ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstanceOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o.ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyClientCertificateCertificateProviderInstance) *ClientTlsPolicyClientCertificateCertificateProviderInstance {
		return &v
	}).(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v ClientTlsPolicyClientCertificateCertificateProviderInstance) string { return v.PluginInstance }).(pulumi.StringOutput)
}

type ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificateCertificateProviderInstance)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput() ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) ToClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) Elem() ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificateCertificateProviderInstance) ClientTlsPolicyClientCertificateCertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyClientCertificateCertificateProviderInstance
		return ret
	}).(ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificateCertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

type ClientTlsPolicyClientCertificateGrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// ClientTlsPolicyClientCertificateGrpcEndpointInput is an input type that accepts ClientTlsPolicyClientCertificateGrpcEndpointArgs and ClientTlsPolicyClientCertificateGrpcEndpointOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateGrpcEndpointInput` via:
//
//	ClientTlsPolicyClientCertificateGrpcEndpointArgs{...}
type ClientTlsPolicyClientCertificateGrpcEndpointInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateGrpcEndpointOutput() ClientTlsPolicyClientCertificateGrpcEndpointOutput
	ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(context.Context) ClientTlsPolicyClientCertificateGrpcEndpointOutput
}

type ClientTlsPolicyClientCertificateGrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (ClientTlsPolicyClientCertificateGrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificateGrpcEndpoint)(nil)).Elem()
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToClientTlsPolicyClientCertificateGrpcEndpointOutput() ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return i.ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateGrpcEndpointOutput)
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return i.ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyClientCertificateGrpcEndpointArgs) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateGrpcEndpointOutput).ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx)
}

// ClientTlsPolicyClientCertificateGrpcEndpointPtrInput is an input type that accepts ClientTlsPolicyClientCertificateGrpcEndpointArgs, ClientTlsPolicyClientCertificateGrpcEndpointPtr and ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyClientCertificateGrpcEndpointPtrInput` via:
//
//	        ClientTlsPolicyClientCertificateGrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyClientCertificateGrpcEndpointPtrInput interface {
	pulumi.Input

	ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput
	ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput
}

type clientTlsPolicyClientCertificateGrpcEndpointPtrType ClientTlsPolicyClientCertificateGrpcEndpointArgs

func ClientTlsPolicyClientCertificateGrpcEndpointPtr(v *ClientTlsPolicyClientCertificateGrpcEndpointArgs) ClientTlsPolicyClientCertificateGrpcEndpointPtrInput {
	return (*clientTlsPolicyClientCertificateGrpcEndpointPtrType)(v)
}

func (*clientTlsPolicyClientCertificateGrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificateGrpcEndpoint)(nil)).Elem()
}

func (i *clientTlsPolicyClientCertificateGrpcEndpointPtrType) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return i.ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyClientCertificateGrpcEndpointPtrType) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput)
}

type ClientTlsPolicyClientCertificateGrpcEndpointOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateGrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyClientCertificateGrpcEndpoint)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToClientTlsPolicyClientCertificateGrpcEndpointOutput() ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToClientTlsPolicyClientCertificateGrpcEndpointOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o.ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyClientCertificateGrpcEndpoint) *ClientTlsPolicyClientCertificateGrpcEndpoint {
		return &v
	}).(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ClientTlsPolicyClientCertificateGrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v ClientTlsPolicyClientCertificateGrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyClientCertificateGrpcEndpoint)(nil)).Elem()
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutput() ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) ToClientTlsPolicyClientCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput {
	return o
}

func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) Elem() ClientTlsPolicyClientCertificateGrpcEndpointOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificateGrpcEndpoint) ClientTlsPolicyClientCertificateGrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyClientCertificateGrpcEndpoint
		return ret
	}).(ClientTlsPolicyClientCertificateGrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyClientCertificateGrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

type ClientTlsPolicyServerValidationCa struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	// Structure is documented below.
	CertificateProviderInstance *ClientTlsPolicyServerValidationCaCertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint *ClientTlsPolicyServerValidationCaGrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ClientTlsPolicyServerValidationCaInput is an input type that accepts ClientTlsPolicyServerValidationCaArgs and ClientTlsPolicyServerValidationCaOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaInput` via:
//
//	ClientTlsPolicyServerValidationCaArgs{...}
type ClientTlsPolicyServerValidationCaInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaOutput() ClientTlsPolicyServerValidationCaOutput
	ToClientTlsPolicyServerValidationCaOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaOutput
}

type ClientTlsPolicyServerValidationCaArgs struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	// Structure is documented below.
	CertificateProviderInstance ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ClientTlsPolicyServerValidationCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCa)(nil)).Elem()
}

func (i ClientTlsPolicyServerValidationCaArgs) ToClientTlsPolicyServerValidationCaOutput() ClientTlsPolicyServerValidationCaOutput {
	return i.ToClientTlsPolicyServerValidationCaOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaArgs) ToClientTlsPolicyServerValidationCaOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaOutput)
}

// ClientTlsPolicyServerValidationCaArrayInput is an input type that accepts ClientTlsPolicyServerValidationCaArray and ClientTlsPolicyServerValidationCaArrayOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaArrayInput` via:
//
//	ClientTlsPolicyServerValidationCaArray{ ClientTlsPolicyServerValidationCaArgs{...} }
type ClientTlsPolicyServerValidationCaArrayInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaArrayOutput() ClientTlsPolicyServerValidationCaArrayOutput
	ToClientTlsPolicyServerValidationCaArrayOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaArrayOutput
}

type ClientTlsPolicyServerValidationCaArray []ClientTlsPolicyServerValidationCaInput

func (ClientTlsPolicyServerValidationCaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientTlsPolicyServerValidationCa)(nil)).Elem()
}

func (i ClientTlsPolicyServerValidationCaArray) ToClientTlsPolicyServerValidationCaArrayOutput() ClientTlsPolicyServerValidationCaArrayOutput {
	return i.ToClientTlsPolicyServerValidationCaArrayOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaArray) ToClientTlsPolicyServerValidationCaArrayOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaArrayOutput)
}

type ClientTlsPolicyServerValidationCaOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCa)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaOutput) ToClientTlsPolicyServerValidationCaOutput() ClientTlsPolicyServerValidationCaOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaOutput) ToClientTlsPolicyServerValidationCaOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaOutput {
	return o
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
// Structure is documented below.
func (o ClientTlsPolicyServerValidationCaOutput) CertificateProviderInstance() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ClientTlsPolicyServerValidationCa) *ClientTlsPolicyServerValidationCaCertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ClientTlsPolicyServerValidationCaOutput) GrpcEndpoint() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o.ApplyT(func(v ClientTlsPolicyServerValidationCa) *ClientTlsPolicyServerValidationCaGrpcEndpoint {
		return v.GrpcEndpoint
	}).(ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput)
}

type ClientTlsPolicyServerValidationCaArrayOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientTlsPolicyServerValidationCa)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaArrayOutput) ToClientTlsPolicyServerValidationCaArrayOutput() ClientTlsPolicyServerValidationCaArrayOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaArrayOutput) ToClientTlsPolicyServerValidationCaArrayOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaArrayOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaArrayOutput) Index(i pulumi.IntInput) ClientTlsPolicyServerValidationCaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientTlsPolicyServerValidationCa {
		return vs[0].([]ClientTlsPolicyServerValidationCa)[vs[1].(int)]
	}).(ClientTlsPolicyServerValidationCaOutput)
}

type ClientTlsPolicyServerValidationCaCertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// ClientTlsPolicyServerValidationCaCertificateProviderInstanceInput is an input type that accepts ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs and ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaCertificateProviderInstanceInput` via:
//
//	ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs{...}
type ClientTlsPolicyServerValidationCaCertificateProviderInstanceInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput
	ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput
}

type ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return i.ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput)
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return i.ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput).ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx)
}

// ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput is an input type that accepts ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs, ClientTlsPolicyServerValidationCaCertificateProviderInstancePtr and ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput` via:
//
//	        ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput
	ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput
}

type clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs

func ClientTlsPolicyServerValidationCaCertificateProviderInstancePtr(v *ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput {
	return (*clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType)(v)
}

func (*clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyServerValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (i *clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return i.ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyServerValidationCaCertificateProviderInstancePtrType) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput)
}

type ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstanceOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o.ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyServerValidationCaCertificateProviderInstance) *ClientTlsPolicyServerValidationCaCertificateProviderInstance {
		return &v
	}).(ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v ClientTlsPolicyServerValidationCaCertificateProviderInstance) string { return v.PluginInstance }).(pulumi.StringOutput)
}

type ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyServerValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput() ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) ToClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) Elem() ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput {
	return o.ApplyT(func(v *ClientTlsPolicyServerValidationCaCertificateProviderInstance) ClientTlsPolicyServerValidationCaCertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyServerValidationCaCertificateProviderInstance
		return ret
	}).(ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyServerValidationCaCertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

type ClientTlsPolicyServerValidationCaGrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// ClientTlsPolicyServerValidationCaGrpcEndpointInput is an input type that accepts ClientTlsPolicyServerValidationCaGrpcEndpointArgs and ClientTlsPolicyServerValidationCaGrpcEndpointOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaGrpcEndpointInput` via:
//
//	ClientTlsPolicyServerValidationCaGrpcEndpointArgs{...}
type ClientTlsPolicyServerValidationCaGrpcEndpointInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaGrpcEndpointOutput() ClientTlsPolicyServerValidationCaGrpcEndpointOutput
	ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointOutput
}

type ClientTlsPolicyServerValidationCaGrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCaGrpcEndpoint)(nil)).Elem()
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToClientTlsPolicyServerValidationCaGrpcEndpointOutput() ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return i.ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaGrpcEndpointOutput)
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return i.ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaGrpcEndpointOutput).ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx)
}

// ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput is an input type that accepts ClientTlsPolicyServerValidationCaGrpcEndpointArgs, ClientTlsPolicyServerValidationCaGrpcEndpointPtr and ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput values.
// You can construct a concrete instance of `ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput` via:
//
//	        ClientTlsPolicyServerValidationCaGrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput interface {
	pulumi.Input

	ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput
	ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput
}

type clientTlsPolicyServerValidationCaGrpcEndpointPtrType ClientTlsPolicyServerValidationCaGrpcEndpointArgs

func ClientTlsPolicyServerValidationCaGrpcEndpointPtr(v *ClientTlsPolicyServerValidationCaGrpcEndpointArgs) ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput {
	return (*clientTlsPolicyServerValidationCaGrpcEndpointPtrType)(v)
}

func (*clientTlsPolicyServerValidationCaGrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyServerValidationCaGrpcEndpoint)(nil)).Elem()
}

func (i *clientTlsPolicyServerValidationCaGrpcEndpointPtrType) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return i.ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *clientTlsPolicyServerValidationCaGrpcEndpointPtrType) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput)
}

type ClientTlsPolicyServerValidationCaGrpcEndpointOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientTlsPolicyServerValidationCaGrpcEndpoint)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointOutput() ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o.ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientTlsPolicyServerValidationCaGrpcEndpoint) *ClientTlsPolicyServerValidationCaGrpcEndpoint {
		return &v
	}).(ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ClientTlsPolicyServerValidationCaGrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v ClientTlsPolicyServerValidationCaGrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientTlsPolicyServerValidationCaGrpcEndpoint)(nil)).Elem()
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput() ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) ToClientTlsPolicyServerValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput {
	return o
}

func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) Elem() ClientTlsPolicyServerValidationCaGrpcEndpointOutput {
	return o.ApplyT(func(v *ClientTlsPolicyServerValidationCaGrpcEndpoint) ClientTlsPolicyServerValidationCaGrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret ClientTlsPolicyServerValidationCaGrpcEndpoint
		return ret
	}).(ClientTlsPolicyServerValidationCaGrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientTlsPolicyServerValidationCaGrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

type InterceptDeploymentGroupConnectedEndpointGroup struct {
	// (Output)
	// The connected endpoint group's resource name, for example:
	// `projects/123456789/locations/global/interceptEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	Name *string `pulumi:"name"`
}

// InterceptDeploymentGroupConnectedEndpointGroupInput is an input type that accepts InterceptDeploymentGroupConnectedEndpointGroupArgs and InterceptDeploymentGroupConnectedEndpointGroupOutput values.
// You can construct a concrete instance of `InterceptDeploymentGroupConnectedEndpointGroupInput` via:
//
//	InterceptDeploymentGroupConnectedEndpointGroupArgs{...}
type InterceptDeploymentGroupConnectedEndpointGroupInput interface {
	pulumi.Input

	ToInterceptDeploymentGroupConnectedEndpointGroupOutput() InterceptDeploymentGroupConnectedEndpointGroupOutput
	ToInterceptDeploymentGroupConnectedEndpointGroupOutputWithContext(context.Context) InterceptDeploymentGroupConnectedEndpointGroupOutput
}

type InterceptDeploymentGroupConnectedEndpointGroupArgs struct {
	// (Output)
	// The connected endpoint group's resource name, for example:
	// `projects/123456789/locations/global/interceptEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (InterceptDeploymentGroupConnectedEndpointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptDeploymentGroupConnectedEndpointGroup)(nil)).Elem()
}

func (i InterceptDeploymentGroupConnectedEndpointGroupArgs) ToInterceptDeploymentGroupConnectedEndpointGroupOutput() InterceptDeploymentGroupConnectedEndpointGroupOutput {
	return i.ToInterceptDeploymentGroupConnectedEndpointGroupOutputWithContext(context.Background())
}

func (i InterceptDeploymentGroupConnectedEndpointGroupArgs) ToInterceptDeploymentGroupConnectedEndpointGroupOutputWithContext(ctx context.Context) InterceptDeploymentGroupConnectedEndpointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptDeploymentGroupConnectedEndpointGroupOutput)
}

// InterceptDeploymentGroupConnectedEndpointGroupArrayInput is an input type that accepts InterceptDeploymentGroupConnectedEndpointGroupArray and InterceptDeploymentGroupConnectedEndpointGroupArrayOutput values.
// You can construct a concrete instance of `InterceptDeploymentGroupConnectedEndpointGroupArrayInput` via:
//
//	InterceptDeploymentGroupConnectedEndpointGroupArray{ InterceptDeploymentGroupConnectedEndpointGroupArgs{...} }
type InterceptDeploymentGroupConnectedEndpointGroupArrayInput interface {
	pulumi.Input

	ToInterceptDeploymentGroupConnectedEndpointGroupArrayOutput() InterceptDeploymentGroupConnectedEndpointGroupArrayOutput
	ToInterceptDeploymentGroupConnectedEndpointGroupArrayOutputWithContext(context.Context) InterceptDeploymentGroupConnectedEndpointGroupArrayOutput
}

type InterceptDeploymentGroupConnectedEndpointGroupArray []InterceptDeploymentGroupConnectedEndpointGroupInput

func (InterceptDeploymentGroupConnectedEndpointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptDeploymentGroupConnectedEndpointGroup)(nil)).Elem()
}

func (i InterceptDeploymentGroupConnectedEndpointGroupArray) ToInterceptDeploymentGroupConnectedEndpointGroupArrayOutput() InterceptDeploymentGroupConnectedEndpointGroupArrayOutput {
	return i.ToInterceptDeploymentGroupConnectedEndpointGroupArrayOutputWithContext(context.Background())
}

func (i InterceptDeploymentGroupConnectedEndpointGroupArray) ToInterceptDeploymentGroupConnectedEndpointGroupArrayOutputWithContext(ctx context.Context) InterceptDeploymentGroupConnectedEndpointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptDeploymentGroupConnectedEndpointGroupArrayOutput)
}

type InterceptDeploymentGroupConnectedEndpointGroupOutput struct{ *pulumi.OutputState }

func (InterceptDeploymentGroupConnectedEndpointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptDeploymentGroupConnectedEndpointGroup)(nil)).Elem()
}

func (o InterceptDeploymentGroupConnectedEndpointGroupOutput) ToInterceptDeploymentGroupConnectedEndpointGroupOutput() InterceptDeploymentGroupConnectedEndpointGroupOutput {
	return o
}

func (o InterceptDeploymentGroupConnectedEndpointGroupOutput) ToInterceptDeploymentGroupConnectedEndpointGroupOutputWithContext(ctx context.Context) InterceptDeploymentGroupConnectedEndpointGroupOutput {
	return o
}

// (Output)
// The connected endpoint group's resource name, for example:
// `projects/123456789/locations/global/interceptEndpointGroups/my-eg`.
// See https://google.aip.dev/124.
func (o InterceptDeploymentGroupConnectedEndpointGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptDeploymentGroupConnectedEndpointGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type InterceptDeploymentGroupConnectedEndpointGroupArrayOutput struct{ *pulumi.OutputState }

func (InterceptDeploymentGroupConnectedEndpointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptDeploymentGroupConnectedEndpointGroup)(nil)).Elem()
}

func (o InterceptDeploymentGroupConnectedEndpointGroupArrayOutput) ToInterceptDeploymentGroupConnectedEndpointGroupArrayOutput() InterceptDeploymentGroupConnectedEndpointGroupArrayOutput {
	return o
}

func (o InterceptDeploymentGroupConnectedEndpointGroupArrayOutput) ToInterceptDeploymentGroupConnectedEndpointGroupArrayOutputWithContext(ctx context.Context) InterceptDeploymentGroupConnectedEndpointGroupArrayOutput {
	return o
}

func (o InterceptDeploymentGroupConnectedEndpointGroupArrayOutput) Index(i pulumi.IntInput) InterceptDeploymentGroupConnectedEndpointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterceptDeploymentGroupConnectedEndpointGroup {
		return vs[0].([]InterceptDeploymentGroupConnectedEndpointGroup)[vs[1].(int)]
	}).(InterceptDeploymentGroupConnectedEndpointGroupOutput)
}

type InterceptDeploymentGroupLocation struct {
	// The cloud location of the deployment group, currently restricted to `global`.
	Location *string `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State *string `pulumi:"state"`
}

// InterceptDeploymentGroupLocationInput is an input type that accepts InterceptDeploymentGroupLocationArgs and InterceptDeploymentGroupLocationOutput values.
// You can construct a concrete instance of `InterceptDeploymentGroupLocationInput` via:
//
//	InterceptDeploymentGroupLocationArgs{...}
type InterceptDeploymentGroupLocationInput interface {
	pulumi.Input

	ToInterceptDeploymentGroupLocationOutput() InterceptDeploymentGroupLocationOutput
	ToInterceptDeploymentGroupLocationOutputWithContext(context.Context) InterceptDeploymentGroupLocationOutput
}

type InterceptDeploymentGroupLocationArgs struct {
	// The cloud location of the deployment group, currently restricted to `global`.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (InterceptDeploymentGroupLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptDeploymentGroupLocation)(nil)).Elem()
}

func (i InterceptDeploymentGroupLocationArgs) ToInterceptDeploymentGroupLocationOutput() InterceptDeploymentGroupLocationOutput {
	return i.ToInterceptDeploymentGroupLocationOutputWithContext(context.Background())
}

func (i InterceptDeploymentGroupLocationArgs) ToInterceptDeploymentGroupLocationOutputWithContext(ctx context.Context) InterceptDeploymentGroupLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptDeploymentGroupLocationOutput)
}

// InterceptDeploymentGroupLocationArrayInput is an input type that accepts InterceptDeploymentGroupLocationArray and InterceptDeploymentGroupLocationArrayOutput values.
// You can construct a concrete instance of `InterceptDeploymentGroupLocationArrayInput` via:
//
//	InterceptDeploymentGroupLocationArray{ InterceptDeploymentGroupLocationArgs{...} }
type InterceptDeploymentGroupLocationArrayInput interface {
	pulumi.Input

	ToInterceptDeploymentGroupLocationArrayOutput() InterceptDeploymentGroupLocationArrayOutput
	ToInterceptDeploymentGroupLocationArrayOutputWithContext(context.Context) InterceptDeploymentGroupLocationArrayOutput
}

type InterceptDeploymentGroupLocationArray []InterceptDeploymentGroupLocationInput

func (InterceptDeploymentGroupLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptDeploymentGroupLocation)(nil)).Elem()
}

func (i InterceptDeploymentGroupLocationArray) ToInterceptDeploymentGroupLocationArrayOutput() InterceptDeploymentGroupLocationArrayOutput {
	return i.ToInterceptDeploymentGroupLocationArrayOutputWithContext(context.Background())
}

func (i InterceptDeploymentGroupLocationArray) ToInterceptDeploymentGroupLocationArrayOutputWithContext(ctx context.Context) InterceptDeploymentGroupLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptDeploymentGroupLocationArrayOutput)
}

type InterceptDeploymentGroupLocationOutput struct{ *pulumi.OutputState }

func (InterceptDeploymentGroupLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptDeploymentGroupLocation)(nil)).Elem()
}

func (o InterceptDeploymentGroupLocationOutput) ToInterceptDeploymentGroupLocationOutput() InterceptDeploymentGroupLocationOutput {
	return o
}

func (o InterceptDeploymentGroupLocationOutput) ToInterceptDeploymentGroupLocationOutputWithContext(ctx context.Context) InterceptDeploymentGroupLocationOutput {
	return o
}

// The cloud location of the deployment group, currently restricted to `global`.
func (o InterceptDeploymentGroupLocationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptDeploymentGroupLocation) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// (Output)
// The current state of the association in this location.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// OUT_OF_SYNC
func (o InterceptDeploymentGroupLocationOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptDeploymentGroupLocation) *string { return v.State }).(pulumi.StringPtrOutput)
}

type InterceptDeploymentGroupLocationArrayOutput struct{ *pulumi.OutputState }

func (InterceptDeploymentGroupLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptDeploymentGroupLocation)(nil)).Elem()
}

func (o InterceptDeploymentGroupLocationArrayOutput) ToInterceptDeploymentGroupLocationArrayOutput() InterceptDeploymentGroupLocationArrayOutput {
	return o
}

func (o InterceptDeploymentGroupLocationArrayOutput) ToInterceptDeploymentGroupLocationArrayOutputWithContext(ctx context.Context) InterceptDeploymentGroupLocationArrayOutput {
	return o
}

func (o InterceptDeploymentGroupLocationArrayOutput) Index(i pulumi.IntInput) InterceptDeploymentGroupLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterceptDeploymentGroupLocation {
		return vs[0].([]InterceptDeploymentGroupLocation)[vs[1].(int)]
	}).(InterceptDeploymentGroupLocationOutput)
}

type InterceptEndpointGroupAssociationType struct {
	// (Output)
	// The connected deployment group's resource name, for example:
	// `projects/123456789/locations/global/interceptDeploymentGroups/my-dg`.
	// See https://google.aip.dev/124.
	Name *string `pulumi:"name"`
	// (Output)
	// The associated network, for example:
	// projects/123456789/global/networks/my-network.
	// See https://google.aip.dev/124.
	Network *string `pulumi:"network"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State *string `pulumi:"state"`
}

// InterceptEndpointGroupAssociationTypeInput is an input type that accepts InterceptEndpointGroupAssociationTypeArgs and InterceptEndpointGroupAssociationTypeOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupAssociationTypeInput` via:
//
//	InterceptEndpointGroupAssociationTypeArgs{...}
type InterceptEndpointGroupAssociationTypeInput interface {
	pulumi.Input

	ToInterceptEndpointGroupAssociationTypeOutput() InterceptEndpointGroupAssociationTypeOutput
	ToInterceptEndpointGroupAssociationTypeOutputWithContext(context.Context) InterceptEndpointGroupAssociationTypeOutput
}

type InterceptEndpointGroupAssociationTypeArgs struct {
	// (Output)
	// The connected deployment group's resource name, for example:
	// `projects/123456789/locations/global/interceptDeploymentGroups/my-dg`.
	// See https://google.aip.dev/124.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Output)
	// The associated network, for example:
	// projects/123456789/global/networks/my-network.
	// See https://google.aip.dev/124.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (InterceptEndpointGroupAssociationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupAssociationType)(nil)).Elem()
}

func (i InterceptEndpointGroupAssociationTypeArgs) ToInterceptEndpointGroupAssociationTypeOutput() InterceptEndpointGroupAssociationTypeOutput {
	return i.ToInterceptEndpointGroupAssociationTypeOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupAssociationTypeArgs) ToInterceptEndpointGroupAssociationTypeOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupAssociationTypeOutput)
}

// InterceptEndpointGroupAssociationTypeArrayInput is an input type that accepts InterceptEndpointGroupAssociationTypeArray and InterceptEndpointGroupAssociationTypeArrayOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupAssociationTypeArrayInput` via:
//
//	InterceptEndpointGroupAssociationTypeArray{ InterceptEndpointGroupAssociationTypeArgs{...} }
type InterceptEndpointGroupAssociationTypeArrayInput interface {
	pulumi.Input

	ToInterceptEndpointGroupAssociationTypeArrayOutput() InterceptEndpointGroupAssociationTypeArrayOutput
	ToInterceptEndpointGroupAssociationTypeArrayOutputWithContext(context.Context) InterceptEndpointGroupAssociationTypeArrayOutput
}

type InterceptEndpointGroupAssociationTypeArray []InterceptEndpointGroupAssociationTypeInput

func (InterceptEndpointGroupAssociationTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupAssociationType)(nil)).Elem()
}

func (i InterceptEndpointGroupAssociationTypeArray) ToInterceptEndpointGroupAssociationTypeArrayOutput() InterceptEndpointGroupAssociationTypeArrayOutput {
	return i.ToInterceptEndpointGroupAssociationTypeArrayOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupAssociationTypeArray) ToInterceptEndpointGroupAssociationTypeArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupAssociationTypeArrayOutput)
}

type InterceptEndpointGroupAssociationTypeOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupAssociationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupAssociationType)(nil)).Elem()
}

func (o InterceptEndpointGroupAssociationTypeOutput) ToInterceptEndpointGroupAssociationTypeOutput() InterceptEndpointGroupAssociationTypeOutput {
	return o
}

func (o InterceptEndpointGroupAssociationTypeOutput) ToInterceptEndpointGroupAssociationTypeOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationTypeOutput {
	return o
}

// (Output)
// The connected deployment group's resource name, for example:
// `projects/123456789/locations/global/interceptDeploymentGroups/my-dg`.
// See https://google.aip.dev/124.
func (o InterceptEndpointGroupAssociationTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupAssociationType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Output)
// The associated network, for example:
// projects/123456789/global/networks/my-network.
// See https://google.aip.dev/124.
func (o InterceptEndpointGroupAssociationTypeOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupAssociationType) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// (Output)
// The current state of the association in this location.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// OUT_OF_SYNC
func (o InterceptEndpointGroupAssociationTypeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupAssociationType) *string { return v.State }).(pulumi.StringPtrOutput)
}

type InterceptEndpointGroupAssociationTypeArrayOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupAssociationTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupAssociationType)(nil)).Elem()
}

func (o InterceptEndpointGroupAssociationTypeArrayOutput) ToInterceptEndpointGroupAssociationTypeArrayOutput() InterceptEndpointGroupAssociationTypeArrayOutput {
	return o
}

func (o InterceptEndpointGroupAssociationTypeArrayOutput) ToInterceptEndpointGroupAssociationTypeArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationTypeArrayOutput {
	return o
}

func (o InterceptEndpointGroupAssociationTypeArrayOutput) Index(i pulumi.IntInput) InterceptEndpointGroupAssociationTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterceptEndpointGroupAssociationType {
		return vs[0].([]InterceptEndpointGroupAssociationType)[vs[1].(int)]
	}).(InterceptEndpointGroupAssociationTypeOutput)
}

type InterceptEndpointGroupAssociationLocation struct {
	// The cloud location of the association, currently restricted to `global`.
	//
	// ***
	Location *string `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State *string `pulumi:"state"`
}

// InterceptEndpointGroupAssociationLocationInput is an input type that accepts InterceptEndpointGroupAssociationLocationArgs and InterceptEndpointGroupAssociationLocationOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupAssociationLocationInput` via:
//
//	InterceptEndpointGroupAssociationLocationArgs{...}
type InterceptEndpointGroupAssociationLocationInput interface {
	pulumi.Input

	ToInterceptEndpointGroupAssociationLocationOutput() InterceptEndpointGroupAssociationLocationOutput
	ToInterceptEndpointGroupAssociationLocationOutputWithContext(context.Context) InterceptEndpointGroupAssociationLocationOutput
}

type InterceptEndpointGroupAssociationLocationArgs struct {
	// The cloud location of the association, currently restricted to `global`.
	//
	// ***
	Location pulumi.StringPtrInput `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (InterceptEndpointGroupAssociationLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupAssociationLocation)(nil)).Elem()
}

func (i InterceptEndpointGroupAssociationLocationArgs) ToInterceptEndpointGroupAssociationLocationOutput() InterceptEndpointGroupAssociationLocationOutput {
	return i.ToInterceptEndpointGroupAssociationLocationOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupAssociationLocationArgs) ToInterceptEndpointGroupAssociationLocationOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupAssociationLocationOutput)
}

// InterceptEndpointGroupAssociationLocationArrayInput is an input type that accepts InterceptEndpointGroupAssociationLocationArray and InterceptEndpointGroupAssociationLocationArrayOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupAssociationLocationArrayInput` via:
//
//	InterceptEndpointGroupAssociationLocationArray{ InterceptEndpointGroupAssociationLocationArgs{...} }
type InterceptEndpointGroupAssociationLocationArrayInput interface {
	pulumi.Input

	ToInterceptEndpointGroupAssociationLocationArrayOutput() InterceptEndpointGroupAssociationLocationArrayOutput
	ToInterceptEndpointGroupAssociationLocationArrayOutputWithContext(context.Context) InterceptEndpointGroupAssociationLocationArrayOutput
}

type InterceptEndpointGroupAssociationLocationArray []InterceptEndpointGroupAssociationLocationInput

func (InterceptEndpointGroupAssociationLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupAssociationLocation)(nil)).Elem()
}

func (i InterceptEndpointGroupAssociationLocationArray) ToInterceptEndpointGroupAssociationLocationArrayOutput() InterceptEndpointGroupAssociationLocationArrayOutput {
	return i.ToInterceptEndpointGroupAssociationLocationArrayOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupAssociationLocationArray) ToInterceptEndpointGroupAssociationLocationArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupAssociationLocationArrayOutput)
}

type InterceptEndpointGroupAssociationLocationOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupAssociationLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupAssociationLocation)(nil)).Elem()
}

func (o InterceptEndpointGroupAssociationLocationOutput) ToInterceptEndpointGroupAssociationLocationOutput() InterceptEndpointGroupAssociationLocationOutput {
	return o
}

func (o InterceptEndpointGroupAssociationLocationOutput) ToInterceptEndpointGroupAssociationLocationOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationLocationOutput {
	return o
}

// The cloud location of the association, currently restricted to `global`.
//
// ***
func (o InterceptEndpointGroupAssociationLocationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupAssociationLocation) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// (Output)
// The current state of the association in this location.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// OUT_OF_SYNC
func (o InterceptEndpointGroupAssociationLocationOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupAssociationLocation) *string { return v.State }).(pulumi.StringPtrOutput)
}

type InterceptEndpointGroupAssociationLocationArrayOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupAssociationLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupAssociationLocation)(nil)).Elem()
}

func (o InterceptEndpointGroupAssociationLocationArrayOutput) ToInterceptEndpointGroupAssociationLocationArrayOutput() InterceptEndpointGroupAssociationLocationArrayOutput {
	return o
}

func (o InterceptEndpointGroupAssociationLocationArrayOutput) ToInterceptEndpointGroupAssociationLocationArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationLocationArrayOutput {
	return o
}

func (o InterceptEndpointGroupAssociationLocationArrayOutput) Index(i pulumi.IntInput) InterceptEndpointGroupAssociationLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterceptEndpointGroupAssociationLocation {
		return vs[0].([]InterceptEndpointGroupAssociationLocation)[vs[1].(int)]
	}).(InterceptEndpointGroupAssociationLocationOutput)
}

type InterceptEndpointGroupAssociationLocationsDetail struct {
	// The cloud location of the association, currently restricted to `global`.
	//
	// ***
	Location *string `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State *string `pulumi:"state"`
}

// InterceptEndpointGroupAssociationLocationsDetailInput is an input type that accepts InterceptEndpointGroupAssociationLocationsDetailArgs and InterceptEndpointGroupAssociationLocationsDetailOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupAssociationLocationsDetailInput` via:
//
//	InterceptEndpointGroupAssociationLocationsDetailArgs{...}
type InterceptEndpointGroupAssociationLocationsDetailInput interface {
	pulumi.Input

	ToInterceptEndpointGroupAssociationLocationsDetailOutput() InterceptEndpointGroupAssociationLocationsDetailOutput
	ToInterceptEndpointGroupAssociationLocationsDetailOutputWithContext(context.Context) InterceptEndpointGroupAssociationLocationsDetailOutput
}

type InterceptEndpointGroupAssociationLocationsDetailArgs struct {
	// The cloud location of the association, currently restricted to `global`.
	//
	// ***
	Location pulumi.StringPtrInput `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (InterceptEndpointGroupAssociationLocationsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupAssociationLocationsDetail)(nil)).Elem()
}

func (i InterceptEndpointGroupAssociationLocationsDetailArgs) ToInterceptEndpointGroupAssociationLocationsDetailOutput() InterceptEndpointGroupAssociationLocationsDetailOutput {
	return i.ToInterceptEndpointGroupAssociationLocationsDetailOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupAssociationLocationsDetailArgs) ToInterceptEndpointGroupAssociationLocationsDetailOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationLocationsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupAssociationLocationsDetailOutput)
}

// InterceptEndpointGroupAssociationLocationsDetailArrayInput is an input type that accepts InterceptEndpointGroupAssociationLocationsDetailArray and InterceptEndpointGroupAssociationLocationsDetailArrayOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupAssociationLocationsDetailArrayInput` via:
//
//	InterceptEndpointGroupAssociationLocationsDetailArray{ InterceptEndpointGroupAssociationLocationsDetailArgs{...} }
type InterceptEndpointGroupAssociationLocationsDetailArrayInput interface {
	pulumi.Input

	ToInterceptEndpointGroupAssociationLocationsDetailArrayOutput() InterceptEndpointGroupAssociationLocationsDetailArrayOutput
	ToInterceptEndpointGroupAssociationLocationsDetailArrayOutputWithContext(context.Context) InterceptEndpointGroupAssociationLocationsDetailArrayOutput
}

type InterceptEndpointGroupAssociationLocationsDetailArray []InterceptEndpointGroupAssociationLocationsDetailInput

func (InterceptEndpointGroupAssociationLocationsDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupAssociationLocationsDetail)(nil)).Elem()
}

func (i InterceptEndpointGroupAssociationLocationsDetailArray) ToInterceptEndpointGroupAssociationLocationsDetailArrayOutput() InterceptEndpointGroupAssociationLocationsDetailArrayOutput {
	return i.ToInterceptEndpointGroupAssociationLocationsDetailArrayOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupAssociationLocationsDetailArray) ToInterceptEndpointGroupAssociationLocationsDetailArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationLocationsDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupAssociationLocationsDetailArrayOutput)
}

type InterceptEndpointGroupAssociationLocationsDetailOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupAssociationLocationsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupAssociationLocationsDetail)(nil)).Elem()
}

func (o InterceptEndpointGroupAssociationLocationsDetailOutput) ToInterceptEndpointGroupAssociationLocationsDetailOutput() InterceptEndpointGroupAssociationLocationsDetailOutput {
	return o
}

func (o InterceptEndpointGroupAssociationLocationsDetailOutput) ToInterceptEndpointGroupAssociationLocationsDetailOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationLocationsDetailOutput {
	return o
}

// The cloud location of the association, currently restricted to `global`.
//
// ***
func (o InterceptEndpointGroupAssociationLocationsDetailOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupAssociationLocationsDetail) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// (Output)
// The current state of the association in this location.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// OUT_OF_SYNC
func (o InterceptEndpointGroupAssociationLocationsDetailOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupAssociationLocationsDetail) *string { return v.State }).(pulumi.StringPtrOutput)
}

type InterceptEndpointGroupAssociationLocationsDetailArrayOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupAssociationLocationsDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupAssociationLocationsDetail)(nil)).Elem()
}

func (o InterceptEndpointGroupAssociationLocationsDetailArrayOutput) ToInterceptEndpointGroupAssociationLocationsDetailArrayOutput() InterceptEndpointGroupAssociationLocationsDetailArrayOutput {
	return o
}

func (o InterceptEndpointGroupAssociationLocationsDetailArrayOutput) ToInterceptEndpointGroupAssociationLocationsDetailArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupAssociationLocationsDetailArrayOutput {
	return o
}

func (o InterceptEndpointGroupAssociationLocationsDetailArrayOutput) Index(i pulumi.IntInput) InterceptEndpointGroupAssociationLocationsDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterceptEndpointGroupAssociationLocationsDetail {
		return vs[0].([]InterceptEndpointGroupAssociationLocationsDetail)[vs[1].(int)]
	}).(InterceptEndpointGroupAssociationLocationsDetailOutput)
}

type InterceptEndpointGroupConnectedDeploymentGroup struct {
	// (Output)
	// The list of locations where the deployment group is present.
	// Structure is documented below.
	Locations []InterceptEndpointGroupConnectedDeploymentGroupLocation `pulumi:"locations"`
	// (Output)
	// The connected deployment group's resource name, for example:
	// `projects/123456789/locations/global/interceptDeploymentGroups/my-dg`.
	// See https://google.aip.dev/124.
	Name *string `pulumi:"name"`
}

// InterceptEndpointGroupConnectedDeploymentGroupInput is an input type that accepts InterceptEndpointGroupConnectedDeploymentGroupArgs and InterceptEndpointGroupConnectedDeploymentGroupOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupConnectedDeploymentGroupInput` via:
//
//	InterceptEndpointGroupConnectedDeploymentGroupArgs{...}
type InterceptEndpointGroupConnectedDeploymentGroupInput interface {
	pulumi.Input

	ToInterceptEndpointGroupConnectedDeploymentGroupOutput() InterceptEndpointGroupConnectedDeploymentGroupOutput
	ToInterceptEndpointGroupConnectedDeploymentGroupOutputWithContext(context.Context) InterceptEndpointGroupConnectedDeploymentGroupOutput
}

type InterceptEndpointGroupConnectedDeploymentGroupArgs struct {
	// (Output)
	// The list of locations where the deployment group is present.
	// Structure is documented below.
	Locations InterceptEndpointGroupConnectedDeploymentGroupLocationArrayInput `pulumi:"locations"`
	// (Output)
	// The connected deployment group's resource name, for example:
	// `projects/123456789/locations/global/interceptDeploymentGroups/my-dg`.
	// See https://google.aip.dev/124.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (InterceptEndpointGroupConnectedDeploymentGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupConnectedDeploymentGroup)(nil)).Elem()
}

func (i InterceptEndpointGroupConnectedDeploymentGroupArgs) ToInterceptEndpointGroupConnectedDeploymentGroupOutput() InterceptEndpointGroupConnectedDeploymentGroupOutput {
	return i.ToInterceptEndpointGroupConnectedDeploymentGroupOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupConnectedDeploymentGroupArgs) ToInterceptEndpointGroupConnectedDeploymentGroupOutputWithContext(ctx context.Context) InterceptEndpointGroupConnectedDeploymentGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupConnectedDeploymentGroupOutput)
}

// InterceptEndpointGroupConnectedDeploymentGroupArrayInput is an input type that accepts InterceptEndpointGroupConnectedDeploymentGroupArray and InterceptEndpointGroupConnectedDeploymentGroupArrayOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupConnectedDeploymentGroupArrayInput` via:
//
//	InterceptEndpointGroupConnectedDeploymentGroupArray{ InterceptEndpointGroupConnectedDeploymentGroupArgs{...} }
type InterceptEndpointGroupConnectedDeploymentGroupArrayInput interface {
	pulumi.Input

	ToInterceptEndpointGroupConnectedDeploymentGroupArrayOutput() InterceptEndpointGroupConnectedDeploymentGroupArrayOutput
	ToInterceptEndpointGroupConnectedDeploymentGroupArrayOutputWithContext(context.Context) InterceptEndpointGroupConnectedDeploymentGroupArrayOutput
}

type InterceptEndpointGroupConnectedDeploymentGroupArray []InterceptEndpointGroupConnectedDeploymentGroupInput

func (InterceptEndpointGroupConnectedDeploymentGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupConnectedDeploymentGroup)(nil)).Elem()
}

func (i InterceptEndpointGroupConnectedDeploymentGroupArray) ToInterceptEndpointGroupConnectedDeploymentGroupArrayOutput() InterceptEndpointGroupConnectedDeploymentGroupArrayOutput {
	return i.ToInterceptEndpointGroupConnectedDeploymentGroupArrayOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupConnectedDeploymentGroupArray) ToInterceptEndpointGroupConnectedDeploymentGroupArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupConnectedDeploymentGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupConnectedDeploymentGroupArrayOutput)
}

type InterceptEndpointGroupConnectedDeploymentGroupOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupConnectedDeploymentGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupConnectedDeploymentGroup)(nil)).Elem()
}

func (o InterceptEndpointGroupConnectedDeploymentGroupOutput) ToInterceptEndpointGroupConnectedDeploymentGroupOutput() InterceptEndpointGroupConnectedDeploymentGroupOutput {
	return o
}

func (o InterceptEndpointGroupConnectedDeploymentGroupOutput) ToInterceptEndpointGroupConnectedDeploymentGroupOutputWithContext(ctx context.Context) InterceptEndpointGroupConnectedDeploymentGroupOutput {
	return o
}

// (Output)
// The list of locations where the deployment group is present.
// Structure is documented below.
func (o InterceptEndpointGroupConnectedDeploymentGroupOutput) Locations() InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput {
	return o.ApplyT(func(v InterceptEndpointGroupConnectedDeploymentGroup) []InterceptEndpointGroupConnectedDeploymentGroupLocation {
		return v.Locations
	}).(InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput)
}

// (Output)
// The connected deployment group's resource name, for example:
// `projects/123456789/locations/global/interceptDeploymentGroups/my-dg`.
// See https://google.aip.dev/124.
func (o InterceptEndpointGroupConnectedDeploymentGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupConnectedDeploymentGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type InterceptEndpointGroupConnectedDeploymentGroupArrayOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupConnectedDeploymentGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupConnectedDeploymentGroup)(nil)).Elem()
}

func (o InterceptEndpointGroupConnectedDeploymentGroupArrayOutput) ToInterceptEndpointGroupConnectedDeploymentGroupArrayOutput() InterceptEndpointGroupConnectedDeploymentGroupArrayOutput {
	return o
}

func (o InterceptEndpointGroupConnectedDeploymentGroupArrayOutput) ToInterceptEndpointGroupConnectedDeploymentGroupArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupConnectedDeploymentGroupArrayOutput {
	return o
}

func (o InterceptEndpointGroupConnectedDeploymentGroupArrayOutput) Index(i pulumi.IntInput) InterceptEndpointGroupConnectedDeploymentGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterceptEndpointGroupConnectedDeploymentGroup {
		return vs[0].([]InterceptEndpointGroupConnectedDeploymentGroup)[vs[1].(int)]
	}).(InterceptEndpointGroupConnectedDeploymentGroupOutput)
}

type InterceptEndpointGroupConnectedDeploymentGroupLocation struct {
	// The cloud location of the endpoint group, currently restricted to `global`.
	Location *string `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State *string `pulumi:"state"`
}

// InterceptEndpointGroupConnectedDeploymentGroupLocationInput is an input type that accepts InterceptEndpointGroupConnectedDeploymentGroupLocationArgs and InterceptEndpointGroupConnectedDeploymentGroupLocationOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupConnectedDeploymentGroupLocationInput` via:
//
//	InterceptEndpointGroupConnectedDeploymentGroupLocationArgs{...}
type InterceptEndpointGroupConnectedDeploymentGroupLocationInput interface {
	pulumi.Input

	ToInterceptEndpointGroupConnectedDeploymentGroupLocationOutput() InterceptEndpointGroupConnectedDeploymentGroupLocationOutput
	ToInterceptEndpointGroupConnectedDeploymentGroupLocationOutputWithContext(context.Context) InterceptEndpointGroupConnectedDeploymentGroupLocationOutput
}

type InterceptEndpointGroupConnectedDeploymentGroupLocationArgs struct {
	// The cloud location of the endpoint group, currently restricted to `global`.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (InterceptEndpointGroupConnectedDeploymentGroupLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupConnectedDeploymentGroupLocation)(nil)).Elem()
}

func (i InterceptEndpointGroupConnectedDeploymentGroupLocationArgs) ToInterceptEndpointGroupConnectedDeploymentGroupLocationOutput() InterceptEndpointGroupConnectedDeploymentGroupLocationOutput {
	return i.ToInterceptEndpointGroupConnectedDeploymentGroupLocationOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupConnectedDeploymentGroupLocationArgs) ToInterceptEndpointGroupConnectedDeploymentGroupLocationOutputWithContext(ctx context.Context) InterceptEndpointGroupConnectedDeploymentGroupLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupConnectedDeploymentGroupLocationOutput)
}

// InterceptEndpointGroupConnectedDeploymentGroupLocationArrayInput is an input type that accepts InterceptEndpointGroupConnectedDeploymentGroupLocationArray and InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput values.
// You can construct a concrete instance of `InterceptEndpointGroupConnectedDeploymentGroupLocationArrayInput` via:
//
//	InterceptEndpointGroupConnectedDeploymentGroupLocationArray{ InterceptEndpointGroupConnectedDeploymentGroupLocationArgs{...} }
type InterceptEndpointGroupConnectedDeploymentGroupLocationArrayInput interface {
	pulumi.Input

	ToInterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput() InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput
	ToInterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutputWithContext(context.Context) InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput
}

type InterceptEndpointGroupConnectedDeploymentGroupLocationArray []InterceptEndpointGroupConnectedDeploymentGroupLocationInput

func (InterceptEndpointGroupConnectedDeploymentGroupLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupConnectedDeploymentGroupLocation)(nil)).Elem()
}

func (i InterceptEndpointGroupConnectedDeploymentGroupLocationArray) ToInterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput() InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput {
	return i.ToInterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutputWithContext(context.Background())
}

func (i InterceptEndpointGroupConnectedDeploymentGroupLocationArray) ToInterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput)
}

type InterceptEndpointGroupConnectedDeploymentGroupLocationOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupConnectedDeploymentGroupLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterceptEndpointGroupConnectedDeploymentGroupLocation)(nil)).Elem()
}

func (o InterceptEndpointGroupConnectedDeploymentGroupLocationOutput) ToInterceptEndpointGroupConnectedDeploymentGroupLocationOutput() InterceptEndpointGroupConnectedDeploymentGroupLocationOutput {
	return o
}

func (o InterceptEndpointGroupConnectedDeploymentGroupLocationOutput) ToInterceptEndpointGroupConnectedDeploymentGroupLocationOutputWithContext(ctx context.Context) InterceptEndpointGroupConnectedDeploymentGroupLocationOutput {
	return o
}

// The cloud location of the endpoint group, currently restricted to `global`.
func (o InterceptEndpointGroupConnectedDeploymentGroupLocationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupConnectedDeploymentGroupLocation) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// (Output)
// The current state of the association in this location.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// OUT_OF_SYNC
func (o InterceptEndpointGroupConnectedDeploymentGroupLocationOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterceptEndpointGroupConnectedDeploymentGroupLocation) *string { return v.State }).(pulumi.StringPtrOutput)
}

type InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput struct{ *pulumi.OutputState }

func (InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterceptEndpointGroupConnectedDeploymentGroupLocation)(nil)).Elem()
}

func (o InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput) ToInterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput() InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput {
	return o
}

func (o InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput) ToInterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutputWithContext(ctx context.Context) InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput {
	return o
}

func (o InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput) Index(i pulumi.IntInput) InterceptEndpointGroupConnectedDeploymentGroupLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterceptEndpointGroupConnectedDeploymentGroupLocation {
		return vs[0].([]InterceptEndpointGroupConnectedDeploymentGroupLocation)[vs[1].(int)]
	}).(InterceptEndpointGroupConnectedDeploymentGroupLocationOutput)
}

type MirroringDeploymentGroupConnectedEndpointGroup struct {
	// (Output)
	// The connected endpoint group's resource name, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	Name *string `pulumi:"name"`
}

// MirroringDeploymentGroupConnectedEndpointGroupInput is an input type that accepts MirroringDeploymentGroupConnectedEndpointGroupArgs and MirroringDeploymentGroupConnectedEndpointGroupOutput values.
// You can construct a concrete instance of `MirroringDeploymentGroupConnectedEndpointGroupInput` via:
//
//	MirroringDeploymentGroupConnectedEndpointGroupArgs{...}
type MirroringDeploymentGroupConnectedEndpointGroupInput interface {
	pulumi.Input

	ToMirroringDeploymentGroupConnectedEndpointGroupOutput() MirroringDeploymentGroupConnectedEndpointGroupOutput
	ToMirroringDeploymentGroupConnectedEndpointGroupOutputWithContext(context.Context) MirroringDeploymentGroupConnectedEndpointGroupOutput
}

type MirroringDeploymentGroupConnectedEndpointGroupArgs struct {
	// (Output)
	// The connected endpoint group's resource name, for example:
	// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
	// See https://google.aip.dev/124.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MirroringDeploymentGroupConnectedEndpointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MirroringDeploymentGroupConnectedEndpointGroup)(nil)).Elem()
}

func (i MirroringDeploymentGroupConnectedEndpointGroupArgs) ToMirroringDeploymentGroupConnectedEndpointGroupOutput() MirroringDeploymentGroupConnectedEndpointGroupOutput {
	return i.ToMirroringDeploymentGroupConnectedEndpointGroupOutputWithContext(context.Background())
}

func (i MirroringDeploymentGroupConnectedEndpointGroupArgs) ToMirroringDeploymentGroupConnectedEndpointGroupOutputWithContext(ctx context.Context) MirroringDeploymentGroupConnectedEndpointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringDeploymentGroupConnectedEndpointGroupOutput)
}

// MirroringDeploymentGroupConnectedEndpointGroupArrayInput is an input type that accepts MirroringDeploymentGroupConnectedEndpointGroupArray and MirroringDeploymentGroupConnectedEndpointGroupArrayOutput values.
// You can construct a concrete instance of `MirroringDeploymentGroupConnectedEndpointGroupArrayInput` via:
//
//	MirroringDeploymentGroupConnectedEndpointGroupArray{ MirroringDeploymentGroupConnectedEndpointGroupArgs{...} }
type MirroringDeploymentGroupConnectedEndpointGroupArrayInput interface {
	pulumi.Input

	ToMirroringDeploymentGroupConnectedEndpointGroupArrayOutput() MirroringDeploymentGroupConnectedEndpointGroupArrayOutput
	ToMirroringDeploymentGroupConnectedEndpointGroupArrayOutputWithContext(context.Context) MirroringDeploymentGroupConnectedEndpointGroupArrayOutput
}

type MirroringDeploymentGroupConnectedEndpointGroupArray []MirroringDeploymentGroupConnectedEndpointGroupInput

func (MirroringDeploymentGroupConnectedEndpointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MirroringDeploymentGroupConnectedEndpointGroup)(nil)).Elem()
}

func (i MirroringDeploymentGroupConnectedEndpointGroupArray) ToMirroringDeploymentGroupConnectedEndpointGroupArrayOutput() MirroringDeploymentGroupConnectedEndpointGroupArrayOutput {
	return i.ToMirroringDeploymentGroupConnectedEndpointGroupArrayOutputWithContext(context.Background())
}

func (i MirroringDeploymentGroupConnectedEndpointGroupArray) ToMirroringDeploymentGroupConnectedEndpointGroupArrayOutputWithContext(ctx context.Context) MirroringDeploymentGroupConnectedEndpointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringDeploymentGroupConnectedEndpointGroupArrayOutput)
}

type MirroringDeploymentGroupConnectedEndpointGroupOutput struct{ *pulumi.OutputState }

func (MirroringDeploymentGroupConnectedEndpointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MirroringDeploymentGroupConnectedEndpointGroup)(nil)).Elem()
}

func (o MirroringDeploymentGroupConnectedEndpointGroupOutput) ToMirroringDeploymentGroupConnectedEndpointGroupOutput() MirroringDeploymentGroupConnectedEndpointGroupOutput {
	return o
}

func (o MirroringDeploymentGroupConnectedEndpointGroupOutput) ToMirroringDeploymentGroupConnectedEndpointGroupOutputWithContext(ctx context.Context) MirroringDeploymentGroupConnectedEndpointGroupOutput {
	return o
}

// (Output)
// The connected endpoint group's resource name, for example:
// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
// See https://google.aip.dev/124.
func (o MirroringDeploymentGroupConnectedEndpointGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MirroringDeploymentGroupConnectedEndpointGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MirroringDeploymentGroupConnectedEndpointGroupArrayOutput struct{ *pulumi.OutputState }

func (MirroringDeploymentGroupConnectedEndpointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MirroringDeploymentGroupConnectedEndpointGroup)(nil)).Elem()
}

func (o MirroringDeploymentGroupConnectedEndpointGroupArrayOutput) ToMirroringDeploymentGroupConnectedEndpointGroupArrayOutput() MirroringDeploymentGroupConnectedEndpointGroupArrayOutput {
	return o
}

func (o MirroringDeploymentGroupConnectedEndpointGroupArrayOutput) ToMirroringDeploymentGroupConnectedEndpointGroupArrayOutputWithContext(ctx context.Context) MirroringDeploymentGroupConnectedEndpointGroupArrayOutput {
	return o
}

func (o MirroringDeploymentGroupConnectedEndpointGroupArrayOutput) Index(i pulumi.IntInput) MirroringDeploymentGroupConnectedEndpointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MirroringDeploymentGroupConnectedEndpointGroup {
		return vs[0].([]MirroringDeploymentGroupConnectedEndpointGroup)[vs[1].(int)]
	}).(MirroringDeploymentGroupConnectedEndpointGroupOutput)
}

type MirroringEndpointGroupAssociationLocationsDetail struct {
	// The cloud location of the association, currently restricted to `global`.
	//
	// ***
	Location *string `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State *string `pulumi:"state"`
}

// MirroringEndpointGroupAssociationLocationsDetailInput is an input type that accepts MirroringEndpointGroupAssociationLocationsDetailArgs and MirroringEndpointGroupAssociationLocationsDetailOutput values.
// You can construct a concrete instance of `MirroringEndpointGroupAssociationLocationsDetailInput` via:
//
//	MirroringEndpointGroupAssociationLocationsDetailArgs{...}
type MirroringEndpointGroupAssociationLocationsDetailInput interface {
	pulumi.Input

	ToMirroringEndpointGroupAssociationLocationsDetailOutput() MirroringEndpointGroupAssociationLocationsDetailOutput
	ToMirroringEndpointGroupAssociationLocationsDetailOutputWithContext(context.Context) MirroringEndpointGroupAssociationLocationsDetailOutput
}

type MirroringEndpointGroupAssociationLocationsDetailArgs struct {
	// The cloud location of the association, currently restricted to `global`.
	//
	// ***
	Location pulumi.StringPtrInput `pulumi:"location"`
	// (Output)
	// The current state of the association in this location.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// OUT_OF_SYNC
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (MirroringEndpointGroupAssociationLocationsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MirroringEndpointGroupAssociationLocationsDetail)(nil)).Elem()
}

func (i MirroringEndpointGroupAssociationLocationsDetailArgs) ToMirroringEndpointGroupAssociationLocationsDetailOutput() MirroringEndpointGroupAssociationLocationsDetailOutput {
	return i.ToMirroringEndpointGroupAssociationLocationsDetailOutputWithContext(context.Background())
}

func (i MirroringEndpointGroupAssociationLocationsDetailArgs) ToMirroringEndpointGroupAssociationLocationsDetailOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationLocationsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringEndpointGroupAssociationLocationsDetailOutput)
}

// MirroringEndpointGroupAssociationLocationsDetailArrayInput is an input type that accepts MirroringEndpointGroupAssociationLocationsDetailArray and MirroringEndpointGroupAssociationLocationsDetailArrayOutput values.
// You can construct a concrete instance of `MirroringEndpointGroupAssociationLocationsDetailArrayInput` via:
//
//	MirroringEndpointGroupAssociationLocationsDetailArray{ MirroringEndpointGroupAssociationLocationsDetailArgs{...} }
type MirroringEndpointGroupAssociationLocationsDetailArrayInput interface {
	pulumi.Input

	ToMirroringEndpointGroupAssociationLocationsDetailArrayOutput() MirroringEndpointGroupAssociationLocationsDetailArrayOutput
	ToMirroringEndpointGroupAssociationLocationsDetailArrayOutputWithContext(context.Context) MirroringEndpointGroupAssociationLocationsDetailArrayOutput
}

type MirroringEndpointGroupAssociationLocationsDetailArray []MirroringEndpointGroupAssociationLocationsDetailInput

func (MirroringEndpointGroupAssociationLocationsDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MirroringEndpointGroupAssociationLocationsDetail)(nil)).Elem()
}

func (i MirroringEndpointGroupAssociationLocationsDetailArray) ToMirroringEndpointGroupAssociationLocationsDetailArrayOutput() MirroringEndpointGroupAssociationLocationsDetailArrayOutput {
	return i.ToMirroringEndpointGroupAssociationLocationsDetailArrayOutputWithContext(context.Background())
}

func (i MirroringEndpointGroupAssociationLocationsDetailArray) ToMirroringEndpointGroupAssociationLocationsDetailArrayOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationLocationsDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringEndpointGroupAssociationLocationsDetailArrayOutput)
}

type MirroringEndpointGroupAssociationLocationsDetailOutput struct{ *pulumi.OutputState }

func (MirroringEndpointGroupAssociationLocationsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MirroringEndpointGroupAssociationLocationsDetail)(nil)).Elem()
}

func (o MirroringEndpointGroupAssociationLocationsDetailOutput) ToMirroringEndpointGroupAssociationLocationsDetailOutput() MirroringEndpointGroupAssociationLocationsDetailOutput {
	return o
}

func (o MirroringEndpointGroupAssociationLocationsDetailOutput) ToMirroringEndpointGroupAssociationLocationsDetailOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationLocationsDetailOutput {
	return o
}

// The cloud location of the association, currently restricted to `global`.
//
// ***
func (o MirroringEndpointGroupAssociationLocationsDetailOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MirroringEndpointGroupAssociationLocationsDetail) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// (Output)
// The current state of the association in this location.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// OUT_OF_SYNC
func (o MirroringEndpointGroupAssociationLocationsDetailOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MirroringEndpointGroupAssociationLocationsDetail) *string { return v.State }).(pulumi.StringPtrOutput)
}

type MirroringEndpointGroupAssociationLocationsDetailArrayOutput struct{ *pulumi.OutputState }

func (MirroringEndpointGroupAssociationLocationsDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MirroringEndpointGroupAssociationLocationsDetail)(nil)).Elem()
}

func (o MirroringEndpointGroupAssociationLocationsDetailArrayOutput) ToMirroringEndpointGroupAssociationLocationsDetailArrayOutput() MirroringEndpointGroupAssociationLocationsDetailArrayOutput {
	return o
}

func (o MirroringEndpointGroupAssociationLocationsDetailArrayOutput) ToMirroringEndpointGroupAssociationLocationsDetailArrayOutputWithContext(ctx context.Context) MirroringEndpointGroupAssociationLocationsDetailArrayOutput {
	return o
}

func (o MirroringEndpointGroupAssociationLocationsDetailArrayOutput) Index(i pulumi.IntInput) MirroringEndpointGroupAssociationLocationsDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MirroringEndpointGroupAssociationLocationsDetail {
		return vs[0].([]MirroringEndpointGroupAssociationLocationsDetail)[vs[1].(int)]
	}).(MirroringEndpointGroupAssociationLocationsDetailOutput)
}

type SecurityProfileCustomInterceptProfile struct {
	// The Intercept Endpoint Group to which matching traffic should be intercepted.
	// Format: projects/{project_id}/locations/global/interceptEndpointGroups/{endpoint_group_id}
	InterceptEndpointGroup string `pulumi:"interceptEndpointGroup"`
}

// SecurityProfileCustomInterceptProfileInput is an input type that accepts SecurityProfileCustomInterceptProfileArgs and SecurityProfileCustomInterceptProfileOutput values.
// You can construct a concrete instance of `SecurityProfileCustomInterceptProfileInput` via:
//
//	SecurityProfileCustomInterceptProfileArgs{...}
type SecurityProfileCustomInterceptProfileInput interface {
	pulumi.Input

	ToSecurityProfileCustomInterceptProfileOutput() SecurityProfileCustomInterceptProfileOutput
	ToSecurityProfileCustomInterceptProfileOutputWithContext(context.Context) SecurityProfileCustomInterceptProfileOutput
}

type SecurityProfileCustomInterceptProfileArgs struct {
	// The Intercept Endpoint Group to which matching traffic should be intercepted.
	// Format: projects/{project_id}/locations/global/interceptEndpointGroups/{endpoint_group_id}
	InterceptEndpointGroup pulumi.StringInput `pulumi:"interceptEndpointGroup"`
}

func (SecurityProfileCustomInterceptProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileCustomInterceptProfile)(nil)).Elem()
}

func (i SecurityProfileCustomInterceptProfileArgs) ToSecurityProfileCustomInterceptProfileOutput() SecurityProfileCustomInterceptProfileOutput {
	return i.ToSecurityProfileCustomInterceptProfileOutputWithContext(context.Background())
}

func (i SecurityProfileCustomInterceptProfileArgs) ToSecurityProfileCustomInterceptProfileOutputWithContext(ctx context.Context) SecurityProfileCustomInterceptProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileCustomInterceptProfileOutput)
}

func (i SecurityProfileCustomInterceptProfileArgs) ToSecurityProfileCustomInterceptProfilePtrOutput() SecurityProfileCustomInterceptProfilePtrOutput {
	return i.ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(context.Background())
}

func (i SecurityProfileCustomInterceptProfileArgs) ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(ctx context.Context) SecurityProfileCustomInterceptProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileCustomInterceptProfileOutput).ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(ctx)
}

// SecurityProfileCustomInterceptProfilePtrInput is an input type that accepts SecurityProfileCustomInterceptProfileArgs, SecurityProfileCustomInterceptProfilePtr and SecurityProfileCustomInterceptProfilePtrOutput values.
// You can construct a concrete instance of `SecurityProfileCustomInterceptProfilePtrInput` via:
//
//	        SecurityProfileCustomInterceptProfileArgs{...}
//
//	or:
//
//	        nil
type SecurityProfileCustomInterceptProfilePtrInput interface {
	pulumi.Input

	ToSecurityProfileCustomInterceptProfilePtrOutput() SecurityProfileCustomInterceptProfilePtrOutput
	ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(context.Context) SecurityProfileCustomInterceptProfilePtrOutput
}

type securityProfileCustomInterceptProfilePtrType SecurityProfileCustomInterceptProfileArgs

func SecurityProfileCustomInterceptProfilePtr(v *SecurityProfileCustomInterceptProfileArgs) SecurityProfileCustomInterceptProfilePtrInput {
	return (*securityProfileCustomInterceptProfilePtrType)(v)
}

func (*securityProfileCustomInterceptProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileCustomInterceptProfile)(nil)).Elem()
}

func (i *securityProfileCustomInterceptProfilePtrType) ToSecurityProfileCustomInterceptProfilePtrOutput() SecurityProfileCustomInterceptProfilePtrOutput {
	return i.ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(context.Background())
}

func (i *securityProfileCustomInterceptProfilePtrType) ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(ctx context.Context) SecurityProfileCustomInterceptProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileCustomInterceptProfilePtrOutput)
}

type SecurityProfileCustomInterceptProfileOutput struct{ *pulumi.OutputState }

func (SecurityProfileCustomInterceptProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileCustomInterceptProfile)(nil)).Elem()
}

func (o SecurityProfileCustomInterceptProfileOutput) ToSecurityProfileCustomInterceptProfileOutput() SecurityProfileCustomInterceptProfileOutput {
	return o
}

func (o SecurityProfileCustomInterceptProfileOutput) ToSecurityProfileCustomInterceptProfileOutputWithContext(ctx context.Context) SecurityProfileCustomInterceptProfileOutput {
	return o
}

func (o SecurityProfileCustomInterceptProfileOutput) ToSecurityProfileCustomInterceptProfilePtrOutput() SecurityProfileCustomInterceptProfilePtrOutput {
	return o.ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(context.Background())
}

func (o SecurityProfileCustomInterceptProfileOutput) ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(ctx context.Context) SecurityProfileCustomInterceptProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityProfileCustomInterceptProfile) *SecurityProfileCustomInterceptProfile {
		return &v
	}).(SecurityProfileCustomInterceptProfilePtrOutput)
}

// The Intercept Endpoint Group to which matching traffic should be intercepted.
// Format: projects/{project_id}/locations/global/interceptEndpointGroups/{endpoint_group_id}
func (o SecurityProfileCustomInterceptProfileOutput) InterceptEndpointGroup() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityProfileCustomInterceptProfile) string { return v.InterceptEndpointGroup }).(pulumi.StringOutput)
}

type SecurityProfileCustomInterceptProfilePtrOutput struct{ *pulumi.OutputState }

func (SecurityProfileCustomInterceptProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileCustomInterceptProfile)(nil)).Elem()
}

func (o SecurityProfileCustomInterceptProfilePtrOutput) ToSecurityProfileCustomInterceptProfilePtrOutput() SecurityProfileCustomInterceptProfilePtrOutput {
	return o
}

func (o SecurityProfileCustomInterceptProfilePtrOutput) ToSecurityProfileCustomInterceptProfilePtrOutputWithContext(ctx context.Context) SecurityProfileCustomInterceptProfilePtrOutput {
	return o
}

func (o SecurityProfileCustomInterceptProfilePtrOutput) Elem() SecurityProfileCustomInterceptProfileOutput {
	return o.ApplyT(func(v *SecurityProfileCustomInterceptProfile) SecurityProfileCustomInterceptProfile {
		if v != nil {
			return *v
		}
		var ret SecurityProfileCustomInterceptProfile
		return ret
	}).(SecurityProfileCustomInterceptProfileOutput)
}

// The Intercept Endpoint Group to which matching traffic should be intercepted.
// Format: projects/{project_id}/locations/global/interceptEndpointGroups/{endpoint_group_id}
func (o SecurityProfileCustomInterceptProfilePtrOutput) InterceptEndpointGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileCustomInterceptProfile) *string {
		if v == nil {
			return nil
		}
		return &v.InterceptEndpointGroup
	}).(pulumi.StringPtrOutput)
}

type SecurityProfileCustomMirroringProfile struct {
	// The Mirroring Endpoint Group to which matching traffic should be mirrored.
	// Format: projects/{project_id}/locations/global/mirroringEndpointGroups/{endpoint_group_id}
	MirroringEndpointGroup string `pulumi:"mirroringEndpointGroup"`
}

// SecurityProfileCustomMirroringProfileInput is an input type that accepts SecurityProfileCustomMirroringProfileArgs and SecurityProfileCustomMirroringProfileOutput values.
// You can construct a concrete instance of `SecurityProfileCustomMirroringProfileInput` via:
//
//	SecurityProfileCustomMirroringProfileArgs{...}
type SecurityProfileCustomMirroringProfileInput interface {
	pulumi.Input

	ToSecurityProfileCustomMirroringProfileOutput() SecurityProfileCustomMirroringProfileOutput
	ToSecurityProfileCustomMirroringProfileOutputWithContext(context.Context) SecurityProfileCustomMirroringProfileOutput
}

type SecurityProfileCustomMirroringProfileArgs struct {
	// The Mirroring Endpoint Group to which matching traffic should be mirrored.
	// Format: projects/{project_id}/locations/global/mirroringEndpointGroups/{endpoint_group_id}
	MirroringEndpointGroup pulumi.StringInput `pulumi:"mirroringEndpointGroup"`
}

func (SecurityProfileCustomMirroringProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileCustomMirroringProfile)(nil)).Elem()
}

func (i SecurityProfileCustomMirroringProfileArgs) ToSecurityProfileCustomMirroringProfileOutput() SecurityProfileCustomMirroringProfileOutput {
	return i.ToSecurityProfileCustomMirroringProfileOutputWithContext(context.Background())
}

func (i SecurityProfileCustomMirroringProfileArgs) ToSecurityProfileCustomMirroringProfileOutputWithContext(ctx context.Context) SecurityProfileCustomMirroringProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileCustomMirroringProfileOutput)
}

func (i SecurityProfileCustomMirroringProfileArgs) ToSecurityProfileCustomMirroringProfilePtrOutput() SecurityProfileCustomMirroringProfilePtrOutput {
	return i.ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(context.Background())
}

func (i SecurityProfileCustomMirroringProfileArgs) ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(ctx context.Context) SecurityProfileCustomMirroringProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileCustomMirroringProfileOutput).ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(ctx)
}

// SecurityProfileCustomMirroringProfilePtrInput is an input type that accepts SecurityProfileCustomMirroringProfileArgs, SecurityProfileCustomMirroringProfilePtr and SecurityProfileCustomMirroringProfilePtrOutput values.
// You can construct a concrete instance of `SecurityProfileCustomMirroringProfilePtrInput` via:
//
//	        SecurityProfileCustomMirroringProfileArgs{...}
//
//	or:
//
//	        nil
type SecurityProfileCustomMirroringProfilePtrInput interface {
	pulumi.Input

	ToSecurityProfileCustomMirroringProfilePtrOutput() SecurityProfileCustomMirroringProfilePtrOutput
	ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(context.Context) SecurityProfileCustomMirroringProfilePtrOutput
}

type securityProfileCustomMirroringProfilePtrType SecurityProfileCustomMirroringProfileArgs

func SecurityProfileCustomMirroringProfilePtr(v *SecurityProfileCustomMirroringProfileArgs) SecurityProfileCustomMirroringProfilePtrInput {
	return (*securityProfileCustomMirroringProfilePtrType)(v)
}

func (*securityProfileCustomMirroringProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileCustomMirroringProfile)(nil)).Elem()
}

func (i *securityProfileCustomMirroringProfilePtrType) ToSecurityProfileCustomMirroringProfilePtrOutput() SecurityProfileCustomMirroringProfilePtrOutput {
	return i.ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(context.Background())
}

func (i *securityProfileCustomMirroringProfilePtrType) ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(ctx context.Context) SecurityProfileCustomMirroringProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileCustomMirroringProfilePtrOutput)
}

type SecurityProfileCustomMirroringProfileOutput struct{ *pulumi.OutputState }

func (SecurityProfileCustomMirroringProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileCustomMirroringProfile)(nil)).Elem()
}

func (o SecurityProfileCustomMirroringProfileOutput) ToSecurityProfileCustomMirroringProfileOutput() SecurityProfileCustomMirroringProfileOutput {
	return o
}

func (o SecurityProfileCustomMirroringProfileOutput) ToSecurityProfileCustomMirroringProfileOutputWithContext(ctx context.Context) SecurityProfileCustomMirroringProfileOutput {
	return o
}

func (o SecurityProfileCustomMirroringProfileOutput) ToSecurityProfileCustomMirroringProfilePtrOutput() SecurityProfileCustomMirroringProfilePtrOutput {
	return o.ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(context.Background())
}

func (o SecurityProfileCustomMirroringProfileOutput) ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(ctx context.Context) SecurityProfileCustomMirroringProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityProfileCustomMirroringProfile) *SecurityProfileCustomMirroringProfile {
		return &v
	}).(SecurityProfileCustomMirroringProfilePtrOutput)
}

// The Mirroring Endpoint Group to which matching traffic should be mirrored.
// Format: projects/{project_id}/locations/global/mirroringEndpointGroups/{endpoint_group_id}
func (o SecurityProfileCustomMirroringProfileOutput) MirroringEndpointGroup() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityProfileCustomMirroringProfile) string { return v.MirroringEndpointGroup }).(pulumi.StringOutput)
}

type SecurityProfileCustomMirroringProfilePtrOutput struct{ *pulumi.OutputState }

func (SecurityProfileCustomMirroringProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileCustomMirroringProfile)(nil)).Elem()
}

func (o SecurityProfileCustomMirroringProfilePtrOutput) ToSecurityProfileCustomMirroringProfilePtrOutput() SecurityProfileCustomMirroringProfilePtrOutput {
	return o
}

func (o SecurityProfileCustomMirroringProfilePtrOutput) ToSecurityProfileCustomMirroringProfilePtrOutputWithContext(ctx context.Context) SecurityProfileCustomMirroringProfilePtrOutput {
	return o
}

func (o SecurityProfileCustomMirroringProfilePtrOutput) Elem() SecurityProfileCustomMirroringProfileOutput {
	return o.ApplyT(func(v *SecurityProfileCustomMirroringProfile) SecurityProfileCustomMirroringProfile {
		if v != nil {
			return *v
		}
		var ret SecurityProfileCustomMirroringProfile
		return ret
	}).(SecurityProfileCustomMirroringProfileOutput)
}

// The Mirroring Endpoint Group to which matching traffic should be mirrored.
// Format: projects/{project_id}/locations/global/mirroringEndpointGroups/{endpoint_group_id}
func (o SecurityProfileCustomMirroringProfilePtrOutput) MirroringEndpointGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileCustomMirroringProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MirroringEndpointGroup
	}).(pulumi.StringPtrOutput)
}

type SecurityProfileThreatPreventionProfile struct {
	// The configuration for overriding threats actions by severity match.
	// Structure is documented below.
	SeverityOverrides []SecurityProfileThreatPreventionProfileSeverityOverride `pulumi:"severityOverrides"`
	// The configuration for overriding threats actions by threat id match.
	// If a threat is matched both by configuration provided in severity overrides
	// and threat overrides, the threat overrides action is applied.
	// Structure is documented below.
	ThreatOverrides []SecurityProfileThreatPreventionProfileThreatOverride `pulumi:"threatOverrides"`
}

// SecurityProfileThreatPreventionProfileInput is an input type that accepts SecurityProfileThreatPreventionProfileArgs and SecurityProfileThreatPreventionProfileOutput values.
// You can construct a concrete instance of `SecurityProfileThreatPreventionProfileInput` via:
//
//	SecurityProfileThreatPreventionProfileArgs{...}
type SecurityProfileThreatPreventionProfileInput interface {
	pulumi.Input

	ToSecurityProfileThreatPreventionProfileOutput() SecurityProfileThreatPreventionProfileOutput
	ToSecurityProfileThreatPreventionProfileOutputWithContext(context.Context) SecurityProfileThreatPreventionProfileOutput
}

type SecurityProfileThreatPreventionProfileArgs struct {
	// The configuration for overriding threats actions by severity match.
	// Structure is documented below.
	SeverityOverrides SecurityProfileThreatPreventionProfileSeverityOverrideArrayInput `pulumi:"severityOverrides"`
	// The configuration for overriding threats actions by threat id match.
	// If a threat is matched both by configuration provided in severity overrides
	// and threat overrides, the threat overrides action is applied.
	// Structure is documented below.
	ThreatOverrides SecurityProfileThreatPreventionProfileThreatOverrideArrayInput `pulumi:"threatOverrides"`
}

func (SecurityProfileThreatPreventionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileThreatPreventionProfile)(nil)).Elem()
}

func (i SecurityProfileThreatPreventionProfileArgs) ToSecurityProfileThreatPreventionProfileOutput() SecurityProfileThreatPreventionProfileOutput {
	return i.ToSecurityProfileThreatPreventionProfileOutputWithContext(context.Background())
}

func (i SecurityProfileThreatPreventionProfileArgs) ToSecurityProfileThreatPreventionProfileOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileThreatPreventionProfileOutput)
}

func (i SecurityProfileThreatPreventionProfileArgs) ToSecurityProfileThreatPreventionProfilePtrOutput() SecurityProfileThreatPreventionProfilePtrOutput {
	return i.ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(context.Background())
}

func (i SecurityProfileThreatPreventionProfileArgs) ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileThreatPreventionProfileOutput).ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(ctx)
}

// SecurityProfileThreatPreventionProfilePtrInput is an input type that accepts SecurityProfileThreatPreventionProfileArgs, SecurityProfileThreatPreventionProfilePtr and SecurityProfileThreatPreventionProfilePtrOutput values.
// You can construct a concrete instance of `SecurityProfileThreatPreventionProfilePtrInput` via:
//
//	        SecurityProfileThreatPreventionProfileArgs{...}
//
//	or:
//
//	        nil
type SecurityProfileThreatPreventionProfilePtrInput interface {
	pulumi.Input

	ToSecurityProfileThreatPreventionProfilePtrOutput() SecurityProfileThreatPreventionProfilePtrOutput
	ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(context.Context) SecurityProfileThreatPreventionProfilePtrOutput
}

type securityProfileThreatPreventionProfilePtrType SecurityProfileThreatPreventionProfileArgs

func SecurityProfileThreatPreventionProfilePtr(v *SecurityProfileThreatPreventionProfileArgs) SecurityProfileThreatPreventionProfilePtrInput {
	return (*securityProfileThreatPreventionProfilePtrType)(v)
}

func (*securityProfileThreatPreventionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileThreatPreventionProfile)(nil)).Elem()
}

func (i *securityProfileThreatPreventionProfilePtrType) ToSecurityProfileThreatPreventionProfilePtrOutput() SecurityProfileThreatPreventionProfilePtrOutput {
	return i.ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(context.Background())
}

func (i *securityProfileThreatPreventionProfilePtrType) ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileThreatPreventionProfilePtrOutput)
}

type SecurityProfileThreatPreventionProfileOutput struct{ *pulumi.OutputState }

func (SecurityProfileThreatPreventionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileThreatPreventionProfile)(nil)).Elem()
}

func (o SecurityProfileThreatPreventionProfileOutput) ToSecurityProfileThreatPreventionProfileOutput() SecurityProfileThreatPreventionProfileOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfileOutput) ToSecurityProfileThreatPreventionProfileOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfileOutput) ToSecurityProfileThreatPreventionProfilePtrOutput() SecurityProfileThreatPreventionProfilePtrOutput {
	return o.ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(context.Background())
}

func (o SecurityProfileThreatPreventionProfileOutput) ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityProfileThreatPreventionProfile) *SecurityProfileThreatPreventionProfile {
		return &v
	}).(SecurityProfileThreatPreventionProfilePtrOutput)
}

// The configuration for overriding threats actions by severity match.
// Structure is documented below.
func (o SecurityProfileThreatPreventionProfileOutput) SeverityOverrides() SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput {
	return o.ApplyT(func(v SecurityProfileThreatPreventionProfile) []SecurityProfileThreatPreventionProfileSeverityOverride {
		return v.SeverityOverrides
	}).(SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput)
}

// The configuration for overriding threats actions by threat id match.
// If a threat is matched both by configuration provided in severity overrides
// and threat overrides, the threat overrides action is applied.
// Structure is documented below.
func (o SecurityProfileThreatPreventionProfileOutput) ThreatOverrides() SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput {
	return o.ApplyT(func(v SecurityProfileThreatPreventionProfile) []SecurityProfileThreatPreventionProfileThreatOverride {
		return v.ThreatOverrides
	}).(SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput)
}

type SecurityProfileThreatPreventionProfilePtrOutput struct{ *pulumi.OutputState }

func (SecurityProfileThreatPreventionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileThreatPreventionProfile)(nil)).Elem()
}

func (o SecurityProfileThreatPreventionProfilePtrOutput) ToSecurityProfileThreatPreventionProfilePtrOutput() SecurityProfileThreatPreventionProfilePtrOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfilePtrOutput) ToSecurityProfileThreatPreventionProfilePtrOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfilePtrOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfilePtrOutput) Elem() SecurityProfileThreatPreventionProfileOutput {
	return o.ApplyT(func(v *SecurityProfileThreatPreventionProfile) SecurityProfileThreatPreventionProfile {
		if v != nil {
			return *v
		}
		var ret SecurityProfileThreatPreventionProfile
		return ret
	}).(SecurityProfileThreatPreventionProfileOutput)
}

// The configuration for overriding threats actions by severity match.
// Structure is documented below.
func (o SecurityProfileThreatPreventionProfilePtrOutput) SeverityOverrides() SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput {
	return o.ApplyT(func(v *SecurityProfileThreatPreventionProfile) []SecurityProfileThreatPreventionProfileSeverityOverride {
		if v == nil {
			return nil
		}
		return v.SeverityOverrides
	}).(SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput)
}

// The configuration for overriding threats actions by threat id match.
// If a threat is matched both by configuration provided in severity overrides
// and threat overrides, the threat overrides action is applied.
// Structure is documented below.
func (o SecurityProfileThreatPreventionProfilePtrOutput) ThreatOverrides() SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput {
	return o.ApplyT(func(v *SecurityProfileThreatPreventionProfile) []SecurityProfileThreatPreventionProfileThreatOverride {
		if v == nil {
			return nil
		}
		return v.ThreatOverrides
	}).(SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput)
}

type SecurityProfileThreatPreventionProfileSeverityOverride struct {
	// Threat action override.
	// Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
	Action string `pulumi:"action"`
	// Severity level to match.
	// Possible values are: `CRITICAL`, `HIGH`, `INFORMATIONAL`, `LOW`, `MEDIUM`.
	Severity string `pulumi:"severity"`
}

// SecurityProfileThreatPreventionProfileSeverityOverrideInput is an input type that accepts SecurityProfileThreatPreventionProfileSeverityOverrideArgs and SecurityProfileThreatPreventionProfileSeverityOverrideOutput values.
// You can construct a concrete instance of `SecurityProfileThreatPreventionProfileSeverityOverrideInput` via:
//
//	SecurityProfileThreatPreventionProfileSeverityOverrideArgs{...}
type SecurityProfileThreatPreventionProfileSeverityOverrideInput interface {
	pulumi.Input

	ToSecurityProfileThreatPreventionProfileSeverityOverrideOutput() SecurityProfileThreatPreventionProfileSeverityOverrideOutput
	ToSecurityProfileThreatPreventionProfileSeverityOverrideOutputWithContext(context.Context) SecurityProfileThreatPreventionProfileSeverityOverrideOutput
}

type SecurityProfileThreatPreventionProfileSeverityOverrideArgs struct {
	// Threat action override.
	// Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
	Action pulumi.StringInput `pulumi:"action"`
	// Severity level to match.
	// Possible values are: `CRITICAL`, `HIGH`, `INFORMATIONAL`, `LOW`, `MEDIUM`.
	Severity pulumi.StringInput `pulumi:"severity"`
}

func (SecurityProfileThreatPreventionProfileSeverityOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileThreatPreventionProfileSeverityOverride)(nil)).Elem()
}

func (i SecurityProfileThreatPreventionProfileSeverityOverrideArgs) ToSecurityProfileThreatPreventionProfileSeverityOverrideOutput() SecurityProfileThreatPreventionProfileSeverityOverrideOutput {
	return i.ToSecurityProfileThreatPreventionProfileSeverityOverrideOutputWithContext(context.Background())
}

func (i SecurityProfileThreatPreventionProfileSeverityOverrideArgs) ToSecurityProfileThreatPreventionProfileSeverityOverrideOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileSeverityOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileThreatPreventionProfileSeverityOverrideOutput)
}

// SecurityProfileThreatPreventionProfileSeverityOverrideArrayInput is an input type that accepts SecurityProfileThreatPreventionProfileSeverityOverrideArray and SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput values.
// You can construct a concrete instance of `SecurityProfileThreatPreventionProfileSeverityOverrideArrayInput` via:
//
//	SecurityProfileThreatPreventionProfileSeverityOverrideArray{ SecurityProfileThreatPreventionProfileSeverityOverrideArgs{...} }
type SecurityProfileThreatPreventionProfileSeverityOverrideArrayInput interface {
	pulumi.Input

	ToSecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput() SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput
	ToSecurityProfileThreatPreventionProfileSeverityOverrideArrayOutputWithContext(context.Context) SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput
}

type SecurityProfileThreatPreventionProfileSeverityOverrideArray []SecurityProfileThreatPreventionProfileSeverityOverrideInput

func (SecurityProfileThreatPreventionProfileSeverityOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityProfileThreatPreventionProfileSeverityOverride)(nil)).Elem()
}

func (i SecurityProfileThreatPreventionProfileSeverityOverrideArray) ToSecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput() SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput {
	return i.ToSecurityProfileThreatPreventionProfileSeverityOverrideArrayOutputWithContext(context.Background())
}

func (i SecurityProfileThreatPreventionProfileSeverityOverrideArray) ToSecurityProfileThreatPreventionProfileSeverityOverrideArrayOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput)
}

type SecurityProfileThreatPreventionProfileSeverityOverrideOutput struct{ *pulumi.OutputState }

func (SecurityProfileThreatPreventionProfileSeverityOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileThreatPreventionProfileSeverityOverride)(nil)).Elem()
}

func (o SecurityProfileThreatPreventionProfileSeverityOverrideOutput) ToSecurityProfileThreatPreventionProfileSeverityOverrideOutput() SecurityProfileThreatPreventionProfileSeverityOverrideOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfileSeverityOverrideOutput) ToSecurityProfileThreatPreventionProfileSeverityOverrideOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileSeverityOverrideOutput {
	return o
}

// Threat action override.
// Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
func (o SecurityProfileThreatPreventionProfileSeverityOverrideOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityProfileThreatPreventionProfileSeverityOverride) string { return v.Action }).(pulumi.StringOutput)
}

// Severity level to match.
// Possible values are: `CRITICAL`, `HIGH`, `INFORMATIONAL`, `LOW`, `MEDIUM`.
func (o SecurityProfileThreatPreventionProfileSeverityOverrideOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityProfileThreatPreventionProfileSeverityOverride) string { return v.Severity }).(pulumi.StringOutput)
}

type SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput struct{ *pulumi.OutputState }

func (SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityProfileThreatPreventionProfileSeverityOverride)(nil)).Elem()
}

func (o SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput) ToSecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput() SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput) ToSecurityProfileThreatPreventionProfileSeverityOverrideArrayOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput) Index(i pulumi.IntInput) SecurityProfileThreatPreventionProfileSeverityOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityProfileThreatPreventionProfileSeverityOverride {
		return vs[0].([]SecurityProfileThreatPreventionProfileSeverityOverride)[vs[1].(int)]
	}).(SecurityProfileThreatPreventionProfileSeverityOverrideOutput)
}

type SecurityProfileThreatPreventionProfileThreatOverride struct {
	// Threat action.
	// Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
	Action string `pulumi:"action"`
	// Vendor-specific ID of a threat to override.
	ThreatId string `pulumi:"threatId"`
	// (Output)
	// Type of threat.
	Type *string `pulumi:"type"`
}

// SecurityProfileThreatPreventionProfileThreatOverrideInput is an input type that accepts SecurityProfileThreatPreventionProfileThreatOverrideArgs and SecurityProfileThreatPreventionProfileThreatOverrideOutput values.
// You can construct a concrete instance of `SecurityProfileThreatPreventionProfileThreatOverrideInput` via:
//
//	SecurityProfileThreatPreventionProfileThreatOverrideArgs{...}
type SecurityProfileThreatPreventionProfileThreatOverrideInput interface {
	pulumi.Input

	ToSecurityProfileThreatPreventionProfileThreatOverrideOutput() SecurityProfileThreatPreventionProfileThreatOverrideOutput
	ToSecurityProfileThreatPreventionProfileThreatOverrideOutputWithContext(context.Context) SecurityProfileThreatPreventionProfileThreatOverrideOutput
}

type SecurityProfileThreatPreventionProfileThreatOverrideArgs struct {
	// Threat action.
	// Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
	Action pulumi.StringInput `pulumi:"action"`
	// Vendor-specific ID of a threat to override.
	ThreatId pulumi.StringInput `pulumi:"threatId"`
	// (Output)
	// Type of threat.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SecurityProfileThreatPreventionProfileThreatOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileThreatPreventionProfileThreatOverride)(nil)).Elem()
}

func (i SecurityProfileThreatPreventionProfileThreatOverrideArgs) ToSecurityProfileThreatPreventionProfileThreatOverrideOutput() SecurityProfileThreatPreventionProfileThreatOverrideOutput {
	return i.ToSecurityProfileThreatPreventionProfileThreatOverrideOutputWithContext(context.Background())
}

func (i SecurityProfileThreatPreventionProfileThreatOverrideArgs) ToSecurityProfileThreatPreventionProfileThreatOverrideOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileThreatOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileThreatPreventionProfileThreatOverrideOutput)
}

// SecurityProfileThreatPreventionProfileThreatOverrideArrayInput is an input type that accepts SecurityProfileThreatPreventionProfileThreatOverrideArray and SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput values.
// You can construct a concrete instance of `SecurityProfileThreatPreventionProfileThreatOverrideArrayInput` via:
//
//	SecurityProfileThreatPreventionProfileThreatOverrideArray{ SecurityProfileThreatPreventionProfileThreatOverrideArgs{...} }
type SecurityProfileThreatPreventionProfileThreatOverrideArrayInput interface {
	pulumi.Input

	ToSecurityProfileThreatPreventionProfileThreatOverrideArrayOutput() SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput
	ToSecurityProfileThreatPreventionProfileThreatOverrideArrayOutputWithContext(context.Context) SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput
}

type SecurityProfileThreatPreventionProfileThreatOverrideArray []SecurityProfileThreatPreventionProfileThreatOverrideInput

func (SecurityProfileThreatPreventionProfileThreatOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityProfileThreatPreventionProfileThreatOverride)(nil)).Elem()
}

func (i SecurityProfileThreatPreventionProfileThreatOverrideArray) ToSecurityProfileThreatPreventionProfileThreatOverrideArrayOutput() SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput {
	return i.ToSecurityProfileThreatPreventionProfileThreatOverrideArrayOutputWithContext(context.Background())
}

func (i SecurityProfileThreatPreventionProfileThreatOverrideArray) ToSecurityProfileThreatPreventionProfileThreatOverrideArrayOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput)
}

type SecurityProfileThreatPreventionProfileThreatOverrideOutput struct{ *pulumi.OutputState }

func (SecurityProfileThreatPreventionProfileThreatOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileThreatPreventionProfileThreatOverride)(nil)).Elem()
}

func (o SecurityProfileThreatPreventionProfileThreatOverrideOutput) ToSecurityProfileThreatPreventionProfileThreatOverrideOutput() SecurityProfileThreatPreventionProfileThreatOverrideOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfileThreatOverrideOutput) ToSecurityProfileThreatPreventionProfileThreatOverrideOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileThreatOverrideOutput {
	return o
}

// Threat action.
// Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
func (o SecurityProfileThreatPreventionProfileThreatOverrideOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityProfileThreatPreventionProfileThreatOverride) string { return v.Action }).(pulumi.StringOutput)
}

// Vendor-specific ID of a threat to override.
func (o SecurityProfileThreatPreventionProfileThreatOverrideOutput) ThreatId() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityProfileThreatPreventionProfileThreatOverride) string { return v.ThreatId }).(pulumi.StringOutput)
}

// (Output)
// Type of threat.
func (o SecurityProfileThreatPreventionProfileThreatOverrideOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileThreatPreventionProfileThreatOverride) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput struct{ *pulumi.OutputState }

func (SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityProfileThreatPreventionProfileThreatOverride)(nil)).Elem()
}

func (o SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput) ToSecurityProfileThreatPreventionProfileThreatOverrideArrayOutput() SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput) ToSecurityProfileThreatPreventionProfileThreatOverrideArrayOutputWithContext(ctx context.Context) SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput {
	return o
}

func (o SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput) Index(i pulumi.IntInput) SecurityProfileThreatPreventionProfileThreatOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityProfileThreatPreventionProfileThreatOverride {
		return vs[0].([]SecurityProfileThreatPreventionProfileThreatOverride)[vs[1].(int)]
	}).(SecurityProfileThreatPreventionProfileThreatOverrideOutput)
}

type ServerTlsPolicyMtlsPolicy struct {
	// Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
	// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
	// Structure is documented below.
	ClientValidationCas []ServerTlsPolicyMtlsPolicyClientValidationCa `pulumi:"clientValidationCas"`
	// When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
	// Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
	// Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
	ClientValidationMode *string `pulumi:"clientValidationMode"`
	// Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
	// If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
	// Allowed only if the policy is to be used with external HTTPS load balancers.
	ClientValidationTrustConfig *string `pulumi:"clientValidationTrustConfig"`
}

// ServerTlsPolicyMtlsPolicyInput is an input type that accepts ServerTlsPolicyMtlsPolicyArgs and ServerTlsPolicyMtlsPolicyOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyInput` via:
//
//	ServerTlsPolicyMtlsPolicyArgs{...}
type ServerTlsPolicyMtlsPolicyInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyOutput() ServerTlsPolicyMtlsPolicyOutput
	ToServerTlsPolicyMtlsPolicyOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyOutput
}

type ServerTlsPolicyMtlsPolicyArgs struct {
	// Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
	// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
	// Structure is documented below.
	ClientValidationCas ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput `pulumi:"clientValidationCas"`
	// When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
	// Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
	// Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
	ClientValidationMode pulumi.StringPtrInput `pulumi:"clientValidationMode"`
	// Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
	// If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
	// Allowed only if the policy is to be used with external HTTPS load balancers.
	ClientValidationTrustConfig pulumi.StringPtrInput `pulumi:"clientValidationTrustConfig"`
}

func (ServerTlsPolicyMtlsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicy)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToServerTlsPolicyMtlsPolicyOutput() ServerTlsPolicyMtlsPolicyOutput {
	return i.ToServerTlsPolicyMtlsPolicyOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToServerTlsPolicyMtlsPolicyOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyOutput)
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyArgs) ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyOutput).ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx)
}

// ServerTlsPolicyMtlsPolicyPtrInput is an input type that accepts ServerTlsPolicyMtlsPolicyArgs, ServerTlsPolicyMtlsPolicyPtr and ServerTlsPolicyMtlsPolicyPtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyPtrInput` via:
//
//	        ServerTlsPolicyMtlsPolicyArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyMtlsPolicyPtrInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput
	ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyPtrOutput
}

type serverTlsPolicyMtlsPolicyPtrType ServerTlsPolicyMtlsPolicyArgs

func ServerTlsPolicyMtlsPolicyPtr(v *ServerTlsPolicyMtlsPolicyArgs) ServerTlsPolicyMtlsPolicyPtrInput {
	return (*serverTlsPolicyMtlsPolicyPtrType)(v)
}

func (*serverTlsPolicyMtlsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicy)(nil)).Elem()
}

func (i *serverTlsPolicyMtlsPolicyPtrType) ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyMtlsPolicyPtrType) ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyPtrOutput)
}

type ServerTlsPolicyMtlsPolicyOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicy)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToServerTlsPolicyMtlsPolicyOutput() ServerTlsPolicyMtlsPolicyOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToServerTlsPolicyMtlsPolicyOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput {
	return o.ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyMtlsPolicyOutput) ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyMtlsPolicy) *ServerTlsPolicyMtlsPolicy {
		return &v
	}).(ServerTlsPolicyMtlsPolicyPtrOutput)
}

// Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
// Structure is documented below.
func (o ServerTlsPolicyMtlsPolicyOutput) ClientValidationCas() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicy) []ServerTlsPolicyMtlsPolicyClientValidationCa {
		return v.ClientValidationCas
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput)
}

// When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
// Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
// Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
func (o ServerTlsPolicyMtlsPolicyOutput) ClientValidationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicy) *string { return v.ClientValidationMode }).(pulumi.StringPtrOutput)
}

// Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
// If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
// Allowed only if the policy is to be used with external HTTPS load balancers.
func (o ServerTlsPolicyMtlsPolicyOutput) ClientValidationTrustConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicy) *string { return v.ClientValidationTrustConfig }).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyMtlsPolicyPtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicy)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyPtrOutput) ToServerTlsPolicyMtlsPolicyPtrOutput() ServerTlsPolicyMtlsPolicyPtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyPtrOutput) ToServerTlsPolicyMtlsPolicyPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyPtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyPtrOutput) Elem() ServerTlsPolicyMtlsPolicyOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicy) ServerTlsPolicyMtlsPolicy {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyMtlsPolicy
		return ret
	}).(ServerTlsPolicyMtlsPolicyOutput)
}

// Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
// Structure is documented below.
func (o ServerTlsPolicyMtlsPolicyPtrOutput) ClientValidationCas() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicy) []ServerTlsPolicyMtlsPolicyClientValidationCa {
		if v == nil {
			return nil
		}
		return v.ClientValidationCas
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput)
}

// When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
// Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
// Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
func (o ServerTlsPolicyMtlsPolicyPtrOutput) ClientValidationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientValidationMode
	}).(pulumi.StringPtrOutput)
}

// Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
// If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
// Allowed only if the policy is to be used with external HTTPS load balancers.
func (o ServerTlsPolicyMtlsPolicyPtrOutput) ClientValidationTrustConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientValidationTrustConfig
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCa struct {
	// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
	// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
	// Structure is documented below.
	CertificateProviderInstance *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ServerTlsPolicyMtlsPolicyClientValidationCaInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaArgs and ServerTlsPolicyMtlsPolicyClientValidationCaOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaInput` via:
//
//	ServerTlsPolicyMtlsPolicyClientValidationCaArgs{...}
type ServerTlsPolicyMtlsPolicyClientValidationCaInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaOutput() ServerTlsPolicyMtlsPolicyClientValidationCaOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaOutput
}

type ServerTlsPolicyMtlsPolicyClientValidationCaArgs struct {
	// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
	// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
	// Structure is documented below.
	CertificateProviderInstance ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ServerTlsPolicyMtlsPolicyClientValidationCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCa)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaOutput() ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaOutput)
}

// ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaArray and ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput` via:
//
//	ServerTlsPolicyMtlsPolicyClientValidationCaArray{ ServerTlsPolicyMtlsPolicyClientValidationCaArgs{...} }
type ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput
}

type ServerTlsPolicyMtlsPolicyClientValidationCaArray []ServerTlsPolicyMtlsPolicyClientValidationCaInput

func (ServerTlsPolicyMtlsPolicyClientValidationCaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTlsPolicyMtlsPolicyClientValidationCa)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArray) ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaArray) ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCa)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaOutput() ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return o
}

// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
// Structure is documented below.
func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) CertificateProviderInstance() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicyClientValidationCa) *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ServerTlsPolicyMtlsPolicyClientValidationCaOutput) GrpcEndpoint() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicyClientValidationCa) *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint {
		return v.GrpcEndpoint
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTlsPolicyMtlsPolicyClientValidationCa)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput() ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaArrayOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput) Index(i pulumi.IntInput) ServerTlsPolicyMtlsPolicyClientValidationCaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerTlsPolicyMtlsPolicyClientValidationCa {
		return vs[0].([]ServerTlsPolicyMtlsPolicyClientValidationCa)[vs[1].(int)]
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs and ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceInput` via:
//
//	ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs{...}
type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput
}

type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput)
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput).ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx)
}

// ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs, ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtr and ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput` via:
//
//	        ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput
}

type serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs

func ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtr(v *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput {
	return (*serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType)(v)
}

func (*serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrType) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o.ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance) *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance {
		return &v
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance) string {
		return v.PluginInstance
	}).(pulumi.StringOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) Elem() ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance) ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance
		return ret
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs and ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointInput` via:
//
//	ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs{...}
type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput
}

type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint)(nil)).Elem()
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput)
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput).ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx)
}

// ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput is an input type that accepts ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs, ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtr and ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput` via:
//
//	        ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput interface {
	pulumi.Input

	ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput
	ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput
}

type serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs

func ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtr(v *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput {
	return (*serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType)(v)
}

func (*serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint)(nil)).Elem()
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return i.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrType) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o.ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint) *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint {
		return &v
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint)(nil)).Elem()
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) ToServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput {
	return o
}

func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) Elem() ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint) ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint
		return ret
	}).(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyServerCertificate struct {
	// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
	// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
	// Structure is documented below.
	CertificateProviderInstance *ServerTlsPolicyServerCertificateCertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint *ServerTlsPolicyServerCertificateGrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ServerTlsPolicyServerCertificateInput is an input type that accepts ServerTlsPolicyServerCertificateArgs and ServerTlsPolicyServerCertificateOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateInput` via:
//
//	ServerTlsPolicyServerCertificateArgs{...}
type ServerTlsPolicyServerCertificateInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateOutput() ServerTlsPolicyServerCertificateOutput
	ToServerTlsPolicyServerCertificateOutputWithContext(context.Context) ServerTlsPolicyServerCertificateOutput
}

type ServerTlsPolicyServerCertificateArgs struct {
	// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
	// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
	// Structure is documented below.
	CertificateProviderInstance ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	// Structure is documented below.
	GrpcEndpoint ServerTlsPolicyServerCertificateGrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ServerTlsPolicyServerCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificate)(nil)).Elem()
}

func (i ServerTlsPolicyServerCertificateArgs) ToServerTlsPolicyServerCertificateOutput() ServerTlsPolicyServerCertificateOutput {
	return i.ToServerTlsPolicyServerCertificateOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateArgs) ToServerTlsPolicyServerCertificateOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateOutput)
}

func (i ServerTlsPolicyServerCertificateArgs) ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput {
	return i.ToServerTlsPolicyServerCertificatePtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateArgs) ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateOutput).ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx)
}

// ServerTlsPolicyServerCertificatePtrInput is an input type that accepts ServerTlsPolicyServerCertificateArgs, ServerTlsPolicyServerCertificatePtr and ServerTlsPolicyServerCertificatePtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificatePtrInput` via:
//
//	        ServerTlsPolicyServerCertificateArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyServerCertificatePtrInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput
	ToServerTlsPolicyServerCertificatePtrOutputWithContext(context.Context) ServerTlsPolicyServerCertificatePtrOutput
}

type serverTlsPolicyServerCertificatePtrType ServerTlsPolicyServerCertificateArgs

func ServerTlsPolicyServerCertificatePtr(v *ServerTlsPolicyServerCertificateArgs) ServerTlsPolicyServerCertificatePtrInput {
	return (*serverTlsPolicyServerCertificatePtrType)(v)
}

func (*serverTlsPolicyServerCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificate)(nil)).Elem()
}

func (i *serverTlsPolicyServerCertificatePtrType) ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput {
	return i.ToServerTlsPolicyServerCertificatePtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyServerCertificatePtrType) ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificatePtrOutput)
}

type ServerTlsPolicyServerCertificateOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificate)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateOutput) ToServerTlsPolicyServerCertificateOutput() ServerTlsPolicyServerCertificateOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateOutput) ToServerTlsPolicyServerCertificateOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateOutput) ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput {
	return o.ToServerTlsPolicyServerCertificatePtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyServerCertificateOutput) ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificate {
		return &v
	}).(ServerTlsPolicyServerCertificatePtrOutput)
}

// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
// Structure is documented below.
func (o ServerTlsPolicyServerCertificateOutput) CertificateProviderInstance() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificateCertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ServerTlsPolicyServerCertificateOutput) GrpcEndpoint() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o.ApplyT(func(v ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificateGrpcEndpoint {
		return v.GrpcEndpoint
	}).(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput)
}

type ServerTlsPolicyServerCertificatePtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificate)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificatePtrOutput) ToServerTlsPolicyServerCertificatePtrOutput() ServerTlsPolicyServerCertificatePtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificatePtrOutput) ToServerTlsPolicyServerCertificatePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificatePtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificatePtrOutput) Elem() ServerTlsPolicyServerCertificateOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificate) ServerTlsPolicyServerCertificate {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyServerCertificate
		return ret
	}).(ServerTlsPolicyServerCertificateOutput)
}

// Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
// Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
// Structure is documented below.
func (o ServerTlsPolicyServerCertificatePtrOutput) CertificateProviderInstance() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificateCertificateProviderInstance {
		if v == nil {
			return nil
		}
		return v.CertificateProviderInstance
	}).(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
// Structure is documented below.
func (o ServerTlsPolicyServerCertificatePtrOutput) GrpcEndpoint() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificate) *ServerTlsPolicyServerCertificateGrpcEndpoint {
		if v == nil {
			return nil
		}
		return v.GrpcEndpoint
	}).(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput)
}

type ServerTlsPolicyServerCertificateCertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// ServerTlsPolicyServerCertificateCertificateProviderInstanceInput is an input type that accepts ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs and ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateCertificateProviderInstanceInput` via:
//
//	ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs{...}
type ServerTlsPolicyServerCertificateCertificateProviderInstanceInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutput() ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput
	ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput
}

type ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificateCertificateProviderInstance)(nil)).Elem()
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutput() ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return i.ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput)
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return i.ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput).ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx)
}

// ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput is an input type that accepts ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs, ServerTlsPolicyServerCertificateCertificateProviderInstancePtr and ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput` via:
//
//	        ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput
	ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput
}

type serverTlsPolicyServerCertificateCertificateProviderInstancePtrType ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs

func ServerTlsPolicyServerCertificateCertificateProviderInstancePtr(v *ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput {
	return (*serverTlsPolicyServerCertificateCertificateProviderInstancePtrType)(v)
}

func (*serverTlsPolicyServerCertificateCertificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificateCertificateProviderInstance)(nil)).Elem()
}

func (i *serverTlsPolicyServerCertificateCertificateProviderInstancePtrType) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return i.ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyServerCertificateCertificateProviderInstancePtrType) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput)
}

type ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificateCertificateProviderInstance)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutput() ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstanceOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o.ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyServerCertificateCertificateProviderInstance) *ServerTlsPolicyServerCertificateCertificateProviderInstance {
		return &v
	}).(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsPolicyServerCertificateCertificateProviderInstance) string { return v.PluginInstance }).(pulumi.StringOutput)
}

type ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificateCertificateProviderInstance)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput() ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) ToServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) Elem() ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificateCertificateProviderInstance) ServerTlsPolicyServerCertificateCertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyServerCertificateCertificateProviderInstance
		return ret
	}).(ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "googleCloudPrivateSpiffe" to use Certificate Authority Service certificate provider instance.
func (o ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificateCertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

type ServerTlsPolicyServerCertificateGrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// ServerTlsPolicyServerCertificateGrpcEndpointInput is an input type that accepts ServerTlsPolicyServerCertificateGrpcEndpointArgs and ServerTlsPolicyServerCertificateGrpcEndpointOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateGrpcEndpointInput` via:
//
//	ServerTlsPolicyServerCertificateGrpcEndpointArgs{...}
type ServerTlsPolicyServerCertificateGrpcEndpointInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateGrpcEndpointOutput() ServerTlsPolicyServerCertificateGrpcEndpointOutput
	ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(context.Context) ServerTlsPolicyServerCertificateGrpcEndpointOutput
}

type ServerTlsPolicyServerCertificateGrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (ServerTlsPolicyServerCertificateGrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificateGrpcEndpoint)(nil)).Elem()
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToServerTlsPolicyServerCertificateGrpcEndpointOutput() ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return i.ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateGrpcEndpointOutput)
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return i.ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i ServerTlsPolicyServerCertificateGrpcEndpointArgs) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateGrpcEndpointOutput).ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx)
}

// ServerTlsPolicyServerCertificateGrpcEndpointPtrInput is an input type that accepts ServerTlsPolicyServerCertificateGrpcEndpointArgs, ServerTlsPolicyServerCertificateGrpcEndpointPtr and ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput values.
// You can construct a concrete instance of `ServerTlsPolicyServerCertificateGrpcEndpointPtrInput` via:
//
//	        ServerTlsPolicyServerCertificateGrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type ServerTlsPolicyServerCertificateGrpcEndpointPtrInput interface {
	pulumi.Input

	ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput
	ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput
}

type serverTlsPolicyServerCertificateGrpcEndpointPtrType ServerTlsPolicyServerCertificateGrpcEndpointArgs

func ServerTlsPolicyServerCertificateGrpcEndpointPtr(v *ServerTlsPolicyServerCertificateGrpcEndpointArgs) ServerTlsPolicyServerCertificateGrpcEndpointPtrInput {
	return (*serverTlsPolicyServerCertificateGrpcEndpointPtrType)(v)
}

func (*serverTlsPolicyServerCertificateGrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificateGrpcEndpoint)(nil)).Elem()
}

func (i *serverTlsPolicyServerCertificateGrpcEndpointPtrType) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return i.ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *serverTlsPolicyServerCertificateGrpcEndpointPtrType) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput)
}

type ServerTlsPolicyServerCertificateGrpcEndpointOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateGrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsPolicyServerCertificateGrpcEndpoint)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToServerTlsPolicyServerCertificateGrpcEndpointOutput() ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToServerTlsPolicyServerCertificateGrpcEndpointOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o.ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(context.Background())
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsPolicyServerCertificateGrpcEndpoint) *ServerTlsPolicyServerCertificateGrpcEndpoint {
		return &v
	}).(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ServerTlsPolicyServerCertificateGrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsPolicyServerCertificateGrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicyServerCertificateGrpcEndpoint)(nil)).Elem()
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutput() ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) ToServerTlsPolicyServerCertificateGrpcEndpointPtrOutputWithContext(ctx context.Context) ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput {
	return o
}

func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) Elem() ServerTlsPolicyServerCertificateGrpcEndpointOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificateGrpcEndpoint) ServerTlsPolicyServerCertificateGrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret ServerTlsPolicyServerCertificateGrpcEndpoint
		return ret
	}).(ServerTlsPolicyServerCertificateGrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTlsPolicyServerCertificateGrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddressGroupIamBindingConditionInput)(nil)).Elem(), AddressGroupIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddressGroupIamBindingConditionPtrInput)(nil)).Elem(), AddressGroupIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddressGroupIamMemberConditionInput)(nil)).Elem(), AddressGroupIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddressGroupIamMemberConditionPtrInput)(nil)).Elem(), AddressGroupIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleInput)(nil)).Elem(), AuthorizationPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleArrayInput)(nil)).Elem(), AuthorizationPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleDestinationInput)(nil)).Elem(), AuthorizationPolicyRuleDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleDestinationArrayInput)(nil)).Elem(), AuthorizationPolicyRuleDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleDestinationHttpHeaderMatchInput)(nil)).Elem(), AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrInput)(nil)).Elem(), AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleSourceInput)(nil)).Elem(), AuthorizationPolicyRuleSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyRuleSourceArrayInput)(nil)).Elem(), AuthorizationPolicyRuleSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyCustomProviderInput)(nil)).Elem(), AuthzPolicyCustomProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyCustomProviderPtrInput)(nil)).Elem(), AuthzPolicyCustomProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyCustomProviderAuthzExtensionInput)(nil)).Elem(), AuthzPolicyCustomProviderAuthzExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyCustomProviderAuthzExtensionPtrInput)(nil)).Elem(), AuthzPolicyCustomProviderAuthzExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyCustomProviderCloudIapInput)(nil)).Elem(), AuthzPolicyCustomProviderCloudIapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyCustomProviderCloudIapPtrInput)(nil)).Elem(), AuthzPolicyCustomProviderCloudIapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleInput)(nil)).Elem(), AuthzPolicyHttpRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromInput)(nil)).Elem(), AuthzPolicyHttpRuleFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromPtrInput)(nil)).Elem(), AuthzPolicyHttpRuleFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourcePrincipalInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourcePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourcePrincipalArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourcePrincipalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourceResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourceResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrInput)(nil)).Elem(), AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourcePrincipalInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourcePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourcePrincipalArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourcePrincipalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourceResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourceResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrInput)(nil)).Elem(), AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToInput)(nil)).Elem(), AuthzPolicyHttpRuleToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToPtrInput)(nil)).Elem(), AuthzPolicyHttpRuleToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationHeaderSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetPtrInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationHeaderSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHostInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationHostArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationPathInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToNotOperationPathArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleToNotOperationPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationHeaderSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetPtrInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationHeaderSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetHeaderInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationHeaderSetHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHostInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationHostArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationPathInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyHttpRuleToOperationPathArrayInput)(nil)).Elem(), AuthzPolicyHttpRuleToOperationPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyTargetInput)(nil)).Elem(), AuthzPolicyTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthzPolicyTargetPtrInput)(nil)).Elem(), AuthzPolicyTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateInput)(nil)).Elem(), ClientTlsPolicyClientCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificatePtrInput)(nil)).Elem(), ClientTlsPolicyClientCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateCertificateProviderInstanceInput)(nil)).Elem(), ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateCertificateProviderInstancePtrInput)(nil)).Elem(), ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateGrpcEndpointInput)(nil)).Elem(), ClientTlsPolicyClientCertificateGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyClientCertificateGrpcEndpointPtrInput)(nil)).Elem(), ClientTlsPolicyClientCertificateGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaArrayInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaCertificateProviderInstanceInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaGrpcEndpointInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientTlsPolicyServerValidationCaGrpcEndpointPtrInput)(nil)).Elem(), ClientTlsPolicyServerValidationCaGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptDeploymentGroupConnectedEndpointGroupInput)(nil)).Elem(), InterceptDeploymentGroupConnectedEndpointGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptDeploymentGroupConnectedEndpointGroupArrayInput)(nil)).Elem(), InterceptDeploymentGroupConnectedEndpointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptDeploymentGroupLocationInput)(nil)).Elem(), InterceptDeploymentGroupLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptDeploymentGroupLocationArrayInput)(nil)).Elem(), InterceptDeploymentGroupLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupAssociationTypeInput)(nil)).Elem(), InterceptEndpointGroupAssociationTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupAssociationTypeArrayInput)(nil)).Elem(), InterceptEndpointGroupAssociationTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupAssociationLocationInput)(nil)).Elem(), InterceptEndpointGroupAssociationLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupAssociationLocationArrayInput)(nil)).Elem(), InterceptEndpointGroupAssociationLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupAssociationLocationsDetailInput)(nil)).Elem(), InterceptEndpointGroupAssociationLocationsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupAssociationLocationsDetailArrayInput)(nil)).Elem(), InterceptEndpointGroupAssociationLocationsDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupConnectedDeploymentGroupInput)(nil)).Elem(), InterceptEndpointGroupConnectedDeploymentGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupConnectedDeploymentGroupArrayInput)(nil)).Elem(), InterceptEndpointGroupConnectedDeploymentGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupConnectedDeploymentGroupLocationInput)(nil)).Elem(), InterceptEndpointGroupConnectedDeploymentGroupLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterceptEndpointGroupConnectedDeploymentGroupLocationArrayInput)(nil)).Elem(), InterceptEndpointGroupConnectedDeploymentGroupLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringDeploymentGroupConnectedEndpointGroupInput)(nil)).Elem(), MirroringDeploymentGroupConnectedEndpointGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringDeploymentGroupConnectedEndpointGroupArrayInput)(nil)).Elem(), MirroringDeploymentGroupConnectedEndpointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringEndpointGroupAssociationLocationsDetailInput)(nil)).Elem(), MirroringEndpointGroupAssociationLocationsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringEndpointGroupAssociationLocationsDetailArrayInput)(nil)).Elem(), MirroringEndpointGroupAssociationLocationsDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileCustomInterceptProfileInput)(nil)).Elem(), SecurityProfileCustomInterceptProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileCustomInterceptProfilePtrInput)(nil)).Elem(), SecurityProfileCustomInterceptProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileCustomMirroringProfileInput)(nil)).Elem(), SecurityProfileCustomMirroringProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileCustomMirroringProfilePtrInput)(nil)).Elem(), SecurityProfileCustomMirroringProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileThreatPreventionProfileInput)(nil)).Elem(), SecurityProfileThreatPreventionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileThreatPreventionProfilePtrInput)(nil)).Elem(), SecurityProfileThreatPreventionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileThreatPreventionProfileSeverityOverrideInput)(nil)).Elem(), SecurityProfileThreatPreventionProfileSeverityOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileThreatPreventionProfileSeverityOverrideArrayInput)(nil)).Elem(), SecurityProfileThreatPreventionProfileSeverityOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileThreatPreventionProfileThreatOverrideInput)(nil)).Elem(), SecurityProfileThreatPreventionProfileThreatOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityProfileThreatPreventionProfileThreatOverrideArrayInput)(nil)).Elem(), SecurityProfileThreatPreventionProfileThreatOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyPtrInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaArrayInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrInput)(nil)).Elem(), ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateInput)(nil)).Elem(), ServerTlsPolicyServerCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificatePtrInput)(nil)).Elem(), ServerTlsPolicyServerCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateCertificateProviderInstanceInput)(nil)).Elem(), ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateCertificateProviderInstancePtrInput)(nil)).Elem(), ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateGrpcEndpointInput)(nil)).Elem(), ServerTlsPolicyServerCertificateGrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyServerCertificateGrpcEndpointPtrInput)(nil)).Elem(), ServerTlsPolicyServerCertificateGrpcEndpointArgs{})
	pulumi.RegisterOutputType(AddressGroupIamBindingConditionOutput{})
	pulumi.RegisterOutputType(AddressGroupIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(AddressGroupIamMemberConditionOutput{})
	pulumi.RegisterOutputType(AddressGroupIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleDestinationOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleDestinationArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleDestinationHttpHeaderMatchOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleDestinationHttpHeaderMatchPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleSourceOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyRuleSourceArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyCustomProviderOutput{})
	pulumi.RegisterOutputType(AuthzPolicyCustomProviderPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyCustomProviderAuthzExtensionOutput{})
	pulumi.RegisterOutputType(AuthzPolicyCustomProviderAuthzExtensionPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyCustomProviderCloudIapOutput{})
	pulumi.RegisterOutputType(AuthzPolicyCustomProviderCloudIapPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourceOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourceArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourcePrincipalOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourcePrincipalArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourceResourceOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourceResourceArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourceOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourceArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourcePrincipalOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourcePrincipalArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourceResourceOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourceResourceArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationHeaderSetOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationHeaderSetPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValueOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationHeaderSetHeaderValuePtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationHostOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationHostArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationPathOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToNotOperationPathArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationHeaderSetOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationHeaderSetPtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationHeaderSetHeaderOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationHeaderSetHeaderArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationHeaderSetHeaderValuePtrOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationHostOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationHostArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationPathOutput{})
	pulumi.RegisterOutputType(AuthzPolicyHttpRuleToOperationPathArrayOutput{})
	pulumi.RegisterOutputType(AuthzPolicyTargetOutput{})
	pulumi.RegisterOutputType(AuthzPolicyTargetPtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificatePtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateCertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateCertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateGrpcEndpointOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyClientCertificateGrpcEndpointPtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaArrayOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaCertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaCertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaGrpcEndpointOutput{})
	pulumi.RegisterOutputType(ClientTlsPolicyServerValidationCaGrpcEndpointPtrOutput{})
	pulumi.RegisterOutputType(InterceptDeploymentGroupConnectedEndpointGroupOutput{})
	pulumi.RegisterOutputType(InterceptDeploymentGroupConnectedEndpointGroupArrayOutput{})
	pulumi.RegisterOutputType(InterceptDeploymentGroupLocationOutput{})
	pulumi.RegisterOutputType(InterceptDeploymentGroupLocationArrayOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupAssociationTypeOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupAssociationTypeArrayOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupAssociationLocationOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupAssociationLocationArrayOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupAssociationLocationsDetailOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupAssociationLocationsDetailArrayOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupConnectedDeploymentGroupOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupConnectedDeploymentGroupArrayOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupConnectedDeploymentGroupLocationOutput{})
	pulumi.RegisterOutputType(InterceptEndpointGroupConnectedDeploymentGroupLocationArrayOutput{})
	pulumi.RegisterOutputType(MirroringDeploymentGroupConnectedEndpointGroupOutput{})
	pulumi.RegisterOutputType(MirroringDeploymentGroupConnectedEndpointGroupArrayOutput{})
	pulumi.RegisterOutputType(MirroringEndpointGroupAssociationLocationsDetailOutput{})
	pulumi.RegisterOutputType(MirroringEndpointGroupAssociationLocationsDetailArrayOutput{})
	pulumi.RegisterOutputType(SecurityProfileCustomInterceptProfileOutput{})
	pulumi.RegisterOutputType(SecurityProfileCustomInterceptProfilePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileCustomMirroringProfileOutput{})
	pulumi.RegisterOutputType(SecurityProfileCustomMirroringProfilePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileThreatPreventionProfileOutput{})
	pulumi.RegisterOutputType(SecurityProfileThreatPreventionProfilePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileThreatPreventionProfileSeverityOverrideOutput{})
	pulumi.RegisterOutputType(SecurityProfileThreatPreventionProfileSeverityOverrideArrayOutput{})
	pulumi.RegisterOutputType(SecurityProfileThreatPreventionProfileThreatOverrideOutput{})
	pulumi.RegisterOutputType(SecurityProfileThreatPreventionProfileThreatOverrideArrayOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyPtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaArrayOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointPtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificatePtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateCertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateCertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateGrpcEndpointOutput{})
	pulumi.RegisterOutputType(ServerTlsPolicyServerCertificateGrpcEndpointPtrOutput{})
}
