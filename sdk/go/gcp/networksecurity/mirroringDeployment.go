// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Network Security Mirroring Deployment Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Name:                  pulumi.String("example-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			subnetwork, err := compute.NewSubnetwork(ctx, "subnetwork", &compute.SubnetworkArgs{
//				Name:        pulumi.String("example-subnet"),
//				Region:      pulumi.String("us-central1"),
//				IpCidrRange: pulumi.String("10.1.0.0/16"),
//				Network:     network.Name,
//			})
//			if err != nil {
//				return err
//			}
//			healthCheck, err := compute.NewRegionHealthCheck(ctx, "health_check", &compute.RegionHealthCheckArgs{
//				Name:   pulumi.String("example-hc"),
//				Region: pulumi.String("us-central1"),
//				HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			backendService, err := compute.NewRegionBackendService(ctx, "backend_service", &compute.RegionBackendServiceArgs{
//				Name:                pulumi.String("example-bs"),
//				Region:              pulumi.String("us-central1"),
//				HealthChecks:        healthCheck.ID(),
//				Protocol:            pulumi.String("UDP"),
//				LoadBalancingScheme: pulumi.String("INTERNAL"),
//			})
//			if err != nil {
//				return err
//			}
//			forwardingRule, err := compute.NewForwardingRule(ctx, "forwarding_rule", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("example-fwr"),
//				Region:              pulumi.String("us-central1"),
//				Network:             network.Name,
//				Subnetwork:          subnetwork.Name,
//				BackendService:      backendService.ID(),
//				LoadBalancingScheme: pulumi.String("INTERNAL"),
//				Ports: pulumi.StringArray{
//					pulumi.String("6081"),
//				},
//				IpProtocol:           pulumi.String("UDP"),
//				IsMirroringCollector: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			deploymentGroup, err := networksecurity.NewMirroringDeploymentGroup(ctx, "deployment_group", &networksecurity.MirroringDeploymentGroupArgs{
//				MirroringDeploymentGroupId: pulumi.String("example-dg"),
//				Location:                   pulumi.String("global"),
//				Network:                    network.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewMirroringDeployment(ctx, "default", &networksecurity.MirroringDeploymentArgs{
//				MirroringDeploymentId:    pulumi.String("example-deployment"),
//				Location:                 pulumi.String("us-central1-a"),
//				ForwardingRule:           forwardingRule.ID(),
//				MirroringDeploymentGroup: deploymentGroup.ID(),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MirroringDeployment can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/mirroringDeployments/{{mirroring_deployment_id}}`
//
// * `{{project}}/{{location}}/{{mirroring_deployment_id}}`
//
// * `{{location}}/{{mirroring_deployment_id}}`
//
// When using the `pulumi import` command, MirroringDeployment can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringDeployment:MirroringDeployment default projects/{{project}}/locations/{{location}}/mirroringDeployments/{{mirroring_deployment_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringDeployment:MirroringDeployment default {{project}}/{{location}}/{{mirroring_deployment_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringDeployment:MirroringDeployment default {{location}}/{{mirroring_deployment_id}}
// ```
type MirroringDeployment struct {
	pulumi.CustomResourceState

	// Output only. [Output only] Create time stamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Required. Immutable. The regional load balancer which the mirrored traffic should be forwarded
	// to. Format is:
	// projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
	ForwardingRule pulumi.StringOutput `pulumi:"forwardingRule"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeployment`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. Immutable. The Mirroring Deployment Group that this resource is part of. Format is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup pulumi.StringOutput `pulumi:"mirroringDeploymentGroup"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentId pulumi.StringOutput `pulumi:"mirroringDeploymentId"`
	// Immutable. Identifier. The name of the MirroringDeployment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. Current state of the deployment.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CREATING
	// DELETING
	// OUT_OF_SYNC
	// DELETE_FAILED
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. [Output only] Update time stamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMirroringDeployment registers a new resource with the given unique name, arguments, and options.
func NewMirroringDeployment(ctx *pulumi.Context,
	name string, args *MirroringDeploymentArgs, opts ...pulumi.ResourceOption) (*MirroringDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ForwardingRule == nil {
		return nil, errors.New("invalid value for required argument 'ForwardingRule'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MirroringDeploymentGroup == nil {
		return nil, errors.New("invalid value for required argument 'MirroringDeploymentGroup'")
	}
	if args.MirroringDeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'MirroringDeploymentId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MirroringDeployment
	err := ctx.RegisterResource("gcp:networksecurity/mirroringDeployment:MirroringDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMirroringDeployment gets an existing MirroringDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMirroringDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MirroringDeploymentState, opts ...pulumi.ResourceOption) (*MirroringDeployment, error) {
	var resource MirroringDeployment
	err := ctx.ReadResource("gcp:networksecurity/mirroringDeployment:MirroringDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MirroringDeployment resources.
type mirroringDeploymentState struct {
	// Output only. [Output only] Create time stamp
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Required. Immutable. The regional load balancer which the mirrored traffic should be forwarded
	// to. Format is:
	// projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
	ForwardingRule *string `pulumi:"forwardingRule"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeployment`.
	Location *string `pulumi:"location"`
	// Required. Immutable. The Mirroring Deployment Group that this resource is part of. Format is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup *string `pulumi:"mirroringDeploymentGroup"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentId *string `pulumi:"mirroringDeploymentId"`
	// Immutable. Identifier. The name of the MirroringDeployment.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. Current state of the deployment.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CREATING
	// DELETING
	// OUT_OF_SYNC
	// DELETE_FAILED
	State *string `pulumi:"state"`
	// Output only. [Output only] Update time stamp
	UpdateTime *string `pulumi:"updateTime"`
}

type MirroringDeploymentState struct {
	// Output only. [Output only] Create time stamp
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Required. Immutable. The regional load balancer which the mirrored traffic should be forwarded
	// to. Format is:
	// projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
	ForwardingRule pulumi.StringPtrInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeployment`.
	Location pulumi.StringPtrInput
	// Required. Immutable. The Mirroring Deployment Group that this resource is part of. Format is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup pulumi.StringPtrInput
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentId pulumi.StringPtrInput
	// Immutable. Identifier. The name of the MirroringDeployment.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling pulumi.BoolPtrInput
	// Output only. Current state of the deployment.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CREATING
	// DELETING
	// OUT_OF_SYNC
	// DELETE_FAILED
	State pulumi.StringPtrInput
	// Output only. [Output only] Update time stamp
	UpdateTime pulumi.StringPtrInput
}

func (MirroringDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*mirroringDeploymentState)(nil)).Elem()
}

type mirroringDeploymentArgs struct {
	// Required. Immutable. The regional load balancer which the mirrored traffic should be forwarded
	// to. Format is:
	// projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
	ForwardingRule string `pulumi:"forwardingRule"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeployment`.
	Location string `pulumi:"location"`
	// Required. Immutable. The Mirroring Deployment Group that this resource is part of. Format is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup string `pulumi:"mirroringDeploymentGroup"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentId string `pulumi:"mirroringDeploymentId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a MirroringDeployment resource.
type MirroringDeploymentArgs struct {
	// Required. Immutable. The regional load balancer which the mirrored traffic should be forwarded
	// to. Format is:
	// projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
	ForwardingRule pulumi.StringInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeployment`.
	Location pulumi.StringInput
	// Required. Immutable. The Mirroring Deployment Group that this resource is part of. Format is:
	// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
	MirroringDeploymentGroup pulumi.StringInput
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (MirroringDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mirroringDeploymentArgs)(nil)).Elem()
}

type MirroringDeploymentInput interface {
	pulumi.Input

	ToMirroringDeploymentOutput() MirroringDeploymentOutput
	ToMirroringDeploymentOutputWithContext(ctx context.Context) MirroringDeploymentOutput
}

func (*MirroringDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**MirroringDeployment)(nil)).Elem()
}

func (i *MirroringDeployment) ToMirroringDeploymentOutput() MirroringDeploymentOutput {
	return i.ToMirroringDeploymentOutputWithContext(context.Background())
}

func (i *MirroringDeployment) ToMirroringDeploymentOutputWithContext(ctx context.Context) MirroringDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringDeploymentOutput)
}

// MirroringDeploymentArrayInput is an input type that accepts MirroringDeploymentArray and MirroringDeploymentArrayOutput values.
// You can construct a concrete instance of `MirroringDeploymentArrayInput` via:
//
//	MirroringDeploymentArray{ MirroringDeploymentArgs{...} }
type MirroringDeploymentArrayInput interface {
	pulumi.Input

	ToMirroringDeploymentArrayOutput() MirroringDeploymentArrayOutput
	ToMirroringDeploymentArrayOutputWithContext(context.Context) MirroringDeploymentArrayOutput
}

type MirroringDeploymentArray []MirroringDeploymentInput

func (MirroringDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirroringDeployment)(nil)).Elem()
}

func (i MirroringDeploymentArray) ToMirroringDeploymentArrayOutput() MirroringDeploymentArrayOutput {
	return i.ToMirroringDeploymentArrayOutputWithContext(context.Background())
}

func (i MirroringDeploymentArray) ToMirroringDeploymentArrayOutputWithContext(ctx context.Context) MirroringDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringDeploymentArrayOutput)
}

// MirroringDeploymentMapInput is an input type that accepts MirroringDeploymentMap and MirroringDeploymentMapOutput values.
// You can construct a concrete instance of `MirroringDeploymentMapInput` via:
//
//	MirroringDeploymentMap{ "key": MirroringDeploymentArgs{...} }
type MirroringDeploymentMapInput interface {
	pulumi.Input

	ToMirroringDeploymentMapOutput() MirroringDeploymentMapOutput
	ToMirroringDeploymentMapOutputWithContext(context.Context) MirroringDeploymentMapOutput
}

type MirroringDeploymentMap map[string]MirroringDeploymentInput

func (MirroringDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirroringDeployment)(nil)).Elem()
}

func (i MirroringDeploymentMap) ToMirroringDeploymentMapOutput() MirroringDeploymentMapOutput {
	return i.ToMirroringDeploymentMapOutputWithContext(context.Background())
}

func (i MirroringDeploymentMap) ToMirroringDeploymentMapOutputWithContext(ctx context.Context) MirroringDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringDeploymentMapOutput)
}

type MirroringDeploymentOutput struct{ *pulumi.OutputState }

func (MirroringDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MirroringDeployment)(nil)).Elem()
}

func (o MirroringDeploymentOutput) ToMirroringDeploymentOutput() MirroringDeploymentOutput {
	return o
}

func (o MirroringDeploymentOutput) ToMirroringDeploymentOutputWithContext(ctx context.Context) MirroringDeploymentOutput {
	return o
}

// Output only. [Output only] Create time stamp
func (o MirroringDeploymentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o MirroringDeploymentOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Required. Immutable. The regional load balancer which the mirrored traffic should be forwarded
// to. Format is:
// projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
func (o MirroringDeploymentOutput) ForwardingRule() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.ForwardingRule }).(pulumi.StringOutput)
}

// Optional. Labels as key value pairs
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o MirroringDeploymentOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeployment`.
func (o MirroringDeploymentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. Immutable. The Mirroring Deployment Group that this resource is part of. Format is:
// `projects/{project}/locations/global/mirroringDeploymentGroups/{mirroringDeploymentGroup}`
func (o MirroringDeploymentOutput) MirroringDeploymentGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.MirroringDeploymentGroup }).(pulumi.StringOutput)
}

// Required. Id of the requesting object
// If auto-generating Id server-side, remove this field and
// mirroringDeploymentId from the methodSignature of Create RPC
//
// ***
func (o MirroringDeploymentOutput) MirroringDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.MirroringDeploymentId }).(pulumi.StringOutput)
}

// Immutable. Identifier. The name of the MirroringDeployment.
func (o MirroringDeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o MirroringDeploymentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o MirroringDeploymentOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Whether reconciling is in progress, recommended per
// https://google.aip.dev/128.
func (o MirroringDeploymentOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Output only. Current state of the deployment.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// CREATING
// DELETING
// OUT_OF_SYNC
// DELETE_FAILED
func (o MirroringDeploymentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. [Output only] Update time stamp
func (o MirroringDeploymentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeployment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MirroringDeploymentArrayOutput struct{ *pulumi.OutputState }

func (MirroringDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirroringDeployment)(nil)).Elem()
}

func (o MirroringDeploymentArrayOutput) ToMirroringDeploymentArrayOutput() MirroringDeploymentArrayOutput {
	return o
}

func (o MirroringDeploymentArrayOutput) ToMirroringDeploymentArrayOutputWithContext(ctx context.Context) MirroringDeploymentArrayOutput {
	return o
}

func (o MirroringDeploymentArrayOutput) Index(i pulumi.IntInput) MirroringDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MirroringDeployment {
		return vs[0].([]*MirroringDeployment)[vs[1].(int)]
	}).(MirroringDeploymentOutput)
}

type MirroringDeploymentMapOutput struct{ *pulumi.OutputState }

func (MirroringDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirroringDeployment)(nil)).Elem()
}

func (o MirroringDeploymentMapOutput) ToMirroringDeploymentMapOutput() MirroringDeploymentMapOutput {
	return o
}

func (o MirroringDeploymentMapOutput) ToMirroringDeploymentMapOutputWithContext(ctx context.Context) MirroringDeploymentMapOutput {
	return o
}

func (o MirroringDeploymentMapOutput) MapIndex(k pulumi.StringInput) MirroringDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MirroringDeployment {
		return vs[0].(map[string]*MirroringDeployment)[vs[1].(string)]
	}).(MirroringDeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringDeploymentInput)(nil)).Elem(), &MirroringDeployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringDeploymentArrayInput)(nil)).Elem(), MirroringDeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringDeploymentMapInput)(nil)).Elem(), MirroringDeploymentMap{})
	pulumi.RegisterOutputType(MirroringDeploymentOutput{})
	pulumi.RegisterOutputType(MirroringDeploymentArrayOutput{})
	pulumi.RegisterOutputType(MirroringDeploymentMapOutput{})
}
