// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The TlsInspectionPolicy resource contains references to CA pools in Certificate Authority Service and associated metadata.
//
// To get more information about TlsInspectionPolicy, see:
//
// * [API documentation](https://cloud.google.com/secure-web-proxy/docs/reference/network-security/rest/v1/projects.locations.tlsInspectionPolicies)
// * How-to Guides
//   - [Use TlsInspectionPolicy](https://cloud.google.com/secure-web-proxy/docs/tls-inspection-overview)
//
// ## Example Usage
//
// ### Network Security Tls Inspection Policy Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := certificateauthority.NewCaPool(ctx, "default", &certificateauthority.CaPoolArgs{
//				Name:     pulumi.String("my-basic-ca-pool"),
//				Location: pulumi.String("us-central1"),
//				Tier:     pulumi.String("DEVOPS"),
//				PublishingOptions: &certificateauthority.CaPoolPublishingOptionsArgs{
//					PublishCaCert: pulumi.Bool(false),
//					PublishCrl:    pulumi.Bool(false),
//				},
//				IssuancePolicy: &certificateauthority.CaPoolIssuancePolicyArgs{
//					MaximumLifetime: pulumi.String("1209600s"),
//					BaselineValues: &certificateauthority.CaPoolIssuancePolicyBaselineValuesArgs{
//						CaOptions: &certificateauthority.CaPoolIssuancePolicyBaselineValuesCaOptionsArgs{
//							IsCa: pulumi.Bool(false),
//						},
//						KeyUsage: &certificateauthority.CaPoolIssuancePolicyBaselineValuesKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.CaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageArgs{},
//							ExtendedKeyUsage: &certificateauthority.CaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageArgs{
//								ServerAuth: pulumi.Bool(true),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultAuthority, err := certificateauthority.NewAuthority(ctx, "default", &certificateauthority.AuthorityArgs{
//				Pool:                               _default.Name,
//				CertificateAuthorityId:             pulumi.String("my-basic-certificate-authority"),
//				Location:                           pulumi.String("us-central1"),
//				Lifetime:                           pulumi.String("86400s"),
//				Type:                               pulumi.String("SELF_SIGNED"),
//				DeletionProtection:                 pulumi.Bool(false),
//				SkipGracePeriod:                    pulumi.Bool(true),
//				IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("Test LLC"),
//							CommonName:   pulumi.String("my-ca"),
//						},
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
//								ServerAuth: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			tlsInspectionPermission, err := certificateauthority.NewCaPoolIamMember(ctx, "tls_inspection_permission", &certificateauthority.CaPoolIamMemberArgs{
//				CaPool: _default.ID(),
//				Role:   pulumi.String("roles/privateca.certificateManager"),
//				Member: pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-networksecurity.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewTlsInspectionPolicy(ctx, "default", &networksecurity.TlsInspectionPolicyArgs{
//				Name:               pulumi.String("my-tls-inspection-policy"),
//				Location:           pulumi.String("us-central1"),
//				CaPool:             _default.ID(),
//				ExcludePublicCaSet: pulumi.Bool(false),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				_default,
//				defaultAuthority,
//				tlsInspectionPermission,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Security Tls Inspection Policy Custom
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/projects"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := certificateauthority.NewCaPool(ctx, "default", &certificateauthority.CaPoolArgs{
//				Name:     pulumi.String("my-basic-ca-pool"),
//				Location: pulumi.String("us-central1"),
//				Tier:     pulumi.String("DEVOPS"),
//				PublishingOptions: &certificateauthority.CaPoolPublishingOptionsArgs{
//					PublishCaCert: pulumi.Bool(false),
//					PublishCrl:    pulumi.Bool(false),
//				},
//				IssuancePolicy: &certificateauthority.CaPoolIssuancePolicyArgs{
//					MaximumLifetime: pulumi.String("1209600s"),
//					BaselineValues: &certificateauthority.CaPoolIssuancePolicyBaselineValuesArgs{
//						CaOptions: &certificateauthority.CaPoolIssuancePolicyBaselineValuesCaOptionsArgs{
//							IsCa: pulumi.Bool(false),
//						},
//						KeyUsage: &certificateauthority.CaPoolIssuancePolicyBaselineValuesKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.CaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageArgs{},
//							ExtendedKeyUsage: &certificateauthority.CaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageArgs{
//								ServerAuth: pulumi.Bool(true),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultAuthority, err := certificateauthority.NewAuthority(ctx, "default", &certificateauthority.AuthorityArgs{
//				Pool:                               _default.Name,
//				CertificateAuthorityId:             pulumi.String("my-basic-certificate-authority"),
//				Location:                           pulumi.String("us-central1"),
//				Lifetime:                           pulumi.String("86400s"),
//				Type:                               pulumi.String("SELF_SIGNED"),
//				DeletionProtection:                 pulumi.Bool(false),
//				SkipGracePeriod:                    pulumi.Bool(true),
//				IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("Test LLC"),
//							CommonName:   pulumi.String("my-ca"),
//						},
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
//								ServerAuth: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			nsSa, err := projects.NewServiceIdentity(ctx, "ns_sa", &projects.ServiceIdentityArgs{
//				Service: pulumi.String("networksecurity.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCaPoolIamMember, err := certificateauthority.NewCaPoolIamMember(ctx, "default", &certificateauthority.CaPoolIamMemberArgs{
//				CaPool: _default.ID(),
//				Role:   pulumi.String("roles/privateca.certificateManager"),
//				Member: nsSa.Member,
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/ca_cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/ca_cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultTrustConfig, err := certificatemanager.NewTrustConfig(ctx, "default", &certificatemanager.TrustConfigArgs{
//				Name:        pulumi.String("my-trust-config"),
//				Description: pulumi.String("sample trust config description"),
//				Location:    pulumi.String("us-central1"),
//				TrustStores: certificatemanager.TrustConfigTrustStoreArray{
//					&certificatemanager.TrustConfigTrustStoreArgs{
//						TrustAnchors: certificatemanager.TrustConfigTrustStoreTrustAnchorArray{
//							&certificatemanager.TrustConfigTrustStoreTrustAnchorArgs{
//								PemCertificate: pulumi.String(invokeFile.Result),
//							},
//						},
//						IntermediateCas: certificatemanager.TrustConfigTrustStoreIntermediateCaArray{
//							&certificatemanager.TrustConfigTrustStoreIntermediateCaArgs{
//								PemCertificate: pulumi.String(invokeFile1.Result),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewTlsInspectionPolicy(ctx, "default", &networksecurity.TlsInspectionPolicyArgs{
//				Name:               pulumi.String("my-tls-inspection-policy"),
//				Location:           pulumi.String("us-central1"),
//				CaPool:             _default.ID(),
//				ExcludePublicCaSet: pulumi.Bool(false),
//				MinTlsVersion:      pulumi.String("TLS_1_0"),
//				TrustConfig:        defaultTrustConfig.ID(),
//				TlsFeatureProfile:  pulumi.String("PROFILE_CUSTOM"),
//				CustomTlsFeatures: pulumi.StringArray{
//					pulumi.String("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"),
//					pulumi.String("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"),
//					pulumi.String("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"),
//					pulumi.String("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"),
//					pulumi.String("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"),
//					pulumi.String("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"),
//					pulumi.String("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"),
//					pulumi.String("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"),
//					pulumi.String("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"),
//					pulumi.String("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"),
//					pulumi.String("TLS_RSA_WITH_3DES_EDE_CBC_SHA"),
//					pulumi.String("TLS_RSA_WITH_AES_128_CBC_SHA"),
//					pulumi.String("TLS_RSA_WITH_AES_128_GCM_SHA256"),
//					pulumi.String("TLS_RSA_WITH_AES_256_CBC_SHA"),
//					pulumi.String("TLS_RSA_WITH_AES_256_GCM_SHA384"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				defaultAuthority,
//				defaultCaPoolIamMember,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TlsInspectionPolicy can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/tlsInspectionPolicies/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, TlsInspectionPolicy can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default projects/{{project}}/locations/{{location}}/tlsInspectionPolicies/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default {{location}}/{{name}}
// ```
type TlsInspectionPolicy struct {
	pulumi.CustomResourceState

	// A CA pool resource used to issue interception certificates.
	CaPool pulumi.StringOutput `pulumi:"caPool"`
	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// List of custom TLS cipher suites selected. This field is valid only if the selected tlsFeatureProfile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
	CustomTlsFeatures pulumi.StringArrayOutput `pulumi:"customTlsFeatures"`
	// Free-text description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
	ExcludePublicCaSet pulumi.BoolPtrOutput `pulumi:"excludePublicCaSet"`
	// The location of the tls inspection policy.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `TLS_VERSION_UNSPECIFIED`.
	// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
	MinTlsVersion pulumi.StringPtrOutput `pulumi:"minTlsVersion"`
	// Short name of the TlsInspectionPolicy resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `PROFILE_UNSPECIFIED`.
	// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
	TlsFeatureProfile pulumi.StringPtrOutput `pulumi:"tlsFeatureProfile"`
	// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
	TrustConfig pulumi.StringPtrOutput `pulumi:"trustConfig"`
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTlsInspectionPolicy registers a new resource with the given unique name, arguments, and options.
func NewTlsInspectionPolicy(ctx *pulumi.Context,
	name string, args *TlsInspectionPolicyArgs, opts ...pulumi.ResourceOption) (*TlsInspectionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CaPool == nil {
		return nil, errors.New("invalid value for required argument 'CaPool'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TlsInspectionPolicy
	err := ctx.RegisterResource("gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsInspectionPolicy gets an existing TlsInspectionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsInspectionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsInspectionPolicyState, opts ...pulumi.ResourceOption) (*TlsInspectionPolicy, error) {
	var resource TlsInspectionPolicy
	err := ctx.ReadResource("gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsInspectionPolicy resources.
type tlsInspectionPolicyState struct {
	// A CA pool resource used to issue interception certificates.
	CaPool *string `pulumi:"caPool"`
	// The timestamp when the resource was created.
	CreateTime *string `pulumi:"createTime"`
	// List of custom TLS cipher suites selected. This field is valid only if the selected tlsFeatureProfile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
	CustomTlsFeatures []string `pulumi:"customTlsFeatures"`
	// Free-text description of the resource.
	Description *string `pulumi:"description"`
	// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
	ExcludePublicCaSet *bool `pulumi:"excludePublicCaSet"`
	// The location of the tls inspection policy.
	Location *string `pulumi:"location"`
	// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `TLS_VERSION_UNSPECIFIED`.
	// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// Short name of the TlsInspectionPolicy resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `PROFILE_UNSPECIFIED`.
	// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
	TlsFeatureProfile *string `pulumi:"tlsFeatureProfile"`
	// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
	TrustConfig *string `pulumi:"trustConfig"`
	// The timestamp when the resource was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type TlsInspectionPolicyState struct {
	// A CA pool resource used to issue interception certificates.
	CaPool pulumi.StringPtrInput
	// The timestamp when the resource was created.
	CreateTime pulumi.StringPtrInput
	// List of custom TLS cipher suites selected. This field is valid only if the selected tlsFeatureProfile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
	CustomTlsFeatures pulumi.StringArrayInput
	// Free-text description of the resource.
	Description pulumi.StringPtrInput
	// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
	ExcludePublicCaSet pulumi.BoolPtrInput
	// The location of the tls inspection policy.
	Location pulumi.StringPtrInput
	// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `TLS_VERSION_UNSPECIFIED`.
	// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
	MinTlsVersion pulumi.StringPtrInput
	// Short name of the TlsInspectionPolicy resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `PROFILE_UNSPECIFIED`.
	// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
	TlsFeatureProfile pulumi.StringPtrInput
	// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
	TrustConfig pulumi.StringPtrInput
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringPtrInput
}

func (TlsInspectionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsInspectionPolicyState)(nil)).Elem()
}

type tlsInspectionPolicyArgs struct {
	// A CA pool resource used to issue interception certificates.
	CaPool string `pulumi:"caPool"`
	// List of custom TLS cipher suites selected. This field is valid only if the selected tlsFeatureProfile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
	CustomTlsFeatures []string `pulumi:"customTlsFeatures"`
	// Free-text description of the resource.
	Description *string `pulumi:"description"`
	// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
	ExcludePublicCaSet *bool `pulumi:"excludePublicCaSet"`
	// The location of the tls inspection policy.
	Location *string `pulumi:"location"`
	// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `TLS_VERSION_UNSPECIFIED`.
	// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// Short name of the TlsInspectionPolicy resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `PROFILE_UNSPECIFIED`.
	// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
	TlsFeatureProfile *string `pulumi:"tlsFeatureProfile"`
	// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
	TrustConfig *string `pulumi:"trustConfig"`
}

// The set of arguments for constructing a TlsInspectionPolicy resource.
type TlsInspectionPolicyArgs struct {
	// A CA pool resource used to issue interception certificates.
	CaPool pulumi.StringInput
	// List of custom TLS cipher suites selected. This field is valid only if the selected tlsFeatureProfile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
	CustomTlsFeatures pulumi.StringArrayInput
	// Free-text description of the resource.
	Description pulumi.StringPtrInput
	// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
	ExcludePublicCaSet pulumi.BoolPtrInput
	// The location of the tls inspection policy.
	Location pulumi.StringPtrInput
	// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `TLS_VERSION_UNSPECIFIED`.
	// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
	MinTlsVersion pulumi.StringPtrInput
	// Short name of the TlsInspectionPolicy resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
	// Default value is `PROFILE_UNSPECIFIED`.
	// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
	TlsFeatureProfile pulumi.StringPtrInput
	// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
	TrustConfig pulumi.StringPtrInput
}

func (TlsInspectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsInspectionPolicyArgs)(nil)).Elem()
}

type TlsInspectionPolicyInput interface {
	pulumi.Input

	ToTlsInspectionPolicyOutput() TlsInspectionPolicyOutput
	ToTlsInspectionPolicyOutputWithContext(ctx context.Context) TlsInspectionPolicyOutput
}

func (*TlsInspectionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsInspectionPolicy)(nil)).Elem()
}

func (i *TlsInspectionPolicy) ToTlsInspectionPolicyOutput() TlsInspectionPolicyOutput {
	return i.ToTlsInspectionPolicyOutputWithContext(context.Background())
}

func (i *TlsInspectionPolicy) ToTlsInspectionPolicyOutputWithContext(ctx context.Context) TlsInspectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsInspectionPolicyOutput)
}

// TlsInspectionPolicyArrayInput is an input type that accepts TlsInspectionPolicyArray and TlsInspectionPolicyArrayOutput values.
// You can construct a concrete instance of `TlsInspectionPolicyArrayInput` via:
//
//	TlsInspectionPolicyArray{ TlsInspectionPolicyArgs{...} }
type TlsInspectionPolicyArrayInput interface {
	pulumi.Input

	ToTlsInspectionPolicyArrayOutput() TlsInspectionPolicyArrayOutput
	ToTlsInspectionPolicyArrayOutputWithContext(context.Context) TlsInspectionPolicyArrayOutput
}

type TlsInspectionPolicyArray []TlsInspectionPolicyInput

func (TlsInspectionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsInspectionPolicy)(nil)).Elem()
}

func (i TlsInspectionPolicyArray) ToTlsInspectionPolicyArrayOutput() TlsInspectionPolicyArrayOutput {
	return i.ToTlsInspectionPolicyArrayOutputWithContext(context.Background())
}

func (i TlsInspectionPolicyArray) ToTlsInspectionPolicyArrayOutputWithContext(ctx context.Context) TlsInspectionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsInspectionPolicyArrayOutput)
}

// TlsInspectionPolicyMapInput is an input type that accepts TlsInspectionPolicyMap and TlsInspectionPolicyMapOutput values.
// You can construct a concrete instance of `TlsInspectionPolicyMapInput` via:
//
//	TlsInspectionPolicyMap{ "key": TlsInspectionPolicyArgs{...} }
type TlsInspectionPolicyMapInput interface {
	pulumi.Input

	ToTlsInspectionPolicyMapOutput() TlsInspectionPolicyMapOutput
	ToTlsInspectionPolicyMapOutputWithContext(context.Context) TlsInspectionPolicyMapOutput
}

type TlsInspectionPolicyMap map[string]TlsInspectionPolicyInput

func (TlsInspectionPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsInspectionPolicy)(nil)).Elem()
}

func (i TlsInspectionPolicyMap) ToTlsInspectionPolicyMapOutput() TlsInspectionPolicyMapOutput {
	return i.ToTlsInspectionPolicyMapOutputWithContext(context.Background())
}

func (i TlsInspectionPolicyMap) ToTlsInspectionPolicyMapOutputWithContext(ctx context.Context) TlsInspectionPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsInspectionPolicyMapOutput)
}

type TlsInspectionPolicyOutput struct{ *pulumi.OutputState }

func (TlsInspectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsInspectionPolicy)(nil)).Elem()
}

func (o TlsInspectionPolicyOutput) ToTlsInspectionPolicyOutput() TlsInspectionPolicyOutput {
	return o
}

func (o TlsInspectionPolicyOutput) ToTlsInspectionPolicyOutputWithContext(ctx context.Context) TlsInspectionPolicyOutput {
	return o
}

// A CA pool resource used to issue interception certificates.
func (o TlsInspectionPolicyOutput) CaPool() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringOutput { return v.CaPool }).(pulumi.StringOutput)
}

// The timestamp when the resource was created.
func (o TlsInspectionPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// List of custom TLS cipher suites selected. This field is valid only if the selected tlsFeatureProfile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
func (o TlsInspectionPolicyOutput) CustomTlsFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringArrayOutput { return v.CustomTlsFeatures }).(pulumi.StringArrayOutput)
}

// Free-text description of the resource.
func (o TlsInspectionPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
func (o TlsInspectionPolicyOutput) ExcludePublicCaSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.BoolPtrOutput { return v.ExcludePublicCaSet }).(pulumi.BoolPtrOutput)
}

// The location of the tls inspection policy.
func (o TlsInspectionPolicyOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
// Default value is `TLS_VERSION_UNSPECIFIED`.
// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
func (o TlsInspectionPolicyOutput) MinTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringPtrOutput { return v.MinTlsVersion }).(pulumi.StringPtrOutput)
}

// Short name of the TlsInspectionPolicy resource to be created.
func (o TlsInspectionPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TlsInspectionPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
// Default value is `PROFILE_UNSPECIFIED`.
// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
func (o TlsInspectionPolicyOutput) TlsFeatureProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringPtrOutput { return v.TlsFeatureProfile }).(pulumi.StringPtrOutput)
}

// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
func (o TlsInspectionPolicyOutput) TrustConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringPtrOutput { return v.TrustConfig }).(pulumi.StringPtrOutput)
}

// The timestamp when the resource was updated.
func (o TlsInspectionPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsInspectionPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TlsInspectionPolicyArrayOutput struct{ *pulumi.OutputState }

func (TlsInspectionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsInspectionPolicy)(nil)).Elem()
}

func (o TlsInspectionPolicyArrayOutput) ToTlsInspectionPolicyArrayOutput() TlsInspectionPolicyArrayOutput {
	return o
}

func (o TlsInspectionPolicyArrayOutput) ToTlsInspectionPolicyArrayOutputWithContext(ctx context.Context) TlsInspectionPolicyArrayOutput {
	return o
}

func (o TlsInspectionPolicyArrayOutput) Index(i pulumi.IntInput) TlsInspectionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TlsInspectionPolicy {
		return vs[0].([]*TlsInspectionPolicy)[vs[1].(int)]
	}).(TlsInspectionPolicyOutput)
}

type TlsInspectionPolicyMapOutput struct{ *pulumi.OutputState }

func (TlsInspectionPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsInspectionPolicy)(nil)).Elem()
}

func (o TlsInspectionPolicyMapOutput) ToTlsInspectionPolicyMapOutput() TlsInspectionPolicyMapOutput {
	return o
}

func (o TlsInspectionPolicyMapOutput) ToTlsInspectionPolicyMapOutputWithContext(ctx context.Context) TlsInspectionPolicyMapOutput {
	return o
}

func (o TlsInspectionPolicyMapOutput) MapIndex(k pulumi.StringInput) TlsInspectionPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TlsInspectionPolicy {
		return vs[0].(map[string]*TlsInspectionPolicy)[vs[1].(string)]
	}).(TlsInspectionPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsInspectionPolicyInput)(nil)).Elem(), &TlsInspectionPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsInspectionPolicyArrayInput)(nil)).Elem(), TlsInspectionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsInspectionPolicyMapInput)(nil)).Elem(), TlsInspectionPolicyMap{})
	pulumi.RegisterOutputType(TlsInspectionPolicyOutput{})
	pulumi.RegisterOutputType(TlsInspectionPolicyArrayOutput{})
	pulumi.RegisterOutputType(TlsInspectionPolicyMapOutput{})
}
