// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Network Security Mirroring Deployment Group Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Name:                  pulumi.String("example-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewMirroringDeploymentGroup(ctx, "default", &networksecurity.MirroringDeploymentGroupArgs{
//				MirroringDeploymentGroupId: pulumi.String("example-dg"),
//				Location:                   pulumi.String("global"),
//				Network:                    network.ID(),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MirroringDeploymentGroup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/mirroringDeploymentGroups/{{mirroring_deployment_group_id}}`
//
// * `{{project}}/{{location}}/{{mirroring_deployment_group_id}}`
//
// * `{{location}}/{{mirroring_deployment_group_id}}`
//
// When using the `pulumi import` command, MirroringDeploymentGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default projects/{{project}}/locations/{{location}}/mirroringDeploymentGroups/{{mirroring_deployment_group_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default {{project}}/{{location}}/{{mirroring_deployment_group_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default {{location}}/{{mirroring_deployment_group_id}}
// ```
type MirroringDeploymentGroup struct {
	pulumi.CustomResourceState

	// Output only. The list of Mirroring Endpoint Groups that are connected to this resource.
	// Structure is documented below.
	ConnectedEndpointGroups MirroringDeploymentGroupConnectedEndpointGroupArrayOutput `pulumi:"connectedEndpointGroups"`
	// Output only. [Output only] Create time stamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeploymentGroup`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentGroupId pulumi.StringOutput `pulumi:"mirroringDeploymentGroupId"`
	// (Output)
	// Output only. A connected mirroring endpoint group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. Immutable. The network that is being used for the deployment. Format is:
	// projects/{project}/global/networks/{network}.
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. Current state of the deployment group.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CREATING
	// DELETING
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. [Output only] Update time stamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMirroringDeploymentGroup registers a new resource with the given unique name, arguments, and options.
func NewMirroringDeploymentGroup(ctx *pulumi.Context,
	name string, args *MirroringDeploymentGroupArgs, opts ...pulumi.ResourceOption) (*MirroringDeploymentGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MirroringDeploymentGroupId == nil {
		return nil, errors.New("invalid value for required argument 'MirroringDeploymentGroupId'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MirroringDeploymentGroup
	err := ctx.RegisterResource("gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMirroringDeploymentGroup gets an existing MirroringDeploymentGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMirroringDeploymentGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MirroringDeploymentGroupState, opts ...pulumi.ResourceOption) (*MirroringDeploymentGroup, error) {
	var resource MirroringDeploymentGroup
	err := ctx.ReadResource("gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MirroringDeploymentGroup resources.
type mirroringDeploymentGroupState struct {
	// Output only. The list of Mirroring Endpoint Groups that are connected to this resource.
	// Structure is documented below.
	ConnectedEndpointGroups []MirroringDeploymentGroupConnectedEndpointGroup `pulumi:"connectedEndpointGroups"`
	// Output only. [Output only] Create time stamp
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeploymentGroup`.
	Location *string `pulumi:"location"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentGroupId *string `pulumi:"mirroringDeploymentGroupId"`
	// (Output)
	// Output only. A connected mirroring endpoint group.
	Name *string `pulumi:"name"`
	// Required. Immutable. The network that is being used for the deployment. Format is:
	// projects/{project}/global/networks/{network}.
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. Current state of the deployment group.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CREATING
	// DELETING
	State *string `pulumi:"state"`
	// Output only. [Output only] Update time stamp
	UpdateTime *string `pulumi:"updateTime"`
}

type MirroringDeploymentGroupState struct {
	// Output only. The list of Mirroring Endpoint Groups that are connected to this resource.
	// Structure is documented below.
	ConnectedEndpointGroups MirroringDeploymentGroupConnectedEndpointGroupArrayInput
	// Output only. [Output only] Create time stamp
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeploymentGroup`.
	Location pulumi.StringPtrInput
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentGroupId pulumi.StringPtrInput
	// (Output)
	// Output only. A connected mirroring endpoint group.
	Name pulumi.StringPtrInput
	// Required. Immutable. The network that is being used for the deployment. Format is:
	// projects/{project}/global/networks/{network}.
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Whether reconciling is in progress, recommended per
	// https://google.aip.dev/128.
	Reconciling pulumi.BoolPtrInput
	// Output only. Current state of the deployment group.
	// Possible values:
	// STATE_UNSPECIFIED
	// ACTIVE
	// CREATING
	// DELETING
	State pulumi.StringPtrInput
	// Output only. [Output only] Update time stamp
	UpdateTime pulumi.StringPtrInput
}

func (MirroringDeploymentGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*mirroringDeploymentGroupState)(nil)).Elem()
}

type mirroringDeploymentGroupArgs struct {
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeploymentGroup`.
	Location string `pulumi:"location"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentGroupId string `pulumi:"mirroringDeploymentGroupId"`
	// Required. Immutable. The network that is being used for the deployment. Format is:
	// projects/{project}/global/networks/{network}.
	Network string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a MirroringDeploymentGroup resource.
type MirroringDeploymentGroupArgs struct {
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeploymentGroup`.
	Location pulumi.StringInput
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// mirroringDeploymentGroupId from the methodSignature of Create RPC
	//
	// ***
	MirroringDeploymentGroupId pulumi.StringInput
	// Required. Immutable. The network that is being used for the deployment. Format is:
	// projects/{project}/global/networks/{network}.
	Network pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (MirroringDeploymentGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mirroringDeploymentGroupArgs)(nil)).Elem()
}

type MirroringDeploymentGroupInput interface {
	pulumi.Input

	ToMirroringDeploymentGroupOutput() MirroringDeploymentGroupOutput
	ToMirroringDeploymentGroupOutputWithContext(ctx context.Context) MirroringDeploymentGroupOutput
}

func (*MirroringDeploymentGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**MirroringDeploymentGroup)(nil)).Elem()
}

func (i *MirroringDeploymentGroup) ToMirroringDeploymentGroupOutput() MirroringDeploymentGroupOutput {
	return i.ToMirroringDeploymentGroupOutputWithContext(context.Background())
}

func (i *MirroringDeploymentGroup) ToMirroringDeploymentGroupOutputWithContext(ctx context.Context) MirroringDeploymentGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringDeploymentGroupOutput)
}

// MirroringDeploymentGroupArrayInput is an input type that accepts MirroringDeploymentGroupArray and MirroringDeploymentGroupArrayOutput values.
// You can construct a concrete instance of `MirroringDeploymentGroupArrayInput` via:
//
//	MirroringDeploymentGroupArray{ MirroringDeploymentGroupArgs{...} }
type MirroringDeploymentGroupArrayInput interface {
	pulumi.Input

	ToMirroringDeploymentGroupArrayOutput() MirroringDeploymentGroupArrayOutput
	ToMirroringDeploymentGroupArrayOutputWithContext(context.Context) MirroringDeploymentGroupArrayOutput
}

type MirroringDeploymentGroupArray []MirroringDeploymentGroupInput

func (MirroringDeploymentGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirroringDeploymentGroup)(nil)).Elem()
}

func (i MirroringDeploymentGroupArray) ToMirroringDeploymentGroupArrayOutput() MirroringDeploymentGroupArrayOutput {
	return i.ToMirroringDeploymentGroupArrayOutputWithContext(context.Background())
}

func (i MirroringDeploymentGroupArray) ToMirroringDeploymentGroupArrayOutputWithContext(ctx context.Context) MirroringDeploymentGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringDeploymentGroupArrayOutput)
}

// MirroringDeploymentGroupMapInput is an input type that accepts MirroringDeploymentGroupMap and MirroringDeploymentGroupMapOutput values.
// You can construct a concrete instance of `MirroringDeploymentGroupMapInput` via:
//
//	MirroringDeploymentGroupMap{ "key": MirroringDeploymentGroupArgs{...} }
type MirroringDeploymentGroupMapInput interface {
	pulumi.Input

	ToMirroringDeploymentGroupMapOutput() MirroringDeploymentGroupMapOutput
	ToMirroringDeploymentGroupMapOutputWithContext(context.Context) MirroringDeploymentGroupMapOutput
}

type MirroringDeploymentGroupMap map[string]MirroringDeploymentGroupInput

func (MirroringDeploymentGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirroringDeploymentGroup)(nil)).Elem()
}

func (i MirroringDeploymentGroupMap) ToMirroringDeploymentGroupMapOutput() MirroringDeploymentGroupMapOutput {
	return i.ToMirroringDeploymentGroupMapOutputWithContext(context.Background())
}

func (i MirroringDeploymentGroupMap) ToMirroringDeploymentGroupMapOutputWithContext(ctx context.Context) MirroringDeploymentGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirroringDeploymentGroupMapOutput)
}

type MirroringDeploymentGroupOutput struct{ *pulumi.OutputState }

func (MirroringDeploymentGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MirroringDeploymentGroup)(nil)).Elem()
}

func (o MirroringDeploymentGroupOutput) ToMirroringDeploymentGroupOutput() MirroringDeploymentGroupOutput {
	return o
}

func (o MirroringDeploymentGroupOutput) ToMirroringDeploymentGroupOutputWithContext(ctx context.Context) MirroringDeploymentGroupOutput {
	return o
}

// Output only. The list of Mirroring Endpoint Groups that are connected to this resource.
// Structure is documented below.
func (o MirroringDeploymentGroupOutput) ConnectedEndpointGroups() MirroringDeploymentGroupConnectedEndpointGroupArrayOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) MirroringDeploymentGroupConnectedEndpointGroupArrayOutput {
		return v.ConnectedEndpointGroups
	}).(MirroringDeploymentGroupConnectedEndpointGroupArrayOutput)
}

// Output only. [Output only] Create time stamp
func (o MirroringDeploymentGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o MirroringDeploymentGroupOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. Labels as key value pairs
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o MirroringDeploymentGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringDeploymentGroup`.
func (o MirroringDeploymentGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. Id of the requesting object
// If auto-generating Id server-side, remove this field and
// mirroringDeploymentGroupId from the methodSignature of Create RPC
//
// ***
func (o MirroringDeploymentGroupOutput) MirroringDeploymentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringOutput { return v.MirroringDeploymentGroupId }).(pulumi.StringOutput)
}

// (Output)
// Output only. A connected mirroring endpoint group.
func (o MirroringDeploymentGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. Immutable. The network that is being used for the deployment. Format is:
// projects/{project}/global/networks/{network}.
func (o MirroringDeploymentGroupOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o MirroringDeploymentGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o MirroringDeploymentGroupOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Whether reconciling is in progress, recommended per
// https://google.aip.dev/128.
func (o MirroringDeploymentGroupOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Output only. Current state of the deployment group.
// Possible values:
// STATE_UNSPECIFIED
// ACTIVE
// CREATING
// DELETING
func (o MirroringDeploymentGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. [Output only] Update time stamp
func (o MirroringDeploymentGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MirroringDeploymentGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MirroringDeploymentGroupArrayOutput struct{ *pulumi.OutputState }

func (MirroringDeploymentGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirroringDeploymentGroup)(nil)).Elem()
}

func (o MirroringDeploymentGroupArrayOutput) ToMirroringDeploymentGroupArrayOutput() MirroringDeploymentGroupArrayOutput {
	return o
}

func (o MirroringDeploymentGroupArrayOutput) ToMirroringDeploymentGroupArrayOutputWithContext(ctx context.Context) MirroringDeploymentGroupArrayOutput {
	return o
}

func (o MirroringDeploymentGroupArrayOutput) Index(i pulumi.IntInput) MirroringDeploymentGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MirroringDeploymentGroup {
		return vs[0].([]*MirroringDeploymentGroup)[vs[1].(int)]
	}).(MirroringDeploymentGroupOutput)
}

type MirroringDeploymentGroupMapOutput struct{ *pulumi.OutputState }

func (MirroringDeploymentGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirroringDeploymentGroup)(nil)).Elem()
}

func (o MirroringDeploymentGroupMapOutput) ToMirroringDeploymentGroupMapOutput() MirroringDeploymentGroupMapOutput {
	return o
}

func (o MirroringDeploymentGroupMapOutput) ToMirroringDeploymentGroupMapOutputWithContext(ctx context.Context) MirroringDeploymentGroupMapOutput {
	return o
}

func (o MirroringDeploymentGroupMapOutput) MapIndex(k pulumi.StringInput) MirroringDeploymentGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MirroringDeploymentGroup {
		return vs[0].(map[string]*MirroringDeploymentGroup)[vs[1].(string)]
	}).(MirroringDeploymentGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringDeploymentGroupInput)(nil)).Elem(), &MirroringDeploymentGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringDeploymentGroupArrayInput)(nil)).Elem(), MirroringDeploymentGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirroringDeploymentGroupMapInput)(nil)).Elem(), MirroringDeploymentGroupMap{})
	pulumi.RegisterOutputType(MirroringDeploymentGroupOutput{})
	pulumi.RegisterOutputType(MirroringDeploymentGroupArrayOutput{})
	pulumi.RegisterOutputType(MirroringDeploymentGroupMapOutput{})
}
