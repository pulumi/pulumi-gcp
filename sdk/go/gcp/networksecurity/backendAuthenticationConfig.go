// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BackendAuthenticationConfig groups the TrustConfig together with other settings that control how the load balancer authenticates, and expresses its identity to the backend.
//
// To get more information about BackendAuthenticationConfig, see:
// * How-to Guides
//   - [Backend mTLS](https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#backend-authentication-config)
//
// ## Example Usage
//
// ### Network Security Backend Authentication Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networksecurity.NewBackendAuthenticationConfig(ctx, "default", &networksecurity.BackendAuthenticationConfigArgs{
//				Name: pulumi.String("my-backend-authentication-config"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Description:    pulumi.String("my description"),
//				WellKnownRoots: pulumi.String("PUBLIC_ROOTS"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Security Backend Authentication Config Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/key.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			certificate, err := certificatemanager.NewCertificate(ctx, "certificate", &certificatemanager.CertificateArgs{
//				Name: pulumi.String("my-certificate"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Location: pulumi.String("global"),
//				SelfManaged: &certificatemanager.CertificateSelfManagedArgs{
//					PemCertificate: pulumi.String(invokeFile.Result),
//					PemPrivateKey:  pulumi.String(invokeFile1.Result),
//				},
//				Scope: pulumi.String("CLIENT_AUTH"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile2, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile3, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			trustConfig, err := certificatemanager.NewTrustConfig(ctx, "trust_config", &certificatemanager.TrustConfigArgs{
//				Name:        pulumi.String("my-trust-config"),
//				Description: pulumi.String("sample description for the trust config"),
//				Location:    pulumi.String("global"),
//				TrustStores: certificatemanager.TrustConfigTrustStoreArray{
//					&certificatemanager.TrustConfigTrustStoreArgs{
//						TrustAnchors: certificatemanager.TrustConfigTrustStoreTrustAnchorArray{
//							&certificatemanager.TrustConfigTrustStoreTrustAnchorArgs{
//								PemCertificate: pulumi.String(invokeFile2.Result),
//							},
//						},
//						IntermediateCas: certificatemanager.TrustConfigTrustStoreIntermediateCaArray{
//							&certificatemanager.TrustConfigTrustStoreIntermediateCaArgs{
//								PemCertificate: pulumi.String(invokeFile3.Result),
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networksecurity.NewBackendAuthenticationConfig(ctx, "default", &networksecurity.BackendAuthenticationConfigArgs{
//				Name: pulumi.String("my-backend-authentication-config"),
//				Labels: pulumi.StringMap{
//					"bar": pulumi.String("foo"),
//				},
//				Location:          pulumi.String("global"),
//				Description:       pulumi.String("my description"),
//				WellKnownRoots:    pulumi.String("PUBLIC_ROOTS"),
//				ClientCertificate: certificate.ID(),
//				TrustConfig:       trustConfig.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Backend Service Tls Settings
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultHealthCheck, err := compute.NewHealthCheck(ctx, "default", &compute.HealthCheckArgs{
//				Name: pulumi.String("health-check"),
//				HttpHealthCheck: &compute.HealthCheckHttpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultBackendAuthenticationConfig, err := networksecurity.NewBackendAuthenticationConfig(ctx, "default", &networksecurity.BackendAuthenticationConfigArgs{
//				Name:           pulumi.String("authentication"),
//				WellKnownRoots: pulumi.String("PUBLIC_ROOTS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
//				Name:                pulumi.String("backend-service"),
//				HealthChecks:        defaultHealthCheck.ID(),
//				LoadBalancingScheme: pulumi.String("EXTERNAL_MANAGED"),
//				Protocol:            pulumi.String("HTTPS"),
//				TlsSettings: &compute.BackendServiceTlsSettingsArgs{
//					Sni: pulumi.String("example.com"),
//					SubjectAltNames: compute.BackendServiceTlsSettingsSubjectAltNameArray{
//						&compute.BackendServiceTlsSettingsSubjectAltNameArgs{
//							DnsName: pulumi.String("example.com"),
//						},
//						&compute.BackendServiceTlsSettingsSubjectAltNameArgs{
//							UniformResourceIdentifier: pulumi.String("https://example.com"),
//						},
//					},
//					AuthenticationConfig: defaultBackendAuthenticationConfig.ID().ApplyT(func(id string) (string, error) {
//						return fmt.Sprintf("//networksecurity.googleapis.com/%v", id), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BackendAuthenticationConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, BackendAuthenticationConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default {{location}}/{{name}}
// ```
type BackendAuthenticationConfig struct {
	pulumi.CustomResourceState

	// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
	// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
	ClientCertificate pulumi.StringPtrOutput `pulumi:"clientCertificate"`
	// Time the BackendAuthenticationConfig was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Set of label tags associated with the BackendAuthenticationConfig resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the backend authentication config.
	// The default value is `global`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of the BackendAuthenticationConfig resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
	// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
	TrustConfig pulumi.StringPtrOutput `pulumi:"trustConfig"`
	// Time the BackendAuthenticationConfig was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
	// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
	// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
	// Possible values are: `NONE`, `PUBLIC_ROOTS`.
	WellKnownRoots pulumi.StringPtrOutput `pulumi:"wellKnownRoots"`
}

// NewBackendAuthenticationConfig registers a new resource with the given unique name, arguments, and options.
func NewBackendAuthenticationConfig(ctx *pulumi.Context,
	name string, args *BackendAuthenticationConfigArgs, opts ...pulumi.ResourceOption) (*BackendAuthenticationConfig, error) {
	if args == nil {
		args = &BackendAuthenticationConfigArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendAuthenticationConfig
	err := ctx.RegisterResource("gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendAuthenticationConfig gets an existing BackendAuthenticationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendAuthenticationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendAuthenticationConfigState, opts ...pulumi.ResourceOption) (*BackendAuthenticationConfig, error) {
	var resource BackendAuthenticationConfig
	err := ctx.ReadResource("gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendAuthenticationConfig resources.
type backendAuthenticationConfigState struct {
	// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
	// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Time the BackendAuthenticationConfig was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Set of label tags associated with the BackendAuthenticationConfig resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the backend authentication config.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// Name of the BackendAuthenticationConfig resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
	// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
	TrustConfig *string `pulumi:"trustConfig"`
	// Time the BackendAuthenticationConfig was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
	// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
	// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
	// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
	// Possible values are: `NONE`, `PUBLIC_ROOTS`.
	WellKnownRoots *string `pulumi:"wellKnownRoots"`
}

type BackendAuthenticationConfigState struct {
	// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
	// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
	ClientCertificate pulumi.StringPtrInput
	// Time the BackendAuthenticationConfig was created in UTC.
	CreateTime pulumi.StringPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Set of label tags associated with the BackendAuthenticationConfig resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the backend authentication config.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// Name of the BackendAuthenticationConfig resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
	// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
	TrustConfig pulumi.StringPtrInput
	// Time the BackendAuthenticationConfig was updated in UTC.
	UpdateTime pulumi.StringPtrInput
	// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
	// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
	// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
	// Possible values are: `NONE`, `PUBLIC_ROOTS`.
	WellKnownRoots pulumi.StringPtrInput
}

func (BackendAuthenticationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendAuthenticationConfigState)(nil)).Elem()
}

type backendAuthenticationConfigArgs struct {
	// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
	// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Set of label tags associated with the BackendAuthenticationConfig resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the backend authentication config.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// Name of the BackendAuthenticationConfig resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
	// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
	TrustConfig *string `pulumi:"trustConfig"`
	// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
	// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
	// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
	// Possible values are: `NONE`, `PUBLIC_ROOTS`.
	WellKnownRoots *string `pulumi:"wellKnownRoots"`
}

// The set of arguments for constructing a BackendAuthenticationConfig resource.
type BackendAuthenticationConfigArgs struct {
	// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
	// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
	ClientCertificate pulumi.StringPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Set of label tags associated with the BackendAuthenticationConfig resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the backend authentication config.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// Name of the BackendAuthenticationConfig resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
	// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
	TrustConfig pulumi.StringPtrInput
	// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
	// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
	// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
	// Possible values are: `NONE`, `PUBLIC_ROOTS`.
	WellKnownRoots pulumi.StringPtrInput
}

func (BackendAuthenticationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendAuthenticationConfigArgs)(nil)).Elem()
}

type BackendAuthenticationConfigInput interface {
	pulumi.Input

	ToBackendAuthenticationConfigOutput() BackendAuthenticationConfigOutput
	ToBackendAuthenticationConfigOutputWithContext(ctx context.Context) BackendAuthenticationConfigOutput
}

func (*BackendAuthenticationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendAuthenticationConfig)(nil)).Elem()
}

func (i *BackendAuthenticationConfig) ToBackendAuthenticationConfigOutput() BackendAuthenticationConfigOutput {
	return i.ToBackendAuthenticationConfigOutputWithContext(context.Background())
}

func (i *BackendAuthenticationConfig) ToBackendAuthenticationConfigOutputWithContext(ctx context.Context) BackendAuthenticationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAuthenticationConfigOutput)
}

// BackendAuthenticationConfigArrayInput is an input type that accepts BackendAuthenticationConfigArray and BackendAuthenticationConfigArrayOutput values.
// You can construct a concrete instance of `BackendAuthenticationConfigArrayInput` via:
//
//	BackendAuthenticationConfigArray{ BackendAuthenticationConfigArgs{...} }
type BackendAuthenticationConfigArrayInput interface {
	pulumi.Input

	ToBackendAuthenticationConfigArrayOutput() BackendAuthenticationConfigArrayOutput
	ToBackendAuthenticationConfigArrayOutputWithContext(context.Context) BackendAuthenticationConfigArrayOutput
}

type BackendAuthenticationConfigArray []BackendAuthenticationConfigInput

func (BackendAuthenticationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendAuthenticationConfig)(nil)).Elem()
}

func (i BackendAuthenticationConfigArray) ToBackendAuthenticationConfigArrayOutput() BackendAuthenticationConfigArrayOutput {
	return i.ToBackendAuthenticationConfigArrayOutputWithContext(context.Background())
}

func (i BackendAuthenticationConfigArray) ToBackendAuthenticationConfigArrayOutputWithContext(ctx context.Context) BackendAuthenticationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAuthenticationConfigArrayOutput)
}

// BackendAuthenticationConfigMapInput is an input type that accepts BackendAuthenticationConfigMap and BackendAuthenticationConfigMapOutput values.
// You can construct a concrete instance of `BackendAuthenticationConfigMapInput` via:
//
//	BackendAuthenticationConfigMap{ "key": BackendAuthenticationConfigArgs{...} }
type BackendAuthenticationConfigMapInput interface {
	pulumi.Input

	ToBackendAuthenticationConfigMapOutput() BackendAuthenticationConfigMapOutput
	ToBackendAuthenticationConfigMapOutputWithContext(context.Context) BackendAuthenticationConfigMapOutput
}

type BackendAuthenticationConfigMap map[string]BackendAuthenticationConfigInput

func (BackendAuthenticationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendAuthenticationConfig)(nil)).Elem()
}

func (i BackendAuthenticationConfigMap) ToBackendAuthenticationConfigMapOutput() BackendAuthenticationConfigMapOutput {
	return i.ToBackendAuthenticationConfigMapOutputWithContext(context.Background())
}

func (i BackendAuthenticationConfigMap) ToBackendAuthenticationConfigMapOutputWithContext(ctx context.Context) BackendAuthenticationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAuthenticationConfigMapOutput)
}

type BackendAuthenticationConfigOutput struct{ *pulumi.OutputState }

func (BackendAuthenticationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendAuthenticationConfig)(nil)).Elem()
}

func (o BackendAuthenticationConfigOutput) ToBackendAuthenticationConfigOutput() BackendAuthenticationConfigOutput {
	return o
}

func (o BackendAuthenticationConfigOutput) ToBackendAuthenticationConfigOutputWithContext(ctx context.Context) BackendAuthenticationConfigOutput {
	return o
}

// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
func (o BackendAuthenticationConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringPtrOutput { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// Time the BackendAuthenticationConfig was created in UTC.
func (o BackendAuthenticationConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A free-text description of the resource. Max length 1024 characters.
func (o BackendAuthenticationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o BackendAuthenticationConfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Set of label tags associated with the BackendAuthenticationConfig resource.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o BackendAuthenticationConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the backend authentication config.
// The default value is `global`.
func (o BackendAuthenticationConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the BackendAuthenticationConfig resource.
func (o BackendAuthenticationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BackendAuthenticationConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o BackendAuthenticationConfigOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
func (o BackendAuthenticationConfigOutput) TrustConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringPtrOutput { return v.TrustConfig }).(pulumi.StringPtrOutput)
}

// Time the BackendAuthenticationConfig was updated in UTC.
func (o BackendAuthenticationConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
// Possible values are: `NONE`, `PUBLIC_ROOTS`.
func (o BackendAuthenticationConfigOutput) WellKnownRoots() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthenticationConfig) pulumi.StringPtrOutput { return v.WellKnownRoots }).(pulumi.StringPtrOutput)
}

type BackendAuthenticationConfigArrayOutput struct{ *pulumi.OutputState }

func (BackendAuthenticationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendAuthenticationConfig)(nil)).Elem()
}

func (o BackendAuthenticationConfigArrayOutput) ToBackendAuthenticationConfigArrayOutput() BackendAuthenticationConfigArrayOutput {
	return o
}

func (o BackendAuthenticationConfigArrayOutput) ToBackendAuthenticationConfigArrayOutputWithContext(ctx context.Context) BackendAuthenticationConfigArrayOutput {
	return o
}

func (o BackendAuthenticationConfigArrayOutput) Index(i pulumi.IntInput) BackendAuthenticationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendAuthenticationConfig {
		return vs[0].([]*BackendAuthenticationConfig)[vs[1].(int)]
	}).(BackendAuthenticationConfigOutput)
}

type BackendAuthenticationConfigMapOutput struct{ *pulumi.OutputState }

func (BackendAuthenticationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendAuthenticationConfig)(nil)).Elem()
}

func (o BackendAuthenticationConfigMapOutput) ToBackendAuthenticationConfigMapOutput() BackendAuthenticationConfigMapOutput {
	return o
}

func (o BackendAuthenticationConfigMapOutput) ToBackendAuthenticationConfigMapOutputWithContext(ctx context.Context) BackendAuthenticationConfigMapOutput {
	return o
}

func (o BackendAuthenticationConfigMapOutput) MapIndex(k pulumi.StringInput) BackendAuthenticationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendAuthenticationConfig {
		return vs[0].(map[string]*BackendAuthenticationConfig)[vs[1].(string)]
	}).(BackendAuthenticationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendAuthenticationConfigInput)(nil)).Elem(), &BackendAuthenticationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendAuthenticationConfigArrayInput)(nil)).Elem(), BackendAuthenticationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendAuthenticationConfigMapInput)(nil)).Elem(), BackendAuthenticationConfigMap{})
	pulumi.RegisterOutputType(BackendAuthenticationConfigOutput{})
	pulumi.RegisterOutputType(BackendAuthenticationConfigArrayOutput{})
	pulumi.RegisterOutputType(BackendAuthenticationConfigMapOutput{})
}
