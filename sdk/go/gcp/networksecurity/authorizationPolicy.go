// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networksecurity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Network Security Authorization Policy Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networksecurity.NewAuthorizationPolicy(ctx, "default", &networksecurity.AuthorizationPolicyArgs{
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Description: pulumi.String("my description"),
//				Action:      pulumi.String("ALLOW"),
//				Rules: networksecurity.AuthorizationPolicyRuleArray{
//					&networksecurity.AuthorizationPolicyRuleArgs{
//						Sources: networksecurity.AuthorizationPolicyRuleSourceArray{
//							&networksecurity.AuthorizationPolicyRuleSourceArgs{
//								Principals: pulumi.StringArray{
//									pulumi.String("namespace/*"),
//								},
//								IpBlocks: pulumi.StringArray{
//									pulumi.String("1.2.3.0/24"),
//								},
//							},
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Security Authorization Policy Destinations
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networksecurity.NewAuthorizationPolicy(ctx, "default", &networksecurity.AuthorizationPolicyArgs{
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Description: pulumi.String("my description"),
//				Action:      pulumi.String("ALLOW"),
//				Rules: networksecurity.AuthorizationPolicyRuleArray{
//					&networksecurity.AuthorizationPolicyRuleArgs{
//						Sources: networksecurity.AuthorizationPolicyRuleSourceArray{
//							&networksecurity.AuthorizationPolicyRuleSourceArgs{
//								Principals: pulumi.StringArray{
//									pulumi.String("namespace/*"),
//								},
//								IpBlocks: pulumi.StringArray{
//									pulumi.String("1.2.3.0/24"),
//								},
//							},
//						},
//						Destinations: networksecurity.AuthorizationPolicyRuleDestinationArray{
//							&networksecurity.AuthorizationPolicyRuleDestinationArgs{
//								Hosts: pulumi.StringArray{
//									pulumi.String("mydomain.*"),
//								},
//								Ports: pulumi.IntArray{
//									pulumi.Int(8080),
//								},
//								Methods: pulumi.StringArray{
//									pulumi.String("GET"),
//								},
//								HttpHeaderMatch: &networksecurity.AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs{
//									HeaderName: pulumi.String(":method"),
//									RegexMatch: pulumi.String("GET"),
//								},
//							},
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # AuthorizationPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:networksecurity/authorizationPolicy:AuthorizationPolicy default projects/{{project}}/locations/{{location}}/authorizationPolicies/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:networksecurity/authorizationPolicy:AuthorizationPolicy default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:networksecurity/authorizationPolicy:AuthorizationPolicy default {{location}}/{{name}}
//
// ```
type AuthorizationPolicy struct {
	pulumi.CustomResourceState

	// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	// Possible values are: `ALLOW`, `DENY`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Time the AuthorizationPolicy was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Set of label tags associated with the AuthorizationPolicy resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the authorization policy.
	// The default value is `global`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of the AuthorizationPolicy resource.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken.
	// A rule is a match if there is a matching source and destination. If left blank, the action specified in the action field will be applied on every request.
	// Structure is documented below.
	Rules AuthorizationPolicyRuleArrayOutput `pulumi:"rules"`
	// Time the AuthorizationPolicy was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAuthorizationPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationPolicy(ctx *pulumi.Context,
	name string, args *AuthorizationPolicyArgs, opts ...pulumi.ResourceOption) (*AuthorizationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthorizationPolicy
	err := ctx.RegisterResource("gcp:networksecurity/authorizationPolicy:AuthorizationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationPolicy gets an existing AuthorizationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationPolicyState, opts ...pulumi.ResourceOption) (*AuthorizationPolicy, error) {
	var resource AuthorizationPolicy
	err := ctx.ReadResource("gcp:networksecurity/authorizationPolicy:AuthorizationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationPolicy resources.
type authorizationPolicyState struct {
	// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	// Possible values are: `ALLOW`, `DENY`.
	Action *string `pulumi:"action"`
	// Time the AuthorizationPolicy was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Set of label tags associated with the AuthorizationPolicy resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the authorization policy.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// Name of the AuthorizationPolicy resource.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken.
	// A rule is a match if there is a matching source and destination. If left blank, the action specified in the action field will be applied on every request.
	// Structure is documented below.
	Rules []AuthorizationPolicyRule `pulumi:"rules"`
	// Time the AuthorizationPolicy was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type AuthorizationPolicyState struct {
	// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	// Possible values are: `ALLOW`, `DENY`.
	Action pulumi.StringPtrInput
	// Time the AuthorizationPolicy was created in UTC.
	CreateTime pulumi.StringPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Set of label tags associated with the AuthorizationPolicy resource.
	Labels pulumi.StringMapInput
	// The location of the authorization policy.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// Name of the AuthorizationPolicy resource.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken.
	// A rule is a match if there is a matching source and destination. If left blank, the action specified in the action field will be applied on every request.
	// Structure is documented below.
	Rules AuthorizationPolicyRuleArrayInput
	// Time the AuthorizationPolicy was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (AuthorizationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyState)(nil)).Elem()
}

type authorizationPolicyArgs struct {
	// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	// Possible values are: `ALLOW`, `DENY`.
	Action string `pulumi:"action"`
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Set of label tags associated with the AuthorizationPolicy resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the authorization policy.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// Name of the AuthorizationPolicy resource.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken.
	// A rule is a match if there is a matching source and destination. If left blank, the action specified in the action field will be applied on every request.
	// Structure is documented below.
	Rules []AuthorizationPolicyRule `pulumi:"rules"`
}

// The set of arguments for constructing a AuthorizationPolicy resource.
type AuthorizationPolicyArgs struct {
	// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	// Possible values are: `ALLOW`, `DENY`.
	Action pulumi.StringInput
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Set of label tags associated with the AuthorizationPolicy resource.
	Labels pulumi.StringMapInput
	// The location of the authorization policy.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// Name of the AuthorizationPolicy resource.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken.
	// A rule is a match if there is a matching source and destination. If left blank, the action specified in the action field will be applied on every request.
	// Structure is documented below.
	Rules AuthorizationPolicyRuleArrayInput
}

func (AuthorizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyArgs)(nil)).Elem()
}

type AuthorizationPolicyInput interface {
	pulumi.Input

	ToAuthorizationPolicyOutput() AuthorizationPolicyOutput
	ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput
}

func (*AuthorizationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicy)(nil)).Elem()
}

func (i *AuthorizationPolicy) ToAuthorizationPolicyOutput() AuthorizationPolicyOutput {
	return i.ToAuthorizationPolicyOutputWithContext(context.Background())
}

func (i *AuthorizationPolicy) ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyOutput)
}

// AuthorizationPolicyArrayInput is an input type that accepts AuthorizationPolicyArray and AuthorizationPolicyArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyArrayInput` via:
//
//	AuthorizationPolicyArray{ AuthorizationPolicyArgs{...} }
type AuthorizationPolicyArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyArrayOutput() AuthorizationPolicyArrayOutput
	ToAuthorizationPolicyArrayOutputWithContext(context.Context) AuthorizationPolicyArrayOutput
}

type AuthorizationPolicyArray []AuthorizationPolicyInput

func (AuthorizationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationPolicy)(nil)).Elem()
}

func (i AuthorizationPolicyArray) ToAuthorizationPolicyArrayOutput() AuthorizationPolicyArrayOutput {
	return i.ToAuthorizationPolicyArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyArray) ToAuthorizationPolicyArrayOutputWithContext(ctx context.Context) AuthorizationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyArrayOutput)
}

// AuthorizationPolicyMapInput is an input type that accepts AuthorizationPolicyMap and AuthorizationPolicyMapOutput values.
// You can construct a concrete instance of `AuthorizationPolicyMapInput` via:
//
//	AuthorizationPolicyMap{ "key": AuthorizationPolicyArgs{...} }
type AuthorizationPolicyMapInput interface {
	pulumi.Input

	ToAuthorizationPolicyMapOutput() AuthorizationPolicyMapOutput
	ToAuthorizationPolicyMapOutputWithContext(context.Context) AuthorizationPolicyMapOutput
}

type AuthorizationPolicyMap map[string]AuthorizationPolicyInput

func (AuthorizationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationPolicy)(nil)).Elem()
}

func (i AuthorizationPolicyMap) ToAuthorizationPolicyMapOutput() AuthorizationPolicyMapOutput {
	return i.ToAuthorizationPolicyMapOutputWithContext(context.Background())
}

func (i AuthorizationPolicyMap) ToAuthorizationPolicyMapOutputWithContext(ctx context.Context) AuthorizationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyMapOutput)
}

type AuthorizationPolicyOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicy)(nil)).Elem()
}

func (o AuthorizationPolicyOutput) ToAuthorizationPolicyOutput() AuthorizationPolicyOutput {
	return o
}

func (o AuthorizationPolicyOutput) ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput {
	return o
}

// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
// Possible values are: `ALLOW`, `DENY`.
func (o AuthorizationPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Time the AuthorizationPolicy was created in UTC.
func (o AuthorizationPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A free-text description of the resource. Max length 1024 characters.
func (o AuthorizationPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Set of label tags associated with the AuthorizationPolicy resource.
func (o AuthorizationPolicyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the authorization policy.
// The default value is `global`.
func (o AuthorizationPolicyOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the AuthorizationPolicy resource.
//
// ***
func (o AuthorizationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AuthorizationPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken.
// A rule is a match if there is a matching source and destination. If left blank, the action specified in the action field will be applied on every request.
// Structure is documented below.
func (o AuthorizationPolicyOutput) Rules() AuthorizationPolicyRuleArrayOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) AuthorizationPolicyRuleArrayOutput { return v.Rules }).(AuthorizationPolicyRuleArrayOutput)
}

// Time the AuthorizationPolicy was updated in UTC.
func (o AuthorizationPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AuthorizationPolicyArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationPolicy)(nil)).Elem()
}

func (o AuthorizationPolicyArrayOutput) ToAuthorizationPolicyArrayOutput() AuthorizationPolicyArrayOutput {
	return o
}

func (o AuthorizationPolicyArrayOutput) ToAuthorizationPolicyArrayOutputWithContext(ctx context.Context) AuthorizationPolicyArrayOutput {
	return o
}

func (o AuthorizationPolicyArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthorizationPolicy {
		return vs[0].([]*AuthorizationPolicy)[vs[1].(int)]
	}).(AuthorizationPolicyOutput)
}

type AuthorizationPolicyMapOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationPolicy)(nil)).Elem()
}

func (o AuthorizationPolicyMapOutput) ToAuthorizationPolicyMapOutput() AuthorizationPolicyMapOutput {
	return o
}

func (o AuthorizationPolicyMapOutput) ToAuthorizationPolicyMapOutputWithContext(ctx context.Context) AuthorizationPolicyMapOutput {
	return o
}

func (o AuthorizationPolicyMapOutput) MapIndex(k pulumi.StringInput) AuthorizationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthorizationPolicy {
		return vs[0].(map[string]*AuthorizationPolicy)[vs[1].(string)]
	}).(AuthorizationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyInput)(nil)).Elem(), &AuthorizationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyArrayInput)(nil)).Elem(), AuthorizationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyMapInput)(nil)).Elem(), AuthorizationPolicyMap{})
	pulumi.RegisterOutputType(AuthorizationPolicyOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyMapOutput{})
}
