// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Identity-Aware Proxy WebForwardingRuleService. Each of these resources serves a different use case:
//
// * `iap.WebForwardingRuleServiceIamPolicy`: Authoritative. Sets the IAM policy for the webforwardingruleservice and replaces any existing policy already attached.
// * `iap.WebForwardingRuleServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the webforwardingruleservice are preserved.
// * `iap.WebForwardingRuleServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the webforwardingruleservice are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `iap.WebForwardingRuleServiceIamPolicy`: Retrieves the IAM policy for the webforwardingruleservice
//
// > **Note:** `iap.WebForwardingRuleServiceIamPolicy` **cannot** be used in conjunction with `iap.WebForwardingRuleServiceIamBinding` and `iap.WebForwardingRuleServiceIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iap.WebForwardingRuleServiceIamBinding` resources **can be** used in conjunction with `iap.WebForwardingRuleServiceIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## iap.WebForwardingRuleServiceIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iap.httpsResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewWebForwardingRuleServiceIamPolicy(ctx, "policy", &iap.WebForwardingRuleServiceIamPolicyArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				PolicyData:                pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iap.httpsResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewWebForwardingRuleServiceIamPolicy(ctx, "policy", &iap.WebForwardingRuleServiceIamPolicyArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				PolicyData:                pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## iap.WebForwardingRuleServiceIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewWebForwardingRuleServiceIamBinding(ctx, "binding", &iap.WebForwardingRuleServiceIamBindingArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				Role:                      pulumi.String("roles/iap.httpsResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewWebForwardingRuleServiceIamBinding(ctx, "binding", &iap.WebForwardingRuleServiceIamBindingArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				Role:                      pulumi.String("roles/iap.httpsResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &iap.WebForwardingRuleServiceIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## iap.WebForwardingRuleServiceIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewWebForwardingRuleServiceIamMember(ctx, "member", &iap.WebForwardingRuleServiceIamMemberArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				Role:                      pulumi.String("roles/iap.httpsResourceAccessor"),
//				Member:                    pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewWebForwardingRuleServiceIamMember(ctx, "member", &iap.WebForwardingRuleServiceIamMemberArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				Role:                      pulumi.String("roles/iap.httpsResourceAccessor"),
//				Member:                    pulumi.String("user:jane@example.com"),
//				Condition: &iap.WebForwardingRuleServiceIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Identity-Aware Proxy WebForwardingRuleService
//
// Three different resources help you manage your IAM policy for Identity-Aware Proxy WebForwardingRuleService. Each of these resources serves a different use case:
//
// * `iap.WebForwardingRuleServiceIamPolicy`: Authoritative. Sets the IAM policy for the webforwardingruleservice and replaces any existing policy already attached.
// * `iap.WebForwardingRuleServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the webforwardingruleservice are preserved.
// * `iap.WebForwardingRuleServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the webforwardingruleservice are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `iap.WebForwardingRuleServiceIamPolicy`: Retrieves the IAM policy for the webforwardingruleservice
//
// > **Note:** `iap.WebForwardingRuleServiceIamPolicy` **cannot** be used in conjunction with `iap.WebForwardingRuleServiceIamBinding` and `iap.WebForwardingRuleServiceIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iap.WebForwardingRuleServiceIamBinding` resources **can be** used in conjunction with `iap.WebForwardingRuleServiceIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## iap.WebForwardingRuleServiceIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iap.httpsResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewWebForwardingRuleServiceIamPolicy(ctx, "policy", &iap.WebForwardingRuleServiceIamPolicyArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				PolicyData:                pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iap.httpsResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewWebForwardingRuleServiceIamPolicy(ctx, "policy", &iap.WebForwardingRuleServiceIamPolicyArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				PolicyData:                pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## iap.WebForwardingRuleServiceIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewWebForwardingRuleServiceIamBinding(ctx, "binding", &iap.WebForwardingRuleServiceIamBindingArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				Role:                      pulumi.String("roles/iap.httpsResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewWebForwardingRuleServiceIamBinding(ctx, "binding", &iap.WebForwardingRuleServiceIamBindingArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				Role:                      pulumi.String("roles/iap.httpsResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &iap.WebForwardingRuleServiceIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## iap.WebForwardingRuleServiceIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewWebForwardingRuleServiceIamMember(ctx, "member", &iap.WebForwardingRuleServiceIamMemberArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				Role:                      pulumi.String("roles/iap.httpsResourceAccessor"),
//				Member:                    pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewWebForwardingRuleServiceIamMember(ctx, "member", &iap.WebForwardingRuleServiceIamMemberArgs{
//				Project:                   pulumi.Any(_default.Project),
//				ForwardingRuleServiceName: pulumi.Any(_default.Name),
//				Role:                      pulumi.String("roles/iap.httpsResourceAccessor"),
//				Member:                    pulumi.String("user:jane@example.com"),
//				Condition: &iap.WebForwardingRuleServiceIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/iap_web/forwarding_rule/services/{{name}}
//
// * {{project}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Identity-Aware Proxy webforwardingruleservice IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:iap/webForwardingRuleServiceIamBinding:WebForwardingRuleServiceIamBinding editor "projects/{{project}}/iap_web/forwarding_rule/services/{{web_forwarding_rule_service}} roles/iap.httpsResourceAccessor user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:iap/webForwardingRuleServiceIamBinding:WebForwardingRuleServiceIamBinding editor "projects/{{project}}/iap_web/forwarding_rule/services/{{web_forwarding_rule_service}} roles/iap.httpsResourceAccessor"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:iap/webForwardingRuleServiceIamBinding:WebForwardingRuleServiceIamBinding editor projects/{{project}}/iap_web/forwarding_rule/services/{{web_forwarding_rule_service}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type WebForwardingRuleServiceIamBinding struct {
	pulumi.CustomResourceState

	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition WebForwardingRuleServiceIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	ForwardingRuleServiceName pulumi.StringOutput `pulumi:"forwardingRuleServiceName"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `iap.WebForwardingRuleServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewWebForwardingRuleServiceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewWebForwardingRuleServiceIamBinding(ctx *pulumi.Context,
	name string, args *WebForwardingRuleServiceIamBindingArgs, opts ...pulumi.ResourceOption) (*WebForwardingRuleServiceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ForwardingRuleServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ForwardingRuleServiceName'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebForwardingRuleServiceIamBinding
	err := ctx.RegisterResource("gcp:iap/webForwardingRuleServiceIamBinding:WebForwardingRuleServiceIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebForwardingRuleServiceIamBinding gets an existing WebForwardingRuleServiceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebForwardingRuleServiceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebForwardingRuleServiceIamBindingState, opts ...pulumi.ResourceOption) (*WebForwardingRuleServiceIamBinding, error) {
	var resource WebForwardingRuleServiceIamBinding
	err := ctx.ReadResource("gcp:iap/webForwardingRuleServiceIamBinding:WebForwardingRuleServiceIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebForwardingRuleServiceIamBinding resources.
type webForwardingRuleServiceIamBindingState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *WebForwardingRuleServiceIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	ForwardingRuleServiceName *string `pulumi:"forwardingRuleServiceName"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `iap.WebForwardingRuleServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type WebForwardingRuleServiceIamBindingState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition WebForwardingRuleServiceIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	ForwardingRuleServiceName pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `iap.WebForwardingRuleServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (WebForwardingRuleServiceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*webForwardingRuleServiceIamBindingState)(nil)).Elem()
}

type webForwardingRuleServiceIamBindingArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *WebForwardingRuleServiceIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	ForwardingRuleServiceName string `pulumi:"forwardingRuleServiceName"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `iap.WebForwardingRuleServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a WebForwardingRuleServiceIamBinding resource.
type WebForwardingRuleServiceIamBindingArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition WebForwardingRuleServiceIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	ForwardingRuleServiceName pulumi.StringInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `iap.WebForwardingRuleServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (WebForwardingRuleServiceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webForwardingRuleServiceIamBindingArgs)(nil)).Elem()
}

type WebForwardingRuleServiceIamBindingInput interface {
	pulumi.Input

	ToWebForwardingRuleServiceIamBindingOutput() WebForwardingRuleServiceIamBindingOutput
	ToWebForwardingRuleServiceIamBindingOutputWithContext(ctx context.Context) WebForwardingRuleServiceIamBindingOutput
}

func (*WebForwardingRuleServiceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**WebForwardingRuleServiceIamBinding)(nil)).Elem()
}

func (i *WebForwardingRuleServiceIamBinding) ToWebForwardingRuleServiceIamBindingOutput() WebForwardingRuleServiceIamBindingOutput {
	return i.ToWebForwardingRuleServiceIamBindingOutputWithContext(context.Background())
}

func (i *WebForwardingRuleServiceIamBinding) ToWebForwardingRuleServiceIamBindingOutputWithContext(ctx context.Context) WebForwardingRuleServiceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebForwardingRuleServiceIamBindingOutput)
}

// WebForwardingRuleServiceIamBindingArrayInput is an input type that accepts WebForwardingRuleServiceIamBindingArray and WebForwardingRuleServiceIamBindingArrayOutput values.
// You can construct a concrete instance of `WebForwardingRuleServiceIamBindingArrayInput` via:
//
//	WebForwardingRuleServiceIamBindingArray{ WebForwardingRuleServiceIamBindingArgs{...} }
type WebForwardingRuleServiceIamBindingArrayInput interface {
	pulumi.Input

	ToWebForwardingRuleServiceIamBindingArrayOutput() WebForwardingRuleServiceIamBindingArrayOutput
	ToWebForwardingRuleServiceIamBindingArrayOutputWithContext(context.Context) WebForwardingRuleServiceIamBindingArrayOutput
}

type WebForwardingRuleServiceIamBindingArray []WebForwardingRuleServiceIamBindingInput

func (WebForwardingRuleServiceIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebForwardingRuleServiceIamBinding)(nil)).Elem()
}

func (i WebForwardingRuleServiceIamBindingArray) ToWebForwardingRuleServiceIamBindingArrayOutput() WebForwardingRuleServiceIamBindingArrayOutput {
	return i.ToWebForwardingRuleServiceIamBindingArrayOutputWithContext(context.Background())
}

func (i WebForwardingRuleServiceIamBindingArray) ToWebForwardingRuleServiceIamBindingArrayOutputWithContext(ctx context.Context) WebForwardingRuleServiceIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebForwardingRuleServiceIamBindingArrayOutput)
}

// WebForwardingRuleServiceIamBindingMapInput is an input type that accepts WebForwardingRuleServiceIamBindingMap and WebForwardingRuleServiceIamBindingMapOutput values.
// You can construct a concrete instance of `WebForwardingRuleServiceIamBindingMapInput` via:
//
//	WebForwardingRuleServiceIamBindingMap{ "key": WebForwardingRuleServiceIamBindingArgs{...} }
type WebForwardingRuleServiceIamBindingMapInput interface {
	pulumi.Input

	ToWebForwardingRuleServiceIamBindingMapOutput() WebForwardingRuleServiceIamBindingMapOutput
	ToWebForwardingRuleServiceIamBindingMapOutputWithContext(context.Context) WebForwardingRuleServiceIamBindingMapOutput
}

type WebForwardingRuleServiceIamBindingMap map[string]WebForwardingRuleServiceIamBindingInput

func (WebForwardingRuleServiceIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebForwardingRuleServiceIamBinding)(nil)).Elem()
}

func (i WebForwardingRuleServiceIamBindingMap) ToWebForwardingRuleServiceIamBindingMapOutput() WebForwardingRuleServiceIamBindingMapOutput {
	return i.ToWebForwardingRuleServiceIamBindingMapOutputWithContext(context.Background())
}

func (i WebForwardingRuleServiceIamBindingMap) ToWebForwardingRuleServiceIamBindingMapOutputWithContext(ctx context.Context) WebForwardingRuleServiceIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebForwardingRuleServiceIamBindingMapOutput)
}

type WebForwardingRuleServiceIamBindingOutput struct{ *pulumi.OutputState }

func (WebForwardingRuleServiceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebForwardingRuleServiceIamBinding)(nil)).Elem()
}

func (o WebForwardingRuleServiceIamBindingOutput) ToWebForwardingRuleServiceIamBindingOutput() WebForwardingRuleServiceIamBindingOutput {
	return o
}

func (o WebForwardingRuleServiceIamBindingOutput) ToWebForwardingRuleServiceIamBindingOutputWithContext(ctx context.Context) WebForwardingRuleServiceIamBindingOutput {
	return o
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o WebForwardingRuleServiceIamBindingOutput) Condition() WebForwardingRuleServiceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *WebForwardingRuleServiceIamBinding) WebForwardingRuleServiceIamBindingConditionPtrOutput {
		return v.Condition
	}).(WebForwardingRuleServiceIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o WebForwardingRuleServiceIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WebForwardingRuleServiceIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o WebForwardingRuleServiceIamBindingOutput) ForwardingRuleServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *WebForwardingRuleServiceIamBinding) pulumi.StringOutput { return v.ForwardingRuleServiceName }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o WebForwardingRuleServiceIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WebForwardingRuleServiceIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o WebForwardingRuleServiceIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WebForwardingRuleServiceIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `iap.WebForwardingRuleServiceIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o WebForwardingRuleServiceIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *WebForwardingRuleServiceIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type WebForwardingRuleServiceIamBindingArrayOutput struct{ *pulumi.OutputState }

func (WebForwardingRuleServiceIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebForwardingRuleServiceIamBinding)(nil)).Elem()
}

func (o WebForwardingRuleServiceIamBindingArrayOutput) ToWebForwardingRuleServiceIamBindingArrayOutput() WebForwardingRuleServiceIamBindingArrayOutput {
	return o
}

func (o WebForwardingRuleServiceIamBindingArrayOutput) ToWebForwardingRuleServiceIamBindingArrayOutputWithContext(ctx context.Context) WebForwardingRuleServiceIamBindingArrayOutput {
	return o
}

func (o WebForwardingRuleServiceIamBindingArrayOutput) Index(i pulumi.IntInput) WebForwardingRuleServiceIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebForwardingRuleServiceIamBinding {
		return vs[0].([]*WebForwardingRuleServiceIamBinding)[vs[1].(int)]
	}).(WebForwardingRuleServiceIamBindingOutput)
}

type WebForwardingRuleServiceIamBindingMapOutput struct{ *pulumi.OutputState }

func (WebForwardingRuleServiceIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebForwardingRuleServiceIamBinding)(nil)).Elem()
}

func (o WebForwardingRuleServiceIamBindingMapOutput) ToWebForwardingRuleServiceIamBindingMapOutput() WebForwardingRuleServiceIamBindingMapOutput {
	return o
}

func (o WebForwardingRuleServiceIamBindingMapOutput) ToWebForwardingRuleServiceIamBindingMapOutputWithContext(ctx context.Context) WebForwardingRuleServiceIamBindingMapOutput {
	return o
}

func (o WebForwardingRuleServiceIamBindingMapOutput) MapIndex(k pulumi.StringInput) WebForwardingRuleServiceIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebForwardingRuleServiceIamBinding {
		return vs[0].(map[string]*WebForwardingRuleServiceIamBinding)[vs[1].(string)]
	}).(WebForwardingRuleServiceIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebForwardingRuleServiceIamBindingInput)(nil)).Elem(), &WebForwardingRuleServiceIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebForwardingRuleServiceIamBindingArrayInput)(nil)).Elem(), WebForwardingRuleServiceIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebForwardingRuleServiceIamBindingMapInput)(nil)).Elem(), WebForwardingRuleServiceIamBindingMap{})
	pulumi.RegisterOutputType(WebForwardingRuleServiceIamBindingOutput{})
	pulumi.RegisterOutputType(WebForwardingRuleServiceIamBindingArrayOutput{})
	pulumi.RegisterOutputType(WebForwardingRuleServiceIamBindingMapOutput{})
}
