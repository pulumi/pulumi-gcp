// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WebRegionBackendServiceIamPolicy struct {
	pulumi.CustomResourceState

	Etag                    pulumi.StringOutput `pulumi:"etag"`
	PolicyData              pulumi.StringOutput `pulumi:"policyData"`
	Project                 pulumi.StringOutput `pulumi:"project"`
	Region                  pulumi.StringOutput `pulumi:"region"`
	WebRegionBackendService pulumi.StringOutput `pulumi:"webRegionBackendService"`
}

// NewWebRegionBackendServiceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewWebRegionBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, args *WebRegionBackendServiceIamPolicyArgs, opts ...pulumi.ResourceOption) (*WebRegionBackendServiceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.WebRegionBackendService == nil {
		return nil, errors.New("invalid value for required argument 'WebRegionBackendService'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebRegionBackendServiceIamPolicy
	err := ctx.RegisterResource("gcp:iap/webRegionBackendServiceIamPolicy:WebRegionBackendServiceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebRegionBackendServiceIamPolicy gets an existing WebRegionBackendServiceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebRegionBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebRegionBackendServiceIamPolicyState, opts ...pulumi.ResourceOption) (*WebRegionBackendServiceIamPolicy, error) {
	var resource WebRegionBackendServiceIamPolicy
	err := ctx.ReadResource("gcp:iap/webRegionBackendServiceIamPolicy:WebRegionBackendServiceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebRegionBackendServiceIamPolicy resources.
type webRegionBackendServiceIamPolicyState struct {
	Etag                    *string `pulumi:"etag"`
	PolicyData              *string `pulumi:"policyData"`
	Project                 *string `pulumi:"project"`
	Region                  *string `pulumi:"region"`
	WebRegionBackendService *string `pulumi:"webRegionBackendService"`
}

type WebRegionBackendServiceIamPolicyState struct {
	Etag                    pulumi.StringPtrInput
	PolicyData              pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	WebRegionBackendService pulumi.StringPtrInput
}

func (WebRegionBackendServiceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*webRegionBackendServiceIamPolicyState)(nil)).Elem()
}

type webRegionBackendServiceIamPolicyArgs struct {
	PolicyData              string  `pulumi:"policyData"`
	Project                 *string `pulumi:"project"`
	Region                  *string `pulumi:"region"`
	WebRegionBackendService string  `pulumi:"webRegionBackendService"`
}

// The set of arguments for constructing a WebRegionBackendServiceIamPolicy resource.
type WebRegionBackendServiceIamPolicyArgs struct {
	PolicyData              pulumi.StringInput
	Project                 pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	WebRegionBackendService pulumi.StringInput
}

func (WebRegionBackendServiceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webRegionBackendServiceIamPolicyArgs)(nil)).Elem()
}

type WebRegionBackendServiceIamPolicyInput interface {
	pulumi.Input

	ToWebRegionBackendServiceIamPolicyOutput() WebRegionBackendServiceIamPolicyOutput
	ToWebRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) WebRegionBackendServiceIamPolicyOutput
}

func (*WebRegionBackendServiceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**WebRegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i *WebRegionBackendServiceIamPolicy) ToWebRegionBackendServiceIamPolicyOutput() WebRegionBackendServiceIamPolicyOutput {
	return i.ToWebRegionBackendServiceIamPolicyOutputWithContext(context.Background())
}

func (i *WebRegionBackendServiceIamPolicy) ToWebRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) WebRegionBackendServiceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebRegionBackendServiceIamPolicyOutput)
}

// WebRegionBackendServiceIamPolicyArrayInput is an input type that accepts WebRegionBackendServiceIamPolicyArray and WebRegionBackendServiceIamPolicyArrayOutput values.
// You can construct a concrete instance of `WebRegionBackendServiceIamPolicyArrayInput` via:
//
//	WebRegionBackendServiceIamPolicyArray{ WebRegionBackendServiceIamPolicyArgs{...} }
type WebRegionBackendServiceIamPolicyArrayInput interface {
	pulumi.Input

	ToWebRegionBackendServiceIamPolicyArrayOutput() WebRegionBackendServiceIamPolicyArrayOutput
	ToWebRegionBackendServiceIamPolicyArrayOutputWithContext(context.Context) WebRegionBackendServiceIamPolicyArrayOutput
}

type WebRegionBackendServiceIamPolicyArray []WebRegionBackendServiceIamPolicyInput

func (WebRegionBackendServiceIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebRegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i WebRegionBackendServiceIamPolicyArray) ToWebRegionBackendServiceIamPolicyArrayOutput() WebRegionBackendServiceIamPolicyArrayOutput {
	return i.ToWebRegionBackendServiceIamPolicyArrayOutputWithContext(context.Background())
}

func (i WebRegionBackendServiceIamPolicyArray) ToWebRegionBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) WebRegionBackendServiceIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebRegionBackendServiceIamPolicyArrayOutput)
}

// WebRegionBackendServiceIamPolicyMapInput is an input type that accepts WebRegionBackendServiceIamPolicyMap and WebRegionBackendServiceIamPolicyMapOutput values.
// You can construct a concrete instance of `WebRegionBackendServiceIamPolicyMapInput` via:
//
//	WebRegionBackendServiceIamPolicyMap{ "key": WebRegionBackendServiceIamPolicyArgs{...} }
type WebRegionBackendServiceIamPolicyMapInput interface {
	pulumi.Input

	ToWebRegionBackendServiceIamPolicyMapOutput() WebRegionBackendServiceIamPolicyMapOutput
	ToWebRegionBackendServiceIamPolicyMapOutputWithContext(context.Context) WebRegionBackendServiceIamPolicyMapOutput
}

type WebRegionBackendServiceIamPolicyMap map[string]WebRegionBackendServiceIamPolicyInput

func (WebRegionBackendServiceIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebRegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i WebRegionBackendServiceIamPolicyMap) ToWebRegionBackendServiceIamPolicyMapOutput() WebRegionBackendServiceIamPolicyMapOutput {
	return i.ToWebRegionBackendServiceIamPolicyMapOutputWithContext(context.Background())
}

func (i WebRegionBackendServiceIamPolicyMap) ToWebRegionBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) WebRegionBackendServiceIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebRegionBackendServiceIamPolicyMapOutput)
}

type WebRegionBackendServiceIamPolicyOutput struct{ *pulumi.OutputState }

func (WebRegionBackendServiceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebRegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o WebRegionBackendServiceIamPolicyOutput) ToWebRegionBackendServiceIamPolicyOutput() WebRegionBackendServiceIamPolicyOutput {
	return o
}

func (o WebRegionBackendServiceIamPolicyOutput) ToWebRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) WebRegionBackendServiceIamPolicyOutput {
	return o
}

func (o WebRegionBackendServiceIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o WebRegionBackendServiceIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o WebRegionBackendServiceIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o WebRegionBackendServiceIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o WebRegionBackendServiceIamPolicyOutput) WebRegionBackendService() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamPolicy) pulumi.StringOutput { return v.WebRegionBackendService }).(pulumi.StringOutput)
}

type WebRegionBackendServiceIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (WebRegionBackendServiceIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebRegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o WebRegionBackendServiceIamPolicyArrayOutput) ToWebRegionBackendServiceIamPolicyArrayOutput() WebRegionBackendServiceIamPolicyArrayOutput {
	return o
}

func (o WebRegionBackendServiceIamPolicyArrayOutput) ToWebRegionBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) WebRegionBackendServiceIamPolicyArrayOutput {
	return o
}

func (o WebRegionBackendServiceIamPolicyArrayOutput) Index(i pulumi.IntInput) WebRegionBackendServiceIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebRegionBackendServiceIamPolicy {
		return vs[0].([]*WebRegionBackendServiceIamPolicy)[vs[1].(int)]
	}).(WebRegionBackendServiceIamPolicyOutput)
}

type WebRegionBackendServiceIamPolicyMapOutput struct{ *pulumi.OutputState }

func (WebRegionBackendServiceIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebRegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o WebRegionBackendServiceIamPolicyMapOutput) ToWebRegionBackendServiceIamPolicyMapOutput() WebRegionBackendServiceIamPolicyMapOutput {
	return o
}

func (o WebRegionBackendServiceIamPolicyMapOutput) ToWebRegionBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) WebRegionBackendServiceIamPolicyMapOutput {
	return o
}

func (o WebRegionBackendServiceIamPolicyMapOutput) MapIndex(k pulumi.StringInput) WebRegionBackendServiceIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebRegionBackendServiceIamPolicy {
		return vs[0].(map[string]*WebRegionBackendServiceIamPolicy)[vs[1].(string)]
	}).(WebRegionBackendServiceIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebRegionBackendServiceIamPolicyInput)(nil)).Elem(), &WebRegionBackendServiceIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebRegionBackendServiceIamPolicyArrayInput)(nil)).Elem(), WebRegionBackendServiceIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebRegionBackendServiceIamPolicyMapInput)(nil)).Elem(), WebRegionBackendServiceIamPolicyMap{})
	pulumi.RegisterOutputType(WebRegionBackendServiceIamPolicyOutput{})
	pulumi.RegisterOutputType(WebRegionBackendServiceIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(WebRegionBackendServiceIamPolicyMapOutput{})
}
