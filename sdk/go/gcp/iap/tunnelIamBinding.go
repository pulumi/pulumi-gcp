// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/iap_tunnel * {{project}} Any variables not passed in the import command will be taken from the provider configuration. Identity-Aware Proxy tunnel IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:iap/tunnelIamBinding:TunnelIamBinding editor "projects/{{project}}/iap_tunnel roles/iap.tunnelResourceAccessor user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:iap/tunnelIamBinding:TunnelIamBinding editor "projects/{{project}}/iap_tunnel roles/iap.tunnelResourceAccessor"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:iap/tunnelIamBinding:TunnelIamBinding editor projects/{{project}}/iap_tunnel
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type TunnelIamBinding struct {
	pulumi.CustomResourceState

	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition TunnelIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `iap.TunnelIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewTunnelIamBinding registers a new resource with the given unique name, arguments, and options.
func NewTunnelIamBinding(ctx *pulumi.Context,
	name string, args *TunnelIamBindingArgs, opts ...pulumi.ResourceOption) (*TunnelIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource TunnelIamBinding
	err := ctx.RegisterResource("gcp:iap/tunnelIamBinding:TunnelIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTunnelIamBinding gets an existing TunnelIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTunnelIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TunnelIamBindingState, opts ...pulumi.ResourceOption) (*TunnelIamBinding, error) {
	var resource TunnelIamBinding
	err := ctx.ReadResource("gcp:iap/tunnelIamBinding:TunnelIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TunnelIamBinding resources.
type tunnelIamBindingState struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *TunnelIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `iap.TunnelIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type TunnelIamBindingState struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition TunnelIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `iap.TunnelIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (TunnelIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelIamBindingState)(nil)).Elem()
}

type tunnelIamBindingArgs struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *TunnelIamBindingCondition `pulumi:"condition"`
	Members   []string                   `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `iap.TunnelIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a TunnelIamBinding resource.
type TunnelIamBindingArgs struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition TunnelIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `iap.TunnelIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (TunnelIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelIamBindingArgs)(nil)).Elem()
}

type TunnelIamBindingInput interface {
	pulumi.Input

	ToTunnelIamBindingOutput() TunnelIamBindingOutput
	ToTunnelIamBindingOutputWithContext(ctx context.Context) TunnelIamBindingOutput
}

func (*TunnelIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelIamBinding)(nil))
}

func (i *TunnelIamBinding) ToTunnelIamBindingOutput() TunnelIamBindingOutput {
	return i.ToTunnelIamBindingOutputWithContext(context.Background())
}

func (i *TunnelIamBinding) ToTunnelIamBindingOutputWithContext(ctx context.Context) TunnelIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelIamBindingOutput)
}

func (i *TunnelIamBinding) ToTunnelIamBindingPtrOutput() TunnelIamBindingPtrOutput {
	return i.ToTunnelIamBindingPtrOutputWithContext(context.Background())
}

func (i *TunnelIamBinding) ToTunnelIamBindingPtrOutputWithContext(ctx context.Context) TunnelIamBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelIamBindingPtrOutput)
}

type TunnelIamBindingPtrInput interface {
	pulumi.Input

	ToTunnelIamBindingPtrOutput() TunnelIamBindingPtrOutput
	ToTunnelIamBindingPtrOutputWithContext(ctx context.Context) TunnelIamBindingPtrOutput
}

type tunnelIamBindingPtrType TunnelIamBindingArgs

func (*tunnelIamBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelIamBinding)(nil))
}

func (i *tunnelIamBindingPtrType) ToTunnelIamBindingPtrOutput() TunnelIamBindingPtrOutput {
	return i.ToTunnelIamBindingPtrOutputWithContext(context.Background())
}

func (i *tunnelIamBindingPtrType) ToTunnelIamBindingPtrOutputWithContext(ctx context.Context) TunnelIamBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelIamBindingPtrOutput)
}

// TunnelIamBindingArrayInput is an input type that accepts TunnelIamBindingArray and TunnelIamBindingArrayOutput values.
// You can construct a concrete instance of `TunnelIamBindingArrayInput` via:
//
//          TunnelIamBindingArray{ TunnelIamBindingArgs{...} }
type TunnelIamBindingArrayInput interface {
	pulumi.Input

	ToTunnelIamBindingArrayOutput() TunnelIamBindingArrayOutput
	ToTunnelIamBindingArrayOutputWithContext(context.Context) TunnelIamBindingArrayOutput
}

type TunnelIamBindingArray []TunnelIamBindingInput

func (TunnelIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*TunnelIamBinding)(nil))
}

func (i TunnelIamBindingArray) ToTunnelIamBindingArrayOutput() TunnelIamBindingArrayOutput {
	return i.ToTunnelIamBindingArrayOutputWithContext(context.Background())
}

func (i TunnelIamBindingArray) ToTunnelIamBindingArrayOutputWithContext(ctx context.Context) TunnelIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelIamBindingArrayOutput)
}

// TunnelIamBindingMapInput is an input type that accepts TunnelIamBindingMap and TunnelIamBindingMapOutput values.
// You can construct a concrete instance of `TunnelIamBindingMapInput` via:
//
//          TunnelIamBindingMap{ "key": TunnelIamBindingArgs{...} }
type TunnelIamBindingMapInput interface {
	pulumi.Input

	ToTunnelIamBindingMapOutput() TunnelIamBindingMapOutput
	ToTunnelIamBindingMapOutputWithContext(context.Context) TunnelIamBindingMapOutput
}

type TunnelIamBindingMap map[string]TunnelIamBindingInput

func (TunnelIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*TunnelIamBinding)(nil))
}

func (i TunnelIamBindingMap) ToTunnelIamBindingMapOutput() TunnelIamBindingMapOutput {
	return i.ToTunnelIamBindingMapOutputWithContext(context.Background())
}

func (i TunnelIamBindingMap) ToTunnelIamBindingMapOutputWithContext(ctx context.Context) TunnelIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelIamBindingMapOutput)
}

type TunnelIamBindingOutput struct {
	*pulumi.OutputState
}

func (TunnelIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelIamBinding)(nil))
}

func (o TunnelIamBindingOutput) ToTunnelIamBindingOutput() TunnelIamBindingOutput {
	return o
}

func (o TunnelIamBindingOutput) ToTunnelIamBindingOutputWithContext(ctx context.Context) TunnelIamBindingOutput {
	return o
}

func (o TunnelIamBindingOutput) ToTunnelIamBindingPtrOutput() TunnelIamBindingPtrOutput {
	return o.ToTunnelIamBindingPtrOutputWithContext(context.Background())
}

func (o TunnelIamBindingOutput) ToTunnelIamBindingPtrOutputWithContext(ctx context.Context) TunnelIamBindingPtrOutput {
	return o.ApplyT(func(v TunnelIamBinding) *TunnelIamBinding {
		return &v
	}).(TunnelIamBindingPtrOutput)
}

type TunnelIamBindingPtrOutput struct {
	*pulumi.OutputState
}

func (TunnelIamBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelIamBinding)(nil))
}

func (o TunnelIamBindingPtrOutput) ToTunnelIamBindingPtrOutput() TunnelIamBindingPtrOutput {
	return o
}

func (o TunnelIamBindingPtrOutput) ToTunnelIamBindingPtrOutputWithContext(ctx context.Context) TunnelIamBindingPtrOutput {
	return o
}

type TunnelIamBindingArrayOutput struct{ *pulumi.OutputState }

func (TunnelIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TunnelIamBinding)(nil))
}

func (o TunnelIamBindingArrayOutput) ToTunnelIamBindingArrayOutput() TunnelIamBindingArrayOutput {
	return o
}

func (o TunnelIamBindingArrayOutput) ToTunnelIamBindingArrayOutputWithContext(ctx context.Context) TunnelIamBindingArrayOutput {
	return o
}

func (o TunnelIamBindingArrayOutput) Index(i pulumi.IntInput) TunnelIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TunnelIamBinding {
		return vs[0].([]TunnelIamBinding)[vs[1].(int)]
	}).(TunnelIamBindingOutput)
}

type TunnelIamBindingMapOutput struct{ *pulumi.OutputState }

func (TunnelIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TunnelIamBinding)(nil))
}

func (o TunnelIamBindingMapOutput) ToTunnelIamBindingMapOutput() TunnelIamBindingMapOutput {
	return o
}

func (o TunnelIamBindingMapOutput) ToTunnelIamBindingMapOutputWithContext(ctx context.Context) TunnelIamBindingMapOutput {
	return o
}

func (o TunnelIamBindingMapOutput) MapIndex(k pulumi.StringInput) TunnelIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TunnelIamBinding {
		return vs[0].(map[string]TunnelIamBinding)[vs[1].(string)]
	}).(TunnelIamBindingOutput)
}

func init() {
	pulumi.RegisterOutputType(TunnelIamBindingOutput{})
	pulumi.RegisterOutputType(TunnelIamBindingPtrOutput{})
	pulumi.RegisterOutputType(TunnelIamBindingArrayOutput{})
	pulumi.RegisterOutputType(TunnelIamBindingMapOutput{})
}
