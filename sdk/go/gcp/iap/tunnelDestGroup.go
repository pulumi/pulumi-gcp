// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Tunnel destination groups represent resources that have the same tunnel access restrictions.
//
// To get more information about TunnelDestGroup, see:
//
// * [API documentation](https://cloud.google.com/iap/docs/reference/rest/v1/projects.iap_tunnel.locations.destGroups)
// * How-to Guides
//   - [Set up IAP TCP forwarding with an IP address or hostname in a Google Cloud or non-Google Cloud environment](https://cloud.google.com/iap/docs/tcp-by-host)
//
// ## Example Usage
//
// ### Iap Destgroup
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroup(ctx, "dest_group", &iap.TunnelDestGroupArgs{
//				Region:    pulumi.String("us-central1"),
//				GroupName: pulumi.String("testgroup_9394"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.1.0.0/16"),
//					pulumi.String("192.168.10.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TunnelDestGroup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}`
//
// * `{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}`
//
// * `{{project}}/{{region}}/{{group_name}}`
//
// * `{{region}}/destGroups/{{group_name}}`
//
// * `{{region}}/{{group_name}}`
//
// * `{{group_name}}`
//
// When using the `pulumi import` command, TunnelDestGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}
// ```
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}
// ```
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{project}}/{{region}}/{{group_name}}
// ```
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{region}}/destGroups/{{group_name}}
// ```
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{region}}/{{group_name}}
// ```
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{group_name}}
// ```
type TunnelDestGroup struct {
	pulumi.CustomResourceState

	// List of CIDRs that this group applies to.
	Cidrs pulumi.StringArrayOutput `pulumi:"cidrs"`
	// List of FQDNs that this group applies to.
	Fqdns pulumi.StringArrayOutput `pulumi:"fqdns"`
	// Unique tunnel destination group name.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Full resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the tunnel group. Must be the same as the network resources in the group.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewTunnelDestGroup registers a new resource with the given unique name, arguments, and options.
func NewTunnelDestGroup(ctx *pulumi.Context,
	name string, args *TunnelDestGroupArgs, opts ...pulumi.ResourceOption) (*TunnelDestGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TunnelDestGroup
	err := ctx.RegisterResource("gcp:iap/tunnelDestGroup:TunnelDestGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTunnelDestGroup gets an existing TunnelDestGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTunnelDestGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TunnelDestGroupState, opts ...pulumi.ResourceOption) (*TunnelDestGroup, error) {
	var resource TunnelDestGroup
	err := ctx.ReadResource("gcp:iap/tunnelDestGroup:TunnelDestGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TunnelDestGroup resources.
type tunnelDestGroupState struct {
	// List of CIDRs that this group applies to.
	Cidrs []string `pulumi:"cidrs"`
	// List of FQDNs that this group applies to.
	Fqdns []string `pulumi:"fqdns"`
	// Unique tunnel destination group name.
	GroupName *string `pulumi:"groupName"`
	// Full resource name.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the tunnel group. Must be the same as the network resources in the group.
	Region *string `pulumi:"region"`
}

type TunnelDestGroupState struct {
	// List of CIDRs that this group applies to.
	Cidrs pulumi.StringArrayInput
	// List of FQDNs that this group applies to.
	Fqdns pulumi.StringArrayInput
	// Unique tunnel destination group name.
	GroupName pulumi.StringPtrInput
	// Full resource name.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the tunnel group. Must be the same as the network resources in the group.
	Region pulumi.StringPtrInput
}

func (TunnelDestGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelDestGroupState)(nil)).Elem()
}

type tunnelDestGroupArgs struct {
	// List of CIDRs that this group applies to.
	Cidrs []string `pulumi:"cidrs"`
	// List of FQDNs that this group applies to.
	Fqdns []string `pulumi:"fqdns"`
	// Unique tunnel destination group name.
	GroupName string `pulumi:"groupName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the tunnel group. Must be the same as the network resources in the group.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a TunnelDestGroup resource.
type TunnelDestGroupArgs struct {
	// List of CIDRs that this group applies to.
	Cidrs pulumi.StringArrayInput
	// List of FQDNs that this group applies to.
	Fqdns pulumi.StringArrayInput
	// Unique tunnel destination group name.
	GroupName pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the tunnel group. Must be the same as the network resources in the group.
	Region pulumi.StringPtrInput
}

func (TunnelDestGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelDestGroupArgs)(nil)).Elem()
}

type TunnelDestGroupInput interface {
	pulumi.Input

	ToTunnelDestGroupOutput() TunnelDestGroupOutput
	ToTunnelDestGroupOutputWithContext(ctx context.Context) TunnelDestGroupOutput
}

func (*TunnelDestGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelDestGroup)(nil)).Elem()
}

func (i *TunnelDestGroup) ToTunnelDestGroupOutput() TunnelDestGroupOutput {
	return i.ToTunnelDestGroupOutputWithContext(context.Background())
}

func (i *TunnelDestGroup) ToTunnelDestGroupOutputWithContext(ctx context.Context) TunnelDestGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelDestGroupOutput)
}

// TunnelDestGroupArrayInput is an input type that accepts TunnelDestGroupArray and TunnelDestGroupArrayOutput values.
// You can construct a concrete instance of `TunnelDestGroupArrayInput` via:
//
//	TunnelDestGroupArray{ TunnelDestGroupArgs{...} }
type TunnelDestGroupArrayInput interface {
	pulumi.Input

	ToTunnelDestGroupArrayOutput() TunnelDestGroupArrayOutput
	ToTunnelDestGroupArrayOutputWithContext(context.Context) TunnelDestGroupArrayOutput
}

type TunnelDestGroupArray []TunnelDestGroupInput

func (TunnelDestGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelDestGroup)(nil)).Elem()
}

func (i TunnelDestGroupArray) ToTunnelDestGroupArrayOutput() TunnelDestGroupArrayOutput {
	return i.ToTunnelDestGroupArrayOutputWithContext(context.Background())
}

func (i TunnelDestGroupArray) ToTunnelDestGroupArrayOutputWithContext(ctx context.Context) TunnelDestGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelDestGroupArrayOutput)
}

// TunnelDestGroupMapInput is an input type that accepts TunnelDestGroupMap and TunnelDestGroupMapOutput values.
// You can construct a concrete instance of `TunnelDestGroupMapInput` via:
//
//	TunnelDestGroupMap{ "key": TunnelDestGroupArgs{...} }
type TunnelDestGroupMapInput interface {
	pulumi.Input

	ToTunnelDestGroupMapOutput() TunnelDestGroupMapOutput
	ToTunnelDestGroupMapOutputWithContext(context.Context) TunnelDestGroupMapOutput
}

type TunnelDestGroupMap map[string]TunnelDestGroupInput

func (TunnelDestGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelDestGroup)(nil)).Elem()
}

func (i TunnelDestGroupMap) ToTunnelDestGroupMapOutput() TunnelDestGroupMapOutput {
	return i.ToTunnelDestGroupMapOutputWithContext(context.Background())
}

func (i TunnelDestGroupMap) ToTunnelDestGroupMapOutputWithContext(ctx context.Context) TunnelDestGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelDestGroupMapOutput)
}

type TunnelDestGroupOutput struct{ *pulumi.OutputState }

func (TunnelDestGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelDestGroup)(nil)).Elem()
}

func (o TunnelDestGroupOutput) ToTunnelDestGroupOutput() TunnelDestGroupOutput {
	return o
}

func (o TunnelDestGroupOutput) ToTunnelDestGroupOutputWithContext(ctx context.Context) TunnelDestGroupOutput {
	return o
}

// List of CIDRs that this group applies to.
func (o TunnelDestGroupOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TunnelDestGroup) pulumi.StringArrayOutput { return v.Cidrs }).(pulumi.StringArrayOutput)
}

// List of FQDNs that this group applies to.
func (o TunnelDestGroupOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TunnelDestGroup) pulumi.StringArrayOutput { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// Unique tunnel destination group name.
func (o TunnelDestGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// Full resource name.
func (o TunnelDestGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TunnelDestGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the tunnel group. Must be the same as the network resources in the group.
func (o TunnelDestGroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroup) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type TunnelDestGroupArrayOutput struct{ *pulumi.OutputState }

func (TunnelDestGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelDestGroup)(nil)).Elem()
}

func (o TunnelDestGroupArrayOutput) ToTunnelDestGroupArrayOutput() TunnelDestGroupArrayOutput {
	return o
}

func (o TunnelDestGroupArrayOutput) ToTunnelDestGroupArrayOutputWithContext(ctx context.Context) TunnelDestGroupArrayOutput {
	return o
}

func (o TunnelDestGroupArrayOutput) Index(i pulumi.IntInput) TunnelDestGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TunnelDestGroup {
		return vs[0].([]*TunnelDestGroup)[vs[1].(int)]
	}).(TunnelDestGroupOutput)
}

type TunnelDestGroupMapOutput struct{ *pulumi.OutputState }

func (TunnelDestGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelDestGroup)(nil)).Elem()
}

func (o TunnelDestGroupMapOutput) ToTunnelDestGroupMapOutput() TunnelDestGroupMapOutput {
	return o
}

func (o TunnelDestGroupMapOutput) ToTunnelDestGroupMapOutputWithContext(ctx context.Context) TunnelDestGroupMapOutput {
	return o
}

func (o TunnelDestGroupMapOutput) MapIndex(k pulumi.StringInput) TunnelDestGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TunnelDestGroup {
		return vs[0].(map[string]*TunnelDestGroup)[vs[1].(string)]
	}).(TunnelDestGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelDestGroupInput)(nil)).Elem(), &TunnelDestGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelDestGroupArrayInput)(nil)).Elem(), TunnelDestGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelDestGroupMapInput)(nil)).Elem(), TunnelDestGroupMap{})
	pulumi.RegisterOutputType(TunnelDestGroupOutput{})
	pulumi.RegisterOutputType(TunnelDestGroupArrayOutput{})
	pulumi.RegisterOutputType(TunnelDestGroupMapOutput{})
}
