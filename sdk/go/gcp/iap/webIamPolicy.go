// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/iap_web * {{project}} Any variables not passed in the import command will be taken from the provider configuration. Identity-Aware Proxy web IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:iap/webIamPolicy:WebIamPolicy editor "projects/{{project}}/iap_web roles/iap.httpsResourceAccessor user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:iap/webIamPolicy:WebIamPolicy editor "projects/{{project}}/iap_web roles/iap.httpsResourceAccessor"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:iap/webIamPolicy:WebIamPolicy editor projects/{{project}}/iap_web
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type WebIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewWebIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewWebIamPolicy(ctx *pulumi.Context,
	name string, args *WebIamPolicyArgs, opts ...pulumi.ResourceOption) (*WebIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource WebIamPolicy
	err := ctx.RegisterResource("gcp:iap/webIamPolicy:WebIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebIamPolicy gets an existing WebIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebIamPolicyState, opts ...pulumi.ResourceOption) (*WebIamPolicy, error) {
	var resource WebIamPolicy
	err := ctx.ReadResource("gcp:iap/webIamPolicy:WebIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebIamPolicy resources.
type webIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type WebIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (WebIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*webIamPolicyState)(nil)).Elem()
}

type webIamPolicyArgs struct {
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a WebIamPolicy resource.
type WebIamPolicyArgs struct {
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (WebIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webIamPolicyArgs)(nil)).Elem()
}

type WebIamPolicyInput interface {
	pulumi.Input

	ToWebIamPolicyOutput() WebIamPolicyOutput
	ToWebIamPolicyOutputWithContext(ctx context.Context) WebIamPolicyOutput
}

func (*WebIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamPolicy)(nil))
}

func (i *WebIamPolicy) ToWebIamPolicyOutput() WebIamPolicyOutput {
	return i.ToWebIamPolicyOutputWithContext(context.Background())
}

func (i *WebIamPolicy) ToWebIamPolicyOutputWithContext(ctx context.Context) WebIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamPolicyOutput)
}

func (i *WebIamPolicy) ToWebIamPolicyPtrOutput() WebIamPolicyPtrOutput {
	return i.ToWebIamPolicyPtrOutputWithContext(context.Background())
}

func (i *WebIamPolicy) ToWebIamPolicyPtrOutputWithContext(ctx context.Context) WebIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamPolicyPtrOutput)
}

type WebIamPolicyPtrInput interface {
	pulumi.Input

	ToWebIamPolicyPtrOutput() WebIamPolicyPtrOutput
	ToWebIamPolicyPtrOutputWithContext(ctx context.Context) WebIamPolicyPtrOutput
}

type webIamPolicyPtrType WebIamPolicyArgs

func (*webIamPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamPolicy)(nil))
}

func (i *webIamPolicyPtrType) ToWebIamPolicyPtrOutput() WebIamPolicyPtrOutput {
	return i.ToWebIamPolicyPtrOutputWithContext(context.Background())
}

func (i *webIamPolicyPtrType) ToWebIamPolicyPtrOutputWithContext(ctx context.Context) WebIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamPolicyPtrOutput)
}

// WebIamPolicyArrayInput is an input type that accepts WebIamPolicyArray and WebIamPolicyArrayOutput values.
// You can construct a concrete instance of `WebIamPolicyArrayInput` via:
//
//          WebIamPolicyArray{ WebIamPolicyArgs{...} }
type WebIamPolicyArrayInput interface {
	pulumi.Input

	ToWebIamPolicyArrayOutput() WebIamPolicyArrayOutput
	ToWebIamPolicyArrayOutputWithContext(context.Context) WebIamPolicyArrayOutput
}

type WebIamPolicyArray []WebIamPolicyInput

func (WebIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*WebIamPolicy)(nil))
}

func (i WebIamPolicyArray) ToWebIamPolicyArrayOutput() WebIamPolicyArrayOutput {
	return i.ToWebIamPolicyArrayOutputWithContext(context.Background())
}

func (i WebIamPolicyArray) ToWebIamPolicyArrayOutputWithContext(ctx context.Context) WebIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamPolicyArrayOutput)
}

// WebIamPolicyMapInput is an input type that accepts WebIamPolicyMap and WebIamPolicyMapOutput values.
// You can construct a concrete instance of `WebIamPolicyMapInput` via:
//
//          WebIamPolicyMap{ "key": WebIamPolicyArgs{...} }
type WebIamPolicyMapInput interface {
	pulumi.Input

	ToWebIamPolicyMapOutput() WebIamPolicyMapOutput
	ToWebIamPolicyMapOutputWithContext(context.Context) WebIamPolicyMapOutput
}

type WebIamPolicyMap map[string]WebIamPolicyInput

func (WebIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*WebIamPolicy)(nil))
}

func (i WebIamPolicyMap) ToWebIamPolicyMapOutput() WebIamPolicyMapOutput {
	return i.ToWebIamPolicyMapOutputWithContext(context.Background())
}

func (i WebIamPolicyMap) ToWebIamPolicyMapOutputWithContext(ctx context.Context) WebIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamPolicyMapOutput)
}

type WebIamPolicyOutput struct {
	*pulumi.OutputState
}

func (WebIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamPolicy)(nil))
}

func (o WebIamPolicyOutput) ToWebIamPolicyOutput() WebIamPolicyOutput {
	return o
}

func (o WebIamPolicyOutput) ToWebIamPolicyOutputWithContext(ctx context.Context) WebIamPolicyOutput {
	return o
}

func (o WebIamPolicyOutput) ToWebIamPolicyPtrOutput() WebIamPolicyPtrOutput {
	return o.ToWebIamPolicyPtrOutputWithContext(context.Background())
}

func (o WebIamPolicyOutput) ToWebIamPolicyPtrOutputWithContext(ctx context.Context) WebIamPolicyPtrOutput {
	return o.ApplyT(func(v WebIamPolicy) *WebIamPolicy {
		return &v
	}).(WebIamPolicyPtrOutput)
}

type WebIamPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (WebIamPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamPolicy)(nil))
}

func (o WebIamPolicyPtrOutput) ToWebIamPolicyPtrOutput() WebIamPolicyPtrOutput {
	return o
}

func (o WebIamPolicyPtrOutput) ToWebIamPolicyPtrOutputWithContext(ctx context.Context) WebIamPolicyPtrOutput {
	return o
}

type WebIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (WebIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebIamPolicy)(nil))
}

func (o WebIamPolicyArrayOutput) ToWebIamPolicyArrayOutput() WebIamPolicyArrayOutput {
	return o
}

func (o WebIamPolicyArrayOutput) ToWebIamPolicyArrayOutputWithContext(ctx context.Context) WebIamPolicyArrayOutput {
	return o
}

func (o WebIamPolicyArrayOutput) Index(i pulumi.IntInput) WebIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebIamPolicy {
		return vs[0].([]WebIamPolicy)[vs[1].(int)]
	}).(WebIamPolicyOutput)
}

type WebIamPolicyMapOutput struct{ *pulumi.OutputState }

func (WebIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WebIamPolicy)(nil))
}

func (o WebIamPolicyMapOutput) ToWebIamPolicyMapOutput() WebIamPolicyMapOutput {
	return o
}

func (o WebIamPolicyMapOutput) ToWebIamPolicyMapOutputWithContext(ctx context.Context) WebIamPolicyMapOutput {
	return o
}

func (o WebIamPolicyMapOutput) MapIndex(k pulumi.StringInput) WebIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WebIamPolicy {
		return vs[0].(map[string]WebIamPolicy)[vs[1].(string)]
	}).(WebIamPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(WebIamPolicyOutput{})
	pulumi.RegisterOutputType(WebIamPolicyPtrOutput{})
	pulumi.RegisterOutputType(WebIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(WebIamPolicyMapOutput{})
}
