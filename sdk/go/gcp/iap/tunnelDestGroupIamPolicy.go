// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Identity-Aware Proxy TunnelDestGroup. Each of these resources serves a different use case:
//
// * `iap.TunnelDestGroupIamPolicy`: Authoritative. Sets the IAM policy for the tunneldestgroup and replaces any existing policy already attached.
// * `iap.TunnelDestGroupIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tunneldestgroup are preserved.
// * `iap.TunnelDestGroupIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tunneldestgroup are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `iap.TunnelDestGroupIamPolicy`: Retrieves the IAM policy for the tunneldestgroup
//
// > **Note:** `iap.TunnelDestGroupIamPolicy` **cannot** be used in conjunction with `iap.TunnelDestGroupIamBinding` and `iap.TunnelDestGroupIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iap.TunnelDestGroupIamBinding` resources **can be** used in conjunction with `iap.TunnelDestGroupIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## iap.TunnelDestGroupIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iap.tunnelResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewTunnelDestGroupIamPolicy(ctx, "policy", &iap.TunnelDestGroupIamPolicyArgs{
//				Project:    pulumi.Any(destGroup.Project),
//				Region:     pulumi.Any(destGroup.Region),
//				DestGroup:  pulumi.Any(destGroup.GroupName),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iap.tunnelResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewTunnelDestGroupIamPolicy(ctx, "policy", &iap.TunnelDestGroupIamPolicyArgs{
//				Project:    pulumi.Any(destGroup.Project),
//				Region:     pulumi.Any(destGroup.Region),
//				DestGroup:  pulumi.Any(destGroup.GroupName),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## iap.TunnelDestGroupIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroupIamBinding(ctx, "binding", &iap.TunnelDestGroupIamBindingArgs{
//				Project:   pulumi.Any(destGroup.Project),
//				Region:    pulumi.Any(destGroup.Region),
//				DestGroup: pulumi.Any(destGroup.GroupName),
//				Role:      pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroupIamBinding(ctx, "binding", &iap.TunnelDestGroupIamBindingArgs{
//				Project:   pulumi.Any(destGroup.Project),
//				Region:    pulumi.Any(destGroup.Region),
//				DestGroup: pulumi.Any(destGroup.GroupName),
//				Role:      pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &iap.TunnelDestGroupIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## iap.TunnelDestGroupIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroupIamMember(ctx, "member", &iap.TunnelDestGroupIamMemberArgs{
//				Project:   pulumi.Any(destGroup.Project),
//				Region:    pulumi.Any(destGroup.Region),
//				DestGroup: pulumi.Any(destGroup.GroupName),
//				Role:      pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Member:    pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroupIamMember(ctx, "member", &iap.TunnelDestGroupIamMemberArgs{
//				Project:   pulumi.Any(destGroup.Project),
//				Region:    pulumi.Any(destGroup.Region),
//				DestGroup: pulumi.Any(destGroup.GroupName),
//				Role:      pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Member:    pulumi.String("user:jane@example.com"),
//				Condition: &iap.TunnelDestGroupIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Identity-Aware Proxy TunnelDestGroup
// Three different resources help you manage your IAM policy for Identity-Aware Proxy TunnelDestGroup. Each of these resources serves a different use case:
//
// * `iap.TunnelDestGroupIamPolicy`: Authoritative. Sets the IAM policy for the tunneldestgroup and replaces any existing policy already attached.
// * `iap.TunnelDestGroupIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tunneldestgroup are preserved.
// * `iap.TunnelDestGroupIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tunneldestgroup are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `iap.TunnelDestGroupIamPolicy`: Retrieves the IAM policy for the tunneldestgroup
//
// > **Note:** `iap.TunnelDestGroupIamPolicy` **cannot** be used in conjunction with `iap.TunnelDestGroupIamBinding` and `iap.TunnelDestGroupIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iap.TunnelDestGroupIamBinding` resources **can be** used in conjunction with `iap.TunnelDestGroupIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## iap.TunnelDestGroupIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iap.tunnelResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewTunnelDestGroupIamPolicy(ctx, "policy", &iap.TunnelDestGroupIamPolicyArgs{
//				Project:    pulumi.Any(destGroup.Project),
//				Region:     pulumi.Any(destGroup.Region),
//				DestGroup:  pulumi.Any(destGroup.GroupName),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iap.tunnelResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewTunnelDestGroupIamPolicy(ctx, "policy", &iap.TunnelDestGroupIamPolicyArgs{
//				Project:    pulumi.Any(destGroup.Project),
//				Region:     pulumi.Any(destGroup.Region),
//				DestGroup:  pulumi.Any(destGroup.GroupName),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## iap.TunnelDestGroupIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroupIamBinding(ctx, "binding", &iap.TunnelDestGroupIamBindingArgs{
//				Project:   pulumi.Any(destGroup.Project),
//				Region:    pulumi.Any(destGroup.Region),
//				DestGroup: pulumi.Any(destGroup.GroupName),
//				Role:      pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroupIamBinding(ctx, "binding", &iap.TunnelDestGroupIamBindingArgs{
//				Project:   pulumi.Any(destGroup.Project),
//				Region:    pulumi.Any(destGroup.Region),
//				DestGroup: pulumi.Any(destGroup.GroupName),
//				Role:      pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &iap.TunnelDestGroupIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## iap.TunnelDestGroupIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroupIamMember(ctx, "member", &iap.TunnelDestGroupIamMemberArgs{
//				Project:   pulumi.Any(destGroup.Project),
//				Region:    pulumi.Any(destGroup.Region),
//				DestGroup: pulumi.Any(destGroup.GroupName),
//				Role:      pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Member:    pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelDestGroupIamMember(ctx, "member", &iap.TunnelDestGroupIamMemberArgs{
//				Project:   pulumi.Any(destGroup.Project),
//				Region:    pulumi.Any(destGroup.Region),
//				DestGroup: pulumi.Any(destGroup.GroupName),
//				Role:      pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Member:    pulumi.String("user:jane@example.com"),
//				Condition: &iap.TunnelDestGroupIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{dest_group}}
//
// * {{project}}/iap_tunnel/locations/{{region}}/destGroups/{{dest_group}}
//
// * {{project}}/{{region}}/{{dest_group}}
//
// * {{region}}/{{dest_group}}
//
// * {{dest_group}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Identity-Aware Proxy tunneldestgroup IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroupIamPolicy:TunnelDestGroupIamPolicy editor "projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{dest_group}} roles/iap.tunnelResourceAccessor user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroupIamPolicy:TunnelDestGroupIamPolicy editor "projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{dest_group}} roles/iap.tunnelResourceAccessor"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:iap/tunnelDestGroupIamPolicy:TunnelDestGroupIamPolicy editor projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{dest_group}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type TunnelDestGroupIamPolicy struct {
	pulumi.CustomResourceState

	// Used to find the parent resource to bind the IAM policy to
	DestGroup pulumi.StringOutput `pulumi:"destGroup"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the tunnel group. Must be the same as the network resources in the group.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewTunnelDestGroupIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTunnelDestGroupIamPolicy(ctx *pulumi.Context,
	name string, args *TunnelDestGroupIamPolicyArgs, opts ...pulumi.ResourceOption) (*TunnelDestGroupIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestGroup == nil {
		return nil, errors.New("invalid value for required argument 'DestGroup'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TunnelDestGroupIamPolicy
	err := ctx.RegisterResource("gcp:iap/tunnelDestGroupIamPolicy:TunnelDestGroupIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTunnelDestGroupIamPolicy gets an existing TunnelDestGroupIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTunnelDestGroupIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TunnelDestGroupIamPolicyState, opts ...pulumi.ResourceOption) (*TunnelDestGroupIamPolicy, error) {
	var resource TunnelDestGroupIamPolicy
	err := ctx.ReadResource("gcp:iap/tunnelDestGroupIamPolicy:TunnelDestGroupIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TunnelDestGroupIamPolicy resources.
type tunnelDestGroupIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	DestGroup *string `pulumi:"destGroup"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the tunnel group. Must be the same as the network resources in the group.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

type TunnelDestGroupIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	DestGroup pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the tunnel group. Must be the same as the network resources in the group.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (TunnelDestGroupIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelDestGroupIamPolicyState)(nil)).Elem()
}

type tunnelDestGroupIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	DestGroup string `pulumi:"destGroup"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the tunnel group. Must be the same as the network resources in the group.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a TunnelDestGroupIamPolicy resource.
type TunnelDestGroupIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	DestGroup pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the tunnel group. Must be the same as the network resources in the group.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (TunnelDestGroupIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelDestGroupIamPolicyArgs)(nil)).Elem()
}

type TunnelDestGroupIamPolicyInput interface {
	pulumi.Input

	ToTunnelDestGroupIamPolicyOutput() TunnelDestGroupIamPolicyOutput
	ToTunnelDestGroupIamPolicyOutputWithContext(ctx context.Context) TunnelDestGroupIamPolicyOutput
}

func (*TunnelDestGroupIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelDestGroupIamPolicy)(nil)).Elem()
}

func (i *TunnelDestGroupIamPolicy) ToTunnelDestGroupIamPolicyOutput() TunnelDestGroupIamPolicyOutput {
	return i.ToTunnelDestGroupIamPolicyOutputWithContext(context.Background())
}

func (i *TunnelDestGroupIamPolicy) ToTunnelDestGroupIamPolicyOutputWithContext(ctx context.Context) TunnelDestGroupIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelDestGroupIamPolicyOutput)
}

// TunnelDestGroupIamPolicyArrayInput is an input type that accepts TunnelDestGroupIamPolicyArray and TunnelDestGroupIamPolicyArrayOutput values.
// You can construct a concrete instance of `TunnelDestGroupIamPolicyArrayInput` via:
//
//	TunnelDestGroupIamPolicyArray{ TunnelDestGroupIamPolicyArgs{...} }
type TunnelDestGroupIamPolicyArrayInput interface {
	pulumi.Input

	ToTunnelDestGroupIamPolicyArrayOutput() TunnelDestGroupIamPolicyArrayOutput
	ToTunnelDestGroupIamPolicyArrayOutputWithContext(context.Context) TunnelDestGroupIamPolicyArrayOutput
}

type TunnelDestGroupIamPolicyArray []TunnelDestGroupIamPolicyInput

func (TunnelDestGroupIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelDestGroupIamPolicy)(nil)).Elem()
}

func (i TunnelDestGroupIamPolicyArray) ToTunnelDestGroupIamPolicyArrayOutput() TunnelDestGroupIamPolicyArrayOutput {
	return i.ToTunnelDestGroupIamPolicyArrayOutputWithContext(context.Background())
}

func (i TunnelDestGroupIamPolicyArray) ToTunnelDestGroupIamPolicyArrayOutputWithContext(ctx context.Context) TunnelDestGroupIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelDestGroupIamPolicyArrayOutput)
}

// TunnelDestGroupIamPolicyMapInput is an input type that accepts TunnelDestGroupIamPolicyMap and TunnelDestGroupIamPolicyMapOutput values.
// You can construct a concrete instance of `TunnelDestGroupIamPolicyMapInput` via:
//
//	TunnelDestGroupIamPolicyMap{ "key": TunnelDestGroupIamPolicyArgs{...} }
type TunnelDestGroupIamPolicyMapInput interface {
	pulumi.Input

	ToTunnelDestGroupIamPolicyMapOutput() TunnelDestGroupIamPolicyMapOutput
	ToTunnelDestGroupIamPolicyMapOutputWithContext(context.Context) TunnelDestGroupIamPolicyMapOutput
}

type TunnelDestGroupIamPolicyMap map[string]TunnelDestGroupIamPolicyInput

func (TunnelDestGroupIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelDestGroupIamPolicy)(nil)).Elem()
}

func (i TunnelDestGroupIamPolicyMap) ToTunnelDestGroupIamPolicyMapOutput() TunnelDestGroupIamPolicyMapOutput {
	return i.ToTunnelDestGroupIamPolicyMapOutputWithContext(context.Background())
}

func (i TunnelDestGroupIamPolicyMap) ToTunnelDestGroupIamPolicyMapOutputWithContext(ctx context.Context) TunnelDestGroupIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelDestGroupIamPolicyMapOutput)
}

type TunnelDestGroupIamPolicyOutput struct{ *pulumi.OutputState }

func (TunnelDestGroupIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelDestGroupIamPolicy)(nil)).Elem()
}

func (o TunnelDestGroupIamPolicyOutput) ToTunnelDestGroupIamPolicyOutput() TunnelDestGroupIamPolicyOutput {
	return o
}

func (o TunnelDestGroupIamPolicyOutput) ToTunnelDestGroupIamPolicyOutputWithContext(ctx context.Context) TunnelDestGroupIamPolicyOutput {
	return o
}

// Used to find the parent resource to bind the IAM policy to
func (o TunnelDestGroupIamPolicyOutput) DestGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroupIamPolicy) pulumi.StringOutput { return v.DestGroup }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o TunnelDestGroupIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroupIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o TunnelDestGroupIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroupIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o TunnelDestGroupIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroupIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the tunnel group. Must be the same as the network resources in the group.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o TunnelDestGroupIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelDestGroupIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type TunnelDestGroupIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (TunnelDestGroupIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelDestGroupIamPolicy)(nil)).Elem()
}

func (o TunnelDestGroupIamPolicyArrayOutput) ToTunnelDestGroupIamPolicyArrayOutput() TunnelDestGroupIamPolicyArrayOutput {
	return o
}

func (o TunnelDestGroupIamPolicyArrayOutput) ToTunnelDestGroupIamPolicyArrayOutputWithContext(ctx context.Context) TunnelDestGroupIamPolicyArrayOutput {
	return o
}

func (o TunnelDestGroupIamPolicyArrayOutput) Index(i pulumi.IntInput) TunnelDestGroupIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TunnelDestGroupIamPolicy {
		return vs[0].([]*TunnelDestGroupIamPolicy)[vs[1].(int)]
	}).(TunnelDestGroupIamPolicyOutput)
}

type TunnelDestGroupIamPolicyMapOutput struct{ *pulumi.OutputState }

func (TunnelDestGroupIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelDestGroupIamPolicy)(nil)).Elem()
}

func (o TunnelDestGroupIamPolicyMapOutput) ToTunnelDestGroupIamPolicyMapOutput() TunnelDestGroupIamPolicyMapOutput {
	return o
}

func (o TunnelDestGroupIamPolicyMapOutput) ToTunnelDestGroupIamPolicyMapOutputWithContext(ctx context.Context) TunnelDestGroupIamPolicyMapOutput {
	return o
}

func (o TunnelDestGroupIamPolicyMapOutput) MapIndex(k pulumi.StringInput) TunnelDestGroupIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TunnelDestGroupIamPolicy {
		return vs[0].(map[string]*TunnelDestGroupIamPolicy)[vs[1].(string)]
	}).(TunnelDestGroupIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelDestGroupIamPolicyInput)(nil)).Elem(), &TunnelDestGroupIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelDestGroupIamPolicyArrayInput)(nil)).Elem(), TunnelDestGroupIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelDestGroupIamPolicyMapInput)(nil)).Elem(), TunnelDestGroupIamPolicyMap{})
	pulumi.RegisterOutputType(TunnelDestGroupIamPolicyOutput{})
	pulumi.RegisterOutputType(TunnelDestGroupIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(TunnelDestGroupIamPolicyMapOutput{})
}
