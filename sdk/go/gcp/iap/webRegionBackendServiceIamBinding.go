// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WebRegionBackendServiceIamBinding struct {
	pulumi.CustomResourceState

	Condition               WebRegionBackendServiceIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                    pulumi.StringOutput                                 `pulumi:"etag"`
	Members                 pulumi.StringArrayOutput                            `pulumi:"members"`
	Project                 pulumi.StringOutput                                 `pulumi:"project"`
	Region                  pulumi.StringOutput                                 `pulumi:"region"`
	Role                    pulumi.StringOutput                                 `pulumi:"role"`
	WebRegionBackendService pulumi.StringOutput                                 `pulumi:"webRegionBackendService"`
}

// NewWebRegionBackendServiceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewWebRegionBackendServiceIamBinding(ctx *pulumi.Context,
	name string, args *WebRegionBackendServiceIamBindingArgs, opts ...pulumi.ResourceOption) (*WebRegionBackendServiceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.WebRegionBackendService == nil {
		return nil, errors.New("invalid value for required argument 'WebRegionBackendService'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebRegionBackendServiceIamBinding
	err := ctx.RegisterResource("gcp:iap/webRegionBackendServiceIamBinding:WebRegionBackendServiceIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebRegionBackendServiceIamBinding gets an existing WebRegionBackendServiceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebRegionBackendServiceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebRegionBackendServiceIamBindingState, opts ...pulumi.ResourceOption) (*WebRegionBackendServiceIamBinding, error) {
	var resource WebRegionBackendServiceIamBinding
	err := ctx.ReadResource("gcp:iap/webRegionBackendServiceIamBinding:WebRegionBackendServiceIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebRegionBackendServiceIamBinding resources.
type webRegionBackendServiceIamBindingState struct {
	Condition               *WebRegionBackendServiceIamBindingCondition `pulumi:"condition"`
	Etag                    *string                                     `pulumi:"etag"`
	Members                 []string                                    `pulumi:"members"`
	Project                 *string                                     `pulumi:"project"`
	Region                  *string                                     `pulumi:"region"`
	Role                    *string                                     `pulumi:"role"`
	WebRegionBackendService *string                                     `pulumi:"webRegionBackendService"`
}

type WebRegionBackendServiceIamBindingState struct {
	Condition               WebRegionBackendServiceIamBindingConditionPtrInput
	Etag                    pulumi.StringPtrInput
	Members                 pulumi.StringArrayInput
	Project                 pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	Role                    pulumi.StringPtrInput
	WebRegionBackendService pulumi.StringPtrInput
}

func (WebRegionBackendServiceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*webRegionBackendServiceIamBindingState)(nil)).Elem()
}

type webRegionBackendServiceIamBindingArgs struct {
	Condition               *WebRegionBackendServiceIamBindingCondition `pulumi:"condition"`
	Members                 []string                                    `pulumi:"members"`
	Project                 *string                                     `pulumi:"project"`
	Region                  *string                                     `pulumi:"region"`
	Role                    string                                      `pulumi:"role"`
	WebRegionBackendService string                                      `pulumi:"webRegionBackendService"`
}

// The set of arguments for constructing a WebRegionBackendServiceIamBinding resource.
type WebRegionBackendServiceIamBindingArgs struct {
	Condition               WebRegionBackendServiceIamBindingConditionPtrInput
	Members                 pulumi.StringArrayInput
	Project                 pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	Role                    pulumi.StringInput
	WebRegionBackendService pulumi.StringInput
}

func (WebRegionBackendServiceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webRegionBackendServiceIamBindingArgs)(nil)).Elem()
}

type WebRegionBackendServiceIamBindingInput interface {
	pulumi.Input

	ToWebRegionBackendServiceIamBindingOutput() WebRegionBackendServiceIamBindingOutput
	ToWebRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) WebRegionBackendServiceIamBindingOutput
}

func (*WebRegionBackendServiceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**WebRegionBackendServiceIamBinding)(nil)).Elem()
}

func (i *WebRegionBackendServiceIamBinding) ToWebRegionBackendServiceIamBindingOutput() WebRegionBackendServiceIamBindingOutput {
	return i.ToWebRegionBackendServiceIamBindingOutputWithContext(context.Background())
}

func (i *WebRegionBackendServiceIamBinding) ToWebRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) WebRegionBackendServiceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebRegionBackendServiceIamBindingOutput)
}

// WebRegionBackendServiceIamBindingArrayInput is an input type that accepts WebRegionBackendServiceIamBindingArray and WebRegionBackendServiceIamBindingArrayOutput values.
// You can construct a concrete instance of `WebRegionBackendServiceIamBindingArrayInput` via:
//
//	WebRegionBackendServiceIamBindingArray{ WebRegionBackendServiceIamBindingArgs{...} }
type WebRegionBackendServiceIamBindingArrayInput interface {
	pulumi.Input

	ToWebRegionBackendServiceIamBindingArrayOutput() WebRegionBackendServiceIamBindingArrayOutput
	ToWebRegionBackendServiceIamBindingArrayOutputWithContext(context.Context) WebRegionBackendServiceIamBindingArrayOutput
}

type WebRegionBackendServiceIamBindingArray []WebRegionBackendServiceIamBindingInput

func (WebRegionBackendServiceIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebRegionBackendServiceIamBinding)(nil)).Elem()
}

func (i WebRegionBackendServiceIamBindingArray) ToWebRegionBackendServiceIamBindingArrayOutput() WebRegionBackendServiceIamBindingArrayOutput {
	return i.ToWebRegionBackendServiceIamBindingArrayOutputWithContext(context.Background())
}

func (i WebRegionBackendServiceIamBindingArray) ToWebRegionBackendServiceIamBindingArrayOutputWithContext(ctx context.Context) WebRegionBackendServiceIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebRegionBackendServiceIamBindingArrayOutput)
}

// WebRegionBackendServiceIamBindingMapInput is an input type that accepts WebRegionBackendServiceIamBindingMap and WebRegionBackendServiceIamBindingMapOutput values.
// You can construct a concrete instance of `WebRegionBackendServiceIamBindingMapInput` via:
//
//	WebRegionBackendServiceIamBindingMap{ "key": WebRegionBackendServiceIamBindingArgs{...} }
type WebRegionBackendServiceIamBindingMapInput interface {
	pulumi.Input

	ToWebRegionBackendServiceIamBindingMapOutput() WebRegionBackendServiceIamBindingMapOutput
	ToWebRegionBackendServiceIamBindingMapOutputWithContext(context.Context) WebRegionBackendServiceIamBindingMapOutput
}

type WebRegionBackendServiceIamBindingMap map[string]WebRegionBackendServiceIamBindingInput

func (WebRegionBackendServiceIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebRegionBackendServiceIamBinding)(nil)).Elem()
}

func (i WebRegionBackendServiceIamBindingMap) ToWebRegionBackendServiceIamBindingMapOutput() WebRegionBackendServiceIamBindingMapOutput {
	return i.ToWebRegionBackendServiceIamBindingMapOutputWithContext(context.Background())
}

func (i WebRegionBackendServiceIamBindingMap) ToWebRegionBackendServiceIamBindingMapOutputWithContext(ctx context.Context) WebRegionBackendServiceIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebRegionBackendServiceIamBindingMapOutput)
}

type WebRegionBackendServiceIamBindingOutput struct{ *pulumi.OutputState }

func (WebRegionBackendServiceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebRegionBackendServiceIamBinding)(nil)).Elem()
}

func (o WebRegionBackendServiceIamBindingOutput) ToWebRegionBackendServiceIamBindingOutput() WebRegionBackendServiceIamBindingOutput {
	return o
}

func (o WebRegionBackendServiceIamBindingOutput) ToWebRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) WebRegionBackendServiceIamBindingOutput {
	return o
}

func (o WebRegionBackendServiceIamBindingOutput) Condition() WebRegionBackendServiceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamBinding) WebRegionBackendServiceIamBindingConditionPtrOutput {
		return v.Condition
	}).(WebRegionBackendServiceIamBindingConditionPtrOutput)
}

func (o WebRegionBackendServiceIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o WebRegionBackendServiceIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o WebRegionBackendServiceIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o WebRegionBackendServiceIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o WebRegionBackendServiceIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o WebRegionBackendServiceIamBindingOutput) WebRegionBackendService() pulumi.StringOutput {
	return o.ApplyT(func(v *WebRegionBackendServiceIamBinding) pulumi.StringOutput { return v.WebRegionBackendService }).(pulumi.StringOutput)
}

type WebRegionBackendServiceIamBindingArrayOutput struct{ *pulumi.OutputState }

func (WebRegionBackendServiceIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebRegionBackendServiceIamBinding)(nil)).Elem()
}

func (o WebRegionBackendServiceIamBindingArrayOutput) ToWebRegionBackendServiceIamBindingArrayOutput() WebRegionBackendServiceIamBindingArrayOutput {
	return o
}

func (o WebRegionBackendServiceIamBindingArrayOutput) ToWebRegionBackendServiceIamBindingArrayOutputWithContext(ctx context.Context) WebRegionBackendServiceIamBindingArrayOutput {
	return o
}

func (o WebRegionBackendServiceIamBindingArrayOutput) Index(i pulumi.IntInput) WebRegionBackendServiceIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebRegionBackendServiceIamBinding {
		return vs[0].([]*WebRegionBackendServiceIamBinding)[vs[1].(int)]
	}).(WebRegionBackendServiceIamBindingOutput)
}

type WebRegionBackendServiceIamBindingMapOutput struct{ *pulumi.OutputState }

func (WebRegionBackendServiceIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebRegionBackendServiceIamBinding)(nil)).Elem()
}

func (o WebRegionBackendServiceIamBindingMapOutput) ToWebRegionBackendServiceIamBindingMapOutput() WebRegionBackendServiceIamBindingMapOutput {
	return o
}

func (o WebRegionBackendServiceIamBindingMapOutput) ToWebRegionBackendServiceIamBindingMapOutputWithContext(ctx context.Context) WebRegionBackendServiceIamBindingMapOutput {
	return o
}

func (o WebRegionBackendServiceIamBindingMapOutput) MapIndex(k pulumi.StringInput) WebRegionBackendServiceIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebRegionBackendServiceIamBinding {
		return vs[0].(map[string]*WebRegionBackendServiceIamBinding)[vs[1].(string)]
	}).(WebRegionBackendServiceIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebRegionBackendServiceIamBindingInput)(nil)).Elem(), &WebRegionBackendServiceIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebRegionBackendServiceIamBindingArrayInput)(nil)).Elem(), WebRegionBackendServiceIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebRegionBackendServiceIamBindingMapInput)(nil)).Elem(), WebRegionBackendServiceIamBindingMap{})
	pulumi.RegisterOutputType(WebRegionBackendServiceIamBindingOutput{})
	pulumi.RegisterOutputType(WebRegionBackendServiceIamBindingArrayOutput{})
	pulumi.RegisterOutputType(WebRegionBackendServiceIamBindingMapOutput{})
}
