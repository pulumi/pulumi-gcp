// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AppEngineServiceIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// AppEngineServiceIamBindingConditionInput is an input type that accepts AppEngineServiceIamBindingConditionArgs and AppEngineServiceIamBindingConditionOutput values.
// You can construct a concrete instance of `AppEngineServiceIamBindingConditionInput` via:
//
// 		 AppEngineServiceIamBindingConditionArgs{...}
//
type AppEngineServiceIamBindingConditionInput interface {
	pulumi.Input

	ToAppEngineServiceIamBindingConditionOutput() AppEngineServiceIamBindingConditionOutput
	ToAppEngineServiceIamBindingConditionOutputWithContext(context.Context) AppEngineServiceIamBindingConditionOutput
}

type AppEngineServiceIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineServiceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamBindingCondition)(nil)).Elem()
}

func (i AppEngineServiceIamBindingConditionArgs) ToAppEngineServiceIamBindingConditionOutput() AppEngineServiceIamBindingConditionOutput {
	return i.ToAppEngineServiceIamBindingConditionOutputWithContext(context.Background())
}

func (i AppEngineServiceIamBindingConditionArgs) ToAppEngineServiceIamBindingConditionOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionOutput)
}

func (i AppEngineServiceIamBindingConditionArgs) ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput {
	return i.ToAppEngineServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i AppEngineServiceIamBindingConditionArgs) ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionOutput).ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx)
}

// AppEngineServiceIamBindingConditionPtrInput is an input type that accepts AppEngineServiceIamBindingConditionArgs, AppEngineServiceIamBindingConditionPtr and AppEngineServiceIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `AppEngineServiceIamBindingConditionPtrInput` via:
//
// 		 AppEngineServiceIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type AppEngineServiceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput
	ToAppEngineServiceIamBindingConditionPtrOutputWithContext(context.Context) AppEngineServiceIamBindingConditionPtrOutput
}

type appEngineServiceIamBindingConditionPtrType AppEngineServiceIamBindingConditionArgs

func AppEngineServiceIamBindingConditionPtr(v *AppEngineServiceIamBindingConditionArgs) AppEngineServiceIamBindingConditionPtrInput {
	return (*appEngineServiceIamBindingConditionPtrType)(v)
}

func (*appEngineServiceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamBindingCondition)(nil)).Elem()
}

func (i *appEngineServiceIamBindingConditionPtrType) ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput {
	return i.ToAppEngineServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *appEngineServiceIamBindingConditionPtrType) ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionPtrOutput)
}

type AppEngineServiceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamBindingCondition)(nil)).Elem()
}

func (o AppEngineServiceIamBindingConditionOutput) ToAppEngineServiceIamBindingConditionOutput() AppEngineServiceIamBindingConditionOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionOutput) ToAppEngineServiceIamBindingConditionOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionOutput) ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput {
	return o.ToAppEngineServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o AppEngineServiceIamBindingConditionOutput) ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) *AppEngineServiceIamBindingCondition {
		return &v
	}).(AppEngineServiceIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamBindingCondition)(nil)).Elem()
}

func (o AppEngineServiceIamBindingConditionPtrOutput) ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionPtrOutput) ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionPtrOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionPtrOutput) Elem() AppEngineServiceIamBindingConditionOutput {
	return o.ApplyT(func(v *AppEngineServiceIamBindingCondition) AppEngineServiceIamBindingCondition { return *v }).(AppEngineServiceIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type AppEngineServiceIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// AppEngineServiceIamMemberConditionInput is an input type that accepts AppEngineServiceIamMemberConditionArgs and AppEngineServiceIamMemberConditionOutput values.
// You can construct a concrete instance of `AppEngineServiceIamMemberConditionInput` via:
//
// 		 AppEngineServiceIamMemberConditionArgs{...}
//
type AppEngineServiceIamMemberConditionInput interface {
	pulumi.Input

	ToAppEngineServiceIamMemberConditionOutput() AppEngineServiceIamMemberConditionOutput
	ToAppEngineServiceIamMemberConditionOutputWithContext(context.Context) AppEngineServiceIamMemberConditionOutput
}

type AppEngineServiceIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineServiceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamMemberCondition)(nil)).Elem()
}

func (i AppEngineServiceIamMemberConditionArgs) ToAppEngineServiceIamMemberConditionOutput() AppEngineServiceIamMemberConditionOutput {
	return i.ToAppEngineServiceIamMemberConditionOutputWithContext(context.Background())
}

func (i AppEngineServiceIamMemberConditionArgs) ToAppEngineServiceIamMemberConditionOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionOutput)
}

func (i AppEngineServiceIamMemberConditionArgs) ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput {
	return i.ToAppEngineServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i AppEngineServiceIamMemberConditionArgs) ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionOutput).ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx)
}

// AppEngineServiceIamMemberConditionPtrInput is an input type that accepts AppEngineServiceIamMemberConditionArgs, AppEngineServiceIamMemberConditionPtr and AppEngineServiceIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `AppEngineServiceIamMemberConditionPtrInput` via:
//
// 		 AppEngineServiceIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type AppEngineServiceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput
	ToAppEngineServiceIamMemberConditionPtrOutputWithContext(context.Context) AppEngineServiceIamMemberConditionPtrOutput
}

type appEngineServiceIamMemberConditionPtrType AppEngineServiceIamMemberConditionArgs

func AppEngineServiceIamMemberConditionPtr(v *AppEngineServiceIamMemberConditionArgs) AppEngineServiceIamMemberConditionPtrInput {
	return (*appEngineServiceIamMemberConditionPtrType)(v)
}

func (*appEngineServiceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamMemberCondition)(nil)).Elem()
}

func (i *appEngineServiceIamMemberConditionPtrType) ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput {
	return i.ToAppEngineServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *appEngineServiceIamMemberConditionPtrType) ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionPtrOutput)
}

type AppEngineServiceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamMemberCondition)(nil)).Elem()
}

func (o AppEngineServiceIamMemberConditionOutput) ToAppEngineServiceIamMemberConditionOutput() AppEngineServiceIamMemberConditionOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionOutput) ToAppEngineServiceIamMemberConditionOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionOutput) ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput {
	return o.ToAppEngineServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o AppEngineServiceIamMemberConditionOutput) ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) *AppEngineServiceIamMemberCondition {
		return &v
	}).(AppEngineServiceIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamMemberCondition)(nil)).Elem()
}

func (o AppEngineServiceIamMemberConditionPtrOutput) ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionPtrOutput) ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionPtrOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionPtrOutput) Elem() AppEngineServiceIamMemberConditionOutput {
	return o.ApplyT(func(v *AppEngineServiceIamMemberCondition) AppEngineServiceIamMemberCondition { return *v }).(AppEngineServiceIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type AppEngineVersionIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// AppEngineVersionIamBindingConditionInput is an input type that accepts AppEngineVersionIamBindingConditionArgs and AppEngineVersionIamBindingConditionOutput values.
// You can construct a concrete instance of `AppEngineVersionIamBindingConditionInput` via:
//
// 		 AppEngineVersionIamBindingConditionArgs{...}
//
type AppEngineVersionIamBindingConditionInput interface {
	pulumi.Input

	ToAppEngineVersionIamBindingConditionOutput() AppEngineVersionIamBindingConditionOutput
	ToAppEngineVersionIamBindingConditionOutputWithContext(context.Context) AppEngineVersionIamBindingConditionOutput
}

type AppEngineVersionIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineVersionIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamBindingCondition)(nil)).Elem()
}

func (i AppEngineVersionIamBindingConditionArgs) ToAppEngineVersionIamBindingConditionOutput() AppEngineVersionIamBindingConditionOutput {
	return i.ToAppEngineVersionIamBindingConditionOutputWithContext(context.Background())
}

func (i AppEngineVersionIamBindingConditionArgs) ToAppEngineVersionIamBindingConditionOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionOutput)
}

func (i AppEngineVersionIamBindingConditionArgs) ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput {
	return i.ToAppEngineVersionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i AppEngineVersionIamBindingConditionArgs) ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionOutput).ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx)
}

// AppEngineVersionIamBindingConditionPtrInput is an input type that accepts AppEngineVersionIamBindingConditionArgs, AppEngineVersionIamBindingConditionPtr and AppEngineVersionIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `AppEngineVersionIamBindingConditionPtrInput` via:
//
// 		 AppEngineVersionIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type AppEngineVersionIamBindingConditionPtrInput interface {
	pulumi.Input

	ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput
	ToAppEngineVersionIamBindingConditionPtrOutputWithContext(context.Context) AppEngineVersionIamBindingConditionPtrOutput
}

type appEngineVersionIamBindingConditionPtrType AppEngineVersionIamBindingConditionArgs

func AppEngineVersionIamBindingConditionPtr(v *AppEngineVersionIamBindingConditionArgs) AppEngineVersionIamBindingConditionPtrInput {
	return (*appEngineVersionIamBindingConditionPtrType)(v)
}

func (*appEngineVersionIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamBindingCondition)(nil)).Elem()
}

func (i *appEngineVersionIamBindingConditionPtrType) ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput {
	return i.ToAppEngineVersionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *appEngineVersionIamBindingConditionPtrType) ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionPtrOutput)
}

type AppEngineVersionIamBindingConditionOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamBindingCondition)(nil)).Elem()
}

func (o AppEngineVersionIamBindingConditionOutput) ToAppEngineVersionIamBindingConditionOutput() AppEngineVersionIamBindingConditionOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionOutput) ToAppEngineVersionIamBindingConditionOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionOutput) ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput {
	return o.ToAppEngineVersionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o AppEngineVersionIamBindingConditionOutput) ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) *AppEngineVersionIamBindingCondition {
		return &v
	}).(AppEngineVersionIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamBindingCondition)(nil)).Elem()
}

func (o AppEngineVersionIamBindingConditionPtrOutput) ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionPtrOutput) ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionPtrOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionPtrOutput) Elem() AppEngineVersionIamBindingConditionOutput {
	return o.ApplyT(func(v *AppEngineVersionIamBindingCondition) AppEngineVersionIamBindingCondition { return *v }).(AppEngineVersionIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineVersionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineVersionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineVersionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type AppEngineVersionIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// AppEngineVersionIamMemberConditionInput is an input type that accepts AppEngineVersionIamMemberConditionArgs and AppEngineVersionIamMemberConditionOutput values.
// You can construct a concrete instance of `AppEngineVersionIamMemberConditionInput` via:
//
// 		 AppEngineVersionIamMemberConditionArgs{...}
//
type AppEngineVersionIamMemberConditionInput interface {
	pulumi.Input

	ToAppEngineVersionIamMemberConditionOutput() AppEngineVersionIamMemberConditionOutput
	ToAppEngineVersionIamMemberConditionOutputWithContext(context.Context) AppEngineVersionIamMemberConditionOutput
}

type AppEngineVersionIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineVersionIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamMemberCondition)(nil)).Elem()
}

func (i AppEngineVersionIamMemberConditionArgs) ToAppEngineVersionIamMemberConditionOutput() AppEngineVersionIamMemberConditionOutput {
	return i.ToAppEngineVersionIamMemberConditionOutputWithContext(context.Background())
}

func (i AppEngineVersionIamMemberConditionArgs) ToAppEngineVersionIamMemberConditionOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionOutput)
}

func (i AppEngineVersionIamMemberConditionArgs) ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput {
	return i.ToAppEngineVersionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i AppEngineVersionIamMemberConditionArgs) ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionOutput).ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx)
}

// AppEngineVersionIamMemberConditionPtrInput is an input type that accepts AppEngineVersionIamMemberConditionArgs, AppEngineVersionIamMemberConditionPtr and AppEngineVersionIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `AppEngineVersionIamMemberConditionPtrInput` via:
//
// 		 AppEngineVersionIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type AppEngineVersionIamMemberConditionPtrInput interface {
	pulumi.Input

	ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput
	ToAppEngineVersionIamMemberConditionPtrOutputWithContext(context.Context) AppEngineVersionIamMemberConditionPtrOutput
}

type appEngineVersionIamMemberConditionPtrType AppEngineVersionIamMemberConditionArgs

func AppEngineVersionIamMemberConditionPtr(v *AppEngineVersionIamMemberConditionArgs) AppEngineVersionIamMemberConditionPtrInput {
	return (*appEngineVersionIamMemberConditionPtrType)(v)
}

func (*appEngineVersionIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamMemberCondition)(nil)).Elem()
}

func (i *appEngineVersionIamMemberConditionPtrType) ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput {
	return i.ToAppEngineVersionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *appEngineVersionIamMemberConditionPtrType) ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionPtrOutput)
}

type AppEngineVersionIamMemberConditionOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamMemberCondition)(nil)).Elem()
}

func (o AppEngineVersionIamMemberConditionOutput) ToAppEngineVersionIamMemberConditionOutput() AppEngineVersionIamMemberConditionOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionOutput) ToAppEngineVersionIamMemberConditionOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionOutput) ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput {
	return o.ToAppEngineVersionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o AppEngineVersionIamMemberConditionOutput) ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) *AppEngineVersionIamMemberCondition {
		return &v
	}).(AppEngineVersionIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamMemberCondition)(nil)).Elem()
}

func (o AppEngineVersionIamMemberConditionPtrOutput) ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionPtrOutput) ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionPtrOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionPtrOutput) Elem() AppEngineVersionIamMemberConditionOutput {
	return o.ApplyT(func(v *AppEngineVersionIamMemberCondition) AppEngineVersionIamMemberCondition { return *v }).(AppEngineVersionIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineVersionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineVersionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineVersionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TunnelInstanceIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// TunnelInstanceIAMBindingConditionInput is an input type that accepts TunnelInstanceIAMBindingConditionArgs and TunnelInstanceIAMBindingConditionOutput values.
// You can construct a concrete instance of `TunnelInstanceIAMBindingConditionInput` via:
//
// 		 TunnelInstanceIAMBindingConditionArgs{...}
//
type TunnelInstanceIAMBindingConditionInput interface {
	pulumi.Input

	ToTunnelInstanceIAMBindingConditionOutput() TunnelInstanceIAMBindingConditionOutput
	ToTunnelInstanceIAMBindingConditionOutputWithContext(context.Context) TunnelInstanceIAMBindingConditionOutput
}

type TunnelInstanceIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TunnelInstanceIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMBindingCondition)(nil)).Elem()
}

func (i TunnelInstanceIAMBindingConditionArgs) ToTunnelInstanceIAMBindingConditionOutput() TunnelInstanceIAMBindingConditionOutput {
	return i.ToTunnelInstanceIAMBindingConditionOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMBindingConditionArgs) ToTunnelInstanceIAMBindingConditionOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionOutput)
}

func (i TunnelInstanceIAMBindingConditionArgs) ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput {
	return i.ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMBindingConditionArgs) ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionOutput).ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx)
}

// TunnelInstanceIAMBindingConditionPtrInput is an input type that accepts TunnelInstanceIAMBindingConditionArgs, TunnelInstanceIAMBindingConditionPtr and TunnelInstanceIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `TunnelInstanceIAMBindingConditionPtrInput` via:
//
// 		 TunnelInstanceIAMBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type TunnelInstanceIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput
	ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(context.Context) TunnelInstanceIAMBindingConditionPtrOutput
}

type tunnelInstanceIAMBindingConditionPtrType TunnelInstanceIAMBindingConditionArgs

func TunnelInstanceIAMBindingConditionPtr(v *TunnelInstanceIAMBindingConditionArgs) TunnelInstanceIAMBindingConditionPtrInput {
	return (*tunnelInstanceIAMBindingConditionPtrType)(v)
}

func (*tunnelInstanceIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMBindingCondition)(nil)).Elem()
}

func (i *tunnelInstanceIAMBindingConditionPtrType) ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput {
	return i.ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *tunnelInstanceIAMBindingConditionPtrType) ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionPtrOutput)
}

type TunnelInstanceIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMBindingCondition)(nil)).Elem()
}

func (o TunnelInstanceIAMBindingConditionOutput) ToTunnelInstanceIAMBindingConditionOutput() TunnelInstanceIAMBindingConditionOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionOutput) ToTunnelInstanceIAMBindingConditionOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionOutput) ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput {
	return o.ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o TunnelInstanceIAMBindingConditionOutput) ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) *TunnelInstanceIAMBindingCondition {
		return &v
	}).(TunnelInstanceIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMBindingCondition)(nil)).Elem()
}

func (o TunnelInstanceIAMBindingConditionPtrOutput) ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionPtrOutput) ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionPtrOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionPtrOutput) Elem() TunnelInstanceIAMBindingConditionOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMBindingCondition) TunnelInstanceIAMBindingCondition { return *v }).(TunnelInstanceIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TunnelInstanceIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// TunnelInstanceIAMMemberConditionInput is an input type that accepts TunnelInstanceIAMMemberConditionArgs and TunnelInstanceIAMMemberConditionOutput values.
// You can construct a concrete instance of `TunnelInstanceIAMMemberConditionInput` via:
//
// 		 TunnelInstanceIAMMemberConditionArgs{...}
//
type TunnelInstanceIAMMemberConditionInput interface {
	pulumi.Input

	ToTunnelInstanceIAMMemberConditionOutput() TunnelInstanceIAMMemberConditionOutput
	ToTunnelInstanceIAMMemberConditionOutputWithContext(context.Context) TunnelInstanceIAMMemberConditionOutput
}

type TunnelInstanceIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TunnelInstanceIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMMemberCondition)(nil)).Elem()
}

func (i TunnelInstanceIAMMemberConditionArgs) ToTunnelInstanceIAMMemberConditionOutput() TunnelInstanceIAMMemberConditionOutput {
	return i.ToTunnelInstanceIAMMemberConditionOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMMemberConditionArgs) ToTunnelInstanceIAMMemberConditionOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionOutput)
}

func (i TunnelInstanceIAMMemberConditionArgs) ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput {
	return i.ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMMemberConditionArgs) ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionOutput).ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx)
}

// TunnelInstanceIAMMemberConditionPtrInput is an input type that accepts TunnelInstanceIAMMemberConditionArgs, TunnelInstanceIAMMemberConditionPtr and TunnelInstanceIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `TunnelInstanceIAMMemberConditionPtrInput` via:
//
// 		 TunnelInstanceIAMMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type TunnelInstanceIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput
	ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(context.Context) TunnelInstanceIAMMemberConditionPtrOutput
}

type tunnelInstanceIAMMemberConditionPtrType TunnelInstanceIAMMemberConditionArgs

func TunnelInstanceIAMMemberConditionPtr(v *TunnelInstanceIAMMemberConditionArgs) TunnelInstanceIAMMemberConditionPtrInput {
	return (*tunnelInstanceIAMMemberConditionPtrType)(v)
}

func (*tunnelInstanceIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMMemberCondition)(nil)).Elem()
}

func (i *tunnelInstanceIAMMemberConditionPtrType) ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput {
	return i.ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *tunnelInstanceIAMMemberConditionPtrType) ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionPtrOutput)
}

type TunnelInstanceIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMMemberCondition)(nil)).Elem()
}

func (o TunnelInstanceIAMMemberConditionOutput) ToTunnelInstanceIAMMemberConditionOutput() TunnelInstanceIAMMemberConditionOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionOutput) ToTunnelInstanceIAMMemberConditionOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionOutput) ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput {
	return o.ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o TunnelInstanceIAMMemberConditionOutput) ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) *TunnelInstanceIAMMemberCondition {
		return &v
	}).(TunnelInstanceIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMMemberCondition)(nil)).Elem()
}

func (o TunnelInstanceIAMMemberConditionPtrOutput) ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionPtrOutput) ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionPtrOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionPtrOutput) Elem() TunnelInstanceIAMMemberConditionOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMMemberCondition) TunnelInstanceIAMMemberCondition { return *v }).(TunnelInstanceIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type WebBackendServiceIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// WebBackendServiceIamBindingConditionInput is an input type that accepts WebBackendServiceIamBindingConditionArgs and WebBackendServiceIamBindingConditionOutput values.
// You can construct a concrete instance of `WebBackendServiceIamBindingConditionInput` via:
//
// 		 WebBackendServiceIamBindingConditionArgs{...}
//
type WebBackendServiceIamBindingConditionInput interface {
	pulumi.Input

	ToWebBackendServiceIamBindingConditionOutput() WebBackendServiceIamBindingConditionOutput
	ToWebBackendServiceIamBindingConditionOutputWithContext(context.Context) WebBackendServiceIamBindingConditionOutput
}

type WebBackendServiceIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebBackendServiceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamBindingCondition)(nil)).Elem()
}

func (i WebBackendServiceIamBindingConditionArgs) ToWebBackendServiceIamBindingConditionOutput() WebBackendServiceIamBindingConditionOutput {
	return i.ToWebBackendServiceIamBindingConditionOutputWithContext(context.Background())
}

func (i WebBackendServiceIamBindingConditionArgs) ToWebBackendServiceIamBindingConditionOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionOutput)
}

func (i WebBackendServiceIamBindingConditionArgs) ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput {
	return i.ToWebBackendServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i WebBackendServiceIamBindingConditionArgs) ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionOutput).ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx)
}

// WebBackendServiceIamBindingConditionPtrInput is an input type that accepts WebBackendServiceIamBindingConditionArgs, WebBackendServiceIamBindingConditionPtr and WebBackendServiceIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `WebBackendServiceIamBindingConditionPtrInput` via:
//
// 		 WebBackendServiceIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type WebBackendServiceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput
	ToWebBackendServiceIamBindingConditionPtrOutputWithContext(context.Context) WebBackendServiceIamBindingConditionPtrOutput
}

type webBackendServiceIamBindingConditionPtrType WebBackendServiceIamBindingConditionArgs

func WebBackendServiceIamBindingConditionPtr(v *WebBackendServiceIamBindingConditionArgs) WebBackendServiceIamBindingConditionPtrInput {
	return (*webBackendServiceIamBindingConditionPtrType)(v)
}

func (*webBackendServiceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamBindingCondition)(nil)).Elem()
}

func (i *webBackendServiceIamBindingConditionPtrType) ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput {
	return i.ToWebBackendServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *webBackendServiceIamBindingConditionPtrType) ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionPtrOutput)
}

type WebBackendServiceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamBindingCondition)(nil)).Elem()
}

func (o WebBackendServiceIamBindingConditionOutput) ToWebBackendServiceIamBindingConditionOutput() WebBackendServiceIamBindingConditionOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionOutput) ToWebBackendServiceIamBindingConditionOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionOutput) ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput {
	return o.ToWebBackendServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o WebBackendServiceIamBindingConditionOutput) ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) *WebBackendServiceIamBindingCondition {
		return &v
	}).(WebBackendServiceIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamBindingCondition)(nil)).Elem()
}

func (o WebBackendServiceIamBindingConditionPtrOutput) ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionPtrOutput) ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionPtrOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionPtrOutput) Elem() WebBackendServiceIamBindingConditionOutput {
	return o.ApplyT(func(v *WebBackendServiceIamBindingCondition) WebBackendServiceIamBindingCondition { return *v }).(WebBackendServiceIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebBackendServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebBackendServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebBackendServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type WebBackendServiceIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// WebBackendServiceIamMemberConditionInput is an input type that accepts WebBackendServiceIamMemberConditionArgs and WebBackendServiceIamMemberConditionOutput values.
// You can construct a concrete instance of `WebBackendServiceIamMemberConditionInput` via:
//
// 		 WebBackendServiceIamMemberConditionArgs{...}
//
type WebBackendServiceIamMemberConditionInput interface {
	pulumi.Input

	ToWebBackendServiceIamMemberConditionOutput() WebBackendServiceIamMemberConditionOutput
	ToWebBackendServiceIamMemberConditionOutputWithContext(context.Context) WebBackendServiceIamMemberConditionOutput
}

type WebBackendServiceIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebBackendServiceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamMemberCondition)(nil)).Elem()
}

func (i WebBackendServiceIamMemberConditionArgs) ToWebBackendServiceIamMemberConditionOutput() WebBackendServiceIamMemberConditionOutput {
	return i.ToWebBackendServiceIamMemberConditionOutputWithContext(context.Background())
}

func (i WebBackendServiceIamMemberConditionArgs) ToWebBackendServiceIamMemberConditionOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionOutput)
}

func (i WebBackendServiceIamMemberConditionArgs) ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput {
	return i.ToWebBackendServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i WebBackendServiceIamMemberConditionArgs) ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionOutput).ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx)
}

// WebBackendServiceIamMemberConditionPtrInput is an input type that accepts WebBackendServiceIamMemberConditionArgs, WebBackendServiceIamMemberConditionPtr and WebBackendServiceIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `WebBackendServiceIamMemberConditionPtrInput` via:
//
// 		 WebBackendServiceIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type WebBackendServiceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput
	ToWebBackendServiceIamMemberConditionPtrOutputWithContext(context.Context) WebBackendServiceIamMemberConditionPtrOutput
}

type webBackendServiceIamMemberConditionPtrType WebBackendServiceIamMemberConditionArgs

func WebBackendServiceIamMemberConditionPtr(v *WebBackendServiceIamMemberConditionArgs) WebBackendServiceIamMemberConditionPtrInput {
	return (*webBackendServiceIamMemberConditionPtrType)(v)
}

func (*webBackendServiceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamMemberCondition)(nil)).Elem()
}

func (i *webBackendServiceIamMemberConditionPtrType) ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput {
	return i.ToWebBackendServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *webBackendServiceIamMemberConditionPtrType) ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionPtrOutput)
}

type WebBackendServiceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamMemberCondition)(nil)).Elem()
}

func (o WebBackendServiceIamMemberConditionOutput) ToWebBackendServiceIamMemberConditionOutput() WebBackendServiceIamMemberConditionOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionOutput) ToWebBackendServiceIamMemberConditionOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionOutput) ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput {
	return o.ToWebBackendServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o WebBackendServiceIamMemberConditionOutput) ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) *WebBackendServiceIamMemberCondition {
		return &v
	}).(WebBackendServiceIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamMemberCondition)(nil)).Elem()
}

func (o WebBackendServiceIamMemberConditionPtrOutput) ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionPtrOutput) ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionPtrOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionPtrOutput) Elem() WebBackendServiceIamMemberConditionOutput {
	return o.ApplyT(func(v *WebBackendServiceIamMemberCondition) WebBackendServiceIamMemberCondition { return *v }).(WebBackendServiceIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebBackendServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebBackendServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebBackendServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type WebIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// WebIamBindingConditionInput is an input type that accepts WebIamBindingConditionArgs and WebIamBindingConditionOutput values.
// You can construct a concrete instance of `WebIamBindingConditionInput` via:
//
// 		 WebIamBindingConditionArgs{...}
//
type WebIamBindingConditionInput interface {
	pulumi.Input

	ToWebIamBindingConditionOutput() WebIamBindingConditionOutput
	ToWebIamBindingConditionOutputWithContext(context.Context) WebIamBindingConditionOutput
}

type WebIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamBindingCondition)(nil)).Elem()
}

func (i WebIamBindingConditionArgs) ToWebIamBindingConditionOutput() WebIamBindingConditionOutput {
	return i.ToWebIamBindingConditionOutputWithContext(context.Background())
}

func (i WebIamBindingConditionArgs) ToWebIamBindingConditionOutputWithContext(ctx context.Context) WebIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionOutput)
}

func (i WebIamBindingConditionArgs) ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput {
	return i.ToWebIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i WebIamBindingConditionArgs) ToWebIamBindingConditionPtrOutputWithContext(ctx context.Context) WebIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionOutput).ToWebIamBindingConditionPtrOutputWithContext(ctx)
}

// WebIamBindingConditionPtrInput is an input type that accepts WebIamBindingConditionArgs, WebIamBindingConditionPtr and WebIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `WebIamBindingConditionPtrInput` via:
//
// 		 WebIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type WebIamBindingConditionPtrInput interface {
	pulumi.Input

	ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput
	ToWebIamBindingConditionPtrOutputWithContext(context.Context) WebIamBindingConditionPtrOutput
}

type webIamBindingConditionPtrType WebIamBindingConditionArgs

func WebIamBindingConditionPtr(v *WebIamBindingConditionArgs) WebIamBindingConditionPtrInput {
	return (*webIamBindingConditionPtrType)(v)
}

func (*webIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamBindingCondition)(nil)).Elem()
}

func (i *webIamBindingConditionPtrType) ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput {
	return i.ToWebIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *webIamBindingConditionPtrType) ToWebIamBindingConditionPtrOutputWithContext(ctx context.Context) WebIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionPtrOutput)
}

type WebIamBindingConditionOutput struct{ *pulumi.OutputState }

func (WebIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamBindingCondition)(nil)).Elem()
}

func (o WebIamBindingConditionOutput) ToWebIamBindingConditionOutput() WebIamBindingConditionOutput {
	return o
}

func (o WebIamBindingConditionOutput) ToWebIamBindingConditionOutputWithContext(ctx context.Context) WebIamBindingConditionOutput {
	return o
}

func (o WebIamBindingConditionOutput) ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput {
	return o.ToWebIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o WebIamBindingConditionOutput) ToWebIamBindingConditionPtrOutputWithContext(ctx context.Context) WebIamBindingConditionPtrOutput {
	return o.ApplyT(func(v WebIamBindingCondition) *WebIamBindingCondition {
		return &v
	}).(WebIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (WebIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamBindingCondition)(nil)).Elem()
}

func (o WebIamBindingConditionPtrOutput) ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput {
	return o
}

func (o WebIamBindingConditionPtrOutput) ToWebIamBindingConditionPtrOutputWithContext(ctx context.Context) WebIamBindingConditionPtrOutput {
	return o
}

func (o WebIamBindingConditionPtrOutput) Elem() WebIamBindingConditionOutput {
	return o.ApplyT(func(v *WebIamBindingCondition) WebIamBindingCondition { return *v }).(WebIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type WebIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// WebIamMemberConditionInput is an input type that accepts WebIamMemberConditionArgs and WebIamMemberConditionOutput values.
// You can construct a concrete instance of `WebIamMemberConditionInput` via:
//
// 		 WebIamMemberConditionArgs{...}
//
type WebIamMemberConditionInput interface {
	pulumi.Input

	ToWebIamMemberConditionOutput() WebIamMemberConditionOutput
	ToWebIamMemberConditionOutputWithContext(context.Context) WebIamMemberConditionOutput
}

type WebIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamMemberCondition)(nil)).Elem()
}

func (i WebIamMemberConditionArgs) ToWebIamMemberConditionOutput() WebIamMemberConditionOutput {
	return i.ToWebIamMemberConditionOutputWithContext(context.Background())
}

func (i WebIamMemberConditionArgs) ToWebIamMemberConditionOutputWithContext(ctx context.Context) WebIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionOutput)
}

func (i WebIamMemberConditionArgs) ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput {
	return i.ToWebIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i WebIamMemberConditionArgs) ToWebIamMemberConditionPtrOutputWithContext(ctx context.Context) WebIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionOutput).ToWebIamMemberConditionPtrOutputWithContext(ctx)
}

// WebIamMemberConditionPtrInput is an input type that accepts WebIamMemberConditionArgs, WebIamMemberConditionPtr and WebIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `WebIamMemberConditionPtrInput` via:
//
// 		 WebIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type WebIamMemberConditionPtrInput interface {
	pulumi.Input

	ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput
	ToWebIamMemberConditionPtrOutputWithContext(context.Context) WebIamMemberConditionPtrOutput
}

type webIamMemberConditionPtrType WebIamMemberConditionArgs

func WebIamMemberConditionPtr(v *WebIamMemberConditionArgs) WebIamMemberConditionPtrInput {
	return (*webIamMemberConditionPtrType)(v)
}

func (*webIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamMemberCondition)(nil)).Elem()
}

func (i *webIamMemberConditionPtrType) ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput {
	return i.ToWebIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *webIamMemberConditionPtrType) ToWebIamMemberConditionPtrOutputWithContext(ctx context.Context) WebIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionPtrOutput)
}

type WebIamMemberConditionOutput struct{ *pulumi.OutputState }

func (WebIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamMemberCondition)(nil)).Elem()
}

func (o WebIamMemberConditionOutput) ToWebIamMemberConditionOutput() WebIamMemberConditionOutput {
	return o
}

func (o WebIamMemberConditionOutput) ToWebIamMemberConditionOutputWithContext(ctx context.Context) WebIamMemberConditionOutput {
	return o
}

func (o WebIamMemberConditionOutput) ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput {
	return o.ToWebIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o WebIamMemberConditionOutput) ToWebIamMemberConditionPtrOutputWithContext(ctx context.Context) WebIamMemberConditionPtrOutput {
	return o.ApplyT(func(v WebIamMemberCondition) *WebIamMemberCondition {
		return &v
	}).(WebIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (WebIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamMemberCondition)(nil)).Elem()
}

func (o WebIamMemberConditionPtrOutput) ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput {
	return o
}

func (o WebIamMemberConditionPtrOutput) ToWebIamMemberConditionPtrOutputWithContext(ctx context.Context) WebIamMemberConditionPtrOutput {
	return o
}

func (o WebIamMemberConditionPtrOutput) Elem() WebIamMemberConditionOutput {
	return o.ApplyT(func(v *WebIamMemberCondition) WebIamMemberCondition { return *v }).(WebIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type WebTypeAppEngingIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// WebTypeAppEngingIamBindingConditionInput is an input type that accepts WebTypeAppEngingIamBindingConditionArgs and WebTypeAppEngingIamBindingConditionOutput values.
// You can construct a concrete instance of `WebTypeAppEngingIamBindingConditionInput` via:
//
// 		 WebTypeAppEngingIamBindingConditionArgs{...}
//
type WebTypeAppEngingIamBindingConditionInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamBindingConditionOutput() WebTypeAppEngingIamBindingConditionOutput
	ToWebTypeAppEngingIamBindingConditionOutputWithContext(context.Context) WebTypeAppEngingIamBindingConditionOutput
}

type WebTypeAppEngingIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeAppEngingIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamBindingCondition)(nil)).Elem()
}

func (i WebTypeAppEngingIamBindingConditionArgs) ToWebTypeAppEngingIamBindingConditionOutput() WebTypeAppEngingIamBindingConditionOutput {
	return i.ToWebTypeAppEngingIamBindingConditionOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamBindingConditionArgs) ToWebTypeAppEngingIamBindingConditionOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionOutput)
}

func (i WebTypeAppEngingIamBindingConditionArgs) ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput {
	return i.ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamBindingConditionArgs) ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionOutput).ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx)
}

// WebTypeAppEngingIamBindingConditionPtrInput is an input type that accepts WebTypeAppEngingIamBindingConditionArgs, WebTypeAppEngingIamBindingConditionPtr and WebTypeAppEngingIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `WebTypeAppEngingIamBindingConditionPtrInput` via:
//
// 		 WebTypeAppEngingIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type WebTypeAppEngingIamBindingConditionPtrInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput
	ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(context.Context) WebTypeAppEngingIamBindingConditionPtrOutput
}

type webTypeAppEngingIamBindingConditionPtrType WebTypeAppEngingIamBindingConditionArgs

func WebTypeAppEngingIamBindingConditionPtr(v *WebTypeAppEngingIamBindingConditionArgs) WebTypeAppEngingIamBindingConditionPtrInput {
	return (*webTypeAppEngingIamBindingConditionPtrType)(v)
}

func (*webTypeAppEngingIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamBindingCondition)(nil)).Elem()
}

func (i *webTypeAppEngingIamBindingConditionPtrType) ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput {
	return i.ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *webTypeAppEngingIamBindingConditionPtrType) ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionPtrOutput)
}

type WebTypeAppEngingIamBindingConditionOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamBindingCondition)(nil)).Elem()
}

func (o WebTypeAppEngingIamBindingConditionOutput) ToWebTypeAppEngingIamBindingConditionOutput() WebTypeAppEngingIamBindingConditionOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionOutput) ToWebTypeAppEngingIamBindingConditionOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionOutput) ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput {
	return o.ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o WebTypeAppEngingIamBindingConditionOutput) ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) *WebTypeAppEngingIamBindingCondition {
		return &v
	}).(WebTypeAppEngingIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamBindingCondition)(nil)).Elem()
}

func (o WebTypeAppEngingIamBindingConditionPtrOutput) ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionPtrOutput) ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionPtrOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionPtrOutput) Elem() WebTypeAppEngingIamBindingConditionOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamBindingCondition) WebTypeAppEngingIamBindingCondition { return *v }).(WebTypeAppEngingIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type WebTypeAppEngingIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// WebTypeAppEngingIamMemberConditionInput is an input type that accepts WebTypeAppEngingIamMemberConditionArgs and WebTypeAppEngingIamMemberConditionOutput values.
// You can construct a concrete instance of `WebTypeAppEngingIamMemberConditionInput` via:
//
// 		 WebTypeAppEngingIamMemberConditionArgs{...}
//
type WebTypeAppEngingIamMemberConditionInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamMemberConditionOutput() WebTypeAppEngingIamMemberConditionOutput
	ToWebTypeAppEngingIamMemberConditionOutputWithContext(context.Context) WebTypeAppEngingIamMemberConditionOutput
}

type WebTypeAppEngingIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeAppEngingIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamMemberCondition)(nil)).Elem()
}

func (i WebTypeAppEngingIamMemberConditionArgs) ToWebTypeAppEngingIamMemberConditionOutput() WebTypeAppEngingIamMemberConditionOutput {
	return i.ToWebTypeAppEngingIamMemberConditionOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamMemberConditionArgs) ToWebTypeAppEngingIamMemberConditionOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionOutput)
}

func (i WebTypeAppEngingIamMemberConditionArgs) ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput {
	return i.ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamMemberConditionArgs) ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionOutput).ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx)
}

// WebTypeAppEngingIamMemberConditionPtrInput is an input type that accepts WebTypeAppEngingIamMemberConditionArgs, WebTypeAppEngingIamMemberConditionPtr and WebTypeAppEngingIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `WebTypeAppEngingIamMemberConditionPtrInput` via:
//
// 		 WebTypeAppEngingIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type WebTypeAppEngingIamMemberConditionPtrInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput
	ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(context.Context) WebTypeAppEngingIamMemberConditionPtrOutput
}

type webTypeAppEngingIamMemberConditionPtrType WebTypeAppEngingIamMemberConditionArgs

func WebTypeAppEngingIamMemberConditionPtr(v *WebTypeAppEngingIamMemberConditionArgs) WebTypeAppEngingIamMemberConditionPtrInput {
	return (*webTypeAppEngingIamMemberConditionPtrType)(v)
}

func (*webTypeAppEngingIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamMemberCondition)(nil)).Elem()
}

func (i *webTypeAppEngingIamMemberConditionPtrType) ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput {
	return i.ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *webTypeAppEngingIamMemberConditionPtrType) ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionPtrOutput)
}

type WebTypeAppEngingIamMemberConditionOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamMemberCondition)(nil)).Elem()
}

func (o WebTypeAppEngingIamMemberConditionOutput) ToWebTypeAppEngingIamMemberConditionOutput() WebTypeAppEngingIamMemberConditionOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionOutput) ToWebTypeAppEngingIamMemberConditionOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionOutput) ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput {
	return o.ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o WebTypeAppEngingIamMemberConditionOutput) ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) *WebTypeAppEngingIamMemberCondition {
		return &v
	}).(WebTypeAppEngingIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamMemberCondition)(nil)).Elem()
}

func (o WebTypeAppEngingIamMemberConditionPtrOutput) ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionPtrOutput) ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionPtrOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionPtrOutput) Elem() WebTypeAppEngingIamMemberConditionOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamMemberCondition) WebTypeAppEngingIamMemberCondition { return *v }).(WebTypeAppEngingIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type WebTypeComputeIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// WebTypeComputeIamBindingConditionInput is an input type that accepts WebTypeComputeIamBindingConditionArgs and WebTypeComputeIamBindingConditionOutput values.
// You can construct a concrete instance of `WebTypeComputeIamBindingConditionInput` via:
//
// 		 WebTypeComputeIamBindingConditionArgs{...}
//
type WebTypeComputeIamBindingConditionInput interface {
	pulumi.Input

	ToWebTypeComputeIamBindingConditionOutput() WebTypeComputeIamBindingConditionOutput
	ToWebTypeComputeIamBindingConditionOutputWithContext(context.Context) WebTypeComputeIamBindingConditionOutput
}

type WebTypeComputeIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeComputeIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamBindingCondition)(nil)).Elem()
}

func (i WebTypeComputeIamBindingConditionArgs) ToWebTypeComputeIamBindingConditionOutput() WebTypeComputeIamBindingConditionOutput {
	return i.ToWebTypeComputeIamBindingConditionOutputWithContext(context.Background())
}

func (i WebTypeComputeIamBindingConditionArgs) ToWebTypeComputeIamBindingConditionOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionOutput)
}

func (i WebTypeComputeIamBindingConditionArgs) ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput {
	return i.ToWebTypeComputeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i WebTypeComputeIamBindingConditionArgs) ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionOutput).ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx)
}

// WebTypeComputeIamBindingConditionPtrInput is an input type that accepts WebTypeComputeIamBindingConditionArgs, WebTypeComputeIamBindingConditionPtr and WebTypeComputeIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `WebTypeComputeIamBindingConditionPtrInput` via:
//
// 		 WebTypeComputeIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type WebTypeComputeIamBindingConditionPtrInput interface {
	pulumi.Input

	ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput
	ToWebTypeComputeIamBindingConditionPtrOutputWithContext(context.Context) WebTypeComputeIamBindingConditionPtrOutput
}

type webTypeComputeIamBindingConditionPtrType WebTypeComputeIamBindingConditionArgs

func WebTypeComputeIamBindingConditionPtr(v *WebTypeComputeIamBindingConditionArgs) WebTypeComputeIamBindingConditionPtrInput {
	return (*webTypeComputeIamBindingConditionPtrType)(v)
}

func (*webTypeComputeIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamBindingCondition)(nil)).Elem()
}

func (i *webTypeComputeIamBindingConditionPtrType) ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput {
	return i.ToWebTypeComputeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *webTypeComputeIamBindingConditionPtrType) ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionPtrOutput)
}

type WebTypeComputeIamBindingConditionOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamBindingCondition)(nil)).Elem()
}

func (o WebTypeComputeIamBindingConditionOutput) ToWebTypeComputeIamBindingConditionOutput() WebTypeComputeIamBindingConditionOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionOutput) ToWebTypeComputeIamBindingConditionOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionOutput) ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput {
	return o.ToWebTypeComputeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o WebTypeComputeIamBindingConditionOutput) ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) *WebTypeComputeIamBindingCondition {
		return &v
	}).(WebTypeComputeIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamBindingCondition)(nil)).Elem()
}

func (o WebTypeComputeIamBindingConditionPtrOutput) ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionPtrOutput) ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionPtrOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionPtrOutput) Elem() WebTypeComputeIamBindingConditionOutput {
	return o.ApplyT(func(v *WebTypeComputeIamBindingCondition) WebTypeComputeIamBindingCondition { return *v }).(WebTypeComputeIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeComputeIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeComputeIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeComputeIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type WebTypeComputeIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// WebTypeComputeIamMemberConditionInput is an input type that accepts WebTypeComputeIamMemberConditionArgs and WebTypeComputeIamMemberConditionOutput values.
// You can construct a concrete instance of `WebTypeComputeIamMemberConditionInput` via:
//
// 		 WebTypeComputeIamMemberConditionArgs{...}
//
type WebTypeComputeIamMemberConditionInput interface {
	pulumi.Input

	ToWebTypeComputeIamMemberConditionOutput() WebTypeComputeIamMemberConditionOutput
	ToWebTypeComputeIamMemberConditionOutputWithContext(context.Context) WebTypeComputeIamMemberConditionOutput
}

type WebTypeComputeIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeComputeIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamMemberCondition)(nil)).Elem()
}

func (i WebTypeComputeIamMemberConditionArgs) ToWebTypeComputeIamMemberConditionOutput() WebTypeComputeIamMemberConditionOutput {
	return i.ToWebTypeComputeIamMemberConditionOutputWithContext(context.Background())
}

func (i WebTypeComputeIamMemberConditionArgs) ToWebTypeComputeIamMemberConditionOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionOutput)
}

func (i WebTypeComputeIamMemberConditionArgs) ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput {
	return i.ToWebTypeComputeIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i WebTypeComputeIamMemberConditionArgs) ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionOutput).ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx)
}

// WebTypeComputeIamMemberConditionPtrInput is an input type that accepts WebTypeComputeIamMemberConditionArgs, WebTypeComputeIamMemberConditionPtr and WebTypeComputeIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `WebTypeComputeIamMemberConditionPtrInput` via:
//
// 		 WebTypeComputeIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type WebTypeComputeIamMemberConditionPtrInput interface {
	pulumi.Input

	ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput
	ToWebTypeComputeIamMemberConditionPtrOutputWithContext(context.Context) WebTypeComputeIamMemberConditionPtrOutput
}

type webTypeComputeIamMemberConditionPtrType WebTypeComputeIamMemberConditionArgs

func WebTypeComputeIamMemberConditionPtr(v *WebTypeComputeIamMemberConditionArgs) WebTypeComputeIamMemberConditionPtrInput {
	return (*webTypeComputeIamMemberConditionPtrType)(v)
}

func (*webTypeComputeIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamMemberCondition)(nil)).Elem()
}

func (i *webTypeComputeIamMemberConditionPtrType) ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput {
	return i.ToWebTypeComputeIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *webTypeComputeIamMemberConditionPtrType) ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionPtrOutput)
}

type WebTypeComputeIamMemberConditionOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamMemberCondition)(nil)).Elem()
}

func (o WebTypeComputeIamMemberConditionOutput) ToWebTypeComputeIamMemberConditionOutput() WebTypeComputeIamMemberConditionOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionOutput) ToWebTypeComputeIamMemberConditionOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionOutput) ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput {
	return o.ToWebTypeComputeIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o WebTypeComputeIamMemberConditionOutput) ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) *WebTypeComputeIamMemberCondition {
		return &v
	}).(WebTypeComputeIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamMemberCondition)(nil)).Elem()
}

func (o WebTypeComputeIamMemberConditionPtrOutput) ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionPtrOutput) ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionPtrOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionPtrOutput) Elem() WebTypeComputeIamMemberConditionOutput {
	return o.ApplyT(func(v *WebTypeComputeIamMemberCondition) WebTypeComputeIamMemberCondition { return *v }).(WebTypeComputeIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeComputeIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeComputeIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTypeComputeIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppEngineServiceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamBindingConditionOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamMemberConditionOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(WebIamBindingConditionOutput{})
	pulumi.RegisterOutputType(WebIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(WebIamMemberConditionOutput{})
	pulumi.RegisterOutputType(WebIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamBindingConditionOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamMemberConditionOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamBindingConditionOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamMemberConditionOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamMemberConditionPtrOutput{})
}
