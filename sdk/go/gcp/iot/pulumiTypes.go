// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RegistryCredential struct {
	// The certificate format and data.
	PublicKeyCertificate RegistryCredentialPublicKeyCertificate `pulumi:"publicKeyCertificate"`
}

// RegistryCredentialInput is an input type that accepts RegistryCredentialArgs and RegistryCredentialOutput values.
// You can construct a concrete instance of `RegistryCredentialInput` via:
//
// 		 RegistryCredentialArgs{...}
//
type RegistryCredentialInput interface {
	pulumi.Input

	ToRegistryCredentialOutput() RegistryCredentialOutput
	ToRegistryCredentialOutputWithContext(context.Context) RegistryCredentialOutput
}

type RegistryCredentialArgs struct {
	// The certificate format and data.
	PublicKeyCertificate RegistryCredentialPublicKeyCertificateInput `pulumi:"publicKeyCertificate"`
}

func (RegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return i.ToRegistryCredentialOutputWithContext(context.Background())
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialOutput)
}

// RegistryCredentialArrayInput is an input type that accepts RegistryCredentialArray and RegistryCredentialArrayOutput values.
// You can construct a concrete instance of `RegistryCredentialArrayInput` via:
//
// 		 RegistryCredentialArray{ RegistryCredentialArgs{...} }
//
type RegistryCredentialArrayInput interface {
	pulumi.Input

	ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput
	ToRegistryCredentialArrayOutputWithContext(context.Context) RegistryCredentialArrayOutput
}

type RegistryCredentialArray []RegistryCredentialInput

func (RegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return i.ToRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialArrayOutput)
}

type RegistryCredentialOutput struct{ *pulumi.OutputState }

func (RegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return o
}

// The certificate format and data.
func (o RegistryCredentialOutput) PublicKeyCertificate() RegistryCredentialPublicKeyCertificateOutput {
	return o.ApplyT(func(v RegistryCredential) RegistryCredentialPublicKeyCertificate { return v.PublicKeyCertificate }).(RegistryCredentialPublicKeyCertificateOutput)
}

type RegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) Index(i pulumi.IntInput) RegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredential {
		return vs[0].([]RegistryCredential)[vs[1].(int)]
	}).(RegistryCredentialOutput)
}

type RegistryCredentialPublicKeyCertificate struct {
	// The certificate data.
	Certificate string `pulumi:"certificate"`
	// The field allows only  `X509_CERTIFICATE_PEM`.
	Format string `pulumi:"format"`
}

// RegistryCredentialPublicKeyCertificateInput is an input type that accepts RegistryCredentialPublicKeyCertificateArgs and RegistryCredentialPublicKeyCertificateOutput values.
// You can construct a concrete instance of `RegistryCredentialPublicKeyCertificateInput` via:
//
// 		 RegistryCredentialPublicKeyCertificateArgs{...}
//
type RegistryCredentialPublicKeyCertificateInput interface {
	pulumi.Input

	ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput
	ToRegistryCredentialPublicKeyCertificateOutputWithContext(context.Context) RegistryCredentialPublicKeyCertificateOutput
}

type RegistryCredentialPublicKeyCertificateArgs struct {
	// The certificate data.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// The field allows only  `X509_CERTIFICATE_PEM`.
	Format pulumi.StringInput `pulumi:"format"`
}

func (RegistryCredentialPublicKeyCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificate)(nil)).Elem()
}

func (i RegistryCredentialPublicKeyCertificateArgs) ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput {
	return i.ToRegistryCredentialPublicKeyCertificateOutputWithContext(context.Background())
}

func (i RegistryCredentialPublicKeyCertificateArgs) ToRegistryCredentialPublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialPublicKeyCertificateOutput)
}

type RegistryCredentialPublicKeyCertificateOutput struct{ *pulumi.OutputState }

func (RegistryCredentialPublicKeyCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificate)(nil)).Elem()
}

func (o RegistryCredentialPublicKeyCertificateOutput) ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput {
	return o
}

func (o RegistryCredentialPublicKeyCertificateOutput) ToRegistryCredentialPublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateOutput {
	return o
}

// The certificate data.
func (o RegistryCredentialPublicKeyCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificate) string { return v.Certificate }).(pulumi.StringOutput)
}

// The field allows only  `X509_CERTIFICATE_PEM`.
func (o RegistryCredentialPublicKeyCertificateOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificate) string { return v.Format }).(pulumi.StringOutput)
}

type RegistryEventNotificationConfigItem struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string
	// exactly, this configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty value can
	// only be used for the last `eventNotificationConfigs` item.
	SubfolderMatches *string `pulumi:"subfolderMatches"`
}

// RegistryEventNotificationConfigItemInput is an input type that accepts RegistryEventNotificationConfigItemArgs and RegistryEventNotificationConfigItemOutput values.
// You can construct a concrete instance of `RegistryEventNotificationConfigItemInput` via:
//
// 		 RegistryEventNotificationConfigItemArgs{...}
//
type RegistryEventNotificationConfigItemInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput
	ToRegistryEventNotificationConfigItemOutputWithContext(context.Context) RegistryEventNotificationConfigItemOutput
}

type RegistryEventNotificationConfigItemArgs struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string
	// exactly, this configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty value can
	// only be used for the last `eventNotificationConfigs` item.
	SubfolderMatches pulumi.StringPtrInput `pulumi:"subfolderMatches"`
}

func (RegistryEventNotificationConfigItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return i.ToRegistryEventNotificationConfigItemOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemOutput)
}

// RegistryEventNotificationConfigItemArrayInput is an input type that accepts RegistryEventNotificationConfigItemArray and RegistryEventNotificationConfigItemArrayOutput values.
// You can construct a concrete instance of `RegistryEventNotificationConfigItemArrayInput` via:
//
// 		 RegistryEventNotificationConfigItemArray{ RegistryEventNotificationConfigItemArgs{...} }
//
type RegistryEventNotificationConfigItemArrayInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput
	ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Context) RegistryEventNotificationConfigItemArrayOutput
}

type RegistryEventNotificationConfigItemArray []RegistryEventNotificationConfigItemInput

func (RegistryEventNotificationConfigItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return i.ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemArrayOutput)
}

type RegistryEventNotificationConfigItemOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return o
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return o
}

// PubSub topic name to publish device state updates.
func (o RegistryEventNotificationConfigItemOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

// If the subfolder name matches this string
// exactly, this configuration will be used. The string must not include the
// leading '/' character. If empty, all strings are matched. Empty value can
// only be used for the last `eventNotificationConfigs` item.
func (o RegistryEventNotificationConfigItemOutput) SubfolderMatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) *string { return v.SubfolderMatches }).(pulumi.StringPtrOutput)
}

type RegistryEventNotificationConfigItemArrayOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) Index(i pulumi.IntInput) RegistryEventNotificationConfigItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryEventNotificationConfigItem {
		return vs[0].([]RegistryEventNotificationConfigItem)[vs[1].(int)]
	}).(RegistryEventNotificationConfigItemOutput)
}

type RegistryHttpConfig struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState string `pulumi:"httpEnabledState"`
}

// RegistryHttpConfigInput is an input type that accepts RegistryHttpConfigArgs and RegistryHttpConfigOutput values.
// You can construct a concrete instance of `RegistryHttpConfigInput` via:
//
// 		 RegistryHttpConfigArgs{...}
//
type RegistryHttpConfigInput interface {
	pulumi.Input

	ToRegistryHttpConfigOutput() RegistryHttpConfigOutput
	ToRegistryHttpConfigOutputWithContext(context.Context) RegistryHttpConfigOutput
}

type RegistryHttpConfigArgs struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState pulumi.StringInput `pulumi:"httpEnabledState"`
}

func (RegistryHttpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfig)(nil)).Elem()
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigOutput() RegistryHttpConfigOutput {
	return i.ToRegistryHttpConfigOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigOutputWithContext(ctx context.Context) RegistryHttpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigOutput)
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return i.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigOutput).ToRegistryHttpConfigPtrOutputWithContext(ctx)
}

// RegistryHttpConfigPtrInput is an input type that accepts RegistryHttpConfigArgs, RegistryHttpConfigPtr and RegistryHttpConfigPtrOutput values.
// You can construct a concrete instance of `RegistryHttpConfigPtrInput` via:
//
// 		 RegistryHttpConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryHttpConfigPtrInput interface {
	pulumi.Input

	ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput
	ToRegistryHttpConfigPtrOutputWithContext(context.Context) RegistryHttpConfigPtrOutput
}

type registryHttpConfigPtrType RegistryHttpConfigArgs

func RegistryHttpConfigPtr(v *RegistryHttpConfigArgs) RegistryHttpConfigPtrInput {
	return (*registryHttpConfigPtrType)(v)
}

func (*registryHttpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfig)(nil)).Elem()
}

func (i *registryHttpConfigPtrType) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return i.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (i *registryHttpConfigPtrType) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigPtrOutput)
}

type RegistryHttpConfigOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfig)(nil)).Elem()
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigOutput() RegistryHttpConfigOutput {
	return o
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigOutputWithContext(ctx context.Context) RegistryHttpConfigOutput {
	return o
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return o.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return o.ApplyT(func(v RegistryHttpConfig) *RegistryHttpConfig {
		return &v
	}).(RegistryHttpConfigPtrOutput)
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryHttpConfig) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

type RegistryHttpConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfig)(nil)).Elem()
}

func (o RegistryHttpConfigPtrOutput) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return o
}

func (o RegistryHttpConfigPtrOutput) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return o
}

func (o RegistryHttpConfigPtrOutput) Elem() RegistryHttpConfigOutput {
	return o.ApplyT(func(v *RegistryHttpConfig) RegistryHttpConfig { return *v }).(RegistryHttpConfigOutput)
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigPtrOutput) HttpEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryHttpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HttpEnabledState
	}).(pulumi.StringPtrOutput)
}

type RegistryMqttConfig struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState string `pulumi:"mqttEnabledState"`
}

// RegistryMqttConfigInput is an input type that accepts RegistryMqttConfigArgs and RegistryMqttConfigOutput values.
// You can construct a concrete instance of `RegistryMqttConfigInput` via:
//
// 		 RegistryMqttConfigArgs{...}
//
type RegistryMqttConfigInput interface {
	pulumi.Input

	ToRegistryMqttConfigOutput() RegistryMqttConfigOutput
	ToRegistryMqttConfigOutputWithContext(context.Context) RegistryMqttConfigOutput
}

type RegistryMqttConfigArgs struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState pulumi.StringInput `pulumi:"mqttEnabledState"`
}

func (RegistryMqttConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfig)(nil)).Elem()
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigOutput() RegistryMqttConfigOutput {
	return i.ToRegistryMqttConfigOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigOutputWithContext(ctx context.Context) RegistryMqttConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigOutput)
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return i.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigOutput).ToRegistryMqttConfigPtrOutputWithContext(ctx)
}

// RegistryMqttConfigPtrInput is an input type that accepts RegistryMqttConfigArgs, RegistryMqttConfigPtr and RegistryMqttConfigPtrOutput values.
// You can construct a concrete instance of `RegistryMqttConfigPtrInput` via:
//
// 		 RegistryMqttConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryMqttConfigPtrInput interface {
	pulumi.Input

	ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput
	ToRegistryMqttConfigPtrOutputWithContext(context.Context) RegistryMqttConfigPtrOutput
}

type registryMqttConfigPtrType RegistryMqttConfigArgs

func RegistryMqttConfigPtr(v *RegistryMqttConfigArgs) RegistryMqttConfigPtrInput {
	return (*registryMqttConfigPtrType)(v)
}

func (*registryMqttConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfig)(nil)).Elem()
}

func (i *registryMqttConfigPtrType) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return i.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (i *registryMqttConfigPtrType) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigPtrOutput)
}

type RegistryMqttConfigOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfig)(nil)).Elem()
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigOutput() RegistryMqttConfigOutput {
	return o
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigOutputWithContext(ctx context.Context) RegistryMqttConfigOutput {
	return o
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return o.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return o.ApplyT(func(v RegistryMqttConfig) *RegistryMqttConfig {
		return &v
	}).(RegistryMqttConfigPtrOutput)
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryMqttConfig) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

type RegistryMqttConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfig)(nil)).Elem()
}

func (o RegistryMqttConfigPtrOutput) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return o
}

func (o RegistryMqttConfigPtrOutput) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return o
}

func (o RegistryMqttConfigPtrOutput) Elem() RegistryMqttConfigOutput {
	return o.ApplyT(func(v *RegistryMqttConfig) RegistryMqttConfig { return *v }).(RegistryMqttConfigOutput)
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigPtrOutput) MqttEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryMqttConfig) *string {
		if v == nil {
			return nil
		}
		return &v.MqttEnabledState
	}).(pulumi.StringPtrOutput)
}

type RegistryStateNotificationConfig struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
}

// RegistryStateNotificationConfigInput is an input type that accepts RegistryStateNotificationConfigArgs and RegistryStateNotificationConfigOutput values.
// You can construct a concrete instance of `RegistryStateNotificationConfigInput` via:
//
// 		 RegistryStateNotificationConfigArgs{...}
//
type RegistryStateNotificationConfigInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput
	ToRegistryStateNotificationConfigOutputWithContext(context.Context) RegistryStateNotificationConfigOutput
}

type RegistryStateNotificationConfigArgs struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
}

func (RegistryStateNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfig)(nil)).Elem()
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput {
	return i.ToRegistryStateNotificationConfigOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigOutputWithContext(ctx context.Context) RegistryStateNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigOutput)
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return i.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigOutput).ToRegistryStateNotificationConfigPtrOutputWithContext(ctx)
}

// RegistryStateNotificationConfigPtrInput is an input type that accepts RegistryStateNotificationConfigArgs, RegistryStateNotificationConfigPtr and RegistryStateNotificationConfigPtrOutput values.
// You can construct a concrete instance of `RegistryStateNotificationConfigPtrInput` via:
//
// 		 RegistryStateNotificationConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryStateNotificationConfigPtrInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput
	ToRegistryStateNotificationConfigPtrOutputWithContext(context.Context) RegistryStateNotificationConfigPtrOutput
}

type registryStateNotificationConfigPtrType RegistryStateNotificationConfigArgs

func RegistryStateNotificationConfigPtr(v *RegistryStateNotificationConfigArgs) RegistryStateNotificationConfigPtrInput {
	return (*registryStateNotificationConfigPtrType)(v)
}

func (*registryStateNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfig)(nil)).Elem()
}

func (i *registryStateNotificationConfigPtrType) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return i.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *registryStateNotificationConfigPtrType) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigPtrOutput)
}

type RegistryStateNotificationConfigOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfig)(nil)).Elem()
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput {
	return o
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigOutputWithContext(ctx context.Context) RegistryStateNotificationConfigOutput {
	return o
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return o.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) *RegistryStateNotificationConfig {
		return &v
	}).(RegistryStateNotificationConfigPtrOutput)
}

// PubSub topic name to publish device state updates.
func (o RegistryStateNotificationConfigOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

type RegistryStateNotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfig)(nil)).Elem()
}

func (o RegistryStateNotificationConfigPtrOutput) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigPtrOutput) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigPtrOutput) Elem() RegistryStateNotificationConfigOutput {
	return o.ApplyT(func(v *RegistryStateNotificationConfig) RegistryStateNotificationConfig { return *v }).(RegistryStateNotificationConfigOutput)
}

// PubSub topic name to publish device state updates.
func (o RegistryStateNotificationConfigPtrOutput) PubsubTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryStateNotificationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PubsubTopicName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(RegistryCredentialOutput{})
	pulumi.RegisterOutputType(RegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialPublicKeyCertificateOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemArrayOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigPtrOutput{})
}
