// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud IoT Core DeviceRegistry. Each of these resources serves a different use case:
//
// * `iot.RegistryIamPolicy`: Authoritative. Sets the IAM policy for the deviceregistry and replaces any existing policy already attached.
// * `iot.RegistryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the deviceregistry are preserved.
// * `iot.RegistryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the deviceregistry are preserved.
//
// > **Note:** `iot.RegistryIamPolicy` **cannot** be used in conjunction with `iot.RegistryIamBinding` and `iot.RegistryIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iot.RegistryIamBinding` resources **can be** used in conjunction with `iot.RegistryIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_cloudiot\_registry\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					organizations.GetIAMPolicyBinding{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewRegistryIamPolicy(ctx, "policy", &iot.RegistryIamPolicyArgs{
//				Project:    pulumi.Any(google_cloudiot_registry.Test - registry.Project),
//				Region:     pulumi.Any(google_cloudiot_registry.Test - registry.Region),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_cloudiot\_registry\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iot.NewRegistryIamBinding(ctx, "binding", &iot.RegistryIamBindingArgs{
//				Project: pulumi.Any(google_cloudiot_registry.Test - registry.Project),
//				Region:  pulumi.Any(google_cloudiot_registry.Test - registry.Region),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_cloudiot\_registry\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iot.NewRegistryIamMember(ctx, "member", &iot.RegistryIamMemberArgs{
//				Project: pulumi.Any(google_cloudiot_registry.Test - registry.Project),
//				Region:  pulumi.Any(google_cloudiot_registry.Test - registry.Region),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/registries/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Cloud IoT Core deviceregistry IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iot/registryIamBinding:RegistryIamBinding editor "projects/{{project}}/locations/{{location}}/registries/{{device_registry}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iot/registryIamBinding:RegistryIamBinding editor "projects/{{project}}/locations/{{location}}/registries/{{device_registry}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iot/registryIamBinding:RegistryIamBinding editor projects/{{project}}/locations/{{location}}/registries/{{device_registry}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RegistryIamBinding struct {
	pulumi.CustomResourceState

	Condition RegistryIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `iot.RegistryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewRegistryIamBinding registers a new resource with the given unique name, arguments, and options.
func NewRegistryIamBinding(ctx *pulumi.Context,
	name string, args *RegistryIamBindingArgs, opts ...pulumi.ResourceOption) (*RegistryIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource RegistryIamBinding
	err := ctx.RegisterResource("gcp:iot/registryIamBinding:RegistryIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryIamBinding gets an existing RegistryIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryIamBindingState, opts ...pulumi.ResourceOption) (*RegistryIamBinding, error) {
	var resource RegistryIamBinding
	err := ctx.ReadResource("gcp:iot/registryIamBinding:RegistryIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryIamBinding resources.
type registryIamBindingState struct {
	Condition *RegistryIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `iot.RegistryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type RegistryIamBindingState struct {
	Condition RegistryIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `iot.RegistryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (RegistryIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryIamBindingState)(nil)).Elem()
}

type registryIamBindingArgs struct {
	Condition *RegistryIamBindingCondition `pulumi:"condition"`
	Members   []string                     `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `iot.RegistryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a RegistryIamBinding resource.
type RegistryIamBindingArgs struct {
	Condition RegistryIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `iot.RegistryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (RegistryIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryIamBindingArgs)(nil)).Elem()
}

type RegistryIamBindingInput interface {
	pulumi.Input

	ToRegistryIamBindingOutput() RegistryIamBindingOutput
	ToRegistryIamBindingOutputWithContext(ctx context.Context) RegistryIamBindingOutput
}

func (*RegistryIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryIamBinding)(nil)).Elem()
}

func (i *RegistryIamBinding) ToRegistryIamBindingOutput() RegistryIamBindingOutput {
	return i.ToRegistryIamBindingOutputWithContext(context.Background())
}

func (i *RegistryIamBinding) ToRegistryIamBindingOutputWithContext(ctx context.Context) RegistryIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryIamBindingOutput)
}

// RegistryIamBindingArrayInput is an input type that accepts RegistryIamBindingArray and RegistryIamBindingArrayOutput values.
// You can construct a concrete instance of `RegistryIamBindingArrayInput` via:
//
//	RegistryIamBindingArray{ RegistryIamBindingArgs{...} }
type RegistryIamBindingArrayInput interface {
	pulumi.Input

	ToRegistryIamBindingArrayOutput() RegistryIamBindingArrayOutput
	ToRegistryIamBindingArrayOutputWithContext(context.Context) RegistryIamBindingArrayOutput
}

type RegistryIamBindingArray []RegistryIamBindingInput

func (RegistryIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryIamBinding)(nil)).Elem()
}

func (i RegistryIamBindingArray) ToRegistryIamBindingArrayOutput() RegistryIamBindingArrayOutput {
	return i.ToRegistryIamBindingArrayOutputWithContext(context.Background())
}

func (i RegistryIamBindingArray) ToRegistryIamBindingArrayOutputWithContext(ctx context.Context) RegistryIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryIamBindingArrayOutput)
}

// RegistryIamBindingMapInput is an input type that accepts RegistryIamBindingMap and RegistryIamBindingMapOutput values.
// You can construct a concrete instance of `RegistryIamBindingMapInput` via:
//
//	RegistryIamBindingMap{ "key": RegistryIamBindingArgs{...} }
type RegistryIamBindingMapInput interface {
	pulumi.Input

	ToRegistryIamBindingMapOutput() RegistryIamBindingMapOutput
	ToRegistryIamBindingMapOutputWithContext(context.Context) RegistryIamBindingMapOutput
}

type RegistryIamBindingMap map[string]RegistryIamBindingInput

func (RegistryIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryIamBinding)(nil)).Elem()
}

func (i RegistryIamBindingMap) ToRegistryIamBindingMapOutput() RegistryIamBindingMapOutput {
	return i.ToRegistryIamBindingMapOutputWithContext(context.Background())
}

func (i RegistryIamBindingMap) ToRegistryIamBindingMapOutputWithContext(ctx context.Context) RegistryIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryIamBindingMapOutput)
}

type RegistryIamBindingOutput struct{ *pulumi.OutputState }

func (RegistryIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryIamBinding)(nil)).Elem()
}

func (o RegistryIamBindingOutput) ToRegistryIamBindingOutput() RegistryIamBindingOutput {
	return o
}

func (o RegistryIamBindingOutput) ToRegistryIamBindingOutputWithContext(ctx context.Context) RegistryIamBindingOutput {
	return o
}

func (o RegistryIamBindingOutput) Condition() RegistryIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *RegistryIamBinding) RegistryIamBindingConditionPtrOutput { return v.Condition }).(RegistryIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o RegistryIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o RegistryIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o RegistryIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RegistryIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region in which the created registry should reside.
// If it is not provided, the provider region is used.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o RegistryIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `iot.RegistryIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o RegistryIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RegistryIamBindingArrayOutput struct{ *pulumi.OutputState }

func (RegistryIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryIamBinding)(nil)).Elem()
}

func (o RegistryIamBindingArrayOutput) ToRegistryIamBindingArrayOutput() RegistryIamBindingArrayOutput {
	return o
}

func (o RegistryIamBindingArrayOutput) ToRegistryIamBindingArrayOutputWithContext(ctx context.Context) RegistryIamBindingArrayOutput {
	return o
}

func (o RegistryIamBindingArrayOutput) Index(i pulumi.IntInput) RegistryIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryIamBinding {
		return vs[0].([]*RegistryIamBinding)[vs[1].(int)]
	}).(RegistryIamBindingOutput)
}

type RegistryIamBindingMapOutput struct{ *pulumi.OutputState }

func (RegistryIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryIamBinding)(nil)).Elem()
}

func (o RegistryIamBindingMapOutput) ToRegistryIamBindingMapOutput() RegistryIamBindingMapOutput {
	return o
}

func (o RegistryIamBindingMapOutput) ToRegistryIamBindingMapOutputWithContext(ctx context.Context) RegistryIamBindingMapOutput {
	return o
}

func (o RegistryIamBindingMapOutput) MapIndex(k pulumi.StringInput) RegistryIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryIamBinding {
		return vs[0].(map[string]*RegistryIamBinding)[vs[1].(string)]
	}).(RegistryIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryIamBindingInput)(nil)).Elem(), &RegistryIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryIamBindingArrayInput)(nil)).Elem(), RegistryIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryIamBindingMapInput)(nil)).Elem(), RegistryIamBindingMap{})
	pulumi.RegisterOutputType(RegistryIamBindingOutput{})
	pulumi.RegisterOutputType(RegistryIamBindingArrayOutput{})
	pulumi.RegisterOutputType(RegistryIamBindingMapOutput{})
}
