// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud IoT Core DeviceRegistry. Each of these resources serves a different use case:
//
// * `iot.RegistryIamPolicy`: Authoritative. Sets the IAM policy for the deviceregistry and replaces any existing policy already attached.
// * `iot.RegistryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the deviceregistry are preserved.
// * `iot.RegistryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the deviceregistry are preserved.
//
// > **Note:** `iot.RegistryIamPolicy` **cannot** be used in conjunction with `iot.RegistryIamBinding` and `iot.RegistryIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iot.RegistryIamBinding` resources **can be** used in conjunction with `iot.RegistryIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_cloudiot\_registry\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					organizations.GetIAMPolicyBinding{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewRegistryIamPolicy(ctx, "policy", &iot.RegistryIamPolicyArgs{
//				Project:    pulumi.Any(google_cloudiot_registry.TestRegistry.Project),
//				Region:     pulumi.Any(google_cloudiot_registry.TestRegistry.Region),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_cloudiot\_registry\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iot.NewRegistryIamBinding(ctx, "binding", &iot.RegistryIamBindingArgs{
//				Project: pulumi.Any(google_cloudiot_registry.TestRegistry.Project),
//				Region:  pulumi.Any(google_cloudiot_registry.TestRegistry.Region),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_cloudiot\_registry\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iot.NewRegistryIamMember(ctx, "member", &iot.RegistryIamMemberArgs{
//				Project: pulumi.Any(google_cloudiot_registry.TestRegistry.Project),
//				Region:  pulumi.Any(google_cloudiot_registry.TestRegistry.Region),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/registries/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Cloud IoT Core deviceregistry IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iot/registryIamPolicy:RegistryIamPolicy editor "projects/{{project}}/locations/{{location}}/registries/{{device_registry}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iot/registryIamPolicy:RegistryIamPolicy editor "projects/{{project}}/locations/{{location}}/registries/{{device_registry}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iot/registryIamPolicy:RegistryIamPolicy editor projects/{{project}}/locations/{{location}}/registries/{{device_registry}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RegistryIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewRegistryIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegistryIamPolicy(ctx *pulumi.Context,
	name string, args *RegistryIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegistryIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource RegistryIamPolicy
	err := ctx.RegisterResource("gcp:iot/registryIamPolicy:RegistryIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryIamPolicy gets an existing RegistryIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryIamPolicyState, opts ...pulumi.ResourceOption) (*RegistryIamPolicy, error) {
	var resource RegistryIamPolicy
	err := ctx.ReadResource("gcp:iot/registryIamPolicy:RegistryIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryIamPolicy resources.
type registryIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

type RegistryIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (RegistryIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryIamPolicyState)(nil)).Elem()
}

type registryIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a RegistryIamPolicy resource.
type RegistryIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (RegistryIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryIamPolicyArgs)(nil)).Elem()
}

type RegistryIamPolicyInput interface {
	pulumi.Input

	ToRegistryIamPolicyOutput() RegistryIamPolicyOutput
	ToRegistryIamPolicyOutputWithContext(ctx context.Context) RegistryIamPolicyOutput
}

func (*RegistryIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryIamPolicy)(nil)).Elem()
}

func (i *RegistryIamPolicy) ToRegistryIamPolicyOutput() RegistryIamPolicyOutput {
	return i.ToRegistryIamPolicyOutputWithContext(context.Background())
}

func (i *RegistryIamPolicy) ToRegistryIamPolicyOutputWithContext(ctx context.Context) RegistryIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryIamPolicyOutput)
}

// RegistryIamPolicyArrayInput is an input type that accepts RegistryIamPolicyArray and RegistryIamPolicyArrayOutput values.
// You can construct a concrete instance of `RegistryIamPolicyArrayInput` via:
//
//	RegistryIamPolicyArray{ RegistryIamPolicyArgs{...} }
type RegistryIamPolicyArrayInput interface {
	pulumi.Input

	ToRegistryIamPolicyArrayOutput() RegistryIamPolicyArrayOutput
	ToRegistryIamPolicyArrayOutputWithContext(context.Context) RegistryIamPolicyArrayOutput
}

type RegistryIamPolicyArray []RegistryIamPolicyInput

func (RegistryIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryIamPolicy)(nil)).Elem()
}

func (i RegistryIamPolicyArray) ToRegistryIamPolicyArrayOutput() RegistryIamPolicyArrayOutput {
	return i.ToRegistryIamPolicyArrayOutputWithContext(context.Background())
}

func (i RegistryIamPolicyArray) ToRegistryIamPolicyArrayOutputWithContext(ctx context.Context) RegistryIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryIamPolicyArrayOutput)
}

// RegistryIamPolicyMapInput is an input type that accepts RegistryIamPolicyMap and RegistryIamPolicyMapOutput values.
// You can construct a concrete instance of `RegistryIamPolicyMapInput` via:
//
//	RegistryIamPolicyMap{ "key": RegistryIamPolicyArgs{...} }
type RegistryIamPolicyMapInput interface {
	pulumi.Input

	ToRegistryIamPolicyMapOutput() RegistryIamPolicyMapOutput
	ToRegistryIamPolicyMapOutputWithContext(context.Context) RegistryIamPolicyMapOutput
}

type RegistryIamPolicyMap map[string]RegistryIamPolicyInput

func (RegistryIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryIamPolicy)(nil)).Elem()
}

func (i RegistryIamPolicyMap) ToRegistryIamPolicyMapOutput() RegistryIamPolicyMapOutput {
	return i.ToRegistryIamPolicyMapOutputWithContext(context.Background())
}

func (i RegistryIamPolicyMap) ToRegistryIamPolicyMapOutputWithContext(ctx context.Context) RegistryIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryIamPolicyMapOutput)
}

type RegistryIamPolicyOutput struct{ *pulumi.OutputState }

func (RegistryIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryIamPolicy)(nil)).Elem()
}

func (o RegistryIamPolicyOutput) ToRegistryIamPolicyOutput() RegistryIamPolicyOutput {
	return o
}

func (o RegistryIamPolicyOutput) ToRegistryIamPolicyOutputWithContext(ctx context.Context) RegistryIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o RegistryIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o RegistryIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o RegistryIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RegistryIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region in which the created registry should reside.
// If it is not provided, the provider region is used.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o RegistryIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type RegistryIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RegistryIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryIamPolicy)(nil)).Elem()
}

func (o RegistryIamPolicyArrayOutput) ToRegistryIamPolicyArrayOutput() RegistryIamPolicyArrayOutput {
	return o
}

func (o RegistryIamPolicyArrayOutput) ToRegistryIamPolicyArrayOutputWithContext(ctx context.Context) RegistryIamPolicyArrayOutput {
	return o
}

func (o RegistryIamPolicyArrayOutput) Index(i pulumi.IntInput) RegistryIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryIamPolicy {
		return vs[0].([]*RegistryIamPolicy)[vs[1].(int)]
	}).(RegistryIamPolicyOutput)
}

type RegistryIamPolicyMapOutput struct{ *pulumi.OutputState }

func (RegistryIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryIamPolicy)(nil)).Elem()
}

func (o RegistryIamPolicyMapOutput) ToRegistryIamPolicyMapOutput() RegistryIamPolicyMapOutput {
	return o
}

func (o RegistryIamPolicyMapOutput) ToRegistryIamPolicyMapOutputWithContext(ctx context.Context) RegistryIamPolicyMapOutput {
	return o
}

func (o RegistryIamPolicyMapOutput) MapIndex(k pulumi.StringInput) RegistryIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryIamPolicy {
		return vs[0].(map[string]*RegistryIamPolicy)[vs[1].(string)]
	}).(RegistryIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryIamPolicyInput)(nil)).Elem(), &RegistryIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryIamPolicyArrayInput)(nil)).Elem(), RegistryIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryIamPolicyMapInput)(nil)).Elem(), RegistryIamPolicyMap{})
	pulumi.RegisterOutputType(RegistryIamPolicyOutput{})
	pulumi.RegisterOutputType(RegistryIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(RegistryIamPolicyMapOutput{})
}
