// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudidentity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupGroupKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupGroupKeyInput is an input type that accepts GroupGroupKeyArgs and GroupGroupKeyOutput values.
// You can construct a concrete instance of `GroupGroupKeyInput` via:
//
//          GroupGroupKeyArgs{...}
type GroupGroupKeyInput interface {
	pulumi.Input

	ToGroupGroupKeyOutput() GroupGroupKeyOutput
	ToGroupGroupKeyOutputWithContext(context.Context) GroupGroupKeyOutput
}

type GroupGroupKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupGroupKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupKey)(nil)).Elem()
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyOutput() GroupGroupKeyOutput {
	return i.ToGroupGroupKeyOutputWithContext(context.Background())
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyOutputWithContext(ctx context.Context) GroupGroupKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyOutput)
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return i.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyOutput).ToGroupGroupKeyPtrOutputWithContext(ctx)
}

// GroupGroupKeyPtrInput is an input type that accepts GroupGroupKeyArgs, GroupGroupKeyPtr and GroupGroupKeyPtrOutput values.
// You can construct a concrete instance of `GroupGroupKeyPtrInput` via:
//
//          GroupGroupKeyArgs{...}
//
//  or:
//
//          nil
type GroupGroupKeyPtrInput interface {
	pulumi.Input

	ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput
	ToGroupGroupKeyPtrOutputWithContext(context.Context) GroupGroupKeyPtrOutput
}

type groupGroupKeyPtrType GroupGroupKeyArgs

func GroupGroupKeyPtr(v *GroupGroupKeyArgs) GroupGroupKeyPtrInput {
	return (*groupGroupKeyPtrType)(v)
}

func (*groupGroupKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupGroupKey)(nil)).Elem()
}

func (i *groupGroupKeyPtrType) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return i.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (i *groupGroupKeyPtrType) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyPtrOutput)
}

type GroupGroupKeyOutput struct{ *pulumi.OutputState }

func (GroupGroupKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupKey)(nil)).Elem()
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyOutput() GroupGroupKeyOutput {
	return o
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyOutputWithContext(ctx context.Context) GroupGroupKeyOutput {
	return o
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return o.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupGroupKey) *GroupGroupKey {
		return &v
	}).(GroupGroupKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupGroupKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupGroupKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupGroupKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGroupKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupGroupKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupGroupKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupGroupKey)(nil)).Elem()
}

func (o GroupGroupKeyPtrOutput) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return o
}

func (o GroupGroupKeyPtrOutput) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return o
}

func (o GroupGroupKeyPtrOutput) Elem() GroupGroupKeyOutput {
	return o.ApplyT(func(v *GroupGroupKey) GroupGroupKey {
		if v != nil {
			return *v
		}
		var ret GroupGroupKey
		return ret
	}).(GroupGroupKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupGroupKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupGroupKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupGroupKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupGroupKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipMemberKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupMembershipMemberKeyInput is an input type that accepts GroupMembershipMemberKeyArgs and GroupMembershipMemberKeyOutput values.
// You can construct a concrete instance of `GroupMembershipMemberKeyInput` via:
//
//          GroupMembershipMemberKeyArgs{...}
type GroupMembershipMemberKeyInput interface {
	pulumi.Input

	ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput
	ToGroupMembershipMemberKeyOutputWithContext(context.Context) GroupMembershipMemberKeyOutput
}

type GroupMembershipMemberKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupMembershipMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipMemberKey)(nil)).Elem()
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput {
	return i.ToGroupMembershipMemberKeyOutputWithContext(context.Background())
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyOutputWithContext(ctx context.Context) GroupMembershipMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyOutput)
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return i.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyOutput).ToGroupMembershipMemberKeyPtrOutputWithContext(ctx)
}

// GroupMembershipMemberKeyPtrInput is an input type that accepts GroupMembershipMemberKeyArgs, GroupMembershipMemberKeyPtr and GroupMembershipMemberKeyPtrOutput values.
// You can construct a concrete instance of `GroupMembershipMemberKeyPtrInput` via:
//
//          GroupMembershipMemberKeyArgs{...}
//
//  or:
//
//          nil
type GroupMembershipMemberKeyPtrInput interface {
	pulumi.Input

	ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput
	ToGroupMembershipMemberKeyPtrOutputWithContext(context.Context) GroupMembershipMemberKeyPtrOutput
}

type groupMembershipMemberKeyPtrType GroupMembershipMemberKeyArgs

func GroupMembershipMemberKeyPtr(v *GroupMembershipMemberKeyArgs) GroupMembershipMemberKeyPtrInput {
	return (*groupMembershipMemberKeyPtrType)(v)
}

func (*groupMembershipMemberKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipMemberKey)(nil)).Elem()
}

func (i *groupMembershipMemberKeyPtrType) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return i.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (i *groupMembershipMemberKeyPtrType) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyPtrOutput)
}

type GroupMembershipMemberKeyOutput struct{ *pulumi.OutputState }

func (GroupMembershipMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipMemberKey)(nil)).Elem()
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput {
	return o
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyOutputWithContext(ctx context.Context) GroupMembershipMemberKeyOutput {
	return o
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return o.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupMembershipMemberKey) *GroupMembershipMemberKey {
		return &v
	}).(GroupMembershipMemberKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipMemberKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembershipMemberKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupMembershipMemberKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupMembershipMemberKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipMemberKey)(nil)).Elem()
}

func (o GroupMembershipMemberKeyPtrOutput) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipMemberKeyPtrOutput) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipMemberKeyPtrOutput) Elem() GroupMembershipMemberKeyOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) GroupMembershipMemberKey {
		if v != nil {
			return *v
		}
		var ret GroupMembershipMemberKey
		return ret
	}).(GroupMembershipMemberKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipMemberKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipMemberKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipPreferredMemberKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupMembershipPreferredMemberKeyInput is an input type that accepts GroupMembershipPreferredMemberKeyArgs and GroupMembershipPreferredMemberKeyOutput values.
// You can construct a concrete instance of `GroupMembershipPreferredMemberKeyInput` via:
//
//          GroupMembershipPreferredMemberKeyArgs{...}
type GroupMembershipPreferredMemberKeyInput interface {
	pulumi.Input

	ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput
	ToGroupMembershipPreferredMemberKeyOutputWithContext(context.Context) GroupMembershipPreferredMemberKeyOutput
}

type GroupMembershipPreferredMemberKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupMembershipPreferredMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput {
	return i.ToGroupMembershipPreferredMemberKeyOutputWithContext(context.Background())
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyOutput)
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return i.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyOutput).ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx)
}

// GroupMembershipPreferredMemberKeyPtrInput is an input type that accepts GroupMembershipPreferredMemberKeyArgs, GroupMembershipPreferredMemberKeyPtr and GroupMembershipPreferredMemberKeyPtrOutput values.
// You can construct a concrete instance of `GroupMembershipPreferredMemberKeyPtrInput` via:
//
//          GroupMembershipPreferredMemberKeyArgs{...}
//
//  or:
//
//          nil
type GroupMembershipPreferredMemberKeyPtrInput interface {
	pulumi.Input

	ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput
	ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Context) GroupMembershipPreferredMemberKeyPtrOutput
}

type groupMembershipPreferredMemberKeyPtrType GroupMembershipPreferredMemberKeyArgs

func GroupMembershipPreferredMemberKeyPtr(v *GroupMembershipPreferredMemberKeyArgs) GroupMembershipPreferredMemberKeyPtrInput {
	return (*groupMembershipPreferredMemberKeyPtrType)(v)
}

func (*groupMembershipPreferredMemberKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (i *groupMembershipPreferredMemberKeyPtrType) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return i.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (i *groupMembershipPreferredMemberKeyPtrType) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyPtrOutput)
}

type GroupMembershipPreferredMemberKeyOutput struct{ *pulumi.OutputState }

func (GroupMembershipPreferredMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return o.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupMembershipPreferredMemberKey) *GroupMembershipPreferredMemberKey {
		return &v
	}).(GroupMembershipPreferredMemberKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipPreferredMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipPreferredMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipPreferredMemberKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembershipPreferredMemberKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupMembershipPreferredMemberKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupMembershipPreferredMemberKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) Elem() GroupMembershipPreferredMemberKeyOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) GroupMembershipPreferredMemberKey {
		if v != nil {
			return *v
		}
		var ret GroupMembershipPreferredMemberKey
		return ret
	}).(GroupMembershipPreferredMemberKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipPreferredMemberKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipPreferredMemberKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipRole struct {
	// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
	// Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
	Name string `pulumi:"name"`
}

// GroupMembershipRoleInput is an input type that accepts GroupMembershipRoleArgs and GroupMembershipRoleOutput values.
// You can construct a concrete instance of `GroupMembershipRoleInput` via:
//
//          GroupMembershipRoleArgs{...}
type GroupMembershipRoleInput interface {
	pulumi.Input

	ToGroupMembershipRoleOutput() GroupMembershipRoleOutput
	ToGroupMembershipRoleOutputWithContext(context.Context) GroupMembershipRoleOutput
}

type GroupMembershipRoleArgs struct {
	// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
	// Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GroupMembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipRole)(nil)).Elem()
}

func (i GroupMembershipRoleArgs) ToGroupMembershipRoleOutput() GroupMembershipRoleOutput {
	return i.ToGroupMembershipRoleOutputWithContext(context.Background())
}

func (i GroupMembershipRoleArgs) ToGroupMembershipRoleOutputWithContext(ctx context.Context) GroupMembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleOutput)
}

// GroupMembershipRoleArrayInput is an input type that accepts GroupMembershipRoleArray and GroupMembershipRoleArrayOutput values.
// You can construct a concrete instance of `GroupMembershipRoleArrayInput` via:
//
//          GroupMembershipRoleArray{ GroupMembershipRoleArgs{...} }
type GroupMembershipRoleArrayInput interface {
	pulumi.Input

	ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput
	ToGroupMembershipRoleArrayOutputWithContext(context.Context) GroupMembershipRoleArrayOutput
}

type GroupMembershipRoleArray []GroupMembershipRoleInput

func (GroupMembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembershipRole)(nil)).Elem()
}

func (i GroupMembershipRoleArray) ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput {
	return i.ToGroupMembershipRoleArrayOutputWithContext(context.Background())
}

func (i GroupMembershipRoleArray) ToGroupMembershipRoleArrayOutputWithContext(ctx context.Context) GroupMembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleArrayOutput)
}

type GroupMembershipRoleOutput struct{ *pulumi.OutputState }

func (GroupMembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipRole)(nil)).Elem()
}

func (o GroupMembershipRoleOutput) ToGroupMembershipRoleOutput() GroupMembershipRoleOutput {
	return o
}

func (o GroupMembershipRoleOutput) ToGroupMembershipRoleOutputWithContext(ctx context.Context) GroupMembershipRoleOutput {
	return o
}

// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
// Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
func (o GroupMembershipRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipRole) string { return v.Name }).(pulumi.StringOutput)
}

type GroupMembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (GroupMembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembershipRole)(nil)).Elem()
}

func (o GroupMembershipRoleArrayOutput) ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput {
	return o
}

func (o GroupMembershipRoleArrayOutput) ToGroupMembershipRoleArrayOutputWithContext(ctx context.Context) GroupMembershipRoleArrayOutput {
	return o
}

func (o GroupMembershipRoleArrayOutput) Index(i pulumi.IntInput) GroupMembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupMembershipRole {
		return vs[0].([]GroupMembershipRole)[vs[1].(int)]
	}).(GroupMembershipRoleOutput)
}

type GetGroupMembershipsMembership struct {
	CreateTime string `pulumi:"createTime"`
	// The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
	Group      string                                   `pulumi:"group"`
	MemberKeys []GetGroupMembershipsMembershipMemberKey `pulumi:"memberKeys"`
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name                string                                            `pulumi:"name"`
	PreferredMemberKeys []GetGroupMembershipsMembershipPreferredMemberKey `pulumi:"preferredMemberKeys"`
	// The MembershipRoles that apply to the Membership. Structure is documented below.
	Roles      []GetGroupMembershipsMembershipRole `pulumi:"roles"`
	Type       string                              `pulumi:"type"`
	UpdateTime string                              `pulumi:"updateTime"`
}

// GetGroupMembershipsMembershipInput is an input type that accepts GetGroupMembershipsMembershipArgs and GetGroupMembershipsMembershipOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipInput` via:
//
//          GetGroupMembershipsMembershipArgs{...}
type GetGroupMembershipsMembershipInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipOutput() GetGroupMembershipsMembershipOutput
	ToGetGroupMembershipsMembershipOutputWithContext(context.Context) GetGroupMembershipsMembershipOutput
}

type GetGroupMembershipsMembershipArgs struct {
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
	Group      pulumi.StringInput                               `pulumi:"group"`
	MemberKeys GetGroupMembershipsMembershipMemberKeyArrayInput `pulumi:"memberKeys"`
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name                pulumi.StringInput                                        `pulumi:"name"`
	PreferredMemberKeys GetGroupMembershipsMembershipPreferredMemberKeyArrayInput `pulumi:"preferredMemberKeys"`
	// The MembershipRoles that apply to the Membership. Structure is documented below.
	Roles      GetGroupMembershipsMembershipRoleArrayInput `pulumi:"roles"`
	Type       pulumi.StringInput                          `pulumi:"type"`
	UpdateTime pulumi.StringInput                          `pulumi:"updateTime"`
}

func (GetGroupMembershipsMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembership)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipArgs) ToGetGroupMembershipsMembershipOutput() GetGroupMembershipsMembershipOutput {
	return i.ToGetGroupMembershipsMembershipOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipArgs) ToGetGroupMembershipsMembershipOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipOutput)
}

// GetGroupMembershipsMembershipArrayInput is an input type that accepts GetGroupMembershipsMembershipArray and GetGroupMembershipsMembershipArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipArrayInput` via:
//
//          GetGroupMembershipsMembershipArray{ GetGroupMembershipsMembershipArgs{...} }
type GetGroupMembershipsMembershipArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipArrayOutput() GetGroupMembershipsMembershipArrayOutput
	ToGetGroupMembershipsMembershipArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipArrayOutput
}

type GetGroupMembershipsMembershipArray []GetGroupMembershipsMembershipInput

func (GetGroupMembershipsMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembership)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipArray) ToGetGroupMembershipsMembershipArrayOutput() GetGroupMembershipsMembershipArrayOutput {
	return i.ToGetGroupMembershipsMembershipArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipArray) ToGetGroupMembershipsMembershipArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipArrayOutput)
}

type GetGroupMembershipsMembershipOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembership)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipOutput) ToGetGroupMembershipsMembershipOutput() GetGroupMembershipsMembershipOutput {
	return o
}

func (o GetGroupMembershipsMembershipOutput) ToGetGroupMembershipsMembershipOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipOutput {
	return o
}

func (o GetGroupMembershipsMembershipOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
func (o GetGroupMembershipsMembershipOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.Group }).(pulumi.StringOutput)
}

func (o GetGroupMembershipsMembershipOutput) MemberKeys() GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) []GetGroupMembershipsMembershipMemberKey { return v.MemberKeys }).(GetGroupMembershipsMembershipMemberKeyArrayOutput)
}

// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
func (o GetGroupMembershipsMembershipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGroupMembershipsMembershipOutput) PreferredMemberKeys() GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) []GetGroupMembershipsMembershipPreferredMemberKey {
		return v.PreferredMemberKeys
	}).(GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput)
}

// The MembershipRoles that apply to the Membership. Structure is documented below.
func (o GetGroupMembershipsMembershipOutput) Roles() GetGroupMembershipsMembershipRoleArrayOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) []GetGroupMembershipsMembershipRole { return v.Roles }).(GetGroupMembershipsMembershipRoleArrayOutput)
}

func (o GetGroupMembershipsMembershipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetGroupMembershipsMembershipOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembership)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipArrayOutput) ToGetGroupMembershipsMembershipArrayOutput() GetGroupMembershipsMembershipArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipArrayOutput) ToGetGroupMembershipsMembershipArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembership {
		return vs[0].([]GetGroupMembershipsMembership)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipOutput)
}

type GetGroupMembershipsMembershipMemberKey struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace string `pulumi:"namespace"`
}

// GetGroupMembershipsMembershipMemberKeyInput is an input type that accepts GetGroupMembershipsMembershipMemberKeyArgs and GetGroupMembershipsMembershipMemberKeyOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipMemberKeyInput` via:
//
//          GetGroupMembershipsMembershipMemberKeyArgs{...}
type GetGroupMembershipsMembershipMemberKeyInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipMemberKeyOutput() GetGroupMembershipsMembershipMemberKeyOutput
	ToGetGroupMembershipsMembershipMemberKeyOutputWithContext(context.Context) GetGroupMembershipsMembershipMemberKeyOutput
}

type GetGroupMembershipsMembershipMemberKeyArgs struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetGroupMembershipsMembershipMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipMemberKey)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipMemberKeyArgs) ToGetGroupMembershipsMembershipMemberKeyOutput() GetGroupMembershipsMembershipMemberKeyOutput {
	return i.ToGetGroupMembershipsMembershipMemberKeyOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipMemberKeyArgs) ToGetGroupMembershipsMembershipMemberKeyOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipMemberKeyOutput)
}

// GetGroupMembershipsMembershipMemberKeyArrayInput is an input type that accepts GetGroupMembershipsMembershipMemberKeyArray and GetGroupMembershipsMembershipMemberKeyArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipMemberKeyArrayInput` via:
//
//          GetGroupMembershipsMembershipMemberKeyArray{ GetGroupMembershipsMembershipMemberKeyArgs{...} }
type GetGroupMembershipsMembershipMemberKeyArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipMemberKeyArrayOutput() GetGroupMembershipsMembershipMemberKeyArrayOutput
	ToGetGroupMembershipsMembershipMemberKeyArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipMemberKeyArrayOutput
}

type GetGroupMembershipsMembershipMemberKeyArray []GetGroupMembershipsMembershipMemberKeyInput

func (GetGroupMembershipsMembershipMemberKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipMemberKey)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipMemberKeyArray) ToGetGroupMembershipsMembershipMemberKeyArrayOutput() GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return i.ToGetGroupMembershipsMembershipMemberKeyArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipMemberKeyArray) ToGetGroupMembershipsMembershipMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipMemberKeyArrayOutput)
}

type GetGroupMembershipsMembershipMemberKeyOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipMemberKey)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipMemberKeyOutput) ToGetGroupMembershipsMembershipMemberKeyOutput() GetGroupMembershipsMembershipMemberKeyOutput {
	return o
}

func (o GetGroupMembershipsMembershipMemberKeyOutput) ToGetGroupMembershipsMembershipMemberKeyOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipMemberKeyOutput {
	return o
}

// The ID of the entity. For Google-managed entities, the id is the email address of an existing
// group or user. For external-identity-mapped entities, the id is a string conforming
// to the Identity Source's requirements.
func (o GetGroupMembershipsMembershipMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not populated, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If populated, the EntityKey represents an external-identity-mapped group.
func (o GetGroupMembershipsMembershipMemberKeyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipMemberKey) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipMemberKeyArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipMemberKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipMemberKey)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipMemberKeyArrayOutput) ToGetGroupMembershipsMembershipMemberKeyArrayOutput() GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipMemberKeyArrayOutput) ToGetGroupMembershipsMembershipMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipMemberKeyArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipMemberKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembershipMemberKey {
		return vs[0].([]GetGroupMembershipsMembershipMemberKey)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipMemberKeyOutput)
}

type GetGroupMembershipsMembershipPreferredMemberKey struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace string `pulumi:"namespace"`
}

// GetGroupMembershipsMembershipPreferredMemberKeyInput is an input type that accepts GetGroupMembershipsMembershipPreferredMemberKeyArgs and GetGroupMembershipsMembershipPreferredMemberKeyOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipPreferredMemberKeyInput` via:
//
//          GetGroupMembershipsMembershipPreferredMemberKeyArgs{...}
type GetGroupMembershipsMembershipPreferredMemberKeyInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipPreferredMemberKeyOutput() GetGroupMembershipsMembershipPreferredMemberKeyOutput
	ToGetGroupMembershipsMembershipPreferredMemberKeyOutputWithContext(context.Context) GetGroupMembershipsMembershipPreferredMemberKeyOutput
}

type GetGroupMembershipsMembershipPreferredMemberKeyArgs struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetGroupMembershipsMembershipPreferredMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipPreferredMemberKeyArgs) ToGetGroupMembershipsMembershipPreferredMemberKeyOutput() GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return i.ToGetGroupMembershipsMembershipPreferredMemberKeyOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipPreferredMemberKeyArgs) ToGetGroupMembershipsMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipPreferredMemberKeyOutput)
}

// GetGroupMembershipsMembershipPreferredMemberKeyArrayInput is an input type that accepts GetGroupMembershipsMembershipPreferredMemberKeyArray and GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipPreferredMemberKeyArrayInput` via:
//
//          GetGroupMembershipsMembershipPreferredMemberKeyArray{ GetGroupMembershipsMembershipPreferredMemberKeyArgs{...} }
type GetGroupMembershipsMembershipPreferredMemberKeyArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput
	ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput
}

type GetGroupMembershipsMembershipPreferredMemberKeyArray []GetGroupMembershipsMembershipPreferredMemberKeyInput

func (GetGroupMembershipsMembershipPreferredMemberKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipPreferredMemberKeyArray) ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return i.ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipPreferredMemberKeyArray) ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput)
}

type GetGroupMembershipsMembershipPreferredMemberKeyOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipPreferredMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyOutput) ToGetGroupMembershipsMembershipPreferredMemberKeyOutput() GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return o
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyOutput) ToGetGroupMembershipsMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return o
}

// The ID of the entity. For Google-managed entities, the id is the email address of an existing
// group or user. For external-identity-mapped entities, the id is a string conforming
// to the Identity Source's requirements.
func (o GetGroupMembershipsMembershipPreferredMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipPreferredMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not populated, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If populated, the EntityKey represents an external-identity-mapped group.
func (o GetGroupMembershipsMembershipPreferredMemberKeyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipPreferredMemberKey) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput) ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput) ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembershipPreferredMemberKey {
		return vs[0].([]GetGroupMembershipsMembershipPreferredMemberKey)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipPreferredMemberKeyOutput)
}

type GetGroupMembershipsMembershipRole struct {
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name string `pulumi:"name"`
}

// GetGroupMembershipsMembershipRoleInput is an input type that accepts GetGroupMembershipsMembershipRoleArgs and GetGroupMembershipsMembershipRoleOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipRoleInput` via:
//
//          GetGroupMembershipsMembershipRoleArgs{...}
type GetGroupMembershipsMembershipRoleInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipRoleOutput() GetGroupMembershipsMembershipRoleOutput
	ToGetGroupMembershipsMembershipRoleOutputWithContext(context.Context) GetGroupMembershipsMembershipRoleOutput
}

type GetGroupMembershipsMembershipRoleArgs struct {
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetGroupMembershipsMembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipRole)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipRoleArgs) ToGetGroupMembershipsMembershipRoleOutput() GetGroupMembershipsMembershipRoleOutput {
	return i.ToGetGroupMembershipsMembershipRoleOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipRoleArgs) ToGetGroupMembershipsMembershipRoleOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipRoleOutput)
}

// GetGroupMembershipsMembershipRoleArrayInput is an input type that accepts GetGroupMembershipsMembershipRoleArray and GetGroupMembershipsMembershipRoleArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipRoleArrayInput` via:
//
//          GetGroupMembershipsMembershipRoleArray{ GetGroupMembershipsMembershipRoleArgs{...} }
type GetGroupMembershipsMembershipRoleArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipRoleArrayOutput() GetGroupMembershipsMembershipRoleArrayOutput
	ToGetGroupMembershipsMembershipRoleArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipRoleArrayOutput
}

type GetGroupMembershipsMembershipRoleArray []GetGroupMembershipsMembershipRoleInput

func (GetGroupMembershipsMembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipRole)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipRoleArray) ToGetGroupMembershipsMembershipRoleArrayOutput() GetGroupMembershipsMembershipRoleArrayOutput {
	return i.ToGetGroupMembershipsMembershipRoleArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipRoleArray) ToGetGroupMembershipsMembershipRoleArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipRoleArrayOutput)
}

type GetGroupMembershipsMembershipRoleOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipRole)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipRoleOutput) ToGetGroupMembershipsMembershipRoleOutput() GetGroupMembershipsMembershipRoleOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleOutput) ToGetGroupMembershipsMembershipRoleOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleOutput {
	return o
}

// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
func (o GetGroupMembershipsMembershipRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipRole) string { return v.Name }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipRole)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipRoleArrayOutput) ToGetGroupMembershipsMembershipRoleArrayOutput() GetGroupMembershipsMembershipRoleArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleArrayOutput) ToGetGroupMembershipsMembershipRoleArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembershipRole {
		return vs[0].([]GetGroupMembershipsMembershipRole)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipRoleOutput)
}

type GetGroupsGroup struct {
	CreateTime         string                   `pulumi:"createTime"`
	Description        string                   `pulumi:"description"`
	DisplayName        string                   `pulumi:"displayName"`
	GroupKeys          []GetGroupsGroupGroupKey `pulumi:"groupKeys"`
	InitialGroupConfig string                   `pulumi:"initialGroupConfig"`
	Labels             map[string]string        `pulumi:"labels"`
	Name               string                   `pulumi:"name"`
	// The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
	Parent     string `pulumi:"parent"`
	UpdateTime string `pulumi:"updateTime"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//          GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	CreateTime         pulumi.StringInput               `pulumi:"createTime"`
	Description        pulumi.StringInput               `pulumi:"description"`
	DisplayName        pulumi.StringInput               `pulumi:"displayName"`
	GroupKeys          GetGroupsGroupGroupKeyArrayInput `pulumi:"groupKeys"`
	InitialGroupConfig pulumi.StringInput               `pulumi:"initialGroupConfig"`
	Labels             pulumi.StringMapInput            `pulumi:"labels"`
	Name               pulumi.StringInput               `pulumi:"name"`
	// The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
	Parent     pulumi.StringInput `pulumi:"parent"`
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//          GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) GroupKeys() GetGroupsGroupGroupKeyArrayOutput {
	return o.ApplyT(func(v GetGroupsGroup) []GetGroupsGroupGroupKey { return v.GroupKeys }).(GetGroupsGroupGroupKeyArrayOutput)
}

func (o GetGroupsGroupOutput) InitialGroupConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.InitialGroupConfig }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetGroupsGroup) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o GetGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
func (o GetGroupsGroupOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Parent }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

type GetGroupsGroupGroupKey struct {
	Id        string `pulumi:"id"`
	Namespace string `pulumi:"namespace"`
}

// GetGroupsGroupGroupKeyInput is an input type that accepts GetGroupsGroupGroupKeyArgs and GetGroupsGroupGroupKeyOutput values.
// You can construct a concrete instance of `GetGroupsGroupGroupKeyInput` via:
//
//          GetGroupsGroupGroupKeyArgs{...}
type GetGroupsGroupGroupKeyInput interface {
	pulumi.Input

	ToGetGroupsGroupGroupKeyOutput() GetGroupsGroupGroupKeyOutput
	ToGetGroupsGroupGroupKeyOutputWithContext(context.Context) GetGroupsGroupGroupKeyOutput
}

type GetGroupsGroupGroupKeyArgs struct {
	Id        pulumi.StringInput `pulumi:"id"`
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetGroupsGroupGroupKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroupGroupKey)(nil)).Elem()
}

func (i GetGroupsGroupGroupKeyArgs) ToGetGroupsGroupGroupKeyOutput() GetGroupsGroupGroupKeyOutput {
	return i.ToGetGroupsGroupGroupKeyOutputWithContext(context.Background())
}

func (i GetGroupsGroupGroupKeyArgs) ToGetGroupsGroupGroupKeyOutputWithContext(ctx context.Context) GetGroupsGroupGroupKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupGroupKeyOutput)
}

// GetGroupsGroupGroupKeyArrayInput is an input type that accepts GetGroupsGroupGroupKeyArray and GetGroupsGroupGroupKeyArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupGroupKeyArrayInput` via:
//
//          GetGroupsGroupGroupKeyArray{ GetGroupsGroupGroupKeyArgs{...} }
type GetGroupsGroupGroupKeyArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupGroupKeyArrayOutput() GetGroupsGroupGroupKeyArrayOutput
	ToGetGroupsGroupGroupKeyArrayOutputWithContext(context.Context) GetGroupsGroupGroupKeyArrayOutput
}

type GetGroupsGroupGroupKeyArray []GetGroupsGroupGroupKeyInput

func (GetGroupsGroupGroupKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroupGroupKey)(nil)).Elem()
}

func (i GetGroupsGroupGroupKeyArray) ToGetGroupsGroupGroupKeyArrayOutput() GetGroupsGroupGroupKeyArrayOutput {
	return i.ToGetGroupsGroupGroupKeyArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupGroupKeyArray) ToGetGroupsGroupGroupKeyArrayOutputWithContext(ctx context.Context) GetGroupsGroupGroupKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupGroupKeyArrayOutput)
}

type GetGroupsGroupGroupKeyOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupGroupKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroupGroupKey)(nil)).Elem()
}

func (o GetGroupsGroupGroupKeyOutput) ToGetGroupsGroupGroupKeyOutput() GetGroupsGroupGroupKeyOutput {
	return o
}

func (o GetGroupsGroupGroupKeyOutput) ToGetGroupsGroupGroupKeyOutputWithContext(ctx context.Context) GetGroupsGroupGroupKeyOutput {
	return o
}

func (o GetGroupsGroupGroupKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroupGroupKey) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGroupsGroupGroupKeyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroupGroupKey) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetGroupsGroupGroupKeyArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupGroupKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroupGroupKey)(nil)).Elem()
}

func (o GetGroupsGroupGroupKeyArrayOutput) ToGetGroupsGroupGroupKeyArrayOutput() GetGroupsGroupGroupKeyArrayOutput {
	return o
}

func (o GetGroupsGroupGroupKeyArrayOutput) ToGetGroupsGroupGroupKeyArrayOutputWithContext(ctx context.Context) GetGroupsGroupGroupKeyArrayOutput {
	return o
}

func (o GetGroupsGroupGroupKeyArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupGroupKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroupGroupKey {
		return vs[0].([]GetGroupsGroupGroupKey)[vs[1].(int)]
	}).(GetGroupsGroupGroupKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGroupKeyInput)(nil)).Elem(), GroupGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGroupKeyPtrInput)(nil)).Elem(), GroupGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipMemberKeyInput)(nil)).Elem(), GroupMembershipMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipMemberKeyPtrInput)(nil)).Elem(), GroupMembershipMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipPreferredMemberKeyInput)(nil)).Elem(), GroupMembershipPreferredMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipPreferredMemberKeyPtrInput)(nil)).Elem(), GroupMembershipPreferredMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipRoleInput)(nil)).Elem(), GroupMembershipRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipRoleArrayInput)(nil)).Elem(), GroupMembershipRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipInput)(nil)).Elem(), GetGroupMembershipsMembershipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipMemberKeyInput)(nil)).Elem(), GetGroupMembershipsMembershipMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipMemberKeyArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipMemberKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipPreferredMemberKeyInput)(nil)).Elem(), GetGroupMembershipsMembershipPreferredMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipPreferredMemberKeyArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipPreferredMemberKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipRoleInput)(nil)).Elem(), GetGroupMembershipsMembershipRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipRoleArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupGroupKeyInput)(nil)).Elem(), GetGroupsGroupGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupGroupKeyArrayInput)(nil)).Elem(), GetGroupsGroupGroupKeyArray{})
	pulumi.RegisterOutputType(GroupGroupKeyOutput{})
	pulumi.RegisterOutputType(GroupGroupKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipMemberKeyOutput{})
	pulumi.RegisterOutputType(GroupMembershipMemberKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipPreferredMemberKeyOutput{})
	pulumi.RegisterOutputType(GroupMembershipPreferredMemberKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipRoleOutput{})
	pulumi.RegisterOutputType(GroupMembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipMemberKeyOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipMemberKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipPreferredMemberKeyOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipRoleOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupGroupKeyOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupGroupKeyArrayOutput{})
}
