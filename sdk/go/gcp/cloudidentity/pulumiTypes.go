// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudidentity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GroupAdditionalGroupKey struct {
	// (Output)
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id *string `pulumi:"id"`
	// (Output)
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupAdditionalGroupKeyInput is an input type that accepts GroupAdditionalGroupKeyArgs and GroupAdditionalGroupKeyOutput values.
// You can construct a concrete instance of `GroupAdditionalGroupKeyInput` via:
//
//	GroupAdditionalGroupKeyArgs{...}
type GroupAdditionalGroupKeyInput interface {
	pulumi.Input

	ToGroupAdditionalGroupKeyOutput() GroupAdditionalGroupKeyOutput
	ToGroupAdditionalGroupKeyOutputWithContext(context.Context) GroupAdditionalGroupKeyOutput
}

type GroupAdditionalGroupKeyArgs struct {
	// (Output)
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// (Output)
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupAdditionalGroupKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupAdditionalGroupKey)(nil)).Elem()
}

func (i GroupAdditionalGroupKeyArgs) ToGroupAdditionalGroupKeyOutput() GroupAdditionalGroupKeyOutput {
	return i.ToGroupAdditionalGroupKeyOutputWithContext(context.Background())
}

func (i GroupAdditionalGroupKeyArgs) ToGroupAdditionalGroupKeyOutputWithContext(ctx context.Context) GroupAdditionalGroupKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupAdditionalGroupKeyOutput)
}

// GroupAdditionalGroupKeyArrayInput is an input type that accepts GroupAdditionalGroupKeyArray and GroupAdditionalGroupKeyArrayOutput values.
// You can construct a concrete instance of `GroupAdditionalGroupKeyArrayInput` via:
//
//	GroupAdditionalGroupKeyArray{ GroupAdditionalGroupKeyArgs{...} }
type GroupAdditionalGroupKeyArrayInput interface {
	pulumi.Input

	ToGroupAdditionalGroupKeyArrayOutput() GroupAdditionalGroupKeyArrayOutput
	ToGroupAdditionalGroupKeyArrayOutputWithContext(context.Context) GroupAdditionalGroupKeyArrayOutput
}

type GroupAdditionalGroupKeyArray []GroupAdditionalGroupKeyInput

func (GroupAdditionalGroupKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupAdditionalGroupKey)(nil)).Elem()
}

func (i GroupAdditionalGroupKeyArray) ToGroupAdditionalGroupKeyArrayOutput() GroupAdditionalGroupKeyArrayOutput {
	return i.ToGroupAdditionalGroupKeyArrayOutputWithContext(context.Background())
}

func (i GroupAdditionalGroupKeyArray) ToGroupAdditionalGroupKeyArrayOutputWithContext(ctx context.Context) GroupAdditionalGroupKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupAdditionalGroupKeyArrayOutput)
}

type GroupAdditionalGroupKeyOutput struct{ *pulumi.OutputState }

func (GroupAdditionalGroupKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupAdditionalGroupKey)(nil)).Elem()
}

func (o GroupAdditionalGroupKeyOutput) ToGroupAdditionalGroupKeyOutput() GroupAdditionalGroupKeyOutput {
	return o
}

func (o GroupAdditionalGroupKeyOutput) ToGroupAdditionalGroupKeyOutputWithContext(ctx context.Context) GroupAdditionalGroupKeyOutput {
	return o
}

// (Output)
// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupAdditionalGroupKeyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupAdditionalGroupKey) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Output)
// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupAdditionalGroupKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupAdditionalGroupKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupAdditionalGroupKeyArrayOutput struct{ *pulumi.OutputState }

func (GroupAdditionalGroupKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupAdditionalGroupKey)(nil)).Elem()
}

func (o GroupAdditionalGroupKeyArrayOutput) ToGroupAdditionalGroupKeyArrayOutput() GroupAdditionalGroupKeyArrayOutput {
	return o
}

func (o GroupAdditionalGroupKeyArrayOutput) ToGroupAdditionalGroupKeyArrayOutputWithContext(ctx context.Context) GroupAdditionalGroupKeyArrayOutput {
	return o
}

func (o GroupAdditionalGroupKeyArrayOutput) Index(i pulumi.IntInput) GroupAdditionalGroupKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupAdditionalGroupKey {
		return vs[0].([]GroupAdditionalGroupKey)[vs[1].(int)]
	}).(GroupAdditionalGroupKeyOutput)
}

type GroupGroupKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupGroupKeyInput is an input type that accepts GroupGroupKeyArgs and GroupGroupKeyOutput values.
// You can construct a concrete instance of `GroupGroupKeyInput` via:
//
//	GroupGroupKeyArgs{...}
type GroupGroupKeyInput interface {
	pulumi.Input

	ToGroupGroupKeyOutput() GroupGroupKeyOutput
	ToGroupGroupKeyOutputWithContext(context.Context) GroupGroupKeyOutput
}

type GroupGroupKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupGroupKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupKey)(nil)).Elem()
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyOutput() GroupGroupKeyOutput {
	return i.ToGroupGroupKeyOutputWithContext(context.Background())
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyOutputWithContext(ctx context.Context) GroupGroupKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyOutput)
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return i.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyOutput).ToGroupGroupKeyPtrOutputWithContext(ctx)
}

// GroupGroupKeyPtrInput is an input type that accepts GroupGroupKeyArgs, GroupGroupKeyPtr and GroupGroupKeyPtrOutput values.
// You can construct a concrete instance of `GroupGroupKeyPtrInput` via:
//
//	        GroupGroupKeyArgs{...}
//
//	or:
//
//	        nil
type GroupGroupKeyPtrInput interface {
	pulumi.Input

	ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput
	ToGroupGroupKeyPtrOutputWithContext(context.Context) GroupGroupKeyPtrOutput
}

type groupGroupKeyPtrType GroupGroupKeyArgs

func GroupGroupKeyPtr(v *GroupGroupKeyArgs) GroupGroupKeyPtrInput {
	return (*groupGroupKeyPtrType)(v)
}

func (*groupGroupKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupGroupKey)(nil)).Elem()
}

func (i *groupGroupKeyPtrType) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return i.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (i *groupGroupKeyPtrType) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyPtrOutput)
}

type GroupGroupKeyOutput struct{ *pulumi.OutputState }

func (GroupGroupKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupKey)(nil)).Elem()
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyOutput() GroupGroupKeyOutput {
	return o
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyOutputWithContext(ctx context.Context) GroupGroupKeyOutput {
	return o
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return o.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupGroupKey) *GroupGroupKey {
		return &v
	}).(GroupGroupKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupGroupKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupGroupKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupGroupKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGroupKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupGroupKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupGroupKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupGroupKey)(nil)).Elem()
}

func (o GroupGroupKeyPtrOutput) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return o
}

func (o GroupGroupKeyPtrOutput) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return o
}

func (o GroupGroupKeyPtrOutput) Elem() GroupGroupKeyOutput {
	return o.ApplyT(func(v *GroupGroupKey) GroupGroupKey {
		if v != nil {
			return *v
		}
		var ret GroupGroupKey
		return ret
	}).(GroupGroupKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupGroupKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupGroupKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupGroupKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupGroupKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipMemberKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupMembershipMemberKeyInput is an input type that accepts GroupMembershipMemberKeyArgs and GroupMembershipMemberKeyOutput values.
// You can construct a concrete instance of `GroupMembershipMemberKeyInput` via:
//
//	GroupMembershipMemberKeyArgs{...}
type GroupMembershipMemberKeyInput interface {
	pulumi.Input

	ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput
	ToGroupMembershipMemberKeyOutputWithContext(context.Context) GroupMembershipMemberKeyOutput
}

type GroupMembershipMemberKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupMembershipMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipMemberKey)(nil)).Elem()
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput {
	return i.ToGroupMembershipMemberKeyOutputWithContext(context.Background())
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyOutputWithContext(ctx context.Context) GroupMembershipMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyOutput)
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return i.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyOutput).ToGroupMembershipMemberKeyPtrOutputWithContext(ctx)
}

// GroupMembershipMemberKeyPtrInput is an input type that accepts GroupMembershipMemberKeyArgs, GroupMembershipMemberKeyPtr and GroupMembershipMemberKeyPtrOutput values.
// You can construct a concrete instance of `GroupMembershipMemberKeyPtrInput` via:
//
//	        GroupMembershipMemberKeyArgs{...}
//
//	or:
//
//	        nil
type GroupMembershipMemberKeyPtrInput interface {
	pulumi.Input

	ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput
	ToGroupMembershipMemberKeyPtrOutputWithContext(context.Context) GroupMembershipMemberKeyPtrOutput
}

type groupMembershipMemberKeyPtrType GroupMembershipMemberKeyArgs

func GroupMembershipMemberKeyPtr(v *GroupMembershipMemberKeyArgs) GroupMembershipMemberKeyPtrInput {
	return (*groupMembershipMemberKeyPtrType)(v)
}

func (*groupMembershipMemberKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipMemberKey)(nil)).Elem()
}

func (i *groupMembershipMemberKeyPtrType) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return i.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (i *groupMembershipMemberKeyPtrType) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyPtrOutput)
}

type GroupMembershipMemberKeyOutput struct{ *pulumi.OutputState }

func (GroupMembershipMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipMemberKey)(nil)).Elem()
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput {
	return o
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyOutputWithContext(ctx context.Context) GroupMembershipMemberKeyOutput {
	return o
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return o.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupMembershipMemberKey) *GroupMembershipMemberKey {
		return &v
	}).(GroupMembershipMemberKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipMemberKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembershipMemberKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupMembershipMemberKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupMembershipMemberKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipMemberKey)(nil)).Elem()
}

func (o GroupMembershipMemberKeyPtrOutput) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipMemberKeyPtrOutput) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipMemberKeyPtrOutput) Elem() GroupMembershipMemberKeyOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) GroupMembershipMemberKey {
		if v != nil {
			return *v
		}
		var ret GroupMembershipMemberKey
		return ret
	}).(GroupMembershipMemberKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipMemberKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipMemberKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipPreferredMemberKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupMembershipPreferredMemberKeyInput is an input type that accepts GroupMembershipPreferredMemberKeyArgs and GroupMembershipPreferredMemberKeyOutput values.
// You can construct a concrete instance of `GroupMembershipPreferredMemberKeyInput` via:
//
//	GroupMembershipPreferredMemberKeyArgs{...}
type GroupMembershipPreferredMemberKeyInput interface {
	pulumi.Input

	ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput
	ToGroupMembershipPreferredMemberKeyOutputWithContext(context.Context) GroupMembershipPreferredMemberKeyOutput
}

type GroupMembershipPreferredMemberKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupMembershipPreferredMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput {
	return i.ToGroupMembershipPreferredMemberKeyOutputWithContext(context.Background())
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyOutput)
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return i.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyOutput).ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx)
}

// GroupMembershipPreferredMemberKeyPtrInput is an input type that accepts GroupMembershipPreferredMemberKeyArgs, GroupMembershipPreferredMemberKeyPtr and GroupMembershipPreferredMemberKeyPtrOutput values.
// You can construct a concrete instance of `GroupMembershipPreferredMemberKeyPtrInput` via:
//
//	        GroupMembershipPreferredMemberKeyArgs{...}
//
//	or:
//
//	        nil
type GroupMembershipPreferredMemberKeyPtrInput interface {
	pulumi.Input

	ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput
	ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Context) GroupMembershipPreferredMemberKeyPtrOutput
}

type groupMembershipPreferredMemberKeyPtrType GroupMembershipPreferredMemberKeyArgs

func GroupMembershipPreferredMemberKeyPtr(v *GroupMembershipPreferredMemberKeyArgs) GroupMembershipPreferredMemberKeyPtrInput {
	return (*groupMembershipPreferredMemberKeyPtrType)(v)
}

func (*groupMembershipPreferredMemberKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (i *groupMembershipPreferredMemberKeyPtrType) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return i.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (i *groupMembershipPreferredMemberKeyPtrType) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyPtrOutput)
}

type GroupMembershipPreferredMemberKeyOutput struct{ *pulumi.OutputState }

func (GroupMembershipPreferredMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return o.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupMembershipPreferredMemberKey) *GroupMembershipPreferredMemberKey {
		return &v
	}).(GroupMembershipPreferredMemberKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipPreferredMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipPreferredMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipPreferredMemberKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembershipPreferredMemberKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupMembershipPreferredMemberKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupMembershipPreferredMemberKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) Elem() GroupMembershipPreferredMemberKeyOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) GroupMembershipPreferredMemberKey {
		if v != nil {
			return *v
		}
		var ret GroupMembershipPreferredMemberKey
		return ret
	}).(GroupMembershipPreferredMemberKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipPreferredMemberKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipPreferredMemberKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipRole struct {
	// The MembershipRole expiry details, only supported for MEMBER role.
	// Other roles cannot be accompanied with MEMBER role having expiry.
	// Structure is documented below.
	ExpiryDetail *GroupMembershipRoleExpiryDetail `pulumi:"expiryDetail"`
	// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
	// Possible values are: `OWNER`, `MANAGER`, `MEMBER`.
	Name string `pulumi:"name"`
}

// GroupMembershipRoleInput is an input type that accepts GroupMembershipRoleArgs and GroupMembershipRoleOutput values.
// You can construct a concrete instance of `GroupMembershipRoleInput` via:
//
//	GroupMembershipRoleArgs{...}
type GroupMembershipRoleInput interface {
	pulumi.Input

	ToGroupMembershipRoleOutput() GroupMembershipRoleOutput
	ToGroupMembershipRoleOutputWithContext(context.Context) GroupMembershipRoleOutput
}

type GroupMembershipRoleArgs struct {
	// The MembershipRole expiry details, only supported for MEMBER role.
	// Other roles cannot be accompanied with MEMBER role having expiry.
	// Structure is documented below.
	ExpiryDetail GroupMembershipRoleExpiryDetailPtrInput `pulumi:"expiryDetail"`
	// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
	// Possible values are: `OWNER`, `MANAGER`, `MEMBER`.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GroupMembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipRole)(nil)).Elem()
}

func (i GroupMembershipRoleArgs) ToGroupMembershipRoleOutput() GroupMembershipRoleOutput {
	return i.ToGroupMembershipRoleOutputWithContext(context.Background())
}

func (i GroupMembershipRoleArgs) ToGroupMembershipRoleOutputWithContext(ctx context.Context) GroupMembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleOutput)
}

// GroupMembershipRoleArrayInput is an input type that accepts GroupMembershipRoleArray and GroupMembershipRoleArrayOutput values.
// You can construct a concrete instance of `GroupMembershipRoleArrayInput` via:
//
//	GroupMembershipRoleArray{ GroupMembershipRoleArgs{...} }
type GroupMembershipRoleArrayInput interface {
	pulumi.Input

	ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput
	ToGroupMembershipRoleArrayOutputWithContext(context.Context) GroupMembershipRoleArrayOutput
}

type GroupMembershipRoleArray []GroupMembershipRoleInput

func (GroupMembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembershipRole)(nil)).Elem()
}

func (i GroupMembershipRoleArray) ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput {
	return i.ToGroupMembershipRoleArrayOutputWithContext(context.Background())
}

func (i GroupMembershipRoleArray) ToGroupMembershipRoleArrayOutputWithContext(ctx context.Context) GroupMembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleArrayOutput)
}

type GroupMembershipRoleOutput struct{ *pulumi.OutputState }

func (GroupMembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipRole)(nil)).Elem()
}

func (o GroupMembershipRoleOutput) ToGroupMembershipRoleOutput() GroupMembershipRoleOutput {
	return o
}

func (o GroupMembershipRoleOutput) ToGroupMembershipRoleOutputWithContext(ctx context.Context) GroupMembershipRoleOutput {
	return o
}

// The MembershipRole expiry details, only supported for MEMBER role.
// Other roles cannot be accompanied with MEMBER role having expiry.
// Structure is documented below.
func (o GroupMembershipRoleOutput) ExpiryDetail() GroupMembershipRoleExpiryDetailPtrOutput {
	return o.ApplyT(func(v GroupMembershipRole) *GroupMembershipRoleExpiryDetail { return v.ExpiryDetail }).(GroupMembershipRoleExpiryDetailPtrOutput)
}

// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
// Possible values are: `OWNER`, `MANAGER`, `MEMBER`.
func (o GroupMembershipRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipRole) string { return v.Name }).(pulumi.StringOutput)
}

type GroupMembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (GroupMembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembershipRole)(nil)).Elem()
}

func (o GroupMembershipRoleArrayOutput) ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput {
	return o
}

func (o GroupMembershipRoleArrayOutput) ToGroupMembershipRoleArrayOutputWithContext(ctx context.Context) GroupMembershipRoleArrayOutput {
	return o
}

func (o GroupMembershipRoleArrayOutput) Index(i pulumi.IntInput) GroupMembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupMembershipRole {
		return vs[0].([]GroupMembershipRole)[vs[1].(int)]
	}).(GroupMembershipRoleOutput)
}

type GroupMembershipRoleExpiryDetail struct {
	// The time at which the MembershipRole will expire.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	ExpireTime string `pulumi:"expireTime"`
}

// GroupMembershipRoleExpiryDetailInput is an input type that accepts GroupMembershipRoleExpiryDetailArgs and GroupMembershipRoleExpiryDetailOutput values.
// You can construct a concrete instance of `GroupMembershipRoleExpiryDetailInput` via:
//
//	GroupMembershipRoleExpiryDetailArgs{...}
type GroupMembershipRoleExpiryDetailInput interface {
	pulumi.Input

	ToGroupMembershipRoleExpiryDetailOutput() GroupMembershipRoleExpiryDetailOutput
	ToGroupMembershipRoleExpiryDetailOutputWithContext(context.Context) GroupMembershipRoleExpiryDetailOutput
}

type GroupMembershipRoleExpiryDetailArgs struct {
	// The time at which the MembershipRole will expire.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
}

func (GroupMembershipRoleExpiryDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipRoleExpiryDetail)(nil)).Elem()
}

func (i GroupMembershipRoleExpiryDetailArgs) ToGroupMembershipRoleExpiryDetailOutput() GroupMembershipRoleExpiryDetailOutput {
	return i.ToGroupMembershipRoleExpiryDetailOutputWithContext(context.Background())
}

func (i GroupMembershipRoleExpiryDetailArgs) ToGroupMembershipRoleExpiryDetailOutputWithContext(ctx context.Context) GroupMembershipRoleExpiryDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleExpiryDetailOutput)
}

func (i GroupMembershipRoleExpiryDetailArgs) ToGroupMembershipRoleExpiryDetailPtrOutput() GroupMembershipRoleExpiryDetailPtrOutput {
	return i.ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(context.Background())
}

func (i GroupMembershipRoleExpiryDetailArgs) ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(ctx context.Context) GroupMembershipRoleExpiryDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleExpiryDetailOutput).ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(ctx)
}

// GroupMembershipRoleExpiryDetailPtrInput is an input type that accepts GroupMembershipRoleExpiryDetailArgs, GroupMembershipRoleExpiryDetailPtr and GroupMembershipRoleExpiryDetailPtrOutput values.
// You can construct a concrete instance of `GroupMembershipRoleExpiryDetailPtrInput` via:
//
//	        GroupMembershipRoleExpiryDetailArgs{...}
//
//	or:
//
//	        nil
type GroupMembershipRoleExpiryDetailPtrInput interface {
	pulumi.Input

	ToGroupMembershipRoleExpiryDetailPtrOutput() GroupMembershipRoleExpiryDetailPtrOutput
	ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(context.Context) GroupMembershipRoleExpiryDetailPtrOutput
}

type groupMembershipRoleExpiryDetailPtrType GroupMembershipRoleExpiryDetailArgs

func GroupMembershipRoleExpiryDetailPtr(v *GroupMembershipRoleExpiryDetailArgs) GroupMembershipRoleExpiryDetailPtrInput {
	return (*groupMembershipRoleExpiryDetailPtrType)(v)
}

func (*groupMembershipRoleExpiryDetailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipRoleExpiryDetail)(nil)).Elem()
}

func (i *groupMembershipRoleExpiryDetailPtrType) ToGroupMembershipRoleExpiryDetailPtrOutput() GroupMembershipRoleExpiryDetailPtrOutput {
	return i.ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(context.Background())
}

func (i *groupMembershipRoleExpiryDetailPtrType) ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(ctx context.Context) GroupMembershipRoleExpiryDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleExpiryDetailPtrOutput)
}

type GroupMembershipRoleExpiryDetailOutput struct{ *pulumi.OutputState }

func (GroupMembershipRoleExpiryDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipRoleExpiryDetail)(nil)).Elem()
}

func (o GroupMembershipRoleExpiryDetailOutput) ToGroupMembershipRoleExpiryDetailOutput() GroupMembershipRoleExpiryDetailOutput {
	return o
}

func (o GroupMembershipRoleExpiryDetailOutput) ToGroupMembershipRoleExpiryDetailOutputWithContext(ctx context.Context) GroupMembershipRoleExpiryDetailOutput {
	return o
}

func (o GroupMembershipRoleExpiryDetailOutput) ToGroupMembershipRoleExpiryDetailPtrOutput() GroupMembershipRoleExpiryDetailPtrOutput {
	return o.ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(context.Background())
}

func (o GroupMembershipRoleExpiryDetailOutput) ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(ctx context.Context) GroupMembershipRoleExpiryDetailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupMembershipRoleExpiryDetail) *GroupMembershipRoleExpiryDetail {
		return &v
	}).(GroupMembershipRoleExpiryDetailPtrOutput)
}

// The time at which the MembershipRole will expire.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
// resolution and up to nine fractional digits.
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o GroupMembershipRoleExpiryDetailOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipRoleExpiryDetail) string { return v.ExpireTime }).(pulumi.StringOutput)
}

type GroupMembershipRoleExpiryDetailPtrOutput struct{ *pulumi.OutputState }

func (GroupMembershipRoleExpiryDetailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipRoleExpiryDetail)(nil)).Elem()
}

func (o GroupMembershipRoleExpiryDetailPtrOutput) ToGroupMembershipRoleExpiryDetailPtrOutput() GroupMembershipRoleExpiryDetailPtrOutput {
	return o
}

func (o GroupMembershipRoleExpiryDetailPtrOutput) ToGroupMembershipRoleExpiryDetailPtrOutputWithContext(ctx context.Context) GroupMembershipRoleExpiryDetailPtrOutput {
	return o
}

func (o GroupMembershipRoleExpiryDetailPtrOutput) Elem() GroupMembershipRoleExpiryDetailOutput {
	return o.ApplyT(func(v *GroupMembershipRoleExpiryDetail) GroupMembershipRoleExpiryDetail {
		if v != nil {
			return *v
		}
		var ret GroupMembershipRoleExpiryDetail
		return ret
	}).(GroupMembershipRoleExpiryDetailOutput)
}

// The time at which the MembershipRole will expire.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
// resolution and up to nine fractional digits.
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o GroupMembershipRoleExpiryDetailPtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipRoleExpiryDetail) *string {
		if v == nil {
			return nil
		}
		return &v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

type GetGroupLookupGroupKey struct {
	// (Required) The ID of the entity.
	// For Google-managed entities, the id is the email address of an existing group or user.
	// For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// (Optional) The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GetGroupLookupGroupKeyInput is an input type that accepts GetGroupLookupGroupKeyArgs and GetGroupLookupGroupKeyOutput values.
// You can construct a concrete instance of `GetGroupLookupGroupKeyInput` via:
//
//	GetGroupLookupGroupKeyArgs{...}
type GetGroupLookupGroupKeyInput interface {
	pulumi.Input

	ToGetGroupLookupGroupKeyOutput() GetGroupLookupGroupKeyOutput
	ToGetGroupLookupGroupKeyOutputWithContext(context.Context) GetGroupLookupGroupKeyOutput
}

type GetGroupLookupGroupKeyArgs struct {
	// (Required) The ID of the entity.
	// For Google-managed entities, the id is the email address of an existing group or user.
	// For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id pulumi.StringInput `pulumi:"id"`
	// (Optional) The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GetGroupLookupGroupKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupLookupGroupKey)(nil)).Elem()
}

func (i GetGroupLookupGroupKeyArgs) ToGetGroupLookupGroupKeyOutput() GetGroupLookupGroupKeyOutput {
	return i.ToGetGroupLookupGroupKeyOutputWithContext(context.Background())
}

func (i GetGroupLookupGroupKeyArgs) ToGetGroupLookupGroupKeyOutputWithContext(ctx context.Context) GetGroupLookupGroupKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupLookupGroupKeyOutput)
}

type GetGroupLookupGroupKeyOutput struct{ *pulumi.OutputState }

func (GetGroupLookupGroupKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupLookupGroupKey)(nil)).Elem()
}

func (o GetGroupLookupGroupKeyOutput) ToGetGroupLookupGroupKeyOutput() GetGroupLookupGroupKeyOutput {
	return o
}

func (o GetGroupLookupGroupKeyOutput) ToGetGroupLookupGroupKeyOutputWithContext(ctx context.Context) GetGroupLookupGroupKeyOutput {
	return o
}

// (Required) The ID of the entity.
// For Google-managed entities, the id is the email address of an existing group or user.
// For external-identity-mapped entities, the id is a string conforming
// to the Identity Source's requirements.
func (o GetGroupLookupGroupKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupLookupGroupKey) string { return v.Id }).(pulumi.StringOutput)
}

// (Optional) The namespace in which the entity exists.
// If not populated, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If populated, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GetGroupLookupGroupKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupLookupGroupKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GetGroupMembershipsMembership struct {
	// If set to true, skip group member creation if a membership with the same name already exists. Defaults to false.
	CreateIgnoreAlreadyExists bool `pulumi:"createIgnoreAlreadyExists"`
	// The time when the Membership was created.
	CreateTime string `pulumi:"createTime"`
	// The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
	Group string `pulumi:"group"`
	// EntityKey of the member.  Structure is documented below.
	MemberKeys []GetGroupMembershipsMembershipMemberKey `pulumi:"memberKeys"`
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name string `pulumi:"name"`
	// EntityKey of the member.  Structure is documented below.
	PreferredMemberKeys []GetGroupMembershipsMembershipPreferredMemberKey `pulumi:"preferredMemberKeys"`
	// The MembershipRoles that apply to the Membership. Structure is documented below.
	Roles []GetGroupMembershipsMembershipRole `pulumi:"roles"`
	// The type of the membership.
	Type string `pulumi:"type"`
	// The time when the Membership was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

// GetGroupMembershipsMembershipInput is an input type that accepts GetGroupMembershipsMembershipArgs and GetGroupMembershipsMembershipOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipInput` via:
//
//	GetGroupMembershipsMembershipArgs{...}
type GetGroupMembershipsMembershipInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipOutput() GetGroupMembershipsMembershipOutput
	ToGetGroupMembershipsMembershipOutputWithContext(context.Context) GetGroupMembershipsMembershipOutput
}

type GetGroupMembershipsMembershipArgs struct {
	// If set to true, skip group member creation if a membership with the same name already exists. Defaults to false.
	CreateIgnoreAlreadyExists pulumi.BoolInput `pulumi:"createIgnoreAlreadyExists"`
	// The time when the Membership was created.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
	Group pulumi.StringInput `pulumi:"group"`
	// EntityKey of the member.  Structure is documented below.
	MemberKeys GetGroupMembershipsMembershipMemberKeyArrayInput `pulumi:"memberKeys"`
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name pulumi.StringInput `pulumi:"name"`
	// EntityKey of the member.  Structure is documented below.
	PreferredMemberKeys GetGroupMembershipsMembershipPreferredMemberKeyArrayInput `pulumi:"preferredMemberKeys"`
	// The MembershipRoles that apply to the Membership. Structure is documented below.
	Roles GetGroupMembershipsMembershipRoleArrayInput `pulumi:"roles"`
	// The type of the membership.
	Type pulumi.StringInput `pulumi:"type"`
	// The time when the Membership was last updated.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (GetGroupMembershipsMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembership)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipArgs) ToGetGroupMembershipsMembershipOutput() GetGroupMembershipsMembershipOutput {
	return i.ToGetGroupMembershipsMembershipOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipArgs) ToGetGroupMembershipsMembershipOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipOutput)
}

// GetGroupMembershipsMembershipArrayInput is an input type that accepts GetGroupMembershipsMembershipArray and GetGroupMembershipsMembershipArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipArrayInput` via:
//
//	GetGroupMembershipsMembershipArray{ GetGroupMembershipsMembershipArgs{...} }
type GetGroupMembershipsMembershipArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipArrayOutput() GetGroupMembershipsMembershipArrayOutput
	ToGetGroupMembershipsMembershipArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipArrayOutput
}

type GetGroupMembershipsMembershipArray []GetGroupMembershipsMembershipInput

func (GetGroupMembershipsMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembership)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipArray) ToGetGroupMembershipsMembershipArrayOutput() GetGroupMembershipsMembershipArrayOutput {
	return i.ToGetGroupMembershipsMembershipArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipArray) ToGetGroupMembershipsMembershipArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipArrayOutput)
}

type GetGroupMembershipsMembershipOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembership)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipOutput) ToGetGroupMembershipsMembershipOutput() GetGroupMembershipsMembershipOutput {
	return o
}

func (o GetGroupMembershipsMembershipOutput) ToGetGroupMembershipsMembershipOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipOutput {
	return o
}

// If set to true, skip group member creation if a membership with the same name already exists. Defaults to false.
func (o GetGroupMembershipsMembershipOutput) CreateIgnoreAlreadyExists() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) bool { return v.CreateIgnoreAlreadyExists }).(pulumi.BoolOutput)
}

// The time when the Membership was created.
func (o GetGroupMembershipsMembershipOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
func (o GetGroupMembershipsMembershipOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.Group }).(pulumi.StringOutput)
}

// EntityKey of the member.  Structure is documented below.
func (o GetGroupMembershipsMembershipOutput) MemberKeys() GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) []GetGroupMembershipsMembershipMemberKey { return v.MemberKeys }).(GetGroupMembershipsMembershipMemberKeyArrayOutput)
}

// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
func (o GetGroupMembershipsMembershipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.Name }).(pulumi.StringOutput)
}

// EntityKey of the member.  Structure is documented below.
func (o GetGroupMembershipsMembershipOutput) PreferredMemberKeys() GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) []GetGroupMembershipsMembershipPreferredMemberKey {
		return v.PreferredMemberKeys
	}).(GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput)
}

// The MembershipRoles that apply to the Membership. Structure is documented below.
func (o GetGroupMembershipsMembershipOutput) Roles() GetGroupMembershipsMembershipRoleArrayOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) []GetGroupMembershipsMembershipRole { return v.Roles }).(GetGroupMembershipsMembershipRoleArrayOutput)
}

// The type of the membership.
func (o GetGroupMembershipsMembershipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.Type }).(pulumi.StringOutput)
}

// The time when the Membership was last updated.
func (o GetGroupMembershipsMembershipOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembership) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembership)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipArrayOutput) ToGetGroupMembershipsMembershipArrayOutput() GetGroupMembershipsMembershipArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipArrayOutput) ToGetGroupMembershipsMembershipArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembership {
		return vs[0].([]GetGroupMembershipsMembership)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipOutput)
}

type GetGroupMembershipsMembershipMemberKey struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace string `pulumi:"namespace"`
}

// GetGroupMembershipsMembershipMemberKeyInput is an input type that accepts GetGroupMembershipsMembershipMemberKeyArgs and GetGroupMembershipsMembershipMemberKeyOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipMemberKeyInput` via:
//
//	GetGroupMembershipsMembershipMemberKeyArgs{...}
type GetGroupMembershipsMembershipMemberKeyInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipMemberKeyOutput() GetGroupMembershipsMembershipMemberKeyOutput
	ToGetGroupMembershipsMembershipMemberKeyOutputWithContext(context.Context) GetGroupMembershipsMembershipMemberKeyOutput
}

type GetGroupMembershipsMembershipMemberKeyArgs struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetGroupMembershipsMembershipMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipMemberKey)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipMemberKeyArgs) ToGetGroupMembershipsMembershipMemberKeyOutput() GetGroupMembershipsMembershipMemberKeyOutput {
	return i.ToGetGroupMembershipsMembershipMemberKeyOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipMemberKeyArgs) ToGetGroupMembershipsMembershipMemberKeyOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipMemberKeyOutput)
}

// GetGroupMembershipsMembershipMemberKeyArrayInput is an input type that accepts GetGroupMembershipsMembershipMemberKeyArray and GetGroupMembershipsMembershipMemberKeyArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipMemberKeyArrayInput` via:
//
//	GetGroupMembershipsMembershipMemberKeyArray{ GetGroupMembershipsMembershipMemberKeyArgs{...} }
type GetGroupMembershipsMembershipMemberKeyArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipMemberKeyArrayOutput() GetGroupMembershipsMembershipMemberKeyArrayOutput
	ToGetGroupMembershipsMembershipMemberKeyArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipMemberKeyArrayOutput
}

type GetGroupMembershipsMembershipMemberKeyArray []GetGroupMembershipsMembershipMemberKeyInput

func (GetGroupMembershipsMembershipMemberKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipMemberKey)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipMemberKeyArray) ToGetGroupMembershipsMembershipMemberKeyArrayOutput() GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return i.ToGetGroupMembershipsMembershipMemberKeyArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipMemberKeyArray) ToGetGroupMembershipsMembershipMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipMemberKeyArrayOutput)
}

type GetGroupMembershipsMembershipMemberKeyOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipMemberKey)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipMemberKeyOutput) ToGetGroupMembershipsMembershipMemberKeyOutput() GetGroupMembershipsMembershipMemberKeyOutput {
	return o
}

func (o GetGroupMembershipsMembershipMemberKeyOutput) ToGetGroupMembershipsMembershipMemberKeyOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipMemberKeyOutput {
	return o
}

// The ID of the entity. For Google-managed entities, the id is the email address of an existing
// group or user. For external-identity-mapped entities, the id is a string conforming
// to the Identity Source's requirements.
func (o GetGroupMembershipsMembershipMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not populated, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If populated, the EntityKey represents an external-identity-mapped group.
func (o GetGroupMembershipsMembershipMemberKeyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipMemberKey) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipMemberKeyArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipMemberKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipMemberKey)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipMemberKeyArrayOutput) ToGetGroupMembershipsMembershipMemberKeyArrayOutput() GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipMemberKeyArrayOutput) ToGetGroupMembershipsMembershipMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipMemberKeyArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipMemberKeyArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipMemberKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembershipMemberKey {
		return vs[0].([]GetGroupMembershipsMembershipMemberKey)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipMemberKeyOutput)
}

type GetGroupMembershipsMembershipPreferredMemberKey struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace string `pulumi:"namespace"`
}

// GetGroupMembershipsMembershipPreferredMemberKeyInput is an input type that accepts GetGroupMembershipsMembershipPreferredMemberKeyArgs and GetGroupMembershipsMembershipPreferredMemberKeyOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipPreferredMemberKeyInput` via:
//
//	GetGroupMembershipsMembershipPreferredMemberKeyArgs{...}
type GetGroupMembershipsMembershipPreferredMemberKeyInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipPreferredMemberKeyOutput() GetGroupMembershipsMembershipPreferredMemberKeyOutput
	ToGetGroupMembershipsMembershipPreferredMemberKeyOutputWithContext(context.Context) GetGroupMembershipsMembershipPreferredMemberKeyOutput
}

type GetGroupMembershipsMembershipPreferredMemberKeyArgs struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetGroupMembershipsMembershipPreferredMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipPreferredMemberKeyArgs) ToGetGroupMembershipsMembershipPreferredMemberKeyOutput() GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return i.ToGetGroupMembershipsMembershipPreferredMemberKeyOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipPreferredMemberKeyArgs) ToGetGroupMembershipsMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipPreferredMemberKeyOutput)
}

// GetGroupMembershipsMembershipPreferredMemberKeyArrayInput is an input type that accepts GetGroupMembershipsMembershipPreferredMemberKeyArray and GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipPreferredMemberKeyArrayInput` via:
//
//	GetGroupMembershipsMembershipPreferredMemberKeyArray{ GetGroupMembershipsMembershipPreferredMemberKeyArgs{...} }
type GetGroupMembershipsMembershipPreferredMemberKeyArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput
	ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput
}

type GetGroupMembershipsMembershipPreferredMemberKeyArray []GetGroupMembershipsMembershipPreferredMemberKeyInput

func (GetGroupMembershipsMembershipPreferredMemberKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipPreferredMemberKeyArray) ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return i.ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipPreferredMemberKeyArray) ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput)
}

type GetGroupMembershipsMembershipPreferredMemberKeyOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipPreferredMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyOutput) ToGetGroupMembershipsMembershipPreferredMemberKeyOutput() GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return o
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyOutput) ToGetGroupMembershipsMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return o
}

// The ID of the entity. For Google-managed entities, the id is the email address of an existing
// group or user. For external-identity-mapped entities, the id is a string conforming
// to the Identity Source's requirements.
func (o GetGroupMembershipsMembershipPreferredMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipPreferredMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not populated, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If populated, the EntityKey represents an external-identity-mapped group.
func (o GetGroupMembershipsMembershipPreferredMemberKeyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipPreferredMemberKey) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput) ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput) ToGetGroupMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipPreferredMemberKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembershipPreferredMemberKey {
		return vs[0].([]GetGroupMembershipsMembershipPreferredMemberKey)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipPreferredMemberKeyOutput)
}

type GetGroupMembershipsMembershipRole struct {
	// The MembershipRole expiry details, only supported for MEMBER role.
	// Other roles cannot be accompanied with MEMBER role having expiry.
	ExpiryDetails []GetGroupMembershipsMembershipRoleExpiryDetail `pulumi:"expiryDetails"`
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name string `pulumi:"name"`
}

// GetGroupMembershipsMembershipRoleInput is an input type that accepts GetGroupMembershipsMembershipRoleArgs and GetGroupMembershipsMembershipRoleOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipRoleInput` via:
//
//	GetGroupMembershipsMembershipRoleArgs{...}
type GetGroupMembershipsMembershipRoleInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipRoleOutput() GetGroupMembershipsMembershipRoleOutput
	ToGetGroupMembershipsMembershipRoleOutputWithContext(context.Context) GetGroupMembershipsMembershipRoleOutput
}

type GetGroupMembershipsMembershipRoleArgs struct {
	// The MembershipRole expiry details, only supported for MEMBER role.
	// Other roles cannot be accompanied with MEMBER role having expiry.
	ExpiryDetails GetGroupMembershipsMembershipRoleExpiryDetailArrayInput `pulumi:"expiryDetails"`
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetGroupMembershipsMembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipRole)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipRoleArgs) ToGetGroupMembershipsMembershipRoleOutput() GetGroupMembershipsMembershipRoleOutput {
	return i.ToGetGroupMembershipsMembershipRoleOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipRoleArgs) ToGetGroupMembershipsMembershipRoleOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipRoleOutput)
}

// GetGroupMembershipsMembershipRoleArrayInput is an input type that accepts GetGroupMembershipsMembershipRoleArray and GetGroupMembershipsMembershipRoleArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipRoleArrayInput` via:
//
//	GetGroupMembershipsMembershipRoleArray{ GetGroupMembershipsMembershipRoleArgs{...} }
type GetGroupMembershipsMembershipRoleArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipRoleArrayOutput() GetGroupMembershipsMembershipRoleArrayOutput
	ToGetGroupMembershipsMembershipRoleArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipRoleArrayOutput
}

type GetGroupMembershipsMembershipRoleArray []GetGroupMembershipsMembershipRoleInput

func (GetGroupMembershipsMembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipRole)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipRoleArray) ToGetGroupMembershipsMembershipRoleArrayOutput() GetGroupMembershipsMembershipRoleArrayOutput {
	return i.ToGetGroupMembershipsMembershipRoleArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipRoleArray) ToGetGroupMembershipsMembershipRoleArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipRoleArrayOutput)
}

type GetGroupMembershipsMembershipRoleOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipRole)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipRoleOutput) ToGetGroupMembershipsMembershipRoleOutput() GetGroupMembershipsMembershipRoleOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleOutput) ToGetGroupMembershipsMembershipRoleOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleOutput {
	return o
}

// The MembershipRole expiry details, only supported for MEMBER role.
// Other roles cannot be accompanied with MEMBER role having expiry.
func (o GetGroupMembershipsMembershipRoleOutput) ExpiryDetails() GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipRole) []GetGroupMembershipsMembershipRoleExpiryDetail {
		return v.ExpiryDetails
	}).(GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput)
}

// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
func (o GetGroupMembershipsMembershipRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipRole) string { return v.Name }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipRole)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipRoleArrayOutput) ToGetGroupMembershipsMembershipRoleArrayOutput() GetGroupMembershipsMembershipRoleArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleArrayOutput) ToGetGroupMembershipsMembershipRoleArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembershipRole {
		return vs[0].([]GetGroupMembershipsMembershipRole)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipRoleOutput)
}

type GetGroupMembershipsMembershipRoleExpiryDetail struct {
	// The time at which the MembershipRole will expire.
	//
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	//
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	ExpireTime string `pulumi:"expireTime"`
}

// GetGroupMembershipsMembershipRoleExpiryDetailInput is an input type that accepts GetGroupMembershipsMembershipRoleExpiryDetailArgs and GetGroupMembershipsMembershipRoleExpiryDetailOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipRoleExpiryDetailInput` via:
//
//	GetGroupMembershipsMembershipRoleExpiryDetailArgs{...}
type GetGroupMembershipsMembershipRoleExpiryDetailInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipRoleExpiryDetailOutput() GetGroupMembershipsMembershipRoleExpiryDetailOutput
	ToGetGroupMembershipsMembershipRoleExpiryDetailOutputWithContext(context.Context) GetGroupMembershipsMembershipRoleExpiryDetailOutput
}

type GetGroupMembershipsMembershipRoleExpiryDetailArgs struct {
	// The time at which the MembershipRole will expire.
	//
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	//
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
}

func (GetGroupMembershipsMembershipRoleExpiryDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipRoleExpiryDetail)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipRoleExpiryDetailArgs) ToGetGroupMembershipsMembershipRoleExpiryDetailOutput() GetGroupMembershipsMembershipRoleExpiryDetailOutput {
	return i.ToGetGroupMembershipsMembershipRoleExpiryDetailOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipRoleExpiryDetailArgs) ToGetGroupMembershipsMembershipRoleExpiryDetailOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleExpiryDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipRoleExpiryDetailOutput)
}

// GetGroupMembershipsMembershipRoleExpiryDetailArrayInput is an input type that accepts GetGroupMembershipsMembershipRoleExpiryDetailArray and GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipsMembershipRoleExpiryDetailArrayInput` via:
//
//	GetGroupMembershipsMembershipRoleExpiryDetailArray{ GetGroupMembershipsMembershipRoleExpiryDetailArgs{...} }
type GetGroupMembershipsMembershipRoleExpiryDetailArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipsMembershipRoleExpiryDetailArrayOutput() GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput
	ToGetGroupMembershipsMembershipRoleExpiryDetailArrayOutputWithContext(context.Context) GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput
}

type GetGroupMembershipsMembershipRoleExpiryDetailArray []GetGroupMembershipsMembershipRoleExpiryDetailInput

func (GetGroupMembershipsMembershipRoleExpiryDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipRoleExpiryDetail)(nil)).Elem()
}

func (i GetGroupMembershipsMembershipRoleExpiryDetailArray) ToGetGroupMembershipsMembershipRoleExpiryDetailArrayOutput() GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput {
	return i.ToGetGroupMembershipsMembershipRoleExpiryDetailArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipsMembershipRoleExpiryDetailArray) ToGetGroupMembershipsMembershipRoleExpiryDetailArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput)
}

type GetGroupMembershipsMembershipRoleExpiryDetailOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipRoleExpiryDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipsMembershipRoleExpiryDetail)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipRoleExpiryDetailOutput) ToGetGroupMembershipsMembershipRoleExpiryDetailOutput() GetGroupMembershipsMembershipRoleExpiryDetailOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleExpiryDetailOutput) ToGetGroupMembershipsMembershipRoleExpiryDetailOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleExpiryDetailOutput {
	return o
}

// The time at which the MembershipRole will expire.
//
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
// resolution and up to nine fractional digits.
//
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o GetGroupMembershipsMembershipRoleExpiryDetailOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipsMembershipRoleExpiryDetail) string { return v.ExpireTime }).(pulumi.StringOutput)
}

type GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipsMembershipRoleExpiryDetail)(nil)).Elem()
}

func (o GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput) ToGetGroupMembershipsMembershipRoleExpiryDetailArrayOutput() GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput) ToGetGroupMembershipsMembershipRoleExpiryDetailArrayOutputWithContext(ctx context.Context) GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput {
	return o
}

func (o GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipsMembershipRoleExpiryDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipsMembershipRoleExpiryDetail {
		return vs[0].([]GetGroupMembershipsMembershipRoleExpiryDetail)[vs[1].(int)]
	}).(GetGroupMembershipsMembershipRoleExpiryDetailOutput)
}

type GetGroupTransitiveMembershipsMembership struct {
	// EntityKey of the member.  This value will be either a userKey in the format `users/000000000000000000000` with a numerical id or a groupKey in the format `groups/000ab0000ab0000` with a hexadecimal id.
	Member string `pulumi:"member"`
	// EntityKey of the member.  Structure is documented below.
	PreferredMemberKeys []GetGroupTransitiveMembershipsMembershipPreferredMemberKey `pulumi:"preferredMemberKeys"`
	// The relation between the group and the transitive member. The value can be DIRECT, INDIRECT, or DIRECT_AND_INDIRECT.
	RelationType string `pulumi:"relationType"`
	// The TransitiveMembershipRoles that apply to the Membership. Structure is documented below.
	Roles []GetGroupTransitiveMembershipsMembershipRole `pulumi:"roles"`
}

// GetGroupTransitiveMembershipsMembershipInput is an input type that accepts GetGroupTransitiveMembershipsMembershipArgs and GetGroupTransitiveMembershipsMembershipOutput values.
// You can construct a concrete instance of `GetGroupTransitiveMembershipsMembershipInput` via:
//
//	GetGroupTransitiveMembershipsMembershipArgs{...}
type GetGroupTransitiveMembershipsMembershipInput interface {
	pulumi.Input

	ToGetGroupTransitiveMembershipsMembershipOutput() GetGroupTransitiveMembershipsMembershipOutput
	ToGetGroupTransitiveMembershipsMembershipOutputWithContext(context.Context) GetGroupTransitiveMembershipsMembershipOutput
}

type GetGroupTransitiveMembershipsMembershipArgs struct {
	// EntityKey of the member.  This value will be either a userKey in the format `users/000000000000000000000` with a numerical id or a groupKey in the format `groups/000ab0000ab0000` with a hexadecimal id.
	Member pulumi.StringInput `pulumi:"member"`
	// EntityKey of the member.  Structure is documented below.
	PreferredMemberKeys GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayInput `pulumi:"preferredMemberKeys"`
	// The relation between the group and the transitive member. The value can be DIRECT, INDIRECT, or DIRECT_AND_INDIRECT.
	RelationType pulumi.StringInput `pulumi:"relationType"`
	// The TransitiveMembershipRoles that apply to the Membership. Structure is documented below.
	Roles GetGroupTransitiveMembershipsMembershipRoleArrayInput `pulumi:"roles"`
}

func (GetGroupTransitiveMembershipsMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupTransitiveMembershipsMembership)(nil)).Elem()
}

func (i GetGroupTransitiveMembershipsMembershipArgs) ToGetGroupTransitiveMembershipsMembershipOutput() GetGroupTransitiveMembershipsMembershipOutput {
	return i.ToGetGroupTransitiveMembershipsMembershipOutputWithContext(context.Background())
}

func (i GetGroupTransitiveMembershipsMembershipArgs) ToGetGroupTransitiveMembershipsMembershipOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupTransitiveMembershipsMembershipOutput)
}

// GetGroupTransitiveMembershipsMembershipArrayInput is an input type that accepts GetGroupTransitiveMembershipsMembershipArray and GetGroupTransitiveMembershipsMembershipArrayOutput values.
// You can construct a concrete instance of `GetGroupTransitiveMembershipsMembershipArrayInput` via:
//
//	GetGroupTransitiveMembershipsMembershipArray{ GetGroupTransitiveMembershipsMembershipArgs{...} }
type GetGroupTransitiveMembershipsMembershipArrayInput interface {
	pulumi.Input

	ToGetGroupTransitiveMembershipsMembershipArrayOutput() GetGroupTransitiveMembershipsMembershipArrayOutput
	ToGetGroupTransitiveMembershipsMembershipArrayOutputWithContext(context.Context) GetGroupTransitiveMembershipsMembershipArrayOutput
}

type GetGroupTransitiveMembershipsMembershipArray []GetGroupTransitiveMembershipsMembershipInput

func (GetGroupTransitiveMembershipsMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupTransitiveMembershipsMembership)(nil)).Elem()
}

func (i GetGroupTransitiveMembershipsMembershipArray) ToGetGroupTransitiveMembershipsMembershipArrayOutput() GetGroupTransitiveMembershipsMembershipArrayOutput {
	return i.ToGetGroupTransitiveMembershipsMembershipArrayOutputWithContext(context.Background())
}

func (i GetGroupTransitiveMembershipsMembershipArray) ToGetGroupTransitiveMembershipsMembershipArrayOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupTransitiveMembershipsMembershipArrayOutput)
}

type GetGroupTransitiveMembershipsMembershipOutput struct{ *pulumi.OutputState }

func (GetGroupTransitiveMembershipsMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupTransitiveMembershipsMembership)(nil)).Elem()
}

func (o GetGroupTransitiveMembershipsMembershipOutput) ToGetGroupTransitiveMembershipsMembershipOutput() GetGroupTransitiveMembershipsMembershipOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipOutput) ToGetGroupTransitiveMembershipsMembershipOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipOutput {
	return o
}

// EntityKey of the member.  This value will be either a userKey in the format `users/000000000000000000000` with a numerical id or a groupKey in the format `groups/000ab0000ab0000` with a hexadecimal id.
func (o GetGroupTransitiveMembershipsMembershipOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupTransitiveMembershipsMembership) string { return v.Member }).(pulumi.StringOutput)
}

// EntityKey of the member.  Structure is documented below.
func (o GetGroupTransitiveMembershipsMembershipOutput) PreferredMemberKeys() GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o.ApplyT(func(v GetGroupTransitiveMembershipsMembership) []GetGroupTransitiveMembershipsMembershipPreferredMemberKey {
		return v.PreferredMemberKeys
	}).(GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput)
}

// The relation between the group and the transitive member. The value can be DIRECT, INDIRECT, or DIRECT_AND_INDIRECT.
func (o GetGroupTransitiveMembershipsMembershipOutput) RelationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupTransitiveMembershipsMembership) string { return v.RelationType }).(pulumi.StringOutput)
}

// The TransitiveMembershipRoles that apply to the Membership. Structure is documented below.
func (o GetGroupTransitiveMembershipsMembershipOutput) Roles() GetGroupTransitiveMembershipsMembershipRoleArrayOutput {
	return o.ApplyT(func(v GetGroupTransitiveMembershipsMembership) []GetGroupTransitiveMembershipsMembershipRole {
		return v.Roles
	}).(GetGroupTransitiveMembershipsMembershipRoleArrayOutput)
}

type GetGroupTransitiveMembershipsMembershipArrayOutput struct{ *pulumi.OutputState }

func (GetGroupTransitiveMembershipsMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupTransitiveMembershipsMembership)(nil)).Elem()
}

func (o GetGroupTransitiveMembershipsMembershipArrayOutput) ToGetGroupTransitiveMembershipsMembershipArrayOutput() GetGroupTransitiveMembershipsMembershipArrayOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipArrayOutput) ToGetGroupTransitiveMembershipsMembershipArrayOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipArrayOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipArrayOutput) Index(i pulumi.IntInput) GetGroupTransitiveMembershipsMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupTransitiveMembershipsMembership {
		return vs[0].([]GetGroupTransitiveMembershipsMembership)[vs[1].(int)]
	}).(GetGroupTransitiveMembershipsMembershipOutput)
}

type GetGroupTransitiveMembershipsMembershipPreferredMemberKey struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace string `pulumi:"namespace"`
}

// GetGroupTransitiveMembershipsMembershipPreferredMemberKeyInput is an input type that accepts GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArgs and GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput values.
// You can construct a concrete instance of `GetGroupTransitiveMembershipsMembershipPreferredMemberKeyInput` via:
//
//	GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArgs{...}
type GetGroupTransitiveMembershipsMembershipPreferredMemberKeyInput interface {
	pulumi.Input

	ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput() GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput
	ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutputWithContext(context.Context) GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput
}

type GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArgs struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArgs) ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput() GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput {
	return i.ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutputWithContext(context.Background())
}

func (i GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArgs) ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput)
}

// GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayInput is an input type that accepts GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArray and GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput values.
// You can construct a concrete instance of `GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayInput` via:
//
//	GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArray{ GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArgs{...} }
type GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayInput interface {
	pulumi.Input

	ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput
	ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(context.Context) GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput
}

type GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArray []GetGroupTransitiveMembershipsMembershipPreferredMemberKeyInput

func (GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupTransitiveMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArray) ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput {
	return i.ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(context.Background())
}

func (i GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArray) ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput)
}

type GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput struct{ *pulumi.OutputState }

func (GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput) ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput() GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput) ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput {
	return o
}

// The ID of the entity. For Google-managed entities, the id is the email address of an existing
// group or user. For external-identity-mapped entities, the id is a string conforming
// to the Identity Source's requirements.
func (o GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupTransitiveMembershipsMembershipPreferredMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not populated, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If populated, the EntityKey represents an external-identity-mapped group.
func (o GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupTransitiveMembershipsMembershipPreferredMemberKey) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput struct{ *pulumi.OutputState }

func (GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupTransitiveMembershipsMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput) ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput() GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput) ToGetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput) Index(i pulumi.IntInput) GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupTransitiveMembershipsMembershipPreferredMemberKey {
		return vs[0].([]GetGroupTransitiveMembershipsMembershipPreferredMemberKey)[vs[1].(int)]
	}).(GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput)
}

type GetGroupTransitiveMembershipsMembershipRole struct {
	// The name of the TransitiveMembershipRole. One of OWNER, MANAGER, MEMBER.
	Role string `pulumi:"role"`
}

// GetGroupTransitiveMembershipsMembershipRoleInput is an input type that accepts GetGroupTransitiveMembershipsMembershipRoleArgs and GetGroupTransitiveMembershipsMembershipRoleOutput values.
// You can construct a concrete instance of `GetGroupTransitiveMembershipsMembershipRoleInput` via:
//
//	GetGroupTransitiveMembershipsMembershipRoleArgs{...}
type GetGroupTransitiveMembershipsMembershipRoleInput interface {
	pulumi.Input

	ToGetGroupTransitiveMembershipsMembershipRoleOutput() GetGroupTransitiveMembershipsMembershipRoleOutput
	ToGetGroupTransitiveMembershipsMembershipRoleOutputWithContext(context.Context) GetGroupTransitiveMembershipsMembershipRoleOutput
}

type GetGroupTransitiveMembershipsMembershipRoleArgs struct {
	// The name of the TransitiveMembershipRole. One of OWNER, MANAGER, MEMBER.
	Role pulumi.StringInput `pulumi:"role"`
}

func (GetGroupTransitiveMembershipsMembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipRole)(nil)).Elem()
}

func (i GetGroupTransitiveMembershipsMembershipRoleArgs) ToGetGroupTransitiveMembershipsMembershipRoleOutput() GetGroupTransitiveMembershipsMembershipRoleOutput {
	return i.ToGetGroupTransitiveMembershipsMembershipRoleOutputWithContext(context.Background())
}

func (i GetGroupTransitiveMembershipsMembershipRoleArgs) ToGetGroupTransitiveMembershipsMembershipRoleOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupTransitiveMembershipsMembershipRoleOutput)
}

// GetGroupTransitiveMembershipsMembershipRoleArrayInput is an input type that accepts GetGroupTransitiveMembershipsMembershipRoleArray and GetGroupTransitiveMembershipsMembershipRoleArrayOutput values.
// You can construct a concrete instance of `GetGroupTransitiveMembershipsMembershipRoleArrayInput` via:
//
//	GetGroupTransitiveMembershipsMembershipRoleArray{ GetGroupTransitiveMembershipsMembershipRoleArgs{...} }
type GetGroupTransitiveMembershipsMembershipRoleArrayInput interface {
	pulumi.Input

	ToGetGroupTransitiveMembershipsMembershipRoleArrayOutput() GetGroupTransitiveMembershipsMembershipRoleArrayOutput
	ToGetGroupTransitiveMembershipsMembershipRoleArrayOutputWithContext(context.Context) GetGroupTransitiveMembershipsMembershipRoleArrayOutput
}

type GetGroupTransitiveMembershipsMembershipRoleArray []GetGroupTransitiveMembershipsMembershipRoleInput

func (GetGroupTransitiveMembershipsMembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupTransitiveMembershipsMembershipRole)(nil)).Elem()
}

func (i GetGroupTransitiveMembershipsMembershipRoleArray) ToGetGroupTransitiveMembershipsMembershipRoleArrayOutput() GetGroupTransitiveMembershipsMembershipRoleArrayOutput {
	return i.ToGetGroupTransitiveMembershipsMembershipRoleArrayOutputWithContext(context.Background())
}

func (i GetGroupTransitiveMembershipsMembershipRoleArray) ToGetGroupTransitiveMembershipsMembershipRoleArrayOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupTransitiveMembershipsMembershipRoleArrayOutput)
}

type GetGroupTransitiveMembershipsMembershipRoleOutput struct{ *pulumi.OutputState }

func (GetGroupTransitiveMembershipsMembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipRole)(nil)).Elem()
}

func (o GetGroupTransitiveMembershipsMembershipRoleOutput) ToGetGroupTransitiveMembershipsMembershipRoleOutput() GetGroupTransitiveMembershipsMembershipRoleOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipRoleOutput) ToGetGroupTransitiveMembershipsMembershipRoleOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipRoleOutput {
	return o
}

// The name of the TransitiveMembershipRole. One of OWNER, MANAGER, MEMBER.
func (o GetGroupTransitiveMembershipsMembershipRoleOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupTransitiveMembershipsMembershipRole) string { return v.Role }).(pulumi.StringOutput)
}

type GetGroupTransitiveMembershipsMembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (GetGroupTransitiveMembershipsMembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupTransitiveMembershipsMembershipRole)(nil)).Elem()
}

func (o GetGroupTransitiveMembershipsMembershipRoleArrayOutput) ToGetGroupTransitiveMembershipsMembershipRoleArrayOutput() GetGroupTransitiveMembershipsMembershipRoleArrayOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipRoleArrayOutput) ToGetGroupTransitiveMembershipsMembershipRoleArrayOutputWithContext(ctx context.Context) GetGroupTransitiveMembershipsMembershipRoleArrayOutput {
	return o
}

func (o GetGroupTransitiveMembershipsMembershipRoleArrayOutput) Index(i pulumi.IntInput) GetGroupTransitiveMembershipsMembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupTransitiveMembershipsMembershipRole {
		return vs[0].([]GetGroupTransitiveMembershipsMembershipRole)[vs[1].(int)]
	}).(GetGroupTransitiveMembershipsMembershipRoleOutput)
}

type GetGroupsGroup struct {
	// Additional group keys associated with the Group
	AdditionalGroupKeys []GetGroupsGroupAdditionalGroupKey `pulumi:"additionalGroupKeys"`
	// The time when the Group was created.
	CreateTime string `pulumi:"createTime"`
	// An extended description to help users determine the purpose of a Group.
	Description string `pulumi:"description"`
	// The display name of the Group.
	DisplayName string `pulumi:"displayName"`
	// EntityKey of the Group.  Structure is documented below.
	GroupKeys []GetGroupsGroupGroupKey `pulumi:"groupKeys"`
	// The initial configuration options for creating a Group.
	//
	// See the
	// [API reference](https://cloud.google.com/identity/docs/reference/rest/v1beta1/groups/create#initialgroupconfig)
	// for possible values. Default value: "EMPTY" Possible values: ["INITIAL_GROUP_CONFIG_UNSPECIFIED", "WITH_INITIAL_OWNER", "EMPTY"]
	InitialGroupConfig string `pulumi:"initialGroupConfig"`
	// The labels that apply to the Group.
	// Contains 'cloudidentity.googleapis.com/groups.discussion_forum': '' if the Group is a Google Group or
	// 'system/groups/external': '' if the Group is an external-identity-mapped group.
	Labels map[string]string `pulumi:"labels"`
	// Resource name of the Group in the format: groups/{group_id}, where `groupId` is the unique ID assigned to the Group.
	Name string `pulumi:"name"`
	// The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
	Parent string `pulumi:"parent"`
	// The time when the Group was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//	GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	// Additional group keys associated with the Group
	AdditionalGroupKeys GetGroupsGroupAdditionalGroupKeyArrayInput `pulumi:"additionalGroupKeys"`
	// The time when the Group was created.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// An extended description to help users determine the purpose of a Group.
	Description pulumi.StringInput `pulumi:"description"`
	// The display name of the Group.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// EntityKey of the Group.  Structure is documented below.
	GroupKeys GetGroupsGroupGroupKeyArrayInput `pulumi:"groupKeys"`
	// The initial configuration options for creating a Group.
	//
	// See the
	// [API reference](https://cloud.google.com/identity/docs/reference/rest/v1beta1/groups/create#initialgroupconfig)
	// for possible values. Default value: "EMPTY" Possible values: ["INITIAL_GROUP_CONFIG_UNSPECIFIED", "WITH_INITIAL_OWNER", "EMPTY"]
	InitialGroupConfig pulumi.StringInput `pulumi:"initialGroupConfig"`
	// The labels that apply to the Group.
	// Contains 'cloudidentity.googleapis.com/groups.discussion_forum': '' if the Group is a Google Group or
	// 'system/groups/external': '' if the Group is an external-identity-mapped group.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Resource name of the Group in the format: groups/{group_id}, where `groupId` is the unique ID assigned to the Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
	Parent pulumi.StringInput `pulumi:"parent"`
	// The time when the Group was last updated.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//	GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

// Additional group keys associated with the Group
func (o GetGroupsGroupOutput) AdditionalGroupKeys() GetGroupsGroupAdditionalGroupKeyArrayOutput {
	return o.ApplyT(func(v GetGroupsGroup) []GetGroupsGroupAdditionalGroupKey { return v.AdditionalGroupKeys }).(GetGroupsGroupAdditionalGroupKeyArrayOutput)
}

// The time when the Group was created.
func (o GetGroupsGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

// An extended description to help users determine the purpose of a Group.
func (o GetGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The display name of the Group.
func (o GetGroupsGroupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.DisplayName }).(pulumi.StringOutput)
}

// EntityKey of the Group.  Structure is documented below.
func (o GetGroupsGroupOutput) GroupKeys() GetGroupsGroupGroupKeyArrayOutput {
	return o.ApplyT(func(v GetGroupsGroup) []GetGroupsGroupGroupKey { return v.GroupKeys }).(GetGroupsGroupGroupKeyArrayOutput)
}

// The initial configuration options for creating a Group.
//
// See the
// [API reference](https://cloud.google.com/identity/docs/reference/rest/v1beta1/groups/create#initialgroupconfig)
// for possible values. Default value: "EMPTY" Possible values: ["INITIAL_GROUP_CONFIG_UNSPECIFIED", "WITH_INITIAL_OWNER", "EMPTY"]
func (o GetGroupsGroupOutput) InitialGroupConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.InitialGroupConfig }).(pulumi.StringOutput)
}

// The labels that apply to the Group.
// Contains 'cloudidentity.googleapis.com/groups.discussion_forum': ” if the Group is a Google Group or
// 'system/groups/external': ” if the Group is an external-identity-mapped group.
func (o GetGroupsGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetGroupsGroup) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource name of the Group in the format: groups/{group_id}, where `groupId` is the unique ID assigned to the Group.
func (o GetGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
func (o GetGroupsGroupOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Parent }).(pulumi.StringOutput)
}

// The time when the Group was last updated.
func (o GetGroupsGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

type GetGroupsGroupAdditionalGroupKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id is the email address of an existing group or user.
	// For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace string `pulumi:"namespace"`
}

// GetGroupsGroupAdditionalGroupKeyInput is an input type that accepts GetGroupsGroupAdditionalGroupKeyArgs and GetGroupsGroupAdditionalGroupKeyOutput values.
// You can construct a concrete instance of `GetGroupsGroupAdditionalGroupKeyInput` via:
//
//	GetGroupsGroupAdditionalGroupKeyArgs{...}
type GetGroupsGroupAdditionalGroupKeyInput interface {
	pulumi.Input

	ToGetGroupsGroupAdditionalGroupKeyOutput() GetGroupsGroupAdditionalGroupKeyOutput
	ToGetGroupsGroupAdditionalGroupKeyOutputWithContext(context.Context) GetGroupsGroupAdditionalGroupKeyOutput
}

type GetGroupsGroupAdditionalGroupKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id is the email address of an existing group or user.
	// For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetGroupsGroupAdditionalGroupKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroupAdditionalGroupKey)(nil)).Elem()
}

func (i GetGroupsGroupAdditionalGroupKeyArgs) ToGetGroupsGroupAdditionalGroupKeyOutput() GetGroupsGroupAdditionalGroupKeyOutput {
	return i.ToGetGroupsGroupAdditionalGroupKeyOutputWithContext(context.Background())
}

func (i GetGroupsGroupAdditionalGroupKeyArgs) ToGetGroupsGroupAdditionalGroupKeyOutputWithContext(ctx context.Context) GetGroupsGroupAdditionalGroupKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupAdditionalGroupKeyOutput)
}

// GetGroupsGroupAdditionalGroupKeyArrayInput is an input type that accepts GetGroupsGroupAdditionalGroupKeyArray and GetGroupsGroupAdditionalGroupKeyArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupAdditionalGroupKeyArrayInput` via:
//
//	GetGroupsGroupAdditionalGroupKeyArray{ GetGroupsGroupAdditionalGroupKeyArgs{...} }
type GetGroupsGroupAdditionalGroupKeyArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupAdditionalGroupKeyArrayOutput() GetGroupsGroupAdditionalGroupKeyArrayOutput
	ToGetGroupsGroupAdditionalGroupKeyArrayOutputWithContext(context.Context) GetGroupsGroupAdditionalGroupKeyArrayOutput
}

type GetGroupsGroupAdditionalGroupKeyArray []GetGroupsGroupAdditionalGroupKeyInput

func (GetGroupsGroupAdditionalGroupKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroupAdditionalGroupKey)(nil)).Elem()
}

func (i GetGroupsGroupAdditionalGroupKeyArray) ToGetGroupsGroupAdditionalGroupKeyArrayOutput() GetGroupsGroupAdditionalGroupKeyArrayOutput {
	return i.ToGetGroupsGroupAdditionalGroupKeyArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupAdditionalGroupKeyArray) ToGetGroupsGroupAdditionalGroupKeyArrayOutputWithContext(ctx context.Context) GetGroupsGroupAdditionalGroupKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupAdditionalGroupKeyArrayOutput)
}

type GetGroupsGroupAdditionalGroupKeyOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupAdditionalGroupKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroupAdditionalGroupKey)(nil)).Elem()
}

func (o GetGroupsGroupAdditionalGroupKeyOutput) ToGetGroupsGroupAdditionalGroupKeyOutput() GetGroupsGroupAdditionalGroupKeyOutput {
	return o
}

func (o GetGroupsGroupAdditionalGroupKeyOutput) ToGetGroupsGroupAdditionalGroupKeyOutputWithContext(ctx context.Context) GetGroupsGroupAdditionalGroupKeyOutput {
	return o
}

// The ID of the entity.
// For Google-managed entities, the id is the email address of an existing group or user.
// For external-identity-mapped entities, the id is a string conforming
// to the Identity Source's requirements.
func (o GetGroupsGroupAdditionalGroupKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroupAdditionalGroupKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not populated, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If populated, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GetGroupsGroupAdditionalGroupKeyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroupAdditionalGroupKey) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetGroupsGroupAdditionalGroupKeyArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupAdditionalGroupKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroupAdditionalGroupKey)(nil)).Elem()
}

func (o GetGroupsGroupAdditionalGroupKeyArrayOutput) ToGetGroupsGroupAdditionalGroupKeyArrayOutput() GetGroupsGroupAdditionalGroupKeyArrayOutput {
	return o
}

func (o GetGroupsGroupAdditionalGroupKeyArrayOutput) ToGetGroupsGroupAdditionalGroupKeyArrayOutputWithContext(ctx context.Context) GetGroupsGroupAdditionalGroupKeyArrayOutput {
	return o
}

func (o GetGroupsGroupAdditionalGroupKeyArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupAdditionalGroupKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroupAdditionalGroupKey {
		return vs[0].([]GetGroupsGroupAdditionalGroupKey)[vs[1].(int)]
	}).(GetGroupsGroupAdditionalGroupKeyOutput)
}

type GetGroupsGroupGroupKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id is the email address of an existing group or user.
	// For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace string `pulumi:"namespace"`
}

// GetGroupsGroupGroupKeyInput is an input type that accepts GetGroupsGroupGroupKeyArgs and GetGroupsGroupGroupKeyOutput values.
// You can construct a concrete instance of `GetGroupsGroupGroupKeyInput` via:
//
//	GetGroupsGroupGroupKeyArgs{...}
type GetGroupsGroupGroupKeyInput interface {
	pulumi.Input

	ToGetGroupsGroupGroupKeyOutput() GetGroupsGroupGroupKeyOutput
	ToGetGroupsGroupGroupKeyOutputWithContext(context.Context) GetGroupsGroupGroupKeyOutput
}

type GetGroupsGroupGroupKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id is the email address of an existing group or user.
	// For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetGroupsGroupGroupKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroupGroupKey)(nil)).Elem()
}

func (i GetGroupsGroupGroupKeyArgs) ToGetGroupsGroupGroupKeyOutput() GetGroupsGroupGroupKeyOutput {
	return i.ToGetGroupsGroupGroupKeyOutputWithContext(context.Background())
}

func (i GetGroupsGroupGroupKeyArgs) ToGetGroupsGroupGroupKeyOutputWithContext(ctx context.Context) GetGroupsGroupGroupKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupGroupKeyOutput)
}

// GetGroupsGroupGroupKeyArrayInput is an input type that accepts GetGroupsGroupGroupKeyArray and GetGroupsGroupGroupKeyArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupGroupKeyArrayInput` via:
//
//	GetGroupsGroupGroupKeyArray{ GetGroupsGroupGroupKeyArgs{...} }
type GetGroupsGroupGroupKeyArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupGroupKeyArrayOutput() GetGroupsGroupGroupKeyArrayOutput
	ToGetGroupsGroupGroupKeyArrayOutputWithContext(context.Context) GetGroupsGroupGroupKeyArrayOutput
}

type GetGroupsGroupGroupKeyArray []GetGroupsGroupGroupKeyInput

func (GetGroupsGroupGroupKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroupGroupKey)(nil)).Elem()
}

func (i GetGroupsGroupGroupKeyArray) ToGetGroupsGroupGroupKeyArrayOutput() GetGroupsGroupGroupKeyArrayOutput {
	return i.ToGetGroupsGroupGroupKeyArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupGroupKeyArray) ToGetGroupsGroupGroupKeyArrayOutputWithContext(ctx context.Context) GetGroupsGroupGroupKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupGroupKeyArrayOutput)
}

type GetGroupsGroupGroupKeyOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupGroupKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroupGroupKey)(nil)).Elem()
}

func (o GetGroupsGroupGroupKeyOutput) ToGetGroupsGroupGroupKeyOutput() GetGroupsGroupGroupKeyOutput {
	return o
}

func (o GetGroupsGroupGroupKeyOutput) ToGetGroupsGroupGroupKeyOutputWithContext(ctx context.Context) GetGroupsGroupGroupKeyOutput {
	return o
}

// The ID of the entity.
// For Google-managed entities, the id is the email address of an existing group or user.
// For external-identity-mapped entities, the id is a string conforming
// to the Identity Source's requirements.
func (o GetGroupsGroupGroupKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroupGroupKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not populated, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If populated, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GetGroupsGroupGroupKeyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroupGroupKey) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetGroupsGroupGroupKeyArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupGroupKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroupGroupKey)(nil)).Elem()
}

func (o GetGroupsGroupGroupKeyArrayOutput) ToGetGroupsGroupGroupKeyArrayOutput() GetGroupsGroupGroupKeyArrayOutput {
	return o
}

func (o GetGroupsGroupGroupKeyArrayOutput) ToGetGroupsGroupGroupKeyArrayOutputWithContext(ctx context.Context) GetGroupsGroupGroupKeyArrayOutput {
	return o
}

func (o GetGroupsGroupGroupKeyArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupGroupKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroupGroupKey {
		return vs[0].([]GetGroupsGroupGroupKey)[vs[1].(int)]
	}).(GetGroupsGroupGroupKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupAdditionalGroupKeyInput)(nil)).Elem(), GroupAdditionalGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupAdditionalGroupKeyArrayInput)(nil)).Elem(), GroupAdditionalGroupKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGroupKeyInput)(nil)).Elem(), GroupGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGroupKeyPtrInput)(nil)).Elem(), GroupGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipMemberKeyInput)(nil)).Elem(), GroupMembershipMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipMemberKeyPtrInput)(nil)).Elem(), GroupMembershipMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipPreferredMemberKeyInput)(nil)).Elem(), GroupMembershipPreferredMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipPreferredMemberKeyPtrInput)(nil)).Elem(), GroupMembershipPreferredMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipRoleInput)(nil)).Elem(), GroupMembershipRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipRoleArrayInput)(nil)).Elem(), GroupMembershipRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipRoleExpiryDetailInput)(nil)).Elem(), GroupMembershipRoleExpiryDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipRoleExpiryDetailPtrInput)(nil)).Elem(), GroupMembershipRoleExpiryDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupLookupGroupKeyInput)(nil)).Elem(), GetGroupLookupGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipInput)(nil)).Elem(), GetGroupMembershipsMembershipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipMemberKeyInput)(nil)).Elem(), GetGroupMembershipsMembershipMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipMemberKeyArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipMemberKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipPreferredMemberKeyInput)(nil)).Elem(), GetGroupMembershipsMembershipPreferredMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipPreferredMemberKeyArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipPreferredMemberKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipRoleInput)(nil)).Elem(), GetGroupMembershipsMembershipRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipRoleArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipRoleExpiryDetailInput)(nil)).Elem(), GetGroupMembershipsMembershipRoleExpiryDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipsMembershipRoleExpiryDetailArrayInput)(nil)).Elem(), GetGroupMembershipsMembershipRoleExpiryDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipInput)(nil)).Elem(), GetGroupTransitiveMembershipsMembershipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipArrayInput)(nil)).Elem(), GetGroupTransitiveMembershipsMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipPreferredMemberKeyInput)(nil)).Elem(), GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayInput)(nil)).Elem(), GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipRoleInput)(nil)).Elem(), GetGroupTransitiveMembershipsMembershipRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupTransitiveMembershipsMembershipRoleArrayInput)(nil)).Elem(), GetGroupTransitiveMembershipsMembershipRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupAdditionalGroupKeyInput)(nil)).Elem(), GetGroupsGroupAdditionalGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupAdditionalGroupKeyArrayInput)(nil)).Elem(), GetGroupsGroupAdditionalGroupKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupGroupKeyInput)(nil)).Elem(), GetGroupsGroupGroupKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupGroupKeyArrayInput)(nil)).Elem(), GetGroupsGroupGroupKeyArray{})
	pulumi.RegisterOutputType(GroupAdditionalGroupKeyOutput{})
	pulumi.RegisterOutputType(GroupAdditionalGroupKeyArrayOutput{})
	pulumi.RegisterOutputType(GroupGroupKeyOutput{})
	pulumi.RegisterOutputType(GroupGroupKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipMemberKeyOutput{})
	pulumi.RegisterOutputType(GroupMembershipMemberKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipPreferredMemberKeyOutput{})
	pulumi.RegisterOutputType(GroupMembershipPreferredMemberKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipRoleOutput{})
	pulumi.RegisterOutputType(GroupMembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(GroupMembershipRoleExpiryDetailOutput{})
	pulumi.RegisterOutputType(GroupMembershipRoleExpiryDetailPtrOutput{})
	pulumi.RegisterOutputType(GetGroupLookupGroupKeyOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipMemberKeyOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipMemberKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipPreferredMemberKeyOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipRoleOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipRoleExpiryDetailOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipRoleExpiryDetailArrayOutput{})
	pulumi.RegisterOutputType(GetGroupTransitiveMembershipsMembershipOutput{})
	pulumi.RegisterOutputType(GetGroupTransitiveMembershipsMembershipArrayOutput{})
	pulumi.RegisterOutputType(GetGroupTransitiveMembershipsMembershipPreferredMemberKeyOutput{})
	pulumi.RegisterOutputType(GetGroupTransitiveMembershipsMembershipPreferredMemberKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupTransitiveMembershipsMembershipRoleOutput{})
	pulumi.RegisterOutputType(GetGroupTransitiveMembershipsMembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupAdditionalGroupKeyOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupAdditionalGroupKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupGroupKeyOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupGroupKeyArrayOutput{})
}
