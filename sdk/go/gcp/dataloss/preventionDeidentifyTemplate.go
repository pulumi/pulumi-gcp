// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataloss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows creation of templates to de-identify content.
//
// To get more information about DeidentifyTemplate, see:
//
// * [API documentation](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.deidentifyTemplates)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/dlp/docs/concepts-templates)
//
// > **Warning:** All arguments including the following potentially sensitive
// values will be stored in the raw state as plain text: `deidentify_config.record_transformations.field_transformations.field_transformations.info_type_transformations.transformations.transformations.primitive_transformation.crypto_replace_ffx_fpe_config.crypto_key.unwrapped.key`, `deidentify_config.record_transformations.field_transformations.field_transformations.info_type_transformations.transformations.transformations.primitive_transformation.crypto_hash_config.crypto_key.unwrapped.key`, `deidentify_config.record_transformations.field_transformations.field_transformations.info_type_transformations.transformations.transformations.primitive_transformation.date_shift_config.crypto_key.unwrapped.key`, `deidentify_config.record_transformations.field_transformations.field_transformations.info_type_transformations.transformations.transformations.primitive_transformation.crypto_deterministic_config.crypto_key.unwrapped.key`.
// Read more about sensitive data in state.
//
// ## Example Usage
// ### Dlp Deidentify Template Image Transformations
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataloss"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataloss.NewPreventionDeidentifyTemplate(ctx, "basic", &dataloss.PreventionDeidentifyTemplateArgs{
//				DeidentifyConfig: &dataloss.PreventionDeidentifyTemplateDeidentifyConfigArgs{
//					ImageTransformations: &dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsArgs{
//						Transforms: dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArray{
//							&dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs{
//								RedactionColor: &dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs{
//									Blue:  pulumi.Float64(1),
//									Green: pulumi.Float64(0.2),
//									Red:   pulumi.Float64(0.5),
//								},
//								SelectedInfoTypes: &dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs{
//									InfoTypes: dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoTypeArray{
//										&dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoTypeArgs{
//											Name:    pulumi.String("COLOR_INFO"),
//											Version: pulumi.String("latest"),
//										},
//									},
//								},
//							},
//							&dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs{
//								AllInfoTypes: nil,
//							},
//							&dataloss.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs{
//								AllText: nil,
//							},
//						},
//					},
//				},
//				Description: pulumi.String("Description"),
//				DisplayName: pulumi.String("Displayname"),
//				Parent:      pulumi.String("projects/my-project-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # DeidentifyTemplate can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:dataloss/preventionDeidentifyTemplate:PreventionDeidentifyTemplate default {{parent}}/deidentifyTemplates/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataloss/preventionDeidentifyTemplate:PreventionDeidentifyTemplate default {{parent}}/{{name}}
//
// ```
type PreventionDeidentifyTemplate struct {
	pulumi.CustomResourceState

	// The creation timestamp of an deidentifyTemplate. Set by the server.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Configuration of the deidentify template
	// Structure is documented below.
	DeidentifyConfig PreventionDeidentifyTemplateDeidentifyConfigOutput `pulumi:"deidentifyConfig"`
	// A description of the template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User set display name of the template.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Name of the information type.
	//
	// (Required)
	// Name of the information type.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the information type.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name describing the field.
	//
	// (Optional)
	// Name describing the field.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent of the template in any of the following formats:
	// * `projects/{{project}}`
	// * `projects/{{project}}/locations/{{location}}`
	// * `organizations/{{organization_id}}`
	// * `organizations/{{organization_id}}/locations/{{location}}`
	Parent pulumi.StringOutput `pulumi:"parent"`
	// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
	// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
	// 100 characters. Can be empty to allow the system to generate one.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// The last update timestamp of an deidentifyTemplate. Set by the server.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPreventionDeidentifyTemplate registers a new resource with the given unique name, arguments, and options.
func NewPreventionDeidentifyTemplate(ctx *pulumi.Context,
	name string, args *PreventionDeidentifyTemplateArgs, opts ...pulumi.ResourceOption) (*PreventionDeidentifyTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeidentifyConfig == nil {
		return nil, errors.New("invalid value for required argument 'DeidentifyConfig'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreventionDeidentifyTemplate
	err := ctx.RegisterResource("gcp:dataloss/preventionDeidentifyTemplate:PreventionDeidentifyTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreventionDeidentifyTemplate gets an existing PreventionDeidentifyTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreventionDeidentifyTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreventionDeidentifyTemplateState, opts ...pulumi.ResourceOption) (*PreventionDeidentifyTemplate, error) {
	var resource PreventionDeidentifyTemplate
	err := ctx.ReadResource("gcp:dataloss/preventionDeidentifyTemplate:PreventionDeidentifyTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreventionDeidentifyTemplate resources.
type preventionDeidentifyTemplateState struct {
	// The creation timestamp of an deidentifyTemplate. Set by the server.
	CreateTime *string `pulumi:"createTime"`
	// Configuration of the deidentify template
	// Structure is documented below.
	DeidentifyConfig *PreventionDeidentifyTemplateDeidentifyConfig `pulumi:"deidentifyConfig"`
	// A description of the template.
	Description *string `pulumi:"description"`
	// User set display name of the template.
	DisplayName *string `pulumi:"displayName"`
	// Name of the information type.
	//
	// (Required)
	// Name of the information type.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the information type.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name describing the field.
	//
	// (Optional)
	// Name describing the field.
	Name *string `pulumi:"name"`
	// The parent of the template in any of the following formats:
	// * `projects/{{project}}`
	// * `projects/{{project}}/locations/{{location}}`
	// * `organizations/{{organization_id}}`
	// * `organizations/{{organization_id}}/locations/{{location}}`
	Parent *string `pulumi:"parent"`
	// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
	// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
	// 100 characters. Can be empty to allow the system to generate one.
	TemplateId *string `pulumi:"templateId"`
	// The last update timestamp of an deidentifyTemplate. Set by the server.
	UpdateTime *string `pulumi:"updateTime"`
}

type PreventionDeidentifyTemplateState struct {
	// The creation timestamp of an deidentifyTemplate. Set by the server.
	CreateTime pulumi.StringPtrInput
	// Configuration of the deidentify template
	// Structure is documented below.
	DeidentifyConfig PreventionDeidentifyTemplateDeidentifyConfigPtrInput
	// A description of the template.
	Description pulumi.StringPtrInput
	// User set display name of the template.
	DisplayName pulumi.StringPtrInput
	// Name of the information type.
	//
	// (Required)
	// Name of the information type.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Optional)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Optional)
	// Name describing the field.
	//
	// (Required)
	// Name of the information type.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name describing the field.
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	//
	// (Required)
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
	//
	// (Required)
	// Name describing the field.
	//
	// (Optional)
	// Name describing the field.
	Name pulumi.StringPtrInput
	// The parent of the template in any of the following formats:
	// * `projects/{{project}}`
	// * `projects/{{project}}/locations/{{location}}`
	// * `organizations/{{organization_id}}`
	// * `organizations/{{organization_id}}/locations/{{location}}`
	Parent pulumi.StringPtrInput
	// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
	// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
	// 100 characters. Can be empty to allow the system to generate one.
	TemplateId pulumi.StringPtrInput
	// The last update timestamp of an deidentifyTemplate. Set by the server.
	UpdateTime pulumi.StringPtrInput
}

func (PreventionDeidentifyTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionDeidentifyTemplateState)(nil)).Elem()
}

type preventionDeidentifyTemplateArgs struct {
	// Configuration of the deidentify template
	// Structure is documented below.
	DeidentifyConfig PreventionDeidentifyTemplateDeidentifyConfig `pulumi:"deidentifyConfig"`
	// A description of the template.
	Description *string `pulumi:"description"`
	// User set display name of the template.
	DisplayName *string `pulumi:"displayName"`
	// The parent of the template in any of the following formats:
	// * `projects/{{project}}`
	// * `projects/{{project}}/locations/{{location}}`
	// * `organizations/{{organization_id}}`
	// * `organizations/{{organization_id}}/locations/{{location}}`
	Parent string `pulumi:"parent"`
	// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
	// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
	// 100 characters. Can be empty to allow the system to generate one.
	TemplateId *string `pulumi:"templateId"`
}

// The set of arguments for constructing a PreventionDeidentifyTemplate resource.
type PreventionDeidentifyTemplateArgs struct {
	// Configuration of the deidentify template
	// Structure is documented below.
	DeidentifyConfig PreventionDeidentifyTemplateDeidentifyConfigInput
	// A description of the template.
	Description pulumi.StringPtrInput
	// User set display name of the template.
	DisplayName pulumi.StringPtrInput
	// The parent of the template in any of the following formats:
	// * `projects/{{project}}`
	// * `projects/{{project}}/locations/{{location}}`
	// * `organizations/{{organization_id}}`
	// * `organizations/{{organization_id}}/locations/{{location}}`
	Parent pulumi.StringInput
	// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
	// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
	// 100 characters. Can be empty to allow the system to generate one.
	TemplateId pulumi.StringPtrInput
}

func (PreventionDeidentifyTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionDeidentifyTemplateArgs)(nil)).Elem()
}

type PreventionDeidentifyTemplateInput interface {
	pulumi.Input

	ToPreventionDeidentifyTemplateOutput() PreventionDeidentifyTemplateOutput
	ToPreventionDeidentifyTemplateOutputWithContext(ctx context.Context) PreventionDeidentifyTemplateOutput
}

func (*PreventionDeidentifyTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionDeidentifyTemplate)(nil)).Elem()
}

func (i *PreventionDeidentifyTemplate) ToPreventionDeidentifyTemplateOutput() PreventionDeidentifyTemplateOutput {
	return i.ToPreventionDeidentifyTemplateOutputWithContext(context.Background())
}

func (i *PreventionDeidentifyTemplate) ToPreventionDeidentifyTemplateOutputWithContext(ctx context.Context) PreventionDeidentifyTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionDeidentifyTemplateOutput)
}

// PreventionDeidentifyTemplateArrayInput is an input type that accepts PreventionDeidentifyTemplateArray and PreventionDeidentifyTemplateArrayOutput values.
// You can construct a concrete instance of `PreventionDeidentifyTemplateArrayInput` via:
//
//	PreventionDeidentifyTemplateArray{ PreventionDeidentifyTemplateArgs{...} }
type PreventionDeidentifyTemplateArrayInput interface {
	pulumi.Input

	ToPreventionDeidentifyTemplateArrayOutput() PreventionDeidentifyTemplateArrayOutput
	ToPreventionDeidentifyTemplateArrayOutputWithContext(context.Context) PreventionDeidentifyTemplateArrayOutput
}

type PreventionDeidentifyTemplateArray []PreventionDeidentifyTemplateInput

func (PreventionDeidentifyTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionDeidentifyTemplate)(nil)).Elem()
}

func (i PreventionDeidentifyTemplateArray) ToPreventionDeidentifyTemplateArrayOutput() PreventionDeidentifyTemplateArrayOutput {
	return i.ToPreventionDeidentifyTemplateArrayOutputWithContext(context.Background())
}

func (i PreventionDeidentifyTemplateArray) ToPreventionDeidentifyTemplateArrayOutputWithContext(ctx context.Context) PreventionDeidentifyTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionDeidentifyTemplateArrayOutput)
}

// PreventionDeidentifyTemplateMapInput is an input type that accepts PreventionDeidentifyTemplateMap and PreventionDeidentifyTemplateMapOutput values.
// You can construct a concrete instance of `PreventionDeidentifyTemplateMapInput` via:
//
//	PreventionDeidentifyTemplateMap{ "key": PreventionDeidentifyTemplateArgs{...} }
type PreventionDeidentifyTemplateMapInput interface {
	pulumi.Input

	ToPreventionDeidentifyTemplateMapOutput() PreventionDeidentifyTemplateMapOutput
	ToPreventionDeidentifyTemplateMapOutputWithContext(context.Context) PreventionDeidentifyTemplateMapOutput
}

type PreventionDeidentifyTemplateMap map[string]PreventionDeidentifyTemplateInput

func (PreventionDeidentifyTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionDeidentifyTemplate)(nil)).Elem()
}

func (i PreventionDeidentifyTemplateMap) ToPreventionDeidentifyTemplateMapOutput() PreventionDeidentifyTemplateMapOutput {
	return i.ToPreventionDeidentifyTemplateMapOutputWithContext(context.Background())
}

func (i PreventionDeidentifyTemplateMap) ToPreventionDeidentifyTemplateMapOutputWithContext(ctx context.Context) PreventionDeidentifyTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionDeidentifyTemplateMapOutput)
}

type PreventionDeidentifyTemplateOutput struct{ *pulumi.OutputState }

func (PreventionDeidentifyTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionDeidentifyTemplate)(nil)).Elem()
}

func (o PreventionDeidentifyTemplateOutput) ToPreventionDeidentifyTemplateOutput() PreventionDeidentifyTemplateOutput {
	return o
}

func (o PreventionDeidentifyTemplateOutput) ToPreventionDeidentifyTemplateOutputWithContext(ctx context.Context) PreventionDeidentifyTemplateOutput {
	return o
}

// The creation timestamp of an deidentifyTemplate. Set by the server.
func (o PreventionDeidentifyTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionDeidentifyTemplate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Configuration of the deidentify template
// Structure is documented below.
func (o PreventionDeidentifyTemplateOutput) DeidentifyConfig() PreventionDeidentifyTemplateDeidentifyConfigOutput {
	return o.ApplyT(func(v *PreventionDeidentifyTemplate) PreventionDeidentifyTemplateDeidentifyConfigOutput {
		return v.DeidentifyConfig
	}).(PreventionDeidentifyTemplateDeidentifyConfigOutput)
}

// A description of the template.
func (o PreventionDeidentifyTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreventionDeidentifyTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User set display name of the template.
func (o PreventionDeidentifyTemplateOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreventionDeidentifyTemplate) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Name of the information type.
//
// (Required)
// Name of the information type.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Optional)
// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
//
// (Optional)
// Name describing the field.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Optional)
// Name describing the field.
//
// (Optional)
// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
//
// (Required)
// Name describing the field.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Optional)
// Name describing the field.
//
// (Optional)
// Name describing the field.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Optional)
// Name describing the field.
//
// (Optional)
// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Optional)
// Name describing the field.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Optional)
// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
//
// (Optional)
// Name describing the field.
//
// (Required)
// Name of the information type.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Required)
// Name describing the field.
//
// (Required)
// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Required)
// Name describing the field.
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Required)
// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
//
// (Required)
// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.
//
// (Required)
// Name describing the field.
//
// (Optional)
// Name describing the field.
func (o PreventionDeidentifyTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionDeidentifyTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent of the template in any of the following formats:
// * `projects/{{project}}`
// * `projects/{{project}}/locations/{{location}}`
// * `organizations/{{organization_id}}`
// * `organizations/{{organization_id}}/locations/{{location}}`
func (o PreventionDeidentifyTemplateOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionDeidentifyTemplate) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
// 100 characters. Can be empty to allow the system to generate one.
func (o PreventionDeidentifyTemplateOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionDeidentifyTemplate) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

// The last update timestamp of an deidentifyTemplate. Set by the server.
func (o PreventionDeidentifyTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionDeidentifyTemplate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type PreventionDeidentifyTemplateArrayOutput struct{ *pulumi.OutputState }

func (PreventionDeidentifyTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionDeidentifyTemplate)(nil)).Elem()
}

func (o PreventionDeidentifyTemplateArrayOutput) ToPreventionDeidentifyTemplateArrayOutput() PreventionDeidentifyTemplateArrayOutput {
	return o
}

func (o PreventionDeidentifyTemplateArrayOutput) ToPreventionDeidentifyTemplateArrayOutputWithContext(ctx context.Context) PreventionDeidentifyTemplateArrayOutput {
	return o
}

func (o PreventionDeidentifyTemplateArrayOutput) Index(i pulumi.IntInput) PreventionDeidentifyTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreventionDeidentifyTemplate {
		return vs[0].([]*PreventionDeidentifyTemplate)[vs[1].(int)]
	}).(PreventionDeidentifyTemplateOutput)
}

type PreventionDeidentifyTemplateMapOutput struct{ *pulumi.OutputState }

func (PreventionDeidentifyTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionDeidentifyTemplate)(nil)).Elem()
}

func (o PreventionDeidentifyTemplateMapOutput) ToPreventionDeidentifyTemplateMapOutput() PreventionDeidentifyTemplateMapOutput {
	return o
}

func (o PreventionDeidentifyTemplateMapOutput) ToPreventionDeidentifyTemplateMapOutputWithContext(ctx context.Context) PreventionDeidentifyTemplateMapOutput {
	return o
}

func (o PreventionDeidentifyTemplateMapOutput) MapIndex(k pulumi.StringInput) PreventionDeidentifyTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreventionDeidentifyTemplate {
		return vs[0].(map[string]*PreventionDeidentifyTemplate)[vs[1].(string)]
	}).(PreventionDeidentifyTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionDeidentifyTemplateInput)(nil)).Elem(), &PreventionDeidentifyTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionDeidentifyTemplateArrayInput)(nil)).Elem(), PreventionDeidentifyTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionDeidentifyTemplateMapInput)(nil)).Elem(), PreventionDeidentifyTemplateMap{})
	pulumi.RegisterOutputType(PreventionDeidentifyTemplateOutput{})
	pulumi.RegisterOutputType(PreventionDeidentifyTemplateArrayOutput{})
	pulumi.RegisterOutputType(PreventionDeidentifyTemplateMapOutput{})
}
