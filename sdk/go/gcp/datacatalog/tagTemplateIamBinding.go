// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datacatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TagTemplateIamBinding struct {
	pulumi.CustomResourceState

	Condition   TagTemplateIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag        pulumi.StringOutput                     `pulumi:"etag"`
	Members     pulumi.StringArrayOutput                `pulumi:"members"`
	Project     pulumi.StringOutput                     `pulumi:"project"`
	Region      pulumi.StringOutput                     `pulumi:"region"`
	Role        pulumi.StringOutput                     `pulumi:"role"`
	TagTemplate pulumi.StringOutput                     `pulumi:"tagTemplate"`
}

// NewTagTemplateIamBinding registers a new resource with the given unique name, arguments, and options.
func NewTagTemplateIamBinding(ctx *pulumi.Context,
	name string, args *TagTemplateIamBindingArgs, opts ...pulumi.ResourceOption) (*TagTemplateIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.TagTemplate == nil {
		return nil, errors.New("invalid value for required argument 'TagTemplate'")
	}
	var resource TagTemplateIamBinding
	err := ctx.RegisterResource("gcp:datacatalog/tagTemplateIamBinding:TagTemplateIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagTemplateIamBinding gets an existing TagTemplateIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagTemplateIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagTemplateIamBindingState, opts ...pulumi.ResourceOption) (*TagTemplateIamBinding, error) {
	var resource TagTemplateIamBinding
	err := ctx.ReadResource("gcp:datacatalog/tagTemplateIamBinding:TagTemplateIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagTemplateIamBinding resources.
type tagTemplateIamBindingState struct {
	Condition   *TagTemplateIamBindingCondition `pulumi:"condition"`
	Etag        *string                         `pulumi:"etag"`
	Members     []string                        `pulumi:"members"`
	Project     *string                         `pulumi:"project"`
	Region      *string                         `pulumi:"region"`
	Role        *string                         `pulumi:"role"`
	TagTemplate *string                         `pulumi:"tagTemplate"`
}

type TagTemplateIamBindingState struct {
	Condition   TagTemplateIamBindingConditionPtrInput
	Etag        pulumi.StringPtrInput
	Members     pulumi.StringArrayInput
	Project     pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	Role        pulumi.StringPtrInput
	TagTemplate pulumi.StringPtrInput
}

func (TagTemplateIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagTemplateIamBindingState)(nil)).Elem()
}

type tagTemplateIamBindingArgs struct {
	Condition   *TagTemplateIamBindingCondition `pulumi:"condition"`
	Members     []string                        `pulumi:"members"`
	Project     *string                         `pulumi:"project"`
	Region      *string                         `pulumi:"region"`
	Role        string                          `pulumi:"role"`
	TagTemplate string                          `pulumi:"tagTemplate"`
}

// The set of arguments for constructing a TagTemplateIamBinding resource.
type TagTemplateIamBindingArgs struct {
	Condition   TagTemplateIamBindingConditionPtrInput
	Members     pulumi.StringArrayInput
	Project     pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	Role        pulumi.StringInput
	TagTemplate pulumi.StringInput
}

func (TagTemplateIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagTemplateIamBindingArgs)(nil)).Elem()
}

type TagTemplateIamBindingInput interface {
	pulumi.Input

	ToTagTemplateIamBindingOutput() TagTemplateIamBindingOutput
	ToTagTemplateIamBindingOutputWithContext(ctx context.Context) TagTemplateIamBindingOutput
}

func (*TagTemplateIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((*TagTemplateIamBinding)(nil))
}

func (i *TagTemplateIamBinding) ToTagTemplateIamBindingOutput() TagTemplateIamBindingOutput {
	return i.ToTagTemplateIamBindingOutputWithContext(context.Background())
}

func (i *TagTemplateIamBinding) ToTagTemplateIamBindingOutputWithContext(ctx context.Context) TagTemplateIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagTemplateIamBindingOutput)
}

func (i *TagTemplateIamBinding) ToTagTemplateIamBindingPtrOutput() TagTemplateIamBindingPtrOutput {
	return i.ToTagTemplateIamBindingPtrOutputWithContext(context.Background())
}

func (i *TagTemplateIamBinding) ToTagTemplateIamBindingPtrOutputWithContext(ctx context.Context) TagTemplateIamBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagTemplateIamBindingPtrOutput)
}

type TagTemplateIamBindingPtrInput interface {
	pulumi.Input

	ToTagTemplateIamBindingPtrOutput() TagTemplateIamBindingPtrOutput
	ToTagTemplateIamBindingPtrOutputWithContext(ctx context.Context) TagTemplateIamBindingPtrOutput
}

type tagTemplateIamBindingPtrType TagTemplateIamBindingArgs

func (*tagTemplateIamBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagTemplateIamBinding)(nil))
}

func (i *tagTemplateIamBindingPtrType) ToTagTemplateIamBindingPtrOutput() TagTemplateIamBindingPtrOutput {
	return i.ToTagTemplateIamBindingPtrOutputWithContext(context.Background())
}

func (i *tagTemplateIamBindingPtrType) ToTagTemplateIamBindingPtrOutputWithContext(ctx context.Context) TagTemplateIamBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagTemplateIamBindingPtrOutput)
}

// TagTemplateIamBindingArrayInput is an input type that accepts TagTemplateIamBindingArray and TagTemplateIamBindingArrayOutput values.
// You can construct a concrete instance of `TagTemplateIamBindingArrayInput` via:
//
//          TagTemplateIamBindingArray{ TagTemplateIamBindingArgs{...} }
type TagTemplateIamBindingArrayInput interface {
	pulumi.Input

	ToTagTemplateIamBindingArrayOutput() TagTemplateIamBindingArrayOutput
	ToTagTemplateIamBindingArrayOutputWithContext(context.Context) TagTemplateIamBindingArrayOutput
}

type TagTemplateIamBindingArray []TagTemplateIamBindingInput

func (TagTemplateIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagTemplateIamBinding)(nil)).Elem()
}

func (i TagTemplateIamBindingArray) ToTagTemplateIamBindingArrayOutput() TagTemplateIamBindingArrayOutput {
	return i.ToTagTemplateIamBindingArrayOutputWithContext(context.Background())
}

func (i TagTemplateIamBindingArray) ToTagTemplateIamBindingArrayOutputWithContext(ctx context.Context) TagTemplateIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagTemplateIamBindingArrayOutput)
}

// TagTemplateIamBindingMapInput is an input type that accepts TagTemplateIamBindingMap and TagTemplateIamBindingMapOutput values.
// You can construct a concrete instance of `TagTemplateIamBindingMapInput` via:
//
//          TagTemplateIamBindingMap{ "key": TagTemplateIamBindingArgs{...} }
type TagTemplateIamBindingMapInput interface {
	pulumi.Input

	ToTagTemplateIamBindingMapOutput() TagTemplateIamBindingMapOutput
	ToTagTemplateIamBindingMapOutputWithContext(context.Context) TagTemplateIamBindingMapOutput
}

type TagTemplateIamBindingMap map[string]TagTemplateIamBindingInput

func (TagTemplateIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagTemplateIamBinding)(nil)).Elem()
}

func (i TagTemplateIamBindingMap) ToTagTemplateIamBindingMapOutput() TagTemplateIamBindingMapOutput {
	return i.ToTagTemplateIamBindingMapOutputWithContext(context.Background())
}

func (i TagTemplateIamBindingMap) ToTagTemplateIamBindingMapOutputWithContext(ctx context.Context) TagTemplateIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagTemplateIamBindingMapOutput)
}

type TagTemplateIamBindingOutput struct{ *pulumi.OutputState }

func (TagTemplateIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagTemplateIamBinding)(nil))
}

func (o TagTemplateIamBindingOutput) ToTagTemplateIamBindingOutput() TagTemplateIamBindingOutput {
	return o
}

func (o TagTemplateIamBindingOutput) ToTagTemplateIamBindingOutputWithContext(ctx context.Context) TagTemplateIamBindingOutput {
	return o
}

func (o TagTemplateIamBindingOutput) ToTagTemplateIamBindingPtrOutput() TagTemplateIamBindingPtrOutput {
	return o.ToTagTemplateIamBindingPtrOutputWithContext(context.Background())
}

func (o TagTemplateIamBindingOutput) ToTagTemplateIamBindingPtrOutputWithContext(ctx context.Context) TagTemplateIamBindingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagTemplateIamBinding) *TagTemplateIamBinding {
		return &v
	}).(TagTemplateIamBindingPtrOutput)
}

type TagTemplateIamBindingPtrOutput struct{ *pulumi.OutputState }

func (TagTemplateIamBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagTemplateIamBinding)(nil))
}

func (o TagTemplateIamBindingPtrOutput) ToTagTemplateIamBindingPtrOutput() TagTemplateIamBindingPtrOutput {
	return o
}

func (o TagTemplateIamBindingPtrOutput) ToTagTemplateIamBindingPtrOutputWithContext(ctx context.Context) TagTemplateIamBindingPtrOutput {
	return o
}

func (o TagTemplateIamBindingPtrOutput) Elem() TagTemplateIamBindingOutput {
	return o.ApplyT(func(v *TagTemplateIamBinding) TagTemplateIamBinding {
		if v != nil {
			return *v
		}
		var ret TagTemplateIamBinding
		return ret
	}).(TagTemplateIamBindingOutput)
}

type TagTemplateIamBindingArrayOutput struct{ *pulumi.OutputState }

func (TagTemplateIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagTemplateIamBinding)(nil))
}

func (o TagTemplateIamBindingArrayOutput) ToTagTemplateIamBindingArrayOutput() TagTemplateIamBindingArrayOutput {
	return o
}

func (o TagTemplateIamBindingArrayOutput) ToTagTemplateIamBindingArrayOutputWithContext(ctx context.Context) TagTemplateIamBindingArrayOutput {
	return o
}

func (o TagTemplateIamBindingArrayOutput) Index(i pulumi.IntInput) TagTemplateIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagTemplateIamBinding {
		return vs[0].([]TagTemplateIamBinding)[vs[1].(int)]
	}).(TagTemplateIamBindingOutput)
}

type TagTemplateIamBindingMapOutput struct{ *pulumi.OutputState }

func (TagTemplateIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TagTemplateIamBinding)(nil))
}

func (o TagTemplateIamBindingMapOutput) ToTagTemplateIamBindingMapOutput() TagTemplateIamBindingMapOutput {
	return o
}

func (o TagTemplateIamBindingMapOutput) ToTagTemplateIamBindingMapOutputWithContext(ctx context.Context) TagTemplateIamBindingMapOutput {
	return o
}

func (o TagTemplateIamBindingMapOutput) MapIndex(k pulumi.StringInput) TagTemplateIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TagTemplateIamBinding {
		return vs[0].(map[string]TagTemplateIamBinding)[vs[1].(string)]
	}).(TagTemplateIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagTemplateIamBindingInput)(nil)).Elem(), &TagTemplateIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagTemplateIamBindingPtrInput)(nil)).Elem(), &TagTemplateIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagTemplateIamBindingArrayInput)(nil)).Elem(), TagTemplateIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagTemplateIamBindingMapInput)(nil)).Elem(), TagTemplateIamBindingMap{})
	pulumi.RegisterOutputType(TagTemplateIamBindingOutput{})
	pulumi.RegisterOutputType(TagTemplateIamBindingPtrOutput{})
	pulumi.RegisterOutputType(TagTemplateIamBindingArrayOutput{})
	pulumi.RegisterOutputType(TagTemplateIamBindingMapOutput{})
}
