// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datacatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Data catalog TagTemplate. Each of these resources serves a different use case:
//
// * `datacatalog.TagTemplateIamPolicy`: Authoritative. Sets the IAM policy for the tagtemplate and replaces any existing policy already attached.
// * `datacatalog.TagTemplateIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagtemplate are preserved.
// * `datacatalog.TagTemplateIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagtemplate are preserved.
//
// > **Note:** `datacatalog.TagTemplateIamPolicy` **cannot** be used in conjunction with `datacatalog.TagTemplateIamBinding` and `datacatalog.TagTemplateIamMember` or they will fight over what your policy should be.
//
// > **Note:** `datacatalog.TagTemplateIamBinding` resources **can be** used in conjunction with `datacatalog.TagTemplateIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_data\_catalog\_tag\_template\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/datacatalog"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					organizations.GetIAMPolicyBinding{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = datacatalog.NewTagTemplateIamPolicy(ctx, "policy", &datacatalog.TagTemplateIamPolicyArgs{
//				TagTemplate: pulumi.Any(google_data_catalog_tag_template.Basic_tag_template.Name),
//				PolicyData:  pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_data\_catalog\_tag\_template\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/datacatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datacatalog.NewTagTemplateIamBinding(ctx, "binding", &datacatalog.TagTemplateIamBindingArgs{
//				TagTemplate: pulumi.Any(google_data_catalog_tag_template.Basic_tag_template.Name),
//				Role:        pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_data\_catalog\_tag\_template\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/datacatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datacatalog.NewTagTemplateIamMember(ctx, "member", &datacatalog.TagTemplateIamMemberArgs{
//				TagTemplate: pulumi.Any(google_data_catalog_tag_template.Basic_tag_template.Name),
//				Role:        pulumi.String("roles/viewer"),
//				Member:      pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{region}}/tagTemplates/{{tag_template}} * {{project}}/{{region}}/{{tag_template}} * {{region}}/{{tag_template}} * {{tag_template}} Any variables not passed in the import command will be taken from the provider configuration. Data catalog tagtemplate IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember editor "projects/{{project}}/locations/{{region}}/tagTemplates/{{tag_template}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember editor "projects/{{project}}/locations/{{region}}/tagTemplates/{{tag_template}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember editor projects/{{project}}/locations/{{region}}/tagTemplates/{{tag_template}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type TagTemplateIamMember struct {
	pulumi.CustomResourceState

	Condition TagTemplateIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	Region  pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `datacatalog.TagTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	TagTemplate pulumi.StringOutput `pulumi:"tagTemplate"`
}

// NewTagTemplateIamMember registers a new resource with the given unique name, arguments, and options.
func NewTagTemplateIamMember(ctx *pulumi.Context,
	name string, args *TagTemplateIamMemberArgs, opts ...pulumi.ResourceOption) (*TagTemplateIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.TagTemplate == nil {
		return nil, errors.New("invalid value for required argument 'TagTemplate'")
	}
	var resource TagTemplateIamMember
	err := ctx.RegisterResource("gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagTemplateIamMember gets an existing TagTemplateIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagTemplateIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagTemplateIamMemberState, opts ...pulumi.ResourceOption) (*TagTemplateIamMember, error) {
	var resource TagTemplateIamMember
	err := ctx.ReadResource("gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagTemplateIamMember resources.
type tagTemplateIamMemberState struct {
	Condition *TagTemplateIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	Region  *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `datacatalog.TagTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	TagTemplate *string `pulumi:"tagTemplate"`
}

type TagTemplateIamMemberState struct {
	Condition TagTemplateIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	Region  pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `datacatalog.TagTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	TagTemplate pulumi.StringPtrInput
}

func (TagTemplateIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagTemplateIamMemberState)(nil)).Elem()
}

type tagTemplateIamMemberArgs struct {
	Condition *TagTemplateIamMemberCondition `pulumi:"condition"`
	Member    string                         `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	Region  *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `datacatalog.TagTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	TagTemplate string `pulumi:"tagTemplate"`
}

// The set of arguments for constructing a TagTemplateIamMember resource.
type TagTemplateIamMemberArgs struct {
	Condition TagTemplateIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	Region  pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `datacatalog.TagTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	TagTemplate pulumi.StringInput
}

func (TagTemplateIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagTemplateIamMemberArgs)(nil)).Elem()
}

type TagTemplateIamMemberInput interface {
	pulumi.Input

	ToTagTemplateIamMemberOutput() TagTemplateIamMemberOutput
	ToTagTemplateIamMemberOutputWithContext(ctx context.Context) TagTemplateIamMemberOutput
}

func (*TagTemplateIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**TagTemplateIamMember)(nil)).Elem()
}

func (i *TagTemplateIamMember) ToTagTemplateIamMemberOutput() TagTemplateIamMemberOutput {
	return i.ToTagTemplateIamMemberOutputWithContext(context.Background())
}

func (i *TagTemplateIamMember) ToTagTemplateIamMemberOutputWithContext(ctx context.Context) TagTemplateIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagTemplateIamMemberOutput)
}

// TagTemplateIamMemberArrayInput is an input type that accepts TagTemplateIamMemberArray and TagTemplateIamMemberArrayOutput values.
// You can construct a concrete instance of `TagTemplateIamMemberArrayInput` via:
//
//	TagTemplateIamMemberArray{ TagTemplateIamMemberArgs{...} }
type TagTemplateIamMemberArrayInput interface {
	pulumi.Input

	ToTagTemplateIamMemberArrayOutput() TagTemplateIamMemberArrayOutput
	ToTagTemplateIamMemberArrayOutputWithContext(context.Context) TagTemplateIamMemberArrayOutput
}

type TagTemplateIamMemberArray []TagTemplateIamMemberInput

func (TagTemplateIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagTemplateIamMember)(nil)).Elem()
}

func (i TagTemplateIamMemberArray) ToTagTemplateIamMemberArrayOutput() TagTemplateIamMemberArrayOutput {
	return i.ToTagTemplateIamMemberArrayOutputWithContext(context.Background())
}

func (i TagTemplateIamMemberArray) ToTagTemplateIamMemberArrayOutputWithContext(ctx context.Context) TagTemplateIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagTemplateIamMemberArrayOutput)
}

// TagTemplateIamMemberMapInput is an input type that accepts TagTemplateIamMemberMap and TagTemplateIamMemberMapOutput values.
// You can construct a concrete instance of `TagTemplateIamMemberMapInput` via:
//
//	TagTemplateIamMemberMap{ "key": TagTemplateIamMemberArgs{...} }
type TagTemplateIamMemberMapInput interface {
	pulumi.Input

	ToTagTemplateIamMemberMapOutput() TagTemplateIamMemberMapOutput
	ToTagTemplateIamMemberMapOutputWithContext(context.Context) TagTemplateIamMemberMapOutput
}

type TagTemplateIamMemberMap map[string]TagTemplateIamMemberInput

func (TagTemplateIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagTemplateIamMember)(nil)).Elem()
}

func (i TagTemplateIamMemberMap) ToTagTemplateIamMemberMapOutput() TagTemplateIamMemberMapOutput {
	return i.ToTagTemplateIamMemberMapOutputWithContext(context.Background())
}

func (i TagTemplateIamMemberMap) ToTagTemplateIamMemberMapOutputWithContext(ctx context.Context) TagTemplateIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagTemplateIamMemberMapOutput)
}

type TagTemplateIamMemberOutput struct{ *pulumi.OutputState }

func (TagTemplateIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagTemplateIamMember)(nil)).Elem()
}

func (o TagTemplateIamMemberOutput) ToTagTemplateIamMemberOutput() TagTemplateIamMemberOutput {
	return o
}

func (o TagTemplateIamMemberOutput) ToTagTemplateIamMemberOutputWithContext(ctx context.Context) TagTemplateIamMemberOutput {
	return o
}

func (o TagTemplateIamMemberOutput) Condition() TagTemplateIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *TagTemplateIamMember) TagTemplateIamMemberConditionPtrOutput { return v.Condition }).(TagTemplateIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o TagTemplateIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TagTemplateIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TagTemplateIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *TagTemplateIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o TagTemplateIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TagTemplateIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o TagTemplateIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TagTemplateIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `datacatalog.TagTemplateIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o TagTemplateIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *TagTemplateIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o TagTemplateIamMemberOutput) TagTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *TagTemplateIamMember) pulumi.StringOutput { return v.TagTemplate }).(pulumi.StringOutput)
}

type TagTemplateIamMemberArrayOutput struct{ *pulumi.OutputState }

func (TagTemplateIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagTemplateIamMember)(nil)).Elem()
}

func (o TagTemplateIamMemberArrayOutput) ToTagTemplateIamMemberArrayOutput() TagTemplateIamMemberArrayOutput {
	return o
}

func (o TagTemplateIamMemberArrayOutput) ToTagTemplateIamMemberArrayOutputWithContext(ctx context.Context) TagTemplateIamMemberArrayOutput {
	return o
}

func (o TagTemplateIamMemberArrayOutput) Index(i pulumi.IntInput) TagTemplateIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagTemplateIamMember {
		return vs[0].([]*TagTemplateIamMember)[vs[1].(int)]
	}).(TagTemplateIamMemberOutput)
}

type TagTemplateIamMemberMapOutput struct{ *pulumi.OutputState }

func (TagTemplateIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagTemplateIamMember)(nil)).Elem()
}

func (o TagTemplateIamMemberMapOutput) ToTagTemplateIamMemberMapOutput() TagTemplateIamMemberMapOutput {
	return o
}

func (o TagTemplateIamMemberMapOutput) ToTagTemplateIamMemberMapOutputWithContext(ctx context.Context) TagTemplateIamMemberMapOutput {
	return o
}

func (o TagTemplateIamMemberMapOutput) MapIndex(k pulumi.StringInput) TagTemplateIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagTemplateIamMember {
		return vs[0].(map[string]*TagTemplateIamMember)[vs[1].(string)]
	}).(TagTemplateIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagTemplateIamMemberInput)(nil)).Elem(), &TagTemplateIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagTemplateIamMemberArrayInput)(nil)).Elem(), TagTemplateIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagTemplateIamMemberMapInput)(nil)).Elem(), TagTemplateIamMemberMap{})
	pulumi.RegisterOutputType(TagTemplateIamMemberOutput{})
	pulumi.RegisterOutputType(TagTemplateIamMemberArrayOutput{})
	pulumi.RegisterOutputType(TagTemplateIamMemberMapOutput{})
}
