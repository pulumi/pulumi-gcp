// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datacatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Taxonomy can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:datacatalog/taxonomy:Taxonomy default {{name}}
// ```
type Taxonomy struct {
	pulumi.CustomResourceState

	// A list of policy types that are activated for this taxonomy. If not set,
	// defaults to an empty list.
	// Each value may be one of `POLICY_TYPE_UNSPECIFIED` and `FINE_GRAINED_ACCESS_CONTROL`.
	ActivatedPolicyTypes pulumi.StringArrayOutput `pulumi:"activatedPolicyTypes"`
	// Description of this taxonomy. It must: contain only unicode characters,
	// tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
	// long when encoded in UTF-8. If not set, defaults to an empty description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User defined name of this taxonomy.
	// It must: contain only unicode letters, numbers, underscores, dashes
	// and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Taxonomy location region.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewTaxonomy registers a new resource with the given unique name, arguments, and options.
func NewTaxonomy(ctx *pulumi.Context,
	name string, args *TaxonomyArgs, opts ...pulumi.ResourceOption) (*Taxonomy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource Taxonomy
	err := ctx.RegisterResource("gcp:datacatalog/taxonomy:Taxonomy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaxonomy gets an existing Taxonomy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaxonomy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaxonomyState, opts ...pulumi.ResourceOption) (*Taxonomy, error) {
	var resource Taxonomy
	err := ctx.ReadResource("gcp:datacatalog/taxonomy:Taxonomy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Taxonomy resources.
type taxonomyState struct {
	// A list of policy types that are activated for this taxonomy. If not set,
	// defaults to an empty list.
	// Each value may be one of `POLICY_TYPE_UNSPECIFIED` and `FINE_GRAINED_ACCESS_CONTROL`.
	ActivatedPolicyTypes []string `pulumi:"activatedPolicyTypes"`
	// Description of this taxonomy. It must: contain only unicode characters,
	// tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
	// long when encoded in UTF-8. If not set, defaults to an empty description.
	Description *string `pulumi:"description"`
	// User defined name of this taxonomy.
	// It must: contain only unicode letters, numbers, underscores, dashes
	// and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName *string `pulumi:"displayName"`
	// Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Taxonomy location region.
	Region *string `pulumi:"region"`
}

type TaxonomyState struct {
	// A list of policy types that are activated for this taxonomy. If not set,
	// defaults to an empty list.
	// Each value may be one of `POLICY_TYPE_UNSPECIFIED` and `FINE_GRAINED_ACCESS_CONTROL`.
	ActivatedPolicyTypes pulumi.StringArrayInput
	// Description of this taxonomy. It must: contain only unicode characters,
	// tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
	// long when encoded in UTF-8. If not set, defaults to an empty description.
	Description pulumi.StringPtrInput
	// User defined name of this taxonomy.
	// It must: contain only unicode letters, numbers, underscores, dashes
	// and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName pulumi.StringPtrInput
	// Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Taxonomy location region.
	Region pulumi.StringPtrInput
}

func (TaxonomyState) ElementType() reflect.Type {
	return reflect.TypeOf((*taxonomyState)(nil)).Elem()
}

type taxonomyArgs struct {
	// A list of policy types that are activated for this taxonomy. If not set,
	// defaults to an empty list.
	// Each value may be one of `POLICY_TYPE_UNSPECIFIED` and `FINE_GRAINED_ACCESS_CONTROL`.
	ActivatedPolicyTypes []string `pulumi:"activatedPolicyTypes"`
	// Description of this taxonomy. It must: contain only unicode characters,
	// tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
	// long when encoded in UTF-8. If not set, defaults to an empty description.
	Description *string `pulumi:"description"`
	// User defined name of this taxonomy.
	// It must: contain only unicode letters, numbers, underscores, dashes
	// and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName string `pulumi:"displayName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Taxonomy location region.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Taxonomy resource.
type TaxonomyArgs struct {
	// A list of policy types that are activated for this taxonomy. If not set,
	// defaults to an empty list.
	// Each value may be one of `POLICY_TYPE_UNSPECIFIED` and `FINE_GRAINED_ACCESS_CONTROL`.
	ActivatedPolicyTypes pulumi.StringArrayInput
	// Description of this taxonomy. It must: contain only unicode characters,
	// tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
	// long when encoded in UTF-8. If not set, defaults to an empty description.
	Description pulumi.StringPtrInput
	// User defined name of this taxonomy.
	// It must: contain only unicode letters, numbers, underscores, dashes
	// and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Taxonomy location region.
	Region pulumi.StringPtrInput
}

func (TaxonomyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taxonomyArgs)(nil)).Elem()
}

type TaxonomyInput interface {
	pulumi.Input

	ToTaxonomyOutput() TaxonomyOutput
	ToTaxonomyOutputWithContext(ctx context.Context) TaxonomyOutput
}

func (*Taxonomy) ElementType() reflect.Type {
	return reflect.TypeOf((*Taxonomy)(nil))
}

func (i *Taxonomy) ToTaxonomyOutput() TaxonomyOutput {
	return i.ToTaxonomyOutputWithContext(context.Background())
}

func (i *Taxonomy) ToTaxonomyOutputWithContext(ctx context.Context) TaxonomyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaxonomyOutput)
}

type TaxonomyOutput struct {
	*pulumi.OutputState
}

func (TaxonomyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Taxonomy)(nil))
}

func (o TaxonomyOutput) ToTaxonomyOutput() TaxonomyOutput {
	return o
}

func (o TaxonomyOutput) ToTaxonomyOutputWithContext(ctx context.Context) TaxonomyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TaxonomyOutput{})
}
