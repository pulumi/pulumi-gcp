// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datacatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Entry Metadata. A Data Catalog Entry resource represents another resource in Google Cloud Platform
// (such as a BigQuery dataset or a Pub/Sub topic) or outside of Google Cloud Platform. Clients can use
// the linkedResource field in the Entry resource to refer to the original resource ID of the source system.
//
// An Entry resource contains resource details, such as its schema. An Entry can also be used to attach
// flexible metadata, such as a Tag.
//
// To get more information about Entry, see:
//
// * [API documentation](https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/data-catalog/docs)
//
// ## Example Usage
// ### Data Catalog Entry Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/datacatalog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		entryGroup, err := datacatalog.NewEntryGroup(ctx, "entryGroup", &datacatalog.EntryGroupArgs{
// 			EntryGroupId: pulumi.String("my_group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datacatalog.NewEntry(ctx, "basicEntry", &datacatalog.EntryArgs{
// 			EntryGroup:          entryGroup.ID(),
// 			EntryId:             pulumi.String("my_entry"),
// 			UserSpecifiedType:   pulumi.String("my_custom_type"),
// 			UserSpecifiedSystem: pulumi.String("SomethingExternal"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Data Catalog Entry Fileset
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/datacatalog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		entryGroup, err := datacatalog.NewEntryGroup(ctx, "entryGroup", &datacatalog.EntryGroupArgs{
// 			EntryGroupId: pulumi.String("my_group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datacatalog.NewEntry(ctx, "basicEntry", &datacatalog.EntryArgs{
// 			EntryGroup: entryGroup.ID(),
// 			EntryId:    pulumi.String("my_entry"),
// 			Type:       pulumi.String("FILESET"),
// 			GcsFilesetSpec: &datacatalog.EntryGcsFilesetSpecArgs{
// 				FilePatterns: pulumi.StringArray{
// 					pulumi.String("gs://fake_bucket/dir/*"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Data Catalog Entry Full
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/datacatalog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		entryGroup, err := datacatalog.NewEntryGroup(ctx, "entryGroup", &datacatalog.EntryGroupArgs{
// 			EntryGroupId: pulumi.String("my_group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datacatalog.NewEntry(ctx, "basicEntry", &datacatalog.EntryArgs{
// 			EntryGroup:          entryGroup.ID(),
// 			EntryId:             pulumi.String("my_entry"),
// 			UserSpecifiedType:   pulumi.String("my_user_specified_type"),
// 			UserSpecifiedSystem: pulumi.String("Something_custom"),
// 			LinkedResource:      pulumi.String("my/linked/resource"),
// 			DisplayName:         pulumi.String("my custom type entry"),
// 			Description:         pulumi.String("a custom type entry for a user specified system"),
// 			Schema:              pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"columns\": [\n", "    {\n", "      \"column\": \"first_name\",\n", "      \"description\": \"First name\",\n", "      \"mode\": \"REQUIRED\",\n", "      \"type\": \"STRING\"\n", "    },\n", "    {\n", "      \"column\": \"last_name\",\n", "      \"description\": \"Last name\",\n", "      \"mode\": \"REQUIRED\",\n", "      \"type\": \"STRING\"\n", "    },\n", "    {\n", "      \"column\": \"address\",\n", "      \"description\": \"Address\",\n", "      \"mode\": \"REPEATED\",\n", "      \"subcolumns\": [\n", "        {\n", "          \"column\": \"city\",\n", "          \"description\": \"City\",\n", "          \"mode\": \"NULLABLE\",\n", "          \"type\": \"STRING\"\n", "        },\n", "        {\n", "          \"column\": \"state\",\n", "          \"description\": \"State\",\n", "          \"mode\": \"NULLABLE\",\n", "          \"type\": \"STRING\"\n", "        }\n", "      ],\n", "      \"type\": \"RECORD\"\n", "    }\n", "  ]\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Entry can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:datacatalog/entry:Entry default {{name}}
// ```
type Entry struct {
	pulumi.CustomResourceState

	// Specification for a group of BigQuery tables with name pattern [prefix]YYYYMMDD. Context:
	// https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding.
	BigqueryDateShardedSpecs EntryBigqueryDateShardedSpecArrayOutput `pulumi:"bigqueryDateShardedSpecs"`
	// Specification that applies to a BigQuery table. This is only valid on entries of type TABLE.
	BigqueryTableSpecs EntryBigqueryTableSpecArrayOutput `pulumi:"bigqueryTableSpecs"`
	// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display information such as title and description. A short name to identify the entry,
	// for example, "Analytics Data - Jan 2011".
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The name of the entry group this entry is in.
	EntryGroup pulumi.StringOutput `pulumi:"entryGroup"`
	// The id of the entry to create.
	EntryId pulumi.StringOutput `pulumi:"entryId"`
	// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
	// Structure is documented below.
	GcsFilesetSpec EntryGcsFilesetSpecPtrOutput `pulumi:"gcsFilesetSpec"`
	// This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.
	IntegratedSystem pulumi.StringOutput `pulumi:"integratedSystem"`
	// The resource this metadata entry refers to.
	// For Google Cloud Platform resources, linkedResource is the full name of the resource.
	// For example, the linkedResource for a table resource from BigQuery is:
	// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
	// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
	// this field is optional and defaults to an empty string.
	LinkedResource pulumi.StringOutput `pulumi:"linkedResource"`
	// The Data Catalog resource name of the entry in URL format. Example:
	// projects/{project_id}/locations/{location}/entryGroups/{entryGroupId}/entries/{entryId}. Note that this Entry and its
	// child resources may not actually be stored in the location in this name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
	// attached to it. See
	// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
	// for what fields this schema can contain.
	Schema pulumi.StringPtrOutput `pulumi:"schema"`
	// The type of the entry. Only used for Entries with types in the EntryType enum.
	// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
	// Possible values are `FILESET`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// This field indicates the entry's source system that Data Catalog does not integrate with.
	// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
	// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedSystem pulumi.StringPtrOutput `pulumi:"userSpecifiedSystem"`
	// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
	// When creating an entry, users should check the enum values first, if nothing matches the entry
	// to be created, then provide a custom value, for example "mySpecialType".
	// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
	// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedType pulumi.StringPtrOutput `pulumi:"userSpecifiedType"`
}

// NewEntry registers a new resource with the given unique name, arguments, and options.
func NewEntry(ctx *pulumi.Context,
	name string, args *EntryArgs, opts ...pulumi.ResourceOption) (*Entry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntryGroup == nil {
		return nil, errors.New("invalid value for required argument 'EntryGroup'")
	}
	if args.EntryId == nil {
		return nil, errors.New("invalid value for required argument 'EntryId'")
	}
	var resource Entry
	err := ctx.RegisterResource("gcp:datacatalog/entry:Entry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntry gets an existing Entry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntryState, opts ...pulumi.ResourceOption) (*Entry, error) {
	var resource Entry
	err := ctx.ReadResource("gcp:datacatalog/entry:Entry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Entry resources.
type entryState struct {
	// Specification for a group of BigQuery tables with name pattern [prefix]YYYYMMDD. Context:
	// https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding.
	BigqueryDateShardedSpecs []EntryBigqueryDateShardedSpec `pulumi:"bigqueryDateShardedSpecs"`
	// Specification that applies to a BigQuery table. This is only valid on entries of type TABLE.
	BigqueryTableSpecs []EntryBigqueryTableSpec `pulumi:"bigqueryTableSpecs"`
	// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
	Description *string `pulumi:"description"`
	// Display information such as title and description. A short name to identify the entry,
	// for example, "Analytics Data - Jan 2011".
	DisplayName *string `pulumi:"displayName"`
	// The name of the entry group this entry is in.
	EntryGroup *string `pulumi:"entryGroup"`
	// The id of the entry to create.
	EntryId *string `pulumi:"entryId"`
	// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
	// Structure is documented below.
	GcsFilesetSpec *EntryGcsFilesetSpec `pulumi:"gcsFilesetSpec"`
	// This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.
	IntegratedSystem *string `pulumi:"integratedSystem"`
	// The resource this metadata entry refers to.
	// For Google Cloud Platform resources, linkedResource is the full name of the resource.
	// For example, the linkedResource for a table resource from BigQuery is:
	// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
	// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
	// this field is optional and defaults to an empty string.
	LinkedResource *string `pulumi:"linkedResource"`
	// The Data Catalog resource name of the entry in URL format. Example:
	// projects/{project_id}/locations/{location}/entryGroups/{entryGroupId}/entries/{entryId}. Note that this Entry and its
	// child resources may not actually be stored in the location in this name.
	Name *string `pulumi:"name"`
	// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
	// attached to it. See
	// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
	// for what fields this schema can contain.
	Schema *string `pulumi:"schema"`
	// The type of the entry. Only used for Entries with types in the EntryType enum.
	// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
	// Possible values are `FILESET`.
	Type *string `pulumi:"type"`
	// This field indicates the entry's source system that Data Catalog does not integrate with.
	// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
	// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedSystem *string `pulumi:"userSpecifiedSystem"`
	// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
	// When creating an entry, users should check the enum values first, if nothing matches the entry
	// to be created, then provide a custom value, for example "mySpecialType".
	// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
	// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedType *string `pulumi:"userSpecifiedType"`
}

type EntryState struct {
	// Specification for a group of BigQuery tables with name pattern [prefix]YYYYMMDD. Context:
	// https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding.
	BigqueryDateShardedSpecs EntryBigqueryDateShardedSpecArrayInput
	// Specification that applies to a BigQuery table. This is only valid on entries of type TABLE.
	BigqueryTableSpecs EntryBigqueryTableSpecArrayInput
	// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
	Description pulumi.StringPtrInput
	// Display information such as title and description. A short name to identify the entry,
	// for example, "Analytics Data - Jan 2011".
	DisplayName pulumi.StringPtrInput
	// The name of the entry group this entry is in.
	EntryGroup pulumi.StringPtrInput
	// The id of the entry to create.
	EntryId pulumi.StringPtrInput
	// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
	// Structure is documented below.
	GcsFilesetSpec EntryGcsFilesetSpecPtrInput
	// This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.
	IntegratedSystem pulumi.StringPtrInput
	// The resource this metadata entry refers to.
	// For Google Cloud Platform resources, linkedResource is the full name of the resource.
	// For example, the linkedResource for a table resource from BigQuery is:
	// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
	// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
	// this field is optional and defaults to an empty string.
	LinkedResource pulumi.StringPtrInput
	// The Data Catalog resource name of the entry in URL format. Example:
	// projects/{project_id}/locations/{location}/entryGroups/{entryGroupId}/entries/{entryId}. Note that this Entry and its
	// child resources may not actually be stored in the location in this name.
	Name pulumi.StringPtrInput
	// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
	// attached to it. See
	// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
	// for what fields this schema can contain.
	Schema pulumi.StringPtrInput
	// The type of the entry. Only used for Entries with types in the EntryType enum.
	// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
	// Possible values are `FILESET`.
	Type pulumi.StringPtrInput
	// This field indicates the entry's source system that Data Catalog does not integrate with.
	// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
	// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedSystem pulumi.StringPtrInput
	// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
	// When creating an entry, users should check the enum values first, if nothing matches the entry
	// to be created, then provide a custom value, for example "mySpecialType".
	// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
	// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedType pulumi.StringPtrInput
}

func (EntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*entryState)(nil)).Elem()
}

type entryArgs struct {
	// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
	Description *string `pulumi:"description"`
	// Display information such as title and description. A short name to identify the entry,
	// for example, "Analytics Data - Jan 2011".
	DisplayName *string `pulumi:"displayName"`
	// The name of the entry group this entry is in.
	EntryGroup string `pulumi:"entryGroup"`
	// The id of the entry to create.
	EntryId string `pulumi:"entryId"`
	// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
	// Structure is documented below.
	GcsFilesetSpec *EntryGcsFilesetSpec `pulumi:"gcsFilesetSpec"`
	// The resource this metadata entry refers to.
	// For Google Cloud Platform resources, linkedResource is the full name of the resource.
	// For example, the linkedResource for a table resource from BigQuery is:
	// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
	// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
	// this field is optional and defaults to an empty string.
	LinkedResource *string `pulumi:"linkedResource"`
	// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
	// attached to it. See
	// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
	// for what fields this schema can contain.
	Schema *string `pulumi:"schema"`
	// The type of the entry. Only used for Entries with types in the EntryType enum.
	// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
	// Possible values are `FILESET`.
	Type *string `pulumi:"type"`
	// This field indicates the entry's source system that Data Catalog does not integrate with.
	// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
	// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedSystem *string `pulumi:"userSpecifiedSystem"`
	// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
	// When creating an entry, users should check the enum values first, if nothing matches the entry
	// to be created, then provide a custom value, for example "mySpecialType".
	// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
	// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedType *string `pulumi:"userSpecifiedType"`
}

// The set of arguments for constructing a Entry resource.
type EntryArgs struct {
	// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
	Description pulumi.StringPtrInput
	// Display information such as title and description. A short name to identify the entry,
	// for example, "Analytics Data - Jan 2011".
	DisplayName pulumi.StringPtrInput
	// The name of the entry group this entry is in.
	EntryGroup pulumi.StringInput
	// The id of the entry to create.
	EntryId pulumi.StringInput
	// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
	// Structure is documented below.
	GcsFilesetSpec EntryGcsFilesetSpecPtrInput
	// The resource this metadata entry refers to.
	// For Google Cloud Platform resources, linkedResource is the full name of the resource.
	// For example, the linkedResource for a table resource from BigQuery is:
	// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
	// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
	// this field is optional and defaults to an empty string.
	LinkedResource pulumi.StringPtrInput
	// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
	// attached to it. See
	// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
	// for what fields this schema can contain.
	Schema pulumi.StringPtrInput
	// The type of the entry. Only used for Entries with types in the EntryType enum.
	// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
	// Possible values are `FILESET`.
	Type pulumi.StringPtrInput
	// This field indicates the entry's source system that Data Catalog does not integrate with.
	// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
	// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedSystem pulumi.StringPtrInput
	// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
	// When creating an entry, users should check the enum values first, if nothing matches the entry
	// to be created, then provide a custom value, for example "mySpecialType".
	// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
	// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	UserSpecifiedType pulumi.StringPtrInput
}

func (EntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entryArgs)(nil)).Elem()
}

type EntryInput interface {
	pulumi.Input

	ToEntryOutput() EntryOutput
	ToEntryOutputWithContext(ctx context.Context) EntryOutput
}

func (*Entry) ElementType() reflect.Type {
	return reflect.TypeOf((*Entry)(nil))
}

func (i *Entry) ToEntryOutput() EntryOutput {
	return i.ToEntryOutputWithContext(context.Background())
}

func (i *Entry) ToEntryOutputWithContext(ctx context.Context) EntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryOutput)
}

func (i *Entry) ToEntryPtrOutput() EntryPtrOutput {
	return i.ToEntryPtrOutputWithContext(context.Background())
}

func (i *Entry) ToEntryPtrOutputWithContext(ctx context.Context) EntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryPtrOutput)
}

type EntryPtrInput interface {
	pulumi.Input

	ToEntryPtrOutput() EntryPtrOutput
	ToEntryPtrOutputWithContext(ctx context.Context) EntryPtrOutput
}

type entryPtrType EntryArgs

func (*entryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Entry)(nil))
}

func (i *entryPtrType) ToEntryPtrOutput() EntryPtrOutput {
	return i.ToEntryPtrOutputWithContext(context.Background())
}

func (i *entryPtrType) ToEntryPtrOutputWithContext(ctx context.Context) EntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryPtrOutput)
}

// EntryArrayInput is an input type that accepts EntryArray and EntryArrayOutput values.
// You can construct a concrete instance of `EntryArrayInput` via:
//
//          EntryArray{ EntryArgs{...} }
type EntryArrayInput interface {
	pulumi.Input

	ToEntryArrayOutput() EntryArrayOutput
	ToEntryArrayOutputWithContext(context.Context) EntryArrayOutput
}

type EntryArray []EntryInput

func (EntryArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Entry)(nil))
}

func (i EntryArray) ToEntryArrayOutput() EntryArrayOutput {
	return i.ToEntryArrayOutputWithContext(context.Background())
}

func (i EntryArray) ToEntryArrayOutputWithContext(ctx context.Context) EntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryArrayOutput)
}

// EntryMapInput is an input type that accepts EntryMap and EntryMapOutput values.
// You can construct a concrete instance of `EntryMapInput` via:
//
//          EntryMap{ "key": EntryArgs{...} }
type EntryMapInput interface {
	pulumi.Input

	ToEntryMapOutput() EntryMapOutput
	ToEntryMapOutputWithContext(context.Context) EntryMapOutput
}

type EntryMap map[string]EntryInput

func (EntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Entry)(nil))
}

func (i EntryMap) ToEntryMapOutput() EntryMapOutput {
	return i.ToEntryMapOutputWithContext(context.Background())
}

func (i EntryMap) ToEntryMapOutputWithContext(ctx context.Context) EntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryMapOutput)
}

type EntryOutput struct {
	*pulumi.OutputState
}

func (EntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Entry)(nil))
}

func (o EntryOutput) ToEntryOutput() EntryOutput {
	return o
}

func (o EntryOutput) ToEntryOutputWithContext(ctx context.Context) EntryOutput {
	return o
}

func (o EntryOutput) ToEntryPtrOutput() EntryPtrOutput {
	return o.ToEntryPtrOutputWithContext(context.Background())
}

func (o EntryOutput) ToEntryPtrOutputWithContext(ctx context.Context) EntryPtrOutput {
	return o.ApplyT(func(v Entry) *Entry {
		return &v
	}).(EntryPtrOutput)
}

type EntryPtrOutput struct {
	*pulumi.OutputState
}

func (EntryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Entry)(nil))
}

func (o EntryPtrOutput) ToEntryPtrOutput() EntryPtrOutput {
	return o
}

func (o EntryPtrOutput) ToEntryPtrOutputWithContext(ctx context.Context) EntryPtrOutput {
	return o
}

type EntryArrayOutput struct{ *pulumi.OutputState }

func (EntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Entry)(nil))
}

func (o EntryArrayOutput) ToEntryArrayOutput() EntryArrayOutput {
	return o
}

func (o EntryArrayOutput) ToEntryArrayOutputWithContext(ctx context.Context) EntryArrayOutput {
	return o
}

func (o EntryArrayOutput) Index(i pulumi.IntInput) EntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Entry {
		return vs[0].([]Entry)[vs[1].(int)]
	}).(EntryOutput)
}

type EntryMapOutput struct{ *pulumi.OutputState }

func (EntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Entry)(nil))
}

func (o EntryMapOutput) ToEntryMapOutput() EntryMapOutput {
	return o
}

func (o EntryMapOutput) ToEntryMapOutputWithContext(ctx context.Context) EntryMapOutput {
	return o
}

func (o EntryMapOutput) MapIndex(k pulumi.StringInput) EntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Entry {
		return vs[0].(map[string]Entry)[vs[1].(string)]
	}).(EntryOutput)
}

func init() {
	pulumi.RegisterOutputType(EntryOutput{})
	pulumi.RegisterOutputType(EntryPtrOutput{})
	pulumi.RegisterOutputType(EntryArrayOutput{})
	pulumi.RegisterOutputType(EntryMapOutput{})
}
