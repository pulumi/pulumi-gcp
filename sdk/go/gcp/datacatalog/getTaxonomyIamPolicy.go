// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datacatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves the current IAM policy data for taxonomy
func LookupTaxonomyIamPolicy(ctx *pulumi.Context, args *LookupTaxonomyIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupTaxonomyIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTaxonomyIamPolicyResult
	err := ctx.Invoke("gcp:datacatalog/getTaxonomyIamPolicy:getTaxonomyIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTaxonomyIamPolicy.
type LookupTaxonomyIamPolicyArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	Region  *string `pulumi:"region"`
	// Used to find the parent resource to bind the IAM policy to
	Taxonomy string `pulumi:"taxonomy"`
}

// A collection of values returned by getTaxonomyIamPolicy.
type LookupTaxonomyIamPolicyResult struct {
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Required only by `datacatalog.TaxonomyIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
	Region     string `pulumi:"region"`
	Taxonomy   string `pulumi:"taxonomy"`
}

func LookupTaxonomyIamPolicyOutput(ctx *pulumi.Context, args LookupTaxonomyIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupTaxonomyIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTaxonomyIamPolicyResult, error) {
			args := v.(LookupTaxonomyIamPolicyArgs)
			r, err := LookupTaxonomyIamPolicy(ctx, &args, opts...)
			var s LookupTaxonomyIamPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTaxonomyIamPolicyResultOutput)
}

// A collection of arguments for invoking getTaxonomyIamPolicy.
type LookupTaxonomyIamPolicyOutputArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	Region  pulumi.StringPtrInput `pulumi:"region"`
	// Used to find the parent resource to bind the IAM policy to
	Taxonomy pulumi.StringInput `pulumi:"taxonomy"`
}

func (LookupTaxonomyIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaxonomyIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getTaxonomyIamPolicy.
type LookupTaxonomyIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupTaxonomyIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaxonomyIamPolicyResult)(nil)).Elem()
}

func (o LookupTaxonomyIamPolicyResultOutput) ToLookupTaxonomyIamPolicyResultOutput() LookupTaxonomyIamPolicyResultOutput {
	return o
}

func (o LookupTaxonomyIamPolicyResultOutput) ToLookupTaxonomyIamPolicyResultOutputWithContext(ctx context.Context) LookupTaxonomyIamPolicyResultOutput {
	return o
}

func (o LookupTaxonomyIamPolicyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupTaxonomyIamPolicyResult] {
	return pulumix.Output[LookupTaxonomyIamPolicyResult]{
		OutputState: o.OutputState,
	}
}

// (Computed) The etag of the IAM policy.
func (o LookupTaxonomyIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaxonomyIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTaxonomyIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaxonomyIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required only by `datacatalog.TaxonomyIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupTaxonomyIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaxonomyIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupTaxonomyIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaxonomyIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupTaxonomyIamPolicyResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaxonomyIamPolicyResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupTaxonomyIamPolicyResultOutput) Taxonomy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaxonomyIamPolicyResult) string { return v.Taxonomy }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTaxonomyIamPolicyResultOutput{})
}
