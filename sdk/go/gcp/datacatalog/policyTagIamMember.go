// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datacatalog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Three different resources help you manage your IAM policy for Data catalog PolicyTag. Each of these resources serves a different use case:
//
// * `datacatalog.PolicyTagIamPolicy`: Authoritative. Sets the IAM policy for the policytag and replaces any existing policy already attached.
// * `datacatalog.PolicyTagIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the policytag are preserved.
// * `datacatalog.PolicyTagIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the policytag are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `datacatalog.PolicyTagIamPolicy`: Retrieves the IAM policy for the policytag
//
// > **Note:** `datacatalog.PolicyTagIamPolicy` **cannot** be used in conjunction with `datacatalog.PolicyTagIamBinding` and `datacatalog.PolicyTagIamMember` or they will fight over what your policy should be.
//
// > **Note:** `datacatalog.PolicyTagIamBinding` resources **can be** used in conjunction with `datacatalog.PolicyTagIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* {{policy_tag}} Any variables not passed in the import command will be taken from the provider configuration. Data catalog policytag IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:datacatalog/policyTagIamMember:PolicyTagIamMember editor "{{policy_tag}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:datacatalog/policyTagIamMember:PolicyTagIamMember editor "{{policy_tag}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:datacatalog/policyTagIamMember:PolicyTagIamMember editor {{policy_tag}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type PolicyTagIamMember struct {
	pulumi.CustomResourceState

	Condition PolicyTagIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	PolicyTag pulumi.StringOutput `pulumi:"policyTag"`
	// The role that should be applied. Only one
	// `datacatalog.PolicyTagIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewPolicyTagIamMember registers a new resource with the given unique name, arguments, and options.
func NewPolicyTagIamMember(ctx *pulumi.Context,
	name string, args *PolicyTagIamMemberArgs, opts ...pulumi.ResourceOption) (*PolicyTagIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.PolicyTag == nil {
		return nil, errors.New("invalid value for required argument 'PolicyTag'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyTagIamMember
	err := ctx.RegisterResource("gcp:datacatalog/policyTagIamMember:PolicyTagIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyTagIamMember gets an existing PolicyTagIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyTagIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyTagIamMemberState, opts ...pulumi.ResourceOption) (*PolicyTagIamMember, error) {
	var resource PolicyTagIamMember
	err := ctx.ReadResource("gcp:datacatalog/policyTagIamMember:PolicyTagIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyTagIamMember resources.
type policyTagIamMemberState struct {
	Condition *PolicyTagIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	PolicyTag *string `pulumi:"policyTag"`
	// The role that should be applied. Only one
	// `datacatalog.PolicyTagIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type PolicyTagIamMemberState struct {
	Condition PolicyTagIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	PolicyTag pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `datacatalog.PolicyTagIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (PolicyTagIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyTagIamMemberState)(nil)).Elem()
}

type policyTagIamMemberArgs struct {
	Condition *PolicyTagIamMemberCondition `pulumi:"condition"`
	Member    string                       `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	PolicyTag string `pulumi:"policyTag"`
	// The role that should be applied. Only one
	// `datacatalog.PolicyTagIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a PolicyTagIamMember resource.
type PolicyTagIamMemberArgs struct {
	Condition PolicyTagIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	PolicyTag pulumi.StringInput
	// The role that should be applied. Only one
	// `datacatalog.PolicyTagIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (PolicyTagIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyTagIamMemberArgs)(nil)).Elem()
}

type PolicyTagIamMemberInput interface {
	pulumi.Input

	ToPolicyTagIamMemberOutput() PolicyTagIamMemberOutput
	ToPolicyTagIamMemberOutputWithContext(ctx context.Context) PolicyTagIamMemberOutput
}

func (*PolicyTagIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyTagIamMember)(nil)).Elem()
}

func (i *PolicyTagIamMember) ToPolicyTagIamMemberOutput() PolicyTagIamMemberOutput {
	return i.ToPolicyTagIamMemberOutputWithContext(context.Background())
}

func (i *PolicyTagIamMember) ToPolicyTagIamMemberOutputWithContext(ctx context.Context) PolicyTagIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTagIamMemberOutput)
}

func (i *PolicyTagIamMember) ToOutput(ctx context.Context) pulumix.Output[*PolicyTagIamMember] {
	return pulumix.Output[*PolicyTagIamMember]{
		OutputState: i.ToPolicyTagIamMemberOutputWithContext(ctx).OutputState,
	}
}

// PolicyTagIamMemberArrayInput is an input type that accepts PolicyTagIamMemberArray and PolicyTagIamMemberArrayOutput values.
// You can construct a concrete instance of `PolicyTagIamMemberArrayInput` via:
//
//	PolicyTagIamMemberArray{ PolicyTagIamMemberArgs{...} }
type PolicyTagIamMemberArrayInput interface {
	pulumi.Input

	ToPolicyTagIamMemberArrayOutput() PolicyTagIamMemberArrayOutput
	ToPolicyTagIamMemberArrayOutputWithContext(context.Context) PolicyTagIamMemberArrayOutput
}

type PolicyTagIamMemberArray []PolicyTagIamMemberInput

func (PolicyTagIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyTagIamMember)(nil)).Elem()
}

func (i PolicyTagIamMemberArray) ToPolicyTagIamMemberArrayOutput() PolicyTagIamMemberArrayOutput {
	return i.ToPolicyTagIamMemberArrayOutputWithContext(context.Background())
}

func (i PolicyTagIamMemberArray) ToPolicyTagIamMemberArrayOutputWithContext(ctx context.Context) PolicyTagIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTagIamMemberArrayOutput)
}

func (i PolicyTagIamMemberArray) ToOutput(ctx context.Context) pulumix.Output[[]*PolicyTagIamMember] {
	return pulumix.Output[[]*PolicyTagIamMember]{
		OutputState: i.ToPolicyTagIamMemberArrayOutputWithContext(ctx).OutputState,
	}
}

// PolicyTagIamMemberMapInput is an input type that accepts PolicyTagIamMemberMap and PolicyTagIamMemberMapOutput values.
// You can construct a concrete instance of `PolicyTagIamMemberMapInput` via:
//
//	PolicyTagIamMemberMap{ "key": PolicyTagIamMemberArgs{...} }
type PolicyTagIamMemberMapInput interface {
	pulumi.Input

	ToPolicyTagIamMemberMapOutput() PolicyTagIamMemberMapOutput
	ToPolicyTagIamMemberMapOutputWithContext(context.Context) PolicyTagIamMemberMapOutput
}

type PolicyTagIamMemberMap map[string]PolicyTagIamMemberInput

func (PolicyTagIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyTagIamMember)(nil)).Elem()
}

func (i PolicyTagIamMemberMap) ToPolicyTagIamMemberMapOutput() PolicyTagIamMemberMapOutput {
	return i.ToPolicyTagIamMemberMapOutputWithContext(context.Background())
}

func (i PolicyTagIamMemberMap) ToPolicyTagIamMemberMapOutputWithContext(ctx context.Context) PolicyTagIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTagIamMemberMapOutput)
}

func (i PolicyTagIamMemberMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PolicyTagIamMember] {
	return pulumix.Output[map[string]*PolicyTagIamMember]{
		OutputState: i.ToPolicyTagIamMemberMapOutputWithContext(ctx).OutputState,
	}
}

type PolicyTagIamMemberOutput struct{ *pulumi.OutputState }

func (PolicyTagIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyTagIamMember)(nil)).Elem()
}

func (o PolicyTagIamMemberOutput) ToPolicyTagIamMemberOutput() PolicyTagIamMemberOutput {
	return o
}

func (o PolicyTagIamMemberOutput) ToPolicyTagIamMemberOutputWithContext(ctx context.Context) PolicyTagIamMemberOutput {
	return o
}

func (o PolicyTagIamMemberOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyTagIamMember] {
	return pulumix.Output[*PolicyTagIamMember]{
		OutputState: o.OutputState,
	}
}

func (o PolicyTagIamMemberOutput) Condition() PolicyTagIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *PolicyTagIamMember) PolicyTagIamMemberConditionPtrOutput { return v.Condition }).(PolicyTagIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o PolicyTagIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTagIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o PolicyTagIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTagIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o PolicyTagIamMemberOutput) PolicyTag() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTagIamMember) pulumi.StringOutput { return v.PolicyTag }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `datacatalog.PolicyTagIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o PolicyTagIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTagIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type PolicyTagIamMemberArrayOutput struct{ *pulumi.OutputState }

func (PolicyTagIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyTagIamMember)(nil)).Elem()
}

func (o PolicyTagIamMemberArrayOutput) ToPolicyTagIamMemberArrayOutput() PolicyTagIamMemberArrayOutput {
	return o
}

func (o PolicyTagIamMemberArrayOutput) ToPolicyTagIamMemberArrayOutputWithContext(ctx context.Context) PolicyTagIamMemberArrayOutput {
	return o
}

func (o PolicyTagIamMemberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PolicyTagIamMember] {
	return pulumix.Output[[]*PolicyTagIamMember]{
		OutputState: o.OutputState,
	}
}

func (o PolicyTagIamMemberArrayOutput) Index(i pulumi.IntInput) PolicyTagIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyTagIamMember {
		return vs[0].([]*PolicyTagIamMember)[vs[1].(int)]
	}).(PolicyTagIamMemberOutput)
}

type PolicyTagIamMemberMapOutput struct{ *pulumi.OutputState }

func (PolicyTagIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyTagIamMember)(nil)).Elem()
}

func (o PolicyTagIamMemberMapOutput) ToPolicyTagIamMemberMapOutput() PolicyTagIamMemberMapOutput {
	return o
}

func (o PolicyTagIamMemberMapOutput) ToPolicyTagIamMemberMapOutputWithContext(ctx context.Context) PolicyTagIamMemberMapOutput {
	return o
}

func (o PolicyTagIamMemberMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PolicyTagIamMember] {
	return pulumix.Output[map[string]*PolicyTagIamMember]{
		OutputState: o.OutputState,
	}
}

func (o PolicyTagIamMemberMapOutput) MapIndex(k pulumi.StringInput) PolicyTagIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyTagIamMember {
		return vs[0].(map[string]*PolicyTagIamMember)[vs[1].(string)]
	}).(PolicyTagIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTagIamMemberInput)(nil)).Elem(), &PolicyTagIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTagIamMemberArrayInput)(nil)).Elem(), PolicyTagIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTagIamMemberMapInput)(nil)).Elem(), PolicyTagIamMemberMap{})
	pulumi.RegisterOutputType(PolicyTagIamMemberOutput{})
	pulumi.RegisterOutputType(PolicyTagIamMemberArrayOutput{})
	pulumi.RegisterOutputType(PolicyTagIamMemberMapOutput{})
}
