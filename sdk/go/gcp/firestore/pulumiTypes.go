// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firestore

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type BackupScheduleDailyRecurrence struct {
}

// BackupScheduleDailyRecurrenceInput is an input type that accepts BackupScheduleDailyRecurrenceArgs and BackupScheduleDailyRecurrenceOutput values.
// You can construct a concrete instance of `BackupScheduleDailyRecurrenceInput` via:
//
//	BackupScheduleDailyRecurrenceArgs{...}
type BackupScheduleDailyRecurrenceInput interface {
	pulumi.Input

	ToBackupScheduleDailyRecurrenceOutput() BackupScheduleDailyRecurrenceOutput
	ToBackupScheduleDailyRecurrenceOutputWithContext(context.Context) BackupScheduleDailyRecurrenceOutput
}

type BackupScheduleDailyRecurrenceArgs struct {
}

func (BackupScheduleDailyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupScheduleDailyRecurrence)(nil)).Elem()
}

func (i BackupScheduleDailyRecurrenceArgs) ToBackupScheduleDailyRecurrenceOutput() BackupScheduleDailyRecurrenceOutput {
	return i.ToBackupScheduleDailyRecurrenceOutputWithContext(context.Background())
}

func (i BackupScheduleDailyRecurrenceArgs) ToBackupScheduleDailyRecurrenceOutputWithContext(ctx context.Context) BackupScheduleDailyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleDailyRecurrenceOutput)
}

func (i BackupScheduleDailyRecurrenceArgs) ToBackupScheduleDailyRecurrencePtrOutput() BackupScheduleDailyRecurrencePtrOutput {
	return i.ToBackupScheduleDailyRecurrencePtrOutputWithContext(context.Background())
}

func (i BackupScheduleDailyRecurrenceArgs) ToBackupScheduleDailyRecurrencePtrOutputWithContext(ctx context.Context) BackupScheduleDailyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleDailyRecurrenceOutput).ToBackupScheduleDailyRecurrencePtrOutputWithContext(ctx)
}

// BackupScheduleDailyRecurrencePtrInput is an input type that accepts BackupScheduleDailyRecurrenceArgs, BackupScheduleDailyRecurrencePtr and BackupScheduleDailyRecurrencePtrOutput values.
// You can construct a concrete instance of `BackupScheduleDailyRecurrencePtrInput` via:
//
//	        BackupScheduleDailyRecurrenceArgs{...}
//
//	or:
//
//	        nil
type BackupScheduleDailyRecurrencePtrInput interface {
	pulumi.Input

	ToBackupScheduleDailyRecurrencePtrOutput() BackupScheduleDailyRecurrencePtrOutput
	ToBackupScheduleDailyRecurrencePtrOutputWithContext(context.Context) BackupScheduleDailyRecurrencePtrOutput
}

type backupScheduleDailyRecurrencePtrType BackupScheduleDailyRecurrenceArgs

func BackupScheduleDailyRecurrencePtr(v *BackupScheduleDailyRecurrenceArgs) BackupScheduleDailyRecurrencePtrInput {
	return (*backupScheduleDailyRecurrencePtrType)(v)
}

func (*backupScheduleDailyRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupScheduleDailyRecurrence)(nil)).Elem()
}

func (i *backupScheduleDailyRecurrencePtrType) ToBackupScheduleDailyRecurrencePtrOutput() BackupScheduleDailyRecurrencePtrOutput {
	return i.ToBackupScheduleDailyRecurrencePtrOutputWithContext(context.Background())
}

func (i *backupScheduleDailyRecurrencePtrType) ToBackupScheduleDailyRecurrencePtrOutputWithContext(ctx context.Context) BackupScheduleDailyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleDailyRecurrencePtrOutput)
}

type BackupScheduleDailyRecurrenceOutput struct{ *pulumi.OutputState }

func (BackupScheduleDailyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupScheduleDailyRecurrence)(nil)).Elem()
}

func (o BackupScheduleDailyRecurrenceOutput) ToBackupScheduleDailyRecurrenceOutput() BackupScheduleDailyRecurrenceOutput {
	return o
}

func (o BackupScheduleDailyRecurrenceOutput) ToBackupScheduleDailyRecurrenceOutputWithContext(ctx context.Context) BackupScheduleDailyRecurrenceOutput {
	return o
}

func (o BackupScheduleDailyRecurrenceOutput) ToBackupScheduleDailyRecurrencePtrOutput() BackupScheduleDailyRecurrencePtrOutput {
	return o.ToBackupScheduleDailyRecurrencePtrOutputWithContext(context.Background())
}

func (o BackupScheduleDailyRecurrenceOutput) ToBackupScheduleDailyRecurrencePtrOutputWithContext(ctx context.Context) BackupScheduleDailyRecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupScheduleDailyRecurrence) *BackupScheduleDailyRecurrence {
		return &v
	}).(BackupScheduleDailyRecurrencePtrOutput)
}

type BackupScheduleDailyRecurrencePtrOutput struct{ *pulumi.OutputState }

func (BackupScheduleDailyRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupScheduleDailyRecurrence)(nil)).Elem()
}

func (o BackupScheduleDailyRecurrencePtrOutput) ToBackupScheduleDailyRecurrencePtrOutput() BackupScheduleDailyRecurrencePtrOutput {
	return o
}

func (o BackupScheduleDailyRecurrencePtrOutput) ToBackupScheduleDailyRecurrencePtrOutputWithContext(ctx context.Context) BackupScheduleDailyRecurrencePtrOutput {
	return o
}

func (o BackupScheduleDailyRecurrencePtrOutput) Elem() BackupScheduleDailyRecurrenceOutput {
	return o.ApplyT(func(v *BackupScheduleDailyRecurrence) BackupScheduleDailyRecurrence {
		if v != nil {
			return *v
		}
		var ret BackupScheduleDailyRecurrence
		return ret
	}).(BackupScheduleDailyRecurrenceOutput)
}

type BackupScheduleWeeklyRecurrence struct {
	// The day of week to run.
	// Possible values are: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
	Day *string `pulumi:"day"`
}

// BackupScheduleWeeklyRecurrenceInput is an input type that accepts BackupScheduleWeeklyRecurrenceArgs and BackupScheduleWeeklyRecurrenceOutput values.
// You can construct a concrete instance of `BackupScheduleWeeklyRecurrenceInput` via:
//
//	BackupScheduleWeeklyRecurrenceArgs{...}
type BackupScheduleWeeklyRecurrenceInput interface {
	pulumi.Input

	ToBackupScheduleWeeklyRecurrenceOutput() BackupScheduleWeeklyRecurrenceOutput
	ToBackupScheduleWeeklyRecurrenceOutputWithContext(context.Context) BackupScheduleWeeklyRecurrenceOutput
}

type BackupScheduleWeeklyRecurrenceArgs struct {
	// The day of week to run.
	// Possible values are: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
	Day pulumi.StringPtrInput `pulumi:"day"`
}

func (BackupScheduleWeeklyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupScheduleWeeklyRecurrence)(nil)).Elem()
}

func (i BackupScheduleWeeklyRecurrenceArgs) ToBackupScheduleWeeklyRecurrenceOutput() BackupScheduleWeeklyRecurrenceOutput {
	return i.ToBackupScheduleWeeklyRecurrenceOutputWithContext(context.Background())
}

func (i BackupScheduleWeeklyRecurrenceArgs) ToBackupScheduleWeeklyRecurrenceOutputWithContext(ctx context.Context) BackupScheduleWeeklyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleWeeklyRecurrenceOutput)
}

func (i BackupScheduleWeeklyRecurrenceArgs) ToBackupScheduleWeeklyRecurrencePtrOutput() BackupScheduleWeeklyRecurrencePtrOutput {
	return i.ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(context.Background())
}

func (i BackupScheduleWeeklyRecurrenceArgs) ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(ctx context.Context) BackupScheduleWeeklyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleWeeklyRecurrenceOutput).ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(ctx)
}

// BackupScheduleWeeklyRecurrencePtrInput is an input type that accepts BackupScheduleWeeklyRecurrenceArgs, BackupScheduleWeeklyRecurrencePtr and BackupScheduleWeeklyRecurrencePtrOutput values.
// You can construct a concrete instance of `BackupScheduleWeeklyRecurrencePtrInput` via:
//
//	        BackupScheduleWeeklyRecurrenceArgs{...}
//
//	or:
//
//	        nil
type BackupScheduleWeeklyRecurrencePtrInput interface {
	pulumi.Input

	ToBackupScheduleWeeklyRecurrencePtrOutput() BackupScheduleWeeklyRecurrencePtrOutput
	ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(context.Context) BackupScheduleWeeklyRecurrencePtrOutput
}

type backupScheduleWeeklyRecurrencePtrType BackupScheduleWeeklyRecurrenceArgs

func BackupScheduleWeeklyRecurrencePtr(v *BackupScheduleWeeklyRecurrenceArgs) BackupScheduleWeeklyRecurrencePtrInput {
	return (*backupScheduleWeeklyRecurrencePtrType)(v)
}

func (*backupScheduleWeeklyRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupScheduleWeeklyRecurrence)(nil)).Elem()
}

func (i *backupScheduleWeeklyRecurrencePtrType) ToBackupScheduleWeeklyRecurrencePtrOutput() BackupScheduleWeeklyRecurrencePtrOutput {
	return i.ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(context.Background())
}

func (i *backupScheduleWeeklyRecurrencePtrType) ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(ctx context.Context) BackupScheduleWeeklyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleWeeklyRecurrencePtrOutput)
}

type BackupScheduleWeeklyRecurrenceOutput struct{ *pulumi.OutputState }

func (BackupScheduleWeeklyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupScheduleWeeklyRecurrence)(nil)).Elem()
}

func (o BackupScheduleWeeklyRecurrenceOutput) ToBackupScheduleWeeklyRecurrenceOutput() BackupScheduleWeeklyRecurrenceOutput {
	return o
}

func (o BackupScheduleWeeklyRecurrenceOutput) ToBackupScheduleWeeklyRecurrenceOutputWithContext(ctx context.Context) BackupScheduleWeeklyRecurrenceOutput {
	return o
}

func (o BackupScheduleWeeklyRecurrenceOutput) ToBackupScheduleWeeklyRecurrencePtrOutput() BackupScheduleWeeklyRecurrencePtrOutput {
	return o.ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(context.Background())
}

func (o BackupScheduleWeeklyRecurrenceOutput) ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(ctx context.Context) BackupScheduleWeeklyRecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupScheduleWeeklyRecurrence) *BackupScheduleWeeklyRecurrence {
		return &v
	}).(BackupScheduleWeeklyRecurrencePtrOutput)
}

// The day of week to run.
// Possible values are: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
func (o BackupScheduleWeeklyRecurrenceOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupScheduleWeeklyRecurrence) *string { return v.Day }).(pulumi.StringPtrOutput)
}

type BackupScheduleWeeklyRecurrencePtrOutput struct{ *pulumi.OutputState }

func (BackupScheduleWeeklyRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupScheduleWeeklyRecurrence)(nil)).Elem()
}

func (o BackupScheduleWeeklyRecurrencePtrOutput) ToBackupScheduleWeeklyRecurrencePtrOutput() BackupScheduleWeeklyRecurrencePtrOutput {
	return o
}

func (o BackupScheduleWeeklyRecurrencePtrOutput) ToBackupScheduleWeeklyRecurrencePtrOutputWithContext(ctx context.Context) BackupScheduleWeeklyRecurrencePtrOutput {
	return o
}

func (o BackupScheduleWeeklyRecurrencePtrOutput) Elem() BackupScheduleWeeklyRecurrenceOutput {
	return o.ApplyT(func(v *BackupScheduleWeeklyRecurrence) BackupScheduleWeeklyRecurrence {
		if v != nil {
			return *v
		}
		var ret BackupScheduleWeeklyRecurrence
		return ret
	}).(BackupScheduleWeeklyRecurrenceOutput)
}

// The day of week to run.
// Possible values are: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
func (o BackupScheduleWeeklyRecurrencePtrOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupScheduleWeeklyRecurrence) *string {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.StringPtrOutput)
}

type DatabaseCmekConfig struct {
	// (Output)
	// Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
	// During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
	// multiple in-use key versions.
	// The expected format is
	// `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
	ActiveKeyVersions []string `pulumi:"activeKeyVersions"`
	// The resource ID of a Cloud KMS key. If set, the database created will
	// be a Customer-managed Encryption Key (CMEK) database encrypted with
	// this key. This feature is allowlist only in initial launch.
	// Only keys in the same location as this database are allowed to be used
	// for encryption. For Firestore's nam5 multi-region, this corresponds to Cloud KMS
	// multi-region us. For Firestore's eur3 multi-region, this corresponds to
	// Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
	// This value should be the KMS key resource ID in the format of
	// `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
	// How to retrieve this resource ID is listed at
	// https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// DatabaseCmekConfigInput is an input type that accepts DatabaseCmekConfigArgs and DatabaseCmekConfigOutput values.
// You can construct a concrete instance of `DatabaseCmekConfigInput` via:
//
//	DatabaseCmekConfigArgs{...}
type DatabaseCmekConfigInput interface {
	pulumi.Input

	ToDatabaseCmekConfigOutput() DatabaseCmekConfigOutput
	ToDatabaseCmekConfigOutputWithContext(context.Context) DatabaseCmekConfigOutput
}

type DatabaseCmekConfigArgs struct {
	// (Output)
	// Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
	// During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
	// multiple in-use key versions.
	// The expected format is
	// `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
	ActiveKeyVersions pulumi.StringArrayInput `pulumi:"activeKeyVersions"`
	// The resource ID of a Cloud KMS key. If set, the database created will
	// be a Customer-managed Encryption Key (CMEK) database encrypted with
	// this key. This feature is allowlist only in initial launch.
	// Only keys in the same location as this database are allowed to be used
	// for encryption. For Firestore's nam5 multi-region, this corresponds to Cloud KMS
	// multi-region us. For Firestore's eur3 multi-region, this corresponds to
	// Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
	// This value should be the KMS key resource ID in the format of
	// `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
	// How to retrieve this resource ID is listed at
	// https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (DatabaseCmekConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseCmekConfig)(nil)).Elem()
}

func (i DatabaseCmekConfigArgs) ToDatabaseCmekConfigOutput() DatabaseCmekConfigOutput {
	return i.ToDatabaseCmekConfigOutputWithContext(context.Background())
}

func (i DatabaseCmekConfigArgs) ToDatabaseCmekConfigOutputWithContext(ctx context.Context) DatabaseCmekConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseCmekConfigOutput)
}

func (i DatabaseCmekConfigArgs) ToDatabaseCmekConfigPtrOutput() DatabaseCmekConfigPtrOutput {
	return i.ToDatabaseCmekConfigPtrOutputWithContext(context.Background())
}

func (i DatabaseCmekConfigArgs) ToDatabaseCmekConfigPtrOutputWithContext(ctx context.Context) DatabaseCmekConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseCmekConfigOutput).ToDatabaseCmekConfigPtrOutputWithContext(ctx)
}

// DatabaseCmekConfigPtrInput is an input type that accepts DatabaseCmekConfigArgs, DatabaseCmekConfigPtr and DatabaseCmekConfigPtrOutput values.
// You can construct a concrete instance of `DatabaseCmekConfigPtrInput` via:
//
//	        DatabaseCmekConfigArgs{...}
//
//	or:
//
//	        nil
type DatabaseCmekConfigPtrInput interface {
	pulumi.Input

	ToDatabaseCmekConfigPtrOutput() DatabaseCmekConfigPtrOutput
	ToDatabaseCmekConfigPtrOutputWithContext(context.Context) DatabaseCmekConfigPtrOutput
}

type databaseCmekConfigPtrType DatabaseCmekConfigArgs

func DatabaseCmekConfigPtr(v *DatabaseCmekConfigArgs) DatabaseCmekConfigPtrInput {
	return (*databaseCmekConfigPtrType)(v)
}

func (*databaseCmekConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseCmekConfig)(nil)).Elem()
}

func (i *databaseCmekConfigPtrType) ToDatabaseCmekConfigPtrOutput() DatabaseCmekConfigPtrOutput {
	return i.ToDatabaseCmekConfigPtrOutputWithContext(context.Background())
}

func (i *databaseCmekConfigPtrType) ToDatabaseCmekConfigPtrOutputWithContext(ctx context.Context) DatabaseCmekConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseCmekConfigPtrOutput)
}

type DatabaseCmekConfigOutput struct{ *pulumi.OutputState }

func (DatabaseCmekConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseCmekConfig)(nil)).Elem()
}

func (o DatabaseCmekConfigOutput) ToDatabaseCmekConfigOutput() DatabaseCmekConfigOutput {
	return o
}

func (o DatabaseCmekConfigOutput) ToDatabaseCmekConfigOutputWithContext(ctx context.Context) DatabaseCmekConfigOutput {
	return o
}

func (o DatabaseCmekConfigOutput) ToDatabaseCmekConfigPtrOutput() DatabaseCmekConfigPtrOutput {
	return o.ToDatabaseCmekConfigPtrOutputWithContext(context.Background())
}

func (o DatabaseCmekConfigOutput) ToDatabaseCmekConfigPtrOutputWithContext(ctx context.Context) DatabaseCmekConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseCmekConfig) *DatabaseCmekConfig {
		return &v
	}).(DatabaseCmekConfigPtrOutput)
}

// (Output)
// Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
// During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
// multiple in-use key versions.
// The expected format is
// `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
func (o DatabaseCmekConfigOutput) ActiveKeyVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseCmekConfig) []string { return v.ActiveKeyVersions }).(pulumi.StringArrayOutput)
}

// The resource ID of a Cloud KMS key. If set, the database created will
// be a Customer-managed Encryption Key (CMEK) database encrypted with
// this key. This feature is allowlist only in initial launch.
// Only keys in the same location as this database are allowed to be used
// for encryption. For Firestore's nam5 multi-region, this corresponds to Cloud KMS
// multi-region us. For Firestore's eur3 multi-region, this corresponds to
// Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
// This value should be the KMS key resource ID in the format of
// `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
// How to retrieve this resource ID is listed at
// https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
func (o DatabaseCmekConfigOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseCmekConfig) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatabaseCmekConfigPtrOutput struct{ *pulumi.OutputState }

func (DatabaseCmekConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseCmekConfig)(nil)).Elem()
}

func (o DatabaseCmekConfigPtrOutput) ToDatabaseCmekConfigPtrOutput() DatabaseCmekConfigPtrOutput {
	return o
}

func (o DatabaseCmekConfigPtrOutput) ToDatabaseCmekConfigPtrOutputWithContext(ctx context.Context) DatabaseCmekConfigPtrOutput {
	return o
}

func (o DatabaseCmekConfigPtrOutput) Elem() DatabaseCmekConfigOutput {
	return o.ApplyT(func(v *DatabaseCmekConfig) DatabaseCmekConfig {
		if v != nil {
			return *v
		}
		var ret DatabaseCmekConfig
		return ret
	}).(DatabaseCmekConfigOutput)
}

// (Output)
// Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
// During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
// multiple in-use key versions.
// The expected format is
// `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
func (o DatabaseCmekConfigPtrOutput) ActiveKeyVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseCmekConfig) []string {
		if v == nil {
			return nil
		}
		return v.ActiveKeyVersions
	}).(pulumi.StringArrayOutput)
}

// The resource ID of a Cloud KMS key. If set, the database created will
// be a Customer-managed Encryption Key (CMEK) database encrypted with
// this key. This feature is allowlist only in initial launch.
// Only keys in the same location as this database are allowed to be used
// for encryption. For Firestore's nam5 multi-region, this corresponds to Cloud KMS
// multi-region us. For Firestore's eur3 multi-region, this corresponds to
// Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
// This value should be the KMS key resource ID in the format of
// `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
// How to retrieve this resource ID is listed at
// https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
func (o DatabaseCmekConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseCmekConfig) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type FieldIndexConfig struct {
	// The indexes to configure on the field. Order or array contains must be specified.
	// Structure is documented below.
	Indexes []FieldIndexConfigIndex `pulumi:"indexes"`
}

// FieldIndexConfigInput is an input type that accepts FieldIndexConfigArgs and FieldIndexConfigOutput values.
// You can construct a concrete instance of `FieldIndexConfigInput` via:
//
//	FieldIndexConfigArgs{...}
type FieldIndexConfigInput interface {
	pulumi.Input

	ToFieldIndexConfigOutput() FieldIndexConfigOutput
	ToFieldIndexConfigOutputWithContext(context.Context) FieldIndexConfigOutput
}

type FieldIndexConfigArgs struct {
	// The indexes to configure on the field. Order or array contains must be specified.
	// Structure is documented below.
	Indexes FieldIndexConfigIndexArrayInput `pulumi:"indexes"`
}

func (FieldIndexConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldIndexConfig)(nil)).Elem()
}

func (i FieldIndexConfigArgs) ToFieldIndexConfigOutput() FieldIndexConfigOutput {
	return i.ToFieldIndexConfigOutputWithContext(context.Background())
}

func (i FieldIndexConfigArgs) ToFieldIndexConfigOutputWithContext(ctx context.Context) FieldIndexConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldIndexConfigOutput)
}

func (i FieldIndexConfigArgs) ToFieldIndexConfigPtrOutput() FieldIndexConfigPtrOutput {
	return i.ToFieldIndexConfigPtrOutputWithContext(context.Background())
}

func (i FieldIndexConfigArgs) ToFieldIndexConfigPtrOutputWithContext(ctx context.Context) FieldIndexConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldIndexConfigOutput).ToFieldIndexConfigPtrOutputWithContext(ctx)
}

// FieldIndexConfigPtrInput is an input type that accepts FieldIndexConfigArgs, FieldIndexConfigPtr and FieldIndexConfigPtrOutput values.
// You can construct a concrete instance of `FieldIndexConfigPtrInput` via:
//
//	        FieldIndexConfigArgs{...}
//
//	or:
//
//	        nil
type FieldIndexConfigPtrInput interface {
	pulumi.Input

	ToFieldIndexConfigPtrOutput() FieldIndexConfigPtrOutput
	ToFieldIndexConfigPtrOutputWithContext(context.Context) FieldIndexConfigPtrOutput
}

type fieldIndexConfigPtrType FieldIndexConfigArgs

func FieldIndexConfigPtr(v *FieldIndexConfigArgs) FieldIndexConfigPtrInput {
	return (*fieldIndexConfigPtrType)(v)
}

func (*fieldIndexConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FieldIndexConfig)(nil)).Elem()
}

func (i *fieldIndexConfigPtrType) ToFieldIndexConfigPtrOutput() FieldIndexConfigPtrOutput {
	return i.ToFieldIndexConfigPtrOutputWithContext(context.Background())
}

func (i *fieldIndexConfigPtrType) ToFieldIndexConfigPtrOutputWithContext(ctx context.Context) FieldIndexConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldIndexConfigPtrOutput)
}

type FieldIndexConfigOutput struct{ *pulumi.OutputState }

func (FieldIndexConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldIndexConfig)(nil)).Elem()
}

func (o FieldIndexConfigOutput) ToFieldIndexConfigOutput() FieldIndexConfigOutput {
	return o
}

func (o FieldIndexConfigOutput) ToFieldIndexConfigOutputWithContext(ctx context.Context) FieldIndexConfigOutput {
	return o
}

func (o FieldIndexConfigOutput) ToFieldIndexConfigPtrOutput() FieldIndexConfigPtrOutput {
	return o.ToFieldIndexConfigPtrOutputWithContext(context.Background())
}

func (o FieldIndexConfigOutput) ToFieldIndexConfigPtrOutputWithContext(ctx context.Context) FieldIndexConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FieldIndexConfig) *FieldIndexConfig {
		return &v
	}).(FieldIndexConfigPtrOutput)
}

// The indexes to configure on the field. Order or array contains must be specified.
// Structure is documented below.
func (o FieldIndexConfigOutput) Indexes() FieldIndexConfigIndexArrayOutput {
	return o.ApplyT(func(v FieldIndexConfig) []FieldIndexConfigIndex { return v.Indexes }).(FieldIndexConfigIndexArrayOutput)
}

type FieldIndexConfigPtrOutput struct{ *pulumi.OutputState }

func (FieldIndexConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FieldIndexConfig)(nil)).Elem()
}

func (o FieldIndexConfigPtrOutput) ToFieldIndexConfigPtrOutput() FieldIndexConfigPtrOutput {
	return o
}

func (o FieldIndexConfigPtrOutput) ToFieldIndexConfigPtrOutputWithContext(ctx context.Context) FieldIndexConfigPtrOutput {
	return o
}

func (o FieldIndexConfigPtrOutput) Elem() FieldIndexConfigOutput {
	return o.ApplyT(func(v *FieldIndexConfig) FieldIndexConfig {
		if v != nil {
			return *v
		}
		var ret FieldIndexConfig
		return ret
	}).(FieldIndexConfigOutput)
}

// The indexes to configure on the field. Order or array contains must be specified.
// Structure is documented below.
func (o FieldIndexConfigPtrOutput) Indexes() FieldIndexConfigIndexArrayOutput {
	return o.ApplyT(func(v *FieldIndexConfig) []FieldIndexConfigIndex {
		if v == nil {
			return nil
		}
		return v.Indexes
	}).(FieldIndexConfigIndexArrayOutput)
}

type FieldIndexConfigIndex struct {
	// Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
	// be specified.
	// Possible values are: `CONTAINS`.
	ArrayConfig *string `pulumi:"arrayConfig"`
	// Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=, !=.
	// Only one of `order` and `arrayConfig` can be specified.
	// Possible values are: `ASCENDING`, `DESCENDING`.
	Order *string `pulumi:"order"`
	// The scope at which a query is run. Collection scoped queries require you specify
	// the collection at query time. Collection group scope allows queries across all
	// collections with the same id.
	// Default value is `COLLECTION`.
	// Possible values are: `COLLECTION`, `COLLECTION_GROUP`.
	QueryScope *string `pulumi:"queryScope"`
}

// FieldIndexConfigIndexInput is an input type that accepts FieldIndexConfigIndexArgs and FieldIndexConfigIndexOutput values.
// You can construct a concrete instance of `FieldIndexConfigIndexInput` via:
//
//	FieldIndexConfigIndexArgs{...}
type FieldIndexConfigIndexInput interface {
	pulumi.Input

	ToFieldIndexConfigIndexOutput() FieldIndexConfigIndexOutput
	ToFieldIndexConfigIndexOutputWithContext(context.Context) FieldIndexConfigIndexOutput
}

type FieldIndexConfigIndexArgs struct {
	// Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
	// be specified.
	// Possible values are: `CONTAINS`.
	ArrayConfig pulumi.StringPtrInput `pulumi:"arrayConfig"`
	// Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=, !=.
	// Only one of `order` and `arrayConfig` can be specified.
	// Possible values are: `ASCENDING`, `DESCENDING`.
	Order pulumi.StringPtrInput `pulumi:"order"`
	// The scope at which a query is run. Collection scoped queries require you specify
	// the collection at query time. Collection group scope allows queries across all
	// collections with the same id.
	// Default value is `COLLECTION`.
	// Possible values are: `COLLECTION`, `COLLECTION_GROUP`.
	QueryScope pulumi.StringPtrInput `pulumi:"queryScope"`
}

func (FieldIndexConfigIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldIndexConfigIndex)(nil)).Elem()
}

func (i FieldIndexConfigIndexArgs) ToFieldIndexConfigIndexOutput() FieldIndexConfigIndexOutput {
	return i.ToFieldIndexConfigIndexOutputWithContext(context.Background())
}

func (i FieldIndexConfigIndexArgs) ToFieldIndexConfigIndexOutputWithContext(ctx context.Context) FieldIndexConfigIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldIndexConfigIndexOutput)
}

// FieldIndexConfigIndexArrayInput is an input type that accepts FieldIndexConfigIndexArray and FieldIndexConfigIndexArrayOutput values.
// You can construct a concrete instance of `FieldIndexConfigIndexArrayInput` via:
//
//	FieldIndexConfigIndexArray{ FieldIndexConfigIndexArgs{...} }
type FieldIndexConfigIndexArrayInput interface {
	pulumi.Input

	ToFieldIndexConfigIndexArrayOutput() FieldIndexConfigIndexArrayOutput
	ToFieldIndexConfigIndexArrayOutputWithContext(context.Context) FieldIndexConfigIndexArrayOutput
}

type FieldIndexConfigIndexArray []FieldIndexConfigIndexInput

func (FieldIndexConfigIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldIndexConfigIndex)(nil)).Elem()
}

func (i FieldIndexConfigIndexArray) ToFieldIndexConfigIndexArrayOutput() FieldIndexConfigIndexArrayOutput {
	return i.ToFieldIndexConfigIndexArrayOutputWithContext(context.Background())
}

func (i FieldIndexConfigIndexArray) ToFieldIndexConfigIndexArrayOutputWithContext(ctx context.Context) FieldIndexConfigIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldIndexConfigIndexArrayOutput)
}

type FieldIndexConfigIndexOutput struct{ *pulumi.OutputState }

func (FieldIndexConfigIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldIndexConfigIndex)(nil)).Elem()
}

func (o FieldIndexConfigIndexOutput) ToFieldIndexConfigIndexOutput() FieldIndexConfigIndexOutput {
	return o
}

func (o FieldIndexConfigIndexOutput) ToFieldIndexConfigIndexOutputWithContext(ctx context.Context) FieldIndexConfigIndexOutput {
	return o
}

// Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
// be specified.
// Possible values are: `CONTAINS`.
func (o FieldIndexConfigIndexOutput) ArrayConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldIndexConfigIndex) *string { return v.ArrayConfig }).(pulumi.StringPtrOutput)
}

// Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=, !=.
// Only one of `order` and `arrayConfig` can be specified.
// Possible values are: `ASCENDING`, `DESCENDING`.
func (o FieldIndexConfigIndexOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldIndexConfigIndex) *string { return v.Order }).(pulumi.StringPtrOutput)
}

// The scope at which a query is run. Collection scoped queries require you specify
// the collection at query time. Collection group scope allows queries across all
// collections with the same id.
// Default value is `COLLECTION`.
// Possible values are: `COLLECTION`, `COLLECTION_GROUP`.
func (o FieldIndexConfigIndexOutput) QueryScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldIndexConfigIndex) *string { return v.QueryScope }).(pulumi.StringPtrOutput)
}

type FieldIndexConfigIndexArrayOutput struct{ *pulumi.OutputState }

func (FieldIndexConfigIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldIndexConfigIndex)(nil)).Elem()
}

func (o FieldIndexConfigIndexArrayOutput) ToFieldIndexConfigIndexArrayOutput() FieldIndexConfigIndexArrayOutput {
	return o
}

func (o FieldIndexConfigIndexArrayOutput) ToFieldIndexConfigIndexArrayOutputWithContext(ctx context.Context) FieldIndexConfigIndexArrayOutput {
	return o
}

func (o FieldIndexConfigIndexArrayOutput) Index(i pulumi.IntInput) FieldIndexConfigIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FieldIndexConfigIndex {
		return vs[0].([]FieldIndexConfigIndex)[vs[1].(int)]
	}).(FieldIndexConfigIndexOutput)
}

type FieldTtlConfig struct {
	// (Output)
	// The state of TTL (time-to-live) configuration for documents that have this Field set.
	State *string `pulumi:"state"`
}

// FieldTtlConfigInput is an input type that accepts FieldTtlConfigArgs and FieldTtlConfigOutput values.
// You can construct a concrete instance of `FieldTtlConfigInput` via:
//
//	FieldTtlConfigArgs{...}
type FieldTtlConfigInput interface {
	pulumi.Input

	ToFieldTtlConfigOutput() FieldTtlConfigOutput
	ToFieldTtlConfigOutputWithContext(context.Context) FieldTtlConfigOutput
}

type FieldTtlConfigArgs struct {
	// (Output)
	// The state of TTL (time-to-live) configuration for documents that have this Field set.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (FieldTtlConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldTtlConfig)(nil)).Elem()
}

func (i FieldTtlConfigArgs) ToFieldTtlConfigOutput() FieldTtlConfigOutput {
	return i.ToFieldTtlConfigOutputWithContext(context.Background())
}

func (i FieldTtlConfigArgs) ToFieldTtlConfigOutputWithContext(ctx context.Context) FieldTtlConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldTtlConfigOutput)
}

func (i FieldTtlConfigArgs) ToFieldTtlConfigPtrOutput() FieldTtlConfigPtrOutput {
	return i.ToFieldTtlConfigPtrOutputWithContext(context.Background())
}

func (i FieldTtlConfigArgs) ToFieldTtlConfigPtrOutputWithContext(ctx context.Context) FieldTtlConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldTtlConfigOutput).ToFieldTtlConfigPtrOutputWithContext(ctx)
}

// FieldTtlConfigPtrInput is an input type that accepts FieldTtlConfigArgs, FieldTtlConfigPtr and FieldTtlConfigPtrOutput values.
// You can construct a concrete instance of `FieldTtlConfigPtrInput` via:
//
//	        FieldTtlConfigArgs{...}
//
//	or:
//
//	        nil
type FieldTtlConfigPtrInput interface {
	pulumi.Input

	ToFieldTtlConfigPtrOutput() FieldTtlConfigPtrOutput
	ToFieldTtlConfigPtrOutputWithContext(context.Context) FieldTtlConfigPtrOutput
}

type fieldTtlConfigPtrType FieldTtlConfigArgs

func FieldTtlConfigPtr(v *FieldTtlConfigArgs) FieldTtlConfigPtrInput {
	return (*fieldTtlConfigPtrType)(v)
}

func (*fieldTtlConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FieldTtlConfig)(nil)).Elem()
}

func (i *fieldTtlConfigPtrType) ToFieldTtlConfigPtrOutput() FieldTtlConfigPtrOutput {
	return i.ToFieldTtlConfigPtrOutputWithContext(context.Background())
}

func (i *fieldTtlConfigPtrType) ToFieldTtlConfigPtrOutputWithContext(ctx context.Context) FieldTtlConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldTtlConfigPtrOutput)
}

type FieldTtlConfigOutput struct{ *pulumi.OutputState }

func (FieldTtlConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldTtlConfig)(nil)).Elem()
}

func (o FieldTtlConfigOutput) ToFieldTtlConfigOutput() FieldTtlConfigOutput {
	return o
}

func (o FieldTtlConfigOutput) ToFieldTtlConfigOutputWithContext(ctx context.Context) FieldTtlConfigOutput {
	return o
}

func (o FieldTtlConfigOutput) ToFieldTtlConfigPtrOutput() FieldTtlConfigPtrOutput {
	return o.ToFieldTtlConfigPtrOutputWithContext(context.Background())
}

func (o FieldTtlConfigOutput) ToFieldTtlConfigPtrOutputWithContext(ctx context.Context) FieldTtlConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FieldTtlConfig) *FieldTtlConfig {
		return &v
	}).(FieldTtlConfigPtrOutput)
}

// (Output)
// The state of TTL (time-to-live) configuration for documents that have this Field set.
func (o FieldTtlConfigOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldTtlConfig) *string { return v.State }).(pulumi.StringPtrOutput)
}

type FieldTtlConfigPtrOutput struct{ *pulumi.OutputState }

func (FieldTtlConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FieldTtlConfig)(nil)).Elem()
}

func (o FieldTtlConfigPtrOutput) ToFieldTtlConfigPtrOutput() FieldTtlConfigPtrOutput {
	return o
}

func (o FieldTtlConfigPtrOutput) ToFieldTtlConfigPtrOutputWithContext(ctx context.Context) FieldTtlConfigPtrOutput {
	return o
}

func (o FieldTtlConfigPtrOutput) Elem() FieldTtlConfigOutput {
	return o.ApplyT(func(v *FieldTtlConfig) FieldTtlConfig {
		if v != nil {
			return *v
		}
		var ret FieldTtlConfig
		return ret
	}).(FieldTtlConfigOutput)
}

// (Output)
// The state of TTL (time-to-live) configuration for documents that have this Field set.
func (o FieldTtlConfigPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FieldTtlConfig) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

type IndexField struct {
	// Indicates that this field supports operations on arrayValues. Only one of `order`, `arrayConfig`, and
	// `vectorConfig` can be specified.
	// Possible values are: `CONTAINS`.
	ArrayConfig *string `pulumi:"arrayConfig"`
	// Name of the field.
	FieldPath *string `pulumi:"fieldPath"`
	// Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=.
	// Only one of `order`, `arrayConfig`, and `vectorConfig` can be specified.
	// Possible values are: `ASCENDING`, `DESCENDING`.
	Order *string `pulumi:"order"`
	// Indicates that this field supports vector search operations. Only one of `order`, `arrayConfig`, and
	// `vectorConfig` can be specified. Vector Fields should come after the field path `__name__`.
	// Structure is documented below.
	VectorConfig *IndexFieldVectorConfig `pulumi:"vectorConfig"`
}

// IndexFieldInput is an input type that accepts IndexFieldArgs and IndexFieldOutput values.
// You can construct a concrete instance of `IndexFieldInput` via:
//
//	IndexFieldArgs{...}
type IndexFieldInput interface {
	pulumi.Input

	ToIndexFieldOutput() IndexFieldOutput
	ToIndexFieldOutputWithContext(context.Context) IndexFieldOutput
}

type IndexFieldArgs struct {
	// Indicates that this field supports operations on arrayValues. Only one of `order`, `arrayConfig`, and
	// `vectorConfig` can be specified.
	// Possible values are: `CONTAINS`.
	ArrayConfig pulumi.StringPtrInput `pulumi:"arrayConfig"`
	// Name of the field.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=.
	// Only one of `order`, `arrayConfig`, and `vectorConfig` can be specified.
	// Possible values are: `ASCENDING`, `DESCENDING`.
	Order pulumi.StringPtrInput `pulumi:"order"`
	// Indicates that this field supports vector search operations. Only one of `order`, `arrayConfig`, and
	// `vectorConfig` can be specified. Vector Fields should come after the field path `__name__`.
	// Structure is documented below.
	VectorConfig IndexFieldVectorConfigPtrInput `pulumi:"vectorConfig"`
}

func (IndexFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexField)(nil)).Elem()
}

func (i IndexFieldArgs) ToIndexFieldOutput() IndexFieldOutput {
	return i.ToIndexFieldOutputWithContext(context.Background())
}

func (i IndexFieldArgs) ToIndexFieldOutputWithContext(ctx context.Context) IndexFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldOutput)
}

// IndexFieldArrayInput is an input type that accepts IndexFieldArray and IndexFieldArrayOutput values.
// You can construct a concrete instance of `IndexFieldArrayInput` via:
//
//	IndexFieldArray{ IndexFieldArgs{...} }
type IndexFieldArrayInput interface {
	pulumi.Input

	ToIndexFieldArrayOutput() IndexFieldArrayOutput
	ToIndexFieldArrayOutputWithContext(context.Context) IndexFieldArrayOutput
}

type IndexFieldArray []IndexFieldInput

func (IndexFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexField)(nil)).Elem()
}

func (i IndexFieldArray) ToIndexFieldArrayOutput() IndexFieldArrayOutput {
	return i.ToIndexFieldArrayOutputWithContext(context.Background())
}

func (i IndexFieldArray) ToIndexFieldArrayOutputWithContext(ctx context.Context) IndexFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldArrayOutput)
}

type IndexFieldOutput struct{ *pulumi.OutputState }

func (IndexFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexField)(nil)).Elem()
}

func (o IndexFieldOutput) ToIndexFieldOutput() IndexFieldOutput {
	return o
}

func (o IndexFieldOutput) ToIndexFieldOutputWithContext(ctx context.Context) IndexFieldOutput {
	return o
}

// Indicates that this field supports operations on arrayValues. Only one of `order`, `arrayConfig`, and
// `vectorConfig` can be specified.
// Possible values are: `CONTAINS`.
func (o IndexFieldOutput) ArrayConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexField) *string { return v.ArrayConfig }).(pulumi.StringPtrOutput)
}

// Name of the field.
func (o IndexFieldOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexField) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=.
// Only one of `order`, `arrayConfig`, and `vectorConfig` can be specified.
// Possible values are: `ASCENDING`, `DESCENDING`.
func (o IndexFieldOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexField) *string { return v.Order }).(pulumi.StringPtrOutput)
}

// Indicates that this field supports vector search operations. Only one of `order`, `arrayConfig`, and
// `vectorConfig` can be specified. Vector Fields should come after the field path `__name__`.
// Structure is documented below.
func (o IndexFieldOutput) VectorConfig() IndexFieldVectorConfigPtrOutput {
	return o.ApplyT(func(v IndexField) *IndexFieldVectorConfig { return v.VectorConfig }).(IndexFieldVectorConfigPtrOutput)
}

type IndexFieldArrayOutput struct{ *pulumi.OutputState }

func (IndexFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexField)(nil)).Elem()
}

func (o IndexFieldArrayOutput) ToIndexFieldArrayOutput() IndexFieldArrayOutput {
	return o
}

func (o IndexFieldArrayOutput) ToIndexFieldArrayOutputWithContext(ctx context.Context) IndexFieldArrayOutput {
	return o
}

func (o IndexFieldArrayOutput) Index(i pulumi.IntInput) IndexFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexField {
		return vs[0].([]IndexField)[vs[1].(int)]
	}).(IndexFieldOutput)
}

type IndexFieldVectorConfig struct {
	// The resulting index will only include vectors of this dimension, and can be used for vector search
	// with the same dimension.
	Dimension *int `pulumi:"dimension"`
	// Indicates the vector index is a flat index.
	Flat *IndexFieldVectorConfigFlat `pulumi:"flat"`
}

// IndexFieldVectorConfigInput is an input type that accepts IndexFieldVectorConfigArgs and IndexFieldVectorConfigOutput values.
// You can construct a concrete instance of `IndexFieldVectorConfigInput` via:
//
//	IndexFieldVectorConfigArgs{...}
type IndexFieldVectorConfigInput interface {
	pulumi.Input

	ToIndexFieldVectorConfigOutput() IndexFieldVectorConfigOutput
	ToIndexFieldVectorConfigOutputWithContext(context.Context) IndexFieldVectorConfigOutput
}

type IndexFieldVectorConfigArgs struct {
	// The resulting index will only include vectors of this dimension, and can be used for vector search
	// with the same dimension.
	Dimension pulumi.IntPtrInput `pulumi:"dimension"`
	// Indicates the vector index is a flat index.
	Flat IndexFieldVectorConfigFlatPtrInput `pulumi:"flat"`
}

func (IndexFieldVectorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexFieldVectorConfig)(nil)).Elem()
}

func (i IndexFieldVectorConfigArgs) ToIndexFieldVectorConfigOutput() IndexFieldVectorConfigOutput {
	return i.ToIndexFieldVectorConfigOutputWithContext(context.Background())
}

func (i IndexFieldVectorConfigArgs) ToIndexFieldVectorConfigOutputWithContext(ctx context.Context) IndexFieldVectorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldVectorConfigOutput)
}

func (i IndexFieldVectorConfigArgs) ToIndexFieldVectorConfigPtrOutput() IndexFieldVectorConfigPtrOutput {
	return i.ToIndexFieldVectorConfigPtrOutputWithContext(context.Background())
}

func (i IndexFieldVectorConfigArgs) ToIndexFieldVectorConfigPtrOutputWithContext(ctx context.Context) IndexFieldVectorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldVectorConfigOutput).ToIndexFieldVectorConfigPtrOutputWithContext(ctx)
}

// IndexFieldVectorConfigPtrInput is an input type that accepts IndexFieldVectorConfigArgs, IndexFieldVectorConfigPtr and IndexFieldVectorConfigPtrOutput values.
// You can construct a concrete instance of `IndexFieldVectorConfigPtrInput` via:
//
//	        IndexFieldVectorConfigArgs{...}
//
//	or:
//
//	        nil
type IndexFieldVectorConfigPtrInput interface {
	pulumi.Input

	ToIndexFieldVectorConfigPtrOutput() IndexFieldVectorConfigPtrOutput
	ToIndexFieldVectorConfigPtrOutputWithContext(context.Context) IndexFieldVectorConfigPtrOutput
}

type indexFieldVectorConfigPtrType IndexFieldVectorConfigArgs

func IndexFieldVectorConfigPtr(v *IndexFieldVectorConfigArgs) IndexFieldVectorConfigPtrInput {
	return (*indexFieldVectorConfigPtrType)(v)
}

func (*indexFieldVectorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexFieldVectorConfig)(nil)).Elem()
}

func (i *indexFieldVectorConfigPtrType) ToIndexFieldVectorConfigPtrOutput() IndexFieldVectorConfigPtrOutput {
	return i.ToIndexFieldVectorConfigPtrOutputWithContext(context.Background())
}

func (i *indexFieldVectorConfigPtrType) ToIndexFieldVectorConfigPtrOutputWithContext(ctx context.Context) IndexFieldVectorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldVectorConfigPtrOutput)
}

type IndexFieldVectorConfigOutput struct{ *pulumi.OutputState }

func (IndexFieldVectorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexFieldVectorConfig)(nil)).Elem()
}

func (o IndexFieldVectorConfigOutput) ToIndexFieldVectorConfigOutput() IndexFieldVectorConfigOutput {
	return o
}

func (o IndexFieldVectorConfigOutput) ToIndexFieldVectorConfigOutputWithContext(ctx context.Context) IndexFieldVectorConfigOutput {
	return o
}

func (o IndexFieldVectorConfigOutput) ToIndexFieldVectorConfigPtrOutput() IndexFieldVectorConfigPtrOutput {
	return o.ToIndexFieldVectorConfigPtrOutputWithContext(context.Background())
}

func (o IndexFieldVectorConfigOutput) ToIndexFieldVectorConfigPtrOutputWithContext(ctx context.Context) IndexFieldVectorConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexFieldVectorConfig) *IndexFieldVectorConfig {
		return &v
	}).(IndexFieldVectorConfigPtrOutput)
}

// The resulting index will only include vectors of this dimension, and can be used for vector search
// with the same dimension.
func (o IndexFieldVectorConfigOutput) Dimension() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IndexFieldVectorConfig) *int { return v.Dimension }).(pulumi.IntPtrOutput)
}

// Indicates the vector index is a flat index.
func (o IndexFieldVectorConfigOutput) Flat() IndexFieldVectorConfigFlatPtrOutput {
	return o.ApplyT(func(v IndexFieldVectorConfig) *IndexFieldVectorConfigFlat { return v.Flat }).(IndexFieldVectorConfigFlatPtrOutput)
}

type IndexFieldVectorConfigPtrOutput struct{ *pulumi.OutputState }

func (IndexFieldVectorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexFieldVectorConfig)(nil)).Elem()
}

func (o IndexFieldVectorConfigPtrOutput) ToIndexFieldVectorConfigPtrOutput() IndexFieldVectorConfigPtrOutput {
	return o
}

func (o IndexFieldVectorConfigPtrOutput) ToIndexFieldVectorConfigPtrOutputWithContext(ctx context.Context) IndexFieldVectorConfigPtrOutput {
	return o
}

func (o IndexFieldVectorConfigPtrOutput) Elem() IndexFieldVectorConfigOutput {
	return o.ApplyT(func(v *IndexFieldVectorConfig) IndexFieldVectorConfig {
		if v != nil {
			return *v
		}
		var ret IndexFieldVectorConfig
		return ret
	}).(IndexFieldVectorConfigOutput)
}

// The resulting index will only include vectors of this dimension, and can be used for vector search
// with the same dimension.
func (o IndexFieldVectorConfigPtrOutput) Dimension() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IndexFieldVectorConfig) *int {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(pulumi.IntPtrOutput)
}

// Indicates the vector index is a flat index.
func (o IndexFieldVectorConfigPtrOutput) Flat() IndexFieldVectorConfigFlatPtrOutput {
	return o.ApplyT(func(v *IndexFieldVectorConfig) *IndexFieldVectorConfigFlat {
		if v == nil {
			return nil
		}
		return v.Flat
	}).(IndexFieldVectorConfigFlatPtrOutput)
}

type IndexFieldVectorConfigFlat struct {
}

// IndexFieldVectorConfigFlatInput is an input type that accepts IndexFieldVectorConfigFlatArgs and IndexFieldVectorConfigFlatOutput values.
// You can construct a concrete instance of `IndexFieldVectorConfigFlatInput` via:
//
//	IndexFieldVectorConfigFlatArgs{...}
type IndexFieldVectorConfigFlatInput interface {
	pulumi.Input

	ToIndexFieldVectorConfigFlatOutput() IndexFieldVectorConfigFlatOutput
	ToIndexFieldVectorConfigFlatOutputWithContext(context.Context) IndexFieldVectorConfigFlatOutput
}

type IndexFieldVectorConfigFlatArgs struct {
}

func (IndexFieldVectorConfigFlatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexFieldVectorConfigFlat)(nil)).Elem()
}

func (i IndexFieldVectorConfigFlatArgs) ToIndexFieldVectorConfigFlatOutput() IndexFieldVectorConfigFlatOutput {
	return i.ToIndexFieldVectorConfigFlatOutputWithContext(context.Background())
}

func (i IndexFieldVectorConfigFlatArgs) ToIndexFieldVectorConfigFlatOutputWithContext(ctx context.Context) IndexFieldVectorConfigFlatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldVectorConfigFlatOutput)
}

func (i IndexFieldVectorConfigFlatArgs) ToIndexFieldVectorConfigFlatPtrOutput() IndexFieldVectorConfigFlatPtrOutput {
	return i.ToIndexFieldVectorConfigFlatPtrOutputWithContext(context.Background())
}

func (i IndexFieldVectorConfigFlatArgs) ToIndexFieldVectorConfigFlatPtrOutputWithContext(ctx context.Context) IndexFieldVectorConfigFlatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldVectorConfigFlatOutput).ToIndexFieldVectorConfigFlatPtrOutputWithContext(ctx)
}

// IndexFieldVectorConfigFlatPtrInput is an input type that accepts IndexFieldVectorConfigFlatArgs, IndexFieldVectorConfigFlatPtr and IndexFieldVectorConfigFlatPtrOutput values.
// You can construct a concrete instance of `IndexFieldVectorConfigFlatPtrInput` via:
//
//	        IndexFieldVectorConfigFlatArgs{...}
//
//	or:
//
//	        nil
type IndexFieldVectorConfigFlatPtrInput interface {
	pulumi.Input

	ToIndexFieldVectorConfigFlatPtrOutput() IndexFieldVectorConfigFlatPtrOutput
	ToIndexFieldVectorConfigFlatPtrOutputWithContext(context.Context) IndexFieldVectorConfigFlatPtrOutput
}

type indexFieldVectorConfigFlatPtrType IndexFieldVectorConfigFlatArgs

func IndexFieldVectorConfigFlatPtr(v *IndexFieldVectorConfigFlatArgs) IndexFieldVectorConfigFlatPtrInput {
	return (*indexFieldVectorConfigFlatPtrType)(v)
}

func (*indexFieldVectorConfigFlatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexFieldVectorConfigFlat)(nil)).Elem()
}

func (i *indexFieldVectorConfigFlatPtrType) ToIndexFieldVectorConfigFlatPtrOutput() IndexFieldVectorConfigFlatPtrOutput {
	return i.ToIndexFieldVectorConfigFlatPtrOutputWithContext(context.Background())
}

func (i *indexFieldVectorConfigFlatPtrType) ToIndexFieldVectorConfigFlatPtrOutputWithContext(ctx context.Context) IndexFieldVectorConfigFlatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldVectorConfigFlatPtrOutput)
}

type IndexFieldVectorConfigFlatOutput struct{ *pulumi.OutputState }

func (IndexFieldVectorConfigFlatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexFieldVectorConfigFlat)(nil)).Elem()
}

func (o IndexFieldVectorConfigFlatOutput) ToIndexFieldVectorConfigFlatOutput() IndexFieldVectorConfigFlatOutput {
	return o
}

func (o IndexFieldVectorConfigFlatOutput) ToIndexFieldVectorConfigFlatOutputWithContext(ctx context.Context) IndexFieldVectorConfigFlatOutput {
	return o
}

func (o IndexFieldVectorConfigFlatOutput) ToIndexFieldVectorConfigFlatPtrOutput() IndexFieldVectorConfigFlatPtrOutput {
	return o.ToIndexFieldVectorConfigFlatPtrOutputWithContext(context.Background())
}

func (o IndexFieldVectorConfigFlatOutput) ToIndexFieldVectorConfigFlatPtrOutputWithContext(ctx context.Context) IndexFieldVectorConfigFlatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexFieldVectorConfigFlat) *IndexFieldVectorConfigFlat {
		return &v
	}).(IndexFieldVectorConfigFlatPtrOutput)
}

type IndexFieldVectorConfigFlatPtrOutput struct{ *pulumi.OutputState }

func (IndexFieldVectorConfigFlatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexFieldVectorConfigFlat)(nil)).Elem()
}

func (o IndexFieldVectorConfigFlatPtrOutput) ToIndexFieldVectorConfigFlatPtrOutput() IndexFieldVectorConfigFlatPtrOutput {
	return o
}

func (o IndexFieldVectorConfigFlatPtrOutput) ToIndexFieldVectorConfigFlatPtrOutputWithContext(ctx context.Context) IndexFieldVectorConfigFlatPtrOutput {
	return o
}

func (o IndexFieldVectorConfigFlatPtrOutput) Elem() IndexFieldVectorConfigFlatOutput {
	return o.ApplyT(func(v *IndexFieldVectorConfigFlat) IndexFieldVectorConfigFlat {
		if v != nil {
			return *v
		}
		var ret IndexFieldVectorConfigFlat
		return ret
	}).(IndexFieldVectorConfigFlatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleDailyRecurrenceInput)(nil)).Elem(), BackupScheduleDailyRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleDailyRecurrencePtrInput)(nil)).Elem(), BackupScheduleDailyRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleWeeklyRecurrenceInput)(nil)).Elem(), BackupScheduleWeeklyRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleWeeklyRecurrencePtrInput)(nil)).Elem(), BackupScheduleWeeklyRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseCmekConfigInput)(nil)).Elem(), DatabaseCmekConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseCmekConfigPtrInput)(nil)).Elem(), DatabaseCmekConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldIndexConfigInput)(nil)).Elem(), FieldIndexConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldIndexConfigPtrInput)(nil)).Elem(), FieldIndexConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldIndexConfigIndexInput)(nil)).Elem(), FieldIndexConfigIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldIndexConfigIndexArrayInput)(nil)).Elem(), FieldIndexConfigIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldTtlConfigInput)(nil)).Elem(), FieldTtlConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldTtlConfigPtrInput)(nil)).Elem(), FieldTtlConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexFieldInput)(nil)).Elem(), IndexFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexFieldArrayInput)(nil)).Elem(), IndexFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexFieldVectorConfigInput)(nil)).Elem(), IndexFieldVectorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexFieldVectorConfigPtrInput)(nil)).Elem(), IndexFieldVectorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexFieldVectorConfigFlatInput)(nil)).Elem(), IndexFieldVectorConfigFlatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexFieldVectorConfigFlatPtrInput)(nil)).Elem(), IndexFieldVectorConfigFlatArgs{})
	pulumi.RegisterOutputType(BackupScheduleDailyRecurrenceOutput{})
	pulumi.RegisterOutputType(BackupScheduleDailyRecurrencePtrOutput{})
	pulumi.RegisterOutputType(BackupScheduleWeeklyRecurrenceOutput{})
	pulumi.RegisterOutputType(BackupScheduleWeeklyRecurrencePtrOutput{})
	pulumi.RegisterOutputType(DatabaseCmekConfigOutput{})
	pulumi.RegisterOutputType(DatabaseCmekConfigPtrOutput{})
	pulumi.RegisterOutputType(FieldIndexConfigOutput{})
	pulumi.RegisterOutputType(FieldIndexConfigPtrOutput{})
	pulumi.RegisterOutputType(FieldIndexConfigIndexOutput{})
	pulumi.RegisterOutputType(FieldIndexConfigIndexArrayOutput{})
	pulumi.RegisterOutputType(FieldTtlConfigOutput{})
	pulumi.RegisterOutputType(FieldTtlConfigPtrOutput{})
	pulumi.RegisterOutputType(IndexFieldOutput{})
	pulumi.RegisterOutputType(IndexFieldArrayOutput{})
	pulumi.RegisterOutputType(IndexFieldVectorConfigOutput{})
	pulumi.RegisterOutputType(IndexFieldVectorConfigPtrOutput{})
	pulumi.RegisterOutputType(IndexFieldVectorConfigFlatOutput{})
	pulumi.RegisterOutputType(IndexFieldVectorConfigFlatPtrOutput{})
}
