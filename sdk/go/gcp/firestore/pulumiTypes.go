// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package firestore

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type IndexField struct {
	ArrayConfig *string `pulumi:"arrayConfig"`
	FieldPath   *string `pulumi:"fieldPath"`
	Order       *string `pulumi:"order"`
}

// IndexFieldInput is an input type that accepts IndexFieldArgs and IndexFieldOutput values.
// You can construct a concrete instance of `IndexFieldInput` via:
//
// 		 IndexFieldArgs{...}
//
type IndexFieldInput interface {
	pulumi.Input

	ToIndexFieldOutput() IndexFieldOutput
	ToIndexFieldOutputWithContext(context.Context) IndexFieldOutput
}

type IndexFieldArgs struct {
	ArrayConfig pulumi.StringPtrInput `pulumi:"arrayConfig"`
	FieldPath   pulumi.StringPtrInput `pulumi:"fieldPath"`
	Order       pulumi.StringPtrInput `pulumi:"order"`
}

func (IndexFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexField)(nil)).Elem()
}

func (i IndexFieldArgs) ToIndexFieldOutput() IndexFieldOutput {
	return i.ToIndexFieldOutputWithContext(context.Background())
}

func (i IndexFieldArgs) ToIndexFieldOutputWithContext(ctx context.Context) IndexFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldOutput)
}

// IndexFieldArrayInput is an input type that accepts IndexFieldArray and IndexFieldArrayOutput values.
// You can construct a concrete instance of `IndexFieldArrayInput` via:
//
// 		 IndexFieldArray{ IndexFieldArgs{...} }
//
type IndexFieldArrayInput interface {
	pulumi.Input

	ToIndexFieldArrayOutput() IndexFieldArrayOutput
	ToIndexFieldArrayOutputWithContext(context.Context) IndexFieldArrayOutput
}

type IndexFieldArray []IndexFieldInput

func (IndexFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexField)(nil)).Elem()
}

func (i IndexFieldArray) ToIndexFieldArrayOutput() IndexFieldArrayOutput {
	return i.ToIndexFieldArrayOutputWithContext(context.Background())
}

func (i IndexFieldArray) ToIndexFieldArrayOutputWithContext(ctx context.Context) IndexFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexFieldArrayOutput)
}

type IndexFieldOutput struct{ *pulumi.OutputState }

func (IndexFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexField)(nil)).Elem()
}

func (o IndexFieldOutput) ToIndexFieldOutput() IndexFieldOutput {
	return o
}

func (o IndexFieldOutput) ToIndexFieldOutputWithContext(ctx context.Context) IndexFieldOutput {
	return o
}

func (o IndexFieldOutput) ArrayConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexField) *string { return v.ArrayConfig }).(pulumi.StringPtrOutput)
}

func (o IndexFieldOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexField) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

func (o IndexFieldOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexField) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type IndexFieldArrayOutput struct{ *pulumi.OutputState }

func (IndexFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexField)(nil)).Elem()
}

func (o IndexFieldArrayOutput) ToIndexFieldArrayOutput() IndexFieldArrayOutput {
	return o
}

func (o IndexFieldArrayOutput) ToIndexFieldArrayOutputWithContext(ctx context.Context) IndexFieldArrayOutput {
	return o
}

func (o IndexFieldArrayOutput) Index(i pulumi.IntInput) IndexFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexField {
		return vs[0].([]IndexField)[vs[1].(int)]
	}).(IndexFieldOutput)
}

func init() {
	pulumi.RegisterOutputType(IndexFieldOutput{})
	pulumi.RegisterOutputType(IndexFieldArrayOutput{})
}
