// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firestore

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Reads a document from a Firestore database.
// See [the official documentation](https://cloud.google.com/firestore/native/docs/)
// and
// [API](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents/get/).
//
// ## Example Usage
//
// Retrieve a document from the Firestore database.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/firestore"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firestore.NewDocument(ctx, "mydoc", &firestore.DocumentArgs{
//				Project:    pulumi.Any(database.Project),
//				Database:   pulumi.Any(database.Name),
//				Collection: pulumi.String("somenewcollection"),
//				DocumentId: pulumi.String("my-doc-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDocument(ctx *pulumi.Context, args *LookupDocumentArgs, opts ...pulumi.InvokeOption) (*LookupDocumentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDocumentResult
	err := ctx.Invoke("gcp:firestore/getDocument:getDocument", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDocument.
type LookupDocumentArgs struct {
	// The name of the collection of documents.
	Collection string `pulumi:"collection"`
	// The name of the Firestore database.
	Database string `pulumi:"database"`
	// The id of the document to get.
	DocumentId string `pulumi:"documentId"`
	// The project in which the database resides.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getDocument.
type LookupDocumentResult struct {
	Collection string `pulumi:"collection"`
	CreateTime string `pulumi:"createTime"`
	Database   string `pulumi:"database"`
	DocumentId string `pulumi:"documentId"`
	Fields     string `pulumi:"fields"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	Name       string  `pulumi:"name"`
	Path       string  `pulumi:"path"`
	Project    *string `pulumi:"project"`
	UpdateTime string  `pulumi:"updateTime"`
}

func LookupDocumentOutput(ctx *pulumi.Context, args LookupDocumentOutputArgs, opts ...pulumi.InvokeOption) LookupDocumentResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDocumentResultOutput, error) {
			args := v.(LookupDocumentArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:firestore/getDocument:getDocument", args, LookupDocumentResultOutput{}, options).(LookupDocumentResultOutput), nil
		}).(LookupDocumentResultOutput)
}

// A collection of arguments for invoking getDocument.
type LookupDocumentOutputArgs struct {
	// The name of the collection of documents.
	Collection pulumi.StringInput `pulumi:"collection"`
	// The name of the Firestore database.
	Database pulumi.StringInput `pulumi:"database"`
	// The id of the document to get.
	DocumentId pulumi.StringInput `pulumi:"documentId"`
	// The project in which the database resides.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDocumentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentArgs)(nil)).Elem()
}

// A collection of values returned by getDocument.
type LookupDocumentResultOutput struct{ *pulumi.OutputState }

func (LookupDocumentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentResult)(nil)).Elem()
}

func (o LookupDocumentResultOutput) ToLookupDocumentResultOutput() LookupDocumentResultOutput {
	return o
}

func (o LookupDocumentResultOutput) ToLookupDocumentResultOutputWithContext(ctx context.Context) LookupDocumentResultOutput {
	return o
}

func (o LookupDocumentResultOutput) Collection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Collection }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Database }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) DocumentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.DocumentId }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) Fields() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Fields }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDocumentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Path }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDocumentResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupDocumentResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDocumentResultOutput{})
}
