// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firestore

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a single field in the database.
// Fields are grouped by their "Collection Group", which represent all collections
// in the database with the same id.
//
// To get more information about Field, see:
//
// * [API documentation](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.collectionGroups.fields)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/firestore/docs/query-data/indexing)
//
// > **Warning:** This resource creates a Firestore Single Field override on a project that
//
//	already has a Firestore database. If you haven't already created it, you may
//
// create a `firestore.Database` resource with `locationId` set to your
// chosen location.
//
// ## Example Usage
// ### Firestore Field Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/firestore"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firestore.NewField(ctx, "basic", &firestore.FieldArgs{
//				Collection: pulumi.String("chatrooms_%{random_suffix}"),
//				Database:   pulumi.String("(default)"),
//				Field:      pulumi.String("basic"),
//				IndexConfig: &firestore.FieldIndexConfigArgs{
//					Indexes: firestore.FieldIndexConfigIndexArray{
//						&firestore.FieldIndexConfigIndexArgs{
//							Order:      pulumi.String("ASCENDING"),
//							QueryScope: pulumi.String("COLLECTION_GROUP"),
//						},
//						&firestore.FieldIndexConfigIndexArgs{
//							ArrayConfig: pulumi.String("CONTAINS"),
//						},
//					},
//				},
//				Project:   pulumi.String("my-project-name"),
//				TtlConfig: nil,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firestore Field Timestamp
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/firestore"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firestore.NewField(ctx, "timestamp", &firestore.FieldArgs{
//				Collection:  pulumi.String("chatrooms_%{random_suffix}"),
//				Field:       pulumi.String("timestamp"),
//				IndexConfig: nil,
//				Project:     pulumi.String("my-project-name"),
//				TtlConfig:   nil,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firestore Field Match Override
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/firestore"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firestore.NewField(ctx, "matchOverride", &firestore.FieldArgs{
//				Collection: pulumi.String("chatrooms_%{random_suffix}"),
//				Field:      pulumi.String("field_with_same_configuration_as_ancestor"),
//				IndexConfig: &firestore.FieldIndexConfigArgs{
//					Indexes: firestore.FieldIndexConfigIndexArray{
//						&firestore.FieldIndexConfigIndexArgs{
//							Order: pulumi.String("ASCENDING"),
//						},
//						&firestore.FieldIndexConfigIndexArgs{
//							Order: pulumi.String("DESCENDING"),
//						},
//						&firestore.FieldIndexConfigIndexArgs{
//							ArrayConfig: pulumi.String("CONTAINS"),
//						},
//					},
//				},
//				Project: pulumi.String("my-project-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Field can be imported using any of these accepted formats:
//
// ```sh
//
//	$ pulumi import gcp:firestore/field:Field default {{name}}
//
// ```
type Field struct {
	pulumi.CustomResourceState

	// The id of the collection group to configure.
	Collection pulumi.StringOutput `pulumi:"collection"`
	// The Firestore database id. Defaults to `"(default)"`.
	Database pulumi.StringPtrOutput `pulumi:"database"`
	// The id of the field to configure.
	//
	// ***
	Field pulumi.StringOutput `pulumi:"field"`
	// The single field index configuration for this field.
	// Creating an index configuration for this field will override any inherited configuration with the
	// indexes specified. Configuring the index configuration with an empty block disables all indexes on
	// the field.
	// Structure is documented below.
	IndexConfig FieldIndexConfigPtrOutput `pulumi:"indexConfig"`
	// The name of this field. Format:
	// `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// If set, this field is configured for TTL deletion.
	// Structure is documented below.
	TtlConfig FieldTtlConfigPtrOutput `pulumi:"ttlConfig"`
}

// NewField registers a new resource with the given unique name, arguments, and options.
func NewField(ctx *pulumi.Context,
	name string, args *FieldArgs, opts ...pulumi.ResourceOption) (*Field, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Collection == nil {
		return nil, errors.New("invalid value for required argument 'Collection'")
	}
	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Field
	err := ctx.RegisterResource("gcp:firestore/field:Field", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetField gets an existing Field resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetField(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FieldState, opts ...pulumi.ResourceOption) (*Field, error) {
	var resource Field
	err := ctx.ReadResource("gcp:firestore/field:Field", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Field resources.
type fieldState struct {
	// The id of the collection group to configure.
	Collection *string `pulumi:"collection"`
	// The Firestore database id. Defaults to `"(default)"`.
	Database *string `pulumi:"database"`
	// The id of the field to configure.
	//
	// ***
	Field *string `pulumi:"field"`
	// The single field index configuration for this field.
	// Creating an index configuration for this field will override any inherited configuration with the
	// indexes specified. Configuring the index configuration with an empty block disables all indexes on
	// the field.
	// Structure is documented below.
	IndexConfig *FieldIndexConfig `pulumi:"indexConfig"`
	// The name of this field. Format:
	// `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// If set, this field is configured for TTL deletion.
	// Structure is documented below.
	TtlConfig *FieldTtlConfig `pulumi:"ttlConfig"`
}

type FieldState struct {
	// The id of the collection group to configure.
	Collection pulumi.StringPtrInput
	// The Firestore database id. Defaults to `"(default)"`.
	Database pulumi.StringPtrInput
	// The id of the field to configure.
	//
	// ***
	Field pulumi.StringPtrInput
	// The single field index configuration for this field.
	// Creating an index configuration for this field will override any inherited configuration with the
	// indexes specified. Configuring the index configuration with an empty block disables all indexes on
	// the field.
	// Structure is documented below.
	IndexConfig FieldIndexConfigPtrInput
	// The name of this field. Format:
	// `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// If set, this field is configured for TTL deletion.
	// Structure is documented below.
	TtlConfig FieldTtlConfigPtrInput
}

func (FieldState) ElementType() reflect.Type {
	return reflect.TypeOf((*fieldState)(nil)).Elem()
}

type fieldArgs struct {
	// The id of the collection group to configure.
	Collection string `pulumi:"collection"`
	// The Firestore database id. Defaults to `"(default)"`.
	Database *string `pulumi:"database"`
	// The id of the field to configure.
	//
	// ***
	Field string `pulumi:"field"`
	// The single field index configuration for this field.
	// Creating an index configuration for this field will override any inherited configuration with the
	// indexes specified. Configuring the index configuration with an empty block disables all indexes on
	// the field.
	// Structure is documented below.
	IndexConfig *FieldIndexConfig `pulumi:"indexConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// If set, this field is configured for TTL deletion.
	// Structure is documented below.
	TtlConfig *FieldTtlConfig `pulumi:"ttlConfig"`
}

// The set of arguments for constructing a Field resource.
type FieldArgs struct {
	// The id of the collection group to configure.
	Collection pulumi.StringInput
	// The Firestore database id. Defaults to `"(default)"`.
	Database pulumi.StringPtrInput
	// The id of the field to configure.
	//
	// ***
	Field pulumi.StringInput
	// The single field index configuration for this field.
	// Creating an index configuration for this field will override any inherited configuration with the
	// indexes specified. Configuring the index configuration with an empty block disables all indexes on
	// the field.
	// Structure is documented below.
	IndexConfig FieldIndexConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// If set, this field is configured for TTL deletion.
	// Structure is documented below.
	TtlConfig FieldTtlConfigPtrInput
}

func (FieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fieldArgs)(nil)).Elem()
}

type FieldInput interface {
	pulumi.Input

	ToFieldOutput() FieldOutput
	ToFieldOutputWithContext(ctx context.Context) FieldOutput
}

func (*Field) ElementType() reflect.Type {
	return reflect.TypeOf((**Field)(nil)).Elem()
}

func (i *Field) ToFieldOutput() FieldOutput {
	return i.ToFieldOutputWithContext(context.Background())
}

func (i *Field) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldOutput)
}

// FieldArrayInput is an input type that accepts FieldArray and FieldArrayOutput values.
// You can construct a concrete instance of `FieldArrayInput` via:
//
//	FieldArray{ FieldArgs{...} }
type FieldArrayInput interface {
	pulumi.Input

	ToFieldArrayOutput() FieldArrayOutput
	ToFieldArrayOutputWithContext(context.Context) FieldArrayOutput
}

type FieldArray []FieldInput

func (FieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Field)(nil)).Elem()
}

func (i FieldArray) ToFieldArrayOutput() FieldArrayOutput {
	return i.ToFieldArrayOutputWithContext(context.Background())
}

func (i FieldArray) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldArrayOutput)
}

// FieldMapInput is an input type that accepts FieldMap and FieldMapOutput values.
// You can construct a concrete instance of `FieldMapInput` via:
//
//	FieldMap{ "key": FieldArgs{...} }
type FieldMapInput interface {
	pulumi.Input

	ToFieldMapOutput() FieldMapOutput
	ToFieldMapOutputWithContext(context.Context) FieldMapOutput
}

type FieldMap map[string]FieldInput

func (FieldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Field)(nil)).Elem()
}

func (i FieldMap) ToFieldMapOutput() FieldMapOutput {
	return i.ToFieldMapOutputWithContext(context.Background())
}

func (i FieldMap) ToFieldMapOutputWithContext(ctx context.Context) FieldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMapOutput)
}

type FieldOutput struct{ *pulumi.OutputState }

func (FieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Field)(nil)).Elem()
}

func (o FieldOutput) ToFieldOutput() FieldOutput {
	return o
}

func (o FieldOutput) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return o
}

// The id of the collection group to configure.
func (o FieldOutput) Collection() pulumi.StringOutput {
	return o.ApplyT(func(v *Field) pulumi.StringOutput { return v.Collection }).(pulumi.StringOutput)
}

// The Firestore database id. Defaults to `"(default)"`.
func (o FieldOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Field) pulumi.StringPtrOutput { return v.Database }).(pulumi.StringPtrOutput)
}

// The id of the field to configure.
//
// ***
func (o FieldOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v *Field) pulumi.StringOutput { return v.Field }).(pulumi.StringOutput)
}

// The single field index configuration for this field.
// Creating an index configuration for this field will override any inherited configuration with the
// indexes specified. Configuring the index configuration with an empty block disables all indexes on
// the field.
// Structure is documented below.
func (o FieldOutput) IndexConfig() FieldIndexConfigPtrOutput {
	return o.ApplyT(func(v *Field) FieldIndexConfigPtrOutput { return v.IndexConfig }).(FieldIndexConfigPtrOutput)
}

// The name of this field. Format:
// `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
func (o FieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Field) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o FieldOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Field) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If set, this field is configured for TTL deletion.
// Structure is documented below.
func (o FieldOutput) TtlConfig() FieldTtlConfigPtrOutput {
	return o.ApplyT(func(v *Field) FieldTtlConfigPtrOutput { return v.TtlConfig }).(FieldTtlConfigPtrOutput)
}

type FieldArrayOutput struct{ *pulumi.OutputState }

func (FieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Field)(nil)).Elem()
}

func (o FieldArrayOutput) ToFieldArrayOutput() FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) Index(i pulumi.IntInput) FieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Field {
		return vs[0].([]*Field)[vs[1].(int)]
	}).(FieldOutput)
}

type FieldMapOutput struct{ *pulumi.OutputState }

func (FieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Field)(nil)).Elem()
}

func (o FieldMapOutput) ToFieldMapOutput() FieldMapOutput {
	return o
}

func (o FieldMapOutput) ToFieldMapOutputWithContext(ctx context.Context) FieldMapOutput {
	return o
}

func (o FieldMapOutput) MapIndex(k pulumi.StringInput) FieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Field {
		return vs[0].(map[string]*Field)[vs[1].(string)]
	}).(FieldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FieldInput)(nil)).Elem(), &Field{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldArrayInput)(nil)).Elem(), FieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldMapInput)(nil)).Elem(), FieldMap{})
	pulumi.RegisterOutputType(FieldOutput{})
	pulumi.RegisterOutputType(FieldArrayOutput{})
	pulumi.RegisterOutputType(FieldMapOutput{})
}
