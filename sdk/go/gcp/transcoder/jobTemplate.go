// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transcoder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Transcoding Job Template Resource
//
// To get more information about JobTemplate, see:
//
// * [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobTemplates)
// * How-to Guides
//   - [Transcoder](https://cloud.google.com/transcoder/docs/)
//
// ## Example Usage
//
// ### Transcoder Job Template Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
//				JobTemplateId: pulumi.String("example-job-template"),
//				Location:      pulumi.String("us-central1"),
//				Config: &transcoder.JobTemplateConfigArgs{
//					Inputs: transcoder.JobTemplateConfigInputTypeArray{
//						&transcoder.JobTemplateConfigInputTypeArgs{
//							Key: pulumi.String("input0"),
//						},
//					},
//					EditLists: transcoder.JobTemplateConfigEditListArray{
//						&transcoder.JobTemplateConfigEditListArgs{
//							Key: pulumi.String("atom0"),
//							Inputs: pulumi.StringArray{
//								pulumi.String("input0"),
//							},
//							StartTimeOffset: pulumi.String("0s"),
//						},
//					},
//					AdBreaks: transcoder.JobTemplateConfigAdBreakArray{
//						&transcoder.JobTemplateConfigAdBreakArgs{
//							StartTimeOffset: pulumi.String("3.500s"),
//						},
//					},
//					ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream0"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(640),
//									HeightPixels:    pulumi.Int(360),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(550000),
//									VbvFullnessBits: pulumi.Int(495000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream1"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(1280),
//									HeightPixels:    pulumi.Int(720),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(2500000),
//									VbvFullnessBits: pulumi.Int(2250000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("audio-stream0"),
//							AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								BitrateBps:   pulumi.Int(64000),
//								ChannelCount: pulumi.Int(2),
//								ChannelLayouts: pulumi.StringArray{
//									pulumi.String("fl"),
//									pulumi.String("fr"),
//								},
//								SampleRateHertz: pulumi.Int(48000),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("sd"),
//							FileName:  pulumi.String("sd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("hd"),
//							FileName:  pulumi.String("hd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Transcoder Job Template Overlays
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
//				JobTemplateId: pulumi.String("example-job-template"),
//				Location:      pulumi.String("us-central1"),
//				Config: &transcoder.JobTemplateConfigArgs{
//					Inputs: transcoder.JobTemplateConfigInputTypeArray{
//						&transcoder.JobTemplateConfigInputTypeArgs{
//							Key: pulumi.String("input0"),
//							Uri: pulumi.String("gs://example/example.mp4"),
//						},
//					},
//					Output: &transcoder.JobTemplateConfigOutputTypeArgs{
//						Uri: pulumi.String("gs://example/outputs/"),
//					},
//					EditLists: transcoder.JobTemplateConfigEditListArray{
//						&transcoder.JobTemplateConfigEditListArgs{
//							Key: pulumi.String("atom0"),
//							Inputs: pulumi.StringArray{
//								pulumi.String("input0"),
//							},
//							StartTimeOffset: pulumi.String("0s"),
//						},
//					},
//					AdBreaks: transcoder.JobTemplateConfigAdBreakArray{
//						&transcoder.JobTemplateConfigAdBreakArgs{
//							StartTimeOffset: pulumi.String("3.500s"),
//						},
//					},
//					Overlays: transcoder.JobTemplateConfigOverlayArray{
//						&transcoder.JobTemplateConfigOverlayArgs{
//							Animations: transcoder.JobTemplateConfigOverlayAnimationArray{
//								&transcoder.JobTemplateConfigOverlayAnimationArgs{
//									AnimationFade: &transcoder.JobTemplateConfigOverlayAnimationAnimationFadeArgs{
//										FadeType:        pulumi.String("FADE_IN"),
//										StartTimeOffset: pulumi.String("1.500s"),
//										EndTimeOffset:   pulumi.String("3.500s"),
//										Xy: &transcoder.JobTemplateConfigOverlayAnimationAnimationFadeXyArgs{
//											X: pulumi.Float64(1),
//											Y: pulumi.Float64(0.5),
//										},
//									},
//								},
//							},
//							Image: &transcoder.JobTemplateConfigOverlayImageArgs{
//								Uri: pulumi.String("gs://example/overlay.png"),
//							},
//						},
//					},
//					ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream0"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(640),
//									HeightPixels:    pulumi.Int(360),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(550000),
//									VbvFullnessBits: pulumi.Int(495000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream1"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(1280),
//									HeightPixels:    pulumi.Int(720),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(2500000),
//									VbvFullnessBits: pulumi.Int(2250000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("audio-stream0"),
//							AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								BitrateBps:   pulumi.Int(64000),
//								ChannelCount: pulumi.Int(2),
//								ChannelLayouts: pulumi.StringArray{
//									pulumi.String("fl"),
//									pulumi.String("fr"),
//								},
//								SampleRateHertz: pulumi.Int(48000),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("sd"),
//							FileName:  pulumi.String("sd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("hd"),
//							FileName:  pulumi.String("hd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Transcoder Job Template Encryptions
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			encryptionKey, err := secretmanager.NewSecret(ctx, "encryption_key", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("transcoder-encryption-key"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			encryptionKeySecretVersion, err := secretmanager.NewSecretVersion(ctx, "encryption_key", &secretmanager.SecretVersionArgs{
//				Secret:     encryptionKey.Name,
//				SecretData: pulumi.String("4A67F2C1B8E93A4F6D3E7890A1BC23DF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
//				JobTemplateId: pulumi.String("example-job-template"),
//				Location:      pulumi.String("us-central1"),
//				Config: &transcoder.JobTemplateConfigArgs{
//					ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("es_video"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									Profile:      pulumi.String("main"),
//									HeightPixels: pulumi.Int(600),
//									WidthPixels:  pulumi.Int(800),
//									BitrateBps:   pulumi.Int(1000000),
//									FrameRate:    pulumi.Int(60),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("es_audio"),
//							AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								ChannelCount: pulumi.Int(2),
//								BitrateBps:   pulumi.Int(160000),
//							},
//						},
//					},
//					Encryptions: transcoder.JobTemplateConfigEncryptionArray{
//						&transcoder.JobTemplateConfigEncryptionArgs{
//							Id: pulumi.String("aes-128"),
//							SecretManagerKeySource: &transcoder.JobTemplateConfigEncryptionSecretManagerKeySourceArgs{
//								SecretVersion: encryptionKeySecretVersion.Name,
//							},
//							DrmSystems: &transcoder.JobTemplateConfigEncryptionDrmSystemsArgs{
//								Clearkey: &transcoder.JobTemplateConfigEncryptionDrmSystemsClearkeyArgs{},
//							},
//							Aes128: &transcoder.JobTemplateConfigEncryptionAes128Args{},
//						},
//						&transcoder.JobTemplateConfigEncryptionArgs{
//							Id: pulumi.String("cenc"),
//							SecretManagerKeySource: &transcoder.JobTemplateConfigEncryptionSecretManagerKeySourceArgs{
//								SecretVersion: encryptionKeySecretVersion.Name,
//							},
//							DrmSystems: &transcoder.JobTemplateConfigEncryptionDrmSystemsArgs{
//								Widevine: &transcoder.JobTemplateConfigEncryptionDrmSystemsWidevineArgs{},
//							},
//							MpegCenc: &transcoder.JobTemplateConfigEncryptionMpegCencArgs{
//								Scheme: pulumi.String("cenc"),
//							},
//						},
//						&transcoder.JobTemplateConfigEncryptionArgs{
//							Id: pulumi.String("cbcs"),
//							SecretManagerKeySource: &transcoder.JobTemplateConfigEncryptionSecretManagerKeySourceArgs{
//								SecretVersion: encryptionKeySecretVersion.Name,
//							},
//							DrmSystems: &transcoder.JobTemplateConfigEncryptionDrmSystemsArgs{
//								Widevine: &transcoder.JobTemplateConfigEncryptionDrmSystemsWidevineArgs{},
//							},
//							MpegCenc: &transcoder.JobTemplateConfigEncryptionMpegCencArgs{
//								Scheme: pulumi.String("cbcs"),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("ts_aes128"),
//							Container: pulumi.String("ts"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_video"),
//								pulumi.String("es_audio"),
//							},
//							SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("aes-128"),
//						},
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("fmp4_cenc_video"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_video"),
//							},
//							SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("cenc"),
//						},
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("fmp4_cenc_audio"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_audio"),
//							},
//							SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("cenc"),
//						},
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("fmp4_cbcs_video"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_video"),
//							},
//							SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("cbcs"),
//						},
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("fmp4_cbcs_audio"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_audio"),
//							},
//							SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("cbcs"),
//						},
//					},
//					Manifests: transcoder.JobTemplateConfigManifestArray{
//						&transcoder.JobTemplateConfigManifestArgs{
//							FileName: pulumi.String("manifest_aes128.m3u8"),
//							Type:     pulumi.String("HLS"),
//							MuxStreams: pulumi.StringArray{
//								pulumi.String("ts_aes128"),
//							},
//						},
//						&transcoder.JobTemplateConfigManifestArgs{
//							FileName: pulumi.String("manifest_cenc.mpd"),
//							Type:     pulumi.String("DASH"),
//							MuxStreams: pulumi.StringArray{
//								pulumi.String("fmp4_cenc_video"),
//								pulumi.String("fmp4_cenc_audio"),
//							},
//						},
//						&transcoder.JobTemplateConfigManifestArgs{
//							FileName: pulumi.String("manifest_cbcs.mpd"),
//							Type:     pulumi.String("DASH"),
//							MuxStreams: pulumi.StringArray{
//								pulumi.String("fmp4_cbcs_video"),
//								pulumi.String("fmp4_cbcs_audio"),
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Transcoder Job Template Pubsub
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			transcoderNotifications, err := pubsub.NewTopic(ctx, "transcoder_notifications", &pubsub.TopicArgs{
//				Name: pulumi.String("transcoder-notifications"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
//				JobTemplateId: pulumi.String("example-job-template"),
//				Location:      pulumi.String("us-central1"),
//				Config: &transcoder.JobTemplateConfigArgs{
//					Inputs: transcoder.JobTemplateConfigInputTypeArray{
//						&transcoder.JobTemplateConfigInputTypeArgs{
//							Key: pulumi.String("input0"),
//							Uri: pulumi.String("gs://example/example.mp4"),
//						},
//					},
//					Output: &transcoder.JobTemplateConfigOutputTypeArgs{
//						Uri: pulumi.String("gs://example/outputs/"),
//					},
//					EditLists: transcoder.JobTemplateConfigEditListArray{
//						&transcoder.JobTemplateConfigEditListArgs{
//							Key: pulumi.String("atom0"),
//							Inputs: pulumi.StringArray{
//								pulumi.String("input0"),
//							},
//							StartTimeOffset: pulumi.String("0s"),
//						},
//					},
//					AdBreaks: transcoder.JobTemplateConfigAdBreakArray{
//						&transcoder.JobTemplateConfigAdBreakArgs{
//							StartTimeOffset: pulumi.String("3.500s"),
//						},
//					},
//					ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream0"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(640),
//									HeightPixels:    pulumi.Int(360),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(550000),
//									VbvFullnessBits: pulumi.Int(495000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream1"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(1280),
//									HeightPixels:    pulumi.Int(720),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(2500000),
//									VbvFullnessBits: pulumi.Int(2250000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("audio-stream0"),
//							AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								BitrateBps:   pulumi.Int(64000),
//								ChannelCount: pulumi.Int(2),
//								ChannelLayouts: pulumi.StringArray{
//									pulumi.String("fl"),
//									pulumi.String("fr"),
//								},
//								SampleRateHertz: pulumi.Int(48000),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("sd"),
//							FileName:  pulumi.String("sd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("hd"),
//							FileName:  pulumi.String("hd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//					},
//					PubsubDestination: &transcoder.JobTemplateConfigPubsubDestinationArgs{
//						Topic: transcoderNotifications.ID(),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// JobTemplate can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}`
//
// * `{{project}}/{{location}}/{{job_template_id}}`
//
// * `{{location}}/{{job_template_id}}`
//
// When using the `pulumi import` command, JobTemplate can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}
// ```
//
// ```sh
// $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default {{project}}/{{location}}/{{job_template_id}}
// ```
//
// ```sh
// $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default {{location}}/{{job_template_id}}
// ```
type JobTemplate struct {
	pulumi.CustomResourceState

	// The configuration for this template.
	// Structure is documented below.
	Config JobTemplateConfigOutput `pulumi:"config"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// ID to use for the Transcoding job template.
	JobTemplateId pulumi.StringOutput `pulumi:"jobTemplateId"`
	// The labels associated with this job template. You can use these to organize and group your job templates.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the transcoding job template resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the job template.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
}

// NewJobTemplate registers a new resource with the given unique name, arguments, and options.
func NewJobTemplate(ctx *pulumi.Context,
	name string, args *JobTemplateArgs, opts ...pulumi.ResourceOption) (*JobTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'JobTemplateId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobTemplate
	err := ctx.RegisterResource("gcp:transcoder/jobTemplate:JobTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobTemplate gets an existing JobTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobTemplateState, opts ...pulumi.ResourceOption) (*JobTemplate, error) {
	var resource JobTemplate
	err := ctx.ReadResource("gcp:transcoder/jobTemplate:JobTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobTemplate resources.
type jobTemplateState struct {
	// The configuration for this template.
	// Structure is documented below.
	Config *JobTemplateConfig `pulumi:"config"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// ID to use for the Transcoding job template.
	JobTemplateId *string `pulumi:"jobTemplateId"`
	// The labels associated with this job template. You can use these to organize and group your job templates.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the transcoding job template resource.
	Location *string `pulumi:"location"`
	// The resource name of the job template.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
}

type JobTemplateState struct {
	// The configuration for this template.
	// Structure is documented below.
	Config JobTemplateConfigPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// ID to use for the Transcoding job template.
	JobTemplateId pulumi.StringPtrInput
	// The labels associated with this job template. You can use these to organize and group your job templates.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the transcoding job template resource.
	Location pulumi.StringPtrInput
	// The resource name of the job template.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
}

func (JobTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobTemplateState)(nil)).Elem()
}

type jobTemplateArgs struct {
	// The configuration for this template.
	// Structure is documented below.
	Config *JobTemplateConfig `pulumi:"config"`
	// ID to use for the Transcoding job template.
	JobTemplateId string `pulumi:"jobTemplateId"`
	// The labels associated with this job template. You can use these to organize and group your job templates.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the transcoding job template resource.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a JobTemplate resource.
type JobTemplateArgs struct {
	// The configuration for this template.
	// Structure is documented below.
	Config JobTemplateConfigPtrInput
	// ID to use for the Transcoding job template.
	JobTemplateId pulumi.StringInput
	// The labels associated with this job template. You can use these to organize and group your job templates.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the transcoding job template resource.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (JobTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobTemplateArgs)(nil)).Elem()
}

type JobTemplateInput interface {
	pulumi.Input

	ToJobTemplateOutput() JobTemplateOutput
	ToJobTemplateOutputWithContext(ctx context.Context) JobTemplateOutput
}

func (*JobTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplate)(nil)).Elem()
}

func (i *JobTemplate) ToJobTemplateOutput() JobTemplateOutput {
	return i.ToJobTemplateOutputWithContext(context.Background())
}

func (i *JobTemplate) ToJobTemplateOutputWithContext(ctx context.Context) JobTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateOutput)
}

// JobTemplateArrayInput is an input type that accepts JobTemplateArray and JobTemplateArrayOutput values.
// You can construct a concrete instance of `JobTemplateArrayInput` via:
//
//	JobTemplateArray{ JobTemplateArgs{...} }
type JobTemplateArrayInput interface {
	pulumi.Input

	ToJobTemplateArrayOutput() JobTemplateArrayOutput
	ToJobTemplateArrayOutputWithContext(context.Context) JobTemplateArrayOutput
}

type JobTemplateArray []JobTemplateInput

func (JobTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobTemplate)(nil)).Elem()
}

func (i JobTemplateArray) ToJobTemplateArrayOutput() JobTemplateArrayOutput {
	return i.ToJobTemplateArrayOutputWithContext(context.Background())
}

func (i JobTemplateArray) ToJobTemplateArrayOutputWithContext(ctx context.Context) JobTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateArrayOutput)
}

// JobTemplateMapInput is an input type that accepts JobTemplateMap and JobTemplateMapOutput values.
// You can construct a concrete instance of `JobTemplateMapInput` via:
//
//	JobTemplateMap{ "key": JobTemplateArgs{...} }
type JobTemplateMapInput interface {
	pulumi.Input

	ToJobTemplateMapOutput() JobTemplateMapOutput
	ToJobTemplateMapOutputWithContext(context.Context) JobTemplateMapOutput
}

type JobTemplateMap map[string]JobTemplateInput

func (JobTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobTemplate)(nil)).Elem()
}

func (i JobTemplateMap) ToJobTemplateMapOutput() JobTemplateMapOutput {
	return i.ToJobTemplateMapOutputWithContext(context.Background())
}

func (i JobTemplateMap) ToJobTemplateMapOutputWithContext(ctx context.Context) JobTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateMapOutput)
}

type JobTemplateOutput struct{ *pulumi.OutputState }

func (JobTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplate)(nil)).Elem()
}

func (o JobTemplateOutput) ToJobTemplateOutput() JobTemplateOutput {
	return o
}

func (o JobTemplateOutput) ToJobTemplateOutputWithContext(ctx context.Context) JobTemplateOutput {
	return o
}

// The configuration for this template.
// Structure is documented below.
func (o JobTemplateOutput) Config() JobTemplateConfigOutput {
	return o.ApplyT(func(v *JobTemplate) JobTemplateConfigOutput { return v.Config }).(JobTemplateConfigOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o JobTemplateOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobTemplate) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// ID to use for the Transcoding job template.
func (o JobTemplateOutput) JobTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobTemplate) pulumi.StringOutput { return v.JobTemplateId }).(pulumi.StringOutput)
}

// The labels associated with this job template. You can use these to organize and group your job templates.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o JobTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobTemplate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the transcoding job template resource.
func (o JobTemplateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *JobTemplate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the job template.
func (o JobTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *JobTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o JobTemplateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *JobTemplate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o JobTemplateOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobTemplate) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

type JobTemplateArrayOutput struct{ *pulumi.OutputState }

func (JobTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobTemplate)(nil)).Elem()
}

func (o JobTemplateArrayOutput) ToJobTemplateArrayOutput() JobTemplateArrayOutput {
	return o
}

func (o JobTemplateArrayOutput) ToJobTemplateArrayOutputWithContext(ctx context.Context) JobTemplateArrayOutput {
	return o
}

func (o JobTemplateArrayOutput) Index(i pulumi.IntInput) JobTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobTemplate {
		return vs[0].([]*JobTemplate)[vs[1].(int)]
	}).(JobTemplateOutput)
}

type JobTemplateMapOutput struct{ *pulumi.OutputState }

func (JobTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobTemplate)(nil)).Elem()
}

func (o JobTemplateMapOutput) ToJobTemplateMapOutput() JobTemplateMapOutput {
	return o
}

func (o JobTemplateMapOutput) ToJobTemplateMapOutputWithContext(ctx context.Context) JobTemplateMapOutput {
	return o
}

func (o JobTemplateMapOutput) MapIndex(k pulumi.StringInput) JobTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobTemplate {
		return vs[0].(map[string]*JobTemplate)[vs[1].(string)]
	}).(JobTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateInput)(nil)).Elem(), &JobTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateArrayInput)(nil)).Elem(), JobTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateMapInput)(nil)).Elem(), JobTemplateMap{})
	pulumi.RegisterOutputType(JobTemplateOutput{})
	pulumi.RegisterOutputType(JobTemplateArrayOutput{})
	pulumi.RegisterOutputType(JobTemplateMapOutput{})
}
