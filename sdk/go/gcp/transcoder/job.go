// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transcoder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Transcoding Job Resource
//
// To get more information about Job, see:
//
// * [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobs)
// * How-to Guides
//   - [Transcoder](https://cloud.google.com/transcoder/docs/)
//
// ## Example Usage
//
// ### Transcoder Job Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
//				Name:                     pulumi.String("transcoder-job"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//				PublicAccessPrevention:   pulumi.String("enforced"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
//				Name:   pulumi.String("example.mp4"),
//				Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
//				Bucket: _default.Name,
//			})
//			if err != nil {
//				return err
//			}
//			defaultJobTemplate, err := transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
//				JobTemplateId: pulumi.String("example-job-template"),
//				Location:      pulumi.String("us-central1"),
//				Config: &transcoder.JobTemplateConfigArgs{
//					Inputs: transcoder.JobTemplateConfigInputTypeArray{
//						&transcoder.JobTemplateConfigInputTypeArgs{
//							Key: pulumi.String("input0"),
//							Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
//								defaultName := _args[0].(string)
//								exampleMp4Name := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					Output: &transcoder.JobTemplateConfigOutputTypeArgs{
//						Uri: _default.Name.ApplyT(func(name string) (string, error) {
//							return fmt.Sprintf("gs://%v/outputs/", name), nil
//						}).(pulumi.StringOutput),
//					},
//					EditLists: transcoder.JobTemplateConfigEditListArray{
//						&transcoder.JobTemplateConfigEditListArgs{
//							Key: pulumi.String("atom0"),
//							Inputs: pulumi.StringArray{
//								pulumi.String("input0"),
//							},
//							StartTimeOffset: pulumi.String("0s"),
//						},
//					},
//					ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream0"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(640),
//									HeightPixels:    pulumi.Int(360),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(550000),
//									VbvFullnessBits: pulumi.Int(495000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream1"),
//							VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(1280),
//									HeightPixels:    pulumi.Int(720),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(2500000),
//									VbvFullnessBits: pulumi.Int(2250000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobTemplateConfigElementaryStreamArgs{
//							Key: pulumi.String("audio-stream0"),
//							AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								BitrateBps:   pulumi.Int(64000),
//								ChannelCount: pulumi.Int(2),
//								ChannelLayouts: pulumi.StringArray{
//									pulumi.String("fl"),
//									pulumi.String("fr"),
//								},
//								SampleRateHertz: pulumi.Int(48000),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("sd"),
//							FileName:  pulumi.String("sd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobTemplateConfigMuxStreamArgs{
//							Key:       pulumi.String("hd"),
//							FileName:  pulumi.String("hd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
//				TemplateId: defaultJobTemplate.Name,
//				Location:   pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Transcoder Job Pubsub
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
//				Name:                     pulumi.String("transcoder-job"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//				PublicAccessPrevention:   pulumi.String("enforced"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
//				Name:   pulumi.String("example.mp4"),
//				Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
//				Bucket: _default.Name,
//			})
//			if err != nil {
//				return err
//			}
//			transcoderNotifications, err := pubsub.NewTopic(ctx, "transcoder_notifications", &pubsub.TopicArgs{
//				Name: pulumi.String("transcoder-notifications"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
//				Location: pulumi.String("us-central1"),
//				Config: &transcoder.JobConfigArgs{
//					Inputs: transcoder.JobConfigInputTypeArray{
//						&transcoder.JobConfigInputTypeArgs{
//							Key: pulumi.String("input0"),
//							Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
//								defaultName := _args[0].(string)
//								exampleMp4Name := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					EditLists: transcoder.JobConfigEditListArray{
//						&transcoder.JobConfigEditListArgs{
//							Key: pulumi.String("atom0"),
//							Inputs: pulumi.StringArray{
//								pulumi.String("input0"),
//							},
//							StartTimeOffset: pulumi.String("0s"),
//						},
//					},
//					AdBreaks: transcoder.JobConfigAdBreakArray{
//						&transcoder.JobConfigAdBreakArgs{
//							StartTimeOffset: pulumi.String("3.500s"),
//						},
//					},
//					ElementaryStreams: transcoder.JobConfigElementaryStreamArray{
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream0"),
//							VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(640),
//									HeightPixels:    pulumi.Int(360),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(550000),
//									VbvFullnessBits: pulumi.Int(495000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream1"),
//							VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(1280),
//									HeightPixels:    pulumi.Int(720),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(2500000),
//									VbvFullnessBits: pulumi.Int(2250000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("audio-stream0"),
//							AudioStream: &transcoder.JobConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								BitrateBps:   pulumi.Int(64000),
//								ChannelCount: pulumi.Int(2),
//								ChannelLayouts: pulumi.StringArray{
//									pulumi.String("fl"),
//									pulumi.String("fr"),
//								},
//								SampleRateHertz: pulumi.Int(48000),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobConfigMuxStreamArray{
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("sd"),
//							FileName:  pulumi.String("sd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("hd"),
//							FileName:  pulumi.String("hd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//					},
//					PubsubDestination: &transcoder.JobConfigPubsubDestinationArgs{
//						Topic: transcoderNotifications.ID(),
//					},
//					Output: &transcoder.JobConfigOutputTypeArgs{
//						Uri: _default.Name.ApplyT(func(name string) (string, error) {
//							return fmt.Sprintf("gs://%v/outputs/", name), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Transcoder Job Encryptions
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
//				Name:                     pulumi.String("transcoder-job"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//				PublicAccessPrevention:   pulumi.String("enforced"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
//				Name:   pulumi.String("example.mp4"),
//				Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
//				Bucket: _default.Name,
//			})
//			if err != nil {
//				return err
//			}
//			encryptionKey, err := secretmanager.NewSecret(ctx, "encryption_key", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("transcoder-encryption-key"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			encryptionKeySecretVersion, err := secretmanager.NewSecretVersion(ctx, "encryption_key", &secretmanager.SecretVersionArgs{
//				Secret:     encryptionKey.Name,
//				SecretData: pulumi.String("4A67F2C1B8E93A4F6D3E7890A1BC23DF"),
//			})
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			// this is required to allow the transcoder service identity to access the secret
//			transcoder, err := projects.NewServiceIdentity(ctx, "transcoder", &projects.ServiceIdentityArgs{
//				Project: pulumi.String(project.ProjectId),
//				Service: pulumi.String("transcoder.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "transcoder_encryption_key_accessor", &secretmanager.SecretIamMemberArgs{
//				SecretId: encryptionKey.SecretId,
//				Project:  encryptionKey.Project,
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member: transcoder.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
//				Location: pulumi.String("us-central1"),
//				Config: &transcoder.JobConfigArgs{
//					Inputs: transcoder.JobConfigInputTypeArray{
//						&transcoder.JobConfigInputTypeArgs{
//							Key: pulumi.String("input0"),
//							Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
//								defaultName := _args[0].(string)
//								exampleMp4Name := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					ElementaryStreams: transcoder.JobConfigElementaryStreamArray{
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("es_video"),
//							VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
//									Profile:      pulumi.String("main"),
//									HeightPixels: pulumi.Int(600),
//									WidthPixels:  pulumi.Int(800),
//									BitrateBps:   pulumi.Int(1000000),
//									FrameRate:    pulumi.Int(60),
//								},
//							},
//						},
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("es_audio"),
//							AudioStream: &transcoder.JobConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								ChannelCount: pulumi.Int(2),
//								BitrateBps:   pulumi.Int(160000),
//							},
//						},
//					},
//					Encryptions: transcoder.JobConfigEncryptionArray{
//						&transcoder.JobConfigEncryptionArgs{
//							Id: pulumi.String("aes-128"),
//							SecretManagerKeySource: &transcoder.JobConfigEncryptionSecretManagerKeySourceArgs{
//								SecretVersion: encryptionKeySecretVersion.Name,
//							},
//							DrmSystems: &transcoder.JobConfigEncryptionDrmSystemsArgs{
//								Clearkey: &transcoder.JobConfigEncryptionDrmSystemsClearkeyArgs{},
//							},
//							Aes128: &transcoder.JobConfigEncryptionAes128Args{},
//						},
//						&transcoder.JobConfigEncryptionArgs{
//							Id: pulumi.String("cenc"),
//							SecretManagerKeySource: &transcoder.JobConfigEncryptionSecretManagerKeySourceArgs{
//								SecretVersion: encryptionKeySecretVersion.Name,
//							},
//							DrmSystems: &transcoder.JobConfigEncryptionDrmSystemsArgs{
//								Widevine: &transcoder.JobConfigEncryptionDrmSystemsWidevineArgs{},
//							},
//							MpegCenc: &transcoder.JobConfigEncryptionMpegCencArgs{
//								Scheme: pulumi.String("cenc"),
//							},
//						},
//						&transcoder.JobConfigEncryptionArgs{
//							Id: pulumi.String("cbcs"),
//							SecretManagerKeySource: &transcoder.JobConfigEncryptionSecretManagerKeySourceArgs{
//								SecretVersion: encryptionKeySecretVersion.Name,
//							},
//							DrmSystems: &transcoder.JobConfigEncryptionDrmSystemsArgs{
//								Widevine: &transcoder.JobConfigEncryptionDrmSystemsWidevineArgs{},
//							},
//							MpegCenc: &transcoder.JobConfigEncryptionMpegCencArgs{
//								Scheme: pulumi.String("cbcs"),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobConfigMuxStreamArray{
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("ts_aes128"),
//							Container: pulumi.String("ts"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_video"),
//								pulumi.String("es_audio"),
//							},
//							SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("aes-128"),
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("fmp4_cenc_video"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_video"),
//							},
//							SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("cenc"),
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("fmp4_cenc_audio"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_audio"),
//							},
//							SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("cenc"),
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("fmp4_cbcs_video"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_video"),
//							},
//							SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("cbcs"),
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("fmp4_cbcs_audio"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("es_audio"),
//							},
//							SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
//								SegmentDuration: pulumi.String("6s"),
//							},
//							EncryptionId: pulumi.String("cbcs"),
//						},
//					},
//					Manifests: transcoder.JobConfigManifestArray{
//						&transcoder.JobConfigManifestArgs{
//							FileName: pulumi.String("manifest_aes128.m3u8"),
//							Type:     pulumi.String("HLS"),
//							MuxStreams: pulumi.StringArray{
//								pulumi.String("ts_aes128"),
//							},
//						},
//						&transcoder.JobConfigManifestArgs{
//							FileName: pulumi.String("manifest_cenc.mpd"),
//							Type:     pulumi.String("DASH"),
//							MuxStreams: pulumi.StringArray{
//								pulumi.String("fmp4_cenc_video"),
//								pulumi.String("fmp4_cenc_audio"),
//							},
//						},
//						&transcoder.JobConfigManifestArgs{
//							FileName: pulumi.String("manifest_cbcs.mpd"),
//							Type:     pulumi.String("DASH"),
//							MuxStreams: pulumi.StringArray{
//								pulumi.String("fmp4_cbcs_video"),
//								pulumi.String("fmp4_cbcs_audio"),
//							},
//						},
//					},
//					Output: &transcoder.JobConfigOutputTypeArgs{
//						Uri: _default.Name.ApplyT(func(name string) (string, error) {
//							return fmt.Sprintf("gs://%v/outputs/", name), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Transcoder Job Overlays
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
//				Name:                     pulumi.String("transcoder-job"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//				PublicAccessPrevention:   pulumi.String("enforced"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
//				Name:   pulumi.String("example.mp4"),
//				Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
//				Bucket: _default.Name,
//			})
//			if err != nil {
//				return err
//			}
//			overlayPng, err := storage.NewBucketObject(ctx, "overlay_png", &storage.BucketObjectArgs{
//				Name:   pulumi.String("overlay.png"),
//				Source: pulumi.NewFileAsset("./test-fixtures/overlay.png"),
//				Bucket: _default.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
//				Location: pulumi.String("us-central1"),
//				Config: &transcoder.JobConfigArgs{
//					Inputs: transcoder.JobConfigInputTypeArray{
//						&transcoder.JobConfigInputTypeArgs{
//							Key: pulumi.String("input0"),
//							Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
//								defaultName := _args[0].(string)
//								exampleMp4Name := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					EditLists: transcoder.JobConfigEditListArray{
//						&transcoder.JobConfigEditListArgs{
//							Key: pulumi.String("atom0"),
//							Inputs: pulumi.StringArray{
//								pulumi.String("input0"),
//							},
//							StartTimeOffset: pulumi.String("0s"),
//						},
//					},
//					AdBreaks: transcoder.JobConfigAdBreakArray{
//						&transcoder.JobConfigAdBreakArgs{
//							StartTimeOffset: pulumi.String("3.500s"),
//						},
//					},
//					Overlays: transcoder.JobConfigOverlayArray{
//						&transcoder.JobConfigOverlayArgs{
//							Animations: transcoder.JobConfigOverlayAnimationArray{
//								&transcoder.JobConfigOverlayAnimationArgs{
//									AnimationFade: &transcoder.JobConfigOverlayAnimationAnimationFadeArgs{
//										FadeType:        pulumi.String("FADE_IN"),
//										StartTimeOffset: pulumi.String("1.500s"),
//										EndTimeOffset:   pulumi.String("3.500s"),
//										Xy: &transcoder.JobConfigOverlayAnimationAnimationFadeXyArgs{
//											X: pulumi.Float64(1),
//											Y: pulumi.Float64(0.5),
//										},
//									},
//								},
//							},
//							Image: &transcoder.JobConfigOverlayImageArgs{
//								Uri: pulumi.All(_default.Name, overlayPng.Name).ApplyT(func(_args []interface{}) (string, error) {
//									defaultName := _args[0].(string)
//									overlayPngName := _args[1].(string)
//									return fmt.Sprintf("gs://%v/%v", defaultName, overlayPngName), nil
//								}).(pulumi.StringOutput),
//							},
//						},
//					},
//					ElementaryStreams: transcoder.JobConfigElementaryStreamArray{
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream0"),
//							VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(640),
//									HeightPixels:    pulumi.Int(360),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(550000),
//									VbvFullnessBits: pulumi.Int(495000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream1"),
//							VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(1280),
//									HeightPixels:    pulumi.Int(720),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(2500000),
//									VbvFullnessBits: pulumi.Int(2250000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("audio-stream0"),
//							AudioStream: &transcoder.JobConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								BitrateBps:   pulumi.Int(64000),
//								ChannelCount: pulumi.Int(2),
//								ChannelLayouts: pulumi.StringArray{
//									pulumi.String("fl"),
//									pulumi.String("fr"),
//								},
//								SampleRateHertz: pulumi.Int(48000),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobConfigMuxStreamArray{
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("sd"),
//							FileName:  pulumi.String("sd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("hd"),
//							FileName:  pulumi.String("hd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//					},
//					Output: &transcoder.JobConfigOutputTypeArgs{
//						Uri: _default.Name.ApplyT(func(name string) (string, error) {
//							return fmt.Sprintf("gs://%v/outputs/", name), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Transcoder Job Manifests
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
//				Name:                     pulumi.String("transcoder-job"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//				PublicAccessPrevention:   pulumi.String("enforced"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
//				Name:   pulumi.String("example.mp4"),
//				Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
//				Bucket: _default.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
//				Location: pulumi.String("us-central1"),
//				Config: &transcoder.JobConfigArgs{
//					Inputs: transcoder.JobConfigInputTypeArray{
//						&transcoder.JobConfigInputTypeArgs{
//							Key: pulumi.String("input0"),
//							Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
//								defaultName := _args[0].(string)
//								exampleMp4Name := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					EditLists: transcoder.JobConfigEditListArray{
//						&transcoder.JobConfigEditListArgs{
//							Key:             pulumi.String("atom0"),
//							StartTimeOffset: pulumi.String("0s"),
//							Inputs: pulumi.StringArray{
//								pulumi.String("input0"),
//							},
//						},
//					},
//					AdBreaks: transcoder.JobConfigAdBreakArray{
//						&transcoder.JobConfigAdBreakArgs{
//							StartTimeOffset: pulumi.String("3.500s"),
//						},
//					},
//					ElementaryStreams: transcoder.JobConfigElementaryStreamArray{
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream0"),
//							VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(640),
//									HeightPixels:    pulumi.Int(360),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(550000),
//									VbvFullnessBits: pulumi.Int(495000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("video-stream1"),
//							VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
//								H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
//									WidthPixels:     pulumi.Int(1280),
//									HeightPixels:    pulumi.Int(720),
//									BitrateBps:      pulumi.Int(550000),
//									FrameRate:       pulumi.Int(60),
//									PixelFormat:     pulumi.String("yuv420p"),
//									RateControlMode: pulumi.String("vbr"),
//									CrfLevel:        pulumi.Int(21),
//									GopDuration:     pulumi.String("3s"),
//									VbvSizeBits:     pulumi.Int(2500000),
//									VbvFullnessBits: pulumi.Int(2250000),
//									EntropyCoder:    pulumi.String("cabac"),
//									Profile:         pulumi.String("high"),
//									Preset:          pulumi.String("veryfast"),
//								},
//							},
//						},
//						&transcoder.JobConfigElementaryStreamArgs{
//							Key: pulumi.String("audio-stream0"),
//							AudioStream: &transcoder.JobConfigElementaryStreamAudioStreamArgs{
//								Codec:        pulumi.String("aac"),
//								BitrateBps:   pulumi.Int(64000),
//								ChannelCount: pulumi.Int(2),
//								ChannelLayouts: pulumi.StringArray{
//									pulumi.String("fl"),
//									pulumi.String("fr"),
//								},
//								SampleRateHertz: pulumi.Int(48000),
//							},
//						},
//					},
//					MuxStreams: transcoder.JobConfigMuxStreamArray{
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("sd"),
//							FileName:  pulumi.String("sd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("hd"),
//							FileName:  pulumi.String("hd.mp4"),
//							Container: pulumi.String("mp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("media-sd"),
//							FileName:  pulumi.String("media-sd.ts"),
//							Container: pulumi.String("ts"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("media-hd"),
//							FileName:  pulumi.String("media-hd.ts"),
//							Container: pulumi.String("ts"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//								pulumi.String("audio-stream0"),
//							},
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("video-only-sd"),
//							FileName:  pulumi.String("video-only-sd.m4s"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream0"),
//							},
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("video-only-hd"),
//							FileName:  pulumi.String("video-only-hd.m4s"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("video-stream1"),
//							},
//						},
//						&transcoder.JobConfigMuxStreamArgs{
//							Key:       pulumi.String("audio-only"),
//							FileName:  pulumi.String("audio-only.m4s"),
//							Container: pulumi.String("fmp4"),
//							ElementaryStreams: pulumi.StringArray{
//								pulumi.String("audio-stream0"),
//							},
//						},
//					},
//					Manifests: transcoder.JobConfigManifestArray{
//						&transcoder.JobConfigManifestArgs{
//							FileName: pulumi.String("manifest.m3u8"),
//							Type:     pulumi.String("HLS"),
//							MuxStreams: pulumi.StringArray{
//								pulumi.String("media-sd"),
//								pulumi.String("media-hd"),
//							},
//						},
//						&transcoder.JobConfigManifestArgs{
//							FileName: pulumi.String("manifest.mpd"),
//							Type:     pulumi.String("DASH"),
//							MuxStreams: pulumi.StringArray{
//								pulumi.String("video-only-sd"),
//								pulumi.String("video-only-hd"),
//								pulumi.String("audio-only"),
//							},
//						},
//					},
//					Output: &transcoder.JobConfigOutputTypeArgs{
//						Uri: _default.Name.ApplyT(func(name string) (string, error) {
//							return fmt.Sprintf("gs://%v/outputs/", name), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Job can be imported using any of these accepted formats:
//
// * `{{project}}/{{name}}`
//
// * `{{project}} {{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, Job can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:transcoder/job:Job default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:transcoder/job:Job default "{{project}} {{name}}"
// ```
//
// ```sh
// $ pulumi import gcp:transcoder/job:Job default {{name}}
// ```
type Job struct {
	pulumi.CustomResourceState

	// The configuration for this template.
	// Structure is documented below.
	Config JobConfigOutput `pulumi:"config"`
	// The time the job was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The time the transcoding finished.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// The labels associated with this job. You can use these to organize and group your jobs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the transcoding job resource.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the job.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The time the transcoding started.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The current state of the job.
	State pulumi.StringOutput `pulumi:"state"`
	// Specify the templateId to use for populating Job.config.
	// The default is preset/web-hd, which is the only supported preset.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Job
	err := ctx.RegisterResource("gcp:transcoder/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("gcp:transcoder/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// The configuration for this template.
	// Structure is documented below.
	Config *JobConfig `pulumi:"config"`
	// The time the job was created.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The time the transcoding finished.
	EndTime *string `pulumi:"endTime"`
	// The labels associated with this job. You can use these to organize and group your jobs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the transcoding job resource.
	//
	// ***
	Location *string `pulumi:"location"`
	// The resource name of the job.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The time the transcoding started.
	StartTime *string `pulumi:"startTime"`
	// The current state of the job.
	State *string `pulumi:"state"`
	// Specify the templateId to use for populating Job.config.
	// The default is preset/web-hd, which is the only supported preset.
	TemplateId *string `pulumi:"templateId"`
}

type JobState struct {
	// The configuration for this template.
	// Structure is documented below.
	Config JobConfigPtrInput
	// The time the job was created.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The time the transcoding finished.
	EndTime pulumi.StringPtrInput
	// The labels associated with this job. You can use these to organize and group your jobs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the transcoding job resource.
	//
	// ***
	Location pulumi.StringPtrInput
	// The resource name of the job.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The time the transcoding started.
	StartTime pulumi.StringPtrInput
	// The current state of the job.
	State pulumi.StringPtrInput
	// Specify the templateId to use for populating Job.config.
	// The default is preset/web-hd, which is the only supported preset.
	TemplateId pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// The configuration for this template.
	// Structure is documented below.
	Config *JobConfig `pulumi:"config"`
	// The labels associated with this job. You can use these to organize and group your jobs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the transcoding job resource.
	//
	// ***
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Specify the templateId to use for populating Job.config.
	// The default is preset/web-hd, which is the only supported preset.
	TemplateId *string `pulumi:"templateId"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// The configuration for this template.
	// Structure is documented below.
	Config JobConfigPtrInput
	// The labels associated with this job. You can use these to organize and group your jobs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the transcoding job resource.
	//
	// ***
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Specify the templateId to use for populating Job.config.
	// The default is preset/web-hd, which is the only supported preset.
	TemplateId pulumi.StringPtrInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//	JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// The configuration for this template.
// Structure is documented below.
func (o JobOutput) Config() JobConfigOutput {
	return o.ApplyT(func(v *Job) JobConfigOutput { return v.Config }).(JobConfigOutput)
}

// The time the job was created.
func (o JobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o JobOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The time the transcoding finished.
func (o JobOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o JobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the transcoding job resource.
//
// ***
func (o JobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the job.
func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o JobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o JobOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The time the transcoding started.
func (o JobOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The current state of the job.
func (o JobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Specify the templateId to use for populating Job.config.
// The default is preset/web-hd, which is the only supported preset.
func (o JobOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}
