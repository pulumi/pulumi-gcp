// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A NotificationChannel is a medium through which an alert is delivered
// when a policy violation is detected. Examples of channels include email, SMS,
// and third-party messaging applications. Fields containing sensitive information
// like authentication tokens or contact info are only partially populated on retrieval.
// 
// Notification Channels are designed to be flexible and are made up of a supported `type`
// and labels to configure that channel. Each `type` has specific labels that need to be
// present for that channel to be correctly configured. The labels that are required to be
// present for one channel `type` are often different than those requried for another.
// Due to these loose constraints it's often best to set up a channel through the UI
// and import when setting up a brand new channel type to determine which
// labels are required.
// 
// A list of supported channels per project the `list` endpoint can be
// accessed programatically or through the api explorer at  https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannelDescriptors/list .
// This provides the channel type and all of the required labels that must be passed.
// 
// 
// To get more information about NotificationChannel, see:
// 
// * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
// * How-to Guides
//     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
//     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/monitoring_notification_channel.html.markdown.
type NotificationChannel struct {
	s *pulumi.ResourceState
}

// NewNotificationChannel registers a new resource with the given unique name, arguments, and options.
func NewNotificationChannel(ctx *pulumi.Context,
	name string, args *NotificationChannelArgs, opts ...pulumi.ResourceOpt) (*NotificationChannel, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["displayName"] = nil
		inputs["enabled"] = nil
		inputs["labels"] = nil
		inputs["project"] = nil
		inputs["type"] = nil
		inputs["userLabels"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["displayName"] = args.DisplayName
		inputs["enabled"] = args.Enabled
		inputs["labels"] = args.Labels
		inputs["project"] = args.Project
		inputs["type"] = args.Type
		inputs["userLabels"] = args.UserLabels
	}
	inputs["name"] = nil
	inputs["verificationStatus"] = nil
	s, err := ctx.RegisterResource("gcp:monitoring/notificationChannel:NotificationChannel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NotificationChannel{s: s}, nil
}

// GetNotificationChannel gets an existing NotificationChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationChannel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NotificationChannelState, opts ...pulumi.ResourceOpt) (*NotificationChannel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["displayName"] = state.DisplayName
		inputs["enabled"] = state.Enabled
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["type"] = state.Type
		inputs["userLabels"] = state.UserLabels
		inputs["verificationStatus"] = state.VerificationStatus
	}
	s, err := ctx.ReadResource("gcp:monitoring/notificationChannel:NotificationChannel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NotificationChannel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NotificationChannel) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NotificationChannel) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *NotificationChannel) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *NotificationChannel) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

func (r *NotificationChannel) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *NotificationChannel) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *NotificationChannel) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *NotificationChannel) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *NotificationChannel) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

func (r *NotificationChannel) UserLabels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["userLabels"])
}

func (r *NotificationChannel) VerificationStatus() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["verificationStatus"])
}

// Input properties used for looking up and filtering NotificationChannel resources.
type NotificationChannelState struct {
	Description interface{}
	DisplayName interface{}
	Enabled interface{}
	Labels interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Type interface{}
	UserLabels interface{}
	VerificationStatus interface{}
}

// The set of arguments for constructing a NotificationChannel resource.
type NotificationChannelArgs struct {
	Description interface{}
	DisplayName interface{}
	Enabled interface{}
	Labels interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Type interface{}
	UserLabels interface{}
}
