// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Beta only
// ## Example Usage
// ### Basic_monitored_project
// A basic example of a monitoring monitored project
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/monitoring"
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/organizations"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := monitoring.NewMonitoredProject(ctx, "primary", &monitoring.MonitoredProjectArgs{
// 			MetricsScope: pulumi.String("my-project-name"),
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = organizations.NewProject(ctx, "basic", &organizations.ProjectArgs{
// 			ProjectId: pulumi.String("id"),
// 			OrgId:     pulumi.String("123456789"),
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// MonitoredProject can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:monitoring/monitoredProject:MonitoredProject default locations/global/metricsScopes/{{metrics_scope}}/projects/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:monitoring/monitoredProject:MonitoredProject default {{metrics_scope}}/{{name}}
// ```
type MonitoredProject struct {
	pulumi.CustomResourceState

	// Output only. The time when this `MonitoredProject` was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example: locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope pulumi.StringOutput `pulumi:"metricsScope"`
	// Immutable. The resource name of the `MonitoredProject`. On input, the resource name includes the scoping project ID and monitored project ID. On output, it contains the equivalent project numbers. Example: `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewMonitoredProject registers a new resource with the given unique name, arguments, and options.
func NewMonitoredProject(ctx *pulumi.Context,
	name string, args *MonitoredProjectArgs, opts ...pulumi.ResourceOption) (*MonitoredProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricsScope == nil {
		return nil, errors.New("invalid value for required argument 'MetricsScope'")
	}
	var resource MonitoredProject
	err := ctx.RegisterResource("gcp:monitoring/monitoredProject:MonitoredProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredProject gets an existing MonitoredProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredProjectState, opts ...pulumi.ResourceOption) (*MonitoredProject, error) {
	var resource MonitoredProject
	err := ctx.ReadResource("gcp:monitoring/monitoredProject:MonitoredProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredProject resources.
type monitoredProjectState struct {
	// Output only. The time when this `MonitoredProject` was created.
	CreateTime *string `pulumi:"createTime"`
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example: locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope *string `pulumi:"metricsScope"`
	// Immutable. The resource name of the `MonitoredProject`. On input, the resource name includes the scoping project ID and monitored project ID. On output, it contains the equivalent project numbers. Example: `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
	Name *string `pulumi:"name"`
}

type MonitoredProjectState struct {
	// Output only. The time when this `MonitoredProject` was created.
	CreateTime pulumi.StringPtrInput
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example: locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope pulumi.StringPtrInput
	// Immutable. The resource name of the `MonitoredProject`. On input, the resource name includes the scoping project ID and monitored project ID. On output, it contains the equivalent project numbers. Example: `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
	Name pulumi.StringPtrInput
}

func (MonitoredProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredProjectState)(nil)).Elem()
}

type monitoredProjectArgs struct {
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example: locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope string `pulumi:"metricsScope"`
	// Immutable. The resource name of the `MonitoredProject`. On input, the resource name includes the scoping project ID and monitored project ID. On output, it contains the equivalent project numbers. Example: `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MonitoredProject resource.
type MonitoredProjectArgs struct {
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example: locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope pulumi.StringInput
	// Immutable. The resource name of the `MonitoredProject`. On input, the resource name includes the scoping project ID and monitored project ID. On output, it contains the equivalent project numbers. Example: `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
	Name pulumi.StringPtrInput
}

func (MonitoredProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredProjectArgs)(nil)).Elem()
}

type MonitoredProjectInput interface {
	pulumi.Input

	ToMonitoredProjectOutput() MonitoredProjectOutput
	ToMonitoredProjectOutputWithContext(ctx context.Context) MonitoredProjectOutput
}

func (*MonitoredProject) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredProject)(nil))
}

func (i *MonitoredProject) ToMonitoredProjectOutput() MonitoredProjectOutput {
	return i.ToMonitoredProjectOutputWithContext(context.Background())
}

func (i *MonitoredProject) ToMonitoredProjectOutputWithContext(ctx context.Context) MonitoredProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredProjectOutput)
}

func (i *MonitoredProject) ToMonitoredProjectPtrOutput() MonitoredProjectPtrOutput {
	return i.ToMonitoredProjectPtrOutputWithContext(context.Background())
}

func (i *MonitoredProject) ToMonitoredProjectPtrOutputWithContext(ctx context.Context) MonitoredProjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredProjectPtrOutput)
}

type MonitoredProjectPtrInput interface {
	pulumi.Input

	ToMonitoredProjectPtrOutput() MonitoredProjectPtrOutput
	ToMonitoredProjectPtrOutputWithContext(ctx context.Context) MonitoredProjectPtrOutput
}

type monitoredProjectPtrType MonitoredProjectArgs

func (*monitoredProjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredProject)(nil))
}

func (i *monitoredProjectPtrType) ToMonitoredProjectPtrOutput() MonitoredProjectPtrOutput {
	return i.ToMonitoredProjectPtrOutputWithContext(context.Background())
}

func (i *monitoredProjectPtrType) ToMonitoredProjectPtrOutputWithContext(ctx context.Context) MonitoredProjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredProjectPtrOutput)
}

// MonitoredProjectArrayInput is an input type that accepts MonitoredProjectArray and MonitoredProjectArrayOutput values.
// You can construct a concrete instance of `MonitoredProjectArrayInput` via:
//
//          MonitoredProjectArray{ MonitoredProjectArgs{...} }
type MonitoredProjectArrayInput interface {
	pulumi.Input

	ToMonitoredProjectArrayOutput() MonitoredProjectArrayOutput
	ToMonitoredProjectArrayOutputWithContext(context.Context) MonitoredProjectArrayOutput
}

type MonitoredProjectArray []MonitoredProjectInput

func (MonitoredProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredProject)(nil)).Elem()
}

func (i MonitoredProjectArray) ToMonitoredProjectArrayOutput() MonitoredProjectArrayOutput {
	return i.ToMonitoredProjectArrayOutputWithContext(context.Background())
}

func (i MonitoredProjectArray) ToMonitoredProjectArrayOutputWithContext(ctx context.Context) MonitoredProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredProjectArrayOutput)
}

// MonitoredProjectMapInput is an input type that accepts MonitoredProjectMap and MonitoredProjectMapOutput values.
// You can construct a concrete instance of `MonitoredProjectMapInput` via:
//
//          MonitoredProjectMap{ "key": MonitoredProjectArgs{...} }
type MonitoredProjectMapInput interface {
	pulumi.Input

	ToMonitoredProjectMapOutput() MonitoredProjectMapOutput
	ToMonitoredProjectMapOutputWithContext(context.Context) MonitoredProjectMapOutput
}

type MonitoredProjectMap map[string]MonitoredProjectInput

func (MonitoredProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredProject)(nil)).Elem()
}

func (i MonitoredProjectMap) ToMonitoredProjectMapOutput() MonitoredProjectMapOutput {
	return i.ToMonitoredProjectMapOutputWithContext(context.Background())
}

func (i MonitoredProjectMap) ToMonitoredProjectMapOutputWithContext(ctx context.Context) MonitoredProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredProjectMapOutput)
}

type MonitoredProjectOutput struct{ *pulumi.OutputState }

func (MonitoredProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredProject)(nil))
}

func (o MonitoredProjectOutput) ToMonitoredProjectOutput() MonitoredProjectOutput {
	return o
}

func (o MonitoredProjectOutput) ToMonitoredProjectOutputWithContext(ctx context.Context) MonitoredProjectOutput {
	return o
}

func (o MonitoredProjectOutput) ToMonitoredProjectPtrOutput() MonitoredProjectPtrOutput {
	return o.ToMonitoredProjectPtrOutputWithContext(context.Background())
}

func (o MonitoredProjectOutput) ToMonitoredProjectPtrOutputWithContext(ctx context.Context) MonitoredProjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoredProject) *MonitoredProject {
		return &v
	}).(MonitoredProjectPtrOutput)
}

type MonitoredProjectPtrOutput struct{ *pulumi.OutputState }

func (MonitoredProjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredProject)(nil))
}

func (o MonitoredProjectPtrOutput) ToMonitoredProjectPtrOutput() MonitoredProjectPtrOutput {
	return o
}

func (o MonitoredProjectPtrOutput) ToMonitoredProjectPtrOutputWithContext(ctx context.Context) MonitoredProjectPtrOutput {
	return o
}

func (o MonitoredProjectPtrOutput) Elem() MonitoredProjectOutput {
	return o.ApplyT(func(v *MonitoredProject) MonitoredProject {
		if v != nil {
			return *v
		}
		var ret MonitoredProject
		return ret
	}).(MonitoredProjectOutput)
}

type MonitoredProjectArrayOutput struct{ *pulumi.OutputState }

func (MonitoredProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoredProject)(nil))
}

func (o MonitoredProjectArrayOutput) ToMonitoredProjectArrayOutput() MonitoredProjectArrayOutput {
	return o
}

func (o MonitoredProjectArrayOutput) ToMonitoredProjectArrayOutputWithContext(ctx context.Context) MonitoredProjectArrayOutput {
	return o
}

func (o MonitoredProjectArrayOutput) Index(i pulumi.IntInput) MonitoredProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoredProject {
		return vs[0].([]MonitoredProject)[vs[1].(int)]
	}).(MonitoredProjectOutput)
}

type MonitoredProjectMapOutput struct{ *pulumi.OutputState }

func (MonitoredProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MonitoredProject)(nil))
}

func (o MonitoredProjectMapOutput) ToMonitoredProjectMapOutput() MonitoredProjectMapOutput {
	return o
}

func (o MonitoredProjectMapOutput) ToMonitoredProjectMapOutputWithContext(ctx context.Context) MonitoredProjectMapOutput {
	return o
}

func (o MonitoredProjectMapOutput) MapIndex(k pulumi.StringInput) MonitoredProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MonitoredProject {
		return vs[0].(map[string]MonitoredProject)[vs[1].(string)]
	}).(MonitoredProjectOutput)
}

func init() {
	pulumi.RegisterOutputType(MonitoredProjectOutput{})
	pulumi.RegisterOutputType(MonitoredProjectPtrOutput{})
	pulumi.RegisterOutputType(MonitoredProjectArrayOutput{})
	pulumi.RegisterOutputType(MonitoredProjectMapOutput{})
}
