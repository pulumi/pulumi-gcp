// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Service is a discrete, autonomous, and network-accessible unit,
// designed to solve an individual concern (Wikipedia). In Cloud Monitoring,
// a Service acts as the root resource under which operational aspects of
// the service are accessible
//
// To get more information about GenericService, see:
//
// * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
// * How-to Guides
//   - [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
//   - [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
//
// ## Example Usage
// ### Monitoring Service Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := monitoring.NewGenericService(ctx, "myService", &monitoring.GenericServiceArgs{
//				BasicService: &monitoring.GenericServiceBasicServiceArgs{
//					ServiceLabels: pulumi.StringMap{
//						"moduleId": pulumi.String("another-module-id"),
//					},
//					ServiceType: pulumi.String("APP_ENGINE"),
//				},
//				DisplayName: pulumi.String("My Service my-service"),
//				ServiceId:   pulumi.String("my-service"),
//				UserLabels: pulumi.StringMap{
//					"my_key":       pulumi.String("my_value"),
//					"my_other_key": pulumi.String("my_other_value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # GenericService can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:monitoring/genericService:GenericService default projects/{{project}}/services/{{service_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:monitoring/genericService:GenericService default {{project}}/{{service_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:monitoring/genericService:GenericService default {{service_id}}
//
// ```
type GenericService struct {
	pulumi.CustomResourceState

	// A well-known service type, defined by its service type and service labels.
	// Valid values are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	// Structure is documented below.
	BasicService GenericServiceBasicServicePtrOutput `pulumi:"basicService"`
	// Name used for UI elements listing this Service.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The full resource name for this service. The syntax is:
	// projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Configuration for how to query telemetry on a Service.
	// Structure is documented below.
	Telemetries GenericServiceTelemetryArrayOutput `pulumi:"telemetries"`
	// Labels which have been used to annotate the service. Label keys must start
	// with a letter. Label keys and values may contain lowercase letters,
	// numbers, underscores, and dashes. Label keys and values have a maximum
	// length of 63 characters, and must be less than 128 bytes in size. Up to 64
	// label entries may be stored. For labels which do not have a semantic value,
	// the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapOutput `pulumi:"userLabels"`
}

// NewGenericService registers a new resource with the given unique name, arguments, and options.
func NewGenericService(ctx *pulumi.Context,
	name string, args *GenericServiceArgs, opts ...pulumi.ResourceOption) (*GenericService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	var resource GenericService
	err := ctx.RegisterResource("gcp:monitoring/genericService:GenericService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenericService gets an existing GenericService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenericService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenericServiceState, opts ...pulumi.ResourceOption) (*GenericService, error) {
	var resource GenericService
	err := ctx.ReadResource("gcp:monitoring/genericService:GenericService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenericService resources.
type genericServiceState struct {
	// A well-known service type, defined by its service type and service labels.
	// Valid values are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	// Structure is documented below.
	BasicService *GenericServiceBasicService `pulumi:"basicService"`
	// Name used for UI elements listing this Service.
	DisplayName *string `pulumi:"displayName"`
	// The full resource name for this service. The syntax is:
	// projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	ServiceId *string `pulumi:"serviceId"`
	// Configuration for how to query telemetry on a Service.
	// Structure is documented below.
	Telemetries []GenericServiceTelemetry `pulumi:"telemetries"`
	// Labels which have been used to annotate the service. Label keys must start
	// with a letter. Label keys and values may contain lowercase letters,
	// numbers, underscores, and dashes. Label keys and values have a maximum
	// length of 63 characters, and must be less than 128 bytes in size. Up to 64
	// label entries may be stored. For labels which do not have a semantic value,
	// the empty string may be supplied for the label value.
	UserLabels map[string]string `pulumi:"userLabels"`
}

type GenericServiceState struct {
	// A well-known service type, defined by its service type and service labels.
	// Valid values are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	// Structure is documented below.
	BasicService GenericServiceBasicServicePtrInput
	// Name used for UI elements listing this Service.
	DisplayName pulumi.StringPtrInput
	// The full resource name for this service. The syntax is:
	// projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	ServiceId pulumi.StringPtrInput
	// Configuration for how to query telemetry on a Service.
	// Structure is documented below.
	Telemetries GenericServiceTelemetryArrayInput
	// Labels which have been used to annotate the service. Label keys must start
	// with a letter. Label keys and values may contain lowercase letters,
	// numbers, underscores, and dashes. Label keys and values have a maximum
	// length of 63 characters, and must be less than 128 bytes in size. Up to 64
	// label entries may be stored. For labels which do not have a semantic value,
	// the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapInput
}

func (GenericServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*genericServiceState)(nil)).Elem()
}

type genericServiceArgs struct {
	// A well-known service type, defined by its service type and service labels.
	// Valid values are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	// Structure is documented below.
	BasicService *GenericServiceBasicService `pulumi:"basicService"`
	// Name used for UI elements listing this Service.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	ServiceId string `pulumi:"serviceId"`
	// Labels which have been used to annotate the service. Label keys must start
	// with a letter. Label keys and values may contain lowercase letters,
	// numbers, underscores, and dashes. Label keys and values have a maximum
	// length of 63 characters, and must be less than 128 bytes in size. Up to 64
	// label entries may be stored. For labels which do not have a semantic value,
	// the empty string may be supplied for the label value.
	UserLabels map[string]string `pulumi:"userLabels"`
}

// The set of arguments for constructing a GenericService resource.
type GenericServiceArgs struct {
	// A well-known service type, defined by its service type and service labels.
	// Valid values are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	// Structure is documented below.
	BasicService GenericServiceBasicServicePtrInput
	// Name used for UI elements listing this Service.
	DisplayName pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	ServiceId pulumi.StringInput
	// Labels which have been used to annotate the service. Label keys must start
	// with a letter. Label keys and values may contain lowercase letters,
	// numbers, underscores, and dashes. Label keys and values have a maximum
	// length of 63 characters, and must be less than 128 bytes in size. Up to 64
	// label entries may be stored. For labels which do not have a semantic value,
	// the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapInput
}

func (GenericServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genericServiceArgs)(nil)).Elem()
}

type GenericServiceInput interface {
	pulumi.Input

	ToGenericServiceOutput() GenericServiceOutput
	ToGenericServiceOutputWithContext(ctx context.Context) GenericServiceOutput
}

func (*GenericService) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericService)(nil)).Elem()
}

func (i *GenericService) ToGenericServiceOutput() GenericServiceOutput {
	return i.ToGenericServiceOutputWithContext(context.Background())
}

func (i *GenericService) ToGenericServiceOutputWithContext(ctx context.Context) GenericServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericServiceOutput)
}

// GenericServiceArrayInput is an input type that accepts GenericServiceArray and GenericServiceArrayOutput values.
// You can construct a concrete instance of `GenericServiceArrayInput` via:
//
//	GenericServiceArray{ GenericServiceArgs{...} }
type GenericServiceArrayInput interface {
	pulumi.Input

	ToGenericServiceArrayOutput() GenericServiceArrayOutput
	ToGenericServiceArrayOutputWithContext(context.Context) GenericServiceArrayOutput
}

type GenericServiceArray []GenericServiceInput

func (GenericServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericService)(nil)).Elem()
}

func (i GenericServiceArray) ToGenericServiceArrayOutput() GenericServiceArrayOutput {
	return i.ToGenericServiceArrayOutputWithContext(context.Background())
}

func (i GenericServiceArray) ToGenericServiceArrayOutputWithContext(ctx context.Context) GenericServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericServiceArrayOutput)
}

// GenericServiceMapInput is an input type that accepts GenericServiceMap and GenericServiceMapOutput values.
// You can construct a concrete instance of `GenericServiceMapInput` via:
//
//	GenericServiceMap{ "key": GenericServiceArgs{...} }
type GenericServiceMapInput interface {
	pulumi.Input

	ToGenericServiceMapOutput() GenericServiceMapOutput
	ToGenericServiceMapOutputWithContext(context.Context) GenericServiceMapOutput
}

type GenericServiceMap map[string]GenericServiceInput

func (GenericServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericService)(nil)).Elem()
}

func (i GenericServiceMap) ToGenericServiceMapOutput() GenericServiceMapOutput {
	return i.ToGenericServiceMapOutputWithContext(context.Background())
}

func (i GenericServiceMap) ToGenericServiceMapOutputWithContext(ctx context.Context) GenericServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericServiceMapOutput)
}

type GenericServiceOutput struct{ *pulumi.OutputState }

func (GenericServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericService)(nil)).Elem()
}

func (o GenericServiceOutput) ToGenericServiceOutput() GenericServiceOutput {
	return o
}

func (o GenericServiceOutput) ToGenericServiceOutputWithContext(ctx context.Context) GenericServiceOutput {
	return o
}

// A well-known service type, defined by its service type and service labels.
// Valid values are described at
// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
// Structure is documented below.
func (o GenericServiceOutput) BasicService() GenericServiceBasicServicePtrOutput {
	return o.ApplyT(func(v *GenericService) GenericServiceBasicServicePtrOutput { return v.BasicService }).(GenericServiceBasicServicePtrOutput)
}

// Name used for UI elements listing this Service.
func (o GenericServiceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenericService) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The full resource name for this service. The syntax is:
// projects/[PROJECT_ID]/services/[SERVICE_ID].
func (o GenericServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GenericServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An optional service ID to use. If not given, the server will generate a
// service ID.
func (o GenericServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericService) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Configuration for how to query telemetry on a Service.
// Structure is documented below.
func (o GenericServiceOutput) Telemetries() GenericServiceTelemetryArrayOutput {
	return o.ApplyT(func(v *GenericService) GenericServiceTelemetryArrayOutput { return v.Telemetries }).(GenericServiceTelemetryArrayOutput)
}

// Labels which have been used to annotate the service. Label keys must start
// with a letter. Label keys and values may contain lowercase letters,
// numbers, underscores, and dashes. Label keys and values have a maximum
// length of 63 characters, and must be less than 128 bytes in size. Up to 64
// label entries may be stored. For labels which do not have a semantic value,
// the empty string may be supplied for the label value.
func (o GenericServiceOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GenericService) pulumi.StringMapOutput { return v.UserLabels }).(pulumi.StringMapOutput)
}

type GenericServiceArrayOutput struct{ *pulumi.OutputState }

func (GenericServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericService)(nil)).Elem()
}

func (o GenericServiceArrayOutput) ToGenericServiceArrayOutput() GenericServiceArrayOutput {
	return o
}

func (o GenericServiceArrayOutput) ToGenericServiceArrayOutputWithContext(ctx context.Context) GenericServiceArrayOutput {
	return o
}

func (o GenericServiceArrayOutput) Index(i pulumi.IntInput) GenericServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenericService {
		return vs[0].([]*GenericService)[vs[1].(int)]
	}).(GenericServiceOutput)
}

type GenericServiceMapOutput struct{ *pulumi.OutputState }

func (GenericServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericService)(nil)).Elem()
}

func (o GenericServiceMapOutput) ToGenericServiceMapOutput() GenericServiceMapOutput {
	return o
}

func (o GenericServiceMapOutput) ToGenericServiceMapOutputWithContext(ctx context.Context) GenericServiceMapOutput {
	return o
}

func (o GenericServiceMapOutput) MapIndex(k pulumi.StringInput) GenericServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenericService {
		return vs[0].(map[string]*GenericService)[vs[1].(string)]
	}).(GenericServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenericServiceInput)(nil)).Elem(), &GenericService{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericServiceArrayInput)(nil)).Elem(), GenericServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericServiceMapInput)(nil)).Elem(), GenericServiceMap{})
	pulumi.RegisterOutputType(GenericServiceOutput{})
	pulumi.RegisterOutputType(GenericServiceArrayOutput{})
	pulumi.RegisterOutputType(GenericServiceMapOutput{})
}
