// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This message configures which resources and services to monitor for availability.
// 
// 
// To get more information about UptimeCheckConfig, see:
// 
// * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.uptimeCheckConfigs)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/monitoring/uptime-checks/)
// 
// <div class = "oics-button" style="float: right; margin: 0 0 -15px">
//   <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=uptime_check_config_http&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
//     <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
//   </a>
// </div>
type UptimeCheckConfig struct {
	s *pulumi.ResourceState
}

// NewUptimeCheckConfig registers a new resource with the given unique name, arguments, and options.
func NewUptimeCheckConfig(ctx *pulumi.Context,
	name string, args *UptimeCheckConfigArgs, opts ...pulumi.ResourceOpt) (*UptimeCheckConfig, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.Timeout == nil {
		return nil, errors.New("missing required argument 'Timeout'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["contentMatchers"] = nil
		inputs["displayName"] = nil
		inputs["httpCheck"] = nil
		inputs["internalCheckers"] = nil
		inputs["isInternal"] = nil
		inputs["monitoredResource"] = nil
		inputs["period"] = nil
		inputs["project"] = nil
		inputs["resourceGroup"] = nil
		inputs["selectedRegions"] = nil
		inputs["tcpCheck"] = nil
		inputs["timeout"] = nil
	} else {
		inputs["contentMatchers"] = args.ContentMatchers
		inputs["displayName"] = args.DisplayName
		inputs["httpCheck"] = args.HttpCheck
		inputs["internalCheckers"] = args.InternalCheckers
		inputs["isInternal"] = args.IsInternal
		inputs["monitoredResource"] = args.MonitoredResource
		inputs["period"] = args.Period
		inputs["project"] = args.Project
		inputs["resourceGroup"] = args.ResourceGroup
		inputs["selectedRegions"] = args.SelectedRegions
		inputs["tcpCheck"] = args.TcpCheck
		inputs["timeout"] = args.Timeout
	}
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UptimeCheckConfig{s: s}, nil
}

// GetUptimeCheckConfig gets an existing UptimeCheckConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUptimeCheckConfig(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UptimeCheckConfigState, opts ...pulumi.ResourceOpt) (*UptimeCheckConfig, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["contentMatchers"] = state.ContentMatchers
		inputs["displayName"] = state.DisplayName
		inputs["httpCheck"] = state.HttpCheck
		inputs["internalCheckers"] = state.InternalCheckers
		inputs["isInternal"] = state.IsInternal
		inputs["monitoredResource"] = state.MonitoredResource
		inputs["name"] = state.Name
		inputs["period"] = state.Period
		inputs["project"] = state.Project
		inputs["resourceGroup"] = state.ResourceGroup
		inputs["selectedRegions"] = state.SelectedRegions
		inputs["tcpCheck"] = state.TcpCheck
		inputs["timeout"] = state.Timeout
	}
	s, err := ctx.ReadResource("gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UptimeCheckConfig{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UptimeCheckConfig) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UptimeCheckConfig) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *UptimeCheckConfig) ContentMatchers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["contentMatchers"])
}

func (r *UptimeCheckConfig) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

func (r *UptimeCheckConfig) HttpCheck() *pulumi.Output {
	return r.s.State["httpCheck"]
}

func (r *UptimeCheckConfig) InternalCheckers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["internalCheckers"])
}

func (r *UptimeCheckConfig) IsInternal() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isInternal"])
}

func (r *UptimeCheckConfig) MonitoredResource() *pulumi.Output {
	return r.s.State["monitoredResource"]
}

func (r *UptimeCheckConfig) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *UptimeCheckConfig) Period() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["period"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *UptimeCheckConfig) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *UptimeCheckConfig) ResourceGroup() *pulumi.Output {
	return r.s.State["resourceGroup"]
}

func (r *UptimeCheckConfig) SelectedRegions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["selectedRegions"])
}

func (r *UptimeCheckConfig) TcpCheck() *pulumi.Output {
	return r.s.State["tcpCheck"]
}

func (r *UptimeCheckConfig) Timeout() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["timeout"])
}

// Input properties used for looking up and filtering UptimeCheckConfig resources.
type UptimeCheckConfigState struct {
	ContentMatchers interface{}
	DisplayName interface{}
	HttpCheck interface{}
	InternalCheckers interface{}
	IsInternal interface{}
	MonitoredResource interface{}
	Name interface{}
	Period interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	ResourceGroup interface{}
	SelectedRegions interface{}
	TcpCheck interface{}
	Timeout interface{}
}

// The set of arguments for constructing a UptimeCheckConfig resource.
type UptimeCheckConfigArgs struct {
	ContentMatchers interface{}
	DisplayName interface{}
	HttpCheck interface{}
	InternalCheckers interface{}
	IsInternal interface{}
	MonitoredResource interface{}
	Period interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	ResourceGroup interface{}
	SelectedRegions interface{}
	TcpCheck interface{}
	Timeout interface{}
}
