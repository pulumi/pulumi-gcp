// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tpu

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
// ### Tpu V2 Vm Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/tpu"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tpu.GetV2RuntimeVersions(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = tpu.NewV2Vm(ctx, "tpu", &tpu.V2VmArgs{
//				Zone:           pulumi.String("us-central1-c"),
//				RuntimeVersion: pulumi.String("tpu-vm-tf-2.13.0"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Tpu V2 Vm Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/tpu"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tpu.GetV2RuntimeVersions(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = tpu.GetV2AcceleratorTypes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = tpu.NewV2Vm(ctx, "tpu", &tpu.V2VmArgs{
//				Zone:            pulumi.String("us-central1-c"),
//				Description:     pulumi.String("Text description of the TPU."),
//				RuntimeVersion:  pulumi.String("tpu-vm-tf-2.13.0"),
//				AcceleratorType: pulumi.String("v2-8"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Vm can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:tpu/v2Vm:V2Vm default projects/{{project}}/locations/{{zone}}/nodes/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:tpu/v2Vm:V2Vm default {{project}}/{{zone}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:tpu/v2Vm:V2Vm default {{zone}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:tpu/v2Vm:V2Vm default {{name}}
//
// ```
type V2Vm struct {
	pulumi.CustomResourceState

	// TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
	AcceleratorType pulumi.StringPtrOutput `pulumi:"acceleratorType"`
	// Text description of the TPU.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The immutable name of the TPU.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Runtime version for the TPU.
	//
	// ***
	RuntimeVersion pulumi.StringOutput `pulumi:"runtimeVersion"`
	// The GCP location for the TPU. If it is not provided, the provider zone is used.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewV2Vm registers a new resource with the given unique name, arguments, and options.
func NewV2Vm(ctx *pulumi.Context,
	name string, args *V2VmArgs, opts ...pulumi.ResourceOption) (*V2Vm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuntimeVersion == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2Vm
	err := ctx.RegisterResource("gcp:tpu/v2Vm:V2Vm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2Vm gets an existing V2Vm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2Vm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2VmState, opts ...pulumi.ResourceOption) (*V2Vm, error) {
	var resource V2Vm
	err := ctx.ReadResource("gcp:tpu/v2Vm:V2Vm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2Vm resources.
type v2vmState struct {
	// TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
	AcceleratorType *string `pulumi:"acceleratorType"`
	// Text description of the TPU.
	Description *string `pulumi:"description"`
	// The immutable name of the TPU.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Runtime version for the TPU.
	//
	// ***
	RuntimeVersion *string `pulumi:"runtimeVersion"`
	// The GCP location for the TPU. If it is not provided, the provider zone is used.
	Zone *string `pulumi:"zone"`
}

type V2VmState struct {
	// TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
	AcceleratorType pulumi.StringPtrInput
	// Text description of the TPU.
	Description pulumi.StringPtrInput
	// The immutable name of the TPU.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Runtime version for the TPU.
	//
	// ***
	RuntimeVersion pulumi.StringPtrInput
	// The GCP location for the TPU. If it is not provided, the provider zone is used.
	Zone pulumi.StringPtrInput
}

func (V2VmState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2vmState)(nil)).Elem()
}

type v2vmArgs struct {
	// TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
	AcceleratorType *string `pulumi:"acceleratorType"`
	// Text description of the TPU.
	Description *string `pulumi:"description"`
	// The immutable name of the TPU.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Runtime version for the TPU.
	//
	// ***
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The GCP location for the TPU. If it is not provided, the provider zone is used.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a V2Vm resource.
type V2VmArgs struct {
	// TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
	AcceleratorType pulumi.StringPtrInput
	// Text description of the TPU.
	Description pulumi.StringPtrInput
	// The immutable name of the TPU.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Runtime version for the TPU.
	//
	// ***
	RuntimeVersion pulumi.StringInput
	// The GCP location for the TPU. If it is not provided, the provider zone is used.
	Zone pulumi.StringPtrInput
}

func (V2VmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2vmArgs)(nil)).Elem()
}

type V2VmInput interface {
	pulumi.Input

	ToV2VmOutput() V2VmOutput
	ToV2VmOutputWithContext(ctx context.Context) V2VmOutput
}

func (*V2Vm) ElementType() reflect.Type {
	return reflect.TypeOf((**V2Vm)(nil)).Elem()
}

func (i *V2Vm) ToV2VmOutput() V2VmOutput {
	return i.ToV2VmOutputWithContext(context.Background())
}

func (i *V2Vm) ToV2VmOutputWithContext(ctx context.Context) V2VmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2VmOutput)
}

func (i *V2Vm) ToOutput(ctx context.Context) pulumix.Output[*V2Vm] {
	return pulumix.Output[*V2Vm]{
		OutputState: i.ToV2VmOutputWithContext(ctx).OutputState,
	}
}

// V2VmArrayInput is an input type that accepts V2VmArray and V2VmArrayOutput values.
// You can construct a concrete instance of `V2VmArrayInput` via:
//
//	V2VmArray{ V2VmArgs{...} }
type V2VmArrayInput interface {
	pulumi.Input

	ToV2VmArrayOutput() V2VmArrayOutput
	ToV2VmArrayOutputWithContext(context.Context) V2VmArrayOutput
}

type V2VmArray []V2VmInput

func (V2VmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2Vm)(nil)).Elem()
}

func (i V2VmArray) ToV2VmArrayOutput() V2VmArrayOutput {
	return i.ToV2VmArrayOutputWithContext(context.Background())
}

func (i V2VmArray) ToV2VmArrayOutputWithContext(ctx context.Context) V2VmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2VmArrayOutput)
}

func (i V2VmArray) ToOutput(ctx context.Context) pulumix.Output[[]*V2Vm] {
	return pulumix.Output[[]*V2Vm]{
		OutputState: i.ToV2VmArrayOutputWithContext(ctx).OutputState,
	}
}

// V2VmMapInput is an input type that accepts V2VmMap and V2VmMapOutput values.
// You can construct a concrete instance of `V2VmMapInput` via:
//
//	V2VmMap{ "key": V2VmArgs{...} }
type V2VmMapInput interface {
	pulumi.Input

	ToV2VmMapOutput() V2VmMapOutput
	ToV2VmMapOutputWithContext(context.Context) V2VmMapOutput
}

type V2VmMap map[string]V2VmInput

func (V2VmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2Vm)(nil)).Elem()
}

func (i V2VmMap) ToV2VmMapOutput() V2VmMapOutput {
	return i.ToV2VmMapOutputWithContext(context.Background())
}

func (i V2VmMap) ToV2VmMapOutputWithContext(ctx context.Context) V2VmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2VmMapOutput)
}

func (i V2VmMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*V2Vm] {
	return pulumix.Output[map[string]*V2Vm]{
		OutputState: i.ToV2VmMapOutputWithContext(ctx).OutputState,
	}
}

type V2VmOutput struct{ *pulumi.OutputState }

func (V2VmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2Vm)(nil)).Elem()
}

func (o V2VmOutput) ToV2VmOutput() V2VmOutput {
	return o
}

func (o V2VmOutput) ToV2VmOutputWithContext(ctx context.Context) V2VmOutput {
	return o
}

func (o V2VmOutput) ToOutput(ctx context.Context) pulumix.Output[*V2Vm] {
	return pulumix.Output[*V2Vm]{
		OutputState: o.OutputState,
	}
}

// TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
func (o V2VmOutput) AcceleratorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2Vm) pulumi.StringPtrOutput { return v.AcceleratorType }).(pulumi.StringPtrOutput)
}

// Text description of the TPU.
func (o V2VmOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2Vm) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The immutable name of the TPU.
func (o V2VmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2Vm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o V2VmOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *V2Vm) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Runtime version for the TPU.
//
// ***
func (o V2VmOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *V2Vm) pulumi.StringOutput { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The GCP location for the TPU. If it is not provided, the provider zone is used.
func (o V2VmOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *V2Vm) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type V2VmArrayOutput struct{ *pulumi.OutputState }

func (V2VmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2Vm)(nil)).Elem()
}

func (o V2VmArrayOutput) ToV2VmArrayOutput() V2VmArrayOutput {
	return o
}

func (o V2VmArrayOutput) ToV2VmArrayOutputWithContext(ctx context.Context) V2VmArrayOutput {
	return o
}

func (o V2VmArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*V2Vm] {
	return pulumix.Output[[]*V2Vm]{
		OutputState: o.OutputState,
	}
}

func (o V2VmArrayOutput) Index(i pulumi.IntInput) V2VmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2Vm {
		return vs[0].([]*V2Vm)[vs[1].(int)]
	}).(V2VmOutput)
}

type V2VmMapOutput struct{ *pulumi.OutputState }

func (V2VmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2Vm)(nil)).Elem()
}

func (o V2VmMapOutput) ToV2VmMapOutput() V2VmMapOutput {
	return o
}

func (o V2VmMapOutput) ToV2VmMapOutputWithContext(ctx context.Context) V2VmMapOutput {
	return o
}

func (o V2VmMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*V2Vm] {
	return pulumix.Output[map[string]*V2Vm]{
		OutputState: o.OutputState,
	}
}

func (o V2VmMapOutput) MapIndex(k pulumi.StringInput) V2VmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2Vm {
		return vs[0].(map[string]*V2Vm)[vs[1].(string)]
	}).(V2VmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2VmInput)(nil)).Elem(), &V2Vm{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2VmArrayInput)(nil)).Elem(), V2VmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2VmMapInput)(nil)).Elem(), V2VmMap{})
	pulumi.RegisterOutputType(V2VmOutput{})
	pulumi.RegisterOutputType(V2VmArrayOutput{})
	pulumi.RegisterOutputType(V2VmMapOutput{})
}
