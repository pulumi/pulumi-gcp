// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tpu

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
func GetV2AcceleratorTypes(ctx *pulumi.Context, args *GetV2AcceleratorTypesArgs, opts ...pulumi.InvokeOption) (*GetV2AcceleratorTypesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetV2AcceleratorTypesResult
	err := ctx.Invoke("gcp:tpu/getV2AcceleratorTypes:getV2AcceleratorTypes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getV2AcceleratorTypes.
type GetV2AcceleratorTypesArgs struct {
	// The project to list types for. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The zone to list types for. If it
	// is not provided, the provider zone is used.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getV2AcceleratorTypes.
type GetV2AcceleratorTypesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	Project string `pulumi:"project"`
	// The list of accelerator types available for the given project and zone.
	Types []string `pulumi:"types"`
	Zone  string   `pulumi:"zone"`
}

func GetV2AcceleratorTypesOutput(ctx *pulumi.Context, args GetV2AcceleratorTypesOutputArgs, opts ...pulumi.InvokeOption) GetV2AcceleratorTypesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetV2AcceleratorTypesResult, error) {
			args := v.(GetV2AcceleratorTypesArgs)
			r, err := GetV2AcceleratorTypes(ctx, &args, opts...)
			var s GetV2AcceleratorTypesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetV2AcceleratorTypesResultOutput)
}

// A collection of arguments for invoking getV2AcceleratorTypes.
type GetV2AcceleratorTypesOutputArgs struct {
	// The project to list types for. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The zone to list types for. If it
	// is not provided, the provider zone is used.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetV2AcceleratorTypesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetV2AcceleratorTypesArgs)(nil)).Elem()
}

// A collection of values returned by getV2AcceleratorTypes.
type GetV2AcceleratorTypesResultOutput struct{ *pulumi.OutputState }

func (GetV2AcceleratorTypesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetV2AcceleratorTypesResult)(nil)).Elem()
}

func (o GetV2AcceleratorTypesResultOutput) ToGetV2AcceleratorTypesResultOutput() GetV2AcceleratorTypesResultOutput {
	return o
}

func (o GetV2AcceleratorTypesResultOutput) ToGetV2AcceleratorTypesResultOutputWithContext(ctx context.Context) GetV2AcceleratorTypesResultOutput {
	return o
}

func (o GetV2AcceleratorTypesResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetV2AcceleratorTypesResult] {
	return pulumix.Output[GetV2AcceleratorTypesResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetV2AcceleratorTypesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetV2AcceleratorTypesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetV2AcceleratorTypesResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetV2AcceleratorTypesResult) string { return v.Project }).(pulumi.StringOutput)
}

// The list of accelerator types available for the given project and zone.
func (o GetV2AcceleratorTypesResultOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetV2AcceleratorTypesResult) []string { return v.Types }).(pulumi.StringArrayOutput)
}

func (o GetV2AcceleratorTypesResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetV2AcceleratorTypesResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetV2AcceleratorTypesResultOutput{})
}
