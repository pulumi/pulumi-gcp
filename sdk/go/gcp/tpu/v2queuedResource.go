// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tpu

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Tpu V2 Queued Resource Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tpu.NewV2QueuedResource(ctx, "qr", &tpu.V2QueuedResourceArgs{
//				Name:    pulumi.String("test-qr"),
//				Zone:    pulumi.String("us-central1-c"),
//				Project: pulumi.String("my-project-name"),
//				Tpu: &tpu.V2QueuedResourceTpuArgs{
//					NodeSpecs: tpu.V2QueuedResourceTpuNodeSpecArray{
//						&tpu.V2QueuedResourceTpuNodeSpecArgs{
//							Parent: pulumi.String("projects/my-project-name/locations/us-central1-c"),
//							NodeId: pulumi.String("test-tpu"),
//							Node: &tpu.V2QueuedResourceTpuNodeSpecNodeArgs{
//								RuntimeVersion:  pulumi.String("tpu-vm-tf-2.13.0"),
//								AcceleratorType: pulumi.String("v2-8"),
//								Description:     pulumi.String("Text description of the TPU."),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// QueuedResource can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}`
//
// * `{{project}}/{{zone}}/{{name}}`
//
// * `{{zone}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, QueuedResource can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{project}}/{{zone}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{zone}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{name}}
// ```
type V2QueuedResource struct {
	pulumi.CustomResourceState

	// The immutable name of the Queued Resource.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Defines a TPU resource.
	// Structure is documented below.
	Tpu V2QueuedResourceTpuPtrOutput `pulumi:"tpu"`
	// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewV2QueuedResource registers a new resource with the given unique name, arguments, and options.
func NewV2QueuedResource(ctx *pulumi.Context,
	name string, args *V2QueuedResourceArgs, opts ...pulumi.ResourceOption) (*V2QueuedResource, error) {
	if args == nil {
		args = &V2QueuedResourceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2QueuedResource
	err := ctx.RegisterResource("gcp:tpu/v2QueuedResource:V2QueuedResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2QueuedResource gets an existing V2QueuedResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2QueuedResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2QueuedResourceState, opts ...pulumi.ResourceOption) (*V2QueuedResource, error) {
	var resource V2QueuedResource
	err := ctx.ReadResource("gcp:tpu/v2QueuedResource:V2QueuedResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2QueuedResource resources.
type v2queuedResourceState struct {
	// The immutable name of the Queued Resource.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Defines a TPU resource.
	// Structure is documented below.
	Tpu *V2QueuedResourceTpu `pulumi:"tpu"`
	// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
	Zone *string `pulumi:"zone"`
}

type V2QueuedResourceState struct {
	// The immutable name of the Queued Resource.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Defines a TPU resource.
	// Structure is documented below.
	Tpu V2QueuedResourceTpuPtrInput
	// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
	Zone pulumi.StringPtrInput
}

func (V2QueuedResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2queuedResourceState)(nil)).Elem()
}

type v2queuedResourceArgs struct {
	// The immutable name of the Queued Resource.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Defines a TPU resource.
	// Structure is documented below.
	Tpu *V2QueuedResourceTpu `pulumi:"tpu"`
	// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a V2QueuedResource resource.
type V2QueuedResourceArgs struct {
	// The immutable name of the Queued Resource.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Defines a TPU resource.
	// Structure is documented below.
	Tpu V2QueuedResourceTpuPtrInput
	// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
	Zone pulumi.StringPtrInput
}

func (V2QueuedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2queuedResourceArgs)(nil)).Elem()
}

type V2QueuedResourceInput interface {
	pulumi.Input

	ToV2QueuedResourceOutput() V2QueuedResourceOutput
	ToV2QueuedResourceOutputWithContext(ctx context.Context) V2QueuedResourceOutput
}

func (*V2QueuedResource) ElementType() reflect.Type {
	return reflect.TypeOf((**V2QueuedResource)(nil)).Elem()
}

func (i *V2QueuedResource) ToV2QueuedResourceOutput() V2QueuedResourceOutput {
	return i.ToV2QueuedResourceOutputWithContext(context.Background())
}

func (i *V2QueuedResource) ToV2QueuedResourceOutputWithContext(ctx context.Context) V2QueuedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2QueuedResourceOutput)
}

// V2QueuedResourceArrayInput is an input type that accepts V2QueuedResourceArray and V2QueuedResourceArrayOutput values.
// You can construct a concrete instance of `V2QueuedResourceArrayInput` via:
//
//	V2QueuedResourceArray{ V2QueuedResourceArgs{...} }
type V2QueuedResourceArrayInput interface {
	pulumi.Input

	ToV2QueuedResourceArrayOutput() V2QueuedResourceArrayOutput
	ToV2QueuedResourceArrayOutputWithContext(context.Context) V2QueuedResourceArrayOutput
}

type V2QueuedResourceArray []V2QueuedResourceInput

func (V2QueuedResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2QueuedResource)(nil)).Elem()
}

func (i V2QueuedResourceArray) ToV2QueuedResourceArrayOutput() V2QueuedResourceArrayOutput {
	return i.ToV2QueuedResourceArrayOutputWithContext(context.Background())
}

func (i V2QueuedResourceArray) ToV2QueuedResourceArrayOutputWithContext(ctx context.Context) V2QueuedResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2QueuedResourceArrayOutput)
}

// V2QueuedResourceMapInput is an input type that accepts V2QueuedResourceMap and V2QueuedResourceMapOutput values.
// You can construct a concrete instance of `V2QueuedResourceMapInput` via:
//
//	V2QueuedResourceMap{ "key": V2QueuedResourceArgs{...} }
type V2QueuedResourceMapInput interface {
	pulumi.Input

	ToV2QueuedResourceMapOutput() V2QueuedResourceMapOutput
	ToV2QueuedResourceMapOutputWithContext(context.Context) V2QueuedResourceMapOutput
}

type V2QueuedResourceMap map[string]V2QueuedResourceInput

func (V2QueuedResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2QueuedResource)(nil)).Elem()
}

func (i V2QueuedResourceMap) ToV2QueuedResourceMapOutput() V2QueuedResourceMapOutput {
	return i.ToV2QueuedResourceMapOutputWithContext(context.Background())
}

func (i V2QueuedResourceMap) ToV2QueuedResourceMapOutputWithContext(ctx context.Context) V2QueuedResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2QueuedResourceMapOutput)
}

type V2QueuedResourceOutput struct{ *pulumi.OutputState }

func (V2QueuedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2QueuedResource)(nil)).Elem()
}

func (o V2QueuedResourceOutput) ToV2QueuedResourceOutput() V2QueuedResourceOutput {
	return o
}

func (o V2QueuedResourceOutput) ToV2QueuedResourceOutputWithContext(ctx context.Context) V2QueuedResourceOutput {
	return o
}

// The immutable name of the Queued Resource.
//
// ***
func (o V2QueuedResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2QueuedResource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o V2QueuedResourceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *V2QueuedResource) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Defines a TPU resource.
// Structure is documented below.
func (o V2QueuedResourceOutput) Tpu() V2QueuedResourceTpuPtrOutput {
	return o.ApplyT(func(v *V2QueuedResource) V2QueuedResourceTpuPtrOutput { return v.Tpu }).(V2QueuedResourceTpuPtrOutput)
}

// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
func (o V2QueuedResourceOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *V2QueuedResource) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type V2QueuedResourceArrayOutput struct{ *pulumi.OutputState }

func (V2QueuedResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2QueuedResource)(nil)).Elem()
}

func (o V2QueuedResourceArrayOutput) ToV2QueuedResourceArrayOutput() V2QueuedResourceArrayOutput {
	return o
}

func (o V2QueuedResourceArrayOutput) ToV2QueuedResourceArrayOutputWithContext(ctx context.Context) V2QueuedResourceArrayOutput {
	return o
}

func (o V2QueuedResourceArrayOutput) Index(i pulumi.IntInput) V2QueuedResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2QueuedResource {
		return vs[0].([]*V2QueuedResource)[vs[1].(int)]
	}).(V2QueuedResourceOutput)
}

type V2QueuedResourceMapOutput struct{ *pulumi.OutputState }

func (V2QueuedResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2QueuedResource)(nil)).Elem()
}

func (o V2QueuedResourceMapOutput) ToV2QueuedResourceMapOutput() V2QueuedResourceMapOutput {
	return o
}

func (o V2QueuedResourceMapOutput) ToV2QueuedResourceMapOutputWithContext(ctx context.Context) V2QueuedResourceMapOutput {
	return o
}

func (o V2QueuedResourceMapOutput) MapIndex(k pulumi.StringInput) V2QueuedResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2QueuedResource {
		return vs[0].(map[string]*V2QueuedResource)[vs[1].(string)]
	}).(V2QueuedResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2QueuedResourceInput)(nil)).Elem(), &V2QueuedResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2QueuedResourceArrayInput)(nil)).Elem(), V2QueuedResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2QueuedResourceMapInput)(nil)).Elem(), V2QueuedResourceMap{})
	pulumi.RegisterOutputType(V2QueuedResourceOutput{})
	pulumi.RegisterOutputType(V2QueuedResourceArrayOutput{})
	pulumi.RegisterOutputType(V2QueuedResourceMapOutput{})
}
