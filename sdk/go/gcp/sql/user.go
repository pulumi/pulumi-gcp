// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Google SQL User on a Google SQL User Instance. For more information, see the [official documentation](https://cloud.google.com/sql/), or the [JSON API](https://cloud.google.com/sql/docs/admin-api/v1beta4/users).
//
// ## Example Usage
//
// Example creating a SQL User.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
//				ByteLength: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			main, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
//				Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
//					return fmt.Sprintf("main-instance-%v", hex), nil
//				}).(pulumi.StringOutput),
//				DatabaseVersion: pulumi.String("MYSQL_5_7"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier: pulumi.String("db-f1-micro"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sql.NewUser(ctx, "users", &sql.UserArgs{
//				Name:     pulumi.String("me"),
//				Instance: main.Name,
//				Host:     pulumi.String("me.com"),
//				Password: pulumi.String("changeme"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Example using [Cloud SQL IAM database authentication](https://cloud.google.com/sql/docs/mysql/authentication).
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
//				ByteLength: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			main, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
//				Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
//					return fmt.Sprintf("main-instance-%v", hex), nil
//				}).(pulumi.StringOutput),
//				DatabaseVersion: pulumi.String("POSTGRES_15"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier: pulumi.String("db-f1-micro"),
//					DatabaseFlags: sql.DatabaseInstanceSettingsDatabaseFlagArray{
//						&sql.DatabaseInstanceSettingsDatabaseFlagArgs{
//							Name:  pulumi.String("cloudsql.iam_authentication"),
//							Value: pulumi.String("on"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sql.NewUser(ctx, "iam_user", &sql.UserArgs{
//				Name:     pulumi.String("me@example.com"),
//				Instance: main.Name,
//				Type:     pulumi.String("CLOUD_IAM_USER"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeTrimsuffix, err := std.Trimsuffix(ctx, &std.TrimsuffixArgs{
//				Input:  serviceAccount.Email,
//				Suffix: ".gserviceaccount.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sql.NewUser(ctx, "iam_service_account_user", &sql.UserArgs{
//				Name:     pulumi.String(invokeTrimsuffix.Result),
//				Instance: main.Name,
//				Type:     pulumi.String("CLOUD_IAM_SERVICE_ACCOUNT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Example using [Cloud SQL IAM Group authentication](https://cloud.google.com/sql/docs/mysql/iam-authentication#iam-group-auth).
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
//				ByteLength: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			main, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
//				Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
//					return fmt.Sprintf("main-instance-%v", hex), nil
//				}).(pulumi.StringOutput),
//				DatabaseVersion: pulumi.String("MYSQL_8_0"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier: pulumi.String("db-f1-micro"),
//					DatabaseFlags: sql.DatabaseInstanceSettingsDatabaseFlagArray{
//						&sql.DatabaseInstanceSettingsDatabaseFlagArgs{
//							Name:  pulumi.String("cloudsql_iam_authentication"),
//							Value: pulumi.String("on"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sql.NewUser(ctx, "iam_group_user", &sql.UserArgs{
//				Name:     pulumi.String("iam_group@example.com"),
//				Instance: main.Name,
//				Type:     pulumi.String("CLOUD_IAM_GROUP"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Ephemeral Attributes Reference
//
// The following write-only attributes are supported:
//
//   - `passwordWo` - (Optional) The password for the user. Can be updated. For Postgres
//     instances this is a Required field, unless type is set to either CLOUD_IAM_USER
//     or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
//     and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
//     **Note**: This property is write-only and will not be read from the API.
//
// ## Import
//
// SQL users for MySQL databases can be imported using the `project`, `instance`, `host` and `name`, e.g.
//
// * `{{project_id}}/{{instance}}/{{host}}/{{name}}`
//
// SQL users for PostgreSQL databases can be imported using the `project`, `instance` and `name`, e.g.
//
// * `{{project_id}}/{{instance}}/{{name}}`
//
// When using the `pulumi import` command, NAME_HERE can be imported using one of the formats above. For example:
//
// # MySQL database
//
// ```sh
// $ pulumi import gcp:sql/user:User default {{project_id}}/{{instance}}/{{host}}/{{name}}
// ```
//
// # PostgreSQL database
//
// ```sh
// $ pulumi import gcp:sql/user:User default {{project_id}}/{{instance}}/{{name}}
// ```
type User struct {
	pulumi.CustomResourceState

	// The deletion policy for the user.
	// Setting `ABANDON` allows the resource to be abandoned rather than deleted. This is useful
	// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
	//
	// Possible values are: `ABANDON`.
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// The host the user can connect from. This is only supported
	// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
	// Can be an IP address. Changing this forces a new resource to be created.
	Host pulumi.StringOutput `pulumi:"host"`
	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// The name of the user. Changing this forces a new resource
	// to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password for the user. Can be updated. For Postgres
	// instances this is a Required field, unless type is set to either CLOUD_IAM_USER
	// or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
	// and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
	Password       pulumi.StringPtrOutput      `pulumi:"password"`
	PasswordPolicy UserPasswordPolicyPtrOutput `pulumi:"passwordPolicy"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project              pulumi.StringOutput                `pulumi:"project"`
	SqlServerUserDetails UserSqlServerUserDetailArrayOutput `pulumi:"sqlServerUserDetails"`
	// The user type. It determines the method to authenticate the
	// user during login. The default is the database's built-in user type. Flags
	// include "BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP",
	// "CLOUD_IAM_GROUP_USER" and "CLOUD_IAM_GROUP_SERVICE_ACCOUNT" for
	// [Postgres](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/users#sqlusertype)
	// and [MySQL](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/users#sqlusertype).
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("gcp:sql/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("gcp:sql/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// The deletion policy for the user.
	// Setting `ABANDON` allows the resource to be abandoned rather than deleted. This is useful
	// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
	//
	// Possible values are: `ABANDON`.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The host the user can connect from. This is only supported
	// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
	// Can be an IP address. Changing this forces a new resource to be created.
	Host *string `pulumi:"host"`
	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	Instance *string `pulumi:"instance"`
	// The name of the user. Changing this forces a new resource
	// to be created.
	Name *string `pulumi:"name"`
	// The password for the user. Can be updated. For Postgres
	// instances this is a Required field, unless type is set to either CLOUD_IAM_USER
	// or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
	// and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
	Password       *string             `pulumi:"password"`
	PasswordPolicy *UserPasswordPolicy `pulumi:"passwordPolicy"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project              *string                   `pulumi:"project"`
	SqlServerUserDetails []UserSqlServerUserDetail `pulumi:"sqlServerUserDetails"`
	// The user type. It determines the method to authenticate the
	// user during login. The default is the database's built-in user type. Flags
	// include "BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP",
	// "CLOUD_IAM_GROUP_USER" and "CLOUD_IAM_GROUP_SERVICE_ACCOUNT" for
	// [Postgres](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/users#sqlusertype)
	// and [MySQL](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/users#sqlusertype).
	Type *string `pulumi:"type"`
}

type UserState struct {
	// The deletion policy for the user.
	// Setting `ABANDON` allows the resource to be abandoned rather than deleted. This is useful
	// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
	//
	// Possible values are: `ABANDON`.
	DeletionPolicy pulumi.StringPtrInput
	// The host the user can connect from. This is only supported
	// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
	// Can be an IP address. Changing this forces a new resource to be created.
	Host pulumi.StringPtrInput
	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	Instance pulumi.StringPtrInput
	// The name of the user. Changing this forces a new resource
	// to be created.
	Name pulumi.StringPtrInput
	// The password for the user. Can be updated. For Postgres
	// instances this is a Required field, unless type is set to either CLOUD_IAM_USER
	// or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
	// and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
	Password       pulumi.StringPtrInput
	PasswordPolicy UserPasswordPolicyPtrInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project              pulumi.StringPtrInput
	SqlServerUserDetails UserSqlServerUserDetailArrayInput
	// The user type. It determines the method to authenticate the
	// user during login. The default is the database's built-in user type. Flags
	// include "BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP",
	// "CLOUD_IAM_GROUP_USER" and "CLOUD_IAM_GROUP_SERVICE_ACCOUNT" for
	// [Postgres](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/users#sqlusertype)
	// and [MySQL](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/users#sqlusertype).
	Type pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The deletion policy for the user.
	// Setting `ABANDON` allows the resource to be abandoned rather than deleted. This is useful
	// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
	//
	// Possible values are: `ABANDON`.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The host the user can connect from. This is only supported
	// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
	// Can be an IP address. Changing this forces a new resource to be created.
	Host *string `pulumi:"host"`
	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	Instance string `pulumi:"instance"`
	// The name of the user. Changing this forces a new resource
	// to be created.
	Name *string `pulumi:"name"`
	// The password for the user. Can be updated. For Postgres
	// instances this is a Required field, unless type is set to either CLOUD_IAM_USER
	// or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
	// and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
	Password       *string             `pulumi:"password"`
	PasswordPolicy *UserPasswordPolicy `pulumi:"passwordPolicy"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The user type. It determines the method to authenticate the
	// user during login. The default is the database's built-in user type. Flags
	// include "BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP",
	// "CLOUD_IAM_GROUP_USER" and "CLOUD_IAM_GROUP_SERVICE_ACCOUNT" for
	// [Postgres](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/users#sqlusertype)
	// and [MySQL](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/users#sqlusertype).
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The deletion policy for the user.
	// Setting `ABANDON` allows the resource to be abandoned rather than deleted. This is useful
	// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
	//
	// Possible values are: `ABANDON`.
	DeletionPolicy pulumi.StringPtrInput
	// The host the user can connect from. This is only supported
	// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
	// Can be an IP address. Changing this forces a new resource to be created.
	Host pulumi.StringPtrInput
	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	Instance pulumi.StringInput
	// The name of the user. Changing this forces a new resource
	// to be created.
	Name pulumi.StringPtrInput
	// The password for the user. Can be updated. For Postgres
	// instances this is a Required field, unless type is set to either CLOUD_IAM_USER
	// or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
	// and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
	Password       pulumi.StringPtrInput
	PasswordPolicy UserPasswordPolicyPtrInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The user type. It determines the method to authenticate the
	// user during login. The default is the database's built-in user type. Flags
	// include "BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP",
	// "CLOUD_IAM_GROUP_USER" and "CLOUD_IAM_GROUP_SERVICE_ACCOUNT" for
	// [Postgres](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/users#sqlusertype)
	// and [MySQL](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/users#sqlusertype).
	Type pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// The deletion policy for the user.
// Setting `ABANDON` allows the resource to be abandoned rather than deleted. This is useful
// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
//
// Possible values are: `ABANDON`.
func (o UserOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// The host the user can connect from. This is only supported
// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
// Can be an IP address. Changing this forces a new resource to be created.
func (o UserOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The name of the Cloud SQL instance. Changing this
// forces a new resource to be created.
func (o UserOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// The name of the user. Changing this forces a new resource
// to be created.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password for the user. Can be updated. For Postgres
// instances this is a Required field, unless type is set to either CLOUD_IAM_USER
// or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
// and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o UserOutput) PasswordPolicy() UserPasswordPolicyPtrOutput {
	return o.ApplyT(func(v *User) UserPasswordPolicyPtrOutput { return v.PasswordPolicy }).(UserPasswordPolicyPtrOutput)
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (o UserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o UserOutput) SqlServerUserDetails() UserSqlServerUserDetailArrayOutput {
	return o.ApplyT(func(v *User) UserSqlServerUserDetailArrayOutput { return v.SqlServerUserDetails }).(UserSqlServerUserDetailArrayOutput)
}

// The user type. It determines the method to authenticate the
// user during login. The default is the database's built-in user type. Flags
// include "BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP",
// "CLOUD_IAM_GROUP_USER" and "CLOUD_IAM_GROUP_SERVICE_ACCOUNT" for
// [Postgres](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/users#sqlusertype)
// and [MySQL](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/users#sqlusertype).
func (o UserOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
