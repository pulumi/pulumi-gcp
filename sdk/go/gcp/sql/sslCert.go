// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a new Google SQL SSL Cert on a Google SQL Instance. For more information, see the [official documentation](https://cloud.google.com/sql/), or the [JSON API](https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/sslCerts).
// 
// > **Note:** All arguments including the private key will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
type SslCert struct {
	s *pulumi.ResourceState
}

// NewSslCert registers a new resource with the given unique name, arguments, and options.
func NewSslCert(ctx *pulumi.Context,
	name string, args *SslCertArgs, opts ...pulumi.ResourceOpt) (*SslCert, error) {
	if args == nil || args.CommonName == nil {
		return nil, errors.New("missing required argument 'CommonName'")
	}
	if args == nil || args.Instance == nil {
		return nil, errors.New("missing required argument 'Instance'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["commonName"] = nil
		inputs["instance"] = nil
		inputs["project"] = nil
	} else {
		inputs["commonName"] = args.CommonName
		inputs["instance"] = args.Instance
		inputs["project"] = args.Project
	}
	inputs["cert"] = nil
	inputs["certSerialNumber"] = nil
	inputs["createTime"] = nil
	inputs["expirationTime"] = nil
	inputs["privateKey"] = nil
	inputs["serverCaCert"] = nil
	inputs["sha1Fingerprint"] = nil
	s, err := ctx.RegisterResource("gcp:sql/sslCert:SslCert", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SslCert{s: s}, nil
}

// GetSslCert gets an existing SslCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslCert(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SslCertState, opts ...pulumi.ResourceOpt) (*SslCert, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cert"] = state.Cert
		inputs["certSerialNumber"] = state.CertSerialNumber
		inputs["commonName"] = state.CommonName
		inputs["createTime"] = state.CreateTime
		inputs["expirationTime"] = state.ExpirationTime
		inputs["instance"] = state.Instance
		inputs["privateKey"] = state.PrivateKey
		inputs["project"] = state.Project
		inputs["serverCaCert"] = state.ServerCaCert
		inputs["sha1Fingerprint"] = state.Sha1Fingerprint
	}
	s, err := ctx.ReadResource("gcp:sql/sslCert:SslCert", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SslCert{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SslCert) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SslCert) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The actual certificate data for this client certificate.
func (r *SslCert) Cert() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cert"])
}

// The serial number extracted from the certificate data.
func (r *SslCert) CertSerialNumber() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certSerialNumber"])
}

// The common name to be used in the certificate to identify the
// client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
func (r *SslCert) CommonName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["commonName"])
}

// The time when the certificate was created in RFC 3339 format,
// for example 2012-11-15T16:19:00.094Z.
func (r *SslCert) CreateTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createTime"])
}

// The time when the certificate expires in RFC 3339 format,
// for example 2012-11-15T16:19:00.094Z.
func (r *SslCert) ExpirationTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["expirationTime"])
}

// The name of the Cloud SQL instance. Changing this
// forces a new resource to be created.
func (r *SslCert) Instance() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instance"])
}

// The private key associated with the client certificate.
func (r *SslCert) PrivateKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateKey"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *SslCert) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The CA cert of the server this client cert was generated from.
func (r *SslCert) ServerCaCert() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverCaCert"])
}

// The SHA1 Fingerprint of the certificate.
func (r *SslCert) Sha1Fingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sha1Fingerprint"])
}

// Input properties used for looking up and filtering SslCert resources.
type SslCertState struct {
	// The actual certificate data for this client certificate.
	Cert interface{}
	// The serial number extracted from the certificate data.
	CertSerialNumber interface{}
	// The common name to be used in the certificate to identify the
	// client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
	CommonName interface{}
	// The time when the certificate was created in RFC 3339 format,
	// for example 2012-11-15T16:19:00.094Z.
	CreateTime interface{}
	// The time when the certificate expires in RFC 3339 format,
	// for example 2012-11-15T16:19:00.094Z.
	ExpirationTime interface{}
	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	Instance interface{}
	// The private key associated with the client certificate.
	PrivateKey interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The CA cert of the server this client cert was generated from.
	ServerCaCert interface{}
	// The SHA1 Fingerprint of the certificate.
	Sha1Fingerprint interface{}
}

// The set of arguments for constructing a SslCert resource.
type SslCertArgs struct {
	// The common name to be used in the certificate to identify the
	// client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
	CommonName interface{}
	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	Instance interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
}
