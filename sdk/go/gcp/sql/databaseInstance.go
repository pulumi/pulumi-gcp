// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### SQL Second Generation Instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/sql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
//				DatabaseVersion: pulumi.String("POSTGRES_14"),
//				Region:          pulumi.String("us-central1"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier: pulumi.String("db-f1-micro"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Private IP Instance
// > **NOTE:** For private IP instance setup, note that the `sql.DatabaseInstance` does not actually interpolate values from `servicenetworking.Connection`. You must explicitly add a `dependsOn`reference as shown below.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/sql"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			privateNetwork, err := compute.NewNetwork(ctx, "privateNetwork", nil, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			privateIpAddress, err := compute.NewGlobalAddress(ctx, "privateIpAddress", &compute.GlobalAddressArgs{
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      privateNetwork.ID(),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			privateVpcConnection, err := servicenetworking.NewConnection(ctx, "privateVpcConnection", &servicenetworking.ConnectionArgs{
//				Network: privateNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					privateIpAddress.Name,
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = random.NewRandomId(ctx, "dbNameSuffix", &random.RandomIdArgs{
//				ByteLength: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sql.NewDatabaseInstance(ctx, "instance", &sql.DatabaseInstanceArgs{
//				Region:          pulumi.String("us-central1"),
//				DatabaseVersion: pulumi.String("MYSQL_5_7"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier: pulumi.String("db-f1-micro"),
//					IpConfiguration: &sql.DatabaseInstanceSettingsIpConfigurationArgs{
//						Ipv4Enabled:    pulumi.Bool(false),
//						PrivateNetwork: privateNetwork.ID(),
//					},
//				},
//			}, pulumi.Provider(google_beta), pulumi.DependsOn([]pulumi.Resource{
//				privateVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Database instances can be imported using one of any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:sql/databaseInstance:DatabaseInstance main projects/{{project}}/instances/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:sql/databaseInstance:DatabaseInstance main {{project}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:sql/databaseInstance:DatabaseInstance main {{name}}
//
// ```
//
//	config and set on the server. When importing, double-check that your config has all the fields set that you expect- just seeing no diff isn't sufficient to know that your config could reproduce the imported resource.
type DatabaseInstance struct {
	pulumi.CustomResourceState

	// The list of all maintenance versions applicable on the instance.
	AvailableMaintenanceVersions pulumi.StringArrayOutput `pulumi:"availableMaintenanceVersions"`
	// Configuration for creating a new instance as a clone of another instance.
	Clone DatabaseInstanceClonePtrOutput `pulumi:"clone"`
	// The connection name of the instance to be used in
	// connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
	ConnectionName pulumi.StringOutput `pulumi:"connectionName"`
	// The MySQL, PostgreSQL or
	// SQL Server version to use. Supported values include `MYSQL_5_6`,
	// `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
	// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
	// `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
	// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
	// `SQLSERVER_2019_WEB`.
	// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
	// includes an up-to-date reference of supported versions.
	DatabaseVersion pulumi.StringOutput `pulumi:"databaseVersion"`
	// Used to block Terraform from deleting a SQL Instance. Defaults to true.
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	EncryptionKeyName  pulumi.StringOutput  `pulumi:"encryptionKeyName"`
	// The first IPv4 address of any type assigned. This is to support accessing the first address in the list in a terraform
	// output when the resource is configured with a count.
	FirstIpAddress pulumi.StringOutput `pulumi:"firstIpAddress"`
	// The type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
	InstanceType pulumi.StringOutput                  `pulumi:"instanceType"`
	IpAddresses  DatabaseInstanceIpAddressArrayOutput `pulumi:"ipAddresses"`
	// The current software version on the instance. This attribute can not be set during creation. Refer to `availableMaintenanceVersions` attribute to see what `maintenanceVersion` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenanceVersion` value that is older than the current one on the instance will be ignored.
	MaintenanceVersion pulumi.StringOutput `pulumi:"maintenanceVersion"`
	// The name of the existing instance that will
	// act as the master in the replication setup. Note, this requires the master to
	// have `binaryLogEnabled` set, as well as existing backups.
	MasterInstanceName pulumi.StringOutput `pulumi:"masterInstanceName"`
	// The name of the instance. If the name is left blank, Terraform will randomly generate one when the instance is first
	// created. This is done because after a name is used, it cannot be reused for up to one week.
	Name pulumi.StringOutput `pulumi:"name"`
	// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to
	// access an IP of a specific type without performing filtering in a Terraform config.
	PrivateIpAddress pulumi.StringOutput `pulumi:"privateIpAddress"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to
	// access an IP of a specific type without performing filtering in a Terraform config.
	PublicIpAddress pulumi.StringOutput `pulumi:"publicIpAddress"`
	// The region the instance will sit in. If a region is not provided in the resource definition,
	// the provider region will be used instead.
	Region pulumi.StringOutput `pulumi:"region"`
	// The configuration for replication. The
	// configuration is detailed below. Valid only for MySQL instances.
	ReplicaConfiguration DatabaseInstanceReplicaConfigurationOutput    `pulumi:"replicaConfiguration"`
	RestoreBackupContext DatabaseInstanceRestoreBackupContextPtrOutput `pulumi:"restoreBackupContext"`
	// Initial root password. Can be updated. Required for MS SQL Server.
	RootPassword pulumi.StringPtrOutput `pulumi:"rootPassword"`
	// The URI of the created resource.
	SelfLink      pulumi.StringOutput                     `pulumi:"selfLink"`
	ServerCaCerts DatabaseInstanceServerCaCertArrayOutput `pulumi:"serverCaCerts"`
	// The service account email address assigned to the
	// instance.
	ServiceAccountEmailAddress pulumi.StringOutput `pulumi:"serviceAccountEmailAddress"`
	// The settings to use for the database. The
	// configuration is detailed below. Required if `clone` is not set.
	Settings DatabaseInstanceSettingsOutput `pulumi:"settings"`
}

// NewDatabaseInstance registers a new resource with the given unique name, arguments, and options.
func NewDatabaseInstance(ctx *pulumi.Context,
	name string, args *DatabaseInstanceArgs, opts ...pulumi.ResourceOption) (*DatabaseInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseVersion == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseVersion'")
	}
	if args.RootPassword != nil {
		args.RootPassword = pulumi.ToSecret(args.RootPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"rootPassword",
	})
	opts = append(opts, secrets)
	var resource DatabaseInstance
	err := ctx.RegisterResource("gcp:sql/databaseInstance:DatabaseInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseInstance gets an existing DatabaseInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseInstanceState, opts ...pulumi.ResourceOption) (*DatabaseInstance, error) {
	var resource DatabaseInstance
	err := ctx.ReadResource("gcp:sql/databaseInstance:DatabaseInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseInstance resources.
type databaseInstanceState struct {
	// The list of all maintenance versions applicable on the instance.
	AvailableMaintenanceVersions []string `pulumi:"availableMaintenanceVersions"`
	// Configuration for creating a new instance as a clone of another instance.
	Clone *DatabaseInstanceClone `pulumi:"clone"`
	// The connection name of the instance to be used in
	// connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
	ConnectionName *string `pulumi:"connectionName"`
	// The MySQL, PostgreSQL or
	// SQL Server version to use. Supported values include `MYSQL_5_6`,
	// `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
	// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
	// `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
	// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
	// `SQLSERVER_2019_WEB`.
	// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
	// includes an up-to-date reference of supported versions.
	DatabaseVersion *string `pulumi:"databaseVersion"`
	// Used to block Terraform from deleting a SQL Instance. Defaults to true.
	DeletionProtection *bool   `pulumi:"deletionProtection"`
	EncryptionKeyName  *string `pulumi:"encryptionKeyName"`
	// The first IPv4 address of any type assigned. This is to support accessing the first address in the list in a terraform
	// output when the resource is configured with a count.
	FirstIpAddress *string `pulumi:"firstIpAddress"`
	// The type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
	InstanceType *string                     `pulumi:"instanceType"`
	IpAddresses  []DatabaseInstanceIpAddress `pulumi:"ipAddresses"`
	// The current software version on the instance. This attribute can not be set during creation. Refer to `availableMaintenanceVersions` attribute to see what `maintenanceVersion` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenanceVersion` value that is older than the current one on the instance will be ignored.
	MaintenanceVersion *string `pulumi:"maintenanceVersion"`
	// The name of the existing instance that will
	// act as the master in the replication setup. Note, this requires the master to
	// have `binaryLogEnabled` set, as well as existing backups.
	MasterInstanceName *string `pulumi:"masterInstanceName"`
	// The name of the instance. If the name is left blank, Terraform will randomly generate one when the instance is first
	// created. This is done because after a name is used, it cannot be reused for up to one week.
	Name *string `pulumi:"name"`
	// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to
	// access an IP of a specific type without performing filtering in a Terraform config.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to
	// access an IP of a specific type without performing filtering in a Terraform config.
	PublicIpAddress *string `pulumi:"publicIpAddress"`
	// The region the instance will sit in. If a region is not provided in the resource definition,
	// the provider region will be used instead.
	Region *string `pulumi:"region"`
	// The configuration for replication. The
	// configuration is detailed below. Valid only for MySQL instances.
	ReplicaConfiguration *DatabaseInstanceReplicaConfiguration `pulumi:"replicaConfiguration"`
	RestoreBackupContext *DatabaseInstanceRestoreBackupContext `pulumi:"restoreBackupContext"`
	// Initial root password. Can be updated. Required for MS SQL Server.
	RootPassword *string `pulumi:"rootPassword"`
	// The URI of the created resource.
	SelfLink      *string                        `pulumi:"selfLink"`
	ServerCaCerts []DatabaseInstanceServerCaCert `pulumi:"serverCaCerts"`
	// The service account email address assigned to the
	// instance.
	ServiceAccountEmailAddress *string `pulumi:"serviceAccountEmailAddress"`
	// The settings to use for the database. The
	// configuration is detailed below. Required if `clone` is not set.
	Settings *DatabaseInstanceSettings `pulumi:"settings"`
}

type DatabaseInstanceState struct {
	// The list of all maintenance versions applicable on the instance.
	AvailableMaintenanceVersions pulumi.StringArrayInput
	// Configuration for creating a new instance as a clone of another instance.
	Clone DatabaseInstanceClonePtrInput
	// The connection name of the instance to be used in
	// connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
	ConnectionName pulumi.StringPtrInput
	// The MySQL, PostgreSQL or
	// SQL Server version to use. Supported values include `MYSQL_5_6`,
	// `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
	// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
	// `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
	// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
	// `SQLSERVER_2019_WEB`.
	// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
	// includes an up-to-date reference of supported versions.
	DatabaseVersion pulumi.StringPtrInput
	// Used to block Terraform from deleting a SQL Instance. Defaults to true.
	DeletionProtection pulumi.BoolPtrInput
	EncryptionKeyName  pulumi.StringPtrInput
	// The first IPv4 address of any type assigned. This is to support accessing the first address in the list in a terraform
	// output when the resource is configured with a count.
	FirstIpAddress pulumi.StringPtrInput
	// The type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
	InstanceType pulumi.StringPtrInput
	IpAddresses  DatabaseInstanceIpAddressArrayInput
	// The current software version on the instance. This attribute can not be set during creation. Refer to `availableMaintenanceVersions` attribute to see what `maintenanceVersion` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenanceVersion` value that is older than the current one on the instance will be ignored.
	MaintenanceVersion pulumi.StringPtrInput
	// The name of the existing instance that will
	// act as the master in the replication setup. Note, this requires the master to
	// have `binaryLogEnabled` set, as well as existing backups.
	MasterInstanceName pulumi.StringPtrInput
	// The name of the instance. If the name is left blank, Terraform will randomly generate one when the instance is first
	// created. This is done because after a name is used, it cannot be reused for up to one week.
	Name pulumi.StringPtrInput
	// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to
	// access an IP of a specific type without performing filtering in a Terraform config.
	PrivateIpAddress pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to
	// access an IP of a specific type without performing filtering in a Terraform config.
	PublicIpAddress pulumi.StringPtrInput
	// The region the instance will sit in. If a region is not provided in the resource definition,
	// the provider region will be used instead.
	Region pulumi.StringPtrInput
	// The configuration for replication. The
	// configuration is detailed below. Valid only for MySQL instances.
	ReplicaConfiguration DatabaseInstanceReplicaConfigurationPtrInput
	RestoreBackupContext DatabaseInstanceRestoreBackupContextPtrInput
	// Initial root password. Can be updated. Required for MS SQL Server.
	RootPassword pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink      pulumi.StringPtrInput
	ServerCaCerts DatabaseInstanceServerCaCertArrayInput
	// The service account email address assigned to the
	// instance.
	ServiceAccountEmailAddress pulumi.StringPtrInput
	// The settings to use for the database. The
	// configuration is detailed below. Required if `clone` is not set.
	Settings DatabaseInstanceSettingsPtrInput
}

func (DatabaseInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseInstanceState)(nil)).Elem()
}

type databaseInstanceArgs struct {
	// Configuration for creating a new instance as a clone of another instance.
	Clone *DatabaseInstanceClone `pulumi:"clone"`
	// The MySQL, PostgreSQL or
	// SQL Server version to use. Supported values include `MYSQL_5_6`,
	// `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
	// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
	// `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
	// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
	// `SQLSERVER_2019_WEB`.
	// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
	// includes an up-to-date reference of supported versions.
	DatabaseVersion string `pulumi:"databaseVersion"`
	// Used to block Terraform from deleting a SQL Instance. Defaults to true.
	DeletionProtection *bool   `pulumi:"deletionProtection"`
	EncryptionKeyName  *string `pulumi:"encryptionKeyName"`
	// The current software version on the instance. This attribute can not be set during creation. Refer to `availableMaintenanceVersions` attribute to see what `maintenanceVersion` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenanceVersion` value that is older than the current one on the instance will be ignored.
	MaintenanceVersion *string `pulumi:"maintenanceVersion"`
	// The name of the existing instance that will
	// act as the master in the replication setup. Note, this requires the master to
	// have `binaryLogEnabled` set, as well as existing backups.
	MasterInstanceName *string `pulumi:"masterInstanceName"`
	// The name of the instance. If the name is left blank, Terraform will randomly generate one when the instance is first
	// created. This is done because after a name is used, it cannot be reused for up to one week.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region the instance will sit in. If a region is not provided in the resource definition,
	// the provider region will be used instead.
	Region *string `pulumi:"region"`
	// The configuration for replication. The
	// configuration is detailed below. Valid only for MySQL instances.
	ReplicaConfiguration *DatabaseInstanceReplicaConfiguration `pulumi:"replicaConfiguration"`
	RestoreBackupContext *DatabaseInstanceRestoreBackupContext `pulumi:"restoreBackupContext"`
	// Initial root password. Can be updated. Required for MS SQL Server.
	RootPassword *string `pulumi:"rootPassword"`
	// The settings to use for the database. The
	// configuration is detailed below. Required if `clone` is not set.
	Settings *DatabaseInstanceSettings `pulumi:"settings"`
}

// The set of arguments for constructing a DatabaseInstance resource.
type DatabaseInstanceArgs struct {
	// Configuration for creating a new instance as a clone of another instance.
	Clone DatabaseInstanceClonePtrInput
	// The MySQL, PostgreSQL or
	// SQL Server version to use. Supported values include `MYSQL_5_6`,
	// `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
	// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
	// `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
	// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
	// `SQLSERVER_2019_WEB`.
	// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
	// includes an up-to-date reference of supported versions.
	DatabaseVersion pulumi.StringInput
	// Used to block Terraform from deleting a SQL Instance. Defaults to true.
	DeletionProtection pulumi.BoolPtrInput
	EncryptionKeyName  pulumi.StringPtrInput
	// The current software version on the instance. This attribute can not be set during creation. Refer to `availableMaintenanceVersions` attribute to see what `maintenanceVersion` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenanceVersion` value that is older than the current one on the instance will be ignored.
	MaintenanceVersion pulumi.StringPtrInput
	// The name of the existing instance that will
	// act as the master in the replication setup. Note, this requires the master to
	// have `binaryLogEnabled` set, as well as existing backups.
	MasterInstanceName pulumi.StringPtrInput
	// The name of the instance. If the name is left blank, Terraform will randomly generate one when the instance is first
	// created. This is done because after a name is used, it cannot be reused for up to one week.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region the instance will sit in. If a region is not provided in the resource definition,
	// the provider region will be used instead.
	Region pulumi.StringPtrInput
	// The configuration for replication. The
	// configuration is detailed below. Valid only for MySQL instances.
	ReplicaConfiguration DatabaseInstanceReplicaConfigurationPtrInput
	RestoreBackupContext DatabaseInstanceRestoreBackupContextPtrInput
	// Initial root password. Can be updated. Required for MS SQL Server.
	RootPassword pulumi.StringPtrInput
	// The settings to use for the database. The
	// configuration is detailed below. Required if `clone` is not set.
	Settings DatabaseInstanceSettingsPtrInput
}

func (DatabaseInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseInstanceArgs)(nil)).Elem()
}

type DatabaseInstanceInput interface {
	pulumi.Input

	ToDatabaseInstanceOutput() DatabaseInstanceOutput
	ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput
}

func (*DatabaseInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInstance)(nil)).Elem()
}

func (i *DatabaseInstance) ToDatabaseInstanceOutput() DatabaseInstanceOutput {
	return i.ToDatabaseInstanceOutputWithContext(context.Background())
}

func (i *DatabaseInstance) ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstanceOutput)
}

// DatabaseInstanceArrayInput is an input type that accepts DatabaseInstanceArray and DatabaseInstanceArrayOutput values.
// You can construct a concrete instance of `DatabaseInstanceArrayInput` via:
//
//	DatabaseInstanceArray{ DatabaseInstanceArgs{...} }
type DatabaseInstanceArrayInput interface {
	pulumi.Input

	ToDatabaseInstanceArrayOutput() DatabaseInstanceArrayOutput
	ToDatabaseInstanceArrayOutputWithContext(context.Context) DatabaseInstanceArrayOutput
}

type DatabaseInstanceArray []DatabaseInstanceInput

func (DatabaseInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseInstance)(nil)).Elem()
}

func (i DatabaseInstanceArray) ToDatabaseInstanceArrayOutput() DatabaseInstanceArrayOutput {
	return i.ToDatabaseInstanceArrayOutputWithContext(context.Background())
}

func (i DatabaseInstanceArray) ToDatabaseInstanceArrayOutputWithContext(ctx context.Context) DatabaseInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstanceArrayOutput)
}

// DatabaseInstanceMapInput is an input type that accepts DatabaseInstanceMap and DatabaseInstanceMapOutput values.
// You can construct a concrete instance of `DatabaseInstanceMapInput` via:
//
//	DatabaseInstanceMap{ "key": DatabaseInstanceArgs{...} }
type DatabaseInstanceMapInput interface {
	pulumi.Input

	ToDatabaseInstanceMapOutput() DatabaseInstanceMapOutput
	ToDatabaseInstanceMapOutputWithContext(context.Context) DatabaseInstanceMapOutput
}

type DatabaseInstanceMap map[string]DatabaseInstanceInput

func (DatabaseInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseInstance)(nil)).Elem()
}

func (i DatabaseInstanceMap) ToDatabaseInstanceMapOutput() DatabaseInstanceMapOutput {
	return i.ToDatabaseInstanceMapOutputWithContext(context.Background())
}

func (i DatabaseInstanceMap) ToDatabaseInstanceMapOutputWithContext(ctx context.Context) DatabaseInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstanceMapOutput)
}

type DatabaseInstanceOutput struct{ *pulumi.OutputState }

func (DatabaseInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInstance)(nil)).Elem()
}

func (o DatabaseInstanceOutput) ToDatabaseInstanceOutput() DatabaseInstanceOutput {
	return o
}

func (o DatabaseInstanceOutput) ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput {
	return o
}

// The list of all maintenance versions applicable on the instance.
func (o DatabaseInstanceOutput) AvailableMaintenanceVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringArrayOutput { return v.AvailableMaintenanceVersions }).(pulumi.StringArrayOutput)
}

// Configuration for creating a new instance as a clone of another instance.
func (o DatabaseInstanceOutput) Clone() DatabaseInstanceClonePtrOutput {
	return o.ApplyT(func(v *DatabaseInstance) DatabaseInstanceClonePtrOutput { return v.Clone }).(DatabaseInstanceClonePtrOutput)
}

// The connection name of the instance to be used in
// connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
func (o DatabaseInstanceOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.ConnectionName }).(pulumi.StringOutput)
}

// The MySQL, PostgreSQL or
// SQL Server version to use. Supported values include `MYSQL_5_6`,
// `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
// `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
// `SQLSERVER_2019_WEB`.
// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
// includes an up-to-date reference of supported versions.
func (o DatabaseInstanceOutput) DatabaseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.DatabaseVersion }).(pulumi.StringOutput)
}

// Used to block Terraform from deleting a SQL Instance. Defaults to true.
func (o DatabaseInstanceOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

func (o DatabaseInstanceOutput) EncryptionKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.EncryptionKeyName }).(pulumi.StringOutput)
}

// The first IPv4 address of any type assigned. This is to support accessing the first address in the list in a terraform
// output when the resource is configured with a count.
func (o DatabaseInstanceOutput) FirstIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.FirstIpAddress }).(pulumi.StringOutput)
}

// The type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
func (o DatabaseInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

func (o DatabaseInstanceOutput) IpAddresses() DatabaseInstanceIpAddressArrayOutput {
	return o.ApplyT(func(v *DatabaseInstance) DatabaseInstanceIpAddressArrayOutput { return v.IpAddresses }).(DatabaseInstanceIpAddressArrayOutput)
}

// The current software version on the instance. This attribute can not be set during creation. Refer to `availableMaintenanceVersions` attribute to see what `maintenanceVersion` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenanceVersion` value that is older than the current one on the instance will be ignored.
func (o DatabaseInstanceOutput) MaintenanceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.MaintenanceVersion }).(pulumi.StringOutput)
}

// The name of the existing instance that will
// act as the master in the replication setup. Note, this requires the master to
// have `binaryLogEnabled` set, as well as existing backups.
func (o DatabaseInstanceOutput) MasterInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.MasterInstanceName }).(pulumi.StringOutput)
}

// The name of the instance. If the name is left blank, Terraform will randomly generate one when the instance is first
// created. This is done because after a name is used, it cannot be reused for up to one week.
func (o DatabaseInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to
// access an IP of a specific type without performing filtering in a Terraform config.
func (o DatabaseInstanceOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (o DatabaseInstanceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to
// access an IP of a specific type without performing filtering in a Terraform config.
func (o DatabaseInstanceOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// The region the instance will sit in. If a region is not provided in the resource definition,
// the provider region will be used instead.
func (o DatabaseInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The configuration for replication. The
// configuration is detailed below. Valid only for MySQL instances.
func (o DatabaseInstanceOutput) ReplicaConfiguration() DatabaseInstanceReplicaConfigurationOutput {
	return o.ApplyT(func(v *DatabaseInstance) DatabaseInstanceReplicaConfigurationOutput { return v.ReplicaConfiguration }).(DatabaseInstanceReplicaConfigurationOutput)
}

func (o DatabaseInstanceOutput) RestoreBackupContext() DatabaseInstanceRestoreBackupContextPtrOutput {
	return o.ApplyT(func(v *DatabaseInstance) DatabaseInstanceRestoreBackupContextPtrOutput { return v.RestoreBackupContext }).(DatabaseInstanceRestoreBackupContextPtrOutput)
}

// Initial root password. Can be updated. Required for MS SQL Server.
func (o DatabaseInstanceOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringPtrOutput { return v.RootPassword }).(pulumi.StringPtrOutput)
}

// The URI of the created resource.
func (o DatabaseInstanceOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

func (o DatabaseInstanceOutput) ServerCaCerts() DatabaseInstanceServerCaCertArrayOutput {
	return o.ApplyT(func(v *DatabaseInstance) DatabaseInstanceServerCaCertArrayOutput { return v.ServerCaCerts }).(DatabaseInstanceServerCaCertArrayOutput)
}

// The service account email address assigned to the
// instance.
func (o DatabaseInstanceOutput) ServiceAccountEmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.ServiceAccountEmailAddress }).(pulumi.StringOutput)
}

// The settings to use for the database. The
// configuration is detailed below. Required if `clone` is not set.
func (o DatabaseInstanceOutput) Settings() DatabaseInstanceSettingsOutput {
	return o.ApplyT(func(v *DatabaseInstance) DatabaseInstanceSettingsOutput { return v.Settings }).(DatabaseInstanceSettingsOutput)
}

type DatabaseInstanceArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseInstance)(nil)).Elem()
}

func (o DatabaseInstanceArrayOutput) ToDatabaseInstanceArrayOutput() DatabaseInstanceArrayOutput {
	return o
}

func (o DatabaseInstanceArrayOutput) ToDatabaseInstanceArrayOutputWithContext(ctx context.Context) DatabaseInstanceArrayOutput {
	return o
}

func (o DatabaseInstanceArrayOutput) Index(i pulumi.IntInput) DatabaseInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseInstance {
		return vs[0].([]*DatabaseInstance)[vs[1].(int)]
	}).(DatabaseInstanceOutput)
}

type DatabaseInstanceMapOutput struct{ *pulumi.OutputState }

func (DatabaseInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseInstance)(nil)).Elem()
}

func (o DatabaseInstanceMapOutput) ToDatabaseInstanceMapOutput() DatabaseInstanceMapOutput {
	return o
}

func (o DatabaseInstanceMapOutput) ToDatabaseInstanceMapOutputWithContext(ctx context.Context) DatabaseInstanceMapOutput {
	return o
}

func (o DatabaseInstanceMapOutput) MapIndex(k pulumi.StringInput) DatabaseInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseInstance {
		return vs[0].(map[string]*DatabaseInstance)[vs[1].(string)]
	}).(DatabaseInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInstanceInput)(nil)).Elem(), &DatabaseInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInstanceArrayInput)(nil)).Elem(), DatabaseInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInstanceMapInput)(nil)).Elem(), DatabaseInstanceMap{})
	pulumi.RegisterOutputType(DatabaseInstanceOutput{})
	pulumi.RegisterOutputType(DatabaseInstanceArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInstanceMapOutput{})
}
