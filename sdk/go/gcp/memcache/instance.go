// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package memcache

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Instance struct {
	pulumi.CustomResourceState

	// The full name of the GCE network to connect the instance to.  If not provided,
	// 'default' will be used.
	AuthorizedNetwork pulumi.StringPtrOutput `pulumi:"authorizedNetwork"`
	// Creation timestamp in RFC3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A user-visible name for the instance.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Resource labels to represent user-provided metadata.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// User-specified parameters for this memcache instance.  Structure is documented below.
	MemcacheParameters InstanceMemcacheParametersPtrOutput `pulumi:"memcacheParameters"`
	// The resource name of the instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration for memcache nodes.  Structure is documented below.
	NodeConfig InstanceNodeConfigOutput `pulumi:"nodeConfig"`
	// Number of nodes in the memcache instance.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the Memcache region of the instance.
	Region pulumi.StringOutput `pulumi:"region"`
	// Zones where memcache nodes should be provisioned.  If not
	// provided, all zones will be used.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil || args.NodeConfig == nil {
		return nil, errors.New("missing required argument 'NodeConfig'")
	}
	if args == nil || args.NodeCount == nil {
		return nil, errors.New("missing required argument 'NodeCount'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	if args == nil {
		args = &InstanceArgs{}
	}
	var resource Instance
	err := ctx.RegisterResource("gcp:memcache/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("gcp:memcache/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The full name of the GCE network to connect the instance to.  If not provided,
	// 'default' will be used.
	AuthorizedNetwork *string `pulumi:"authorizedNetwork"`
	// Creation timestamp in RFC3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// A user-visible name for the instance.
	DisplayName *string `pulumi:"displayName"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `pulumi:"labels"`
	// User-specified parameters for this memcache instance.  Structure is documented below.
	MemcacheParameters *InstanceMemcacheParameters `pulumi:"memcacheParameters"`
	// The resource name of the instance.
	Name *string `pulumi:"name"`
	// Configuration for memcache nodes.  Structure is documented below.
	NodeConfig *InstanceNodeConfig `pulumi:"nodeConfig"`
	// Number of nodes in the memcache instance.
	NodeCount *int `pulumi:"nodeCount"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the Memcache region of the instance.
	Region *string `pulumi:"region"`
	// Zones where memcache nodes should be provisioned.  If not
	// provided, all zones will be used.
	Zones []string `pulumi:"zones"`
}

type InstanceState struct {
	// The full name of the GCE network to connect the instance to.  If not provided,
	// 'default' will be used.
	AuthorizedNetwork pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreateTime pulumi.StringPtrInput
	// A user-visible name for the instance.
	DisplayName pulumi.StringPtrInput
	// Resource labels to represent user-provided metadata.
	Labels pulumi.StringMapInput
	// User-specified parameters for this memcache instance.  Structure is documented below.
	MemcacheParameters InstanceMemcacheParametersPtrInput
	// The resource name of the instance.
	Name pulumi.StringPtrInput
	// Configuration for memcache nodes.  Structure is documented below.
	NodeConfig InstanceNodeConfigPtrInput
	// Number of nodes in the memcache instance.
	NodeCount pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the Memcache region of the instance.
	Region pulumi.StringPtrInput
	// Zones where memcache nodes should be provisioned.  If not
	// provided, all zones will be used.
	Zones pulumi.StringArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The full name of the GCE network to connect the instance to.  If not provided,
	// 'default' will be used.
	AuthorizedNetwork *string `pulumi:"authorizedNetwork"`
	// A user-visible name for the instance.
	DisplayName *string `pulumi:"displayName"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `pulumi:"labels"`
	// User-specified parameters for this memcache instance.  Structure is documented below.
	MemcacheParameters *InstanceMemcacheParameters `pulumi:"memcacheParameters"`
	// The resource name of the instance.
	Name *string `pulumi:"name"`
	// Configuration for memcache nodes.  Structure is documented below.
	NodeConfig InstanceNodeConfig `pulumi:"nodeConfig"`
	// Number of nodes in the memcache instance.
	NodeCount int `pulumi:"nodeCount"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the Memcache region of the instance.
	Region string `pulumi:"region"`
	// Zones where memcache nodes should be provisioned.  If not
	// provided, all zones will be used.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The full name of the GCE network to connect the instance to.  If not provided,
	// 'default' will be used.
	AuthorizedNetwork pulumi.StringPtrInput
	// A user-visible name for the instance.
	DisplayName pulumi.StringPtrInput
	// Resource labels to represent user-provided metadata.
	Labels pulumi.StringMapInput
	// User-specified parameters for this memcache instance.  Structure is documented below.
	MemcacheParameters InstanceMemcacheParametersPtrInput
	// The resource name of the instance.
	Name pulumi.StringPtrInput
	// Configuration for memcache nodes.  Structure is documented below.
	NodeConfig InstanceNodeConfigInput
	// Number of nodes in the memcache instance.
	NodeCount pulumi.IntInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the Memcache region of the instance.
	Region pulumi.StringInput
	// Zones where memcache nodes should be provisioned.  If not
	// provided, all zones will be used.
	Zones pulumi.StringArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}
