// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memcache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/memcache"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := memcache.LookupInstance(ctx, &memcache.LookupInstanceArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceResult
	err := ctx.Invoke("gcp:memcache/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type LookupInstanceArgs struct {
	// The ID of the memcache instance.
	// 'memcache_instance_id'
	Name string `pulumi:"name"`
	// (optional)
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// (optional)
	// The canonical id of the region. If it is not provided, the provider project is used. For example: us-east1.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getInstance.
type LookupInstanceResult struct {
	AuthorizedNetwork string            `pulumi:"authorizedNetwork"`
	CreateTime        string            `pulumi:"createTime"`
	DiscoveryEndpoint string            `pulumi:"discoveryEndpoint"`
	DisplayName       string            `pulumi:"displayName"`
	EffectiveLabels   map[string]string `pulumi:"effectiveLabels"`
	// The provider-assigned unique ID for this managed resource.
	Id                   string                           `pulumi:"id"`
	Labels               map[string]string                `pulumi:"labels"`
	MaintenancePolicies  []GetInstanceMaintenancePolicy   `pulumi:"maintenancePolicies"`
	MaintenanceSchedules []GetInstanceMaintenanceSchedule `pulumi:"maintenanceSchedules"`
	MemcacheFullVersion  string                           `pulumi:"memcacheFullVersion"`
	MemcacheNodes        []GetInstanceMemcacheNode        `pulumi:"memcacheNodes"`
	MemcacheParameters   []GetInstanceMemcacheParameter   `pulumi:"memcacheParameters"`
	MemcacheVersion      string                           `pulumi:"memcacheVersion"`
	Name                 string                           `pulumi:"name"`
	NodeConfigs          []GetInstanceNodeConfig          `pulumi:"nodeConfigs"`
	NodeCount            int                              `pulumi:"nodeCount"`
	Project              *string                          `pulumi:"project"`
	PulumiLabels         map[string]string                `pulumi:"pulumiLabels"`
	Region               *string                          `pulumi:"region"`
	ReservedIpRangeIds   []string                         `pulumi:"reservedIpRangeIds"`
	Zones                []string                         `pulumi:"zones"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInstanceResultOutput, error) {
			args := v.(LookupInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:memcache/getInstance:getInstance", args, LookupInstanceResultOutput{}, options).(LookupInstanceResultOutput), nil
		}).(LookupInstanceResultOutput)
}

// A collection of arguments for invoking getInstance.
type LookupInstanceOutputArgs struct {
	// The ID of the memcache instance.
	// 'memcache_instance_id'
	Name pulumi.StringInput `pulumi:"name"`
	// (optional)
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// (optional)
	// The canonical id of the region. If it is not provided, the provider project is used. For example: us-east1.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getInstance.
type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutput() LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutputWithContext(ctx context.Context) LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) AuthorizedNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.AuthorizedNetwork }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) DiscoveryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.DiscoveryEndpoint }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInstanceResult) map[string]string { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInstanceResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupInstanceResultOutput) MaintenancePolicies() GetInstanceMaintenancePolicyArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceMaintenancePolicy { return v.MaintenancePolicies }).(GetInstanceMaintenancePolicyArrayOutput)
}

func (o LookupInstanceResultOutput) MaintenanceSchedules() GetInstanceMaintenanceScheduleArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceMaintenanceSchedule { return v.MaintenanceSchedules }).(GetInstanceMaintenanceScheduleArrayOutput)
}

func (o LookupInstanceResultOutput) MemcacheFullVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.MemcacheFullVersion }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) MemcacheNodes() GetInstanceMemcacheNodeArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceMemcacheNode { return v.MemcacheNodes }).(GetInstanceMemcacheNodeArrayOutput)
}

func (o LookupInstanceResultOutput) MemcacheParameters() GetInstanceMemcacheParameterArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceMemcacheParameter { return v.MemcacheParameters }).(GetInstanceMemcacheParameterArrayOutput)
}

func (o LookupInstanceResultOutput) MemcacheVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.MemcacheVersion }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) NodeConfigs() GetInstanceNodeConfigArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceNodeConfig { return v.NodeConfigs }).(GetInstanceNodeConfigArrayOutput)
}

func (o LookupInstanceResultOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.NodeCount }).(pulumi.IntOutput)
}

func (o LookupInstanceResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInstanceResult) map[string]string { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

func (o LookupInstanceResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) ReservedIpRangeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []string { return v.ReservedIpRangeIds }).(pulumi.StringArrayOutput)
}

func (o LookupInstanceResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceResultOutput{})
}
