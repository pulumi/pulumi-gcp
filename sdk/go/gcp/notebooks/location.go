// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package notebooks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a Location resource.
//
// ## Import
//
// Location can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:notebooks/location:Location default projects/{{project}}/locations/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:notebooks/location:Location default {{project}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:notebooks/location:Location default {{name}}
// ```
type Location struct {
	pulumi.CustomResourceState

	// Name of the Location resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
}

// NewLocation registers a new resource with the given unique name, arguments, and options.
func NewLocation(ctx *pulumi.Context,
	name string, args *LocationArgs, opts ...pulumi.ResourceOption) (*Location, error) {
	if args == nil {
		args = &LocationArgs{}
	}

	var resource Location
	err := ctx.RegisterResource("gcp:notebooks/location:Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocation gets an existing Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationState, opts ...pulumi.ResourceOption) (*Location, error) {
	var resource Location
	err := ctx.ReadResource("gcp:notebooks/location:Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Location resources.
type locationState struct {
	// Name of the Location resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
}

type LocationState struct {
	// Name of the Location resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
}

func (LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationState)(nil)).Elem()
}

type locationArgs struct {
	// Name of the Location resource.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Location resource.
type LocationArgs struct {
	// Name of the Location resource.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationArgs)(nil)).Elem()
}

type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(ctx context.Context) LocationOutput
}

func (*Location) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (i *Location) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i *Location) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//          LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// LocationMapInput is an input type that accepts LocationMap and LocationMapOutput values.
// You can construct a concrete instance of `LocationMapInput` via:
//
//          LocationMap{ "key": LocationArgs{...} }
type LocationMapInput interface {
	pulumi.Input

	ToLocationMapOutput() LocationMapOutput
	ToLocationMapOutputWithContext(context.Context) LocationMapOutput
}

type LocationMap map[string]LocationInput

func (LocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (i LocationMap) ToLocationMapOutput() LocationMapOutput {
	return i.ToLocationMapOutputWithContext(context.Background())
}

func (i LocationMap) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationMapOutput)
}

type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// Name of the Location resource.
func (o LocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o LocationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o LocationOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Location {
		return vs[0].([]*Location)[vs[1].(int)]
	}).(LocationOutput)
}

type LocationMapOutput struct{ *pulumi.OutputState }

func (LocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (o LocationMapOutput) ToLocationMapOutput() LocationMapOutput {
	return o
}

func (o LocationMapOutput) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return o
}

func (o LocationMapOutput) MapIndex(k pulumi.StringInput) LocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Location {
		return vs[0].(map[string]*Location)[vs[1].(string)]
	}).(LocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), &Location{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationArrayInput)(nil)).Elem(), LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationMapInput)(nil)).Elem(), LocationMap{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationMapOutput{})
}
