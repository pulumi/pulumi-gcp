// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A tool provides a list of actions which are available to the Playbook to attain its goal.
// A Tool consists of a description of the tool's usage and a specification of the tool which contains the schema and authentication information.
//
// To get more information about Tool, see:
//
// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
//
// ## Example Usage
//
// ### Dialogflowcx Tool Open Api
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/diagflow"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
//				DisplayName:         pulumi.String("dialogflowcx-agent-open-api"),
//				Location:            pulumi.String("global"),
//				DefaultLanguageCode: pulumi.String("en"),
//				TimeZone:            pulumi.String("America/New_York"),
//				Description:         pulumi.String("Example description."),
//			})
//			if err != nil {
//				return err
//			}
//			invokeBase64encode, err := std.Base64encode(ctx, &std.Base64encodeArgs{
//				Input: "example cert",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewCxTool(ctx, "open_api_tool", &diagflow.CxToolArgs{
//				Parent:      agent.ID(),
//				DisplayName: pulumi.String("Example Open API Tool"),
//				Description: pulumi.String("Example Description"),
//				OpenApiSpec: &diagflow.CxToolOpenApiSpecArgs{
//					Authentication: &diagflow.CxToolOpenApiSpecAuthenticationArgs{
//						OauthConfig: &diagflow.CxToolOpenApiSpecAuthenticationOauthConfigArgs{
//							OauthGrantType: pulumi.String("CLIENT_CREDENTIAL"),
//							ClientId:       pulumi.String("example client ID"),
//							ClientSecret:   pulumi.String("example client secret"),
//							Scopes: pulumi.StringArray{
//								pulumi.String("example scope"),
//							},
//							SecretVersionForClientSecret: pulumi.String("projects/-/secrets/-/versions/-"),
//							TokenEndpoint:                pulumi.String("https://example.com/oauth/token"),
//						},
//					},
//					TlsConfig: &diagflow.CxToolOpenApiSpecTlsConfigArgs{
//						CaCerts: diagflow.CxToolOpenApiSpecTlsConfigCaCertArray{
//							&diagflow.CxToolOpenApiSpecTlsConfigCaCertArgs{
//								DisplayName: pulumi.String("example ca cert name"),
//								Cert:        pulumi.String(invokeBase64encode.Result),
//							},
//						},
//					},
//					ServiceDirectoryConfig: &diagflow.CxToolOpenApiSpecServiceDirectoryConfigArgs{
//						Service: pulumi.String("projects/-/locations/-/namespaces/-/services/-"),
//					},
//					TextSchema: pulumi.String(`    {
//	      "openapi": "3.0.0",
//	      "info": {
//	        "title": "Time API",
//	        "version": "1.0.0",
//	        "description": "A simple API to get the current time."
//	      },
//	      "servers": [
//	        {
//	          "url": "https://example-api-endpoint.com"
//	        }
//	      ],
//	      "paths": {
//	        "/time": {
//	          "get": {
//	            "operationId": "getCurrentTime",
//	            "summary": "Gets the current server time.",
//	            "responses": {
//	              "200": {
//	                "description": "Successful response with the current time.",
//	                "content": {
//	                  "application/json": {
//	                    "schema": {
//	                      "type": "object",
//	                      "properties": {
//	                        "currentTime": {
//	                          "type": "string",
//	                          "format": "date-time",
//	                          "description": "The current time in ISO 8601 format."
//	                        }
//	                      }
//	                    }
//	                  }
//	                }
//	              }
//	            }
//	          }
//	        }
//	      }
//	    }
//
// `),
//
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dialogflowcx Tool Data Store
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/diagflow"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myDatastore, err := discoveryengine.NewDataStore(ctx, "my_datastore", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("global"),
//				DataStoreId:      pulumi.String("datastore-tool"),
//				DisplayName:      pulumi.String("datastore for Tool test"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("NO_CONTENT"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_CHAT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
//				DisplayName:               pulumi.String("dialogflowcx-agent-data-store"),
//				Location:                  pulumi.String("global"),
//				DefaultLanguageCode:       pulumi.String("en"),
//				TimeZone:                  pulumi.String("America/New_York"),
//				Description:               pulumi.String("Example description."),
//				DeleteChatEngineOnDestroy: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myDatastore,
//			}))
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewCxTool(ctx, "data_store_tool", &diagflow.CxToolArgs{
//				Parent:      agent.ID(),
//				DisplayName: pulumi.String("Example Data Store Tool"),
//				Description: pulumi.String("Example Description"),
//				DataStoreSpec: &diagflow.CxToolDataStoreSpecArgs{
//					DataStoreConnections: diagflow.CxToolDataStoreSpecDataStoreConnectionArray{
//						&diagflow.CxToolDataStoreSpecDataStoreConnectionArgs{
//							DataStoreType: pulumi.String("UNSTRUCTURED"),
//							DataStore: myDatastore.DataStoreId.ApplyT(func(dataStoreId string) (string, error) {
//								return fmt.Sprintf("projects/%v/locations/global/collections/default_collection/dataStores/%v", project.Number, dataStoreId), nil
//							}).(pulumi.StringOutput),
//							DocumentProcessingMode: pulumi.String("DOCUMENTS"),
//						},
//					},
//					FallbackPrompt: &diagflow.CxToolDataStoreSpecFallbackPromptArgs{},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myDatastore,
//				agent,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dialogflowcx Tool Function
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/diagflow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
//				DisplayName:         pulumi.String("dialogflowcx-agent-fucntion"),
//				Location:            pulumi.String("global"),
//				DefaultLanguageCode: pulumi.String("en"),
//				TimeZone:            pulumi.String("America/New_York"),
//				Description:         pulumi.String("Example description."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewCxTool(ctx, "function_tool", &diagflow.CxToolArgs{
//				Parent:      agent.ID(),
//				DisplayName: pulumi.String("Example Function Tool"),
//				Description: pulumi.String("Example Description"),
//				FunctionSpec: &diagflow.CxToolFunctionSpecArgs{
//					InputSchema: pulumi.String(`      {
//	        "type": "object",
//	        "properties": {
//	          "message_to_echo": {
//	            "type": "string",
//	            "description": "The message that should be echoed back."
//	          }
//	        },
//	        "required": [
//	          "message_to_echo"
//	        ]
//	      }
//
// `),
//
//					OutputSchema: pulumi.String(`      {
//	        "type": "object",
//	        "properties": {
//	          "echoed_message": {
//	            "type": "string",
//	            "description": "The message that is echoed back."
//	          }
//	        }
//	      }
//
// `),
//
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Tool can be imported using any of these accepted formats:
//
// * `{{parent}}/tools/{{name}}`
//
// * `{{parent}}/{{name}}`
//
// When using the `pulumi import` command, Tool can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:diagflow/cxTool:CxTool default {{parent}}/tools/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:diagflow/cxTool:CxTool default {{parent}}/{{name}}
// ```
type CxTool struct {
	pulumi.CustomResourceState

	// Data store search tool specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	DataStoreSpec CxToolDataStoreSpecPtrOutput `pulumi:"dataStoreSpec"`
	// High level description of the Tool and its usage.
	Description pulumi.StringOutput `pulumi:"description"`
	// The human-readable name of the tool, unique within the agent.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Client side executed function specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	FunctionSpec CxToolFunctionSpecPtrOutput `pulumi:"functionSpec"`
	// The unique identifier of the Tool.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/tools/<Tool ID>.
	Name pulumi.StringOutput `pulumi:"name"`
	// OpenAPI specification of the Tool.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	OpenApiSpec CxToolOpenApiSpecPtrOutput `pulumi:"openApiSpec"`
	// The agent to create a Tool for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
	// The tool type.
	ToolType pulumi.StringOutput `pulumi:"toolType"`
}

// NewCxTool registers a new resource with the given unique name, arguments, and options.
func NewCxTool(ctx *pulumi.Context,
	name string, args *CxToolArgs, opts ...pulumi.ResourceOption) (*CxTool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CxTool
	err := ctx.RegisterResource("gcp:diagflow/cxTool:CxTool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCxTool gets an existing CxTool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCxTool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CxToolState, opts ...pulumi.ResourceOption) (*CxTool, error) {
	var resource CxTool
	err := ctx.ReadResource("gcp:diagflow/cxTool:CxTool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CxTool resources.
type cxToolState struct {
	// Data store search tool specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	DataStoreSpec *CxToolDataStoreSpec `pulumi:"dataStoreSpec"`
	// High level description of the Tool and its usage.
	Description *string `pulumi:"description"`
	// The human-readable name of the tool, unique within the agent.
	DisplayName *string `pulumi:"displayName"`
	// Client side executed function specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	FunctionSpec *CxToolFunctionSpec `pulumi:"functionSpec"`
	// The unique identifier of the Tool.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/tools/<Tool ID>.
	Name *string `pulumi:"name"`
	// OpenAPI specification of the Tool.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	OpenApiSpec *CxToolOpenApiSpec `pulumi:"openApiSpec"`
	// The agent to create a Tool for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
	// The tool type.
	ToolType *string `pulumi:"toolType"`
}

type CxToolState struct {
	// Data store search tool specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	DataStoreSpec CxToolDataStoreSpecPtrInput
	// High level description of the Tool and its usage.
	Description pulumi.StringPtrInput
	// The human-readable name of the tool, unique within the agent.
	DisplayName pulumi.StringPtrInput
	// Client side executed function specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	FunctionSpec CxToolFunctionSpecPtrInput
	// The unique identifier of the Tool.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/tools/<Tool ID>.
	Name pulumi.StringPtrInput
	// OpenAPI specification of the Tool.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	OpenApiSpec CxToolOpenApiSpecPtrInput
	// The agent to create a Tool for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
	// The tool type.
	ToolType pulumi.StringPtrInput
}

func (CxToolState) ElementType() reflect.Type {
	return reflect.TypeOf((*cxToolState)(nil)).Elem()
}

type cxToolArgs struct {
	// Data store search tool specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	DataStoreSpec *CxToolDataStoreSpec `pulumi:"dataStoreSpec"`
	// High level description of the Tool and its usage.
	Description string `pulumi:"description"`
	// The human-readable name of the tool, unique within the agent.
	DisplayName string `pulumi:"displayName"`
	// Client side executed function specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	FunctionSpec *CxToolFunctionSpec `pulumi:"functionSpec"`
	// OpenAPI specification of the Tool.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	OpenApiSpec *CxToolOpenApiSpec `pulumi:"openApiSpec"`
	// The agent to create a Tool for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
}

// The set of arguments for constructing a CxTool resource.
type CxToolArgs struct {
	// Data store search tool specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	DataStoreSpec CxToolDataStoreSpecPtrInput
	// High level description of the Tool and its usage.
	Description pulumi.StringInput
	// The human-readable name of the tool, unique within the agent.
	DisplayName pulumi.StringInput
	// Client side executed function specification.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	FunctionSpec CxToolFunctionSpecPtrInput
	// OpenAPI specification of the Tool.
	// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
	// Structure is documented below.
	OpenApiSpec CxToolOpenApiSpecPtrInput
	// The agent to create a Tool for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
}

func (CxToolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cxToolArgs)(nil)).Elem()
}

type CxToolInput interface {
	pulumi.Input

	ToCxToolOutput() CxToolOutput
	ToCxToolOutputWithContext(ctx context.Context) CxToolOutput
}

func (*CxTool) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTool)(nil)).Elem()
}

func (i *CxTool) ToCxToolOutput() CxToolOutput {
	return i.ToCxToolOutputWithContext(context.Background())
}

func (i *CxTool) ToCxToolOutputWithContext(ctx context.Context) CxToolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxToolOutput)
}

// CxToolArrayInput is an input type that accepts CxToolArray and CxToolArrayOutput values.
// You can construct a concrete instance of `CxToolArrayInput` via:
//
//	CxToolArray{ CxToolArgs{...} }
type CxToolArrayInput interface {
	pulumi.Input

	ToCxToolArrayOutput() CxToolArrayOutput
	ToCxToolArrayOutputWithContext(context.Context) CxToolArrayOutput
}

type CxToolArray []CxToolInput

func (CxToolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxTool)(nil)).Elem()
}

func (i CxToolArray) ToCxToolArrayOutput() CxToolArrayOutput {
	return i.ToCxToolArrayOutputWithContext(context.Background())
}

func (i CxToolArray) ToCxToolArrayOutputWithContext(ctx context.Context) CxToolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxToolArrayOutput)
}

// CxToolMapInput is an input type that accepts CxToolMap and CxToolMapOutput values.
// You can construct a concrete instance of `CxToolMapInput` via:
//
//	CxToolMap{ "key": CxToolArgs{...} }
type CxToolMapInput interface {
	pulumi.Input

	ToCxToolMapOutput() CxToolMapOutput
	ToCxToolMapOutputWithContext(context.Context) CxToolMapOutput
}

type CxToolMap map[string]CxToolInput

func (CxToolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxTool)(nil)).Elem()
}

func (i CxToolMap) ToCxToolMapOutput() CxToolMapOutput {
	return i.ToCxToolMapOutputWithContext(context.Background())
}

func (i CxToolMap) ToCxToolMapOutputWithContext(ctx context.Context) CxToolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxToolMapOutput)
}

type CxToolOutput struct{ *pulumi.OutputState }

func (CxToolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTool)(nil)).Elem()
}

func (o CxToolOutput) ToCxToolOutput() CxToolOutput {
	return o
}

func (o CxToolOutput) ToCxToolOutputWithContext(ctx context.Context) CxToolOutput {
	return o
}

// Data store search tool specification.
// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
// Structure is documented below.
func (o CxToolOutput) DataStoreSpec() CxToolDataStoreSpecPtrOutput {
	return o.ApplyT(func(v *CxTool) CxToolDataStoreSpecPtrOutput { return v.DataStoreSpec }).(CxToolDataStoreSpecPtrOutput)
}

// High level description of the Tool and its usage.
func (o CxToolOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CxTool) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The human-readable name of the tool, unique within the agent.
func (o CxToolOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CxTool) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Client side executed function specification.
// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
// Structure is documented below.
func (o CxToolOutput) FunctionSpec() CxToolFunctionSpecPtrOutput {
	return o.ApplyT(func(v *CxTool) CxToolFunctionSpecPtrOutput { return v.FunctionSpec }).(CxToolFunctionSpecPtrOutput)
}

// The unique identifier of the Tool.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/tools/<Tool ID>.
func (o CxToolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CxTool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// OpenAPI specification of the Tool.
// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
// Structure is documented below.
func (o CxToolOutput) OpenApiSpec() CxToolOpenApiSpecPtrOutput {
	return o.ApplyT(func(v *CxTool) CxToolOpenApiSpecPtrOutput { return v.OpenApiSpec }).(CxToolOpenApiSpecPtrOutput)
}

// The agent to create a Tool for.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
func (o CxToolOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTool) pulumi.StringPtrOutput { return v.Parent }).(pulumi.StringPtrOutput)
}

// The tool type.
func (o CxToolOutput) ToolType() pulumi.StringOutput {
	return o.ApplyT(func(v *CxTool) pulumi.StringOutput { return v.ToolType }).(pulumi.StringOutput)
}

type CxToolArrayOutput struct{ *pulumi.OutputState }

func (CxToolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxTool)(nil)).Elem()
}

func (o CxToolArrayOutput) ToCxToolArrayOutput() CxToolArrayOutput {
	return o
}

func (o CxToolArrayOutput) ToCxToolArrayOutputWithContext(ctx context.Context) CxToolArrayOutput {
	return o
}

func (o CxToolArrayOutput) Index(i pulumi.IntInput) CxToolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CxTool {
		return vs[0].([]*CxTool)[vs[1].(int)]
	}).(CxToolOutput)
}

type CxToolMapOutput struct{ *pulumi.OutputState }

func (CxToolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxTool)(nil)).Elem()
}

func (o CxToolMapOutput) ToCxToolMapOutput() CxToolMapOutput {
	return o
}

func (o CxToolMapOutput) ToCxToolMapOutputWithContext(ctx context.Context) CxToolMapOutput {
	return o
}

func (o CxToolMapOutput) MapIndex(k pulumi.StringInput) CxToolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CxTool {
		return vs[0].(map[string]*CxTool)[vs[1].(string)]
	}).(CxToolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CxToolInput)(nil)).Elem(), &CxTool{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxToolArrayInput)(nil)).Elem(), CxToolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxToolMapInput)(nil)).Elem(), CxToolMap{})
	pulumi.RegisterOutputType(CxToolOutput{})
	pulumi.RegisterOutputType(CxToolArrayOutput{})
	pulumi.RegisterOutputType(CxToolMapOutput{})
}
