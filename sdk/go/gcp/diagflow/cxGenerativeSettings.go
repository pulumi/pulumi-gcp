// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Settings for Generative AI.
//
// To get more information about GenerativeSettings, see:
//
// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents/getGenerativeSettings)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
//
// ## Example Usage
//
// ### Dialogflowcx Generative Settings Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/diagflow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
//				DisplayName:         pulumi.String("dialogflowcx-agent"),
//				Location:            pulumi.String("global"),
//				DefaultLanguageCode: pulumi.String("en"),
//				TimeZone:            pulumi.String("America/New_York"),
//				Description:         pulumi.String("Example description."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewCxGenerativeSettings(ctx, "full_generative_settings", &diagflow.CxGenerativeSettingsArgs{
//				Parent: agent.ID(),
//				FallbackSettings: &diagflow.CxGenerativeSettingsFallbackSettingsArgs{
//					SelectedPrompt: pulumi.String("example prompt"),
//					PromptTemplates: diagflow.CxGenerativeSettingsFallbackSettingsPromptTemplateArray{
//						&diagflow.CxGenerativeSettingsFallbackSettingsPromptTemplateArgs{
//							DisplayName: pulumi.String("example prompt"),
//							PromptText:  pulumi.String("example prompt text"),
//							Frozen:      pulumi.Bool(false),
//						},
//					},
//				},
//				GenerativeSafetySettings: &diagflow.CxGenerativeSettingsGenerativeSafetySettingsArgs{
//					DefaultBannedPhraseMatchStrategy: pulumi.String("PARTIAL_MATCH"),
//					BannedPhrases: diagflow.CxGenerativeSettingsGenerativeSafetySettingsBannedPhraseArray{
//						&diagflow.CxGenerativeSettingsGenerativeSafetySettingsBannedPhraseArgs{
//							Text:         pulumi.String("example text"),
//							LanguageCode: pulumi.String("en"),
//						},
//					},
//				},
//				KnowledgeConnectorSettings: &diagflow.CxGenerativeSettingsKnowledgeConnectorSettingsArgs{
//					Business:                 pulumi.String("example business"),
//					Agent:                    pulumi.String("example agent"),
//					AgentIdentity:            pulumi.String("virtual agent"),
//					BusinessDescription:      pulumi.String("a family company selling freshly roasted coffee beans"),
//					AgentScope:               pulumi.String("Example company website"),
//					DisableDataStoreFallback: pulumi.Bool(false),
//				},
//				LanguageCode: pulumi.String("en"),
//				LlmModelSettings: &diagflow.CxGenerativeSettingsLlmModelSettingsArgs{
//					Model:      pulumi.String("gemini-2.0-flash-001"),
//					PromptText: pulumi.String("example prompt text"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GenerativeSettings can be imported using any of these accepted formats:
//
// * `{{parent}}/generativeSettings`
//
// * `{{parent}}`
//
// When using the `pulumi import` command, GenerativeSettings can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:diagflow/cxGenerativeSettings:CxGenerativeSettings default {{parent}}/generativeSettings
// ```
//
// ```sh
// $ pulumi import gcp:diagflow/cxGenerativeSettings:CxGenerativeSettings default {{parent}}
// ```
type CxGenerativeSettings struct {
	pulumi.CustomResourceState

	// Settings for Generative Fallback.
	// Structure is documented below.
	FallbackSettings CxGenerativeSettingsFallbackSettingsPtrOutput `pulumi:"fallbackSettings"`
	// Settings for Generative Safety.
	// w
	// Structure is documented below.
	GenerativeSafetySettings CxGenerativeSettingsGenerativeSafetySettingsPtrOutput `pulumi:"generativeSafetySettings"`
	// Settings for knowledge connector.
	// Structure is documented below.
	KnowledgeConnectorSettings CxGenerativeSettingsKnowledgeConnectorSettingsPtrOutput `pulumi:"knowledgeConnectorSettings"`
	// Language for this settings.
	LanguageCode pulumi.StringOutput `pulumi:"languageCode"`
	// LLM model settings.
	// Structure is documented below.
	LlmModelSettings CxGenerativeSettingsLlmModelSettingsPtrOutput `pulumi:"llmModelSettings"`
	// The unique identifier of the generativeSettings.
	// Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings.
	Name pulumi.StringOutput `pulumi:"name"`
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
}

// NewCxGenerativeSettings registers a new resource with the given unique name, arguments, and options.
func NewCxGenerativeSettings(ctx *pulumi.Context,
	name string, args *CxGenerativeSettingsArgs, opts ...pulumi.ResourceOption) (*CxGenerativeSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CxGenerativeSettings
	err := ctx.RegisterResource("gcp:diagflow/cxGenerativeSettings:CxGenerativeSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCxGenerativeSettings gets an existing CxGenerativeSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCxGenerativeSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CxGenerativeSettingsState, opts ...pulumi.ResourceOption) (*CxGenerativeSettings, error) {
	var resource CxGenerativeSettings
	err := ctx.ReadResource("gcp:diagflow/cxGenerativeSettings:CxGenerativeSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CxGenerativeSettings resources.
type cxGenerativeSettingsState struct {
	// Settings for Generative Fallback.
	// Structure is documented below.
	FallbackSettings *CxGenerativeSettingsFallbackSettings `pulumi:"fallbackSettings"`
	// Settings for Generative Safety.
	// w
	// Structure is documented below.
	GenerativeSafetySettings *CxGenerativeSettingsGenerativeSafetySettings `pulumi:"generativeSafetySettings"`
	// Settings for knowledge connector.
	// Structure is documented below.
	KnowledgeConnectorSettings *CxGenerativeSettingsKnowledgeConnectorSettings `pulumi:"knowledgeConnectorSettings"`
	// Language for this settings.
	LanguageCode *string `pulumi:"languageCode"`
	// LLM model settings.
	// Structure is documented below.
	LlmModelSettings *CxGenerativeSettingsLlmModelSettings `pulumi:"llmModelSettings"`
	// The unique identifier of the generativeSettings.
	// Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings.
	Name *string `pulumi:"name"`
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
}

type CxGenerativeSettingsState struct {
	// Settings for Generative Fallback.
	// Structure is documented below.
	FallbackSettings CxGenerativeSettingsFallbackSettingsPtrInput
	// Settings for Generative Safety.
	// w
	// Structure is documented below.
	GenerativeSafetySettings CxGenerativeSettingsGenerativeSafetySettingsPtrInput
	// Settings for knowledge connector.
	// Structure is documented below.
	KnowledgeConnectorSettings CxGenerativeSettingsKnowledgeConnectorSettingsPtrInput
	// Language for this settings.
	LanguageCode pulumi.StringPtrInput
	// LLM model settings.
	// Structure is documented below.
	LlmModelSettings CxGenerativeSettingsLlmModelSettingsPtrInput
	// The unique identifier of the generativeSettings.
	// Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings.
	Name pulumi.StringPtrInput
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
}

func (CxGenerativeSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*cxGenerativeSettingsState)(nil)).Elem()
}

type cxGenerativeSettingsArgs struct {
	// Settings for Generative Fallback.
	// Structure is documented below.
	FallbackSettings *CxGenerativeSettingsFallbackSettings `pulumi:"fallbackSettings"`
	// Settings for Generative Safety.
	// w
	// Structure is documented below.
	GenerativeSafetySettings *CxGenerativeSettingsGenerativeSafetySettings `pulumi:"generativeSafetySettings"`
	// Settings for knowledge connector.
	// Structure is documented below.
	KnowledgeConnectorSettings *CxGenerativeSettingsKnowledgeConnectorSettings `pulumi:"knowledgeConnectorSettings"`
	// Language for this settings.
	LanguageCode string `pulumi:"languageCode"`
	// LLM model settings.
	// Structure is documented below.
	LlmModelSettings *CxGenerativeSettingsLlmModelSettings `pulumi:"llmModelSettings"`
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
}

// The set of arguments for constructing a CxGenerativeSettings resource.
type CxGenerativeSettingsArgs struct {
	// Settings for Generative Fallback.
	// Structure is documented below.
	FallbackSettings CxGenerativeSettingsFallbackSettingsPtrInput
	// Settings for Generative Safety.
	// w
	// Structure is documented below.
	GenerativeSafetySettings CxGenerativeSettingsGenerativeSafetySettingsPtrInput
	// Settings for knowledge connector.
	// Structure is documented below.
	KnowledgeConnectorSettings CxGenerativeSettingsKnowledgeConnectorSettingsPtrInput
	// Language for this settings.
	LanguageCode pulumi.StringInput
	// LLM model settings.
	// Structure is documented below.
	LlmModelSettings CxGenerativeSettingsLlmModelSettingsPtrInput
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
}

func (CxGenerativeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cxGenerativeSettingsArgs)(nil)).Elem()
}

type CxGenerativeSettingsInput interface {
	pulumi.Input

	ToCxGenerativeSettingsOutput() CxGenerativeSettingsOutput
	ToCxGenerativeSettingsOutputWithContext(ctx context.Context) CxGenerativeSettingsOutput
}

func (*CxGenerativeSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**CxGenerativeSettings)(nil)).Elem()
}

func (i *CxGenerativeSettings) ToCxGenerativeSettingsOutput() CxGenerativeSettingsOutput {
	return i.ToCxGenerativeSettingsOutputWithContext(context.Background())
}

func (i *CxGenerativeSettings) ToCxGenerativeSettingsOutputWithContext(ctx context.Context) CxGenerativeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxGenerativeSettingsOutput)
}

// CxGenerativeSettingsArrayInput is an input type that accepts CxGenerativeSettingsArray and CxGenerativeSettingsArrayOutput values.
// You can construct a concrete instance of `CxGenerativeSettingsArrayInput` via:
//
//	CxGenerativeSettingsArray{ CxGenerativeSettingsArgs{...} }
type CxGenerativeSettingsArrayInput interface {
	pulumi.Input

	ToCxGenerativeSettingsArrayOutput() CxGenerativeSettingsArrayOutput
	ToCxGenerativeSettingsArrayOutputWithContext(context.Context) CxGenerativeSettingsArrayOutput
}

type CxGenerativeSettingsArray []CxGenerativeSettingsInput

func (CxGenerativeSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxGenerativeSettings)(nil)).Elem()
}

func (i CxGenerativeSettingsArray) ToCxGenerativeSettingsArrayOutput() CxGenerativeSettingsArrayOutput {
	return i.ToCxGenerativeSettingsArrayOutputWithContext(context.Background())
}

func (i CxGenerativeSettingsArray) ToCxGenerativeSettingsArrayOutputWithContext(ctx context.Context) CxGenerativeSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxGenerativeSettingsArrayOutput)
}

// CxGenerativeSettingsMapInput is an input type that accepts CxGenerativeSettingsMap and CxGenerativeSettingsMapOutput values.
// You can construct a concrete instance of `CxGenerativeSettingsMapInput` via:
//
//	CxGenerativeSettingsMap{ "key": CxGenerativeSettingsArgs{...} }
type CxGenerativeSettingsMapInput interface {
	pulumi.Input

	ToCxGenerativeSettingsMapOutput() CxGenerativeSettingsMapOutput
	ToCxGenerativeSettingsMapOutputWithContext(context.Context) CxGenerativeSettingsMapOutput
}

type CxGenerativeSettingsMap map[string]CxGenerativeSettingsInput

func (CxGenerativeSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxGenerativeSettings)(nil)).Elem()
}

func (i CxGenerativeSettingsMap) ToCxGenerativeSettingsMapOutput() CxGenerativeSettingsMapOutput {
	return i.ToCxGenerativeSettingsMapOutputWithContext(context.Background())
}

func (i CxGenerativeSettingsMap) ToCxGenerativeSettingsMapOutputWithContext(ctx context.Context) CxGenerativeSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxGenerativeSettingsMapOutput)
}

type CxGenerativeSettingsOutput struct{ *pulumi.OutputState }

func (CxGenerativeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxGenerativeSettings)(nil)).Elem()
}

func (o CxGenerativeSettingsOutput) ToCxGenerativeSettingsOutput() CxGenerativeSettingsOutput {
	return o
}

func (o CxGenerativeSettingsOutput) ToCxGenerativeSettingsOutputWithContext(ctx context.Context) CxGenerativeSettingsOutput {
	return o
}

// Settings for Generative Fallback.
// Structure is documented below.
func (o CxGenerativeSettingsOutput) FallbackSettings() CxGenerativeSettingsFallbackSettingsPtrOutput {
	return o.ApplyT(func(v *CxGenerativeSettings) CxGenerativeSettingsFallbackSettingsPtrOutput { return v.FallbackSettings }).(CxGenerativeSettingsFallbackSettingsPtrOutput)
}

// Settings for Generative Safety.
// w
// Structure is documented below.
func (o CxGenerativeSettingsOutput) GenerativeSafetySettings() CxGenerativeSettingsGenerativeSafetySettingsPtrOutput {
	return o.ApplyT(func(v *CxGenerativeSettings) CxGenerativeSettingsGenerativeSafetySettingsPtrOutput {
		return v.GenerativeSafetySettings
	}).(CxGenerativeSettingsGenerativeSafetySettingsPtrOutput)
}

// Settings for knowledge connector.
// Structure is documented below.
func (o CxGenerativeSettingsOutput) KnowledgeConnectorSettings() CxGenerativeSettingsKnowledgeConnectorSettingsPtrOutput {
	return o.ApplyT(func(v *CxGenerativeSettings) CxGenerativeSettingsKnowledgeConnectorSettingsPtrOutput {
		return v.KnowledgeConnectorSettings
	}).(CxGenerativeSettingsKnowledgeConnectorSettingsPtrOutput)
}

// Language for this settings.
func (o CxGenerativeSettingsOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *CxGenerativeSettings) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

// LLM model settings.
// Structure is documented below.
func (o CxGenerativeSettingsOutput) LlmModelSettings() CxGenerativeSettingsLlmModelSettingsPtrOutput {
	return o.ApplyT(func(v *CxGenerativeSettings) CxGenerativeSettingsLlmModelSettingsPtrOutput { return v.LlmModelSettings }).(CxGenerativeSettingsLlmModelSettingsPtrOutput)
}

// The unique identifier of the generativeSettings.
// Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings.
func (o CxGenerativeSettingsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CxGenerativeSettings) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The agent to create a flow for.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
func (o CxGenerativeSettingsOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxGenerativeSettings) pulumi.StringPtrOutput { return v.Parent }).(pulumi.StringPtrOutput)
}

type CxGenerativeSettingsArrayOutput struct{ *pulumi.OutputState }

func (CxGenerativeSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxGenerativeSettings)(nil)).Elem()
}

func (o CxGenerativeSettingsArrayOutput) ToCxGenerativeSettingsArrayOutput() CxGenerativeSettingsArrayOutput {
	return o
}

func (o CxGenerativeSettingsArrayOutput) ToCxGenerativeSettingsArrayOutputWithContext(ctx context.Context) CxGenerativeSettingsArrayOutput {
	return o
}

func (o CxGenerativeSettingsArrayOutput) Index(i pulumi.IntInput) CxGenerativeSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CxGenerativeSettings {
		return vs[0].([]*CxGenerativeSettings)[vs[1].(int)]
	}).(CxGenerativeSettingsOutput)
}

type CxGenerativeSettingsMapOutput struct{ *pulumi.OutputState }

func (CxGenerativeSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxGenerativeSettings)(nil)).Elem()
}

func (o CxGenerativeSettingsMapOutput) ToCxGenerativeSettingsMapOutput() CxGenerativeSettingsMapOutput {
	return o
}

func (o CxGenerativeSettingsMapOutput) ToCxGenerativeSettingsMapOutputWithContext(ctx context.Context) CxGenerativeSettingsMapOutput {
	return o
}

func (o CxGenerativeSettingsMapOutput) MapIndex(k pulumi.StringInput) CxGenerativeSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CxGenerativeSettings {
		return vs[0].(map[string]*CxGenerativeSettings)[vs[1].(string)]
	}).(CxGenerativeSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CxGenerativeSettingsInput)(nil)).Elem(), &CxGenerativeSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxGenerativeSettingsArrayInput)(nil)).Elem(), CxGenerativeSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxGenerativeSettingsMapInput)(nil)).Elem(), CxGenerativeSettingsMap{})
	pulumi.RegisterOutputType(CxGenerativeSettingsOutput{})
	pulumi.RegisterOutputType(CxGenerativeSettingsArrayOutput{})
	pulumi.RegisterOutputType(CxGenerativeSettingsMapOutput{})
}
