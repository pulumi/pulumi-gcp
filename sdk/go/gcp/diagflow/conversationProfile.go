// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A conversation profile configures a set of parameters that control the suggestions made to an agent. These parameters control the suggestions that are surfaced during runtime. Each profile configures either a Dialogflow virtual agent or a human agent for a conversation.
//
// To get more information about ConversationProfile, see:
//
// * [API documentation](https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects/conversationProfiles)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/dialogflow/docs/)
//
// ## Example Usage
//
// ### Dialogflow Conversation Profile Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/diagflow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicAgent, err := diagflow.NewAgent(ctx, "basic_agent", &diagflow.AgentArgs{
//				DisplayName:         pulumi.String("example_agent"),
//				DefaultLanguageCode: pulumi.String("en-us"),
//				TimeZone:            pulumi.String("America/New_York"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewConversationProfile(ctx, "basic_profile", &diagflow.ConversationProfileArgs{
//				DisplayName: pulumi.String("dialogflow-profile"),
//				Location:    pulumi.String("global"),
//				AutomatedAgentConfig: &diagflow.ConversationProfileAutomatedAgentConfigArgs{
//					Agent: basicAgent.ID().ApplyT(func(id string) (string, error) {
//						return fmt.Sprintf("projects/%v/locations/global/agent/environments/draft", id), nil
//					}).(pulumi.StringOutput),
//				},
//				HumanAgentAssistantConfig: &diagflow.ConversationProfileHumanAgentAssistantConfigArgs{
//					MessageAnalysisConfig: &diagflow.ConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigArgs{
//						EnableEntityExtraction:  pulumi.Bool(true),
//						EnableSentimentAnalysis: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ConversationProfile can be imported using any of these accepted formats:
//
// * `{{name}}`
//
// When using the `pulumi import` command, ConversationProfile can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:diagflow/conversationProfile:ConversationProfile default {{name}}
// ```
type ConversationProfile struct {
	pulumi.CustomResourceState

	// Configuration for an automated agent to use with this profile
	// Structure is documented below.
	AutomatedAgentConfig ConversationProfileAutomatedAgentConfigPtrOutput `pulumi:"automatedAgentConfig"`
	// Required. Human readable name for this profile. Max length 1024 bytes.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Configuration for connecting to a live agent
	// Structure is documented below.
	HumanAgentAssistantConfig ConversationProfileHumanAgentAssistantConfigPtrOutput `pulumi:"humanAgentAssistantConfig"`
	// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
	// Structure is documented below.
	HumanAgentHandoffConfig ConversationProfileHumanAgentHandoffConfigPtrOutput `pulumi:"humanAgentHandoffConfig"`
	// Language code for the conversation profile. This should be a BCP-47 language tag.
	LanguageCode pulumi.StringOutput `pulumi:"languageCode"`
	// desc
	Location pulumi.StringOutput `pulumi:"location"`
	// Defines logging behavior for conversation lifecycle events.
	// Structure is documented below.
	LoggingConfig ConversationProfileLoggingConfigPtrOutput `pulumi:"loggingConfig"`
	// name
	Name pulumi.StringOutput `pulumi:"name"`
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NewMessageEventNotificationConfig ConversationProfileNewMessageEventNotificationConfigPtrOutput `pulumi:"newMessageEventNotificationConfig"`
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NotificationConfig ConversationProfileNotificationConfigPtrOutput `pulumi:"notificationConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Name of the CX SecuritySettings reference for the agent.
	SecuritySettings pulumi.StringPtrOutput `pulumi:"securitySettings"`
	// Settings for speech transcription.
	// Structure is documented below.
	SttConfig ConversationProfileSttConfigPtrOutput `pulumi:"sttConfig"`
	// The time zone of this conversational profile.
	TimeZone pulumi.StringPtrOutput `pulumi:"timeZone"`
	// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
	// Structure is documented below.
	TtsConfig ConversationProfileTtsConfigPtrOutput `pulumi:"ttsConfig"`
}

// NewConversationProfile registers a new resource with the given unique name, arguments, and options.
func NewConversationProfile(ctx *pulumi.Context,
	name string, args *ConversationProfileArgs, opts ...pulumi.ResourceOption) (*ConversationProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConversationProfile
	err := ctx.RegisterResource("gcp:diagflow/conversationProfile:ConversationProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConversationProfile gets an existing ConversationProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConversationProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConversationProfileState, opts ...pulumi.ResourceOption) (*ConversationProfile, error) {
	var resource ConversationProfile
	err := ctx.ReadResource("gcp:diagflow/conversationProfile:ConversationProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConversationProfile resources.
type conversationProfileState struct {
	// Configuration for an automated agent to use with this profile
	// Structure is documented below.
	AutomatedAgentConfig *ConversationProfileAutomatedAgentConfig `pulumi:"automatedAgentConfig"`
	// Required. Human readable name for this profile. Max length 1024 bytes.
	DisplayName *string `pulumi:"displayName"`
	// Configuration for connecting to a live agent
	// Structure is documented below.
	HumanAgentAssistantConfig *ConversationProfileHumanAgentAssistantConfig `pulumi:"humanAgentAssistantConfig"`
	// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
	// Structure is documented below.
	HumanAgentHandoffConfig *ConversationProfileHumanAgentHandoffConfig `pulumi:"humanAgentHandoffConfig"`
	// Language code for the conversation profile. This should be a BCP-47 language tag.
	LanguageCode *string `pulumi:"languageCode"`
	// desc
	Location *string `pulumi:"location"`
	// Defines logging behavior for conversation lifecycle events.
	// Structure is documented below.
	LoggingConfig *ConversationProfileLoggingConfig `pulumi:"loggingConfig"`
	// name
	Name *string `pulumi:"name"`
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NewMessageEventNotificationConfig *ConversationProfileNewMessageEventNotificationConfig `pulumi:"newMessageEventNotificationConfig"`
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NotificationConfig *ConversationProfileNotificationConfig `pulumi:"notificationConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Name of the CX SecuritySettings reference for the agent.
	SecuritySettings *string `pulumi:"securitySettings"`
	// Settings for speech transcription.
	// Structure is documented below.
	SttConfig *ConversationProfileSttConfig `pulumi:"sttConfig"`
	// The time zone of this conversational profile.
	TimeZone *string `pulumi:"timeZone"`
	// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
	// Structure is documented below.
	TtsConfig *ConversationProfileTtsConfig `pulumi:"ttsConfig"`
}

type ConversationProfileState struct {
	// Configuration for an automated agent to use with this profile
	// Structure is documented below.
	AutomatedAgentConfig ConversationProfileAutomatedAgentConfigPtrInput
	// Required. Human readable name for this profile. Max length 1024 bytes.
	DisplayName pulumi.StringPtrInput
	// Configuration for connecting to a live agent
	// Structure is documented below.
	HumanAgentAssistantConfig ConversationProfileHumanAgentAssistantConfigPtrInput
	// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
	// Structure is documented below.
	HumanAgentHandoffConfig ConversationProfileHumanAgentHandoffConfigPtrInput
	// Language code for the conversation profile. This should be a BCP-47 language tag.
	LanguageCode pulumi.StringPtrInput
	// desc
	Location pulumi.StringPtrInput
	// Defines logging behavior for conversation lifecycle events.
	// Structure is documented below.
	LoggingConfig ConversationProfileLoggingConfigPtrInput
	// name
	Name pulumi.StringPtrInput
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NewMessageEventNotificationConfig ConversationProfileNewMessageEventNotificationConfigPtrInput
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NotificationConfig ConversationProfileNotificationConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Name of the CX SecuritySettings reference for the agent.
	SecuritySettings pulumi.StringPtrInput
	// Settings for speech transcription.
	// Structure is documented below.
	SttConfig ConversationProfileSttConfigPtrInput
	// The time zone of this conversational profile.
	TimeZone pulumi.StringPtrInput
	// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
	// Structure is documented below.
	TtsConfig ConversationProfileTtsConfigPtrInput
}

func (ConversationProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*conversationProfileState)(nil)).Elem()
}

type conversationProfileArgs struct {
	// Configuration for an automated agent to use with this profile
	// Structure is documented below.
	AutomatedAgentConfig *ConversationProfileAutomatedAgentConfig `pulumi:"automatedAgentConfig"`
	// Required. Human readable name for this profile. Max length 1024 bytes.
	DisplayName string `pulumi:"displayName"`
	// Configuration for connecting to a live agent
	// Structure is documented below.
	HumanAgentAssistantConfig *ConversationProfileHumanAgentAssistantConfig `pulumi:"humanAgentAssistantConfig"`
	// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
	// Structure is documented below.
	HumanAgentHandoffConfig *ConversationProfileHumanAgentHandoffConfig `pulumi:"humanAgentHandoffConfig"`
	// Language code for the conversation profile. This should be a BCP-47 language tag.
	LanguageCode *string `pulumi:"languageCode"`
	// desc
	Location string `pulumi:"location"`
	// Defines logging behavior for conversation lifecycle events.
	// Structure is documented below.
	LoggingConfig *ConversationProfileLoggingConfig `pulumi:"loggingConfig"`
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NewMessageEventNotificationConfig *ConversationProfileNewMessageEventNotificationConfig `pulumi:"newMessageEventNotificationConfig"`
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NotificationConfig *ConversationProfileNotificationConfig `pulumi:"notificationConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Name of the CX SecuritySettings reference for the agent.
	SecuritySettings *string `pulumi:"securitySettings"`
	// Settings for speech transcription.
	// Structure is documented below.
	SttConfig *ConversationProfileSttConfig `pulumi:"sttConfig"`
	// The time zone of this conversational profile.
	TimeZone *string `pulumi:"timeZone"`
	// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
	// Structure is documented below.
	TtsConfig *ConversationProfileTtsConfig `pulumi:"ttsConfig"`
}

// The set of arguments for constructing a ConversationProfile resource.
type ConversationProfileArgs struct {
	// Configuration for an automated agent to use with this profile
	// Structure is documented below.
	AutomatedAgentConfig ConversationProfileAutomatedAgentConfigPtrInput
	// Required. Human readable name for this profile. Max length 1024 bytes.
	DisplayName pulumi.StringInput
	// Configuration for connecting to a live agent
	// Structure is documented below.
	HumanAgentAssistantConfig ConversationProfileHumanAgentAssistantConfigPtrInput
	// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
	// Structure is documented below.
	HumanAgentHandoffConfig ConversationProfileHumanAgentHandoffConfigPtrInput
	// Language code for the conversation profile. This should be a BCP-47 language tag.
	LanguageCode pulumi.StringPtrInput
	// desc
	Location pulumi.StringInput
	// Defines logging behavior for conversation lifecycle events.
	// Structure is documented below.
	LoggingConfig ConversationProfileLoggingConfigPtrInput
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NewMessageEventNotificationConfig ConversationProfileNewMessageEventNotificationConfigPtrInput
	// Pub/Sub topic on which to publish new agent assistant events.
	// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
	// Structure is documented below.
	NotificationConfig ConversationProfileNotificationConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Name of the CX SecuritySettings reference for the agent.
	SecuritySettings pulumi.StringPtrInput
	// Settings for speech transcription.
	// Structure is documented below.
	SttConfig ConversationProfileSttConfigPtrInput
	// The time zone of this conversational profile.
	TimeZone pulumi.StringPtrInput
	// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
	// Structure is documented below.
	TtsConfig ConversationProfileTtsConfigPtrInput
}

func (ConversationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conversationProfileArgs)(nil)).Elem()
}

type ConversationProfileInput interface {
	pulumi.Input

	ToConversationProfileOutput() ConversationProfileOutput
	ToConversationProfileOutputWithContext(ctx context.Context) ConversationProfileOutput
}

func (*ConversationProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**ConversationProfile)(nil)).Elem()
}

func (i *ConversationProfile) ToConversationProfileOutput() ConversationProfileOutput {
	return i.ToConversationProfileOutputWithContext(context.Background())
}

func (i *ConversationProfile) ToConversationProfileOutputWithContext(ctx context.Context) ConversationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConversationProfileOutput)
}

// ConversationProfileArrayInput is an input type that accepts ConversationProfileArray and ConversationProfileArrayOutput values.
// You can construct a concrete instance of `ConversationProfileArrayInput` via:
//
//	ConversationProfileArray{ ConversationProfileArgs{...} }
type ConversationProfileArrayInput interface {
	pulumi.Input

	ToConversationProfileArrayOutput() ConversationProfileArrayOutput
	ToConversationProfileArrayOutputWithContext(context.Context) ConversationProfileArrayOutput
}

type ConversationProfileArray []ConversationProfileInput

func (ConversationProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConversationProfile)(nil)).Elem()
}

func (i ConversationProfileArray) ToConversationProfileArrayOutput() ConversationProfileArrayOutput {
	return i.ToConversationProfileArrayOutputWithContext(context.Background())
}

func (i ConversationProfileArray) ToConversationProfileArrayOutputWithContext(ctx context.Context) ConversationProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConversationProfileArrayOutput)
}

// ConversationProfileMapInput is an input type that accepts ConversationProfileMap and ConversationProfileMapOutput values.
// You can construct a concrete instance of `ConversationProfileMapInput` via:
//
//	ConversationProfileMap{ "key": ConversationProfileArgs{...} }
type ConversationProfileMapInput interface {
	pulumi.Input

	ToConversationProfileMapOutput() ConversationProfileMapOutput
	ToConversationProfileMapOutputWithContext(context.Context) ConversationProfileMapOutput
}

type ConversationProfileMap map[string]ConversationProfileInput

func (ConversationProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConversationProfile)(nil)).Elem()
}

func (i ConversationProfileMap) ToConversationProfileMapOutput() ConversationProfileMapOutput {
	return i.ToConversationProfileMapOutputWithContext(context.Background())
}

func (i ConversationProfileMap) ToConversationProfileMapOutputWithContext(ctx context.Context) ConversationProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConversationProfileMapOutput)
}

type ConversationProfileOutput struct{ *pulumi.OutputState }

func (ConversationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConversationProfile)(nil)).Elem()
}

func (o ConversationProfileOutput) ToConversationProfileOutput() ConversationProfileOutput {
	return o
}

func (o ConversationProfileOutput) ToConversationProfileOutputWithContext(ctx context.Context) ConversationProfileOutput {
	return o
}

// Configuration for an automated agent to use with this profile
// Structure is documented below.
func (o ConversationProfileOutput) AutomatedAgentConfig() ConversationProfileAutomatedAgentConfigPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) ConversationProfileAutomatedAgentConfigPtrOutput {
		return v.AutomatedAgentConfig
	}).(ConversationProfileAutomatedAgentConfigPtrOutput)
}

// Required. Human readable name for this profile. Max length 1024 bytes.
func (o ConversationProfileOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversationProfile) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Configuration for connecting to a live agent
// Structure is documented below.
func (o ConversationProfileOutput) HumanAgentAssistantConfig() ConversationProfileHumanAgentAssistantConfigPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) ConversationProfileHumanAgentAssistantConfigPtrOutput {
		return v.HumanAgentAssistantConfig
	}).(ConversationProfileHumanAgentAssistantConfigPtrOutput)
}

// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
// Structure is documented below.
func (o ConversationProfileOutput) HumanAgentHandoffConfig() ConversationProfileHumanAgentHandoffConfigPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) ConversationProfileHumanAgentHandoffConfigPtrOutput {
		return v.HumanAgentHandoffConfig
	}).(ConversationProfileHumanAgentHandoffConfigPtrOutput)
}

// Language code for the conversation profile. This should be a BCP-47 language tag.
func (o ConversationProfileOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversationProfile) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

// desc
func (o ConversationProfileOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversationProfile) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Defines logging behavior for conversation lifecycle events.
// Structure is documented below.
func (o ConversationProfileOutput) LoggingConfig() ConversationProfileLoggingConfigPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) ConversationProfileLoggingConfigPtrOutput { return v.LoggingConfig }).(ConversationProfileLoggingConfigPtrOutput)
}

// name
func (o ConversationProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversationProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Pub/Sub topic on which to publish new agent assistant events.
// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
// Structure is documented below.
func (o ConversationProfileOutput) NewMessageEventNotificationConfig() ConversationProfileNewMessageEventNotificationConfigPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) ConversationProfileNewMessageEventNotificationConfigPtrOutput {
		return v.NewMessageEventNotificationConfig
	}).(ConversationProfileNewMessageEventNotificationConfigPtrOutput)
}

// Pub/Sub topic on which to publish new agent assistant events.
// Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"
// Structure is documented below.
func (o ConversationProfileOutput) NotificationConfig() ConversationProfileNotificationConfigPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) ConversationProfileNotificationConfigPtrOutput {
		return v.NotificationConfig
	}).(ConversationProfileNotificationConfigPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConversationProfileOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversationProfile) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Name of the CX SecuritySettings reference for the agent.
func (o ConversationProfileOutput) SecuritySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) pulumi.StringPtrOutput { return v.SecuritySettings }).(pulumi.StringPtrOutput)
}

// Settings for speech transcription.
// Structure is documented below.
func (o ConversationProfileOutput) SttConfig() ConversationProfileSttConfigPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) ConversationProfileSttConfigPtrOutput { return v.SttConfig }).(ConversationProfileSttConfigPtrOutput)
}

// The time zone of this conversational profile.
func (o ConversationProfileOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) pulumi.StringPtrOutput { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
// Structure is documented below.
func (o ConversationProfileOutput) TtsConfig() ConversationProfileTtsConfigPtrOutput {
	return o.ApplyT(func(v *ConversationProfile) ConversationProfileTtsConfigPtrOutput { return v.TtsConfig }).(ConversationProfileTtsConfigPtrOutput)
}

type ConversationProfileArrayOutput struct{ *pulumi.OutputState }

func (ConversationProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConversationProfile)(nil)).Elem()
}

func (o ConversationProfileArrayOutput) ToConversationProfileArrayOutput() ConversationProfileArrayOutput {
	return o
}

func (o ConversationProfileArrayOutput) ToConversationProfileArrayOutputWithContext(ctx context.Context) ConversationProfileArrayOutput {
	return o
}

func (o ConversationProfileArrayOutput) Index(i pulumi.IntInput) ConversationProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConversationProfile {
		return vs[0].([]*ConversationProfile)[vs[1].(int)]
	}).(ConversationProfileOutput)
}

type ConversationProfileMapOutput struct{ *pulumi.OutputState }

func (ConversationProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConversationProfile)(nil)).Elem()
}

func (o ConversationProfileMapOutput) ToConversationProfileMapOutput() ConversationProfileMapOutput {
	return o
}

func (o ConversationProfileMapOutput) ToConversationProfileMapOutputWithContext(ctx context.Context) ConversationProfileMapOutput {
	return o
}

func (o ConversationProfileMapOutput) MapIndex(k pulumi.StringInput) ConversationProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConversationProfile {
		return vs[0].(map[string]*ConversationProfile)[vs[1].(string)]
	}).(ConversationProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConversationProfileInput)(nil)).Elem(), &ConversationProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConversationProfileArrayInput)(nil)).Elem(), ConversationProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConversationProfileMapInput)(nil)).Elem(), ConversationProfileMap{})
	pulumi.RegisterOutputType(ConversationProfileOutput{})
	pulumi.RegisterOutputType(ConversationProfileArrayOutput{})
	pulumi.RegisterOutputType(ConversationProfileMapOutput{})
}
