// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Playbook is the basic building block to instruct the LLM how to execute a certain task.
//
// To get more information about Playbook, see:
//
// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.playbooks)
// * How-to Guides
//   - [Official CX Documentation](https://cloud.google.com/dialogflow/cx/docs)
//
// ## Example Usage
//
// ### Dialogflowcx Playbook Basic
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/diagflow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
//				DisplayName:         pulumi.String("dialogflowcx-agent-basic"),
//				Location:            pulumi.String("global"),
//				DefaultLanguageCode: pulumi.String("en"),
//				TimeZone:            pulumi.String("America/New_York"),
//				Description:         pulumi.String("Example description."),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"text": "step 1 1",
//				},
//				map[string]interface{}{
//					"text": "step 1 2",
//					"steps": []map[string]interface{}{
//						map[string]interface{}{
//							"text": "step 1 2 1",
//						},
//						map[string]interface{}{
//							"text": "step 1 2 2",
//						},
//					},
//				},
//				map[string]interface{}{
//					"text": "step 1 3",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = diagflow.NewCxPlaybook(ctx, "my-playbook", &diagflow.CxPlaybookArgs{
//				Parent:       agent.ID(),
//				DisplayName:  pulumi.String("Example Display Name"),
//				Goal:         pulumi.String("Example Goal"),
//				PlaybookType: pulumi.String("ROUTINE"),
//				Instruction: &diagflow.CxPlaybookInstructionArgs{
//					Steps: diagflow.CxPlaybookInstructionStepArray{
//						&diagflow.CxPlaybookInstructionStepArgs{
//							Text:  pulumi.String("step 1"),
//							Steps: pulumi.String(json0),
//						},
//						&diagflow.CxPlaybookInstructionStepArgs{
//							Text: pulumi.String("step 2"),
//						},
//						&diagflow.CxPlaybookInstructionStepArgs{
//							Text: pulumi.String("step 3"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dialogflowcx Playbook Fulfillment
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/diagflow"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
//				DisplayName:         pulumi.String("dialogflowcx-agent"),
//				Location:            pulumi.String("global"),
//				DefaultLanguageCode: pulumi.String("en"),
//				TimeZone:            pulumi.String("America/New_York"),
//				Description:         pulumi.String("Example description."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("dialogflowcx-bucket"),
//				Location:                 pulumi.String("US"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewCxWebhook(ctx, "my_webhook", &diagflow.CxWebhookArgs{
//				Parent:      agent.ID(),
//				DisplayName: pulumi.String("MyWebhook"),
//				GenericWebService: &diagflow.CxWebhookGenericWebServiceArgs{
//					Uri: pulumi.String("https://example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			myTool, err := diagflow.NewCxTool(ctx, "my_tool", &diagflow.CxToolArgs{
//				Parent:      agent.ID(),
//				DisplayName: pulumi.String("Example Tool"),
//				Description: pulumi.String("Example Description"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewCxGenerator(ctx, "my_generator", &diagflow.CxGeneratorArgs{
//				Parent:      agent.ID(),
//				DisplayName: pulumi.String("TF Prompt generator"),
//				LlmModelSettings: &diagflow.CxGeneratorLlmModelSettingsArgs{
//					Model:      pulumi.String("gemini-2.0-flash-001"),
//					PromptText: pulumi.String("Return me some great results"),
//				},
//				PromptText: &diagflow.CxGeneratorPromptTextArgs{
//					Text: pulumi.String("Send me great results in french"),
//				},
//				ModelParameter: &diagflow.CxGeneratorModelParameterArgs{
//					Temperature: pulumi.Float64(0.55),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"text": "step 1 1",
//				},
//				map[string]interface{}{
//					"text": "step 1 2",
//					"steps": []map[string]interface{}{
//						map[string]interface{}{
//							"text": "step 1 2 1",
//						},
//						map[string]interface{}{
//							"text": "step 1 2 2",
//						},
//					},
//				},
//				map[string]interface{}{
//					"text": "step 1 3",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = diagflow.NewCxPlaybook(ctx, "my-playbook", &diagflow.CxPlaybookArgs{
//				Parent:      agent.ID(),
//				DisplayName: pulumi.String("Playbook Example with Fulfillment"),
//				Goal:        pulumi.String("Example Goal"),
//				Instruction: &diagflow.CxPlaybookInstructionArgs{
//					Guidelines: pulumi.String("Example Guidelines"),
//					Steps: diagflow.CxPlaybookInstructionStepArray{
//						&diagflow.CxPlaybookInstructionStepArgs{
//							Text:  pulumi.String("step 1"),
//							Steps: pulumi.String(json0),
//						},
//						&diagflow.CxPlaybookInstructionStepArgs{
//							Text: pulumi.String("step 2"),
//						},
//						&diagflow.CxPlaybookInstructionStepArgs{
//							Text: pulumi.String("step 3"),
//						},
//					},
//				},
//				LlmModelSettings: &diagflow.CxPlaybookLlmModelSettingsArgs{
//					Model:      pulumi.String("gemini-2.0-flash-001"),
//					PromptText: pulumi.String("Return me some great results"),
//				},
//				ReferencedTools: pulumi.StringArray{
//					myTool.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Playbook can be imported using any of these accepted formats:
//
// * `{{parent}}/playbooks/{{name}}`
//
// * `{{parent}}/{{name}}`
//
// When using the `pulumi import` command, Playbook can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:diagflow/cxPlaybook:CxPlaybook default {{parent}}/playbooks/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:diagflow/cxPlaybook:CxPlaybook default {{parent}}/{{name}}
// ```
type CxPlaybook struct {
	pulumi.CustomResourceState

	// The timestamp of initial playbook creation.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The human-readable name of the playbook, unique within an agent.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
	Goal pulumi.StringOutput `pulumi:"goal"`
	// Instruction to accomplish target goal.
	// Structure is documented below.
	Instruction CxPlaybookInstructionPtrOutput `pulumi:"instruction"`
	// Llm model settings for the playbook.
	// Structure is documented below.
	LlmModelSettings CxPlaybookLlmModelSettingsPtrOutput `pulumi:"llmModelSettings"`
	// The unique identifier of the Playbook.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/playbooks/<Playbook ID>.
	Name pulumi.StringOutput `pulumi:"name"`
	// The agent to create a Playbook for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
	// Type of the playbook.
	// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
	PlaybookType pulumi.StringPtrOutput `pulumi:"playbookType"`
	// The resource name of flows referenced by the current playbook in the instructions.
	ReferencedFlows pulumi.StringArrayOutput `pulumi:"referencedFlows"`
	// The resource name of other playbooks referenced by the current playbook in the instructions.
	ReferencedPlaybooks pulumi.StringArrayOutput `pulumi:"referencedPlaybooks"`
	// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
	ReferencedTools pulumi.StringArrayOutput `pulumi:"referencedTools"`
	// Estimated number of tokes current playbook takes when sent to the LLM.
	TokenCount pulumi.StringOutput `pulumi:"tokenCount"`
	// Last time the playbook version was updated.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCxPlaybook registers a new resource with the given unique name, arguments, and options.
func NewCxPlaybook(ctx *pulumi.Context,
	name string, args *CxPlaybookArgs, opts ...pulumi.ResourceOption) (*CxPlaybook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Goal == nil {
		return nil, errors.New("invalid value for required argument 'Goal'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CxPlaybook
	err := ctx.RegisterResource("gcp:diagflow/cxPlaybook:CxPlaybook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCxPlaybook gets an existing CxPlaybook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCxPlaybook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CxPlaybookState, opts ...pulumi.ResourceOption) (*CxPlaybook, error) {
	var resource CxPlaybook
	err := ctx.ReadResource("gcp:diagflow/cxPlaybook:CxPlaybook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CxPlaybook resources.
type cxPlaybookState struct {
	// The timestamp of initial playbook creation.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	CreateTime *string `pulumi:"createTime"`
	// The human-readable name of the playbook, unique within an agent.
	DisplayName *string `pulumi:"displayName"`
	// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
	Goal *string `pulumi:"goal"`
	// Instruction to accomplish target goal.
	// Structure is documented below.
	Instruction *CxPlaybookInstruction `pulumi:"instruction"`
	// Llm model settings for the playbook.
	// Structure is documented below.
	LlmModelSettings *CxPlaybookLlmModelSettings `pulumi:"llmModelSettings"`
	// The unique identifier of the Playbook.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/playbooks/<Playbook ID>.
	Name *string `pulumi:"name"`
	// The agent to create a Playbook for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
	// Type of the playbook.
	// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
	PlaybookType *string `pulumi:"playbookType"`
	// The resource name of flows referenced by the current playbook in the instructions.
	ReferencedFlows []string `pulumi:"referencedFlows"`
	// The resource name of other playbooks referenced by the current playbook in the instructions.
	ReferencedPlaybooks []string `pulumi:"referencedPlaybooks"`
	// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
	ReferencedTools []string `pulumi:"referencedTools"`
	// Estimated number of tokes current playbook takes when sent to the LLM.
	TokenCount *string `pulumi:"tokenCount"`
	// Last time the playbook version was updated.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	UpdateTime *string `pulumi:"updateTime"`
}

type CxPlaybookState struct {
	// The timestamp of initial playbook creation.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	CreateTime pulumi.StringPtrInput
	// The human-readable name of the playbook, unique within an agent.
	DisplayName pulumi.StringPtrInput
	// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
	Goal pulumi.StringPtrInput
	// Instruction to accomplish target goal.
	// Structure is documented below.
	Instruction CxPlaybookInstructionPtrInput
	// Llm model settings for the playbook.
	// Structure is documented below.
	LlmModelSettings CxPlaybookLlmModelSettingsPtrInput
	// The unique identifier of the Playbook.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/playbooks/<Playbook ID>.
	Name pulumi.StringPtrInput
	// The agent to create a Playbook for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
	// Type of the playbook.
	// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
	PlaybookType pulumi.StringPtrInput
	// The resource name of flows referenced by the current playbook in the instructions.
	ReferencedFlows pulumi.StringArrayInput
	// The resource name of other playbooks referenced by the current playbook in the instructions.
	ReferencedPlaybooks pulumi.StringArrayInput
	// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
	ReferencedTools pulumi.StringArrayInput
	// Estimated number of tokes current playbook takes when sent to the LLM.
	TokenCount pulumi.StringPtrInput
	// Last time the playbook version was updated.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	UpdateTime pulumi.StringPtrInput
}

func (CxPlaybookState) ElementType() reflect.Type {
	return reflect.TypeOf((*cxPlaybookState)(nil)).Elem()
}

type cxPlaybookArgs struct {
	// The human-readable name of the playbook, unique within an agent.
	DisplayName string `pulumi:"displayName"`
	// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
	Goal string `pulumi:"goal"`
	// Instruction to accomplish target goal.
	// Structure is documented below.
	Instruction *CxPlaybookInstruction `pulumi:"instruction"`
	// Llm model settings for the playbook.
	// Structure is documented below.
	LlmModelSettings *CxPlaybookLlmModelSettings `pulumi:"llmModelSettings"`
	// The agent to create a Playbook for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
	// Type of the playbook.
	// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
	PlaybookType *string `pulumi:"playbookType"`
	// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
	ReferencedTools []string `pulumi:"referencedTools"`
}

// The set of arguments for constructing a CxPlaybook resource.
type CxPlaybookArgs struct {
	// The human-readable name of the playbook, unique within an agent.
	DisplayName pulumi.StringInput
	// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
	Goal pulumi.StringInput
	// Instruction to accomplish target goal.
	// Structure is documented below.
	Instruction CxPlaybookInstructionPtrInput
	// Llm model settings for the playbook.
	// Structure is documented below.
	LlmModelSettings CxPlaybookLlmModelSettingsPtrInput
	// The agent to create a Playbook for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
	// Type of the playbook.
	// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
	PlaybookType pulumi.StringPtrInput
	// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
	ReferencedTools pulumi.StringArrayInput
}

func (CxPlaybookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cxPlaybookArgs)(nil)).Elem()
}

type CxPlaybookInput interface {
	pulumi.Input

	ToCxPlaybookOutput() CxPlaybookOutput
	ToCxPlaybookOutputWithContext(ctx context.Context) CxPlaybookOutput
}

func (*CxPlaybook) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPlaybook)(nil)).Elem()
}

func (i *CxPlaybook) ToCxPlaybookOutput() CxPlaybookOutput {
	return i.ToCxPlaybookOutputWithContext(context.Background())
}

func (i *CxPlaybook) ToCxPlaybookOutputWithContext(ctx context.Context) CxPlaybookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPlaybookOutput)
}

// CxPlaybookArrayInput is an input type that accepts CxPlaybookArray and CxPlaybookArrayOutput values.
// You can construct a concrete instance of `CxPlaybookArrayInput` via:
//
//	CxPlaybookArray{ CxPlaybookArgs{...} }
type CxPlaybookArrayInput interface {
	pulumi.Input

	ToCxPlaybookArrayOutput() CxPlaybookArrayOutput
	ToCxPlaybookArrayOutputWithContext(context.Context) CxPlaybookArrayOutput
}

type CxPlaybookArray []CxPlaybookInput

func (CxPlaybookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxPlaybook)(nil)).Elem()
}

func (i CxPlaybookArray) ToCxPlaybookArrayOutput() CxPlaybookArrayOutput {
	return i.ToCxPlaybookArrayOutputWithContext(context.Background())
}

func (i CxPlaybookArray) ToCxPlaybookArrayOutputWithContext(ctx context.Context) CxPlaybookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPlaybookArrayOutput)
}

// CxPlaybookMapInput is an input type that accepts CxPlaybookMap and CxPlaybookMapOutput values.
// You can construct a concrete instance of `CxPlaybookMapInput` via:
//
//	CxPlaybookMap{ "key": CxPlaybookArgs{...} }
type CxPlaybookMapInput interface {
	pulumi.Input

	ToCxPlaybookMapOutput() CxPlaybookMapOutput
	ToCxPlaybookMapOutputWithContext(context.Context) CxPlaybookMapOutput
}

type CxPlaybookMap map[string]CxPlaybookInput

func (CxPlaybookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxPlaybook)(nil)).Elem()
}

func (i CxPlaybookMap) ToCxPlaybookMapOutput() CxPlaybookMapOutput {
	return i.ToCxPlaybookMapOutputWithContext(context.Background())
}

func (i CxPlaybookMap) ToCxPlaybookMapOutputWithContext(ctx context.Context) CxPlaybookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPlaybookMapOutput)
}

type CxPlaybookOutput struct{ *pulumi.OutputState }

func (CxPlaybookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPlaybook)(nil)).Elem()
}

func (o CxPlaybookOutput) ToCxPlaybookOutput() CxPlaybookOutput {
	return o
}

func (o CxPlaybookOutput) ToCxPlaybookOutputWithContext(ctx context.Context) CxPlaybookOutput {
	return o
}

// The timestamp of initial playbook creation.
// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
func (o CxPlaybookOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The human-readable name of the playbook, unique within an agent.
func (o CxPlaybookOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
func (o CxPlaybookOutput) Goal() pulumi.StringOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringOutput { return v.Goal }).(pulumi.StringOutput)
}

// Instruction to accomplish target goal.
// Structure is documented below.
func (o CxPlaybookOutput) Instruction() CxPlaybookInstructionPtrOutput {
	return o.ApplyT(func(v *CxPlaybook) CxPlaybookInstructionPtrOutput { return v.Instruction }).(CxPlaybookInstructionPtrOutput)
}

// Llm model settings for the playbook.
// Structure is documented below.
func (o CxPlaybookOutput) LlmModelSettings() CxPlaybookLlmModelSettingsPtrOutput {
	return o.ApplyT(func(v *CxPlaybook) CxPlaybookLlmModelSettingsPtrOutput { return v.LlmModelSettings }).(CxPlaybookLlmModelSettingsPtrOutput)
}

// The unique identifier of the Playbook.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/playbooks/<Playbook ID>.
func (o CxPlaybookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The agent to create a Playbook for.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
func (o CxPlaybookOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringPtrOutput { return v.Parent }).(pulumi.StringPtrOutput)
}

// Type of the playbook.
// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
func (o CxPlaybookOutput) PlaybookType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringPtrOutput { return v.PlaybookType }).(pulumi.StringPtrOutput)
}

// The resource name of flows referenced by the current playbook in the instructions.
func (o CxPlaybookOutput) ReferencedFlows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringArrayOutput { return v.ReferencedFlows }).(pulumi.StringArrayOutput)
}

// The resource name of other playbooks referenced by the current playbook in the instructions.
func (o CxPlaybookOutput) ReferencedPlaybooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringArrayOutput { return v.ReferencedPlaybooks }).(pulumi.StringArrayOutput)
}

// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
func (o CxPlaybookOutput) ReferencedTools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringArrayOutput { return v.ReferencedTools }).(pulumi.StringArrayOutput)
}

// Estimated number of tokes current playbook takes when sent to the LLM.
func (o CxPlaybookOutput) TokenCount() pulumi.StringOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringOutput { return v.TokenCount }).(pulumi.StringOutput)
}

// Last time the playbook version was updated.
// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
func (o CxPlaybookOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CxPlaybook) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type CxPlaybookArrayOutput struct{ *pulumi.OutputState }

func (CxPlaybookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxPlaybook)(nil)).Elem()
}

func (o CxPlaybookArrayOutput) ToCxPlaybookArrayOutput() CxPlaybookArrayOutput {
	return o
}

func (o CxPlaybookArrayOutput) ToCxPlaybookArrayOutputWithContext(ctx context.Context) CxPlaybookArrayOutput {
	return o
}

func (o CxPlaybookArrayOutput) Index(i pulumi.IntInput) CxPlaybookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CxPlaybook {
		return vs[0].([]*CxPlaybook)[vs[1].(int)]
	}).(CxPlaybookOutput)
}

type CxPlaybookMapOutput struct{ *pulumi.OutputState }

func (CxPlaybookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxPlaybook)(nil)).Elem()
}

func (o CxPlaybookMapOutput) ToCxPlaybookMapOutput() CxPlaybookMapOutput {
	return o
}

func (o CxPlaybookMapOutput) ToCxPlaybookMapOutputWithContext(ctx context.Context) CxPlaybookMapOutput {
	return o
}

func (o CxPlaybookMapOutput) MapIndex(k pulumi.StringInput) CxPlaybookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CxPlaybook {
		return vs[0].(map[string]*CxPlaybook)[vs[1].(string)]
	}).(CxPlaybookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CxPlaybookInput)(nil)).Elem(), &CxPlaybook{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPlaybookArrayInput)(nil)).Elem(), CxPlaybookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPlaybookMapInput)(nil)).Elem(), CxPlaybookMap{})
	pulumi.RegisterOutputType(CxPlaybookOutput{})
	pulumi.RegisterOutputType(CxPlaybookArrayOutput{})
	pulumi.RegisterOutputType(CxPlaybookMapOutput{})
}
