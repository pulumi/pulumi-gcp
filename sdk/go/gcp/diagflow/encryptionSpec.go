// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Initializes a location-level encryption key specification.
//
// To get more information about EncryptionSpec, see:
//
// * [API documentation](https://cloud.google.com/dialogflow/es/docs/reference/rest/v2/projects.locations.encryptionSpec)
// * How-to Guides
//   - [Official CX Documentation](https://cloud.google.com/dialogflow/cx/docs)
//   - [Official ES Documentation](https://cloud.google.com/dialogflow/es/docs)
//
// ## Example Usage
//
// ### Dialogflow Encryption Spec Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/diagflow"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/projects"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("my-proj"),
//				Name:           pulumi.String("my-proj"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			cloudkms, err := projects.NewService(ctx, "cloudkms", &projects.ServiceArgs{
//				Project: project.ProjectId,
//				Service: pulumi.String("cloudkms.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			dialogflow, err := projects.NewService(ctx, "dialogflow", &projects.ServiceArgs{
//				Project: project.ProjectId,
//				Service: pulumi.String("dialogflow.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			waitEnableServiceApi, err := time.NewSleep(ctx, "wait_enable_service_api", &time.SleepArgs{
//				CreateDuration: "30s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				cloudkms,
//				dialogflow,
//			}))
//			if err != nil {
//				return err
//			}
//			gcpSa, err := projects.NewServiceIdentity(ctx, "gcp_sa", &projects.ServiceIdentityArgs{
//				Service: pulumi.String("dialogflow.googleapis.com"),
//				Project: project.ProjectId,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitEnableServiceApi,
//			}))
//			if err != nil {
//				return err
//			}
//			waitCreateSa, err := time.NewSleep(ctx, "wait_create_sa", &time.SleepArgs{
//				CreateDuration: "30s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				gcpSa,
//			}))
//			if err != nil {
//				return err
//			}
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Name:     pulumi.String("my-keyring"),
//				Location: pulumi.String("us-central1"),
//				Project:  project.ProjectId,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitEnableServiceApi,
//			}))
//			if err != nil {
//				return err
//			}
//			key, err := kms.NewCryptoKey(ctx, "key", &kms.CryptoKeyArgs{
//				Name:    pulumi.String("my-key"),
//				KeyRing: keyring.ID(),
//				Purpose: pulumi.String("ENCRYPT_DECRYPT"),
//			})
//			if err != nil {
//				return err
//			}
//			cryptoKey, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: key.ID(),
//				Member: pulumi.String(std.ReplaceOutput(ctx, std.ReplaceOutputArgs{
//					Text:    gcpSa.Member,
//					Search:  pulumi.String("@gcp-sa-dialogflow.iam"),
//					Replace: pulumi.String("@gcp-sa-ccai-cmek.iam"),
//				}, nil).ApplyT(func(invoke std.ReplaceResult) (*string, error) {
//					return invoke.Result, nil
//				}).(pulumi.StringPtrOutput)),
//				Role: pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitCreateSa,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewEncryptionSpec(ctx, "my-encryption-spec", &diagflow.EncryptionSpecArgs{
//				Project:  project.ProjectId,
//				Location: pulumi.String("us-central1"),
//				EncryptionSpec: &diagflow.EncryptionSpecEncryptionSpecArgs{
//					KmsKey: key.ID(),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				cryptoKey,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource does not support import.
type EncryptionSpec struct {
	pulumi.CustomResourceState

	// A nested object resource.
	// Structure is documented below.
	EncryptionSpec EncryptionSpecEncryptionSpecOutput `pulumi:"encryptionSpec"`
	// The location in which the encryptionSpec is to be initialized.
	Location pulumi.StringOutput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewEncryptionSpec registers a new resource with the given unique name, arguments, and options.
func NewEncryptionSpec(ctx *pulumi.Context,
	name string, args *EncryptionSpecArgs, opts ...pulumi.ResourceOption) (*EncryptionSpec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EncryptionSpec == nil {
		return nil, errors.New("invalid value for required argument 'EncryptionSpec'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EncryptionSpec
	err := ctx.RegisterResource("gcp:diagflow/encryptionSpec:EncryptionSpec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEncryptionSpec gets an existing EncryptionSpec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEncryptionSpec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EncryptionSpecState, opts ...pulumi.ResourceOption) (*EncryptionSpec, error) {
	var resource EncryptionSpec
	err := ctx.ReadResource("gcp:diagflow/encryptionSpec:EncryptionSpec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EncryptionSpec resources.
type encryptionSpecState struct {
	// A nested object resource.
	// Structure is documented below.
	EncryptionSpec *EncryptionSpecEncryptionSpec `pulumi:"encryptionSpec"`
	// The location in which the encryptionSpec is to be initialized.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type EncryptionSpecState struct {
	// A nested object resource.
	// Structure is documented below.
	EncryptionSpec EncryptionSpecEncryptionSpecPtrInput
	// The location in which the encryptionSpec is to be initialized.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (EncryptionSpecState) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptionSpecState)(nil)).Elem()
}

type encryptionSpecArgs struct {
	// A nested object resource.
	// Structure is documented below.
	EncryptionSpec EncryptionSpecEncryptionSpec `pulumi:"encryptionSpec"`
	// The location in which the encryptionSpec is to be initialized.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a EncryptionSpec resource.
type EncryptionSpecArgs struct {
	// A nested object resource.
	// Structure is documented below.
	EncryptionSpec EncryptionSpecEncryptionSpecInput
	// The location in which the encryptionSpec is to be initialized.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (EncryptionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptionSpecArgs)(nil)).Elem()
}

type EncryptionSpecInput interface {
	pulumi.Input

	ToEncryptionSpecOutput() EncryptionSpecOutput
	ToEncryptionSpecOutputWithContext(ctx context.Context) EncryptionSpecOutput
}

func (*EncryptionSpec) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSpec)(nil)).Elem()
}

func (i *EncryptionSpec) ToEncryptionSpecOutput() EncryptionSpecOutput {
	return i.ToEncryptionSpecOutputWithContext(context.Background())
}

func (i *EncryptionSpec) ToEncryptionSpecOutputWithContext(ctx context.Context) EncryptionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSpecOutput)
}

// EncryptionSpecArrayInput is an input type that accepts EncryptionSpecArray and EncryptionSpecArrayOutput values.
// You can construct a concrete instance of `EncryptionSpecArrayInput` via:
//
//	EncryptionSpecArray{ EncryptionSpecArgs{...} }
type EncryptionSpecArrayInput interface {
	pulumi.Input

	ToEncryptionSpecArrayOutput() EncryptionSpecArrayOutput
	ToEncryptionSpecArrayOutputWithContext(context.Context) EncryptionSpecArrayOutput
}

type EncryptionSpecArray []EncryptionSpecInput

func (EncryptionSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EncryptionSpec)(nil)).Elem()
}

func (i EncryptionSpecArray) ToEncryptionSpecArrayOutput() EncryptionSpecArrayOutput {
	return i.ToEncryptionSpecArrayOutputWithContext(context.Background())
}

func (i EncryptionSpecArray) ToEncryptionSpecArrayOutputWithContext(ctx context.Context) EncryptionSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSpecArrayOutput)
}

// EncryptionSpecMapInput is an input type that accepts EncryptionSpecMap and EncryptionSpecMapOutput values.
// You can construct a concrete instance of `EncryptionSpecMapInput` via:
//
//	EncryptionSpecMap{ "key": EncryptionSpecArgs{...} }
type EncryptionSpecMapInput interface {
	pulumi.Input

	ToEncryptionSpecMapOutput() EncryptionSpecMapOutput
	ToEncryptionSpecMapOutputWithContext(context.Context) EncryptionSpecMapOutput
}

type EncryptionSpecMap map[string]EncryptionSpecInput

func (EncryptionSpecMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EncryptionSpec)(nil)).Elem()
}

func (i EncryptionSpecMap) ToEncryptionSpecMapOutput() EncryptionSpecMapOutput {
	return i.ToEncryptionSpecMapOutputWithContext(context.Background())
}

func (i EncryptionSpecMap) ToEncryptionSpecMapOutputWithContext(ctx context.Context) EncryptionSpecMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSpecMapOutput)
}

type EncryptionSpecOutput struct{ *pulumi.OutputState }

func (EncryptionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSpec)(nil)).Elem()
}

func (o EncryptionSpecOutput) ToEncryptionSpecOutput() EncryptionSpecOutput {
	return o
}

func (o EncryptionSpecOutput) ToEncryptionSpecOutputWithContext(ctx context.Context) EncryptionSpecOutput {
	return o
}

// A nested object resource.
// Structure is documented below.
func (o EncryptionSpecOutput) EncryptionSpec() EncryptionSpecEncryptionSpecOutput {
	return o.ApplyT(func(v *EncryptionSpec) EncryptionSpecEncryptionSpecOutput { return v.EncryptionSpec }).(EncryptionSpecEncryptionSpecOutput)
}

// The location in which the encryptionSpec is to be initialized.
func (o EncryptionSpecOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EncryptionSpec) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o EncryptionSpecOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EncryptionSpec) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type EncryptionSpecArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EncryptionSpec)(nil)).Elem()
}

func (o EncryptionSpecArrayOutput) ToEncryptionSpecArrayOutput() EncryptionSpecArrayOutput {
	return o
}

func (o EncryptionSpecArrayOutput) ToEncryptionSpecArrayOutputWithContext(ctx context.Context) EncryptionSpecArrayOutput {
	return o
}

func (o EncryptionSpecArrayOutput) Index(i pulumi.IntInput) EncryptionSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EncryptionSpec {
		return vs[0].([]*EncryptionSpec)[vs[1].(int)]
	}).(EncryptionSpecOutput)
}

type EncryptionSpecMapOutput struct{ *pulumi.OutputState }

func (EncryptionSpecMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EncryptionSpec)(nil)).Elem()
}

func (o EncryptionSpecMapOutput) ToEncryptionSpecMapOutput() EncryptionSpecMapOutput {
	return o
}

func (o EncryptionSpecMapOutput) ToEncryptionSpecMapOutputWithContext(ctx context.Context) EncryptionSpecMapOutput {
	return o
}

func (o EncryptionSpecMapOutput) MapIndex(k pulumi.StringInput) EncryptionSpecOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EncryptionSpec {
		return vs[0].(map[string]*EncryptionSpec)[vs[1].(string)]
	}).(EncryptionSpecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionSpecInput)(nil)).Elem(), &EncryptionSpec{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionSpecArrayInput)(nil)).Elem(), EncryptionSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionSpecMapInput)(nil)).Elem(), EncryptionSpecMap{})
	pulumi.RegisterOutputType(EncryptionSpecOutput{})
	pulumi.RegisterOutputType(EncryptionSpecArrayOutput{})
	pulumi.RegisterOutputType(EncryptionSpecMapOutput{})
}
