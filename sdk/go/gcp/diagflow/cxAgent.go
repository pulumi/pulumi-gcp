// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Agents are best described as Natural Language Understanding (NLU) modules that transform user requests into actionable data. You can include agents in your app, product, or service to determine user intent and respond to the user in a natural way.
//
// To get more information about Agent, see:
//
// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
//
// ## Example Usage
// ### Dialogflowcx Agent Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/diagflow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := diagflow.NewCxAgent(ctx, "fullAgent", &diagflow.CxAgentArgs{
//				AvatarUri:                pulumi.String("https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png"),
//				DefaultLanguageCode:      pulumi.String("en"),
//				Description:              pulumi.String("Example description."),
//				DisplayName:              pulumi.String("dialogflowcx-agent"),
//				EnableSpellCorrection:    pulumi.Bool(true),
//				EnableStackdriverLogging: pulumi.Bool(true),
//				Location:                 pulumi.String("global"),
//				SpeechToTextSettings: &diagflow.CxAgentSpeechToTextSettingsArgs{
//					EnableSpeechAdaptation: pulumi.Bool(true),
//				},
//				SupportedLanguageCodes: pulumi.StringArray{
//					pulumi.String("fr"),
//					pulumi.String("de"),
//					pulumi.String("es"),
//				},
//				TimeZone: pulumi.String("America/New_York"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Agent can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:diagflow/cxAgent:CxAgent default projects/{{project}}/locations/{{location}}/agents/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:diagflow/cxAgent:CxAgent default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:diagflow/cxAgent:CxAgent default {{location}}/{{name}}
//
// ```
type CxAgent struct {
	pulumi.CustomResourceState

	// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
	AvatarUri pulumi.StringPtrOutput `pulumi:"avatarUri"`
	// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
	// for a list of the currently supported language codes. This field cannot be updated after creation.
	DefaultLanguageCode pulumi.StringOutput `pulumi:"defaultLanguageCode"`
	// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The human-readable name of the agent, unique within the location.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Indicates if automatic spell correction is enabled in detect intent requests.
	EnableSpellCorrection pulumi.BoolPtrOutput `pulumi:"enableSpellCorrection"`
	// Determines whether this agent should log conversation queries.
	EnableStackdriverLogging pulumi.BoolPtrOutput `pulumi:"enableStackdriverLogging"`
	// The name of the location this agent is located in.
	// > **Note:** The first time you are deploying an Agent in your project you must configure location settings.
	// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
	// Another options is to use global location so you don't need to manually configure location settings.
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique identifier of the agent.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Name of the SecuritySettings reference for the agent. Format: projects/<Project ID>/locations/<Location ID>/securitySettings/<Security Settings ID>.
	SecuritySettings pulumi.StringPtrOutput `pulumi:"securitySettings"`
	// Settings related to speech recognition.
	// Structure is documented below.
	SpeechToTextSettings CxAgentSpeechToTextSettingsPtrOutput `pulumi:"speechToTextSettings"`
	// Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only
	// be deleted by deleting the agent. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
	// ID>.
	StartFlow pulumi.StringOutput `pulumi:"startFlow"`
	// The list of all languages supported by this agent (except for the default_language_code).
	SupportedLanguageCodes pulumi.StringArrayOutput `pulumi:"supportedLanguageCodes"`
	// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
	// Europe/Paris.
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
}

// NewCxAgent registers a new resource with the given unique name, arguments, and options.
func NewCxAgent(ctx *pulumi.Context,
	name string, args *CxAgentArgs, opts ...pulumi.ResourceOption) (*CxAgent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultLanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'DefaultLanguageCode'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.TimeZone == nil {
		return nil, errors.New("invalid value for required argument 'TimeZone'")
	}
	var resource CxAgent
	err := ctx.RegisterResource("gcp:diagflow/cxAgent:CxAgent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCxAgent gets an existing CxAgent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCxAgent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CxAgentState, opts ...pulumi.ResourceOption) (*CxAgent, error) {
	var resource CxAgent
	err := ctx.ReadResource("gcp:diagflow/cxAgent:CxAgent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CxAgent resources.
type cxAgentState struct {
	// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
	AvatarUri *string `pulumi:"avatarUri"`
	// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
	// for a list of the currently supported language codes. This field cannot be updated after creation.
	DefaultLanguageCode *string `pulumi:"defaultLanguageCode"`
	// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description *string `pulumi:"description"`
	// The human-readable name of the agent, unique within the location.
	DisplayName *string `pulumi:"displayName"`
	// Indicates if automatic spell correction is enabled in detect intent requests.
	EnableSpellCorrection *bool `pulumi:"enableSpellCorrection"`
	// Determines whether this agent should log conversation queries.
	EnableStackdriverLogging *bool `pulumi:"enableStackdriverLogging"`
	// The name of the location this agent is located in.
	// > **Note:** The first time you are deploying an Agent in your project you must configure location settings.
	// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
	// Another options is to use global location so you don't need to manually configure location settings.
	Location *string `pulumi:"location"`
	// The unique identifier of the agent.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Name of the SecuritySettings reference for the agent. Format: projects/<Project ID>/locations/<Location ID>/securitySettings/<Security Settings ID>.
	SecuritySettings *string `pulumi:"securitySettings"`
	// Settings related to speech recognition.
	// Structure is documented below.
	SpeechToTextSettings *CxAgentSpeechToTextSettings `pulumi:"speechToTextSettings"`
	// Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only
	// be deleted by deleting the agent. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
	// ID>.
	StartFlow *string `pulumi:"startFlow"`
	// The list of all languages supported by this agent (except for the default_language_code).
	SupportedLanguageCodes []string `pulumi:"supportedLanguageCodes"`
	// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
	// Europe/Paris.
	TimeZone *string `pulumi:"timeZone"`
}

type CxAgentState struct {
	// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
	AvatarUri pulumi.StringPtrInput
	// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
	// for a list of the currently supported language codes. This field cannot be updated after creation.
	DefaultLanguageCode pulumi.StringPtrInput
	// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description pulumi.StringPtrInput
	// The human-readable name of the agent, unique within the location.
	DisplayName pulumi.StringPtrInput
	// Indicates if automatic spell correction is enabled in detect intent requests.
	EnableSpellCorrection pulumi.BoolPtrInput
	// Determines whether this agent should log conversation queries.
	EnableStackdriverLogging pulumi.BoolPtrInput
	// The name of the location this agent is located in.
	// > **Note:** The first time you are deploying an Agent in your project you must configure location settings.
	// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
	// Another options is to use global location so you don't need to manually configure location settings.
	Location pulumi.StringPtrInput
	// The unique identifier of the agent.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Name of the SecuritySettings reference for the agent. Format: projects/<Project ID>/locations/<Location ID>/securitySettings/<Security Settings ID>.
	SecuritySettings pulumi.StringPtrInput
	// Settings related to speech recognition.
	// Structure is documented below.
	SpeechToTextSettings CxAgentSpeechToTextSettingsPtrInput
	// Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only
	// be deleted by deleting the agent. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
	// ID>.
	StartFlow pulumi.StringPtrInput
	// The list of all languages supported by this agent (except for the default_language_code).
	SupportedLanguageCodes pulumi.StringArrayInput
	// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
	// Europe/Paris.
	TimeZone pulumi.StringPtrInput
}

func (CxAgentState) ElementType() reflect.Type {
	return reflect.TypeOf((*cxAgentState)(nil)).Elem()
}

type cxAgentArgs struct {
	// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
	AvatarUri *string `pulumi:"avatarUri"`
	// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
	// for a list of the currently supported language codes. This field cannot be updated after creation.
	DefaultLanguageCode string `pulumi:"defaultLanguageCode"`
	// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description *string `pulumi:"description"`
	// The human-readable name of the agent, unique within the location.
	DisplayName string `pulumi:"displayName"`
	// Indicates if automatic spell correction is enabled in detect intent requests.
	EnableSpellCorrection *bool `pulumi:"enableSpellCorrection"`
	// Determines whether this agent should log conversation queries.
	EnableStackdriverLogging *bool `pulumi:"enableStackdriverLogging"`
	// The name of the location this agent is located in.
	// > **Note:** The first time you are deploying an Agent in your project you must configure location settings.
	// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
	// Another options is to use global location so you don't need to manually configure location settings.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Name of the SecuritySettings reference for the agent. Format: projects/<Project ID>/locations/<Location ID>/securitySettings/<Security Settings ID>.
	SecuritySettings *string `pulumi:"securitySettings"`
	// Settings related to speech recognition.
	// Structure is documented below.
	SpeechToTextSettings *CxAgentSpeechToTextSettings `pulumi:"speechToTextSettings"`
	// The list of all languages supported by this agent (except for the default_language_code).
	SupportedLanguageCodes []string `pulumi:"supportedLanguageCodes"`
	// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
	// Europe/Paris.
	TimeZone string `pulumi:"timeZone"`
}

// The set of arguments for constructing a CxAgent resource.
type CxAgentArgs struct {
	// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
	AvatarUri pulumi.StringPtrInput
	// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
	// for a list of the currently supported language codes. This field cannot be updated after creation.
	DefaultLanguageCode pulumi.StringInput
	// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description pulumi.StringPtrInput
	// The human-readable name of the agent, unique within the location.
	DisplayName pulumi.StringInput
	// Indicates if automatic spell correction is enabled in detect intent requests.
	EnableSpellCorrection pulumi.BoolPtrInput
	// Determines whether this agent should log conversation queries.
	EnableStackdriverLogging pulumi.BoolPtrInput
	// The name of the location this agent is located in.
	// > **Note:** The first time you are deploying an Agent in your project you must configure location settings.
	// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
	// Another options is to use global location so you don't need to manually configure location settings.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Name of the SecuritySettings reference for the agent. Format: projects/<Project ID>/locations/<Location ID>/securitySettings/<Security Settings ID>.
	SecuritySettings pulumi.StringPtrInput
	// Settings related to speech recognition.
	// Structure is documented below.
	SpeechToTextSettings CxAgentSpeechToTextSettingsPtrInput
	// The list of all languages supported by this agent (except for the default_language_code).
	SupportedLanguageCodes pulumi.StringArrayInput
	// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
	// Europe/Paris.
	TimeZone pulumi.StringInput
}

func (CxAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cxAgentArgs)(nil)).Elem()
}

type CxAgentInput interface {
	pulumi.Input

	ToCxAgentOutput() CxAgentOutput
	ToCxAgentOutputWithContext(ctx context.Context) CxAgentOutput
}

func (*CxAgent) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgent)(nil)).Elem()
}

func (i *CxAgent) ToCxAgentOutput() CxAgentOutput {
	return i.ToCxAgentOutputWithContext(context.Background())
}

func (i *CxAgent) ToCxAgentOutputWithContext(ctx context.Context) CxAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentOutput)
}

// CxAgentArrayInput is an input type that accepts CxAgentArray and CxAgentArrayOutput values.
// You can construct a concrete instance of `CxAgentArrayInput` via:
//
//	CxAgentArray{ CxAgentArgs{...} }
type CxAgentArrayInput interface {
	pulumi.Input

	ToCxAgentArrayOutput() CxAgentArrayOutput
	ToCxAgentArrayOutputWithContext(context.Context) CxAgentArrayOutput
}

type CxAgentArray []CxAgentInput

func (CxAgentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxAgent)(nil)).Elem()
}

func (i CxAgentArray) ToCxAgentArrayOutput() CxAgentArrayOutput {
	return i.ToCxAgentArrayOutputWithContext(context.Background())
}

func (i CxAgentArray) ToCxAgentArrayOutputWithContext(ctx context.Context) CxAgentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentArrayOutput)
}

// CxAgentMapInput is an input type that accepts CxAgentMap and CxAgentMapOutput values.
// You can construct a concrete instance of `CxAgentMapInput` via:
//
//	CxAgentMap{ "key": CxAgentArgs{...} }
type CxAgentMapInput interface {
	pulumi.Input

	ToCxAgentMapOutput() CxAgentMapOutput
	ToCxAgentMapOutputWithContext(context.Context) CxAgentMapOutput
}

type CxAgentMap map[string]CxAgentInput

func (CxAgentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxAgent)(nil)).Elem()
}

func (i CxAgentMap) ToCxAgentMapOutput() CxAgentMapOutput {
	return i.ToCxAgentMapOutputWithContext(context.Background())
}

func (i CxAgentMap) ToCxAgentMapOutputWithContext(ctx context.Context) CxAgentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentMapOutput)
}

type CxAgentOutput struct{ *pulumi.OutputState }

func (CxAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgent)(nil)).Elem()
}

func (o CxAgentOutput) ToCxAgentOutput() CxAgentOutput {
	return o
}

func (o CxAgentOutput) ToCxAgentOutputWithContext(ctx context.Context) CxAgentOutput {
	return o
}

// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
func (o CxAgentOutput) AvatarUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringPtrOutput { return v.AvatarUri }).(pulumi.StringPtrOutput)
}

// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
// for a list of the currently supported language codes. This field cannot be updated after creation.
func (o CxAgentOutput) DefaultLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringOutput { return v.DefaultLanguageCode }).(pulumi.StringOutput)
}

// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
func (o CxAgentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The human-readable name of the agent, unique within the location.
func (o CxAgentOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Indicates if automatic spell correction is enabled in detect intent requests.
func (o CxAgentOutput) EnableSpellCorrection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.BoolPtrOutput { return v.EnableSpellCorrection }).(pulumi.BoolPtrOutput)
}

// Determines whether this agent should log conversation queries.
func (o CxAgentOutput) EnableStackdriverLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.BoolPtrOutput { return v.EnableStackdriverLogging }).(pulumi.BoolPtrOutput)
}

// The name of the location this agent is located in.
// > **Note:** The first time you are deploying an Agent in your project you must configure location settings.
// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
// Another options is to use global location so you don't need to manually configure location settings.
func (o CxAgentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique identifier of the agent.
func (o CxAgentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CxAgentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Name of the SecuritySettings reference for the agent. Format: projects/<Project ID>/locations/<Location ID>/securitySettings/<Security Settings ID>.
func (o CxAgentOutput) SecuritySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringPtrOutput { return v.SecuritySettings }).(pulumi.StringPtrOutput)
}

// Settings related to speech recognition.
// Structure is documented below.
func (o CxAgentOutput) SpeechToTextSettings() CxAgentSpeechToTextSettingsPtrOutput {
	return o.ApplyT(func(v *CxAgent) CxAgentSpeechToTextSettingsPtrOutput { return v.SpeechToTextSettings }).(CxAgentSpeechToTextSettingsPtrOutput)
}

// Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only
// be deleted by deleting the agent. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
// ID>.
func (o CxAgentOutput) StartFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringOutput { return v.StartFlow }).(pulumi.StringOutput)
}

// The list of all languages supported by this agent (except for the default_language_code).
func (o CxAgentOutput) SupportedLanguageCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringArrayOutput { return v.SupportedLanguageCodes }).(pulumi.StringArrayOutput)
}

// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
// Europe/Paris.
func (o CxAgentOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *CxAgent) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

type CxAgentArrayOutput struct{ *pulumi.OutputState }

func (CxAgentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxAgent)(nil)).Elem()
}

func (o CxAgentArrayOutput) ToCxAgentArrayOutput() CxAgentArrayOutput {
	return o
}

func (o CxAgentArrayOutput) ToCxAgentArrayOutputWithContext(ctx context.Context) CxAgentArrayOutput {
	return o
}

func (o CxAgentArrayOutput) Index(i pulumi.IntInput) CxAgentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CxAgent {
		return vs[0].([]*CxAgent)[vs[1].(int)]
	}).(CxAgentOutput)
}

type CxAgentMapOutput struct{ *pulumi.OutputState }

func (CxAgentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxAgent)(nil)).Elem()
}

func (o CxAgentMapOutput) ToCxAgentMapOutput() CxAgentMapOutput {
	return o
}

func (o CxAgentMapOutput) ToCxAgentMapOutputWithContext(ctx context.Context) CxAgentMapOutput {
	return o
}

func (o CxAgentMapOutput) MapIndex(k pulumi.StringInput) CxAgentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CxAgent {
		return vs[0].(map[string]*CxAgent)[vs[1].(string)]
	}).(CxAgentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentInput)(nil)).Elem(), &CxAgent{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentArrayInput)(nil)).Elem(), CxAgentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentMapInput)(nil)).Elem(), CxAgentMap{})
	pulumi.RegisterOutputType(CxAgentOutput{})
	pulumi.RegisterOutputType(CxAgentArrayOutput{})
	pulumi.RegisterOutputType(CxAgentMapOutput{})
}
