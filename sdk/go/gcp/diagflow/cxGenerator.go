// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Generators contain prompt to be sent to the LLM model to generate text. The prompt can contain parameters which will be resolved before calling the model. It can optionally contain banned phrases to ensure the model responses are safe.
//
// To get more information about Generator, see:
//
// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.generators)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
//
// ## Example Usage
//
// ### Dialogflowcx Generator Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/diagflow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
//				DisplayName:         pulumi.String("dialogflowcx-agent-fucntion"),
//				Location:            pulumi.String("global"),
//				DefaultLanguageCode: pulumi.String("en"),
//				SupportedLanguageCodes: pulumi.StringArray{
//					pulumi.String("fr"),
//					pulumi.String("de"),
//					pulumi.String("es"),
//				},
//				TimeZone:    pulumi.String("America/New_York"),
//				Description: pulumi.String("Example description."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = diagflow.NewCxGenerator(ctx, "generator", &diagflow.CxGeneratorArgs{
//				Parent:       agent.ID(),
//				LanguageCode: pulumi.String("fr"),
//				DisplayName:  pulumi.String("TF Prompt generator"),
//				LlmModelSettings: &diagflow.CxGeneratorLlmModelSettingsArgs{
//					Model:      pulumi.String("gemini-2.0-flash-001"),
//					PromptText: pulumi.String("Return me some great results"),
//				},
//				PromptText: &diagflow.CxGeneratorPromptTextArgs{
//					Text: pulumi.String("Send me great results in french"),
//				},
//				ModelParameter: &diagflow.CxGeneratorModelParameterArgs{
//					Temperature: pulumi.Float64(0.55),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Generator can be imported using any of these accepted formats:
//
// * `{{parent}}/generators/{{name}}`
//
// * `{{parent}}/{{name}}`
//
// When using the `pulumi import` command, Generator can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:diagflow/cxGenerator:CxGenerator default {{parent}}/generators/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:diagflow/cxGenerator:CxGenerator default {{parent}}/{{name}}
// ```
type CxGenerator struct {
	pulumi.CustomResourceState

	// The human-readable name of the generator, unique within the agent.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The language to create generators for the following fields:
	// * Generator.prompt_text.text
	//   If not specified, the agent's default language is used.
	LanguageCode pulumi.StringPtrOutput `pulumi:"languageCode"`
	// The LLM model settings.
	// Structure is documented below.
	LlmModelSettings CxGeneratorLlmModelSettingsPtrOutput `pulumi:"llmModelSettings"`
	// Parameters passed to the LLM to configure its behavior.
	// Structure is documented below.
	ModelParameter CxGeneratorModelParameterPtrOutput `pulumi:"modelParameter"`
	// The unique identifier of the Generator.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/generators/<Generator ID>.
	Name pulumi.StringOutput `pulumi:"name"`
	// The agent to create a Generator for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
	// List of custom placeholders in the prompt text.
	// Structure is documented below.
	Placeholders CxGeneratorPlaceholderArrayOutput `pulumi:"placeholders"`
	// Prompt for the LLM model.
	// Structure is documented below.
	PromptText CxGeneratorPromptTextOutput `pulumi:"promptText"`
}

// NewCxGenerator registers a new resource with the given unique name, arguments, and options.
func NewCxGenerator(ctx *pulumi.Context,
	name string, args *CxGeneratorArgs, opts ...pulumi.ResourceOption) (*CxGenerator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.PromptText == nil {
		return nil, errors.New("invalid value for required argument 'PromptText'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CxGenerator
	err := ctx.RegisterResource("gcp:diagflow/cxGenerator:CxGenerator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCxGenerator gets an existing CxGenerator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCxGenerator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CxGeneratorState, opts ...pulumi.ResourceOption) (*CxGenerator, error) {
	var resource CxGenerator
	err := ctx.ReadResource("gcp:diagflow/cxGenerator:CxGenerator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CxGenerator resources.
type cxGeneratorState struct {
	// The human-readable name of the generator, unique within the agent.
	DisplayName *string `pulumi:"displayName"`
	// The language to create generators for the following fields:
	// * Generator.prompt_text.text
	//   If not specified, the agent's default language is used.
	LanguageCode *string `pulumi:"languageCode"`
	// The LLM model settings.
	// Structure is documented below.
	LlmModelSettings *CxGeneratorLlmModelSettings `pulumi:"llmModelSettings"`
	// Parameters passed to the LLM to configure its behavior.
	// Structure is documented below.
	ModelParameter *CxGeneratorModelParameter `pulumi:"modelParameter"`
	// The unique identifier of the Generator.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/generators/<Generator ID>.
	Name *string `pulumi:"name"`
	// The agent to create a Generator for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
	// List of custom placeholders in the prompt text.
	// Structure is documented below.
	Placeholders []CxGeneratorPlaceholder `pulumi:"placeholders"`
	// Prompt for the LLM model.
	// Structure is documented below.
	PromptText *CxGeneratorPromptText `pulumi:"promptText"`
}

type CxGeneratorState struct {
	// The human-readable name of the generator, unique within the agent.
	DisplayName pulumi.StringPtrInput
	// The language to create generators for the following fields:
	// * Generator.prompt_text.text
	//   If not specified, the agent's default language is used.
	LanguageCode pulumi.StringPtrInput
	// The LLM model settings.
	// Structure is documented below.
	LlmModelSettings CxGeneratorLlmModelSettingsPtrInput
	// Parameters passed to the LLM to configure its behavior.
	// Structure is documented below.
	ModelParameter CxGeneratorModelParameterPtrInput
	// The unique identifier of the Generator.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/generators/<Generator ID>.
	Name pulumi.StringPtrInput
	// The agent to create a Generator for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
	// List of custom placeholders in the prompt text.
	// Structure is documented below.
	Placeholders CxGeneratorPlaceholderArrayInput
	// Prompt for the LLM model.
	// Structure is documented below.
	PromptText CxGeneratorPromptTextPtrInput
}

func (CxGeneratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*cxGeneratorState)(nil)).Elem()
}

type cxGeneratorArgs struct {
	// The human-readable name of the generator, unique within the agent.
	DisplayName string `pulumi:"displayName"`
	// The language to create generators for the following fields:
	// * Generator.prompt_text.text
	//   If not specified, the agent's default language is used.
	LanguageCode *string `pulumi:"languageCode"`
	// The LLM model settings.
	// Structure is documented below.
	LlmModelSettings *CxGeneratorLlmModelSettings `pulumi:"llmModelSettings"`
	// Parameters passed to the LLM to configure its behavior.
	// Structure is documented below.
	ModelParameter *CxGeneratorModelParameter `pulumi:"modelParameter"`
	// The agent to create a Generator for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
	// List of custom placeholders in the prompt text.
	// Structure is documented below.
	Placeholders []CxGeneratorPlaceholder `pulumi:"placeholders"`
	// Prompt for the LLM model.
	// Structure is documented below.
	PromptText CxGeneratorPromptText `pulumi:"promptText"`
}

// The set of arguments for constructing a CxGenerator resource.
type CxGeneratorArgs struct {
	// The human-readable name of the generator, unique within the agent.
	DisplayName pulumi.StringInput
	// The language to create generators for the following fields:
	// * Generator.prompt_text.text
	//   If not specified, the agent's default language is used.
	LanguageCode pulumi.StringPtrInput
	// The LLM model settings.
	// Structure is documented below.
	LlmModelSettings CxGeneratorLlmModelSettingsPtrInput
	// Parameters passed to the LLM to configure its behavior.
	// Structure is documented below.
	ModelParameter CxGeneratorModelParameterPtrInput
	// The agent to create a Generator for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
	// List of custom placeholders in the prompt text.
	// Structure is documented below.
	Placeholders CxGeneratorPlaceholderArrayInput
	// Prompt for the LLM model.
	// Structure is documented below.
	PromptText CxGeneratorPromptTextInput
}

func (CxGeneratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cxGeneratorArgs)(nil)).Elem()
}

type CxGeneratorInput interface {
	pulumi.Input

	ToCxGeneratorOutput() CxGeneratorOutput
	ToCxGeneratorOutputWithContext(ctx context.Context) CxGeneratorOutput
}

func (*CxGenerator) ElementType() reflect.Type {
	return reflect.TypeOf((**CxGenerator)(nil)).Elem()
}

func (i *CxGenerator) ToCxGeneratorOutput() CxGeneratorOutput {
	return i.ToCxGeneratorOutputWithContext(context.Background())
}

func (i *CxGenerator) ToCxGeneratorOutputWithContext(ctx context.Context) CxGeneratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxGeneratorOutput)
}

// CxGeneratorArrayInput is an input type that accepts CxGeneratorArray and CxGeneratorArrayOutput values.
// You can construct a concrete instance of `CxGeneratorArrayInput` via:
//
//	CxGeneratorArray{ CxGeneratorArgs{...} }
type CxGeneratorArrayInput interface {
	pulumi.Input

	ToCxGeneratorArrayOutput() CxGeneratorArrayOutput
	ToCxGeneratorArrayOutputWithContext(context.Context) CxGeneratorArrayOutput
}

type CxGeneratorArray []CxGeneratorInput

func (CxGeneratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxGenerator)(nil)).Elem()
}

func (i CxGeneratorArray) ToCxGeneratorArrayOutput() CxGeneratorArrayOutput {
	return i.ToCxGeneratorArrayOutputWithContext(context.Background())
}

func (i CxGeneratorArray) ToCxGeneratorArrayOutputWithContext(ctx context.Context) CxGeneratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxGeneratorArrayOutput)
}

// CxGeneratorMapInput is an input type that accepts CxGeneratorMap and CxGeneratorMapOutput values.
// You can construct a concrete instance of `CxGeneratorMapInput` via:
//
//	CxGeneratorMap{ "key": CxGeneratorArgs{...} }
type CxGeneratorMapInput interface {
	pulumi.Input

	ToCxGeneratorMapOutput() CxGeneratorMapOutput
	ToCxGeneratorMapOutputWithContext(context.Context) CxGeneratorMapOutput
}

type CxGeneratorMap map[string]CxGeneratorInput

func (CxGeneratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxGenerator)(nil)).Elem()
}

func (i CxGeneratorMap) ToCxGeneratorMapOutput() CxGeneratorMapOutput {
	return i.ToCxGeneratorMapOutputWithContext(context.Background())
}

func (i CxGeneratorMap) ToCxGeneratorMapOutputWithContext(ctx context.Context) CxGeneratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxGeneratorMapOutput)
}

type CxGeneratorOutput struct{ *pulumi.OutputState }

func (CxGeneratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxGenerator)(nil)).Elem()
}

func (o CxGeneratorOutput) ToCxGeneratorOutput() CxGeneratorOutput {
	return o
}

func (o CxGeneratorOutput) ToCxGeneratorOutputWithContext(ctx context.Context) CxGeneratorOutput {
	return o
}

// The human-readable name of the generator, unique within the agent.
func (o CxGeneratorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CxGenerator) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The language to create generators for the following fields:
//   - Generator.prompt_text.text
//     If not specified, the agent's default language is used.
func (o CxGeneratorOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxGenerator) pulumi.StringPtrOutput { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// The LLM model settings.
// Structure is documented below.
func (o CxGeneratorOutput) LlmModelSettings() CxGeneratorLlmModelSettingsPtrOutput {
	return o.ApplyT(func(v *CxGenerator) CxGeneratorLlmModelSettingsPtrOutput { return v.LlmModelSettings }).(CxGeneratorLlmModelSettingsPtrOutput)
}

// Parameters passed to the LLM to configure its behavior.
// Structure is documented below.
func (o CxGeneratorOutput) ModelParameter() CxGeneratorModelParameterPtrOutput {
	return o.ApplyT(func(v *CxGenerator) CxGeneratorModelParameterPtrOutput { return v.ModelParameter }).(CxGeneratorModelParameterPtrOutput)
}

// The unique identifier of the Generator.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/generators/<Generator ID>.
func (o CxGeneratorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CxGenerator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The agent to create a Generator for.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
func (o CxGeneratorOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxGenerator) pulumi.StringPtrOutput { return v.Parent }).(pulumi.StringPtrOutput)
}

// List of custom placeholders in the prompt text.
// Structure is documented below.
func (o CxGeneratorOutput) Placeholders() CxGeneratorPlaceholderArrayOutput {
	return o.ApplyT(func(v *CxGenerator) CxGeneratorPlaceholderArrayOutput { return v.Placeholders }).(CxGeneratorPlaceholderArrayOutput)
}

// Prompt for the LLM model.
// Structure is documented below.
func (o CxGeneratorOutput) PromptText() CxGeneratorPromptTextOutput {
	return o.ApplyT(func(v *CxGenerator) CxGeneratorPromptTextOutput { return v.PromptText }).(CxGeneratorPromptTextOutput)
}

type CxGeneratorArrayOutput struct{ *pulumi.OutputState }

func (CxGeneratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CxGenerator)(nil)).Elem()
}

func (o CxGeneratorArrayOutput) ToCxGeneratorArrayOutput() CxGeneratorArrayOutput {
	return o
}

func (o CxGeneratorArrayOutput) ToCxGeneratorArrayOutputWithContext(ctx context.Context) CxGeneratorArrayOutput {
	return o
}

func (o CxGeneratorArrayOutput) Index(i pulumi.IntInput) CxGeneratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CxGenerator {
		return vs[0].([]*CxGenerator)[vs[1].(int)]
	}).(CxGeneratorOutput)
}

type CxGeneratorMapOutput struct{ *pulumi.OutputState }

func (CxGeneratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CxGenerator)(nil)).Elem()
}

func (o CxGeneratorMapOutput) ToCxGeneratorMapOutput() CxGeneratorMapOutput {
	return o
}

func (o CxGeneratorMapOutput) ToCxGeneratorMapOutputWithContext(ctx context.Context) CxGeneratorMapOutput {
	return o
}

func (o CxGeneratorMapOutput) MapIndex(k pulumi.StringInput) CxGeneratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CxGenerator {
		return vs[0].(map[string]*CxGenerator)[vs[1].(string)]
	}).(CxGeneratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CxGeneratorInput)(nil)).Elem(), &CxGenerator{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxGeneratorArrayInput)(nil)).Elem(), CxGeneratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxGeneratorMapInput)(nil)).Elem(), CxGeneratorMap{})
	pulumi.RegisterOutputType(CxGeneratorOutput{})
	pulumi.RegisterOutputType(CxGeneratorArrayOutput{})
	pulumi.RegisterOutputType(CxGeneratorMapOutput{})
}
