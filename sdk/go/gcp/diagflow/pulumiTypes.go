// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CxAgentAdvancedSettings struct {
	// If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
	// * Agent level
	// * Flow level
	//   Structure is documented below.
	AudioExportGcsDestination *CxAgentAdvancedSettingsAudioExportGcsDestination `pulumi:"audioExportGcsDestination"`
	// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
	// * Agent level
	// * Flow level
	// * Page level
	// * Parameter level
	//   Structure is documented below.
	DtmfSettings *CxAgentAdvancedSettingsDtmfSettings `pulumi:"dtmfSettings"`
}

// CxAgentAdvancedSettingsInput is an input type that accepts CxAgentAdvancedSettingsArgs and CxAgentAdvancedSettingsOutput values.
// You can construct a concrete instance of `CxAgentAdvancedSettingsInput` via:
//
//	CxAgentAdvancedSettingsArgs{...}
type CxAgentAdvancedSettingsInput interface {
	pulumi.Input

	ToCxAgentAdvancedSettingsOutput() CxAgentAdvancedSettingsOutput
	ToCxAgentAdvancedSettingsOutputWithContext(context.Context) CxAgentAdvancedSettingsOutput
}

type CxAgentAdvancedSettingsArgs struct {
	// If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
	// * Agent level
	// * Flow level
	//   Structure is documented below.
	AudioExportGcsDestination CxAgentAdvancedSettingsAudioExportGcsDestinationPtrInput `pulumi:"audioExportGcsDestination"`
	// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
	// * Agent level
	// * Flow level
	// * Page level
	// * Parameter level
	//   Structure is documented below.
	DtmfSettings CxAgentAdvancedSettingsDtmfSettingsPtrInput `pulumi:"dtmfSettings"`
}

func (CxAgentAdvancedSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentAdvancedSettings)(nil)).Elem()
}

func (i CxAgentAdvancedSettingsArgs) ToCxAgentAdvancedSettingsOutput() CxAgentAdvancedSettingsOutput {
	return i.ToCxAgentAdvancedSettingsOutputWithContext(context.Background())
}

func (i CxAgentAdvancedSettingsArgs) ToCxAgentAdvancedSettingsOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsOutput)
}

func (i CxAgentAdvancedSettingsArgs) ToCxAgentAdvancedSettingsPtrOutput() CxAgentAdvancedSettingsPtrOutput {
	return i.ToCxAgentAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (i CxAgentAdvancedSettingsArgs) ToCxAgentAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsOutput).ToCxAgentAdvancedSettingsPtrOutputWithContext(ctx)
}

// CxAgentAdvancedSettingsPtrInput is an input type that accepts CxAgentAdvancedSettingsArgs, CxAgentAdvancedSettingsPtr and CxAgentAdvancedSettingsPtrOutput values.
// You can construct a concrete instance of `CxAgentAdvancedSettingsPtrInput` via:
//
//	        CxAgentAdvancedSettingsArgs{...}
//
//	or:
//
//	        nil
type CxAgentAdvancedSettingsPtrInput interface {
	pulumi.Input

	ToCxAgentAdvancedSettingsPtrOutput() CxAgentAdvancedSettingsPtrOutput
	ToCxAgentAdvancedSettingsPtrOutputWithContext(context.Context) CxAgentAdvancedSettingsPtrOutput
}

type cxAgentAdvancedSettingsPtrType CxAgentAdvancedSettingsArgs

func CxAgentAdvancedSettingsPtr(v *CxAgentAdvancedSettingsArgs) CxAgentAdvancedSettingsPtrInput {
	return (*cxAgentAdvancedSettingsPtrType)(v)
}

func (*cxAgentAdvancedSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentAdvancedSettings)(nil)).Elem()
}

func (i *cxAgentAdvancedSettingsPtrType) ToCxAgentAdvancedSettingsPtrOutput() CxAgentAdvancedSettingsPtrOutput {
	return i.ToCxAgentAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (i *cxAgentAdvancedSettingsPtrType) ToCxAgentAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsPtrOutput)
}

type CxAgentAdvancedSettingsOutput struct{ *pulumi.OutputState }

func (CxAgentAdvancedSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentAdvancedSettings)(nil)).Elem()
}

func (o CxAgentAdvancedSettingsOutput) ToCxAgentAdvancedSettingsOutput() CxAgentAdvancedSettingsOutput {
	return o
}

func (o CxAgentAdvancedSettingsOutput) ToCxAgentAdvancedSettingsOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsOutput {
	return o
}

func (o CxAgentAdvancedSettingsOutput) ToCxAgentAdvancedSettingsPtrOutput() CxAgentAdvancedSettingsPtrOutput {
	return o.ToCxAgentAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (o CxAgentAdvancedSettingsOutput) ToCxAgentAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxAgentAdvancedSettings) *CxAgentAdvancedSettings {
		return &v
	}).(CxAgentAdvancedSettingsPtrOutput)
}

// If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
//   - Agent level
//   - Flow level
//     Structure is documented below.
func (o CxAgentAdvancedSettingsOutput) AudioExportGcsDestination() CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o.ApplyT(func(v CxAgentAdvancedSettings) *CxAgentAdvancedSettingsAudioExportGcsDestination {
		return v.AudioExportGcsDestination
	}).(CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput)
}

// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
//   - Agent level
//   - Flow level
//   - Page level
//   - Parameter level
//     Structure is documented below.
func (o CxAgentAdvancedSettingsOutput) DtmfSettings() CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyT(func(v CxAgentAdvancedSettings) *CxAgentAdvancedSettingsDtmfSettings { return v.DtmfSettings }).(CxAgentAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxAgentAdvancedSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxAgentAdvancedSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentAdvancedSettings)(nil)).Elem()
}

func (o CxAgentAdvancedSettingsPtrOutput) ToCxAgentAdvancedSettingsPtrOutput() CxAgentAdvancedSettingsPtrOutput {
	return o
}

func (o CxAgentAdvancedSettingsPtrOutput) ToCxAgentAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsPtrOutput {
	return o
}

func (o CxAgentAdvancedSettingsPtrOutput) Elem() CxAgentAdvancedSettingsOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettings) CxAgentAdvancedSettings {
		if v != nil {
			return *v
		}
		var ret CxAgentAdvancedSettings
		return ret
	}).(CxAgentAdvancedSettingsOutput)
}

// If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
//   - Agent level
//   - Flow level
//     Structure is documented below.
func (o CxAgentAdvancedSettingsPtrOutput) AudioExportGcsDestination() CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettings) *CxAgentAdvancedSettingsAudioExportGcsDestination {
		if v == nil {
			return nil
		}
		return v.AudioExportGcsDestination
	}).(CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput)
}

// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
//   - Agent level
//   - Flow level
//   - Page level
//   - Parameter level
//     Structure is documented below.
func (o CxAgentAdvancedSettingsPtrOutput) DtmfSettings() CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettings) *CxAgentAdvancedSettingsDtmfSettings {
		if v == nil {
			return nil
		}
		return v.DtmfSettings
	}).(CxAgentAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxAgentAdvancedSettingsAudioExportGcsDestination struct {
	// The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
	// Format: gs://bucket/object-name-or-prefix
	Uri *string `pulumi:"uri"`
}

// CxAgentAdvancedSettingsAudioExportGcsDestinationInput is an input type that accepts CxAgentAdvancedSettingsAudioExportGcsDestinationArgs and CxAgentAdvancedSettingsAudioExportGcsDestinationOutput values.
// You can construct a concrete instance of `CxAgentAdvancedSettingsAudioExportGcsDestinationInput` via:
//
//	CxAgentAdvancedSettingsAudioExportGcsDestinationArgs{...}
type CxAgentAdvancedSettingsAudioExportGcsDestinationInput interface {
	pulumi.Input

	ToCxAgentAdvancedSettingsAudioExportGcsDestinationOutput() CxAgentAdvancedSettingsAudioExportGcsDestinationOutput
	ToCxAgentAdvancedSettingsAudioExportGcsDestinationOutputWithContext(context.Context) CxAgentAdvancedSettingsAudioExportGcsDestinationOutput
}

type CxAgentAdvancedSettingsAudioExportGcsDestinationArgs struct {
	// The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
	// Format: gs://bucket/object-name-or-prefix
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (CxAgentAdvancedSettingsAudioExportGcsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentAdvancedSettingsAudioExportGcsDestination)(nil)).Elem()
}

func (i CxAgentAdvancedSettingsAudioExportGcsDestinationArgs) ToCxAgentAdvancedSettingsAudioExportGcsDestinationOutput() CxAgentAdvancedSettingsAudioExportGcsDestinationOutput {
	return i.ToCxAgentAdvancedSettingsAudioExportGcsDestinationOutputWithContext(context.Background())
}

func (i CxAgentAdvancedSettingsAudioExportGcsDestinationArgs) ToCxAgentAdvancedSettingsAudioExportGcsDestinationOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsAudioExportGcsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsAudioExportGcsDestinationOutput)
}

func (i CxAgentAdvancedSettingsAudioExportGcsDestinationArgs) ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return i.ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(context.Background())
}

func (i CxAgentAdvancedSettingsAudioExportGcsDestinationArgs) ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsAudioExportGcsDestinationOutput).ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx)
}

// CxAgentAdvancedSettingsAudioExportGcsDestinationPtrInput is an input type that accepts CxAgentAdvancedSettingsAudioExportGcsDestinationArgs, CxAgentAdvancedSettingsAudioExportGcsDestinationPtr and CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput values.
// You can construct a concrete instance of `CxAgentAdvancedSettingsAudioExportGcsDestinationPtrInput` via:
//
//	        CxAgentAdvancedSettingsAudioExportGcsDestinationArgs{...}
//
//	or:
//
//	        nil
type CxAgentAdvancedSettingsAudioExportGcsDestinationPtrInput interface {
	pulumi.Input

	ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput
	ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(context.Context) CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput
}

type cxAgentAdvancedSettingsAudioExportGcsDestinationPtrType CxAgentAdvancedSettingsAudioExportGcsDestinationArgs

func CxAgentAdvancedSettingsAudioExportGcsDestinationPtr(v *CxAgentAdvancedSettingsAudioExportGcsDestinationArgs) CxAgentAdvancedSettingsAudioExportGcsDestinationPtrInput {
	return (*cxAgentAdvancedSettingsAudioExportGcsDestinationPtrType)(v)
}

func (*cxAgentAdvancedSettingsAudioExportGcsDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentAdvancedSettingsAudioExportGcsDestination)(nil)).Elem()
}

func (i *cxAgentAdvancedSettingsAudioExportGcsDestinationPtrType) ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return i.ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(context.Background())
}

func (i *cxAgentAdvancedSettingsAudioExportGcsDestinationPtrType) ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput)
}

type CxAgentAdvancedSettingsAudioExportGcsDestinationOutput struct{ *pulumi.OutputState }

func (CxAgentAdvancedSettingsAudioExportGcsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentAdvancedSettingsAudioExportGcsDestination)(nil)).Elem()
}

func (o CxAgentAdvancedSettingsAudioExportGcsDestinationOutput) ToCxAgentAdvancedSettingsAudioExportGcsDestinationOutput() CxAgentAdvancedSettingsAudioExportGcsDestinationOutput {
	return o
}

func (o CxAgentAdvancedSettingsAudioExportGcsDestinationOutput) ToCxAgentAdvancedSettingsAudioExportGcsDestinationOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsAudioExportGcsDestinationOutput {
	return o
}

func (o CxAgentAdvancedSettingsAudioExportGcsDestinationOutput) ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o.ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(context.Background())
}

func (o CxAgentAdvancedSettingsAudioExportGcsDestinationOutput) ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxAgentAdvancedSettingsAudioExportGcsDestination) *CxAgentAdvancedSettingsAudioExportGcsDestination {
		return &v
	}).(CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput)
}

// The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
// Format: gs://bucket/object-name-or-prefix
func (o CxAgentAdvancedSettingsAudioExportGcsDestinationOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxAgentAdvancedSettingsAudioExportGcsDestination) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput struct{ *pulumi.OutputState }

func (CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentAdvancedSettingsAudioExportGcsDestination)(nil)).Elem()
}

func (o CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput) ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o
}

func (o CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput) ToCxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o
}

func (o CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput) Elem() CxAgentAdvancedSettingsAudioExportGcsDestinationOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettingsAudioExportGcsDestination) CxAgentAdvancedSettingsAudioExportGcsDestination {
		if v != nil {
			return *v
		}
		var ret CxAgentAdvancedSettingsAudioExportGcsDestination
		return ret
	}).(CxAgentAdvancedSettingsAudioExportGcsDestinationOutput)
}

// The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
// Format: gs://bucket/object-name-or-prefix
func (o CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettingsAudioExportGcsDestination) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type CxAgentAdvancedSettingsDtmfSettings struct {
	// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
	Enabled *bool `pulumi:"enabled"`
	// The digit that terminates a DTMF digit sequence.
	FinishDigit *string `pulumi:"finishDigit"`
	// Max length of DTMF digits.
	MaxDigits *int `pulumi:"maxDigits"`
}

// CxAgentAdvancedSettingsDtmfSettingsInput is an input type that accepts CxAgentAdvancedSettingsDtmfSettingsArgs and CxAgentAdvancedSettingsDtmfSettingsOutput values.
// You can construct a concrete instance of `CxAgentAdvancedSettingsDtmfSettingsInput` via:
//
//	CxAgentAdvancedSettingsDtmfSettingsArgs{...}
type CxAgentAdvancedSettingsDtmfSettingsInput interface {
	pulumi.Input

	ToCxAgentAdvancedSettingsDtmfSettingsOutput() CxAgentAdvancedSettingsDtmfSettingsOutput
	ToCxAgentAdvancedSettingsDtmfSettingsOutputWithContext(context.Context) CxAgentAdvancedSettingsDtmfSettingsOutput
}

type CxAgentAdvancedSettingsDtmfSettingsArgs struct {
	// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The digit that terminates a DTMF digit sequence.
	FinishDigit pulumi.StringPtrInput `pulumi:"finishDigit"`
	// Max length of DTMF digits.
	MaxDigits pulumi.IntPtrInput `pulumi:"maxDigits"`
}

func (CxAgentAdvancedSettingsDtmfSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (i CxAgentAdvancedSettingsDtmfSettingsArgs) ToCxAgentAdvancedSettingsDtmfSettingsOutput() CxAgentAdvancedSettingsDtmfSettingsOutput {
	return i.ToCxAgentAdvancedSettingsDtmfSettingsOutputWithContext(context.Background())
}

func (i CxAgentAdvancedSettingsDtmfSettingsArgs) ToCxAgentAdvancedSettingsDtmfSettingsOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsDtmfSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsDtmfSettingsOutput)
}

func (i CxAgentAdvancedSettingsDtmfSettingsArgs) ToCxAgentAdvancedSettingsDtmfSettingsPtrOutput() CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return i.ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (i CxAgentAdvancedSettingsDtmfSettingsArgs) ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsDtmfSettingsOutput).ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx)
}

// CxAgentAdvancedSettingsDtmfSettingsPtrInput is an input type that accepts CxAgentAdvancedSettingsDtmfSettingsArgs, CxAgentAdvancedSettingsDtmfSettingsPtr and CxAgentAdvancedSettingsDtmfSettingsPtrOutput values.
// You can construct a concrete instance of `CxAgentAdvancedSettingsDtmfSettingsPtrInput` via:
//
//	        CxAgentAdvancedSettingsDtmfSettingsArgs{...}
//
//	or:
//
//	        nil
type CxAgentAdvancedSettingsDtmfSettingsPtrInput interface {
	pulumi.Input

	ToCxAgentAdvancedSettingsDtmfSettingsPtrOutput() CxAgentAdvancedSettingsDtmfSettingsPtrOutput
	ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Context) CxAgentAdvancedSettingsDtmfSettingsPtrOutput
}

type cxAgentAdvancedSettingsDtmfSettingsPtrType CxAgentAdvancedSettingsDtmfSettingsArgs

func CxAgentAdvancedSettingsDtmfSettingsPtr(v *CxAgentAdvancedSettingsDtmfSettingsArgs) CxAgentAdvancedSettingsDtmfSettingsPtrInput {
	return (*cxAgentAdvancedSettingsDtmfSettingsPtrType)(v)
}

func (*cxAgentAdvancedSettingsDtmfSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (i *cxAgentAdvancedSettingsDtmfSettingsPtrType) ToCxAgentAdvancedSettingsDtmfSettingsPtrOutput() CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return i.ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (i *cxAgentAdvancedSettingsDtmfSettingsPtrType) ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxAgentAdvancedSettingsDtmfSettingsOutput struct{ *pulumi.OutputState }

func (CxAgentAdvancedSettingsDtmfSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (o CxAgentAdvancedSettingsDtmfSettingsOutput) ToCxAgentAdvancedSettingsDtmfSettingsOutput() CxAgentAdvancedSettingsDtmfSettingsOutput {
	return o
}

func (o CxAgentAdvancedSettingsDtmfSettingsOutput) ToCxAgentAdvancedSettingsDtmfSettingsOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsDtmfSettingsOutput {
	return o
}

func (o CxAgentAdvancedSettingsDtmfSettingsOutput) ToCxAgentAdvancedSettingsDtmfSettingsPtrOutput() CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (o CxAgentAdvancedSettingsDtmfSettingsOutput) ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxAgentAdvancedSettingsDtmfSettings) *CxAgentAdvancedSettingsDtmfSettings {
		return &v
	}).(CxAgentAdvancedSettingsDtmfSettingsPtrOutput)
}

// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
func (o CxAgentAdvancedSettingsDtmfSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxAgentAdvancedSettingsDtmfSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The digit that terminates a DTMF digit sequence.
func (o CxAgentAdvancedSettingsDtmfSettingsOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxAgentAdvancedSettingsDtmfSettings) *string { return v.FinishDigit }).(pulumi.StringPtrOutput)
}

// Max length of DTMF digits.
func (o CxAgentAdvancedSettingsDtmfSettingsOutput) MaxDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CxAgentAdvancedSettingsDtmfSettings) *int { return v.MaxDigits }).(pulumi.IntPtrOutput)
}

type CxAgentAdvancedSettingsDtmfSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxAgentAdvancedSettingsDtmfSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (o CxAgentAdvancedSettingsDtmfSettingsPtrOutput) ToCxAgentAdvancedSettingsDtmfSettingsPtrOutput() CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return o
}

func (o CxAgentAdvancedSettingsDtmfSettingsPtrOutput) ToCxAgentAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxAgentAdvancedSettingsDtmfSettingsPtrOutput {
	return o
}

func (o CxAgentAdvancedSettingsDtmfSettingsPtrOutput) Elem() CxAgentAdvancedSettingsDtmfSettingsOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettingsDtmfSettings) CxAgentAdvancedSettingsDtmfSettings {
		if v != nil {
			return *v
		}
		var ret CxAgentAdvancedSettingsDtmfSettings
		return ret
	}).(CxAgentAdvancedSettingsDtmfSettingsOutput)
}

// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
func (o CxAgentAdvancedSettingsDtmfSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettingsDtmfSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The digit that terminates a DTMF digit sequence.
func (o CxAgentAdvancedSettingsDtmfSettingsPtrOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettingsDtmfSettings) *string {
		if v == nil {
			return nil
		}
		return v.FinishDigit
	}).(pulumi.StringPtrOutput)
}

// Max length of DTMF digits.
func (o CxAgentAdvancedSettingsDtmfSettingsPtrOutput) MaxDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CxAgentAdvancedSettingsDtmfSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxDigits
	}).(pulumi.IntPtrOutput)
}

type CxAgentGitIntegrationSettings struct {
	// Settings of integration with GitHub.
	// Structure is documented below.
	GithubSettings *CxAgentGitIntegrationSettingsGithubSettings `pulumi:"githubSettings"`
}

// CxAgentGitIntegrationSettingsInput is an input type that accepts CxAgentGitIntegrationSettingsArgs and CxAgentGitIntegrationSettingsOutput values.
// You can construct a concrete instance of `CxAgentGitIntegrationSettingsInput` via:
//
//	CxAgentGitIntegrationSettingsArgs{...}
type CxAgentGitIntegrationSettingsInput interface {
	pulumi.Input

	ToCxAgentGitIntegrationSettingsOutput() CxAgentGitIntegrationSettingsOutput
	ToCxAgentGitIntegrationSettingsOutputWithContext(context.Context) CxAgentGitIntegrationSettingsOutput
}

type CxAgentGitIntegrationSettingsArgs struct {
	// Settings of integration with GitHub.
	// Structure is documented below.
	GithubSettings CxAgentGitIntegrationSettingsGithubSettingsPtrInput `pulumi:"githubSettings"`
}

func (CxAgentGitIntegrationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentGitIntegrationSettings)(nil)).Elem()
}

func (i CxAgentGitIntegrationSettingsArgs) ToCxAgentGitIntegrationSettingsOutput() CxAgentGitIntegrationSettingsOutput {
	return i.ToCxAgentGitIntegrationSettingsOutputWithContext(context.Background())
}

func (i CxAgentGitIntegrationSettingsArgs) ToCxAgentGitIntegrationSettingsOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentGitIntegrationSettingsOutput)
}

func (i CxAgentGitIntegrationSettingsArgs) ToCxAgentGitIntegrationSettingsPtrOutput() CxAgentGitIntegrationSettingsPtrOutput {
	return i.ToCxAgentGitIntegrationSettingsPtrOutputWithContext(context.Background())
}

func (i CxAgentGitIntegrationSettingsArgs) ToCxAgentGitIntegrationSettingsPtrOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentGitIntegrationSettingsOutput).ToCxAgentGitIntegrationSettingsPtrOutputWithContext(ctx)
}

// CxAgentGitIntegrationSettingsPtrInput is an input type that accepts CxAgentGitIntegrationSettingsArgs, CxAgentGitIntegrationSettingsPtr and CxAgentGitIntegrationSettingsPtrOutput values.
// You can construct a concrete instance of `CxAgentGitIntegrationSettingsPtrInput` via:
//
//	        CxAgentGitIntegrationSettingsArgs{...}
//
//	or:
//
//	        nil
type CxAgentGitIntegrationSettingsPtrInput interface {
	pulumi.Input

	ToCxAgentGitIntegrationSettingsPtrOutput() CxAgentGitIntegrationSettingsPtrOutput
	ToCxAgentGitIntegrationSettingsPtrOutputWithContext(context.Context) CxAgentGitIntegrationSettingsPtrOutput
}

type cxAgentGitIntegrationSettingsPtrType CxAgentGitIntegrationSettingsArgs

func CxAgentGitIntegrationSettingsPtr(v *CxAgentGitIntegrationSettingsArgs) CxAgentGitIntegrationSettingsPtrInput {
	return (*cxAgentGitIntegrationSettingsPtrType)(v)
}

func (*cxAgentGitIntegrationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentGitIntegrationSettings)(nil)).Elem()
}

func (i *cxAgentGitIntegrationSettingsPtrType) ToCxAgentGitIntegrationSettingsPtrOutput() CxAgentGitIntegrationSettingsPtrOutput {
	return i.ToCxAgentGitIntegrationSettingsPtrOutputWithContext(context.Background())
}

func (i *cxAgentGitIntegrationSettingsPtrType) ToCxAgentGitIntegrationSettingsPtrOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentGitIntegrationSettingsPtrOutput)
}

type CxAgentGitIntegrationSettingsOutput struct{ *pulumi.OutputState }

func (CxAgentGitIntegrationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentGitIntegrationSettings)(nil)).Elem()
}

func (o CxAgentGitIntegrationSettingsOutput) ToCxAgentGitIntegrationSettingsOutput() CxAgentGitIntegrationSettingsOutput {
	return o
}

func (o CxAgentGitIntegrationSettingsOutput) ToCxAgentGitIntegrationSettingsOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsOutput {
	return o
}

func (o CxAgentGitIntegrationSettingsOutput) ToCxAgentGitIntegrationSettingsPtrOutput() CxAgentGitIntegrationSettingsPtrOutput {
	return o.ToCxAgentGitIntegrationSettingsPtrOutputWithContext(context.Background())
}

func (o CxAgentGitIntegrationSettingsOutput) ToCxAgentGitIntegrationSettingsPtrOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxAgentGitIntegrationSettings) *CxAgentGitIntegrationSettings {
		return &v
	}).(CxAgentGitIntegrationSettingsPtrOutput)
}

// Settings of integration with GitHub.
// Structure is documented below.
func (o CxAgentGitIntegrationSettingsOutput) GithubSettings() CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return o.ApplyT(func(v CxAgentGitIntegrationSettings) *CxAgentGitIntegrationSettingsGithubSettings {
		return v.GithubSettings
	}).(CxAgentGitIntegrationSettingsGithubSettingsPtrOutput)
}

type CxAgentGitIntegrationSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxAgentGitIntegrationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentGitIntegrationSettings)(nil)).Elem()
}

func (o CxAgentGitIntegrationSettingsPtrOutput) ToCxAgentGitIntegrationSettingsPtrOutput() CxAgentGitIntegrationSettingsPtrOutput {
	return o
}

func (o CxAgentGitIntegrationSettingsPtrOutput) ToCxAgentGitIntegrationSettingsPtrOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsPtrOutput {
	return o
}

func (o CxAgentGitIntegrationSettingsPtrOutput) Elem() CxAgentGitIntegrationSettingsOutput {
	return o.ApplyT(func(v *CxAgentGitIntegrationSettings) CxAgentGitIntegrationSettings {
		if v != nil {
			return *v
		}
		var ret CxAgentGitIntegrationSettings
		return ret
	}).(CxAgentGitIntegrationSettingsOutput)
}

// Settings of integration with GitHub.
// Structure is documented below.
func (o CxAgentGitIntegrationSettingsPtrOutput) GithubSettings() CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return o.ApplyT(func(v *CxAgentGitIntegrationSettings) *CxAgentGitIntegrationSettingsGithubSettings {
		if v == nil {
			return nil
		}
		return v.GithubSettings
	}).(CxAgentGitIntegrationSettingsGithubSettingsPtrOutput)
}

type CxAgentGitIntegrationSettingsGithubSettings struct {
	// The access token used to authenticate the access to the GitHub repository.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	AccessToken *string `pulumi:"accessToken"`
	// A list of branches configured to be used from Dialogflow.
	Branches []string `pulumi:"branches"`
	// The unique repository display name for the GitHub repository.
	DisplayName *string `pulumi:"displayName"`
	// The GitHub repository URI related to the agent.
	RepositoryUri *string `pulumi:"repositoryUri"`
	// The branch of the GitHub repository tracked for this agent.
	TrackingBranch *string `pulumi:"trackingBranch"`
}

// CxAgentGitIntegrationSettingsGithubSettingsInput is an input type that accepts CxAgentGitIntegrationSettingsGithubSettingsArgs and CxAgentGitIntegrationSettingsGithubSettingsOutput values.
// You can construct a concrete instance of `CxAgentGitIntegrationSettingsGithubSettingsInput` via:
//
//	CxAgentGitIntegrationSettingsGithubSettingsArgs{...}
type CxAgentGitIntegrationSettingsGithubSettingsInput interface {
	pulumi.Input

	ToCxAgentGitIntegrationSettingsGithubSettingsOutput() CxAgentGitIntegrationSettingsGithubSettingsOutput
	ToCxAgentGitIntegrationSettingsGithubSettingsOutputWithContext(context.Context) CxAgentGitIntegrationSettingsGithubSettingsOutput
}

type CxAgentGitIntegrationSettingsGithubSettingsArgs struct {
	// The access token used to authenticate the access to the GitHub repository.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	AccessToken pulumi.StringPtrInput `pulumi:"accessToken"`
	// A list of branches configured to be used from Dialogflow.
	Branches pulumi.StringArrayInput `pulumi:"branches"`
	// The unique repository display name for the GitHub repository.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The GitHub repository URI related to the agent.
	RepositoryUri pulumi.StringPtrInput `pulumi:"repositoryUri"`
	// The branch of the GitHub repository tracked for this agent.
	TrackingBranch pulumi.StringPtrInput `pulumi:"trackingBranch"`
}

func (CxAgentGitIntegrationSettingsGithubSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentGitIntegrationSettingsGithubSettings)(nil)).Elem()
}

func (i CxAgentGitIntegrationSettingsGithubSettingsArgs) ToCxAgentGitIntegrationSettingsGithubSettingsOutput() CxAgentGitIntegrationSettingsGithubSettingsOutput {
	return i.ToCxAgentGitIntegrationSettingsGithubSettingsOutputWithContext(context.Background())
}

func (i CxAgentGitIntegrationSettingsGithubSettingsArgs) ToCxAgentGitIntegrationSettingsGithubSettingsOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsGithubSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentGitIntegrationSettingsGithubSettingsOutput)
}

func (i CxAgentGitIntegrationSettingsGithubSettingsArgs) ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutput() CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return i.ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(context.Background())
}

func (i CxAgentGitIntegrationSettingsGithubSettingsArgs) ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentGitIntegrationSettingsGithubSettingsOutput).ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(ctx)
}

// CxAgentGitIntegrationSettingsGithubSettingsPtrInput is an input type that accepts CxAgentGitIntegrationSettingsGithubSettingsArgs, CxAgentGitIntegrationSettingsGithubSettingsPtr and CxAgentGitIntegrationSettingsGithubSettingsPtrOutput values.
// You can construct a concrete instance of `CxAgentGitIntegrationSettingsGithubSettingsPtrInput` via:
//
//	        CxAgentGitIntegrationSettingsGithubSettingsArgs{...}
//
//	or:
//
//	        nil
type CxAgentGitIntegrationSettingsGithubSettingsPtrInput interface {
	pulumi.Input

	ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutput() CxAgentGitIntegrationSettingsGithubSettingsPtrOutput
	ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(context.Context) CxAgentGitIntegrationSettingsGithubSettingsPtrOutput
}

type cxAgentGitIntegrationSettingsGithubSettingsPtrType CxAgentGitIntegrationSettingsGithubSettingsArgs

func CxAgentGitIntegrationSettingsGithubSettingsPtr(v *CxAgentGitIntegrationSettingsGithubSettingsArgs) CxAgentGitIntegrationSettingsGithubSettingsPtrInput {
	return (*cxAgentGitIntegrationSettingsGithubSettingsPtrType)(v)
}

func (*cxAgentGitIntegrationSettingsGithubSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentGitIntegrationSettingsGithubSettings)(nil)).Elem()
}

func (i *cxAgentGitIntegrationSettingsGithubSettingsPtrType) ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutput() CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return i.ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(context.Background())
}

func (i *cxAgentGitIntegrationSettingsGithubSettingsPtrType) ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentGitIntegrationSettingsGithubSettingsPtrOutput)
}

type CxAgentGitIntegrationSettingsGithubSettingsOutput struct{ *pulumi.OutputState }

func (CxAgentGitIntegrationSettingsGithubSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentGitIntegrationSettingsGithubSettings)(nil)).Elem()
}

func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) ToCxAgentGitIntegrationSettingsGithubSettingsOutput() CxAgentGitIntegrationSettingsGithubSettingsOutput {
	return o
}

func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) ToCxAgentGitIntegrationSettingsGithubSettingsOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsGithubSettingsOutput {
	return o
}

func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutput() CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return o.ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(context.Background())
}

func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxAgentGitIntegrationSettingsGithubSettings) *CxAgentGitIntegrationSettingsGithubSettings {
		return &v
	}).(CxAgentGitIntegrationSettingsGithubSettingsPtrOutput)
}

// The access token used to authenticate the access to the GitHub repository.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxAgentGitIntegrationSettingsGithubSettings) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// A list of branches configured to be used from Dialogflow.
func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) Branches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxAgentGitIntegrationSettingsGithubSettings) []string { return v.Branches }).(pulumi.StringArrayOutput)
}

// The unique repository display name for the GitHub repository.
func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxAgentGitIntegrationSettingsGithubSettings) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The GitHub repository URI related to the agent.
func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) RepositoryUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxAgentGitIntegrationSettingsGithubSettings) *string { return v.RepositoryUri }).(pulumi.StringPtrOutput)
}

// The branch of the GitHub repository tracked for this agent.
func (o CxAgentGitIntegrationSettingsGithubSettingsOutput) TrackingBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxAgentGitIntegrationSettingsGithubSettings) *string { return v.TrackingBranch }).(pulumi.StringPtrOutput)
}

type CxAgentGitIntegrationSettingsGithubSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentGitIntegrationSettingsGithubSettings)(nil)).Elem()
}

func (o CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutput() CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return o
}

func (o CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) ToCxAgentGitIntegrationSettingsGithubSettingsPtrOutputWithContext(ctx context.Context) CxAgentGitIntegrationSettingsGithubSettingsPtrOutput {
	return o
}

func (o CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) Elem() CxAgentGitIntegrationSettingsGithubSettingsOutput {
	return o.ApplyT(func(v *CxAgentGitIntegrationSettingsGithubSettings) CxAgentGitIntegrationSettingsGithubSettings {
		if v != nil {
			return *v
		}
		var ret CxAgentGitIntegrationSettingsGithubSettings
		return ret
	}).(CxAgentGitIntegrationSettingsGithubSettingsOutput)
}

// The access token used to authenticate the access to the GitHub repository.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgentGitIntegrationSettingsGithubSettings) *string {
		if v == nil {
			return nil
		}
		return v.AccessToken
	}).(pulumi.StringPtrOutput)
}

// A list of branches configured to be used from Dialogflow.
func (o CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) Branches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxAgentGitIntegrationSettingsGithubSettings) []string {
		if v == nil {
			return nil
		}
		return v.Branches
	}).(pulumi.StringArrayOutput)
}

// The unique repository display name for the GitHub repository.
func (o CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgentGitIntegrationSettingsGithubSettings) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The GitHub repository URI related to the agent.
func (o CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) RepositoryUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgentGitIntegrationSettingsGithubSettings) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryUri
	}).(pulumi.StringPtrOutput)
}

// The branch of the GitHub repository tracked for this agent.
func (o CxAgentGitIntegrationSettingsGithubSettingsPtrOutput) TrackingBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgentGitIntegrationSettingsGithubSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrackingBranch
	}).(pulumi.StringPtrOutput)
}

type CxAgentSpeechToTextSettings struct {
	// Whether to use speech adaptation for speech recognition.
	EnableSpeechAdaptation *bool `pulumi:"enableSpeechAdaptation"`
}

// CxAgentSpeechToTextSettingsInput is an input type that accepts CxAgentSpeechToTextSettingsArgs and CxAgentSpeechToTextSettingsOutput values.
// You can construct a concrete instance of `CxAgentSpeechToTextSettingsInput` via:
//
//	CxAgentSpeechToTextSettingsArgs{...}
type CxAgentSpeechToTextSettingsInput interface {
	pulumi.Input

	ToCxAgentSpeechToTextSettingsOutput() CxAgentSpeechToTextSettingsOutput
	ToCxAgentSpeechToTextSettingsOutputWithContext(context.Context) CxAgentSpeechToTextSettingsOutput
}

type CxAgentSpeechToTextSettingsArgs struct {
	// Whether to use speech adaptation for speech recognition.
	EnableSpeechAdaptation pulumi.BoolPtrInput `pulumi:"enableSpeechAdaptation"`
}

func (CxAgentSpeechToTextSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentSpeechToTextSettings)(nil)).Elem()
}

func (i CxAgentSpeechToTextSettingsArgs) ToCxAgentSpeechToTextSettingsOutput() CxAgentSpeechToTextSettingsOutput {
	return i.ToCxAgentSpeechToTextSettingsOutputWithContext(context.Background())
}

func (i CxAgentSpeechToTextSettingsArgs) ToCxAgentSpeechToTextSettingsOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentSpeechToTextSettingsOutput)
}

func (i CxAgentSpeechToTextSettingsArgs) ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput {
	return i.ToCxAgentSpeechToTextSettingsPtrOutputWithContext(context.Background())
}

func (i CxAgentSpeechToTextSettingsArgs) ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentSpeechToTextSettingsOutput).ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx)
}

// CxAgentSpeechToTextSettingsPtrInput is an input type that accepts CxAgentSpeechToTextSettingsArgs, CxAgentSpeechToTextSettingsPtr and CxAgentSpeechToTextSettingsPtrOutput values.
// You can construct a concrete instance of `CxAgentSpeechToTextSettingsPtrInput` via:
//
//	        CxAgentSpeechToTextSettingsArgs{...}
//
//	or:
//
//	        nil
type CxAgentSpeechToTextSettingsPtrInput interface {
	pulumi.Input

	ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput
	ToCxAgentSpeechToTextSettingsPtrOutputWithContext(context.Context) CxAgentSpeechToTextSettingsPtrOutput
}

type cxAgentSpeechToTextSettingsPtrType CxAgentSpeechToTextSettingsArgs

func CxAgentSpeechToTextSettingsPtr(v *CxAgentSpeechToTextSettingsArgs) CxAgentSpeechToTextSettingsPtrInput {
	return (*cxAgentSpeechToTextSettingsPtrType)(v)
}

func (*cxAgentSpeechToTextSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentSpeechToTextSettings)(nil)).Elem()
}

func (i *cxAgentSpeechToTextSettingsPtrType) ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput {
	return i.ToCxAgentSpeechToTextSettingsPtrOutputWithContext(context.Background())
}

func (i *cxAgentSpeechToTextSettingsPtrType) ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentSpeechToTextSettingsPtrOutput)
}

type CxAgentSpeechToTextSettingsOutput struct{ *pulumi.OutputState }

func (CxAgentSpeechToTextSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentSpeechToTextSettings)(nil)).Elem()
}

func (o CxAgentSpeechToTextSettingsOutput) ToCxAgentSpeechToTextSettingsOutput() CxAgentSpeechToTextSettingsOutput {
	return o
}

func (o CxAgentSpeechToTextSettingsOutput) ToCxAgentSpeechToTextSettingsOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsOutput {
	return o
}

func (o CxAgentSpeechToTextSettingsOutput) ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput {
	return o.ToCxAgentSpeechToTextSettingsPtrOutputWithContext(context.Background())
}

func (o CxAgentSpeechToTextSettingsOutput) ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxAgentSpeechToTextSettings) *CxAgentSpeechToTextSettings {
		return &v
	}).(CxAgentSpeechToTextSettingsPtrOutput)
}

// Whether to use speech adaptation for speech recognition.
func (o CxAgentSpeechToTextSettingsOutput) EnableSpeechAdaptation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxAgentSpeechToTextSettings) *bool { return v.EnableSpeechAdaptation }).(pulumi.BoolPtrOutput)
}

type CxAgentSpeechToTextSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxAgentSpeechToTextSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentSpeechToTextSettings)(nil)).Elem()
}

func (o CxAgentSpeechToTextSettingsPtrOutput) ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput {
	return o
}

func (o CxAgentSpeechToTextSettingsPtrOutput) ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsPtrOutput {
	return o
}

func (o CxAgentSpeechToTextSettingsPtrOutput) Elem() CxAgentSpeechToTextSettingsOutput {
	return o.ApplyT(func(v *CxAgentSpeechToTextSettings) CxAgentSpeechToTextSettings {
		if v != nil {
			return *v
		}
		var ret CxAgentSpeechToTextSettings
		return ret
	}).(CxAgentSpeechToTextSettingsOutput)
}

// Whether to use speech adaptation for speech recognition.
func (o CxAgentSpeechToTextSettingsPtrOutput) EnableSpeechAdaptation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxAgentSpeechToTextSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSpeechAdaptation
	}).(pulumi.BoolPtrOutput)
}

type CxAgentTextToSpeechSettings struct {
	// Configuration of how speech should be synthesized, mapping from [language](https://cloud.google.com/dialogflow/cx/docs/reference/language) to [SynthesizeSpeechConfig](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents#synthesizespeechconfig).
	// These settings affect:
	// * The phone gateway synthesize configuration set via Agent.text_to_speech_settings.
	// * How speech is synthesized when invoking session APIs. `Agent.text_to_speech_settings` only applies if `OutputAudioConfig.synthesize_speech_config` is not specified.
	SynthesizeSpeechConfigs *string `pulumi:"synthesizeSpeechConfigs"`
}

// CxAgentTextToSpeechSettingsInput is an input type that accepts CxAgentTextToSpeechSettingsArgs and CxAgentTextToSpeechSettingsOutput values.
// You can construct a concrete instance of `CxAgentTextToSpeechSettingsInput` via:
//
//	CxAgentTextToSpeechSettingsArgs{...}
type CxAgentTextToSpeechSettingsInput interface {
	pulumi.Input

	ToCxAgentTextToSpeechSettingsOutput() CxAgentTextToSpeechSettingsOutput
	ToCxAgentTextToSpeechSettingsOutputWithContext(context.Context) CxAgentTextToSpeechSettingsOutput
}

type CxAgentTextToSpeechSettingsArgs struct {
	// Configuration of how speech should be synthesized, mapping from [language](https://cloud.google.com/dialogflow/cx/docs/reference/language) to [SynthesizeSpeechConfig](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents#synthesizespeechconfig).
	// These settings affect:
	// * The phone gateway synthesize configuration set via Agent.text_to_speech_settings.
	// * How speech is synthesized when invoking session APIs. `Agent.text_to_speech_settings` only applies if `OutputAudioConfig.synthesize_speech_config` is not specified.
	SynthesizeSpeechConfigs pulumi.StringPtrInput `pulumi:"synthesizeSpeechConfigs"`
}

func (CxAgentTextToSpeechSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentTextToSpeechSettings)(nil)).Elem()
}

func (i CxAgentTextToSpeechSettingsArgs) ToCxAgentTextToSpeechSettingsOutput() CxAgentTextToSpeechSettingsOutput {
	return i.ToCxAgentTextToSpeechSettingsOutputWithContext(context.Background())
}

func (i CxAgentTextToSpeechSettingsArgs) ToCxAgentTextToSpeechSettingsOutputWithContext(ctx context.Context) CxAgentTextToSpeechSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentTextToSpeechSettingsOutput)
}

func (i CxAgentTextToSpeechSettingsArgs) ToCxAgentTextToSpeechSettingsPtrOutput() CxAgentTextToSpeechSettingsPtrOutput {
	return i.ToCxAgentTextToSpeechSettingsPtrOutputWithContext(context.Background())
}

func (i CxAgentTextToSpeechSettingsArgs) ToCxAgentTextToSpeechSettingsPtrOutputWithContext(ctx context.Context) CxAgentTextToSpeechSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentTextToSpeechSettingsOutput).ToCxAgentTextToSpeechSettingsPtrOutputWithContext(ctx)
}

// CxAgentTextToSpeechSettingsPtrInput is an input type that accepts CxAgentTextToSpeechSettingsArgs, CxAgentTextToSpeechSettingsPtr and CxAgentTextToSpeechSettingsPtrOutput values.
// You can construct a concrete instance of `CxAgentTextToSpeechSettingsPtrInput` via:
//
//	        CxAgentTextToSpeechSettingsArgs{...}
//
//	or:
//
//	        nil
type CxAgentTextToSpeechSettingsPtrInput interface {
	pulumi.Input

	ToCxAgentTextToSpeechSettingsPtrOutput() CxAgentTextToSpeechSettingsPtrOutput
	ToCxAgentTextToSpeechSettingsPtrOutputWithContext(context.Context) CxAgentTextToSpeechSettingsPtrOutput
}

type cxAgentTextToSpeechSettingsPtrType CxAgentTextToSpeechSettingsArgs

func CxAgentTextToSpeechSettingsPtr(v *CxAgentTextToSpeechSettingsArgs) CxAgentTextToSpeechSettingsPtrInput {
	return (*cxAgentTextToSpeechSettingsPtrType)(v)
}

func (*cxAgentTextToSpeechSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentTextToSpeechSettings)(nil)).Elem()
}

func (i *cxAgentTextToSpeechSettingsPtrType) ToCxAgentTextToSpeechSettingsPtrOutput() CxAgentTextToSpeechSettingsPtrOutput {
	return i.ToCxAgentTextToSpeechSettingsPtrOutputWithContext(context.Background())
}

func (i *cxAgentTextToSpeechSettingsPtrType) ToCxAgentTextToSpeechSettingsPtrOutputWithContext(ctx context.Context) CxAgentTextToSpeechSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentTextToSpeechSettingsPtrOutput)
}

type CxAgentTextToSpeechSettingsOutput struct{ *pulumi.OutputState }

func (CxAgentTextToSpeechSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentTextToSpeechSettings)(nil)).Elem()
}

func (o CxAgentTextToSpeechSettingsOutput) ToCxAgentTextToSpeechSettingsOutput() CxAgentTextToSpeechSettingsOutput {
	return o
}

func (o CxAgentTextToSpeechSettingsOutput) ToCxAgentTextToSpeechSettingsOutputWithContext(ctx context.Context) CxAgentTextToSpeechSettingsOutput {
	return o
}

func (o CxAgentTextToSpeechSettingsOutput) ToCxAgentTextToSpeechSettingsPtrOutput() CxAgentTextToSpeechSettingsPtrOutput {
	return o.ToCxAgentTextToSpeechSettingsPtrOutputWithContext(context.Background())
}

func (o CxAgentTextToSpeechSettingsOutput) ToCxAgentTextToSpeechSettingsPtrOutputWithContext(ctx context.Context) CxAgentTextToSpeechSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxAgentTextToSpeechSettings) *CxAgentTextToSpeechSettings {
		return &v
	}).(CxAgentTextToSpeechSettingsPtrOutput)
}

// Configuration of how speech should be synthesized, mapping from [language](https://cloud.google.com/dialogflow/cx/docs/reference/language) to [SynthesizeSpeechConfig](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents#synthesizespeechconfig).
// These settings affect:
// * The phone gateway synthesize configuration set via Agent.text_to_speech_settings.
// * How speech is synthesized when invoking session APIs. `Agent.text_to_speech_settings` only applies if `OutputAudioConfig.synthesize_speech_config` is not specified.
func (o CxAgentTextToSpeechSettingsOutput) SynthesizeSpeechConfigs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxAgentTextToSpeechSettings) *string { return v.SynthesizeSpeechConfigs }).(pulumi.StringPtrOutput)
}

type CxAgentTextToSpeechSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxAgentTextToSpeechSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentTextToSpeechSettings)(nil)).Elem()
}

func (o CxAgentTextToSpeechSettingsPtrOutput) ToCxAgentTextToSpeechSettingsPtrOutput() CxAgentTextToSpeechSettingsPtrOutput {
	return o
}

func (o CxAgentTextToSpeechSettingsPtrOutput) ToCxAgentTextToSpeechSettingsPtrOutputWithContext(ctx context.Context) CxAgentTextToSpeechSettingsPtrOutput {
	return o
}

func (o CxAgentTextToSpeechSettingsPtrOutput) Elem() CxAgentTextToSpeechSettingsOutput {
	return o.ApplyT(func(v *CxAgentTextToSpeechSettings) CxAgentTextToSpeechSettings {
		if v != nil {
			return *v
		}
		var ret CxAgentTextToSpeechSettings
		return ret
	}).(CxAgentTextToSpeechSettingsOutput)
}

// Configuration of how speech should be synthesized, mapping from [language](https://cloud.google.com/dialogflow/cx/docs/reference/language) to [SynthesizeSpeechConfig](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents#synthesizespeechconfig).
// These settings affect:
// * The phone gateway synthesize configuration set via Agent.text_to_speech_settings.
// * How speech is synthesized when invoking session APIs. `Agent.text_to_speech_settings` only applies if `OutputAudioConfig.synthesize_speech_config` is not specified.
func (o CxAgentTextToSpeechSettingsPtrOutput) SynthesizeSpeechConfigs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxAgentTextToSpeechSettings) *string {
		if v == nil {
			return nil
		}
		return v.SynthesizeSpeechConfigs
	}).(pulumi.StringPtrOutput)
}

type CxEntityTypeEntity struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym could be green onions.
	// For KIND_LIST entity types: This collection must contain exactly one synonym equal to value.
	Synonyms []string `pulumi:"synonyms"`
	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value could be scallions.
	// For KIND_MAP entity types: A canonical value to be used in place of synonyms.
	// For KIND_LIST entity types: A string that can contain references to other entity types (with or without aliases).
	Value *string `pulumi:"value"`
}

// CxEntityTypeEntityInput is an input type that accepts CxEntityTypeEntityArgs and CxEntityTypeEntityOutput values.
// You can construct a concrete instance of `CxEntityTypeEntityInput` via:
//
//	CxEntityTypeEntityArgs{...}
type CxEntityTypeEntityInput interface {
	pulumi.Input

	ToCxEntityTypeEntityOutput() CxEntityTypeEntityOutput
	ToCxEntityTypeEntityOutputWithContext(context.Context) CxEntityTypeEntityOutput
}

type CxEntityTypeEntityArgs struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym could be green onions.
	// For KIND_LIST entity types: This collection must contain exactly one synonym equal to value.
	Synonyms pulumi.StringArrayInput `pulumi:"synonyms"`
	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value could be scallions.
	// For KIND_MAP entity types: A canonical value to be used in place of synonyms.
	// For KIND_LIST entity types: A string that can contain references to other entity types (with or without aliases).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxEntityTypeEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEntityTypeEntity)(nil)).Elem()
}

func (i CxEntityTypeEntityArgs) ToCxEntityTypeEntityOutput() CxEntityTypeEntityOutput {
	return i.ToCxEntityTypeEntityOutputWithContext(context.Background())
}

func (i CxEntityTypeEntityArgs) ToCxEntityTypeEntityOutputWithContext(ctx context.Context) CxEntityTypeEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEntityTypeEntityOutput)
}

// CxEntityTypeEntityArrayInput is an input type that accepts CxEntityTypeEntityArray and CxEntityTypeEntityArrayOutput values.
// You can construct a concrete instance of `CxEntityTypeEntityArrayInput` via:
//
//	CxEntityTypeEntityArray{ CxEntityTypeEntityArgs{...} }
type CxEntityTypeEntityArrayInput interface {
	pulumi.Input

	ToCxEntityTypeEntityArrayOutput() CxEntityTypeEntityArrayOutput
	ToCxEntityTypeEntityArrayOutputWithContext(context.Context) CxEntityTypeEntityArrayOutput
}

type CxEntityTypeEntityArray []CxEntityTypeEntityInput

func (CxEntityTypeEntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEntityTypeEntity)(nil)).Elem()
}

func (i CxEntityTypeEntityArray) ToCxEntityTypeEntityArrayOutput() CxEntityTypeEntityArrayOutput {
	return i.ToCxEntityTypeEntityArrayOutputWithContext(context.Background())
}

func (i CxEntityTypeEntityArray) ToCxEntityTypeEntityArrayOutputWithContext(ctx context.Context) CxEntityTypeEntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEntityTypeEntityArrayOutput)
}

type CxEntityTypeEntityOutput struct{ *pulumi.OutputState }

func (CxEntityTypeEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEntityTypeEntity)(nil)).Elem()
}

func (o CxEntityTypeEntityOutput) ToCxEntityTypeEntityOutput() CxEntityTypeEntityOutput {
	return o
}

func (o CxEntityTypeEntityOutput) ToCxEntityTypeEntityOutputWithContext(ctx context.Context) CxEntityTypeEntityOutput {
	return o
}

// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym could be green onions.
// For KIND_LIST entity types: This collection must contain exactly one synonym equal to value.
func (o CxEntityTypeEntityOutput) Synonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxEntityTypeEntity) []string { return v.Synonyms }).(pulumi.StringArrayOutput)
}

// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value could be scallions.
// For KIND_MAP entity types: A canonical value to be used in place of synonyms.
// For KIND_LIST entity types: A string that can contain references to other entity types (with or without aliases).
func (o CxEntityTypeEntityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxEntityTypeEntity) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxEntityTypeEntityArrayOutput struct{ *pulumi.OutputState }

func (CxEntityTypeEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEntityTypeEntity)(nil)).Elem()
}

func (o CxEntityTypeEntityArrayOutput) ToCxEntityTypeEntityArrayOutput() CxEntityTypeEntityArrayOutput {
	return o
}

func (o CxEntityTypeEntityArrayOutput) ToCxEntityTypeEntityArrayOutputWithContext(ctx context.Context) CxEntityTypeEntityArrayOutput {
	return o
}

func (o CxEntityTypeEntityArrayOutput) Index(i pulumi.IntInput) CxEntityTypeEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxEntityTypeEntity {
		return vs[0].([]CxEntityTypeEntity)[vs[1].(int)]
	}).(CxEntityTypeEntityOutput)
}

type CxEntityTypeExcludedPhrase struct {
	// The word or phrase to be excluded.
	Value *string `pulumi:"value"`
}

// CxEntityTypeExcludedPhraseInput is an input type that accepts CxEntityTypeExcludedPhraseArgs and CxEntityTypeExcludedPhraseOutput values.
// You can construct a concrete instance of `CxEntityTypeExcludedPhraseInput` via:
//
//	CxEntityTypeExcludedPhraseArgs{...}
type CxEntityTypeExcludedPhraseInput interface {
	pulumi.Input

	ToCxEntityTypeExcludedPhraseOutput() CxEntityTypeExcludedPhraseOutput
	ToCxEntityTypeExcludedPhraseOutputWithContext(context.Context) CxEntityTypeExcludedPhraseOutput
}

type CxEntityTypeExcludedPhraseArgs struct {
	// The word or phrase to be excluded.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxEntityTypeExcludedPhraseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEntityTypeExcludedPhrase)(nil)).Elem()
}

func (i CxEntityTypeExcludedPhraseArgs) ToCxEntityTypeExcludedPhraseOutput() CxEntityTypeExcludedPhraseOutput {
	return i.ToCxEntityTypeExcludedPhraseOutputWithContext(context.Background())
}

func (i CxEntityTypeExcludedPhraseArgs) ToCxEntityTypeExcludedPhraseOutputWithContext(ctx context.Context) CxEntityTypeExcludedPhraseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEntityTypeExcludedPhraseOutput)
}

// CxEntityTypeExcludedPhraseArrayInput is an input type that accepts CxEntityTypeExcludedPhraseArray and CxEntityTypeExcludedPhraseArrayOutput values.
// You can construct a concrete instance of `CxEntityTypeExcludedPhraseArrayInput` via:
//
//	CxEntityTypeExcludedPhraseArray{ CxEntityTypeExcludedPhraseArgs{...} }
type CxEntityTypeExcludedPhraseArrayInput interface {
	pulumi.Input

	ToCxEntityTypeExcludedPhraseArrayOutput() CxEntityTypeExcludedPhraseArrayOutput
	ToCxEntityTypeExcludedPhraseArrayOutputWithContext(context.Context) CxEntityTypeExcludedPhraseArrayOutput
}

type CxEntityTypeExcludedPhraseArray []CxEntityTypeExcludedPhraseInput

func (CxEntityTypeExcludedPhraseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEntityTypeExcludedPhrase)(nil)).Elem()
}

func (i CxEntityTypeExcludedPhraseArray) ToCxEntityTypeExcludedPhraseArrayOutput() CxEntityTypeExcludedPhraseArrayOutput {
	return i.ToCxEntityTypeExcludedPhraseArrayOutputWithContext(context.Background())
}

func (i CxEntityTypeExcludedPhraseArray) ToCxEntityTypeExcludedPhraseArrayOutputWithContext(ctx context.Context) CxEntityTypeExcludedPhraseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEntityTypeExcludedPhraseArrayOutput)
}

type CxEntityTypeExcludedPhraseOutput struct{ *pulumi.OutputState }

func (CxEntityTypeExcludedPhraseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEntityTypeExcludedPhrase)(nil)).Elem()
}

func (o CxEntityTypeExcludedPhraseOutput) ToCxEntityTypeExcludedPhraseOutput() CxEntityTypeExcludedPhraseOutput {
	return o
}

func (o CxEntityTypeExcludedPhraseOutput) ToCxEntityTypeExcludedPhraseOutputWithContext(ctx context.Context) CxEntityTypeExcludedPhraseOutput {
	return o
}

// The word or phrase to be excluded.
func (o CxEntityTypeExcludedPhraseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxEntityTypeExcludedPhrase) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxEntityTypeExcludedPhraseArrayOutput struct{ *pulumi.OutputState }

func (CxEntityTypeExcludedPhraseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEntityTypeExcludedPhrase)(nil)).Elem()
}

func (o CxEntityTypeExcludedPhraseArrayOutput) ToCxEntityTypeExcludedPhraseArrayOutput() CxEntityTypeExcludedPhraseArrayOutput {
	return o
}

func (o CxEntityTypeExcludedPhraseArrayOutput) ToCxEntityTypeExcludedPhraseArrayOutputWithContext(ctx context.Context) CxEntityTypeExcludedPhraseArrayOutput {
	return o
}

func (o CxEntityTypeExcludedPhraseArrayOutput) Index(i pulumi.IntInput) CxEntityTypeExcludedPhraseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxEntityTypeExcludedPhrase {
		return vs[0].([]CxEntityTypeExcludedPhrase)[vs[1].(int)]
	}).(CxEntityTypeExcludedPhraseOutput)
}

type CxEnvironmentVersionConfig struct {
	// Format: projects/{{project}}/locations/{{location}}/agents/{{agent}}/flows/{{flow}}/versions/{{version}}.
	Version string `pulumi:"version"`
}

// CxEnvironmentVersionConfigInput is an input type that accepts CxEnvironmentVersionConfigArgs and CxEnvironmentVersionConfigOutput values.
// You can construct a concrete instance of `CxEnvironmentVersionConfigInput` via:
//
//	CxEnvironmentVersionConfigArgs{...}
type CxEnvironmentVersionConfigInput interface {
	pulumi.Input

	ToCxEnvironmentVersionConfigOutput() CxEnvironmentVersionConfigOutput
	ToCxEnvironmentVersionConfigOutputWithContext(context.Context) CxEnvironmentVersionConfigOutput
}

type CxEnvironmentVersionConfigArgs struct {
	// Format: projects/{{project}}/locations/{{location}}/agents/{{agent}}/flows/{{flow}}/versions/{{version}}.
	Version pulumi.StringInput `pulumi:"version"`
}

func (CxEnvironmentVersionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEnvironmentVersionConfig)(nil)).Elem()
}

func (i CxEnvironmentVersionConfigArgs) ToCxEnvironmentVersionConfigOutput() CxEnvironmentVersionConfigOutput {
	return i.ToCxEnvironmentVersionConfigOutputWithContext(context.Background())
}

func (i CxEnvironmentVersionConfigArgs) ToCxEnvironmentVersionConfigOutputWithContext(ctx context.Context) CxEnvironmentVersionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEnvironmentVersionConfigOutput)
}

// CxEnvironmentVersionConfigArrayInput is an input type that accepts CxEnvironmentVersionConfigArray and CxEnvironmentVersionConfigArrayOutput values.
// You can construct a concrete instance of `CxEnvironmentVersionConfigArrayInput` via:
//
//	CxEnvironmentVersionConfigArray{ CxEnvironmentVersionConfigArgs{...} }
type CxEnvironmentVersionConfigArrayInput interface {
	pulumi.Input

	ToCxEnvironmentVersionConfigArrayOutput() CxEnvironmentVersionConfigArrayOutput
	ToCxEnvironmentVersionConfigArrayOutputWithContext(context.Context) CxEnvironmentVersionConfigArrayOutput
}

type CxEnvironmentVersionConfigArray []CxEnvironmentVersionConfigInput

func (CxEnvironmentVersionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEnvironmentVersionConfig)(nil)).Elem()
}

func (i CxEnvironmentVersionConfigArray) ToCxEnvironmentVersionConfigArrayOutput() CxEnvironmentVersionConfigArrayOutput {
	return i.ToCxEnvironmentVersionConfigArrayOutputWithContext(context.Background())
}

func (i CxEnvironmentVersionConfigArray) ToCxEnvironmentVersionConfigArrayOutputWithContext(ctx context.Context) CxEnvironmentVersionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEnvironmentVersionConfigArrayOutput)
}

type CxEnvironmentVersionConfigOutput struct{ *pulumi.OutputState }

func (CxEnvironmentVersionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEnvironmentVersionConfig)(nil)).Elem()
}

func (o CxEnvironmentVersionConfigOutput) ToCxEnvironmentVersionConfigOutput() CxEnvironmentVersionConfigOutput {
	return o
}

func (o CxEnvironmentVersionConfigOutput) ToCxEnvironmentVersionConfigOutputWithContext(ctx context.Context) CxEnvironmentVersionConfigOutput {
	return o
}

// Format: projects/{{project}}/locations/{{location}}/agents/{{agent}}/flows/{{flow}}/versions/{{version}}.
func (o CxEnvironmentVersionConfigOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v CxEnvironmentVersionConfig) string { return v.Version }).(pulumi.StringOutput)
}

type CxEnvironmentVersionConfigArrayOutput struct{ *pulumi.OutputState }

func (CxEnvironmentVersionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEnvironmentVersionConfig)(nil)).Elem()
}

func (o CxEnvironmentVersionConfigArrayOutput) ToCxEnvironmentVersionConfigArrayOutput() CxEnvironmentVersionConfigArrayOutput {
	return o
}

func (o CxEnvironmentVersionConfigArrayOutput) ToCxEnvironmentVersionConfigArrayOutputWithContext(ctx context.Context) CxEnvironmentVersionConfigArrayOutput {
	return o
}

func (o CxEnvironmentVersionConfigArrayOutput) Index(i pulumi.IntInput) CxEnvironmentVersionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxEnvironmentVersionConfig {
		return vs[0].([]CxEnvironmentVersionConfig)[vs[1].(int)]
	}).(CxEnvironmentVersionConfigOutput)
}

type CxFlowAdvancedSettings struct {
	// If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
	// * Agent level
	// * Flow level
	//   Structure is documented below.
	AudioExportGcsDestination *CxFlowAdvancedSettingsAudioExportGcsDestination `pulumi:"audioExportGcsDestination"`
	// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
	// * Agent level
	// * Flow level
	// * Page level
	// * Parameter level
	//   Structure is documented below.
	DtmfSettings *CxFlowAdvancedSettingsDtmfSettings `pulumi:"dtmfSettings"`
}

// CxFlowAdvancedSettingsInput is an input type that accepts CxFlowAdvancedSettingsArgs and CxFlowAdvancedSettingsOutput values.
// You can construct a concrete instance of `CxFlowAdvancedSettingsInput` via:
//
//	CxFlowAdvancedSettingsArgs{...}
type CxFlowAdvancedSettingsInput interface {
	pulumi.Input

	ToCxFlowAdvancedSettingsOutput() CxFlowAdvancedSettingsOutput
	ToCxFlowAdvancedSettingsOutputWithContext(context.Context) CxFlowAdvancedSettingsOutput
}

type CxFlowAdvancedSettingsArgs struct {
	// If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
	// * Agent level
	// * Flow level
	//   Structure is documented below.
	AudioExportGcsDestination CxFlowAdvancedSettingsAudioExportGcsDestinationPtrInput `pulumi:"audioExportGcsDestination"`
	// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
	// * Agent level
	// * Flow level
	// * Page level
	// * Parameter level
	//   Structure is documented below.
	DtmfSettings CxFlowAdvancedSettingsDtmfSettingsPtrInput `pulumi:"dtmfSettings"`
}

func (CxFlowAdvancedSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowAdvancedSettings)(nil)).Elem()
}

func (i CxFlowAdvancedSettingsArgs) ToCxFlowAdvancedSettingsOutput() CxFlowAdvancedSettingsOutput {
	return i.ToCxFlowAdvancedSettingsOutputWithContext(context.Background())
}

func (i CxFlowAdvancedSettingsArgs) ToCxFlowAdvancedSettingsOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsOutput)
}

func (i CxFlowAdvancedSettingsArgs) ToCxFlowAdvancedSettingsPtrOutput() CxFlowAdvancedSettingsPtrOutput {
	return i.ToCxFlowAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (i CxFlowAdvancedSettingsArgs) ToCxFlowAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsOutput).ToCxFlowAdvancedSettingsPtrOutputWithContext(ctx)
}

// CxFlowAdvancedSettingsPtrInput is an input type that accepts CxFlowAdvancedSettingsArgs, CxFlowAdvancedSettingsPtr and CxFlowAdvancedSettingsPtrOutput values.
// You can construct a concrete instance of `CxFlowAdvancedSettingsPtrInput` via:
//
//	        CxFlowAdvancedSettingsArgs{...}
//
//	or:
//
//	        nil
type CxFlowAdvancedSettingsPtrInput interface {
	pulumi.Input

	ToCxFlowAdvancedSettingsPtrOutput() CxFlowAdvancedSettingsPtrOutput
	ToCxFlowAdvancedSettingsPtrOutputWithContext(context.Context) CxFlowAdvancedSettingsPtrOutput
}

type cxFlowAdvancedSettingsPtrType CxFlowAdvancedSettingsArgs

func CxFlowAdvancedSettingsPtr(v *CxFlowAdvancedSettingsArgs) CxFlowAdvancedSettingsPtrInput {
	return (*cxFlowAdvancedSettingsPtrType)(v)
}

func (*cxFlowAdvancedSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowAdvancedSettings)(nil)).Elem()
}

func (i *cxFlowAdvancedSettingsPtrType) ToCxFlowAdvancedSettingsPtrOutput() CxFlowAdvancedSettingsPtrOutput {
	return i.ToCxFlowAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (i *cxFlowAdvancedSettingsPtrType) ToCxFlowAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsPtrOutput)
}

type CxFlowAdvancedSettingsOutput struct{ *pulumi.OutputState }

func (CxFlowAdvancedSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowAdvancedSettings)(nil)).Elem()
}

func (o CxFlowAdvancedSettingsOutput) ToCxFlowAdvancedSettingsOutput() CxFlowAdvancedSettingsOutput {
	return o
}

func (o CxFlowAdvancedSettingsOutput) ToCxFlowAdvancedSettingsOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsOutput {
	return o
}

func (o CxFlowAdvancedSettingsOutput) ToCxFlowAdvancedSettingsPtrOutput() CxFlowAdvancedSettingsPtrOutput {
	return o.ToCxFlowAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (o CxFlowAdvancedSettingsOutput) ToCxFlowAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowAdvancedSettings) *CxFlowAdvancedSettings {
		return &v
	}).(CxFlowAdvancedSettingsPtrOutput)
}

// If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
//   - Agent level
//   - Flow level
//     Structure is documented below.
func (o CxFlowAdvancedSettingsOutput) AudioExportGcsDestination() CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o.ApplyT(func(v CxFlowAdvancedSettings) *CxFlowAdvancedSettingsAudioExportGcsDestination {
		return v.AudioExportGcsDestination
	}).(CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput)
}

// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
//   - Agent level
//   - Flow level
//   - Page level
//   - Parameter level
//     Structure is documented below.
func (o CxFlowAdvancedSettingsOutput) DtmfSettings() CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyT(func(v CxFlowAdvancedSettings) *CxFlowAdvancedSettingsDtmfSettings { return v.DtmfSettings }).(CxFlowAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxFlowAdvancedSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxFlowAdvancedSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowAdvancedSettings)(nil)).Elem()
}

func (o CxFlowAdvancedSettingsPtrOutput) ToCxFlowAdvancedSettingsPtrOutput() CxFlowAdvancedSettingsPtrOutput {
	return o
}

func (o CxFlowAdvancedSettingsPtrOutput) ToCxFlowAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsPtrOutput {
	return o
}

func (o CxFlowAdvancedSettingsPtrOutput) Elem() CxFlowAdvancedSettingsOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettings) CxFlowAdvancedSettings {
		if v != nil {
			return *v
		}
		var ret CxFlowAdvancedSettings
		return ret
	}).(CxFlowAdvancedSettingsOutput)
}

// If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
//   - Agent level
//   - Flow level
//     Structure is documented below.
func (o CxFlowAdvancedSettingsPtrOutput) AudioExportGcsDestination() CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettings) *CxFlowAdvancedSettingsAudioExportGcsDestination {
		if v == nil {
			return nil
		}
		return v.AudioExportGcsDestination
	}).(CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput)
}

// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
//   - Agent level
//   - Flow level
//   - Page level
//   - Parameter level
//     Structure is documented below.
func (o CxFlowAdvancedSettingsPtrOutput) DtmfSettings() CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettings) *CxFlowAdvancedSettingsDtmfSettings {
		if v == nil {
			return nil
		}
		return v.DtmfSettings
	}).(CxFlowAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxFlowAdvancedSettingsAudioExportGcsDestination struct {
	// The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
	// Format: gs://bucket/object-name-or-prefix
	Uri *string `pulumi:"uri"`
}

// CxFlowAdvancedSettingsAudioExportGcsDestinationInput is an input type that accepts CxFlowAdvancedSettingsAudioExportGcsDestinationArgs and CxFlowAdvancedSettingsAudioExportGcsDestinationOutput values.
// You can construct a concrete instance of `CxFlowAdvancedSettingsAudioExportGcsDestinationInput` via:
//
//	CxFlowAdvancedSettingsAudioExportGcsDestinationArgs{...}
type CxFlowAdvancedSettingsAudioExportGcsDestinationInput interface {
	pulumi.Input

	ToCxFlowAdvancedSettingsAudioExportGcsDestinationOutput() CxFlowAdvancedSettingsAudioExportGcsDestinationOutput
	ToCxFlowAdvancedSettingsAudioExportGcsDestinationOutputWithContext(context.Context) CxFlowAdvancedSettingsAudioExportGcsDestinationOutput
}

type CxFlowAdvancedSettingsAudioExportGcsDestinationArgs struct {
	// The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
	// Format: gs://bucket/object-name-or-prefix
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (CxFlowAdvancedSettingsAudioExportGcsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowAdvancedSettingsAudioExportGcsDestination)(nil)).Elem()
}

func (i CxFlowAdvancedSettingsAudioExportGcsDestinationArgs) ToCxFlowAdvancedSettingsAudioExportGcsDestinationOutput() CxFlowAdvancedSettingsAudioExportGcsDestinationOutput {
	return i.ToCxFlowAdvancedSettingsAudioExportGcsDestinationOutputWithContext(context.Background())
}

func (i CxFlowAdvancedSettingsAudioExportGcsDestinationArgs) ToCxFlowAdvancedSettingsAudioExportGcsDestinationOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsAudioExportGcsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsAudioExportGcsDestinationOutput)
}

func (i CxFlowAdvancedSettingsAudioExportGcsDestinationArgs) ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return i.ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(context.Background())
}

func (i CxFlowAdvancedSettingsAudioExportGcsDestinationArgs) ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsAudioExportGcsDestinationOutput).ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx)
}

// CxFlowAdvancedSettingsAudioExportGcsDestinationPtrInput is an input type that accepts CxFlowAdvancedSettingsAudioExportGcsDestinationArgs, CxFlowAdvancedSettingsAudioExportGcsDestinationPtr and CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput values.
// You can construct a concrete instance of `CxFlowAdvancedSettingsAudioExportGcsDestinationPtrInput` via:
//
//	        CxFlowAdvancedSettingsAudioExportGcsDestinationArgs{...}
//
//	or:
//
//	        nil
type CxFlowAdvancedSettingsAudioExportGcsDestinationPtrInput interface {
	pulumi.Input

	ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput
	ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(context.Context) CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput
}

type cxFlowAdvancedSettingsAudioExportGcsDestinationPtrType CxFlowAdvancedSettingsAudioExportGcsDestinationArgs

func CxFlowAdvancedSettingsAudioExportGcsDestinationPtr(v *CxFlowAdvancedSettingsAudioExportGcsDestinationArgs) CxFlowAdvancedSettingsAudioExportGcsDestinationPtrInput {
	return (*cxFlowAdvancedSettingsAudioExportGcsDestinationPtrType)(v)
}

func (*cxFlowAdvancedSettingsAudioExportGcsDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowAdvancedSettingsAudioExportGcsDestination)(nil)).Elem()
}

func (i *cxFlowAdvancedSettingsAudioExportGcsDestinationPtrType) ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return i.ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(context.Background())
}

func (i *cxFlowAdvancedSettingsAudioExportGcsDestinationPtrType) ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput)
}

type CxFlowAdvancedSettingsAudioExportGcsDestinationOutput struct{ *pulumi.OutputState }

func (CxFlowAdvancedSettingsAudioExportGcsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowAdvancedSettingsAudioExportGcsDestination)(nil)).Elem()
}

func (o CxFlowAdvancedSettingsAudioExportGcsDestinationOutput) ToCxFlowAdvancedSettingsAudioExportGcsDestinationOutput() CxFlowAdvancedSettingsAudioExportGcsDestinationOutput {
	return o
}

func (o CxFlowAdvancedSettingsAudioExportGcsDestinationOutput) ToCxFlowAdvancedSettingsAudioExportGcsDestinationOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsAudioExportGcsDestinationOutput {
	return o
}

func (o CxFlowAdvancedSettingsAudioExportGcsDestinationOutput) ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o.ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(context.Background())
}

func (o CxFlowAdvancedSettingsAudioExportGcsDestinationOutput) ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowAdvancedSettingsAudioExportGcsDestination) *CxFlowAdvancedSettingsAudioExportGcsDestination {
		return &v
	}).(CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput)
}

// The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
// Format: gs://bucket/object-name-or-prefix
func (o CxFlowAdvancedSettingsAudioExportGcsDestinationOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowAdvancedSettingsAudioExportGcsDestination) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput struct{ *pulumi.OutputState }

func (CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowAdvancedSettingsAudioExportGcsDestination)(nil)).Elem()
}

func (o CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput) ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput() CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o
}

func (o CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput) ToCxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput {
	return o
}

func (o CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput) Elem() CxFlowAdvancedSettingsAudioExportGcsDestinationOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettingsAudioExportGcsDestination) CxFlowAdvancedSettingsAudioExportGcsDestination {
		if v != nil {
			return *v
		}
		var ret CxFlowAdvancedSettingsAudioExportGcsDestination
		return ret
	}).(CxFlowAdvancedSettingsAudioExportGcsDestinationOutput)
}

// The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
// Format: gs://bucket/object-name-or-prefix
func (o CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettingsAudioExportGcsDestination) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type CxFlowAdvancedSettingsDtmfSettings struct {
	// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
	Enabled *bool `pulumi:"enabled"`
	// The digit that terminates a DTMF digit sequence.
	FinishDigit *string `pulumi:"finishDigit"`
	// Max length of DTMF digits.
	MaxDigits *int `pulumi:"maxDigits"`
}

// CxFlowAdvancedSettingsDtmfSettingsInput is an input type that accepts CxFlowAdvancedSettingsDtmfSettingsArgs and CxFlowAdvancedSettingsDtmfSettingsOutput values.
// You can construct a concrete instance of `CxFlowAdvancedSettingsDtmfSettingsInput` via:
//
//	CxFlowAdvancedSettingsDtmfSettingsArgs{...}
type CxFlowAdvancedSettingsDtmfSettingsInput interface {
	pulumi.Input

	ToCxFlowAdvancedSettingsDtmfSettingsOutput() CxFlowAdvancedSettingsDtmfSettingsOutput
	ToCxFlowAdvancedSettingsDtmfSettingsOutputWithContext(context.Context) CxFlowAdvancedSettingsDtmfSettingsOutput
}

type CxFlowAdvancedSettingsDtmfSettingsArgs struct {
	// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The digit that terminates a DTMF digit sequence.
	FinishDigit pulumi.StringPtrInput `pulumi:"finishDigit"`
	// Max length of DTMF digits.
	MaxDigits pulumi.IntPtrInput `pulumi:"maxDigits"`
}

func (CxFlowAdvancedSettingsDtmfSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (i CxFlowAdvancedSettingsDtmfSettingsArgs) ToCxFlowAdvancedSettingsDtmfSettingsOutput() CxFlowAdvancedSettingsDtmfSettingsOutput {
	return i.ToCxFlowAdvancedSettingsDtmfSettingsOutputWithContext(context.Background())
}

func (i CxFlowAdvancedSettingsDtmfSettingsArgs) ToCxFlowAdvancedSettingsDtmfSettingsOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsDtmfSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsDtmfSettingsOutput)
}

func (i CxFlowAdvancedSettingsDtmfSettingsArgs) ToCxFlowAdvancedSettingsDtmfSettingsPtrOutput() CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return i.ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (i CxFlowAdvancedSettingsDtmfSettingsArgs) ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsDtmfSettingsOutput).ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx)
}

// CxFlowAdvancedSettingsDtmfSettingsPtrInput is an input type that accepts CxFlowAdvancedSettingsDtmfSettingsArgs, CxFlowAdvancedSettingsDtmfSettingsPtr and CxFlowAdvancedSettingsDtmfSettingsPtrOutput values.
// You can construct a concrete instance of `CxFlowAdvancedSettingsDtmfSettingsPtrInput` via:
//
//	        CxFlowAdvancedSettingsDtmfSettingsArgs{...}
//
//	or:
//
//	        nil
type CxFlowAdvancedSettingsDtmfSettingsPtrInput interface {
	pulumi.Input

	ToCxFlowAdvancedSettingsDtmfSettingsPtrOutput() CxFlowAdvancedSettingsDtmfSettingsPtrOutput
	ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Context) CxFlowAdvancedSettingsDtmfSettingsPtrOutput
}

type cxFlowAdvancedSettingsDtmfSettingsPtrType CxFlowAdvancedSettingsDtmfSettingsArgs

func CxFlowAdvancedSettingsDtmfSettingsPtr(v *CxFlowAdvancedSettingsDtmfSettingsArgs) CxFlowAdvancedSettingsDtmfSettingsPtrInput {
	return (*cxFlowAdvancedSettingsDtmfSettingsPtrType)(v)
}

func (*cxFlowAdvancedSettingsDtmfSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (i *cxFlowAdvancedSettingsDtmfSettingsPtrType) ToCxFlowAdvancedSettingsDtmfSettingsPtrOutput() CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return i.ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (i *cxFlowAdvancedSettingsDtmfSettingsPtrType) ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxFlowAdvancedSettingsDtmfSettingsOutput struct{ *pulumi.OutputState }

func (CxFlowAdvancedSettingsDtmfSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (o CxFlowAdvancedSettingsDtmfSettingsOutput) ToCxFlowAdvancedSettingsDtmfSettingsOutput() CxFlowAdvancedSettingsDtmfSettingsOutput {
	return o
}

func (o CxFlowAdvancedSettingsDtmfSettingsOutput) ToCxFlowAdvancedSettingsDtmfSettingsOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsDtmfSettingsOutput {
	return o
}

func (o CxFlowAdvancedSettingsDtmfSettingsOutput) ToCxFlowAdvancedSettingsDtmfSettingsPtrOutput() CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (o CxFlowAdvancedSettingsDtmfSettingsOutput) ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowAdvancedSettingsDtmfSettings) *CxFlowAdvancedSettingsDtmfSettings {
		return &v
	}).(CxFlowAdvancedSettingsDtmfSettingsPtrOutput)
}

// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
func (o CxFlowAdvancedSettingsDtmfSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowAdvancedSettingsDtmfSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The digit that terminates a DTMF digit sequence.
func (o CxFlowAdvancedSettingsDtmfSettingsOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowAdvancedSettingsDtmfSettings) *string { return v.FinishDigit }).(pulumi.StringPtrOutput)
}

// Max length of DTMF digits.
func (o CxFlowAdvancedSettingsDtmfSettingsOutput) MaxDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CxFlowAdvancedSettingsDtmfSettings) *int { return v.MaxDigits }).(pulumi.IntPtrOutput)
}

type CxFlowAdvancedSettingsDtmfSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxFlowAdvancedSettingsDtmfSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (o CxFlowAdvancedSettingsDtmfSettingsPtrOutput) ToCxFlowAdvancedSettingsDtmfSettingsPtrOutput() CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return o
}

func (o CxFlowAdvancedSettingsDtmfSettingsPtrOutput) ToCxFlowAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxFlowAdvancedSettingsDtmfSettingsPtrOutput {
	return o
}

func (o CxFlowAdvancedSettingsDtmfSettingsPtrOutput) Elem() CxFlowAdvancedSettingsDtmfSettingsOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettingsDtmfSettings) CxFlowAdvancedSettingsDtmfSettings {
		if v != nil {
			return *v
		}
		var ret CxFlowAdvancedSettingsDtmfSettings
		return ret
	}).(CxFlowAdvancedSettingsDtmfSettingsOutput)
}

// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
func (o CxFlowAdvancedSettingsDtmfSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettingsDtmfSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The digit that terminates a DTMF digit sequence.
func (o CxFlowAdvancedSettingsDtmfSettingsPtrOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettingsDtmfSettings) *string {
		if v == nil {
			return nil
		}
		return v.FinishDigit
	}).(pulumi.StringPtrOutput)
}

// Max length of DTMF digits.
func (o CxFlowAdvancedSettingsDtmfSettingsPtrOutput) MaxDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CxFlowAdvancedSettingsDtmfSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxDigits
	}).(pulumi.IntPtrOutput)
}

type CxFlowEventHandler struct {
	// The name of the event to handle.
	Event *string `pulumi:"event"`
	// (Output)
	// The unique identifier of this event handler.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment *CxFlowEventHandlerTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxFlowEventHandlerInput is an input type that accepts CxFlowEventHandlerArgs and CxFlowEventHandlerOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerInput` via:
//
//	CxFlowEventHandlerArgs{...}
type CxFlowEventHandlerInput interface {
	pulumi.Input

	ToCxFlowEventHandlerOutput() CxFlowEventHandlerOutput
	ToCxFlowEventHandlerOutputWithContext(context.Context) CxFlowEventHandlerOutput
}

type CxFlowEventHandlerArgs struct {
	// The name of the event to handle.
	Event pulumi.StringPtrInput `pulumi:"event"`
	// (Output)
	// The unique identifier of this event handler.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment CxFlowEventHandlerTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxFlowEventHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandler)(nil)).Elem()
}

func (i CxFlowEventHandlerArgs) ToCxFlowEventHandlerOutput() CxFlowEventHandlerOutput {
	return i.ToCxFlowEventHandlerOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerArgs) ToCxFlowEventHandlerOutputWithContext(ctx context.Context) CxFlowEventHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerOutput)
}

// CxFlowEventHandlerArrayInput is an input type that accepts CxFlowEventHandlerArray and CxFlowEventHandlerArrayOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerArrayInput` via:
//
//	CxFlowEventHandlerArray{ CxFlowEventHandlerArgs{...} }
type CxFlowEventHandlerArrayInput interface {
	pulumi.Input

	ToCxFlowEventHandlerArrayOutput() CxFlowEventHandlerArrayOutput
	ToCxFlowEventHandlerArrayOutputWithContext(context.Context) CxFlowEventHandlerArrayOutput
}

type CxFlowEventHandlerArray []CxFlowEventHandlerInput

func (CxFlowEventHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandler)(nil)).Elem()
}

func (i CxFlowEventHandlerArray) ToCxFlowEventHandlerArrayOutput() CxFlowEventHandlerArrayOutput {
	return i.ToCxFlowEventHandlerArrayOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerArray) ToCxFlowEventHandlerArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerArrayOutput)
}

type CxFlowEventHandlerOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandler)(nil)).Elem()
}

func (o CxFlowEventHandlerOutput) ToCxFlowEventHandlerOutput() CxFlowEventHandlerOutput {
	return o
}

func (o CxFlowEventHandlerOutput) ToCxFlowEventHandlerOutputWithContext(ctx context.Context) CxFlowEventHandlerOutput {
	return o
}

// The name of the event to handle.
func (o CxFlowEventHandlerOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *string { return v.Event }).(pulumi.StringPtrOutput)
}

// (Output)
// The unique identifier of this event handler.
func (o CxFlowEventHandlerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxFlowEventHandlerOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxFlowEventHandlerOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
// Structure is documented below.
func (o CxFlowEventHandlerOutput) TriggerFulfillment() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *CxFlowEventHandlerTriggerFulfillment { return v.TriggerFulfillment }).(CxFlowEventHandlerTriggerFulfillmentPtrOutput)
}

type CxFlowEventHandlerArrayOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandler)(nil)).Elem()
}

func (o CxFlowEventHandlerArrayOutput) ToCxFlowEventHandlerArrayOutput() CxFlowEventHandlerArrayOutput {
	return o
}

func (o CxFlowEventHandlerArrayOutput) ToCxFlowEventHandlerArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerArrayOutput {
	return o
}

func (o CxFlowEventHandlerArrayOutput) Index(i pulumi.IntInput) CxFlowEventHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowEventHandler {
		return vs[0].([]CxFlowEventHandler)[vs[1].(int)]
	}).(CxFlowEventHandlerOutput)
}

type CxFlowEventHandlerTriggerFulfillment struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases []CxFlowEventHandlerTriggerFulfillmentConditionalCase `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxFlowEventHandlerTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions []CxFlowEventHandlerTriggerFulfillmentSetParameterAction `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxFlowEventHandlerTriggerFulfillmentInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentArgs and CxFlowEventHandlerTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentArgs{...}
type CxFlowEventHandlerTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentOutput() CxFlowEventHandlerTriggerFulfillmentOutput
	ToCxFlowEventHandlerTriggerFulfillmentOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentOutput
}

type CxFlowEventHandlerTriggerFulfillmentArgs struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayInput `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxFlowEventHandlerTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayInput `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxFlowEventHandlerTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentArgs) ToCxFlowEventHandlerTriggerFulfillmentOutput() CxFlowEventHandlerTriggerFulfillmentOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentArgs) ToCxFlowEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentArgs) ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentArgs) ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentOutput).ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentArgs, CxFlowEventHandlerTriggerFulfillmentPtr and CxFlowEventHandlerTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentPtrType CxFlowEventHandlerTriggerFulfillmentArgs

func CxFlowEventHandlerTriggerFulfillmentPtr(v *CxFlowEventHandlerTriggerFulfillmentArgs) CxFlowEventHandlerTriggerFulfillmentPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentPtrType) ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentPtrType) ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentOutput) ToCxFlowEventHandlerTriggerFulfillmentOutput() CxFlowEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentOutput) ToCxFlowEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentOutput) ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentOutput) ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillment) *CxFlowEventHandlerTriggerFulfillment {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentPtrOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) ConditionalCases() CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) []CxFlowEventHandlerTriggerFulfillmentConditionalCase {
		return v.ConditionalCases
	}).(CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) Messages() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) []CxFlowEventHandlerTriggerFulfillmentMessage {
		return v.Messages
	}).(CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) SetParameterActions() CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) []CxFlowEventHandlerTriggerFulfillmentSetParameterAction {
		return v.SetParameterActions
	}).(CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) CxFlowEventHandlerTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillment
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) ConditionalCases() CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) []CxFlowEventHandlerTriggerFulfillmentConditionalCase {
		if v == nil {
			return nil
		}
		return v.ConditionalCases
	}).(CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) Messages() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) []CxFlowEventHandlerTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) SetParameterActions() CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) []CxFlowEventHandlerTriggerFulfillmentSetParameterAction {
		if v == nil {
			return nil
		}
		return v.SetParameterActions
	}).(CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentConditionalCase struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases *string `pulumi:"cases"`
}

// CxFlowEventHandlerTriggerFulfillmentConditionalCaseInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentConditionalCaseArgs and CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentConditionalCaseInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentConditionalCaseArgs{...}
type CxFlowEventHandlerTriggerFulfillmentConditionalCaseInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput() CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput
	ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput
}

type CxFlowEventHandlerTriggerFulfillmentConditionalCaseArgs struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases pulumi.StringPtrInput `pulumi:"cases"`
}

func (CxFlowEventHandlerTriggerFulfillmentConditionalCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentConditionalCaseArgs) ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput() CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentConditionalCaseArgs) ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput)
}

// CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentConditionalCaseArray and CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentConditionalCaseArray{ CxFlowEventHandlerTriggerFulfillmentConditionalCaseArgs{...} }
type CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput
	ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput
}

type CxFlowEventHandlerTriggerFulfillmentConditionalCaseArray []CxFlowEventHandlerTriggerFulfillmentConditionalCaseInput

func (CxFlowEventHandlerTriggerFulfillmentConditionalCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentConditionalCaseArray) ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentConditionalCaseArray) ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

type CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput) ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput() CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput) ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return o
}

// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
func (o CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput) Cases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentConditionalCase) *string { return v.Cases }).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ToCxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) Index(i pulumi.IntInput) CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowEventHandlerTriggerFulfillmentConditionalCase {
		return vs[0].([]CxFlowEventHandlerTriggerFulfillmentConditionalCase)[vs[1].(int)]
	}).(CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessage struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel *string `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess *CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff *CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText *CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload *string `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio *CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall *CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text *CxFlowEventHandlerTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxFlowEventHandlerTriggerFulfillmentMessageInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageArgs and CxFlowEventHandlerTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageArgs struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageOutput)
}

// CxFlowEventHandlerTriggerFulfillmentMessageArrayInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageArray and CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageArrayInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageArray{ CxFlowEventHandlerTriggerFulfillmentMessageArgs{...} }
type CxFlowEventHandlerTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutput() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageArray []CxFlowEventHandlerTriggerFulfillmentMessageInput

func (CxFlowEventHandlerTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageArray) ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutput() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageArray) ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
//   - In a webhook response when you determine that you handled the customer issue.
//     Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) ConversationSuccess() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess {
		return v.ConversationSuccess
	}).(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Indicates that the conversation should be handed off to a live agent.
// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
//   - In a webhook response when you determine that the customer issue can only be handled by a human.
//     Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) LiveAgentHandoff() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		return v.LiveAgentHandoff
	}).(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) OutputAudioText() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText {
		return v.OutputAudioText
	}).(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// A custom, platform-specific payload.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// Specifies an audio clip to be played by the client as part of the response.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) PlayAudio() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio {
		return v.PlayAudio
	}).(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) TelephonyTransferCall() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		return v.TelephonyTransferCall
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// The text response message.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) Text() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *CxFlowEventHandlerTriggerFulfillmentMessageText {
		return v.Text
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutput() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowEventHandlerTriggerFulfillmentMessage {
		return vs[0].([]CxFlowEventHandlerTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxFlowEventHandlerTriggerFulfillmentMessageOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs and CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput).ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs, CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtr and CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs

func CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtr(v *CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess) *CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess) CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccess) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs and CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput).ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs, CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtr and CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs

func CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtr(v *CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml *string `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text *string `pulumi:"text"`
}

// CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs and CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml pulumi.StringPtrInput `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput).ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs, CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtr and CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs

func CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtr(v *CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText) *CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText) *string { return v.Ssml }).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText) CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri string `pulumi:"audioUri"`
}

// CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs and CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri pulumi.StringInput `pulumi:"audioUri"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput).ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs, CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtr and CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrType CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs

func CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtr(v *CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio) *CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput) AudioUri() pulumi.StringOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio) string { return v.AudioUri }).(pulumi.StringOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio) CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) AudioUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessagePlayAudio) *string {
		if v == nil {
			return nil
		}
		return &v.AudioUri
	}).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs and CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput).ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs, CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtr and CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs

func CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtr(v *CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) *CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxFlowEventHandlerTriggerFulfillmentMessageTextInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageTextArgs and CxFlowEventHandlerTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageTextInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTextOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTextOutput).ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageTextArgs, CxFlowEventHandlerTriggerFulfillmentMessageTextPtr and CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType CxFlowEventHandlerTriggerFulfillmentMessageTextArgs

func CxFlowEventHandlerTriggerFulfillmentMessageTextPtr(v *CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillmentMessageText) *CxFlowEventHandlerTriggerFulfillmentMessageText {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageText) CxFlowEventHandlerTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillmentMessageText
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxFlowEventHandlerTriggerFulfillmentSetParameterAction struct {
	// Display name of the parameter.
	Parameter *string `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value *string `pulumi:"value"`
}

// CxFlowEventHandlerTriggerFulfillmentSetParameterActionInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentSetParameterActionArgs and CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentSetParameterActionInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentSetParameterActionArgs{...}
type CxFlowEventHandlerTriggerFulfillmentSetParameterActionInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput() CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput
	ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput
}

type CxFlowEventHandlerTriggerFulfillmentSetParameterActionArgs struct {
	// Display name of the parameter.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxFlowEventHandlerTriggerFulfillmentSetParameterActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentSetParameterActionArgs) ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput() CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentSetParameterActionArgs) ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput)
}

// CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentSetParameterActionArray and CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentSetParameterActionArray{ CxFlowEventHandlerTriggerFulfillmentSetParameterActionArgs{...} }
type CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput
	ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput
}

type CxFlowEventHandlerTriggerFulfillmentSetParameterActionArray []CxFlowEventHandlerTriggerFulfillmentSetParameterActionInput

func (CxFlowEventHandlerTriggerFulfillmentSetParameterActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentSetParameterActionArray) ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentSetParameterActionArray) ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

type CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput) ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput() CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput) ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return o
}

// Display name of the parameter.
func (o CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentSetParameterAction) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The new JSON-encoded value of the parameter. A null value clears the parameter.
func (o CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentSetParameterAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ToCxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) Index(i pulumi.IntInput) CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowEventHandlerTriggerFulfillmentSetParameterAction {
		return vs[0].([]CxFlowEventHandlerTriggerFulfillmentSetParameterAction)[vs[1].(int)]
	}).(CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput)
}

type CxFlowNluSettings struct {
	// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
	// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
	ClassificationThreshold *float64 `pulumi:"classificationThreshold"`
	// Indicates NLU model training mode.
	// * MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
	// * MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
	//   Possible values are: `MODEL_TRAINING_MODE_AUTOMATIC`, `MODEL_TRAINING_MODE_MANUAL`.
	ModelTrainingMode *string `pulumi:"modelTrainingMode"`
	// Indicates the type of NLU model.
	// * MODEL_TYPE_STANDARD: Use standard NLU model.
	// * MODEL_TYPE_ADVANCED: Use advanced NLU model.
	//   Possible values are: `MODEL_TYPE_STANDARD`, `MODEL_TYPE_ADVANCED`.
	ModelType *string `pulumi:"modelType"`
}

// CxFlowNluSettingsInput is an input type that accepts CxFlowNluSettingsArgs and CxFlowNluSettingsOutput values.
// You can construct a concrete instance of `CxFlowNluSettingsInput` via:
//
//	CxFlowNluSettingsArgs{...}
type CxFlowNluSettingsInput interface {
	pulumi.Input

	ToCxFlowNluSettingsOutput() CxFlowNluSettingsOutput
	ToCxFlowNluSettingsOutputWithContext(context.Context) CxFlowNluSettingsOutput
}

type CxFlowNluSettingsArgs struct {
	// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
	// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
	ClassificationThreshold pulumi.Float64PtrInput `pulumi:"classificationThreshold"`
	// Indicates NLU model training mode.
	// * MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
	// * MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
	//   Possible values are: `MODEL_TRAINING_MODE_AUTOMATIC`, `MODEL_TRAINING_MODE_MANUAL`.
	ModelTrainingMode pulumi.StringPtrInput `pulumi:"modelTrainingMode"`
	// Indicates the type of NLU model.
	// * MODEL_TYPE_STANDARD: Use standard NLU model.
	// * MODEL_TYPE_ADVANCED: Use advanced NLU model.
	//   Possible values are: `MODEL_TYPE_STANDARD`, `MODEL_TYPE_ADVANCED`.
	ModelType pulumi.StringPtrInput `pulumi:"modelType"`
}

func (CxFlowNluSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowNluSettings)(nil)).Elem()
}

func (i CxFlowNluSettingsArgs) ToCxFlowNluSettingsOutput() CxFlowNluSettingsOutput {
	return i.ToCxFlowNluSettingsOutputWithContext(context.Background())
}

func (i CxFlowNluSettingsArgs) ToCxFlowNluSettingsOutputWithContext(ctx context.Context) CxFlowNluSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowNluSettingsOutput)
}

func (i CxFlowNluSettingsArgs) ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput {
	return i.ToCxFlowNluSettingsPtrOutputWithContext(context.Background())
}

func (i CxFlowNluSettingsArgs) ToCxFlowNluSettingsPtrOutputWithContext(ctx context.Context) CxFlowNluSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowNluSettingsOutput).ToCxFlowNluSettingsPtrOutputWithContext(ctx)
}

// CxFlowNluSettingsPtrInput is an input type that accepts CxFlowNluSettingsArgs, CxFlowNluSettingsPtr and CxFlowNluSettingsPtrOutput values.
// You can construct a concrete instance of `CxFlowNluSettingsPtrInput` via:
//
//	        CxFlowNluSettingsArgs{...}
//
//	or:
//
//	        nil
type CxFlowNluSettingsPtrInput interface {
	pulumi.Input

	ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput
	ToCxFlowNluSettingsPtrOutputWithContext(context.Context) CxFlowNluSettingsPtrOutput
}

type cxFlowNluSettingsPtrType CxFlowNluSettingsArgs

func CxFlowNluSettingsPtr(v *CxFlowNluSettingsArgs) CxFlowNluSettingsPtrInput {
	return (*cxFlowNluSettingsPtrType)(v)
}

func (*cxFlowNluSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowNluSettings)(nil)).Elem()
}

func (i *cxFlowNluSettingsPtrType) ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput {
	return i.ToCxFlowNluSettingsPtrOutputWithContext(context.Background())
}

func (i *cxFlowNluSettingsPtrType) ToCxFlowNluSettingsPtrOutputWithContext(ctx context.Context) CxFlowNluSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowNluSettingsPtrOutput)
}

type CxFlowNluSettingsOutput struct{ *pulumi.OutputState }

func (CxFlowNluSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowNluSettings)(nil)).Elem()
}

func (o CxFlowNluSettingsOutput) ToCxFlowNluSettingsOutput() CxFlowNluSettingsOutput {
	return o
}

func (o CxFlowNluSettingsOutput) ToCxFlowNluSettingsOutputWithContext(ctx context.Context) CxFlowNluSettingsOutput {
	return o
}

func (o CxFlowNluSettingsOutput) ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput {
	return o.ToCxFlowNluSettingsPtrOutputWithContext(context.Background())
}

func (o CxFlowNluSettingsOutput) ToCxFlowNluSettingsPtrOutputWithContext(ctx context.Context) CxFlowNluSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowNluSettings) *CxFlowNluSettings {
		return &v
	}).(CxFlowNluSettingsPtrOutput)
}

// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
func (o CxFlowNluSettingsOutput) ClassificationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CxFlowNluSettings) *float64 { return v.ClassificationThreshold }).(pulumi.Float64PtrOutput)
}

// Indicates NLU model training mode.
//   - MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
//   - MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
//     Possible values are: `MODEL_TRAINING_MODE_AUTOMATIC`, `MODEL_TRAINING_MODE_MANUAL`.
func (o CxFlowNluSettingsOutput) ModelTrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowNluSettings) *string { return v.ModelTrainingMode }).(pulumi.StringPtrOutput)
}

// Indicates the type of NLU model.
//   - MODEL_TYPE_STANDARD: Use standard NLU model.
//   - MODEL_TYPE_ADVANCED: Use advanced NLU model.
//     Possible values are: `MODEL_TYPE_STANDARD`, `MODEL_TYPE_ADVANCED`.
func (o CxFlowNluSettingsOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowNluSettings) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

type CxFlowNluSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxFlowNluSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowNluSettings)(nil)).Elem()
}

func (o CxFlowNluSettingsPtrOutput) ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput {
	return o
}

func (o CxFlowNluSettingsPtrOutput) ToCxFlowNluSettingsPtrOutputWithContext(ctx context.Context) CxFlowNluSettingsPtrOutput {
	return o
}

func (o CxFlowNluSettingsPtrOutput) Elem() CxFlowNluSettingsOutput {
	return o.ApplyT(func(v *CxFlowNluSettings) CxFlowNluSettings {
		if v != nil {
			return *v
		}
		var ret CxFlowNluSettings
		return ret
	}).(CxFlowNluSettingsOutput)
}

// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
func (o CxFlowNluSettingsPtrOutput) ClassificationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CxFlowNluSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ClassificationThreshold
	}).(pulumi.Float64PtrOutput)
}

// Indicates NLU model training mode.
//   - MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
//   - MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
//     Possible values are: `MODEL_TRAINING_MODE_AUTOMATIC`, `MODEL_TRAINING_MODE_MANUAL`.
func (o CxFlowNluSettingsPtrOutput) ModelTrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowNluSettings) *string {
		if v == nil {
			return nil
		}
		return v.ModelTrainingMode
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of NLU model.
//   - MODEL_TYPE_STANDARD: Use standard NLU model.
//   - MODEL_TYPE_ADVANCED: Use advanced NLU model.
//     Possible values are: `MODEL_TYPE_STANDARD`, `MODEL_TYPE_ADVANCED`.
func (o CxFlowNluSettingsPtrOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowNluSettings) *string {
		if v == nil {
			return nil
		}
		return v.ModelType
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRoute struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Condition *string `pulumi:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Intent *string `pulumi:"intent"`
	// (Output)
	// The unique identifier of this transition route.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
	// Structure is documented below.
	TriggerFulfillment *CxFlowTransitionRouteTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxFlowTransitionRouteInput is an input type that accepts CxFlowTransitionRouteArgs and CxFlowTransitionRouteOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteInput` via:
//
//	CxFlowTransitionRouteArgs{...}
type CxFlowTransitionRouteInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteOutput() CxFlowTransitionRouteOutput
	ToCxFlowTransitionRouteOutputWithContext(context.Context) CxFlowTransitionRouteOutput
}

type CxFlowTransitionRouteArgs struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Intent pulumi.StringPtrInput `pulumi:"intent"`
	// (Output)
	// The unique identifier of this transition route.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
	// Structure is documented below.
	TriggerFulfillment CxFlowTransitionRouteTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxFlowTransitionRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRoute)(nil)).Elem()
}

func (i CxFlowTransitionRouteArgs) ToCxFlowTransitionRouteOutput() CxFlowTransitionRouteOutput {
	return i.ToCxFlowTransitionRouteOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteArgs) ToCxFlowTransitionRouteOutputWithContext(ctx context.Context) CxFlowTransitionRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteOutput)
}

// CxFlowTransitionRouteArrayInput is an input type that accepts CxFlowTransitionRouteArray and CxFlowTransitionRouteArrayOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteArrayInput` via:
//
//	CxFlowTransitionRouteArray{ CxFlowTransitionRouteArgs{...} }
type CxFlowTransitionRouteArrayInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteArrayOutput() CxFlowTransitionRouteArrayOutput
	ToCxFlowTransitionRouteArrayOutputWithContext(context.Context) CxFlowTransitionRouteArrayOutput
}

type CxFlowTransitionRouteArray []CxFlowTransitionRouteInput

func (CxFlowTransitionRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRoute)(nil)).Elem()
}

func (i CxFlowTransitionRouteArray) ToCxFlowTransitionRouteArrayOutput() CxFlowTransitionRouteArrayOutput {
	return i.ToCxFlowTransitionRouteArrayOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteArray) ToCxFlowTransitionRouteArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteArrayOutput)
}

type CxFlowTransitionRouteOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRoute)(nil)).Elem()
}

func (o CxFlowTransitionRouteOutput) ToCxFlowTransitionRouteOutput() CxFlowTransitionRouteOutput {
	return o
}

func (o CxFlowTransitionRouteOutput) ToCxFlowTransitionRouteOutputWithContext(ctx context.Context) CxFlowTransitionRouteOutput {
	return o
}

// The condition to evaluate against form parameters or session parameters.
// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
func (o CxFlowTransitionRouteOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The unique identifier of an Intent.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
func (o CxFlowTransitionRouteOutput) Intent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.Intent }).(pulumi.StringPtrOutput)
}

// (Output)
// The unique identifier of this transition route.
func (o CxFlowTransitionRouteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxFlowTransitionRouteOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxFlowTransitionRouteOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
// Structure is documented below.
func (o CxFlowTransitionRouteOutput) TriggerFulfillment() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *CxFlowTransitionRouteTriggerFulfillment { return v.TriggerFulfillment }).(CxFlowTransitionRouteTriggerFulfillmentPtrOutput)
}

type CxFlowTransitionRouteArrayOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRoute)(nil)).Elem()
}

func (o CxFlowTransitionRouteArrayOutput) ToCxFlowTransitionRouteArrayOutput() CxFlowTransitionRouteArrayOutput {
	return o
}

func (o CxFlowTransitionRouteArrayOutput) ToCxFlowTransitionRouteArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteArrayOutput {
	return o
}

func (o CxFlowTransitionRouteArrayOutput) Index(i pulumi.IntInput) CxFlowTransitionRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowTransitionRoute {
		return vs[0].([]CxFlowTransitionRoute)[vs[1].(int)]
	}).(CxFlowTransitionRouteOutput)
}

type CxFlowTransitionRouteTriggerFulfillment struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases []CxFlowTransitionRouteTriggerFulfillmentConditionalCase `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxFlowTransitionRouteTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions []CxFlowTransitionRouteTriggerFulfillmentSetParameterAction `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxFlowTransitionRouteTriggerFulfillmentInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentArgs and CxFlowTransitionRouteTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentOutput() CxFlowTransitionRouteTriggerFulfillmentOutput
	ToCxFlowTransitionRouteTriggerFulfillmentOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentOutput
}

type CxFlowTransitionRouteTriggerFulfillmentArgs struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayInput `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayInput `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxFlowTransitionRouteTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentArgs) ToCxFlowTransitionRouteTriggerFulfillmentOutput() CxFlowTransitionRouteTriggerFulfillmentOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentArgs) ToCxFlowTransitionRouteTriggerFulfillmentOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentArgs) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentArgs) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentOutput).ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentArgs, CxFlowTransitionRouteTriggerFulfillmentPtr and CxFlowTransitionRouteTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentPtrType CxFlowTransitionRouteTriggerFulfillmentArgs

func CxFlowTransitionRouteTriggerFulfillmentPtr(v *CxFlowTransitionRouteTriggerFulfillmentArgs) CxFlowTransitionRouteTriggerFulfillmentPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentPtrType) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentPtrType) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ToCxFlowTransitionRouteTriggerFulfillmentOutput() CxFlowTransitionRouteTriggerFulfillmentOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ToCxFlowTransitionRouteTriggerFulfillmentOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillment) *CxFlowTransitionRouteTriggerFulfillment {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentPtrOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ConditionalCases() CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) []CxFlowTransitionRouteTriggerFulfillmentConditionalCase {
		return v.ConditionalCases
	}).(CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) Messages() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) []CxFlowTransitionRouteTriggerFulfillmentMessage {
		return v.Messages
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) SetParameterActions() CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) []CxFlowTransitionRouteTriggerFulfillmentSetParameterAction {
		return v.SetParameterActions
	}).(CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) CxFlowTransitionRouteTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillment
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ConditionalCases() CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) []CxFlowTransitionRouteTriggerFulfillmentConditionalCase {
		if v == nil {
			return nil
		}
		return v.ConditionalCases
	}).(CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) Messages() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) []CxFlowTransitionRouteTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) SetParameterActions() CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) []CxFlowTransitionRouteTriggerFulfillmentSetParameterAction {
		if v == nil {
			return nil
		}
		return v.SetParameterActions
	}).(CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentConditionalCase struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases *string `pulumi:"cases"`
}

// CxFlowTransitionRouteTriggerFulfillmentConditionalCaseInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArgs and CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentConditionalCaseInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentConditionalCaseInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput() CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput
	ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput
}

type CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArgs struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases pulumi.StringPtrInput `pulumi:"cases"`
}

func (CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArgs) ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput() CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArgs) ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput)
}

// CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArray and CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArray{ CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArgs{...} }
type CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput() CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput
	ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput
}

type CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArray []CxFlowTransitionRouteTriggerFulfillmentConditionalCaseInput

func (CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRouteTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArray) ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput() CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArray) ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput) ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput() CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput) ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return o
}

// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
func (o CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput) Cases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentConditionalCase) *string { return v.Cases }).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRouteTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput) ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput() CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput) ToCxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput) Index(i pulumi.IntInput) CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowTransitionRouteTriggerFulfillmentConditionalCase {
		return vs[0].([]CxFlowTransitionRouteTriggerFulfillmentConditionalCase)[vs[1].(int)]
	}).(CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessage struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel *string `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess *CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff *CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText *CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload *string `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio *CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall *CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text *CxFlowTransitionRouteTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessageInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageArgs and CxFlowTransitionRouteTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageArgs struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageOutput)
}

// CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageArray and CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageArray{ CxFlowTransitionRouteTriggerFulfillmentMessageArgs{...} }
type CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageArray []CxFlowTransitionRouteTriggerFulfillmentMessageInput

func (CxFlowTransitionRouteTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageArray) ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageArray) ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return o
}

// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
//   - In a webhook response when you determine that you handled the customer issue.
//     Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) ConversationSuccess() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess {
		return v.ConversationSuccess
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Indicates that the conversation should be handed off to a live agent.
// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
//   - In a webhook response when you determine that the customer issue can only be handled by a human.
//     Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) LiveAgentHandoff() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff {
		return v.LiveAgentHandoff
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) OutputAudioText() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText {
		return v.OutputAudioText
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// A custom, platform-specific payload.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// Specifies an audio clip to be played by the client as part of the response.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) PlayAudio() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio {
		return v.PlayAudio
	}).(CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) TelephonyTransferCall() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall {
		return v.TelephonyTransferCall
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// The text response message.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) Text() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *CxFlowTransitionRouteTriggerFulfillmentMessageText {
		return v.Text
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowTransitionRouteTriggerFulfillmentMessage {
		return vs[0].([]CxFlowTransitionRouteTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs and CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput).ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs, CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtr and CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs

func CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtr(v *CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess) *CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess) CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccess) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs and CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput).ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs, CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtr and CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs

func CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtr(v *CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff) *CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff) CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml *string `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text *string `pulumi:"text"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs and CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml pulumi.StringPtrInput `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput).ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs, CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtr and CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs

func CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtr(v *CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText) *CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText) *string { return v.Ssml }).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText) CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri string `pulumi:"audioUri"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs and CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri pulumi.StringInput `pulumi:"audioUri"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput).ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs, CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtr and CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs

func CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtr(v *CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio) *CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) AudioUri() pulumi.StringOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio) string { return v.AudioUri }).(pulumi.StringOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio) CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) AudioUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudio) *string {
		if v == nil {
			return nil
		}
		return &v.AudioUri
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs and CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput).ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs, CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtr and CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs

func CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtr(v *CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall) *CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall) string {
		return v.PhoneNumber
	}).(pulumi.StringOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall) CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessageTextInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs and CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageTextInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput).ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs, CxFlowTransitionRouteTriggerFulfillmentMessageTextPtr and CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs

func CxFlowTransitionRouteTriggerFulfillmentMessageTextPtr(v *CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillmentMessageText) *CxFlowTransitionRouteTriggerFulfillmentMessageText {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageText) CxFlowTransitionRouteTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillmentMessageText
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentSetParameterAction struct {
	// Display name of the parameter.
	Parameter *string `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value *string `pulumi:"value"`
}

// CxFlowTransitionRouteTriggerFulfillmentSetParameterActionInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArgs and CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentSetParameterActionInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentSetParameterActionInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput() CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput
	ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput
}

type CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArgs struct {
	// Display name of the parameter.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArgs) ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput() CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArgs) ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput)
}

// CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArray and CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArray{ CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArgs{...} }
type CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput() CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput
	ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput
}

type CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArray []CxFlowTransitionRouteTriggerFulfillmentSetParameterActionInput

func (CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRouteTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArray) ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput() CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArray) ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput) ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput() CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput) ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return o
}

// Display name of the parameter.
func (o CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentSetParameterAction) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The new JSON-encoded value of the parameter. A null value clears the parameter.
func (o CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentSetParameterAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRouteTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput) ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput() CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput) ToCxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput) Index(i pulumi.IntInput) CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowTransitionRouteTriggerFulfillmentSetParameterAction {
		return vs[0].([]CxFlowTransitionRouteTriggerFulfillmentSetParameterAction)[vs[1].(int)]
	}).(CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput)
}

type CxIntentParameter struct {
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	EntityType string `pulumi:"entityType"`
	// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
	Id string `pulumi:"id"`
	// Indicates whether the parameter represents a list of values.
	IsList *bool `pulumi:"isList"`
	// Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging.
	// Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	Redact *bool `pulumi:"redact"`
}

// CxIntentParameterInput is an input type that accepts CxIntentParameterArgs and CxIntentParameterOutput values.
// You can construct a concrete instance of `CxIntentParameterInput` via:
//
//	CxIntentParameterArgs{...}
type CxIntentParameterInput interface {
	pulumi.Input

	ToCxIntentParameterOutput() CxIntentParameterOutput
	ToCxIntentParameterOutputWithContext(context.Context) CxIntentParameterOutput
}

type CxIntentParameterArgs struct {
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates whether the parameter represents a list of values.
	IsList pulumi.BoolPtrInput `pulumi:"isList"`
	// Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging.
	// Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	Redact pulumi.BoolPtrInput `pulumi:"redact"`
}

func (CxIntentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentParameter)(nil)).Elem()
}

func (i CxIntentParameterArgs) ToCxIntentParameterOutput() CxIntentParameterOutput {
	return i.ToCxIntentParameterOutputWithContext(context.Background())
}

func (i CxIntentParameterArgs) ToCxIntentParameterOutputWithContext(ctx context.Context) CxIntentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentParameterOutput)
}

// CxIntentParameterArrayInput is an input type that accepts CxIntentParameterArray and CxIntentParameterArrayOutput values.
// You can construct a concrete instance of `CxIntentParameterArrayInput` via:
//
//	CxIntentParameterArray{ CxIntentParameterArgs{...} }
type CxIntentParameterArrayInput interface {
	pulumi.Input

	ToCxIntentParameterArrayOutput() CxIntentParameterArrayOutput
	ToCxIntentParameterArrayOutputWithContext(context.Context) CxIntentParameterArrayOutput
}

type CxIntentParameterArray []CxIntentParameterInput

func (CxIntentParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentParameter)(nil)).Elem()
}

func (i CxIntentParameterArray) ToCxIntentParameterArrayOutput() CxIntentParameterArrayOutput {
	return i.ToCxIntentParameterArrayOutputWithContext(context.Background())
}

func (i CxIntentParameterArray) ToCxIntentParameterArrayOutputWithContext(ctx context.Context) CxIntentParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentParameterArrayOutput)
}

type CxIntentParameterOutput struct{ *pulumi.OutputState }

func (CxIntentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentParameter)(nil)).Elem()
}

func (o CxIntentParameterOutput) ToCxIntentParameterOutput() CxIntentParameterOutput {
	return o
}

func (o CxIntentParameterOutput) ToCxIntentParameterOutputWithContext(ctx context.Context) CxIntentParameterOutput {
	return o
}

// The entity type of the parameter.
// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
func (o CxIntentParameterOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v CxIntentParameter) string { return v.EntityType }).(pulumi.StringOutput)
}

// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
func (o CxIntentParameterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CxIntentParameter) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the parameter represents a list of values.
func (o CxIntentParameterOutput) IsList() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxIntentParameter) *bool { return v.IsList }).(pulumi.BoolPtrOutput)
}

// Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging.
// Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
func (o CxIntentParameterOutput) Redact() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxIntentParameter) *bool { return v.Redact }).(pulumi.BoolPtrOutput)
}

type CxIntentParameterArrayOutput struct{ *pulumi.OutputState }

func (CxIntentParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentParameter)(nil)).Elem()
}

func (o CxIntentParameterArrayOutput) ToCxIntentParameterArrayOutput() CxIntentParameterArrayOutput {
	return o
}

func (o CxIntentParameterArrayOutput) ToCxIntentParameterArrayOutputWithContext(ctx context.Context) CxIntentParameterArrayOutput {
	return o
}

func (o CxIntentParameterArrayOutput) Index(i pulumi.IntInput) CxIntentParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxIntentParameter {
		return vs[0].([]CxIntentParameter)[vs[1].(int)]
	}).(CxIntentParameterOutput)
}

type CxIntentTrainingPhrase struct {
	// (Output)
	// The unique identifier of the training phrase.
	Id *string `pulumi:"id"`
	// The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase.
	// Note: The API does not automatically annotate training phrases like the Dialogflow Console does.
	// Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated.
	// If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set.
	// If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways:
	// Part.text is set to a part of the phrase that has no parameters.
	// Part.text is set to a part of the phrase that you want to annotate, and the parameterId field is set.
	// Structure is documented below.
	Parts []CxIntentTrainingPhrasePart `pulumi:"parts"`
	// Indicates how many times this example was added to the intent.
	RepeatCount *int `pulumi:"repeatCount"`
}

// CxIntentTrainingPhraseInput is an input type that accepts CxIntentTrainingPhraseArgs and CxIntentTrainingPhraseOutput values.
// You can construct a concrete instance of `CxIntentTrainingPhraseInput` via:
//
//	CxIntentTrainingPhraseArgs{...}
type CxIntentTrainingPhraseInput interface {
	pulumi.Input

	ToCxIntentTrainingPhraseOutput() CxIntentTrainingPhraseOutput
	ToCxIntentTrainingPhraseOutputWithContext(context.Context) CxIntentTrainingPhraseOutput
}

type CxIntentTrainingPhraseArgs struct {
	// (Output)
	// The unique identifier of the training phrase.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase.
	// Note: The API does not automatically annotate training phrases like the Dialogflow Console does.
	// Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated.
	// If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set.
	// If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways:
	// Part.text is set to a part of the phrase that has no parameters.
	// Part.text is set to a part of the phrase that you want to annotate, and the parameterId field is set.
	// Structure is documented below.
	Parts CxIntentTrainingPhrasePartArrayInput `pulumi:"parts"`
	// Indicates how many times this example was added to the intent.
	RepeatCount pulumi.IntPtrInput `pulumi:"repeatCount"`
}

func (CxIntentTrainingPhraseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentTrainingPhrase)(nil)).Elem()
}

func (i CxIntentTrainingPhraseArgs) ToCxIntentTrainingPhraseOutput() CxIntentTrainingPhraseOutput {
	return i.ToCxIntentTrainingPhraseOutputWithContext(context.Background())
}

func (i CxIntentTrainingPhraseArgs) ToCxIntentTrainingPhraseOutputWithContext(ctx context.Context) CxIntentTrainingPhraseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentTrainingPhraseOutput)
}

// CxIntentTrainingPhraseArrayInput is an input type that accepts CxIntentTrainingPhraseArray and CxIntentTrainingPhraseArrayOutput values.
// You can construct a concrete instance of `CxIntentTrainingPhraseArrayInput` via:
//
//	CxIntentTrainingPhraseArray{ CxIntentTrainingPhraseArgs{...} }
type CxIntentTrainingPhraseArrayInput interface {
	pulumi.Input

	ToCxIntentTrainingPhraseArrayOutput() CxIntentTrainingPhraseArrayOutput
	ToCxIntentTrainingPhraseArrayOutputWithContext(context.Context) CxIntentTrainingPhraseArrayOutput
}

type CxIntentTrainingPhraseArray []CxIntentTrainingPhraseInput

func (CxIntentTrainingPhraseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentTrainingPhrase)(nil)).Elem()
}

func (i CxIntentTrainingPhraseArray) ToCxIntentTrainingPhraseArrayOutput() CxIntentTrainingPhraseArrayOutput {
	return i.ToCxIntentTrainingPhraseArrayOutputWithContext(context.Background())
}

func (i CxIntentTrainingPhraseArray) ToCxIntentTrainingPhraseArrayOutputWithContext(ctx context.Context) CxIntentTrainingPhraseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentTrainingPhraseArrayOutput)
}

type CxIntentTrainingPhraseOutput struct{ *pulumi.OutputState }

func (CxIntentTrainingPhraseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentTrainingPhrase)(nil)).Elem()
}

func (o CxIntentTrainingPhraseOutput) ToCxIntentTrainingPhraseOutput() CxIntentTrainingPhraseOutput {
	return o
}

func (o CxIntentTrainingPhraseOutput) ToCxIntentTrainingPhraseOutputWithContext(ctx context.Context) CxIntentTrainingPhraseOutput {
	return o
}

// (Output)
// The unique identifier of the training phrase.
func (o CxIntentTrainingPhraseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrase) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase.
// Note: The API does not automatically annotate training phrases like the Dialogflow Console does.
// Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated.
// If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set.
// If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways:
// Part.text is set to a part of the phrase that has no parameters.
// Part.text is set to a part of the phrase that you want to annotate, and the parameterId field is set.
// Structure is documented below.
func (o CxIntentTrainingPhraseOutput) Parts() CxIntentTrainingPhrasePartArrayOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrase) []CxIntentTrainingPhrasePart { return v.Parts }).(CxIntentTrainingPhrasePartArrayOutput)
}

// Indicates how many times this example was added to the intent.
func (o CxIntentTrainingPhraseOutput) RepeatCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrase) *int { return v.RepeatCount }).(pulumi.IntPtrOutput)
}

type CxIntentTrainingPhraseArrayOutput struct{ *pulumi.OutputState }

func (CxIntentTrainingPhraseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentTrainingPhrase)(nil)).Elem()
}

func (o CxIntentTrainingPhraseArrayOutput) ToCxIntentTrainingPhraseArrayOutput() CxIntentTrainingPhraseArrayOutput {
	return o
}

func (o CxIntentTrainingPhraseArrayOutput) ToCxIntentTrainingPhraseArrayOutputWithContext(ctx context.Context) CxIntentTrainingPhraseArrayOutput {
	return o
}

func (o CxIntentTrainingPhraseArrayOutput) Index(i pulumi.IntInput) CxIntentTrainingPhraseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxIntentTrainingPhrase {
		return vs[0].([]CxIntentTrainingPhrase)[vs[1].(int)]
	}).(CxIntentTrainingPhraseOutput)
}

type CxIntentTrainingPhrasePart struct {
	// The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.
	ParameterId *string `pulumi:"parameterId"`
	// The text for this part.
	Text string `pulumi:"text"`
}

// CxIntentTrainingPhrasePartInput is an input type that accepts CxIntentTrainingPhrasePartArgs and CxIntentTrainingPhrasePartOutput values.
// You can construct a concrete instance of `CxIntentTrainingPhrasePartInput` via:
//
//	CxIntentTrainingPhrasePartArgs{...}
type CxIntentTrainingPhrasePartInput interface {
	pulumi.Input

	ToCxIntentTrainingPhrasePartOutput() CxIntentTrainingPhrasePartOutput
	ToCxIntentTrainingPhrasePartOutputWithContext(context.Context) CxIntentTrainingPhrasePartOutput
}

type CxIntentTrainingPhrasePartArgs struct {
	// The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.
	ParameterId pulumi.StringPtrInput `pulumi:"parameterId"`
	// The text for this part.
	Text pulumi.StringInput `pulumi:"text"`
}

func (CxIntentTrainingPhrasePartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentTrainingPhrasePart)(nil)).Elem()
}

func (i CxIntentTrainingPhrasePartArgs) ToCxIntentTrainingPhrasePartOutput() CxIntentTrainingPhrasePartOutput {
	return i.ToCxIntentTrainingPhrasePartOutputWithContext(context.Background())
}

func (i CxIntentTrainingPhrasePartArgs) ToCxIntentTrainingPhrasePartOutputWithContext(ctx context.Context) CxIntentTrainingPhrasePartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentTrainingPhrasePartOutput)
}

// CxIntentTrainingPhrasePartArrayInput is an input type that accepts CxIntentTrainingPhrasePartArray and CxIntentTrainingPhrasePartArrayOutput values.
// You can construct a concrete instance of `CxIntentTrainingPhrasePartArrayInput` via:
//
//	CxIntentTrainingPhrasePartArray{ CxIntentTrainingPhrasePartArgs{...} }
type CxIntentTrainingPhrasePartArrayInput interface {
	pulumi.Input

	ToCxIntentTrainingPhrasePartArrayOutput() CxIntentTrainingPhrasePartArrayOutput
	ToCxIntentTrainingPhrasePartArrayOutputWithContext(context.Context) CxIntentTrainingPhrasePartArrayOutput
}

type CxIntentTrainingPhrasePartArray []CxIntentTrainingPhrasePartInput

func (CxIntentTrainingPhrasePartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentTrainingPhrasePart)(nil)).Elem()
}

func (i CxIntentTrainingPhrasePartArray) ToCxIntentTrainingPhrasePartArrayOutput() CxIntentTrainingPhrasePartArrayOutput {
	return i.ToCxIntentTrainingPhrasePartArrayOutputWithContext(context.Background())
}

func (i CxIntentTrainingPhrasePartArray) ToCxIntentTrainingPhrasePartArrayOutputWithContext(ctx context.Context) CxIntentTrainingPhrasePartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentTrainingPhrasePartArrayOutput)
}

type CxIntentTrainingPhrasePartOutput struct{ *pulumi.OutputState }

func (CxIntentTrainingPhrasePartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentTrainingPhrasePart)(nil)).Elem()
}

func (o CxIntentTrainingPhrasePartOutput) ToCxIntentTrainingPhrasePartOutput() CxIntentTrainingPhrasePartOutput {
	return o
}

func (o CxIntentTrainingPhrasePartOutput) ToCxIntentTrainingPhrasePartOutputWithContext(ctx context.Context) CxIntentTrainingPhrasePartOutput {
	return o
}

// The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.
func (o CxIntentTrainingPhrasePartOutput) ParameterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrasePart) *string { return v.ParameterId }).(pulumi.StringPtrOutput)
}

// The text for this part.
func (o CxIntentTrainingPhrasePartOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrasePart) string { return v.Text }).(pulumi.StringOutput)
}

type CxIntentTrainingPhrasePartArrayOutput struct{ *pulumi.OutputState }

func (CxIntentTrainingPhrasePartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentTrainingPhrasePart)(nil)).Elem()
}

func (o CxIntentTrainingPhrasePartArrayOutput) ToCxIntentTrainingPhrasePartArrayOutput() CxIntentTrainingPhrasePartArrayOutput {
	return o
}

func (o CxIntentTrainingPhrasePartArrayOutput) ToCxIntentTrainingPhrasePartArrayOutputWithContext(ctx context.Context) CxIntentTrainingPhrasePartArrayOutput {
	return o
}

func (o CxIntentTrainingPhrasePartArrayOutput) Index(i pulumi.IntInput) CxIntentTrainingPhrasePartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxIntentTrainingPhrasePart {
		return vs[0].([]CxIntentTrainingPhrasePart)[vs[1].(int)]
	}).(CxIntentTrainingPhrasePartOutput)
}

type CxPageAdvancedSettings struct {
	// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
	// * Agent level
	// * Flow level
	// * Page level
	// * Parameter level
	//   Structure is documented below.
	DtmfSettings *CxPageAdvancedSettingsDtmfSettings `pulumi:"dtmfSettings"`
}

// CxPageAdvancedSettingsInput is an input type that accepts CxPageAdvancedSettingsArgs and CxPageAdvancedSettingsOutput values.
// You can construct a concrete instance of `CxPageAdvancedSettingsInput` via:
//
//	CxPageAdvancedSettingsArgs{...}
type CxPageAdvancedSettingsInput interface {
	pulumi.Input

	ToCxPageAdvancedSettingsOutput() CxPageAdvancedSettingsOutput
	ToCxPageAdvancedSettingsOutputWithContext(context.Context) CxPageAdvancedSettingsOutput
}

type CxPageAdvancedSettingsArgs struct {
	// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
	// * Agent level
	// * Flow level
	// * Page level
	// * Parameter level
	//   Structure is documented below.
	DtmfSettings CxPageAdvancedSettingsDtmfSettingsPtrInput `pulumi:"dtmfSettings"`
}

func (CxPageAdvancedSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageAdvancedSettings)(nil)).Elem()
}

func (i CxPageAdvancedSettingsArgs) ToCxPageAdvancedSettingsOutput() CxPageAdvancedSettingsOutput {
	return i.ToCxPageAdvancedSettingsOutputWithContext(context.Background())
}

func (i CxPageAdvancedSettingsArgs) ToCxPageAdvancedSettingsOutputWithContext(ctx context.Context) CxPageAdvancedSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageAdvancedSettingsOutput)
}

func (i CxPageAdvancedSettingsArgs) ToCxPageAdvancedSettingsPtrOutput() CxPageAdvancedSettingsPtrOutput {
	return i.ToCxPageAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (i CxPageAdvancedSettingsArgs) ToCxPageAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxPageAdvancedSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageAdvancedSettingsOutput).ToCxPageAdvancedSettingsPtrOutputWithContext(ctx)
}

// CxPageAdvancedSettingsPtrInput is an input type that accepts CxPageAdvancedSettingsArgs, CxPageAdvancedSettingsPtr and CxPageAdvancedSettingsPtrOutput values.
// You can construct a concrete instance of `CxPageAdvancedSettingsPtrInput` via:
//
//	        CxPageAdvancedSettingsArgs{...}
//
//	or:
//
//	        nil
type CxPageAdvancedSettingsPtrInput interface {
	pulumi.Input

	ToCxPageAdvancedSettingsPtrOutput() CxPageAdvancedSettingsPtrOutput
	ToCxPageAdvancedSettingsPtrOutputWithContext(context.Context) CxPageAdvancedSettingsPtrOutput
}

type cxPageAdvancedSettingsPtrType CxPageAdvancedSettingsArgs

func CxPageAdvancedSettingsPtr(v *CxPageAdvancedSettingsArgs) CxPageAdvancedSettingsPtrInput {
	return (*cxPageAdvancedSettingsPtrType)(v)
}

func (*cxPageAdvancedSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageAdvancedSettings)(nil)).Elem()
}

func (i *cxPageAdvancedSettingsPtrType) ToCxPageAdvancedSettingsPtrOutput() CxPageAdvancedSettingsPtrOutput {
	return i.ToCxPageAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (i *cxPageAdvancedSettingsPtrType) ToCxPageAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxPageAdvancedSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageAdvancedSettingsPtrOutput)
}

type CxPageAdvancedSettingsOutput struct{ *pulumi.OutputState }

func (CxPageAdvancedSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageAdvancedSettings)(nil)).Elem()
}

func (o CxPageAdvancedSettingsOutput) ToCxPageAdvancedSettingsOutput() CxPageAdvancedSettingsOutput {
	return o
}

func (o CxPageAdvancedSettingsOutput) ToCxPageAdvancedSettingsOutputWithContext(ctx context.Context) CxPageAdvancedSettingsOutput {
	return o
}

func (o CxPageAdvancedSettingsOutput) ToCxPageAdvancedSettingsPtrOutput() CxPageAdvancedSettingsPtrOutput {
	return o.ToCxPageAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (o CxPageAdvancedSettingsOutput) ToCxPageAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxPageAdvancedSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageAdvancedSettings) *CxPageAdvancedSettings {
		return &v
	}).(CxPageAdvancedSettingsPtrOutput)
}

// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
//   - Agent level
//   - Flow level
//   - Page level
//   - Parameter level
//     Structure is documented below.
func (o CxPageAdvancedSettingsOutput) DtmfSettings() CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyT(func(v CxPageAdvancedSettings) *CxPageAdvancedSettingsDtmfSettings { return v.DtmfSettings }).(CxPageAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxPageAdvancedSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxPageAdvancedSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageAdvancedSettings)(nil)).Elem()
}

func (o CxPageAdvancedSettingsPtrOutput) ToCxPageAdvancedSettingsPtrOutput() CxPageAdvancedSettingsPtrOutput {
	return o
}

func (o CxPageAdvancedSettingsPtrOutput) ToCxPageAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxPageAdvancedSettingsPtrOutput {
	return o
}

func (o CxPageAdvancedSettingsPtrOutput) Elem() CxPageAdvancedSettingsOutput {
	return o.ApplyT(func(v *CxPageAdvancedSettings) CxPageAdvancedSettings {
		if v != nil {
			return *v
		}
		var ret CxPageAdvancedSettings
		return ret
	}).(CxPageAdvancedSettingsOutput)
}

// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
//   - Agent level
//   - Flow level
//   - Page level
//   - Parameter level
//     Structure is documented below.
func (o CxPageAdvancedSettingsPtrOutput) DtmfSettings() CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyT(func(v *CxPageAdvancedSettings) *CxPageAdvancedSettingsDtmfSettings {
		if v == nil {
			return nil
		}
		return v.DtmfSettings
	}).(CxPageAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxPageAdvancedSettingsDtmfSettings struct {
	// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
	Enabled *bool `pulumi:"enabled"`
	// The digit that terminates a DTMF digit sequence.
	FinishDigit *string `pulumi:"finishDigit"`
	// Max length of DTMF digits.
	MaxDigits *int `pulumi:"maxDigits"`
}

// CxPageAdvancedSettingsDtmfSettingsInput is an input type that accepts CxPageAdvancedSettingsDtmfSettingsArgs and CxPageAdvancedSettingsDtmfSettingsOutput values.
// You can construct a concrete instance of `CxPageAdvancedSettingsDtmfSettingsInput` via:
//
//	CxPageAdvancedSettingsDtmfSettingsArgs{...}
type CxPageAdvancedSettingsDtmfSettingsInput interface {
	pulumi.Input

	ToCxPageAdvancedSettingsDtmfSettingsOutput() CxPageAdvancedSettingsDtmfSettingsOutput
	ToCxPageAdvancedSettingsDtmfSettingsOutputWithContext(context.Context) CxPageAdvancedSettingsDtmfSettingsOutput
}

type CxPageAdvancedSettingsDtmfSettingsArgs struct {
	// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The digit that terminates a DTMF digit sequence.
	FinishDigit pulumi.StringPtrInput `pulumi:"finishDigit"`
	// Max length of DTMF digits.
	MaxDigits pulumi.IntPtrInput `pulumi:"maxDigits"`
}

func (CxPageAdvancedSettingsDtmfSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (i CxPageAdvancedSettingsDtmfSettingsArgs) ToCxPageAdvancedSettingsDtmfSettingsOutput() CxPageAdvancedSettingsDtmfSettingsOutput {
	return i.ToCxPageAdvancedSettingsDtmfSettingsOutputWithContext(context.Background())
}

func (i CxPageAdvancedSettingsDtmfSettingsArgs) ToCxPageAdvancedSettingsDtmfSettingsOutputWithContext(ctx context.Context) CxPageAdvancedSettingsDtmfSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageAdvancedSettingsDtmfSettingsOutput)
}

func (i CxPageAdvancedSettingsDtmfSettingsArgs) ToCxPageAdvancedSettingsDtmfSettingsPtrOutput() CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return i.ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (i CxPageAdvancedSettingsDtmfSettingsArgs) ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageAdvancedSettingsDtmfSettingsOutput).ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx)
}

// CxPageAdvancedSettingsDtmfSettingsPtrInput is an input type that accepts CxPageAdvancedSettingsDtmfSettingsArgs, CxPageAdvancedSettingsDtmfSettingsPtr and CxPageAdvancedSettingsDtmfSettingsPtrOutput values.
// You can construct a concrete instance of `CxPageAdvancedSettingsDtmfSettingsPtrInput` via:
//
//	        CxPageAdvancedSettingsDtmfSettingsArgs{...}
//
//	or:
//
//	        nil
type CxPageAdvancedSettingsDtmfSettingsPtrInput interface {
	pulumi.Input

	ToCxPageAdvancedSettingsDtmfSettingsPtrOutput() CxPageAdvancedSettingsDtmfSettingsPtrOutput
	ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Context) CxPageAdvancedSettingsDtmfSettingsPtrOutput
}

type cxPageAdvancedSettingsDtmfSettingsPtrType CxPageAdvancedSettingsDtmfSettingsArgs

func CxPageAdvancedSettingsDtmfSettingsPtr(v *CxPageAdvancedSettingsDtmfSettingsArgs) CxPageAdvancedSettingsDtmfSettingsPtrInput {
	return (*cxPageAdvancedSettingsDtmfSettingsPtrType)(v)
}

func (*cxPageAdvancedSettingsDtmfSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (i *cxPageAdvancedSettingsDtmfSettingsPtrType) ToCxPageAdvancedSettingsDtmfSettingsPtrOutput() CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return i.ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (i *cxPageAdvancedSettingsDtmfSettingsPtrType) ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxPageAdvancedSettingsDtmfSettingsOutput struct{ *pulumi.OutputState }

func (CxPageAdvancedSettingsDtmfSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (o CxPageAdvancedSettingsDtmfSettingsOutput) ToCxPageAdvancedSettingsDtmfSettingsOutput() CxPageAdvancedSettingsDtmfSettingsOutput {
	return o
}

func (o CxPageAdvancedSettingsDtmfSettingsOutput) ToCxPageAdvancedSettingsDtmfSettingsOutputWithContext(ctx context.Context) CxPageAdvancedSettingsDtmfSettingsOutput {
	return o
}

func (o CxPageAdvancedSettingsDtmfSettingsOutput) ToCxPageAdvancedSettingsDtmfSettingsPtrOutput() CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (o CxPageAdvancedSettingsDtmfSettingsOutput) ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageAdvancedSettingsDtmfSettings) *CxPageAdvancedSettingsDtmfSettings {
		return &v
	}).(CxPageAdvancedSettingsDtmfSettingsPtrOutput)
}

// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
func (o CxPageAdvancedSettingsDtmfSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageAdvancedSettingsDtmfSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The digit that terminates a DTMF digit sequence.
func (o CxPageAdvancedSettingsDtmfSettingsOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageAdvancedSettingsDtmfSettings) *string { return v.FinishDigit }).(pulumi.StringPtrOutput)
}

// Max length of DTMF digits.
func (o CxPageAdvancedSettingsDtmfSettingsOutput) MaxDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CxPageAdvancedSettingsDtmfSettings) *int { return v.MaxDigits }).(pulumi.IntPtrOutput)
}

type CxPageAdvancedSettingsDtmfSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxPageAdvancedSettingsDtmfSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (o CxPageAdvancedSettingsDtmfSettingsPtrOutput) ToCxPageAdvancedSettingsDtmfSettingsPtrOutput() CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return o
}

func (o CxPageAdvancedSettingsDtmfSettingsPtrOutput) ToCxPageAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxPageAdvancedSettingsDtmfSettingsPtrOutput {
	return o
}

func (o CxPageAdvancedSettingsDtmfSettingsPtrOutput) Elem() CxPageAdvancedSettingsDtmfSettingsOutput {
	return o.ApplyT(func(v *CxPageAdvancedSettingsDtmfSettings) CxPageAdvancedSettingsDtmfSettings {
		if v != nil {
			return *v
		}
		var ret CxPageAdvancedSettingsDtmfSettings
		return ret
	}).(CxPageAdvancedSettingsDtmfSettingsOutput)
}

// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
func (o CxPageAdvancedSettingsDtmfSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageAdvancedSettingsDtmfSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The digit that terminates a DTMF digit sequence.
func (o CxPageAdvancedSettingsDtmfSettingsPtrOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageAdvancedSettingsDtmfSettings) *string {
		if v == nil {
			return nil
		}
		return v.FinishDigit
	}).(pulumi.StringPtrOutput)
}

// Max length of DTMF digits.
func (o CxPageAdvancedSettingsDtmfSettingsPtrOutput) MaxDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CxPageAdvancedSettingsDtmfSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxDigits
	}).(pulumi.IntPtrOutput)
}

type CxPageEntryFulfillment struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases []CxPageEntryFulfillmentConditionalCase `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageEntryFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions []CxPageEntryFulfillmentSetParameterAction `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageEntryFulfillmentInput is an input type that accepts CxPageEntryFulfillmentArgs and CxPageEntryFulfillmentOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentInput` via:
//
//	CxPageEntryFulfillmentArgs{...}
type CxPageEntryFulfillmentInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentOutput() CxPageEntryFulfillmentOutput
	ToCxPageEntryFulfillmentOutputWithContext(context.Context) CxPageEntryFulfillmentOutput
}

type CxPageEntryFulfillmentArgs struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases CxPageEntryFulfillmentConditionalCaseArrayInput `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageEntryFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions CxPageEntryFulfillmentSetParameterActionArrayInput `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageEntryFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillment)(nil)).Elem()
}

func (i CxPageEntryFulfillmentArgs) ToCxPageEntryFulfillmentOutput() CxPageEntryFulfillmentOutput {
	return i.ToCxPageEntryFulfillmentOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentArgs) ToCxPageEntryFulfillmentOutputWithContext(ctx context.Context) CxPageEntryFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentOutput)
}

func (i CxPageEntryFulfillmentArgs) ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput {
	return i.ToCxPageEntryFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentArgs) ToCxPageEntryFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentOutput).ToCxPageEntryFulfillmentPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentPtrInput is an input type that accepts CxPageEntryFulfillmentArgs, CxPageEntryFulfillmentPtr and CxPageEntryFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentPtrInput` via:
//
//	        CxPageEntryFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput
	ToCxPageEntryFulfillmentPtrOutputWithContext(context.Context) CxPageEntryFulfillmentPtrOutput
}

type cxPageEntryFulfillmentPtrType CxPageEntryFulfillmentArgs

func CxPageEntryFulfillmentPtr(v *CxPageEntryFulfillmentArgs) CxPageEntryFulfillmentPtrInput {
	return (*cxPageEntryFulfillmentPtrType)(v)
}

func (*cxPageEntryFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillment)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentPtrType) ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput {
	return i.ToCxPageEntryFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentPtrType) ToCxPageEntryFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentPtrOutput)
}

type CxPageEntryFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillment)(nil)).Elem()
}

func (o CxPageEntryFulfillmentOutput) ToCxPageEntryFulfillmentOutput() CxPageEntryFulfillmentOutput {
	return o
}

func (o CxPageEntryFulfillmentOutput) ToCxPageEntryFulfillmentOutputWithContext(ctx context.Context) CxPageEntryFulfillmentOutput {
	return o
}

func (o CxPageEntryFulfillmentOutput) ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput {
	return o.ToCxPageEntryFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentOutput) ToCxPageEntryFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillment) *CxPageEntryFulfillment {
		return &v
	}).(CxPageEntryFulfillmentPtrOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageEntryFulfillmentOutput) ConditionalCases() CxPageEntryFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) []CxPageEntryFulfillmentConditionalCase { return v.ConditionalCases }).(CxPageEntryFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageEntryFulfillmentOutput) Messages() CxPageEntryFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) []CxPageEntryFulfillmentMessage { return v.Messages }).(CxPageEntryFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageEntryFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageEntryFulfillmentOutput) SetParameterActions() CxPageEntryFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) []CxPageEntryFulfillmentSetParameterAction {
		return v.SetParameterActions
	}).(CxPageEntryFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageEntryFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageEntryFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillment)(nil)).Elem()
}

func (o CxPageEntryFulfillmentPtrOutput) ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentPtrOutput) ToCxPageEntryFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentPtrOutput) Elem() CxPageEntryFulfillmentOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) CxPageEntryFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillment
		return ret
	}).(CxPageEntryFulfillmentOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageEntryFulfillmentPtrOutput) ConditionalCases() CxPageEntryFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) []CxPageEntryFulfillmentConditionalCase {
		if v == nil {
			return nil
		}
		return v.ConditionalCases
	}).(CxPageEntryFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageEntryFulfillmentPtrOutput) Messages() CxPageEntryFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) []CxPageEntryFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageEntryFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageEntryFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageEntryFulfillmentPtrOutput) SetParameterActions() CxPageEntryFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) []CxPageEntryFulfillmentSetParameterAction {
		if v == nil {
			return nil
		}
		return v.SetParameterActions
	}).(CxPageEntryFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageEntryFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageEntryFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentConditionalCase struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases *string `pulumi:"cases"`
}

// CxPageEntryFulfillmentConditionalCaseInput is an input type that accepts CxPageEntryFulfillmentConditionalCaseArgs and CxPageEntryFulfillmentConditionalCaseOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentConditionalCaseInput` via:
//
//	CxPageEntryFulfillmentConditionalCaseArgs{...}
type CxPageEntryFulfillmentConditionalCaseInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentConditionalCaseOutput() CxPageEntryFulfillmentConditionalCaseOutput
	ToCxPageEntryFulfillmentConditionalCaseOutputWithContext(context.Context) CxPageEntryFulfillmentConditionalCaseOutput
}

type CxPageEntryFulfillmentConditionalCaseArgs struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases pulumi.StringPtrInput `pulumi:"cases"`
}

func (CxPageEntryFulfillmentConditionalCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageEntryFulfillmentConditionalCaseArgs) ToCxPageEntryFulfillmentConditionalCaseOutput() CxPageEntryFulfillmentConditionalCaseOutput {
	return i.ToCxPageEntryFulfillmentConditionalCaseOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentConditionalCaseArgs) ToCxPageEntryFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageEntryFulfillmentConditionalCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentConditionalCaseOutput)
}

// CxPageEntryFulfillmentConditionalCaseArrayInput is an input type that accepts CxPageEntryFulfillmentConditionalCaseArray and CxPageEntryFulfillmentConditionalCaseArrayOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentConditionalCaseArrayInput` via:
//
//	CxPageEntryFulfillmentConditionalCaseArray{ CxPageEntryFulfillmentConditionalCaseArgs{...} }
type CxPageEntryFulfillmentConditionalCaseArrayInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentConditionalCaseArrayOutput() CxPageEntryFulfillmentConditionalCaseArrayOutput
	ToCxPageEntryFulfillmentConditionalCaseArrayOutputWithContext(context.Context) CxPageEntryFulfillmentConditionalCaseArrayOutput
}

type CxPageEntryFulfillmentConditionalCaseArray []CxPageEntryFulfillmentConditionalCaseInput

func (CxPageEntryFulfillmentConditionalCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEntryFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageEntryFulfillmentConditionalCaseArray) ToCxPageEntryFulfillmentConditionalCaseArrayOutput() CxPageEntryFulfillmentConditionalCaseArrayOutput {
	return i.ToCxPageEntryFulfillmentConditionalCaseArrayOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentConditionalCaseArray) ToCxPageEntryFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageEntryFulfillmentConditionalCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentConditionalCaseArrayOutput)
}

type CxPageEntryFulfillmentConditionalCaseOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentConditionalCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageEntryFulfillmentConditionalCaseOutput) ToCxPageEntryFulfillmentConditionalCaseOutput() CxPageEntryFulfillmentConditionalCaseOutput {
	return o
}

func (o CxPageEntryFulfillmentConditionalCaseOutput) ToCxPageEntryFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageEntryFulfillmentConditionalCaseOutput {
	return o
}

// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
func (o CxPageEntryFulfillmentConditionalCaseOutput) Cases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentConditionalCase) *string { return v.Cases }).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentConditionalCaseArrayOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentConditionalCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEntryFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageEntryFulfillmentConditionalCaseArrayOutput) ToCxPageEntryFulfillmentConditionalCaseArrayOutput() CxPageEntryFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageEntryFulfillmentConditionalCaseArrayOutput) ToCxPageEntryFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageEntryFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageEntryFulfillmentConditionalCaseArrayOutput) Index(i pulumi.IntInput) CxPageEntryFulfillmentConditionalCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEntryFulfillmentConditionalCase {
		return vs[0].([]CxPageEntryFulfillmentConditionalCase)[vs[1].(int)]
	}).(CxPageEntryFulfillmentConditionalCaseOutput)
}

type CxPageEntryFulfillmentMessage struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel *string `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess *CxPageEntryFulfillmentMessageConversationSuccess `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff *CxPageEntryFulfillmentMessageLiveAgentHandoff `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText *CxPageEntryFulfillmentMessageOutputAudioText `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload *string `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio *CxPageEntryFulfillmentMessagePlayAudio `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall *CxPageEntryFulfillmentMessageTelephonyTransferCall `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text *CxPageEntryFulfillmentMessageText `pulumi:"text"`
}

// CxPageEntryFulfillmentMessageInput is an input type that accepts CxPageEntryFulfillmentMessageArgs and CxPageEntryFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageInput` via:
//
//	CxPageEntryFulfillmentMessageArgs{...}
type CxPageEntryFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageOutput() CxPageEntryFulfillmentMessageOutput
	ToCxPageEntryFulfillmentMessageOutputWithContext(context.Context) CxPageEntryFulfillmentMessageOutput
}

type CxPageEntryFulfillmentMessageArgs struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess CxPageEntryFulfillmentMessageConversationSuccessPtrInput `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff CxPageEntryFulfillmentMessageLiveAgentHandoffPtrInput `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText CxPageEntryFulfillmentMessageOutputAudioTextPtrInput `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio CxPageEntryFulfillmentMessagePlayAudioPtrInput `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall CxPageEntryFulfillmentMessageTelephonyTransferCallPtrInput `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text CxPageEntryFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageEntryFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessage)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageArgs) ToCxPageEntryFulfillmentMessageOutput() CxPageEntryFulfillmentMessageOutput {
	return i.ToCxPageEntryFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageArgs) ToCxPageEntryFulfillmentMessageOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageOutput)
}

// CxPageEntryFulfillmentMessageArrayInput is an input type that accepts CxPageEntryFulfillmentMessageArray and CxPageEntryFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageArrayInput` via:
//
//	CxPageEntryFulfillmentMessageArray{ CxPageEntryFulfillmentMessageArgs{...} }
type CxPageEntryFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageArrayOutput() CxPageEntryFulfillmentMessageArrayOutput
	ToCxPageEntryFulfillmentMessageArrayOutputWithContext(context.Context) CxPageEntryFulfillmentMessageArrayOutput
}

type CxPageEntryFulfillmentMessageArray []CxPageEntryFulfillmentMessageInput

func (CxPageEntryFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEntryFulfillmentMessage)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageArray) ToCxPageEntryFulfillmentMessageArrayOutput() CxPageEntryFulfillmentMessageArrayOutput {
	return i.ToCxPageEntryFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageArray) ToCxPageEntryFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageArrayOutput)
}

type CxPageEntryFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessage)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageOutput) ToCxPageEntryFulfillmentMessageOutput() CxPageEntryFulfillmentMessageOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageOutput) ToCxPageEntryFulfillmentMessageOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutput {
	return o
}

// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
func (o CxPageEntryFulfillmentMessageOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
//   - In a webhook response when you determine that you handled the customer issue.
//     Structure is documented below.
func (o CxPageEntryFulfillmentMessageOutput) ConversationSuccess() CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *CxPageEntryFulfillmentMessageConversationSuccess {
		return v.ConversationSuccess
	}).(CxPageEntryFulfillmentMessageConversationSuccessPtrOutput)
}

// Indicates that the conversation should be handed off to a live agent.
// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
//   - In a webhook response when you determine that the customer issue can only be handled by a human.
//     Structure is documented below.
func (o CxPageEntryFulfillmentMessageOutput) LiveAgentHandoff() CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *CxPageEntryFulfillmentMessageLiveAgentHandoff {
		return v.LiveAgentHandoff
	}).(CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
// Structure is documented below.
func (o CxPageEntryFulfillmentMessageOutput) OutputAudioText() CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *CxPageEntryFulfillmentMessageOutputAudioText {
		return v.OutputAudioText
	}).(CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput)
}

// A custom, platform-specific payload.
func (o CxPageEntryFulfillmentMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// Specifies an audio clip to be played by the client as part of the response.
// Structure is documented below.
func (o CxPageEntryFulfillmentMessageOutput) PlayAudio() CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *CxPageEntryFulfillmentMessagePlayAudio { return v.PlayAudio }).(CxPageEntryFulfillmentMessagePlayAudioPtrOutput)
}

// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
// Structure is documented below.
func (o CxPageEntryFulfillmentMessageOutput) TelephonyTransferCall() CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *CxPageEntryFulfillmentMessageTelephonyTransferCall {
		return v.TelephonyTransferCall
	}).(CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// The text response message.
// Structure is documented below.
func (o CxPageEntryFulfillmentMessageOutput) Text() CxPageEntryFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *CxPageEntryFulfillmentMessageText { return v.Text }).(CxPageEntryFulfillmentMessageTextPtrOutput)
}

type CxPageEntryFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEntryFulfillmentMessage)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageArrayOutput) ToCxPageEntryFulfillmentMessageArrayOutput() CxPageEntryFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageArrayOutput) ToCxPageEntryFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageEntryFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEntryFulfillmentMessage {
		return vs[0].([]CxPageEntryFulfillmentMessage)[vs[1].(int)]
	}).(CxPageEntryFulfillmentMessageOutput)
}

type CxPageEntryFulfillmentMessageConversationSuccess struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageEntryFulfillmentMessageConversationSuccessInput is an input type that accepts CxPageEntryFulfillmentMessageConversationSuccessArgs and CxPageEntryFulfillmentMessageConversationSuccessOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageConversationSuccessInput` via:
//
//	CxPageEntryFulfillmentMessageConversationSuccessArgs{...}
type CxPageEntryFulfillmentMessageConversationSuccessInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageConversationSuccessOutput() CxPageEntryFulfillmentMessageConversationSuccessOutput
	ToCxPageEntryFulfillmentMessageConversationSuccessOutputWithContext(context.Context) CxPageEntryFulfillmentMessageConversationSuccessOutput
}

type CxPageEntryFulfillmentMessageConversationSuccessArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageEntryFulfillmentMessageConversationSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageConversationSuccessArgs) ToCxPageEntryFulfillmentMessageConversationSuccessOutput() CxPageEntryFulfillmentMessageConversationSuccessOutput {
	return i.ToCxPageEntryFulfillmentMessageConversationSuccessOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageConversationSuccessArgs) ToCxPageEntryFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageConversationSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageConversationSuccessOutput)
}

func (i CxPageEntryFulfillmentMessageConversationSuccessArgs) ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutput() CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageConversationSuccessArgs) ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageConversationSuccessOutput).ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentMessageConversationSuccessPtrInput is an input type that accepts CxPageEntryFulfillmentMessageConversationSuccessArgs, CxPageEntryFulfillmentMessageConversationSuccessPtr and CxPageEntryFulfillmentMessageConversationSuccessPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageConversationSuccessPtrInput` via:
//
//	        CxPageEntryFulfillmentMessageConversationSuccessArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentMessageConversationSuccessPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutput() CxPageEntryFulfillmentMessageConversationSuccessPtrOutput
	ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Context) CxPageEntryFulfillmentMessageConversationSuccessPtrOutput
}

type cxPageEntryFulfillmentMessageConversationSuccessPtrType CxPageEntryFulfillmentMessageConversationSuccessArgs

func CxPageEntryFulfillmentMessageConversationSuccessPtr(v *CxPageEntryFulfillmentMessageConversationSuccessArgs) CxPageEntryFulfillmentMessageConversationSuccessPtrInput {
	return (*cxPageEntryFulfillmentMessageConversationSuccessPtrType)(v)
}

func (*cxPageEntryFulfillmentMessageConversationSuccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentMessageConversationSuccessPtrType) ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutput() CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentMessageConversationSuccessPtrType) ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageConversationSuccessPtrOutput)
}

type CxPageEntryFulfillmentMessageConversationSuccessOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageConversationSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageConversationSuccessOutput) ToCxPageEntryFulfillmentMessageConversationSuccessOutput() CxPageEntryFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageConversationSuccessOutput) ToCxPageEntryFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageConversationSuccessOutput) ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutput() CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return o.ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentMessageConversationSuccessOutput) ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillmentMessageConversationSuccess) *CxPageEntryFulfillmentMessageConversationSuccess {
		return &v
	}).(CxPageEntryFulfillmentMessageConversationSuccessPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageEntryFulfillmentMessageConversationSuccessOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageConversationSuccess) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessageConversationSuccessPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageConversationSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageConversationSuccessPtrOutput) ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutput() CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageConversationSuccessPtrOutput) ToCxPageEntryFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageConversationSuccessPtrOutput) Elem() CxPageEntryFulfillmentMessageConversationSuccessOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageConversationSuccess) CxPageEntryFulfillmentMessageConversationSuccess {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillmentMessageConversationSuccess
		return ret
	}).(CxPageEntryFulfillmentMessageConversationSuccessOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageEntryFulfillmentMessageConversationSuccessPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageConversationSuccess) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessageLiveAgentHandoff struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageEntryFulfillmentMessageLiveAgentHandoffInput is an input type that accepts CxPageEntryFulfillmentMessageLiveAgentHandoffArgs and CxPageEntryFulfillmentMessageLiveAgentHandoffOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageLiveAgentHandoffInput` via:
//
//	CxPageEntryFulfillmentMessageLiveAgentHandoffArgs{...}
type CxPageEntryFulfillmentMessageLiveAgentHandoffInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageLiveAgentHandoffOutput() CxPageEntryFulfillmentMessageLiveAgentHandoffOutput
	ToCxPageEntryFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Context) CxPageEntryFulfillmentMessageLiveAgentHandoffOutput
}

type CxPageEntryFulfillmentMessageLiveAgentHandoffArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageEntryFulfillmentMessageLiveAgentHandoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageLiveAgentHandoffArgs) ToCxPageEntryFulfillmentMessageLiveAgentHandoffOutput() CxPageEntryFulfillmentMessageLiveAgentHandoffOutput {
	return i.ToCxPageEntryFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageLiveAgentHandoffArgs) ToCxPageEntryFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageLiveAgentHandoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageLiveAgentHandoffOutput)
}

func (i CxPageEntryFulfillmentMessageLiveAgentHandoffArgs) ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageLiveAgentHandoffArgs) ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageLiveAgentHandoffOutput).ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentMessageLiveAgentHandoffPtrInput is an input type that accepts CxPageEntryFulfillmentMessageLiveAgentHandoffArgs, CxPageEntryFulfillmentMessageLiveAgentHandoffPtr and CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageLiveAgentHandoffPtrInput` via:
//
//	        CxPageEntryFulfillmentMessageLiveAgentHandoffArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentMessageLiveAgentHandoffPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput
	ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Context) CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput
}

type cxPageEntryFulfillmentMessageLiveAgentHandoffPtrType CxPageEntryFulfillmentMessageLiveAgentHandoffArgs

func CxPageEntryFulfillmentMessageLiveAgentHandoffPtr(v *CxPageEntryFulfillmentMessageLiveAgentHandoffArgs) CxPageEntryFulfillmentMessageLiveAgentHandoffPtrInput {
	return (*cxPageEntryFulfillmentMessageLiveAgentHandoffPtrType)(v)
}

func (*cxPageEntryFulfillmentMessageLiveAgentHandoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput)
}

type CxPageEntryFulfillmentMessageLiveAgentHandoffOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageLiveAgentHandoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageLiveAgentHandoffOutput) ToCxPageEntryFulfillmentMessageLiveAgentHandoffOutput() CxPageEntryFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageLiveAgentHandoffOutput) ToCxPageEntryFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageLiveAgentHandoffOutput) ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentMessageLiveAgentHandoffOutput) ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillmentMessageLiveAgentHandoff) *CxPageEntryFulfillmentMessageLiveAgentHandoff {
		return &v
	}).(CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageEntryFulfillmentMessageLiveAgentHandoffOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageLiveAgentHandoff) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput) Elem() CxPageEntryFulfillmentMessageLiveAgentHandoffOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageLiveAgentHandoff) CxPageEntryFulfillmentMessageLiveAgentHandoff {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillmentMessageLiveAgentHandoff
		return ret
	}).(CxPageEntryFulfillmentMessageLiveAgentHandoffOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageLiveAgentHandoff) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessageOutputAudioText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml *string `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text *string `pulumi:"text"`
}

// CxPageEntryFulfillmentMessageOutputAudioTextInput is an input type that accepts CxPageEntryFulfillmentMessageOutputAudioTextArgs and CxPageEntryFulfillmentMessageOutputAudioTextOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageOutputAudioTextInput` via:
//
//	CxPageEntryFulfillmentMessageOutputAudioTextArgs{...}
type CxPageEntryFulfillmentMessageOutputAudioTextInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageOutputAudioTextOutput() CxPageEntryFulfillmentMessageOutputAudioTextOutput
	ToCxPageEntryFulfillmentMessageOutputAudioTextOutputWithContext(context.Context) CxPageEntryFulfillmentMessageOutputAudioTextOutput
}

type CxPageEntryFulfillmentMessageOutputAudioTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml pulumi.StringPtrInput `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (CxPageEntryFulfillmentMessageOutputAudioTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageOutputAudioTextArgs) ToCxPageEntryFulfillmentMessageOutputAudioTextOutput() CxPageEntryFulfillmentMessageOutputAudioTextOutput {
	return i.ToCxPageEntryFulfillmentMessageOutputAudioTextOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageOutputAudioTextArgs) ToCxPageEntryFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutputAudioTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageOutputAudioTextOutput)
}

func (i CxPageEntryFulfillmentMessageOutputAudioTextArgs) ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutput() CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageOutputAudioTextArgs) ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageOutputAudioTextOutput).ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentMessageOutputAudioTextPtrInput is an input type that accepts CxPageEntryFulfillmentMessageOutputAudioTextArgs, CxPageEntryFulfillmentMessageOutputAudioTextPtr and CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageOutputAudioTextPtrInput` via:
//
//	        CxPageEntryFulfillmentMessageOutputAudioTextArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentMessageOutputAudioTextPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutput() CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput
	ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Context) CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput
}

type cxPageEntryFulfillmentMessageOutputAudioTextPtrType CxPageEntryFulfillmentMessageOutputAudioTextArgs

func CxPageEntryFulfillmentMessageOutputAudioTextPtr(v *CxPageEntryFulfillmentMessageOutputAudioTextArgs) CxPageEntryFulfillmentMessageOutputAudioTextPtrInput {
	return (*cxPageEntryFulfillmentMessageOutputAudioTextPtrType)(v)
}

func (*cxPageEntryFulfillmentMessageOutputAudioTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentMessageOutputAudioTextPtrType) ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutput() CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentMessageOutputAudioTextPtrType) ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput)
}

type CxPageEntryFulfillmentMessageOutputAudioTextOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageOutputAudioTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageOutputAudioTextOutput) ToCxPageEntryFulfillmentMessageOutputAudioTextOutput() CxPageEntryFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageOutputAudioTextOutput) ToCxPageEntryFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageOutputAudioTextOutput) ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutput() CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentMessageOutputAudioTextOutput) ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillmentMessageOutputAudioText) *CxPageEntryFulfillmentMessageOutputAudioText {
		return &v
	}).(CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEntryFulfillmentMessageOutputAudioTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageOutputAudioText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageEntryFulfillmentMessageOutputAudioTextOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageOutputAudioText) *string { return v.Ssml }).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageEntryFulfillmentMessageOutputAudioTextOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageOutputAudioText) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutput() CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageEntryFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput) Elem() CxPageEntryFulfillmentMessageOutputAudioTextOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageOutputAudioText) CxPageEntryFulfillmentMessageOutputAudioText {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillmentMessageOutputAudioText
		return ret
	}).(CxPageEntryFulfillmentMessageOutputAudioTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageOutputAudioText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessagePlayAudio struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri string `pulumi:"audioUri"`
}

// CxPageEntryFulfillmentMessagePlayAudioInput is an input type that accepts CxPageEntryFulfillmentMessagePlayAudioArgs and CxPageEntryFulfillmentMessagePlayAudioOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessagePlayAudioInput` via:
//
//	CxPageEntryFulfillmentMessagePlayAudioArgs{...}
type CxPageEntryFulfillmentMessagePlayAudioInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessagePlayAudioOutput() CxPageEntryFulfillmentMessagePlayAudioOutput
	ToCxPageEntryFulfillmentMessagePlayAudioOutputWithContext(context.Context) CxPageEntryFulfillmentMessagePlayAudioOutput
}

type CxPageEntryFulfillmentMessagePlayAudioArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri pulumi.StringInput `pulumi:"audioUri"`
}

func (CxPageEntryFulfillmentMessagePlayAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessagePlayAudioArgs) ToCxPageEntryFulfillmentMessagePlayAudioOutput() CxPageEntryFulfillmentMessagePlayAudioOutput {
	return i.ToCxPageEntryFulfillmentMessagePlayAudioOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessagePlayAudioArgs) ToCxPageEntryFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessagePlayAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessagePlayAudioOutput)
}

func (i CxPageEntryFulfillmentMessagePlayAudioArgs) ToCxPageEntryFulfillmentMessagePlayAudioPtrOutput() CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessagePlayAudioArgs) ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessagePlayAudioOutput).ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentMessagePlayAudioPtrInput is an input type that accepts CxPageEntryFulfillmentMessagePlayAudioArgs, CxPageEntryFulfillmentMessagePlayAudioPtr and CxPageEntryFulfillmentMessagePlayAudioPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessagePlayAudioPtrInput` via:
//
//	        CxPageEntryFulfillmentMessagePlayAudioArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentMessagePlayAudioPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessagePlayAudioPtrOutput() CxPageEntryFulfillmentMessagePlayAudioPtrOutput
	ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(context.Context) CxPageEntryFulfillmentMessagePlayAudioPtrOutput
}

type cxPageEntryFulfillmentMessagePlayAudioPtrType CxPageEntryFulfillmentMessagePlayAudioArgs

func CxPageEntryFulfillmentMessagePlayAudioPtr(v *CxPageEntryFulfillmentMessagePlayAudioArgs) CxPageEntryFulfillmentMessagePlayAudioPtrInput {
	return (*cxPageEntryFulfillmentMessagePlayAudioPtrType)(v)
}

func (*cxPageEntryFulfillmentMessagePlayAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentMessagePlayAudioPtrType) ToCxPageEntryFulfillmentMessagePlayAudioPtrOutput() CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentMessagePlayAudioPtrType) ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessagePlayAudioPtrOutput)
}

type CxPageEntryFulfillmentMessagePlayAudioOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessagePlayAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessagePlayAudioOutput) ToCxPageEntryFulfillmentMessagePlayAudioOutput() CxPageEntryFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageEntryFulfillmentMessagePlayAudioOutput) ToCxPageEntryFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageEntryFulfillmentMessagePlayAudioOutput) ToCxPageEntryFulfillmentMessagePlayAudioPtrOutput() CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return o.ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentMessagePlayAudioOutput) ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillmentMessagePlayAudio) *CxPageEntryFulfillmentMessagePlayAudio {
		return &v
	}).(CxPageEntryFulfillmentMessagePlayAudioPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEntryFulfillmentMessagePlayAudioOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessagePlayAudio) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageEntryFulfillmentMessagePlayAudioOutput) AudioUri() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessagePlayAudio) string { return v.AudioUri }).(pulumi.StringOutput)
}

type CxPageEntryFulfillmentMessagePlayAudioPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessagePlayAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessagePlayAudioPtrOutput) ToCxPageEntryFulfillmentMessagePlayAudioPtrOutput() CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessagePlayAudioPtrOutput) ToCxPageEntryFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessagePlayAudioPtrOutput) Elem() CxPageEntryFulfillmentMessagePlayAudioOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessagePlayAudio) CxPageEntryFulfillmentMessagePlayAudio {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillmentMessagePlayAudio
		return ret
	}).(CxPageEntryFulfillmentMessagePlayAudioOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEntryFulfillmentMessagePlayAudioPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessagePlayAudio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageEntryFulfillmentMessagePlayAudioPtrOutput) AudioUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessagePlayAudio) *string {
		if v == nil {
			return nil
		}
		return &v.AudioUri
	}).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessageTelephonyTransferCall struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// CxPageEntryFulfillmentMessageTelephonyTransferCallInput is an input type that accepts CxPageEntryFulfillmentMessageTelephonyTransferCallArgs and CxPageEntryFulfillmentMessageTelephonyTransferCallOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageTelephonyTransferCallInput` via:
//
//	CxPageEntryFulfillmentMessageTelephonyTransferCallArgs{...}
type CxPageEntryFulfillmentMessageTelephonyTransferCallInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageTelephonyTransferCallOutput() CxPageEntryFulfillmentMessageTelephonyTransferCallOutput
	ToCxPageEntryFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Context) CxPageEntryFulfillmentMessageTelephonyTransferCallOutput
}

type CxPageEntryFulfillmentMessageTelephonyTransferCallArgs struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (CxPageEntryFulfillmentMessageTelephonyTransferCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageTelephonyTransferCallArgs) ToCxPageEntryFulfillmentMessageTelephonyTransferCallOutput() CxPageEntryFulfillmentMessageTelephonyTransferCallOutput {
	return i.ToCxPageEntryFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageTelephonyTransferCallArgs) ToCxPageEntryFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTelephonyTransferCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTelephonyTransferCallOutput)
}

func (i CxPageEntryFulfillmentMessageTelephonyTransferCallArgs) ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageTelephonyTransferCallArgs) ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTelephonyTransferCallOutput).ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentMessageTelephonyTransferCallPtrInput is an input type that accepts CxPageEntryFulfillmentMessageTelephonyTransferCallArgs, CxPageEntryFulfillmentMessageTelephonyTransferCallPtr and CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageTelephonyTransferCallPtrInput` via:
//
//	        CxPageEntryFulfillmentMessageTelephonyTransferCallArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentMessageTelephonyTransferCallPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput
	ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Context) CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput
}

type cxPageEntryFulfillmentMessageTelephonyTransferCallPtrType CxPageEntryFulfillmentMessageTelephonyTransferCallArgs

func CxPageEntryFulfillmentMessageTelephonyTransferCallPtr(v *CxPageEntryFulfillmentMessageTelephonyTransferCallArgs) CxPageEntryFulfillmentMessageTelephonyTransferCallPtrInput {
	return (*cxPageEntryFulfillmentMessageTelephonyTransferCallPtrType)(v)
}

func (*cxPageEntryFulfillmentMessageTelephonyTransferCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput)
}

type CxPageEntryFulfillmentMessageTelephonyTransferCallOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageTelephonyTransferCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageTelephonyTransferCallOutput) ToCxPageEntryFulfillmentMessageTelephonyTransferCallOutput() CxPageEntryFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTelephonyTransferCallOutput) ToCxPageEntryFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTelephonyTransferCallOutput) ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentMessageTelephonyTransferCallOutput) ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillmentMessageTelephonyTransferCall) *CxPageEntryFulfillmentMessageTelephonyTransferCall {
		return &v
	}).(CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageEntryFulfillmentMessageTelephonyTransferCallOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageTelephonyTransferCall) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput) Elem() CxPageEntryFulfillmentMessageTelephonyTransferCallOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageTelephonyTransferCall) CxPageEntryFulfillmentMessageTelephonyTransferCall {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillmentMessageTelephonyTransferCall
		return ret
	}).(CxPageEntryFulfillmentMessageTelephonyTransferCallOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageTelephonyTransferCall) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessageText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageEntryFulfillmentMessageTextInput is an input type that accepts CxPageEntryFulfillmentMessageTextArgs and CxPageEntryFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageTextInput` via:
//
//	CxPageEntryFulfillmentMessageTextArgs{...}
type CxPageEntryFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageTextOutput() CxPageEntryFulfillmentMessageTextOutput
	ToCxPageEntryFulfillmentMessageTextOutputWithContext(context.Context) CxPageEntryFulfillmentMessageTextOutput
}

type CxPageEntryFulfillmentMessageTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageEntryFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageTextArgs) ToCxPageEntryFulfillmentMessageTextOutput() CxPageEntryFulfillmentMessageTextOutput {
	return i.ToCxPageEntryFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageTextArgs) ToCxPageEntryFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTextOutput)
}

func (i CxPageEntryFulfillmentMessageTextArgs) ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageTextArgs) ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTextOutput).ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentMessageTextPtrInput is an input type that accepts CxPageEntryFulfillmentMessageTextArgs, CxPageEntryFulfillmentMessageTextPtr and CxPageEntryFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageTextPtrInput` via:
//
//	        CxPageEntryFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput
	ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageEntryFulfillmentMessageTextPtrOutput
}

type cxPageEntryFulfillmentMessageTextPtrType CxPageEntryFulfillmentMessageTextArgs

func CxPageEntryFulfillmentMessageTextPtr(v *CxPageEntryFulfillmentMessageTextArgs) CxPageEntryFulfillmentMessageTextPtrInput {
	return (*cxPageEntryFulfillmentMessageTextPtrType)(v)
}

func (*cxPageEntryFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentMessageTextPtrType) ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentMessageTextPtrType) ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTextPtrOutput)
}

type CxPageEntryFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageTextOutput) ToCxPageEntryFulfillmentMessageTextOutput() CxPageEntryFulfillmentMessageTextOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTextOutput) ToCxPageEntryFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTextOutput) ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput {
	return o.ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentMessageTextOutput) ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillmentMessageText) *CxPageEntryFulfillmentMessageText {
		return &v
	}).(CxPageEntryFulfillmentMessageTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEntryFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageEntryFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxPageEntryFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageTextPtrOutput) ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTextPtrOutput) ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTextPtrOutput) Elem() CxPageEntryFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageText) CxPageEntryFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillmentMessageText
		return ret
	}).(CxPageEntryFulfillmentMessageTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEntryFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageEntryFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageEntryFulfillmentSetParameterAction struct {
	// Display name of the parameter.
	Parameter *string `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value *string `pulumi:"value"`
}

// CxPageEntryFulfillmentSetParameterActionInput is an input type that accepts CxPageEntryFulfillmentSetParameterActionArgs and CxPageEntryFulfillmentSetParameterActionOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentSetParameterActionInput` via:
//
//	CxPageEntryFulfillmentSetParameterActionArgs{...}
type CxPageEntryFulfillmentSetParameterActionInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentSetParameterActionOutput() CxPageEntryFulfillmentSetParameterActionOutput
	ToCxPageEntryFulfillmentSetParameterActionOutputWithContext(context.Context) CxPageEntryFulfillmentSetParameterActionOutput
}

type CxPageEntryFulfillmentSetParameterActionArgs struct {
	// Display name of the parameter.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxPageEntryFulfillmentSetParameterActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageEntryFulfillmentSetParameterActionArgs) ToCxPageEntryFulfillmentSetParameterActionOutput() CxPageEntryFulfillmentSetParameterActionOutput {
	return i.ToCxPageEntryFulfillmentSetParameterActionOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentSetParameterActionArgs) ToCxPageEntryFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageEntryFulfillmentSetParameterActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentSetParameterActionOutput)
}

// CxPageEntryFulfillmentSetParameterActionArrayInput is an input type that accepts CxPageEntryFulfillmentSetParameterActionArray and CxPageEntryFulfillmentSetParameterActionArrayOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentSetParameterActionArrayInput` via:
//
//	CxPageEntryFulfillmentSetParameterActionArray{ CxPageEntryFulfillmentSetParameterActionArgs{...} }
type CxPageEntryFulfillmentSetParameterActionArrayInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentSetParameterActionArrayOutput() CxPageEntryFulfillmentSetParameterActionArrayOutput
	ToCxPageEntryFulfillmentSetParameterActionArrayOutputWithContext(context.Context) CxPageEntryFulfillmentSetParameterActionArrayOutput
}

type CxPageEntryFulfillmentSetParameterActionArray []CxPageEntryFulfillmentSetParameterActionInput

func (CxPageEntryFulfillmentSetParameterActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEntryFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageEntryFulfillmentSetParameterActionArray) ToCxPageEntryFulfillmentSetParameterActionArrayOutput() CxPageEntryFulfillmentSetParameterActionArrayOutput {
	return i.ToCxPageEntryFulfillmentSetParameterActionArrayOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentSetParameterActionArray) ToCxPageEntryFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageEntryFulfillmentSetParameterActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentSetParameterActionArrayOutput)
}

type CxPageEntryFulfillmentSetParameterActionOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentSetParameterActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageEntryFulfillmentSetParameterActionOutput) ToCxPageEntryFulfillmentSetParameterActionOutput() CxPageEntryFulfillmentSetParameterActionOutput {
	return o
}

func (o CxPageEntryFulfillmentSetParameterActionOutput) ToCxPageEntryFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageEntryFulfillmentSetParameterActionOutput {
	return o
}

// Display name of the parameter.
func (o CxPageEntryFulfillmentSetParameterActionOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentSetParameterAction) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The new JSON-encoded value of the parameter. A null value clears the parameter.
func (o CxPageEntryFulfillmentSetParameterActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentSetParameterAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentSetParameterActionArrayOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentSetParameterActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEntryFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageEntryFulfillmentSetParameterActionArrayOutput) ToCxPageEntryFulfillmentSetParameterActionArrayOutput() CxPageEntryFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageEntryFulfillmentSetParameterActionArrayOutput) ToCxPageEntryFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageEntryFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageEntryFulfillmentSetParameterActionArrayOutput) Index(i pulumi.IntInput) CxPageEntryFulfillmentSetParameterActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEntryFulfillmentSetParameterAction {
		return vs[0].([]CxPageEntryFulfillmentSetParameterAction)[vs[1].(int)]
	}).(CxPageEntryFulfillmentSetParameterActionOutput)
}

type CxPageEventHandler struct {
	// The name of the event to handle.
	Event *string `pulumi:"event"`
	// (Output)
	// The unique identifier of this event handler.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment *CxPageEventHandlerTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxPageEventHandlerInput is an input type that accepts CxPageEventHandlerArgs and CxPageEventHandlerOutput values.
// You can construct a concrete instance of `CxPageEventHandlerInput` via:
//
//	CxPageEventHandlerArgs{...}
type CxPageEventHandlerInput interface {
	pulumi.Input

	ToCxPageEventHandlerOutput() CxPageEventHandlerOutput
	ToCxPageEventHandlerOutputWithContext(context.Context) CxPageEventHandlerOutput
}

type CxPageEventHandlerArgs struct {
	// The name of the event to handle.
	Event pulumi.StringPtrInput `pulumi:"event"`
	// (Output)
	// The unique identifier of this event handler.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment CxPageEventHandlerTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxPageEventHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandler)(nil)).Elem()
}

func (i CxPageEventHandlerArgs) ToCxPageEventHandlerOutput() CxPageEventHandlerOutput {
	return i.ToCxPageEventHandlerOutputWithContext(context.Background())
}

func (i CxPageEventHandlerArgs) ToCxPageEventHandlerOutputWithContext(ctx context.Context) CxPageEventHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerOutput)
}

// CxPageEventHandlerArrayInput is an input type that accepts CxPageEventHandlerArray and CxPageEventHandlerArrayOutput values.
// You can construct a concrete instance of `CxPageEventHandlerArrayInput` via:
//
//	CxPageEventHandlerArray{ CxPageEventHandlerArgs{...} }
type CxPageEventHandlerArrayInput interface {
	pulumi.Input

	ToCxPageEventHandlerArrayOutput() CxPageEventHandlerArrayOutput
	ToCxPageEventHandlerArrayOutputWithContext(context.Context) CxPageEventHandlerArrayOutput
}

type CxPageEventHandlerArray []CxPageEventHandlerInput

func (CxPageEventHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandler)(nil)).Elem()
}

func (i CxPageEventHandlerArray) ToCxPageEventHandlerArrayOutput() CxPageEventHandlerArrayOutput {
	return i.ToCxPageEventHandlerArrayOutputWithContext(context.Background())
}

func (i CxPageEventHandlerArray) ToCxPageEventHandlerArrayOutputWithContext(ctx context.Context) CxPageEventHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerArrayOutput)
}

type CxPageEventHandlerOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandler)(nil)).Elem()
}

func (o CxPageEventHandlerOutput) ToCxPageEventHandlerOutput() CxPageEventHandlerOutput {
	return o
}

func (o CxPageEventHandlerOutput) ToCxPageEventHandlerOutputWithContext(ctx context.Context) CxPageEventHandlerOutput {
	return o
}

// The name of the event to handle.
func (o CxPageEventHandlerOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *string { return v.Event }).(pulumi.StringPtrOutput)
}

// (Output)
// The unique identifier of this event handler.
func (o CxPageEventHandlerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxPageEventHandlerOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxPageEventHandlerOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
// Structure is documented below.
func (o CxPageEventHandlerOutput) TriggerFulfillment() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *CxPageEventHandlerTriggerFulfillment { return v.TriggerFulfillment }).(CxPageEventHandlerTriggerFulfillmentPtrOutput)
}

type CxPageEventHandlerArrayOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandler)(nil)).Elem()
}

func (o CxPageEventHandlerArrayOutput) ToCxPageEventHandlerArrayOutput() CxPageEventHandlerArrayOutput {
	return o
}

func (o CxPageEventHandlerArrayOutput) ToCxPageEventHandlerArrayOutputWithContext(ctx context.Context) CxPageEventHandlerArrayOutput {
	return o
}

func (o CxPageEventHandlerArrayOutput) Index(i pulumi.IntInput) CxPageEventHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEventHandler {
		return vs[0].([]CxPageEventHandler)[vs[1].(int)]
	}).(CxPageEventHandlerOutput)
}

type CxPageEventHandlerTriggerFulfillment struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases []CxPageEventHandlerTriggerFulfillmentConditionalCase `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageEventHandlerTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions []CxPageEventHandlerTriggerFulfillmentSetParameterAction `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageEventHandlerTriggerFulfillmentInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentArgs and CxPageEventHandlerTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentArgs{...}
type CxPageEventHandlerTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentOutput() CxPageEventHandlerTriggerFulfillmentOutput
	ToCxPageEventHandlerTriggerFulfillmentOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentOutput
}

type CxPageEventHandlerTriggerFulfillmentArgs struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayInput `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageEventHandlerTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayInput `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageEventHandlerTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentArgs) ToCxPageEventHandlerTriggerFulfillmentOutput() CxPageEventHandlerTriggerFulfillmentOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentArgs) ToCxPageEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentArgs) ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentArgs) ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentOutput).ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentArgs, CxPageEventHandlerTriggerFulfillmentPtr and CxPageEventHandlerTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentPtrType CxPageEventHandlerTriggerFulfillmentArgs

func CxPageEventHandlerTriggerFulfillmentPtr(v *CxPageEventHandlerTriggerFulfillmentArgs) CxPageEventHandlerTriggerFulfillmentPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentPtrType) ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentPtrType) ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentOutput) ToCxPageEventHandlerTriggerFulfillmentOutput() CxPageEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentOutput) ToCxPageEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentOutput) ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentOutput) ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillment) *CxPageEventHandlerTriggerFulfillment {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentPtrOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentOutput) ConditionalCases() CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) []CxPageEventHandlerTriggerFulfillmentConditionalCase {
		return v.ConditionalCases
	}).(CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentOutput) Messages() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) []CxPageEventHandlerTriggerFulfillmentMessage {
		return v.Messages
	}).(CxPageEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageEventHandlerTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentOutput) SetParameterActions() CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) []CxPageEventHandlerTriggerFulfillmentSetParameterAction {
		return v.SetParameterActions
	}).(CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageEventHandlerTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageEventHandlerTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) CxPageEventHandlerTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillment
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) ConditionalCases() CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) []CxPageEventHandlerTriggerFulfillmentConditionalCase {
		if v == nil {
			return nil
		}
		return v.ConditionalCases
	}).(CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) Messages() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) []CxPageEventHandlerTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) SetParameterActions() CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) []CxPageEventHandlerTriggerFulfillmentSetParameterAction {
		if v == nil {
			return nil
		}
		return v.SetParameterActions
	}).(CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentConditionalCase struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases *string `pulumi:"cases"`
}

// CxPageEventHandlerTriggerFulfillmentConditionalCaseInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs and CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentConditionalCaseInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs{...}
type CxPageEventHandlerTriggerFulfillmentConditionalCaseInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentConditionalCaseOutput() CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput
	ToCxPageEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput
}

type CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases pulumi.StringPtrInput `pulumi:"cases"`
}

func (CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs) ToCxPageEventHandlerTriggerFulfillmentConditionalCaseOutput() CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs) ToCxPageEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput)
}

// CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentConditionalCaseArray and CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentConditionalCaseArray{ CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs{...} }
type CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput
	ToCxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput
}

type CxPageEventHandlerTriggerFulfillmentConditionalCaseArray []CxPageEventHandlerTriggerFulfillmentConditionalCaseInput

func (CxPageEventHandlerTriggerFulfillmentConditionalCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentConditionalCaseArray) ToCxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentConditionalCaseArray) ToCxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

type CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput) ToCxPageEventHandlerTriggerFulfillmentConditionalCaseOutput() CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput) ToCxPageEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return o
}

// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
func (o CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput) Cases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentConditionalCase) *string { return v.Cases }).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ToCxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ToCxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) Index(i pulumi.IntInput) CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEventHandlerTriggerFulfillmentConditionalCase {
		return vs[0].([]CxPageEventHandlerTriggerFulfillmentConditionalCase)[vs[1].(int)]
	}).(CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessage struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel *string `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess *CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff *CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText *CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload *string `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio *CxPageEventHandlerTriggerFulfillmentMessagePlayAudio `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall *CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text *CxPageEventHandlerTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxPageEventHandlerTriggerFulfillmentMessageInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageArgs and CxPageEventHandlerTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageOutput() CxPageEventHandlerTriggerFulfillmentMessageOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageArgs struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageEventHandlerTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageArgs) ToCxPageEventHandlerTriggerFulfillmentMessageOutput() CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageArgs) ToCxPageEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageOutput)
}

// CxPageEventHandlerTriggerFulfillmentMessageArrayInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageArray and CxPageEventHandlerTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageArrayInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageArray{ CxPageEventHandlerTriggerFulfillmentMessageArgs{...} }
type CxPageEventHandlerTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageArrayOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageArray []CxPageEventHandlerTriggerFulfillmentMessageInput

func (CxPageEventHandlerTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageArray) ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageArray) ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageArrayOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutput() CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
//   - In a webhook response when you determine that you handled the customer issue.
//     Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) ConversationSuccess() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess {
		return v.ConversationSuccess
	}).(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Indicates that the conversation should be handed off to a live agent.
// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
//   - In a webhook response when you determine that the customer issue can only be handled by a human.
//     Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) LiveAgentHandoff() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		return v.LiveAgentHandoff
	}).(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) OutputAudioText() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText {
		return v.OutputAudioText
	}).(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// A custom, platform-specific payload.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// Specifies an audio clip to be played by the client as part of the response.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) PlayAudio() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *CxPageEventHandlerTriggerFulfillmentMessagePlayAudio {
		return v.PlayAudio
	}).(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) TelephonyTransferCall() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		return v.TelephonyTransferCall
	}).(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// The text response message.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) Text() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *CxPageEventHandlerTriggerFulfillmentMessageText {
		return v.Text
	}).(CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEventHandlerTriggerFulfillmentMessage {
		return vs[0].([]CxPageEventHandlerTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxPageEventHandlerTriggerFulfillmentMessageOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs and CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput).ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs, CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtr and CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs

func CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtr(v *CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess) *CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess) CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs and CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput).ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs, CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtr and CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs

func CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtr(v *CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml *string `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text *string `pulumi:"text"`
}

// CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs and CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml pulumi.StringPtrInput `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput).ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs, CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtr and CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs

func CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtr(v *CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText) *CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText) *string { return v.Ssml }).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText) CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessagePlayAudio struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri string `pulumi:"audioUri"`
}

// CxPageEventHandlerTriggerFulfillmentMessagePlayAudioInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs and CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessagePlayAudioInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessagePlayAudioInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput
	ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput
}

type CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri pulumi.StringInput `pulumi:"audioUri"`
}

func (CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput).ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs, CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtr and CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrType CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs

func CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtr(v *CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillmentMessagePlayAudio) *CxPageEventHandlerTriggerFulfillmentMessagePlayAudio {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessagePlayAudio) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput) AudioUri() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessagePlayAudio) string { return v.AudioUri }).(pulumi.StringOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessagePlayAudio) CxPageEventHandlerTriggerFulfillmentMessagePlayAudio {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillmentMessagePlayAudio
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessagePlayAudio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) AudioUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessagePlayAudio) *string {
		if v == nil {
			return nil
		}
		return &v.AudioUri
	}).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs and CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput).ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs, CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtr and CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs

func CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtr(v *CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) *CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageEventHandlerTriggerFulfillmentMessageTextInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageTextArgs and CxPageEventHandlerTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageTextInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageTextArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageTextOutput() CxPageEventHandlerTriggerFulfillmentMessageTextOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTextOutput() CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTextOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTextOutput).ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageTextArgs, CxPageEventHandlerTriggerFulfillmentMessageTextPtr and CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentMessageTextPtrType CxPageEventHandlerTriggerFulfillmentMessageTextArgs

func CxPageEventHandlerTriggerFulfillmentMessageTextPtr(v *CxPageEventHandlerTriggerFulfillmentMessageTextArgs) CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextOutput() CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillmentMessageText) *CxPageEventHandlerTriggerFulfillmentMessageText {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageText) CxPageEventHandlerTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillmentMessageText
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentMessageTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageEventHandlerTriggerFulfillmentSetParameterAction struct {
	// Display name of the parameter.
	Parameter *string `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value *string `pulumi:"value"`
}

// CxPageEventHandlerTriggerFulfillmentSetParameterActionInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs and CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentSetParameterActionInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs{...}
type CxPageEventHandlerTriggerFulfillmentSetParameterActionInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentSetParameterActionOutput() CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput
	ToCxPageEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput
}

type CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs struct {
	// Display name of the parameter.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs) ToCxPageEventHandlerTriggerFulfillmentSetParameterActionOutput() CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs) ToCxPageEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput)
}

// CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentSetParameterActionArray and CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentSetParameterActionArray{ CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs{...} }
type CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput
	ToCxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput
}

type CxPageEventHandlerTriggerFulfillmentSetParameterActionArray []CxPageEventHandlerTriggerFulfillmentSetParameterActionInput

func (CxPageEventHandlerTriggerFulfillmentSetParameterActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentSetParameterActionArray) ToCxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentSetParameterActionArray) ToCxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

type CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput) ToCxPageEventHandlerTriggerFulfillmentSetParameterActionOutput() CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput) ToCxPageEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return o
}

// Display name of the parameter.
func (o CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentSetParameterAction) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The new JSON-encoded value of the parameter. A null value clears the parameter.
func (o CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentSetParameterAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ToCxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ToCxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) Index(i pulumi.IntInput) CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEventHandlerTriggerFulfillmentSetParameterAction {
		return vs[0].([]CxPageEventHandlerTriggerFulfillmentSetParameterAction)[vs[1].(int)]
	}).(CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput)
}

type CxPageForm struct {
	// Parameters to collect from the user.
	// Structure is documented below.
	Parameters []CxPageFormParameter `pulumi:"parameters"`
}

// CxPageFormInput is an input type that accepts CxPageFormArgs and CxPageFormOutput values.
// You can construct a concrete instance of `CxPageFormInput` via:
//
//	CxPageFormArgs{...}
type CxPageFormInput interface {
	pulumi.Input

	ToCxPageFormOutput() CxPageFormOutput
	ToCxPageFormOutputWithContext(context.Context) CxPageFormOutput
}

type CxPageFormArgs struct {
	// Parameters to collect from the user.
	// Structure is documented below.
	Parameters CxPageFormParameterArrayInput `pulumi:"parameters"`
}

func (CxPageFormArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageForm)(nil)).Elem()
}

func (i CxPageFormArgs) ToCxPageFormOutput() CxPageFormOutput {
	return i.ToCxPageFormOutputWithContext(context.Background())
}

func (i CxPageFormArgs) ToCxPageFormOutputWithContext(ctx context.Context) CxPageFormOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormOutput)
}

func (i CxPageFormArgs) ToCxPageFormPtrOutput() CxPageFormPtrOutput {
	return i.ToCxPageFormPtrOutputWithContext(context.Background())
}

func (i CxPageFormArgs) ToCxPageFormPtrOutputWithContext(ctx context.Context) CxPageFormPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormOutput).ToCxPageFormPtrOutputWithContext(ctx)
}

// CxPageFormPtrInput is an input type that accepts CxPageFormArgs, CxPageFormPtr and CxPageFormPtrOutput values.
// You can construct a concrete instance of `CxPageFormPtrInput` via:
//
//	        CxPageFormArgs{...}
//
//	or:
//
//	        nil
type CxPageFormPtrInput interface {
	pulumi.Input

	ToCxPageFormPtrOutput() CxPageFormPtrOutput
	ToCxPageFormPtrOutputWithContext(context.Context) CxPageFormPtrOutput
}

type cxPageFormPtrType CxPageFormArgs

func CxPageFormPtr(v *CxPageFormArgs) CxPageFormPtrInput {
	return (*cxPageFormPtrType)(v)
}

func (*cxPageFormPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageForm)(nil)).Elem()
}

func (i *cxPageFormPtrType) ToCxPageFormPtrOutput() CxPageFormPtrOutput {
	return i.ToCxPageFormPtrOutputWithContext(context.Background())
}

func (i *cxPageFormPtrType) ToCxPageFormPtrOutputWithContext(ctx context.Context) CxPageFormPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormPtrOutput)
}

type CxPageFormOutput struct{ *pulumi.OutputState }

func (CxPageFormOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageForm)(nil)).Elem()
}

func (o CxPageFormOutput) ToCxPageFormOutput() CxPageFormOutput {
	return o
}

func (o CxPageFormOutput) ToCxPageFormOutputWithContext(ctx context.Context) CxPageFormOutput {
	return o
}

func (o CxPageFormOutput) ToCxPageFormPtrOutput() CxPageFormPtrOutput {
	return o.ToCxPageFormPtrOutputWithContext(context.Background())
}

func (o CxPageFormOutput) ToCxPageFormPtrOutputWithContext(ctx context.Context) CxPageFormPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageForm) *CxPageForm {
		return &v
	}).(CxPageFormPtrOutput)
}

// Parameters to collect from the user.
// Structure is documented below.
func (o CxPageFormOutput) Parameters() CxPageFormParameterArrayOutput {
	return o.ApplyT(func(v CxPageForm) []CxPageFormParameter { return v.Parameters }).(CxPageFormParameterArrayOutput)
}

type CxPageFormPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageForm)(nil)).Elem()
}

func (o CxPageFormPtrOutput) ToCxPageFormPtrOutput() CxPageFormPtrOutput {
	return o
}

func (o CxPageFormPtrOutput) ToCxPageFormPtrOutputWithContext(ctx context.Context) CxPageFormPtrOutput {
	return o
}

func (o CxPageFormPtrOutput) Elem() CxPageFormOutput {
	return o.ApplyT(func(v *CxPageForm) CxPageForm {
		if v != nil {
			return *v
		}
		var ret CxPageForm
		return ret
	}).(CxPageFormOutput)
}

// Parameters to collect from the user.
// Structure is documented below.
func (o CxPageFormPtrOutput) Parameters() CxPageFormParameterArrayOutput {
	return o.ApplyT(func(v *CxPageForm) []CxPageFormParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(CxPageFormParameterArrayOutput)
}

type CxPageFormParameter struct {
	// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
	// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
	// Structure is documented below.
	AdvancedSettings *CxPageFormParameterAdvancedSettings `pulumi:"advancedSettings"`
	// The default value of an optional parameter. If the parameter is required, the default value will be ignored.
	DefaultValue *string `pulumi:"defaultValue"`
	// The human-readable name of the parameter, unique within the form.
	DisplayName *string `pulumi:"displayName"`
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	EntityType *string `pulumi:"entityType"`
	// Defines fill behavior for the parameter.
	// Structure is documented below.
	FillBehavior *CxPageFormParameterFillBehavior `pulumi:"fillBehavior"`
	// Indicates whether the parameter represents a list of values.
	IsList *bool `pulumi:"isList"`
	// Indicates whether the parameter content should be redacted in log.
	// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	Redact *bool `pulumi:"redact"`
	// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
	// Required parameters must be filled before form filling concludes.
	Required *bool `pulumi:"required"`
}

// CxPageFormParameterInput is an input type that accepts CxPageFormParameterArgs and CxPageFormParameterOutput values.
// You can construct a concrete instance of `CxPageFormParameterInput` via:
//
//	CxPageFormParameterArgs{...}
type CxPageFormParameterInput interface {
	pulumi.Input

	ToCxPageFormParameterOutput() CxPageFormParameterOutput
	ToCxPageFormParameterOutputWithContext(context.Context) CxPageFormParameterOutput
}

type CxPageFormParameterArgs struct {
	// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
	// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
	// Structure is documented below.
	AdvancedSettings CxPageFormParameterAdvancedSettingsPtrInput `pulumi:"advancedSettings"`
	// The default value of an optional parameter. If the parameter is required, the default value will be ignored.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The human-readable name of the parameter, unique within the form.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	EntityType pulumi.StringPtrInput `pulumi:"entityType"`
	// Defines fill behavior for the parameter.
	// Structure is documented below.
	FillBehavior CxPageFormParameterFillBehaviorPtrInput `pulumi:"fillBehavior"`
	// Indicates whether the parameter represents a list of values.
	IsList pulumi.BoolPtrInput `pulumi:"isList"`
	// Indicates whether the parameter content should be redacted in log.
	// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	Redact pulumi.BoolPtrInput `pulumi:"redact"`
	// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
	// Required parameters must be filled before form filling concludes.
	Required pulumi.BoolPtrInput `pulumi:"required"`
}

func (CxPageFormParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameter)(nil)).Elem()
}

func (i CxPageFormParameterArgs) ToCxPageFormParameterOutput() CxPageFormParameterOutput {
	return i.ToCxPageFormParameterOutputWithContext(context.Background())
}

func (i CxPageFormParameterArgs) ToCxPageFormParameterOutputWithContext(ctx context.Context) CxPageFormParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterOutput)
}

// CxPageFormParameterArrayInput is an input type that accepts CxPageFormParameterArray and CxPageFormParameterArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterArrayInput` via:
//
//	CxPageFormParameterArray{ CxPageFormParameterArgs{...} }
type CxPageFormParameterArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterArrayOutput() CxPageFormParameterArrayOutput
	ToCxPageFormParameterArrayOutputWithContext(context.Context) CxPageFormParameterArrayOutput
}

type CxPageFormParameterArray []CxPageFormParameterInput

func (CxPageFormParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameter)(nil)).Elem()
}

func (i CxPageFormParameterArray) ToCxPageFormParameterArrayOutput() CxPageFormParameterArrayOutput {
	return i.ToCxPageFormParameterArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterArray) ToCxPageFormParameterArrayOutputWithContext(ctx context.Context) CxPageFormParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterArrayOutput)
}

type CxPageFormParameterOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameter)(nil)).Elem()
}

func (o CxPageFormParameterOutput) ToCxPageFormParameterOutput() CxPageFormParameterOutput {
	return o
}

func (o CxPageFormParameterOutput) ToCxPageFormParameterOutputWithContext(ctx context.Context) CxPageFormParameterOutput {
	return o
}

// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
// Structure is documented below.
func (o CxPageFormParameterOutput) AdvancedSettings() CxPageFormParameterAdvancedSettingsPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *CxPageFormParameterAdvancedSettings { return v.AdvancedSettings }).(CxPageFormParameterAdvancedSettingsPtrOutput)
}

// The default value of an optional parameter. If the parameter is required, the default value will be ignored.
func (o CxPageFormParameterOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The human-readable name of the parameter, unique within the form.
func (o CxPageFormParameterOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The entity type of the parameter.
// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
func (o CxPageFormParameterOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// Defines fill behavior for the parameter.
// Structure is documented below.
func (o CxPageFormParameterOutput) FillBehavior() CxPageFormParameterFillBehaviorPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *CxPageFormParameterFillBehavior { return v.FillBehavior }).(CxPageFormParameterFillBehaviorPtrOutput)
}

// Indicates whether the parameter represents a list of values.
func (o CxPageFormParameterOutput) IsList() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *bool { return v.IsList }).(pulumi.BoolPtrOutput)
}

// Indicates whether the parameter content should be redacted in log.
// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
func (o CxPageFormParameterOutput) Redact() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *bool { return v.Redact }).(pulumi.BoolPtrOutput)
}

// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
// Required parameters must be filled before form filling concludes.
func (o CxPageFormParameterOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

type CxPageFormParameterArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameter)(nil)).Elem()
}

func (o CxPageFormParameterArrayOutput) ToCxPageFormParameterArrayOutput() CxPageFormParameterArrayOutput {
	return o
}

func (o CxPageFormParameterArrayOutput) ToCxPageFormParameterArrayOutputWithContext(ctx context.Context) CxPageFormParameterArrayOutput {
	return o
}

func (o CxPageFormParameterArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameter {
		return vs[0].([]CxPageFormParameter)[vs[1].(int)]
	}).(CxPageFormParameterOutput)
}

type CxPageFormParameterAdvancedSettings struct {
	// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
	// * Agent level
	// * Flow level
	// * Page level
	// * Parameter level
	//   Structure is documented below.
	DtmfSettings *CxPageFormParameterAdvancedSettingsDtmfSettings `pulumi:"dtmfSettings"`
}

// CxPageFormParameterAdvancedSettingsInput is an input type that accepts CxPageFormParameterAdvancedSettingsArgs and CxPageFormParameterAdvancedSettingsOutput values.
// You can construct a concrete instance of `CxPageFormParameterAdvancedSettingsInput` via:
//
//	CxPageFormParameterAdvancedSettingsArgs{...}
type CxPageFormParameterAdvancedSettingsInput interface {
	pulumi.Input

	ToCxPageFormParameterAdvancedSettingsOutput() CxPageFormParameterAdvancedSettingsOutput
	ToCxPageFormParameterAdvancedSettingsOutputWithContext(context.Context) CxPageFormParameterAdvancedSettingsOutput
}

type CxPageFormParameterAdvancedSettingsArgs struct {
	// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
	// * Agent level
	// * Flow level
	// * Page level
	// * Parameter level
	//   Structure is documented below.
	DtmfSettings CxPageFormParameterAdvancedSettingsDtmfSettingsPtrInput `pulumi:"dtmfSettings"`
}

func (CxPageFormParameterAdvancedSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterAdvancedSettings)(nil)).Elem()
}

func (i CxPageFormParameterAdvancedSettingsArgs) ToCxPageFormParameterAdvancedSettingsOutput() CxPageFormParameterAdvancedSettingsOutput {
	return i.ToCxPageFormParameterAdvancedSettingsOutputWithContext(context.Background())
}

func (i CxPageFormParameterAdvancedSettingsArgs) ToCxPageFormParameterAdvancedSettingsOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterAdvancedSettingsOutput)
}

func (i CxPageFormParameterAdvancedSettingsArgs) ToCxPageFormParameterAdvancedSettingsPtrOutput() CxPageFormParameterAdvancedSettingsPtrOutput {
	return i.ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterAdvancedSettingsArgs) ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterAdvancedSettingsOutput).ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(ctx)
}

// CxPageFormParameterAdvancedSettingsPtrInput is an input type that accepts CxPageFormParameterAdvancedSettingsArgs, CxPageFormParameterAdvancedSettingsPtr and CxPageFormParameterAdvancedSettingsPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterAdvancedSettingsPtrInput` via:
//
//	        CxPageFormParameterAdvancedSettingsArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterAdvancedSettingsPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterAdvancedSettingsPtrOutput() CxPageFormParameterAdvancedSettingsPtrOutput
	ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(context.Context) CxPageFormParameterAdvancedSettingsPtrOutput
}

type cxPageFormParameterAdvancedSettingsPtrType CxPageFormParameterAdvancedSettingsArgs

func CxPageFormParameterAdvancedSettingsPtr(v *CxPageFormParameterAdvancedSettingsArgs) CxPageFormParameterAdvancedSettingsPtrInput {
	return (*cxPageFormParameterAdvancedSettingsPtrType)(v)
}

func (*cxPageFormParameterAdvancedSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterAdvancedSettings)(nil)).Elem()
}

func (i *cxPageFormParameterAdvancedSettingsPtrType) ToCxPageFormParameterAdvancedSettingsPtrOutput() CxPageFormParameterAdvancedSettingsPtrOutput {
	return i.ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterAdvancedSettingsPtrType) ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterAdvancedSettingsPtrOutput)
}

type CxPageFormParameterAdvancedSettingsOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterAdvancedSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterAdvancedSettings)(nil)).Elem()
}

func (o CxPageFormParameterAdvancedSettingsOutput) ToCxPageFormParameterAdvancedSettingsOutput() CxPageFormParameterAdvancedSettingsOutput {
	return o
}

func (o CxPageFormParameterAdvancedSettingsOutput) ToCxPageFormParameterAdvancedSettingsOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsOutput {
	return o
}

func (o CxPageFormParameterAdvancedSettingsOutput) ToCxPageFormParameterAdvancedSettingsPtrOutput() CxPageFormParameterAdvancedSettingsPtrOutput {
	return o.ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterAdvancedSettingsOutput) ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterAdvancedSettings) *CxPageFormParameterAdvancedSettings {
		return &v
	}).(CxPageFormParameterAdvancedSettingsPtrOutput)
}

// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
//   - Agent level
//   - Flow level
//   - Page level
//   - Parameter level
//     Structure is documented below.
func (o CxPageFormParameterAdvancedSettingsOutput) DtmfSettings() CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterAdvancedSettings) *CxPageFormParameterAdvancedSettingsDtmfSettings {
		return v.DtmfSettings
	}).(CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxPageFormParameterAdvancedSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterAdvancedSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterAdvancedSettings)(nil)).Elem()
}

func (o CxPageFormParameterAdvancedSettingsPtrOutput) ToCxPageFormParameterAdvancedSettingsPtrOutput() CxPageFormParameterAdvancedSettingsPtrOutput {
	return o
}

func (o CxPageFormParameterAdvancedSettingsPtrOutput) ToCxPageFormParameterAdvancedSettingsPtrOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsPtrOutput {
	return o
}

func (o CxPageFormParameterAdvancedSettingsPtrOutput) Elem() CxPageFormParameterAdvancedSettingsOutput {
	return o.ApplyT(func(v *CxPageFormParameterAdvancedSettings) CxPageFormParameterAdvancedSettings {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterAdvancedSettings
		return ret
	}).(CxPageFormParameterAdvancedSettingsOutput)
}

// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
//   - Agent level
//   - Flow level
//   - Page level
//   - Parameter level
//     Structure is documented below.
func (o CxPageFormParameterAdvancedSettingsPtrOutput) DtmfSettings() CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterAdvancedSettings) *CxPageFormParameterAdvancedSettingsDtmfSettings {
		if v == nil {
			return nil
		}
		return v.DtmfSettings
	}).(CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxPageFormParameterAdvancedSettingsDtmfSettings struct {
	// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
	Enabled *bool `pulumi:"enabled"`
	// The digit that terminates a DTMF digit sequence.
	FinishDigit *string `pulumi:"finishDigit"`
	// Max length of DTMF digits.
	MaxDigits *int `pulumi:"maxDigits"`
}

// CxPageFormParameterAdvancedSettingsDtmfSettingsInput is an input type that accepts CxPageFormParameterAdvancedSettingsDtmfSettingsArgs and CxPageFormParameterAdvancedSettingsDtmfSettingsOutput values.
// You can construct a concrete instance of `CxPageFormParameterAdvancedSettingsDtmfSettingsInput` via:
//
//	CxPageFormParameterAdvancedSettingsDtmfSettingsArgs{...}
type CxPageFormParameterAdvancedSettingsDtmfSettingsInput interface {
	pulumi.Input

	ToCxPageFormParameterAdvancedSettingsDtmfSettingsOutput() CxPageFormParameterAdvancedSettingsDtmfSettingsOutput
	ToCxPageFormParameterAdvancedSettingsDtmfSettingsOutputWithContext(context.Context) CxPageFormParameterAdvancedSettingsDtmfSettingsOutput
}

type CxPageFormParameterAdvancedSettingsDtmfSettingsArgs struct {
	// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The digit that terminates a DTMF digit sequence.
	FinishDigit pulumi.StringPtrInput `pulumi:"finishDigit"`
	// Max length of DTMF digits.
	MaxDigits pulumi.IntPtrInput `pulumi:"maxDigits"`
}

func (CxPageFormParameterAdvancedSettingsDtmfSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (i CxPageFormParameterAdvancedSettingsDtmfSettingsArgs) ToCxPageFormParameterAdvancedSettingsDtmfSettingsOutput() CxPageFormParameterAdvancedSettingsDtmfSettingsOutput {
	return i.ToCxPageFormParameterAdvancedSettingsDtmfSettingsOutputWithContext(context.Background())
}

func (i CxPageFormParameterAdvancedSettingsDtmfSettingsArgs) ToCxPageFormParameterAdvancedSettingsDtmfSettingsOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsDtmfSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterAdvancedSettingsDtmfSettingsOutput)
}

func (i CxPageFormParameterAdvancedSettingsDtmfSettingsArgs) ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput() CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return i.ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterAdvancedSettingsDtmfSettingsArgs) ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterAdvancedSettingsDtmfSettingsOutput).ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx)
}

// CxPageFormParameterAdvancedSettingsDtmfSettingsPtrInput is an input type that accepts CxPageFormParameterAdvancedSettingsDtmfSettingsArgs, CxPageFormParameterAdvancedSettingsDtmfSettingsPtr and CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterAdvancedSettingsDtmfSettingsPtrInput` via:
//
//	        CxPageFormParameterAdvancedSettingsDtmfSettingsArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterAdvancedSettingsDtmfSettingsPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput() CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput
	ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Context) CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput
}

type cxPageFormParameterAdvancedSettingsDtmfSettingsPtrType CxPageFormParameterAdvancedSettingsDtmfSettingsArgs

func CxPageFormParameterAdvancedSettingsDtmfSettingsPtr(v *CxPageFormParameterAdvancedSettingsDtmfSettingsArgs) CxPageFormParameterAdvancedSettingsDtmfSettingsPtrInput {
	return (*cxPageFormParameterAdvancedSettingsDtmfSettingsPtrType)(v)
}

func (*cxPageFormParameterAdvancedSettingsDtmfSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (i *cxPageFormParameterAdvancedSettingsDtmfSettingsPtrType) ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput() CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return i.ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterAdvancedSettingsDtmfSettingsPtrType) ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput)
}

type CxPageFormParameterAdvancedSettingsDtmfSettingsOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterAdvancedSettingsDtmfSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (o CxPageFormParameterAdvancedSettingsDtmfSettingsOutput) ToCxPageFormParameterAdvancedSettingsDtmfSettingsOutput() CxPageFormParameterAdvancedSettingsDtmfSettingsOutput {
	return o
}

func (o CxPageFormParameterAdvancedSettingsDtmfSettingsOutput) ToCxPageFormParameterAdvancedSettingsDtmfSettingsOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsDtmfSettingsOutput {
	return o
}

func (o CxPageFormParameterAdvancedSettingsDtmfSettingsOutput) ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput() CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterAdvancedSettingsDtmfSettingsOutput) ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterAdvancedSettingsDtmfSettings) *CxPageFormParameterAdvancedSettingsDtmfSettings {
		return &v
	}).(CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput)
}

// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
func (o CxPageFormParameterAdvancedSettingsDtmfSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterAdvancedSettingsDtmfSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The digit that terminates a DTMF digit sequence.
func (o CxPageFormParameterAdvancedSettingsDtmfSettingsOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterAdvancedSettingsDtmfSettings) *string { return v.FinishDigit }).(pulumi.StringPtrOutput)
}

// Max length of DTMF digits.
func (o CxPageFormParameterAdvancedSettingsDtmfSettingsOutput) MaxDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterAdvancedSettingsDtmfSettings) *int { return v.MaxDigits }).(pulumi.IntPtrOutput)
}

type CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterAdvancedSettingsDtmfSettings)(nil)).Elem()
}

func (o CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput) ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput() CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return o
}

func (o CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput) ToCxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutputWithContext(ctx context.Context) CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput {
	return o
}

func (o CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput) Elem() CxPageFormParameterAdvancedSettingsDtmfSettingsOutput {
	return o.ApplyT(func(v *CxPageFormParameterAdvancedSettingsDtmfSettings) CxPageFormParameterAdvancedSettingsDtmfSettings {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterAdvancedSettingsDtmfSettings
		return ret
	}).(CxPageFormParameterAdvancedSettingsDtmfSettingsOutput)
}

// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
func (o CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterAdvancedSettingsDtmfSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The digit that terminates a DTMF digit sequence.
func (o CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterAdvancedSettingsDtmfSettings) *string {
		if v == nil {
			return nil
		}
		return v.FinishDigit
	}).(pulumi.StringPtrOutput)
}

// Max length of DTMF digits.
func (o CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput) MaxDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterAdvancedSettingsDtmfSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxDigits
	}).(pulumi.IntPtrOutput)
}

type CxPageFormParameterFillBehavior struct {
	// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
	// Structure is documented below.
	InitialPromptFulfillment *CxPageFormParameterFillBehaviorInitialPromptFulfillment `pulumi:"initialPromptFulfillment"`
	// The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
	// * sys.no-match-<N>, where N can be from 1 to 6
	// * sys.no-match-default
	// * sys.no-input-<N>, where N can be from 1 to 6
	// * sys.no-input-default
	// * sys.invalid-parameter
	//   [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
	//   If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
	//   A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
	//   A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
	//   If the event handler for the corresponding event can't be found on the parameter, initialPromptFulfillment will be re-prompted.
	//   Structure is documented below.
	RepromptEventHandlers []CxPageFormParameterFillBehaviorRepromptEventHandler `pulumi:"repromptEventHandlers"`
}

// CxPageFormParameterFillBehaviorInput is an input type that accepts CxPageFormParameterFillBehaviorArgs and CxPageFormParameterFillBehaviorOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInput` via:
//
//	CxPageFormParameterFillBehaviorArgs{...}
type CxPageFormParameterFillBehaviorInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorOutput() CxPageFormParameterFillBehaviorOutput
	ToCxPageFormParameterFillBehaviorOutputWithContext(context.Context) CxPageFormParameterFillBehaviorOutput
}

type CxPageFormParameterFillBehaviorArgs struct {
	// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
	// Structure is documented below.
	InitialPromptFulfillment CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput `pulumi:"initialPromptFulfillment"`
	// The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
	// * sys.no-match-<N>, where N can be from 1 to 6
	// * sys.no-match-default
	// * sys.no-input-<N>, where N can be from 1 to 6
	// * sys.no-input-default
	// * sys.invalid-parameter
	//   [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
	//   If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
	//   A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
	//   A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
	//   If the event handler for the corresponding event can't be found on the parameter, initialPromptFulfillment will be re-prompted.
	//   Structure is documented below.
	RepromptEventHandlers CxPageFormParameterFillBehaviorRepromptEventHandlerArrayInput `pulumi:"repromptEventHandlers"`
}

func (CxPageFormParameterFillBehaviorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehavior)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorArgs) ToCxPageFormParameterFillBehaviorOutput() CxPageFormParameterFillBehaviorOutput {
	return i.ToCxPageFormParameterFillBehaviorOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorArgs) ToCxPageFormParameterFillBehaviorOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorOutput)
}

func (i CxPageFormParameterFillBehaviorArgs) ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorArgs) ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorOutput).ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorPtrInput is an input type that accepts CxPageFormParameterFillBehaviorArgs, CxPageFormParameterFillBehaviorPtr and CxPageFormParameterFillBehaviorPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput
	ToCxPageFormParameterFillBehaviorPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorPtrOutput
}

type cxPageFormParameterFillBehaviorPtrType CxPageFormParameterFillBehaviorArgs

func CxPageFormParameterFillBehaviorPtr(v *CxPageFormParameterFillBehaviorArgs) CxPageFormParameterFillBehaviorPtrInput {
	return (*cxPageFormParameterFillBehaviorPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehavior)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorPtrType) ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorPtrType) ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorPtrOutput)
}

type CxPageFormParameterFillBehaviorOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehavior)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorOutput) ToCxPageFormParameterFillBehaviorOutput() CxPageFormParameterFillBehaviorOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorOutput) ToCxPageFormParameterFillBehaviorOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorOutput) ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorOutput) ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehavior) *CxPageFormParameterFillBehavior {
		return &v
	}).(CxPageFormParameterFillBehaviorPtrOutput)
}

// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorOutput) InitialPromptFulfillment() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehavior) *CxPageFormParameterFillBehaviorInitialPromptFulfillment {
		return v.InitialPromptFulfillment
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput)
}

// The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
//   - sys.no-match-<N>, where N can be from 1 to 6
//   - sys.no-match-default
//   - sys.no-input-<N>, where N can be from 1 to 6
//   - sys.no-input-default
//   - sys.invalid-parameter
//     [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
//     If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
//     A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
//     A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
//     If the event handler for the corresponding event can't be found on the parameter, initialPromptFulfillment will be re-prompted.
//     Structure is documented below.
func (o CxPageFormParameterFillBehaviorOutput) RepromptEventHandlers() CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehavior) []CxPageFormParameterFillBehaviorRepromptEventHandler {
		return v.RepromptEventHandlers
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput)
}

type CxPageFormParameterFillBehaviorPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehavior)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorPtrOutput) ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorPtrOutput) ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorPtrOutput) Elem() CxPageFormParameterFillBehaviorOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehavior) CxPageFormParameterFillBehavior {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehavior
		return ret
	}).(CxPageFormParameterFillBehaviorOutput)
}

// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorPtrOutput) InitialPromptFulfillment() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehavior) *CxPageFormParameterFillBehaviorInitialPromptFulfillment {
		if v == nil {
			return nil
		}
		return v.InitialPromptFulfillment
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput)
}

// The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
//   - sys.no-match-<N>, where N can be from 1 to 6
//   - sys.no-match-default
//   - sys.no-input-<N>, where N can be from 1 to 6
//   - sys.no-input-default
//   - sys.invalid-parameter
//     [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
//     If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
//     A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
//     A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
//     If the event handler for the corresponding event can't be found on the parameter, initialPromptFulfillment will be re-prompted.
//     Structure is documented below.
func (o CxPageFormParameterFillBehaviorPtrOutput) RepromptEventHandlers() CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehavior) []CxPageFormParameterFillBehaviorRepromptEventHandler {
		if v == nil {
			return nil
		}
		return v.RepromptEventHandlers
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillment struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases []CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions []CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayInput `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayInput `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillment)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillment)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillment)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillment) *CxPageFormParameterFillBehaviorInitialPromptFulfillment {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ConditionalCases() CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) []CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase {
		return v.ConditionalCases
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) Messages() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) []CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage {
		return v.Messages
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) SetParameterActions() CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) []CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction {
		return v.SetParameterActions
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillment)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) CxPageFormParameterFillBehaviorInitialPromptFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillment
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ConditionalCases() CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) []CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase {
		if v == nil {
			return nil
		}
		return v.ConditionalCases
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) Messages() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) []CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) SetParameterActions() CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) []CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction {
		if v == nil {
			return nil
		}
		return v.SetParameterActions
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases *string `pulumi:"cases"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases pulumi.StringPtrInput `pulumi:"cases"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArray and CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArray{ CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs{...} }
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArray []CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseInput

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArray) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArray) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput {
	return o
}

// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput) Cases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase) *string { return v.Cases }).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase {
		return vs[0].([]CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCase)[vs[1].(int)]
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel *string `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload *string `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText `pulumi:"text"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrInput `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrInput `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrInput `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrInput `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrInput `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray{ CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs{...} }
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray []CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return o
}

// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
//   - In a webhook response when you determine that you handled the customer issue.
//     Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) ConversationSuccess() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess {
		return v.ConversationSuccess
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput)
}

// Indicates that the conversation should be handed off to a live agent.
// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
//   - In a webhook response when you determine that the customer issue can only be handled by a human.
//     Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) LiveAgentHandoff() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff {
		return v.LiveAgentHandoff
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) OutputAudioText() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText {
		return v.OutputAudioText
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput)
}

// A custom, platform-specific payload.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// Specifies an audio clip to be played by the client as part of the response.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) PlayAudio() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio {
		return v.PlayAudio
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput)
}

// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) TelephonyTransferCall() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall {
		return v.TelephonyTransferCall
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// The text response message.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) Text() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText {
		return v.Text
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage {
		return vs[0].([]CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)[vs[1].(int)]
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess) *string {
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccess) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff) *string {
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoff) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml *string `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text *string `pulumi:"text"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml pulumi.StringPtrInput `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText) *string {
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText) *string {
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri string `pulumi:"audioUri"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri pulumi.StringInput `pulumi:"audioUri"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput) AudioUri() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio) string {
		return v.AudioUri
	}).(pulumi.StringOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput) AudioUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudio) *string {
		if v == nil {
			return nil
		}
		return &v.AudioUri
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall) string {
		return v.PhoneNumber
	}).(pulumi.StringOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCall) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction struct {
	// Display name of the parameter.
	Parameter *string `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value *string `pulumi:"value"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs struct {
	// Display name of the parameter.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArray and CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArray{ CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs{...} }
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArray []CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionInput

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArray) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArray) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput {
	return o
}

// Display name of the parameter.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction) *string {
		return v.Parameter
	}).(pulumi.StringPtrOutput)
}

// The new JSON-encoded value of the parameter. A null value clears the parameter.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction) *string {
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction {
		return vs[0].([]CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterAction)[vs[1].(int)]
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandler struct {
	// The name of the event to handle.
	Event *string `pulumi:"event"`
	// (Output)
	// The unique identifier of this event handler.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerArgs struct {
	// The name of the event to handle.
	Event pulumi.StringPtrInput `pulumi:"event"`
	// (Output)
	// The unique identifier of this event handler.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandler)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerOutput)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerArrayInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerArray and CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerArrayInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerArray{ CxPageFormParameterFillBehaviorRepromptEventHandlerArgs{...} }
type CxPageFormParameterFillBehaviorRepromptEventHandlerArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerArray []CxPageFormParameterFillBehaviorRepromptEventHandlerInput

func (CxPageFormParameterFillBehaviorRepromptEventHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorRepromptEventHandler)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerArray) ToCxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerArray) ToCxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandler)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerOutput {
	return o
}

// The name of the event to handle.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandler) *string { return v.Event }).(pulumi.StringPtrOutput)
}

// (Output)
// The unique identifier of this event handler.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandler) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandler) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandler) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerOutput) TriggerFulfillment() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandler) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment {
		return v.TriggerFulfillment
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorRepromptEventHandler)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterFillBehaviorRepromptEventHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameterFillBehaviorRepromptEventHandler {
		return vs[0].([]CxPageFormParameterFillBehaviorRepromptEventHandler)[vs[1].(int)]
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayInput `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayInput `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput)
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput).ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs, CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtr and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput
}

type cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrType CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs

func CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtr(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrInput {
	return (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment {
		return &v
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) ConditionalCases() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase {
		return v.ConditionalCases
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) Messages() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage {
		return v.Messages
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) *bool {
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) SetParameterActions() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction {
		return v.SetParameterActions
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) *string {
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) Elem() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment
		return ret
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) ConditionalCases() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase {
		if v == nil {
			return nil
		}
		return v.ConditionalCases
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) Messages() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) SetParameterActions() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction {
		if v == nil {
			return nil
		}
		return v.SetParameterActions
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases *string `pulumi:"cases"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases pulumi.StringPtrInput `pulumi:"cases"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArray and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArray{ CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs{...} }
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArray []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseInput

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArray) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArray) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return o
}

// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput) Cases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase) *string {
		return v.Cases
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase {
		return vs[0].([]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCase)[vs[1].(int)]
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel *string `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload *string `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArray and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArray{ CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs{...} }
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArray []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageInput

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArray) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArray) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage) *string {
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
//   - In a webhook response when you determine that you handled the customer issue.
//     Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) ConversationSuccess() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess {
		return v.ConversationSuccess
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Indicates that the conversation should be handed off to a live agent.
// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
//   - In a webhook response when you determine that the customer issue can only be handled by a human.
//     Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) LiveAgentHandoff() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		return v.LiveAgentHandoff
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) OutputAudioText() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText {
		return v.OutputAudioText
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// A custom, platform-specific payload.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage) *string {
		return v.Payload
	}).(pulumi.StringPtrOutput)
}

// Specifies an audio clip to be played by the client as part of the response.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) PlayAudio() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio {
		return v.PlayAudio
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) TelephonyTransferCall() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		return v.TelephonyTransferCall
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// The text response message.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput) Text() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText {
		return v.Text
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage {
		return vs[0].([]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput)
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput).ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs, CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtr and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput
}

type cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs

func CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtr(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput {
	return (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess {
		return &v
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess) *string {
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) Elem() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess
		return ret
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccess) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput).ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs, CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtr and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
}

type cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs

func CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtr(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput {
	return (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		return &v
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *string {
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Elem() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff
		return ret
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoff) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml *string `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text *string `pulumi:"text"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml pulumi.StringPtrInput `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput)
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput).ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs, CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtr and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput
}

type cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs

func CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtr(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput {
	return (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText {
		return &v
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText) *string {
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText) *string {
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Elem() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText
		return ret
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri string `pulumi:"audioUri"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri pulumi.StringInput `pulumi:"audioUri"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput)
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput).ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs, CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtr and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput
}

type cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrType CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs

func CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtr(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput {
	return (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio {
		return &v
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput) AudioUri() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio) string {
		return v.AudioUri
	}).(pulumi.StringOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) Elem() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio
		return ret
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput) AudioUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudio) *string {
		if v == nil {
			return nil
		}
		return &v.AudioUri
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput).ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs, CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtr and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
}

type cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs

func CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtr(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput {
	return (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		return &v
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) string {
		return v.PhoneNumber
	}).(pulumi.StringOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) Elem() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall
		return ret
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCall) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput)
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput).ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs, CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtr and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput
}

type cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrType CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs

func CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtr(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrInput {
	return (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText) *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText {
		return &v
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText) []string {
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput) Elem() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText
		return ret
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction struct {
	// Display name of the parameter.
	Parameter *string `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value *string `pulumi:"value"`
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs{...}
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs struct {
	// Display name of the parameter.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput)
}

// CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayInput is an input type that accepts CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArray and CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayInput` via:
//
//	CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArray{ CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs{...} }
type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput
	ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArray []CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionInput

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArray) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return i.ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArray) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return o
}

// Display name of the parameter.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction) *string {
		return v.Parameter
	}).(pulumi.StringPtrOutput)
}

// The new JSON-encoded value of the parameter. A null value clears the parameter.
func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction) *string {
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput() CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) ToCxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction {
		return vs[0].([]CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterAction)[vs[1].(int)]
	}).(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput)
}

type CxPageTransitionRoute struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Condition *string `pulumi:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Intent *string `pulumi:"intent"`
	// (Output)
	// The unique identifier of this transition route.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
	// Structure is documented below.
	TriggerFulfillment *CxPageTransitionRouteTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxPageTransitionRouteInput is an input type that accepts CxPageTransitionRouteArgs and CxPageTransitionRouteOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteInput` via:
//
//	CxPageTransitionRouteArgs{...}
type CxPageTransitionRouteInput interface {
	pulumi.Input

	ToCxPageTransitionRouteOutput() CxPageTransitionRouteOutput
	ToCxPageTransitionRouteOutputWithContext(context.Context) CxPageTransitionRouteOutput
}

type CxPageTransitionRouteArgs struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Intent pulumi.StringPtrInput `pulumi:"intent"`
	// (Output)
	// The unique identifier of this transition route.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
	// Structure is documented below.
	TriggerFulfillment CxPageTransitionRouteTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxPageTransitionRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRoute)(nil)).Elem()
}

func (i CxPageTransitionRouteArgs) ToCxPageTransitionRouteOutput() CxPageTransitionRouteOutput {
	return i.ToCxPageTransitionRouteOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteArgs) ToCxPageTransitionRouteOutputWithContext(ctx context.Context) CxPageTransitionRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteOutput)
}

// CxPageTransitionRouteArrayInput is an input type that accepts CxPageTransitionRouteArray and CxPageTransitionRouteArrayOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteArrayInput` via:
//
//	CxPageTransitionRouteArray{ CxPageTransitionRouteArgs{...} }
type CxPageTransitionRouteArrayInput interface {
	pulumi.Input

	ToCxPageTransitionRouteArrayOutput() CxPageTransitionRouteArrayOutput
	ToCxPageTransitionRouteArrayOutputWithContext(context.Context) CxPageTransitionRouteArrayOutput
}

type CxPageTransitionRouteArray []CxPageTransitionRouteInput

func (CxPageTransitionRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRoute)(nil)).Elem()
}

func (i CxPageTransitionRouteArray) ToCxPageTransitionRouteArrayOutput() CxPageTransitionRouteArrayOutput {
	return i.ToCxPageTransitionRouteArrayOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteArray) ToCxPageTransitionRouteArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteArrayOutput)
}

type CxPageTransitionRouteOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRoute)(nil)).Elem()
}

func (o CxPageTransitionRouteOutput) ToCxPageTransitionRouteOutput() CxPageTransitionRouteOutput {
	return o
}

func (o CxPageTransitionRouteOutput) ToCxPageTransitionRouteOutputWithContext(ctx context.Context) CxPageTransitionRouteOutput {
	return o
}

// The condition to evaluate against form parameters or session parameters.
// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
func (o CxPageTransitionRouteOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The unique identifier of an Intent.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
func (o CxPageTransitionRouteOutput) Intent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.Intent }).(pulumi.StringPtrOutput)
}

// (Output)
// The unique identifier of this transition route.
func (o CxPageTransitionRouteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxPageTransitionRouteOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxPageTransitionRouteOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
// Structure is documented below.
func (o CxPageTransitionRouteOutput) TriggerFulfillment() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *CxPageTransitionRouteTriggerFulfillment { return v.TriggerFulfillment }).(CxPageTransitionRouteTriggerFulfillmentPtrOutput)
}

type CxPageTransitionRouteArrayOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRoute)(nil)).Elem()
}

func (o CxPageTransitionRouteArrayOutput) ToCxPageTransitionRouteArrayOutput() CxPageTransitionRouteArrayOutput {
	return o
}

func (o CxPageTransitionRouteArrayOutput) ToCxPageTransitionRouteArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteArrayOutput {
	return o
}

func (o CxPageTransitionRouteArrayOutput) Index(i pulumi.IntInput) CxPageTransitionRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageTransitionRoute {
		return vs[0].([]CxPageTransitionRoute)[vs[1].(int)]
	}).(CxPageTransitionRouteOutput)
}

type CxPageTransitionRouteTriggerFulfillment struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases []CxPageTransitionRouteTriggerFulfillmentConditionalCase `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageTransitionRouteTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions []CxPageTransitionRouteTriggerFulfillmentSetParameterAction `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageTransitionRouteTriggerFulfillmentInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentArgs and CxPageTransitionRouteTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentArgs{...}
type CxPageTransitionRouteTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentOutput() CxPageTransitionRouteTriggerFulfillmentOutput
	ToCxPageTransitionRouteTriggerFulfillmentOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentOutput
}

type CxPageTransitionRouteTriggerFulfillmentArgs struct {
	// Conditional cases for this fulfillment.
	// Structure is documented below.
	ConditionalCases CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayInput `pulumi:"conditionalCases"`
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageTransitionRouteTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// Set parameter values before executing the webhook.
	// Structure is documented below.
	SetParameterActions CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayInput `pulumi:"setParameterActions"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageTransitionRouteTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentArgs) ToCxPageTransitionRouteTriggerFulfillmentOutput() CxPageTransitionRouteTriggerFulfillmentOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentArgs) ToCxPageTransitionRouteTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentArgs) ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentArgs) ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentOutput).ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentArgs, CxPageTransitionRouteTriggerFulfillmentPtr and CxPageTransitionRouteTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentPtrType CxPageTransitionRouteTriggerFulfillmentArgs

func CxPageTransitionRouteTriggerFulfillmentPtr(v *CxPageTransitionRouteTriggerFulfillmentArgs) CxPageTransitionRouteTriggerFulfillmentPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentPtrType) ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentPtrType) ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentOutput) ToCxPageTransitionRouteTriggerFulfillmentOutput() CxPageTransitionRouteTriggerFulfillmentOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentOutput) ToCxPageTransitionRouteTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentOutput) ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentOutput) ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillment) *CxPageTransitionRouteTriggerFulfillment {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentPtrOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) ConditionalCases() CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) []CxPageTransitionRouteTriggerFulfillmentConditionalCase {
		return v.ConditionalCases
	}).(CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) Messages() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) []CxPageTransitionRouteTriggerFulfillmentMessage {
		return v.Messages
	}).(CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) SetParameterActions() CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) []CxPageTransitionRouteTriggerFulfillmentSetParameterAction {
		return v.SetParameterActions
	}).(CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) CxPageTransitionRouteTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillment
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentOutput)
}

// Conditional cases for this fulfillment.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) ConditionalCases() CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) []CxPageTransitionRouteTriggerFulfillmentConditionalCase {
		if v == nil {
			return nil
		}
		return v.ConditionalCases
	}).(CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) Messages() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) []CxPageTransitionRouteTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// Set parameter values before executing the webhook.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) SetParameterActions() CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) []CxPageTransitionRouteTriggerFulfillmentSetParameterAction {
		if v == nil {
			return nil
		}
		return v.SetParameterActions
	}).(CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentConditionalCase struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases *string `pulumi:"cases"`
}

// CxPageTransitionRouteTriggerFulfillmentConditionalCaseInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs and CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentConditionalCaseInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs{...}
type CxPageTransitionRouteTriggerFulfillmentConditionalCaseInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput() CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput
	ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput
}

type CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs struct {
	// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
	// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
	Cases pulumi.StringPtrInput `pulumi:"cases"`
}

func (CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs) ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput() CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs) ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput)
}

// CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentConditionalCaseArray and CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentConditionalCaseArray{ CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs{...} }
type CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput() CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput
	ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput
}

type CxPageTransitionRouteTriggerFulfillmentConditionalCaseArray []CxPageTransitionRouteTriggerFulfillmentConditionalCaseInput

func (CxPageTransitionRouteTriggerFulfillmentConditionalCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRouteTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentConditionalCaseArray) ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput() CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentConditionalCaseArray) ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput)
}

type CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput) ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput() CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput) ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return o
}

// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
// See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.
func (o CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput) Cases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentConditionalCase) *string { return v.Cases }).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRouteTriggerFulfillmentConditionalCase)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput) ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput() CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput) ToCxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput) Index(i pulumi.IntInput) CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageTransitionRouteTriggerFulfillmentConditionalCase {
		return vs[0].([]CxPageTransitionRouteTriggerFulfillmentConditionalCase)[vs[1].(int)]
	}).(CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessage struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel *string `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess *CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff *CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText *CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload *string `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio *CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall *CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text *CxPageTransitionRouteTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxPageTransitionRouteTriggerFulfillmentMessageInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageArgs and CxPageTransitionRouteTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageArgs struct {
	// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
	// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
	// * In a webhook response when you determine that you handled the customer issue.
	//   Structure is documented below.
	ConversationSuccess CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput `pulumi:"conversationSuccess"`
	// Indicates that the conversation should be handed off to a live agent.
	// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
	// You may set this, for example:
	// * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
	// * In a webhook response when you determine that the customer issue can only be handled by a human.
	//   Structure is documented below.
	LiveAgentHandoff CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput `pulumi:"liveAgentHandoff"`
	// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
	// Structure is documented below.
	OutputAudioText CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput `pulumi:"outputAudioText"`
	// A custom, platform-specific payload.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// Specifies an audio clip to be played by the client as part of the response.
	// Structure is documented below.
	PlayAudio CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput `pulumi:"playAudio"`
	// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
	// Structure is documented below.
	TelephonyTransferCall CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput `pulumi:"telephonyTransferCall"`
	// The text response message.
	// Structure is documented below.
	Text CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageOutput)
}

// CxPageTransitionRouteTriggerFulfillmentMessageArrayInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageArray and CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageArrayInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageArray{ CxPageTransitionRouteTriggerFulfillmentMessageArgs{...} }
type CxPageTransitionRouteTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutput() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageArray []CxPageTransitionRouteTriggerFulfillmentMessageInput

func (CxPageTransitionRouteTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageArray) ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutput() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageArray) ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return o
}

// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
//   - In a webhook response when you determine that you handled the customer issue.
//     Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) ConversationSuccess() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess {
		return v.ConversationSuccess
	}).(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Indicates that the conversation should be handed off to a live agent.
// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
// You may set this, for example:
//   - In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
//   - In a webhook response when you determine that the customer issue can only be handled by a human.
//     Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) LiveAgentHandoff() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff {
		return v.LiveAgentHandoff
	}).(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) OutputAudioText() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText {
		return v.OutputAudioText
	}).(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// A custom, platform-specific payload.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// Specifies an audio clip to be played by the client as part of the response.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) PlayAudio() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio {
		return v.PlayAudio
	}).(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) TelephonyTransferCall() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall {
		return v.TelephonyTransferCall
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// The text response message.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) Text() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *CxPageTransitionRouteTriggerFulfillmentMessageText {
		return v.Text
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutput() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageTransitionRouteTriggerFulfillmentMessage {
		return vs[0].([]CxPageTransitionRouteTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxPageTransitionRouteTriggerFulfillmentMessageOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs and CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput).ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs, CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtr and CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs

func CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtr(v *CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess) *CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess) CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccess) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata *string `pulumi:"metadata"`
}

// CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs and CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs struct {
	// Custom metadata. Dialogflow doesn't impose any structure on this.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput).ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs, CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtr and CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs

func CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtr(v *CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff) *CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff) CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput)
}

// Custom metadata. Dialogflow doesn't impose any structure on this.
func (o CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoff) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml *string `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text *string `pulumi:"text"`
}

// CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs and CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// The SSML text to be synthesized. For more information, see SSML.
	Ssml pulumi.StringPtrInput `pulumi:"ssml"`
	// The raw text to be synthesized.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput).ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs, CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtr and CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs

func CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtr(v *CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText) *CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText) *string { return v.Ssml }).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText) CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// The SSML text to be synthesized. For more information, see SSML.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) Ssml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Ssml
	}).(pulumi.StringPtrOutput)
}

// The raw text to be synthesized.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioText) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri string `pulumi:"audioUri"`
}

// CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs and CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
	AudioUri pulumi.StringInput `pulumi:"audioUri"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput).ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs, CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtr and CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs

func CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtr(v *CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio) *CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput) AudioUri() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio) string { return v.AudioUri }).(pulumi.StringOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio) CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
func (o CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput) AudioUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessagePlayAudio) *string {
		if v == nil {
			return nil
		}
		return &v.AudioUri
	}).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs and CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs struct {
	// Transfer the call to a phone number in E.164 format.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput).ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs, CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtr and CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs

func CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtr(v *CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall) *CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall) string {
		return v.PhoneNumber
	}).(pulumi.StringOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall) CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput)
}

// Transfer the call to a phone number in E.164 format.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCall) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageText struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageTransitionRouteTriggerFulfillmentMessageTextInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageTextArgs and CxPageTransitionRouteTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageTextInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageTextArgs struct {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTextOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTextOutput).ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageTextArgs, CxPageTransitionRouteTriggerFulfillmentMessageTextPtr and CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType CxPageTransitionRouteTriggerFulfillmentMessageTextArgs

func CxPageTransitionRouteTriggerFulfillmentMessageTextPtr(v *CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillmentMessageText) *CxPageTransitionRouteTriggerFulfillmentMessageText {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageText) CxPageTransitionRouteTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillmentMessageText
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTextOutput)
}

// (Output)
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageTransitionRouteTriggerFulfillmentSetParameterAction struct {
	// Display name of the parameter.
	Parameter *string `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value *string `pulumi:"value"`
}

// CxPageTransitionRouteTriggerFulfillmentSetParameterActionInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs and CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentSetParameterActionInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs{...}
type CxPageTransitionRouteTriggerFulfillmentSetParameterActionInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput() CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput
	ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput
}

type CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs struct {
	// Display name of the parameter.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The new JSON-encoded value of the parameter. A null value clears the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs) ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput() CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs) ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput)
}

// CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentSetParameterActionArray and CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentSetParameterActionArray{ CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs{...} }
type CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput() CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput
	ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput
}

type CxPageTransitionRouteTriggerFulfillmentSetParameterActionArray []CxPageTransitionRouteTriggerFulfillmentSetParameterActionInput

func (CxPageTransitionRouteTriggerFulfillmentSetParameterActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRouteTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentSetParameterActionArray) ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput() CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentSetParameterActionArray) ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput)
}

type CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput) ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput() CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput) ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return o
}

// Display name of the parameter.
func (o CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentSetParameterAction) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The new JSON-encoded value of the parameter. A null value clears the parameter.
func (o CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentSetParameterAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRouteTriggerFulfillmentSetParameterAction)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput) ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput() CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput) ToCxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput) Index(i pulumi.IntInput) CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageTransitionRouteTriggerFulfillmentSetParameterAction {
		return vs[0].([]CxPageTransitionRouteTriggerFulfillmentSetParameterAction)[vs[1].(int)]
	}).(CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput)
}

type CxSecuritySettingsAudioExportSettings struct {
	// Filename pattern for exported audio.
	AudioExportPattern *string `pulumi:"audioExportPattern"`
	// File format for exported audio file. Currently only in telephony recordings.
	// * MULAW: G.711 mu-law PCM with 8kHz sample rate.
	// * MP3: MP3 file format.
	// * OGG: OGG Vorbis.
	//   Possible values are: `MULAW`, `MP3`, `OGG`.
	AudioFormat *string `pulumi:"audioFormat"`
	// Enable audio redaction if it is true.
	EnableAudioRedaction *bool `pulumi:"enableAudioRedaction"`
	// Cloud Storage bucket to export audio record to. Setting this field would grant the Storage Object Creator role to the Dialogflow Service Agent. API caller that tries to modify this field should have the permission of storage.buckets.setIamPolicy.
	GcsBucket *string `pulumi:"gcsBucket"`
}

// CxSecuritySettingsAudioExportSettingsInput is an input type that accepts CxSecuritySettingsAudioExportSettingsArgs and CxSecuritySettingsAudioExportSettingsOutput values.
// You can construct a concrete instance of `CxSecuritySettingsAudioExportSettingsInput` via:
//
//	CxSecuritySettingsAudioExportSettingsArgs{...}
type CxSecuritySettingsAudioExportSettingsInput interface {
	pulumi.Input

	ToCxSecuritySettingsAudioExportSettingsOutput() CxSecuritySettingsAudioExportSettingsOutput
	ToCxSecuritySettingsAudioExportSettingsOutputWithContext(context.Context) CxSecuritySettingsAudioExportSettingsOutput
}

type CxSecuritySettingsAudioExportSettingsArgs struct {
	// Filename pattern for exported audio.
	AudioExportPattern pulumi.StringPtrInput `pulumi:"audioExportPattern"`
	// File format for exported audio file. Currently only in telephony recordings.
	// * MULAW: G.711 mu-law PCM with 8kHz sample rate.
	// * MP3: MP3 file format.
	// * OGG: OGG Vorbis.
	//   Possible values are: `MULAW`, `MP3`, `OGG`.
	AudioFormat pulumi.StringPtrInput `pulumi:"audioFormat"`
	// Enable audio redaction if it is true.
	EnableAudioRedaction pulumi.BoolPtrInput `pulumi:"enableAudioRedaction"`
	// Cloud Storage bucket to export audio record to. Setting this field would grant the Storage Object Creator role to the Dialogflow Service Agent. API caller that tries to modify this field should have the permission of storage.buckets.setIamPolicy.
	GcsBucket pulumi.StringPtrInput `pulumi:"gcsBucket"`
}

func (CxSecuritySettingsAudioExportSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxSecuritySettingsAudioExportSettings)(nil)).Elem()
}

func (i CxSecuritySettingsAudioExportSettingsArgs) ToCxSecuritySettingsAudioExportSettingsOutput() CxSecuritySettingsAudioExportSettingsOutput {
	return i.ToCxSecuritySettingsAudioExportSettingsOutputWithContext(context.Background())
}

func (i CxSecuritySettingsAudioExportSettingsArgs) ToCxSecuritySettingsAudioExportSettingsOutputWithContext(ctx context.Context) CxSecuritySettingsAudioExportSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxSecuritySettingsAudioExportSettingsOutput)
}

func (i CxSecuritySettingsAudioExportSettingsArgs) ToCxSecuritySettingsAudioExportSettingsPtrOutput() CxSecuritySettingsAudioExportSettingsPtrOutput {
	return i.ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(context.Background())
}

func (i CxSecuritySettingsAudioExportSettingsArgs) ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(ctx context.Context) CxSecuritySettingsAudioExportSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxSecuritySettingsAudioExportSettingsOutput).ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(ctx)
}

// CxSecuritySettingsAudioExportSettingsPtrInput is an input type that accepts CxSecuritySettingsAudioExportSettingsArgs, CxSecuritySettingsAudioExportSettingsPtr and CxSecuritySettingsAudioExportSettingsPtrOutput values.
// You can construct a concrete instance of `CxSecuritySettingsAudioExportSettingsPtrInput` via:
//
//	        CxSecuritySettingsAudioExportSettingsArgs{...}
//
//	or:
//
//	        nil
type CxSecuritySettingsAudioExportSettingsPtrInput interface {
	pulumi.Input

	ToCxSecuritySettingsAudioExportSettingsPtrOutput() CxSecuritySettingsAudioExportSettingsPtrOutput
	ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(context.Context) CxSecuritySettingsAudioExportSettingsPtrOutput
}

type cxSecuritySettingsAudioExportSettingsPtrType CxSecuritySettingsAudioExportSettingsArgs

func CxSecuritySettingsAudioExportSettingsPtr(v *CxSecuritySettingsAudioExportSettingsArgs) CxSecuritySettingsAudioExportSettingsPtrInput {
	return (*cxSecuritySettingsAudioExportSettingsPtrType)(v)
}

func (*cxSecuritySettingsAudioExportSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxSecuritySettingsAudioExportSettings)(nil)).Elem()
}

func (i *cxSecuritySettingsAudioExportSettingsPtrType) ToCxSecuritySettingsAudioExportSettingsPtrOutput() CxSecuritySettingsAudioExportSettingsPtrOutput {
	return i.ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(context.Background())
}

func (i *cxSecuritySettingsAudioExportSettingsPtrType) ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(ctx context.Context) CxSecuritySettingsAudioExportSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxSecuritySettingsAudioExportSettingsPtrOutput)
}

type CxSecuritySettingsAudioExportSettingsOutput struct{ *pulumi.OutputState }

func (CxSecuritySettingsAudioExportSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxSecuritySettingsAudioExportSettings)(nil)).Elem()
}

func (o CxSecuritySettingsAudioExportSettingsOutput) ToCxSecuritySettingsAudioExportSettingsOutput() CxSecuritySettingsAudioExportSettingsOutput {
	return o
}

func (o CxSecuritySettingsAudioExportSettingsOutput) ToCxSecuritySettingsAudioExportSettingsOutputWithContext(ctx context.Context) CxSecuritySettingsAudioExportSettingsOutput {
	return o
}

func (o CxSecuritySettingsAudioExportSettingsOutput) ToCxSecuritySettingsAudioExportSettingsPtrOutput() CxSecuritySettingsAudioExportSettingsPtrOutput {
	return o.ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(context.Background())
}

func (o CxSecuritySettingsAudioExportSettingsOutput) ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(ctx context.Context) CxSecuritySettingsAudioExportSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxSecuritySettingsAudioExportSettings) *CxSecuritySettingsAudioExportSettings {
		return &v
	}).(CxSecuritySettingsAudioExportSettingsPtrOutput)
}

// Filename pattern for exported audio.
func (o CxSecuritySettingsAudioExportSettingsOutput) AudioExportPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxSecuritySettingsAudioExportSettings) *string { return v.AudioExportPattern }).(pulumi.StringPtrOutput)
}

// File format for exported audio file. Currently only in telephony recordings.
//   - MULAW: G.711 mu-law PCM with 8kHz sample rate.
//   - MP3: MP3 file format.
//   - OGG: OGG Vorbis.
//     Possible values are: `MULAW`, `MP3`, `OGG`.
func (o CxSecuritySettingsAudioExportSettingsOutput) AudioFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxSecuritySettingsAudioExportSettings) *string { return v.AudioFormat }).(pulumi.StringPtrOutput)
}

// Enable audio redaction if it is true.
func (o CxSecuritySettingsAudioExportSettingsOutput) EnableAudioRedaction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxSecuritySettingsAudioExportSettings) *bool { return v.EnableAudioRedaction }).(pulumi.BoolPtrOutput)
}

// Cloud Storage bucket to export audio record to. Setting this field would grant the Storage Object Creator role to the Dialogflow Service Agent. API caller that tries to modify this field should have the permission of storage.buckets.setIamPolicy.
func (o CxSecuritySettingsAudioExportSettingsOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxSecuritySettingsAudioExportSettings) *string { return v.GcsBucket }).(pulumi.StringPtrOutput)
}

type CxSecuritySettingsAudioExportSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxSecuritySettingsAudioExportSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxSecuritySettingsAudioExportSettings)(nil)).Elem()
}

func (o CxSecuritySettingsAudioExportSettingsPtrOutput) ToCxSecuritySettingsAudioExportSettingsPtrOutput() CxSecuritySettingsAudioExportSettingsPtrOutput {
	return o
}

func (o CxSecuritySettingsAudioExportSettingsPtrOutput) ToCxSecuritySettingsAudioExportSettingsPtrOutputWithContext(ctx context.Context) CxSecuritySettingsAudioExportSettingsPtrOutput {
	return o
}

func (o CxSecuritySettingsAudioExportSettingsPtrOutput) Elem() CxSecuritySettingsAudioExportSettingsOutput {
	return o.ApplyT(func(v *CxSecuritySettingsAudioExportSettings) CxSecuritySettingsAudioExportSettings {
		if v != nil {
			return *v
		}
		var ret CxSecuritySettingsAudioExportSettings
		return ret
	}).(CxSecuritySettingsAudioExportSettingsOutput)
}

// Filename pattern for exported audio.
func (o CxSecuritySettingsAudioExportSettingsPtrOutput) AudioExportPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxSecuritySettingsAudioExportSettings) *string {
		if v == nil {
			return nil
		}
		return v.AudioExportPattern
	}).(pulumi.StringPtrOutput)
}

// File format for exported audio file. Currently only in telephony recordings.
//   - MULAW: G.711 mu-law PCM with 8kHz sample rate.
//   - MP3: MP3 file format.
//   - OGG: OGG Vorbis.
//     Possible values are: `MULAW`, `MP3`, `OGG`.
func (o CxSecuritySettingsAudioExportSettingsPtrOutput) AudioFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxSecuritySettingsAudioExportSettings) *string {
		if v == nil {
			return nil
		}
		return v.AudioFormat
	}).(pulumi.StringPtrOutput)
}

// Enable audio redaction if it is true.
func (o CxSecuritySettingsAudioExportSettingsPtrOutput) EnableAudioRedaction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxSecuritySettingsAudioExportSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAudioRedaction
	}).(pulumi.BoolPtrOutput)
}

// Cloud Storage bucket to export audio record to. Setting this field would grant the Storage Object Creator role to the Dialogflow Service Agent. API caller that tries to modify this field should have the permission of storage.buckets.setIamPolicy.
func (o CxSecuritySettingsAudioExportSettingsPtrOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxSecuritySettingsAudioExportSettings) *string {
		if v == nil {
			return nil
		}
		return v.GcsBucket
	}).(pulumi.StringPtrOutput)
}

type CxSecuritySettingsInsightsExportSettings struct {
	// If enabled, we will automatically exports conversations to Insights and Insights runs its analyzers.
	EnableInsightsExport bool `pulumi:"enableInsightsExport"`
}

// CxSecuritySettingsInsightsExportSettingsInput is an input type that accepts CxSecuritySettingsInsightsExportSettingsArgs and CxSecuritySettingsInsightsExportSettingsOutput values.
// You can construct a concrete instance of `CxSecuritySettingsInsightsExportSettingsInput` via:
//
//	CxSecuritySettingsInsightsExportSettingsArgs{...}
type CxSecuritySettingsInsightsExportSettingsInput interface {
	pulumi.Input

	ToCxSecuritySettingsInsightsExportSettingsOutput() CxSecuritySettingsInsightsExportSettingsOutput
	ToCxSecuritySettingsInsightsExportSettingsOutputWithContext(context.Context) CxSecuritySettingsInsightsExportSettingsOutput
}

type CxSecuritySettingsInsightsExportSettingsArgs struct {
	// If enabled, we will automatically exports conversations to Insights and Insights runs its analyzers.
	EnableInsightsExport pulumi.BoolInput `pulumi:"enableInsightsExport"`
}

func (CxSecuritySettingsInsightsExportSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxSecuritySettingsInsightsExportSettings)(nil)).Elem()
}

func (i CxSecuritySettingsInsightsExportSettingsArgs) ToCxSecuritySettingsInsightsExportSettingsOutput() CxSecuritySettingsInsightsExportSettingsOutput {
	return i.ToCxSecuritySettingsInsightsExportSettingsOutputWithContext(context.Background())
}

func (i CxSecuritySettingsInsightsExportSettingsArgs) ToCxSecuritySettingsInsightsExportSettingsOutputWithContext(ctx context.Context) CxSecuritySettingsInsightsExportSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxSecuritySettingsInsightsExportSettingsOutput)
}

func (i CxSecuritySettingsInsightsExportSettingsArgs) ToCxSecuritySettingsInsightsExportSettingsPtrOutput() CxSecuritySettingsInsightsExportSettingsPtrOutput {
	return i.ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(context.Background())
}

func (i CxSecuritySettingsInsightsExportSettingsArgs) ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(ctx context.Context) CxSecuritySettingsInsightsExportSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxSecuritySettingsInsightsExportSettingsOutput).ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(ctx)
}

// CxSecuritySettingsInsightsExportSettingsPtrInput is an input type that accepts CxSecuritySettingsInsightsExportSettingsArgs, CxSecuritySettingsInsightsExportSettingsPtr and CxSecuritySettingsInsightsExportSettingsPtrOutput values.
// You can construct a concrete instance of `CxSecuritySettingsInsightsExportSettingsPtrInput` via:
//
//	        CxSecuritySettingsInsightsExportSettingsArgs{...}
//
//	or:
//
//	        nil
type CxSecuritySettingsInsightsExportSettingsPtrInput interface {
	pulumi.Input

	ToCxSecuritySettingsInsightsExportSettingsPtrOutput() CxSecuritySettingsInsightsExportSettingsPtrOutput
	ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(context.Context) CxSecuritySettingsInsightsExportSettingsPtrOutput
}

type cxSecuritySettingsInsightsExportSettingsPtrType CxSecuritySettingsInsightsExportSettingsArgs

func CxSecuritySettingsInsightsExportSettingsPtr(v *CxSecuritySettingsInsightsExportSettingsArgs) CxSecuritySettingsInsightsExportSettingsPtrInput {
	return (*cxSecuritySettingsInsightsExportSettingsPtrType)(v)
}

func (*cxSecuritySettingsInsightsExportSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxSecuritySettingsInsightsExportSettings)(nil)).Elem()
}

func (i *cxSecuritySettingsInsightsExportSettingsPtrType) ToCxSecuritySettingsInsightsExportSettingsPtrOutput() CxSecuritySettingsInsightsExportSettingsPtrOutput {
	return i.ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(context.Background())
}

func (i *cxSecuritySettingsInsightsExportSettingsPtrType) ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(ctx context.Context) CxSecuritySettingsInsightsExportSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxSecuritySettingsInsightsExportSettingsPtrOutput)
}

type CxSecuritySettingsInsightsExportSettingsOutput struct{ *pulumi.OutputState }

func (CxSecuritySettingsInsightsExportSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxSecuritySettingsInsightsExportSettings)(nil)).Elem()
}

func (o CxSecuritySettingsInsightsExportSettingsOutput) ToCxSecuritySettingsInsightsExportSettingsOutput() CxSecuritySettingsInsightsExportSettingsOutput {
	return o
}

func (o CxSecuritySettingsInsightsExportSettingsOutput) ToCxSecuritySettingsInsightsExportSettingsOutputWithContext(ctx context.Context) CxSecuritySettingsInsightsExportSettingsOutput {
	return o
}

func (o CxSecuritySettingsInsightsExportSettingsOutput) ToCxSecuritySettingsInsightsExportSettingsPtrOutput() CxSecuritySettingsInsightsExportSettingsPtrOutput {
	return o.ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(context.Background())
}

func (o CxSecuritySettingsInsightsExportSettingsOutput) ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(ctx context.Context) CxSecuritySettingsInsightsExportSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxSecuritySettingsInsightsExportSettings) *CxSecuritySettingsInsightsExportSettings {
		return &v
	}).(CxSecuritySettingsInsightsExportSettingsPtrOutput)
}

// If enabled, we will automatically exports conversations to Insights and Insights runs its analyzers.
func (o CxSecuritySettingsInsightsExportSettingsOutput) EnableInsightsExport() pulumi.BoolOutput {
	return o.ApplyT(func(v CxSecuritySettingsInsightsExportSettings) bool { return v.EnableInsightsExport }).(pulumi.BoolOutput)
}

type CxSecuritySettingsInsightsExportSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxSecuritySettingsInsightsExportSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxSecuritySettingsInsightsExportSettings)(nil)).Elem()
}

func (o CxSecuritySettingsInsightsExportSettingsPtrOutput) ToCxSecuritySettingsInsightsExportSettingsPtrOutput() CxSecuritySettingsInsightsExportSettingsPtrOutput {
	return o
}

func (o CxSecuritySettingsInsightsExportSettingsPtrOutput) ToCxSecuritySettingsInsightsExportSettingsPtrOutputWithContext(ctx context.Context) CxSecuritySettingsInsightsExportSettingsPtrOutput {
	return o
}

func (o CxSecuritySettingsInsightsExportSettingsPtrOutput) Elem() CxSecuritySettingsInsightsExportSettingsOutput {
	return o.ApplyT(func(v *CxSecuritySettingsInsightsExportSettings) CxSecuritySettingsInsightsExportSettings {
		if v != nil {
			return *v
		}
		var ret CxSecuritySettingsInsightsExportSettings
		return ret
	}).(CxSecuritySettingsInsightsExportSettingsOutput)
}

// If enabled, we will automatically exports conversations to Insights and Insights runs its analyzers.
func (o CxSecuritySettingsInsightsExportSettingsPtrOutput) EnableInsightsExport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxSecuritySettingsInsightsExportSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableInsightsExport
	}).(pulumi.BoolPtrOutput)
}

type CxTestCaseLastTestResult struct {
	// The conversation turns uttered during the test case replay in chronological order.
	// Structure is documented below.
	ConversationTurns []CxTestCaseLastTestResultConversationTurn `pulumi:"conversationTurns"`
	// Environment where the test was run. If not set, it indicates the draft environment.
	Environment *string `pulumi:"environment"`
	// The unique identifier of the page.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	Name *string `pulumi:"name"`
	// Whether the test case passed in the agent environment.
	// * PASSED: The test passed.
	// * FAILED: The test did not pass.
	//   Possible values are: `PASSED`, `FAILED`.
	TestResult *string `pulumi:"testResult"`
	// The time that the test was run. A timestamp in RFC3339 text format.
	TestTime *string `pulumi:"testTime"`
}

// CxTestCaseLastTestResultInput is an input type that accepts CxTestCaseLastTestResultArgs and CxTestCaseLastTestResultOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultInput` via:
//
//	CxTestCaseLastTestResultArgs{...}
type CxTestCaseLastTestResultInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultOutput() CxTestCaseLastTestResultOutput
	ToCxTestCaseLastTestResultOutputWithContext(context.Context) CxTestCaseLastTestResultOutput
}

type CxTestCaseLastTestResultArgs struct {
	// The conversation turns uttered during the test case replay in chronological order.
	// Structure is documented below.
	ConversationTurns CxTestCaseLastTestResultConversationTurnArrayInput `pulumi:"conversationTurns"`
	// Environment where the test was run. If not set, it indicates the draft environment.
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// The unique identifier of the page.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether the test case passed in the agent environment.
	// * PASSED: The test passed.
	// * FAILED: The test did not pass.
	//   Possible values are: `PASSED`, `FAILED`.
	TestResult pulumi.StringPtrInput `pulumi:"testResult"`
	// The time that the test was run. A timestamp in RFC3339 text format.
	TestTime pulumi.StringPtrInput `pulumi:"testTime"`
}

func (CxTestCaseLastTestResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResult)(nil)).Elem()
}

func (i CxTestCaseLastTestResultArgs) ToCxTestCaseLastTestResultOutput() CxTestCaseLastTestResultOutput {
	return i.ToCxTestCaseLastTestResultOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultArgs) ToCxTestCaseLastTestResultOutputWithContext(ctx context.Context) CxTestCaseLastTestResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultOutput)
}

// CxTestCaseLastTestResultArrayInput is an input type that accepts CxTestCaseLastTestResultArray and CxTestCaseLastTestResultArrayOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultArrayInput` via:
//
//	CxTestCaseLastTestResultArray{ CxTestCaseLastTestResultArgs{...} }
type CxTestCaseLastTestResultArrayInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultArrayOutput() CxTestCaseLastTestResultArrayOutput
	ToCxTestCaseLastTestResultArrayOutputWithContext(context.Context) CxTestCaseLastTestResultArrayOutput
}

type CxTestCaseLastTestResultArray []CxTestCaseLastTestResultInput

func (CxTestCaseLastTestResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseLastTestResult)(nil)).Elem()
}

func (i CxTestCaseLastTestResultArray) ToCxTestCaseLastTestResultArrayOutput() CxTestCaseLastTestResultArrayOutput {
	return i.ToCxTestCaseLastTestResultArrayOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultArray) ToCxTestCaseLastTestResultArrayOutputWithContext(ctx context.Context) CxTestCaseLastTestResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultArrayOutput)
}

type CxTestCaseLastTestResultOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResult)(nil)).Elem()
}

func (o CxTestCaseLastTestResultOutput) ToCxTestCaseLastTestResultOutput() CxTestCaseLastTestResultOutput {
	return o
}

func (o CxTestCaseLastTestResultOutput) ToCxTestCaseLastTestResultOutputWithContext(ctx context.Context) CxTestCaseLastTestResultOutput {
	return o
}

// The conversation turns uttered during the test case replay in chronological order.
// Structure is documented below.
func (o CxTestCaseLastTestResultOutput) ConversationTurns() CxTestCaseLastTestResultConversationTurnArrayOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResult) []CxTestCaseLastTestResultConversationTurn {
		return v.ConversationTurns
	}).(CxTestCaseLastTestResultConversationTurnArrayOutput)
}

// Environment where the test was run. If not set, it indicates the draft environment.
func (o CxTestCaseLastTestResultOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResult) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// The unique identifier of the page.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxTestCaseLastTestResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether the test case passed in the agent environment.
//   - PASSED: The test passed.
//   - FAILED: The test did not pass.
//     Possible values are: `PASSED`, `FAILED`.
func (o CxTestCaseLastTestResultOutput) TestResult() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResult) *string { return v.TestResult }).(pulumi.StringPtrOutput)
}

// The time that the test was run. A timestamp in RFC3339 text format.
func (o CxTestCaseLastTestResultOutput) TestTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResult) *string { return v.TestTime }).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultArrayOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseLastTestResult)(nil)).Elem()
}

func (o CxTestCaseLastTestResultArrayOutput) ToCxTestCaseLastTestResultArrayOutput() CxTestCaseLastTestResultArrayOutput {
	return o
}

func (o CxTestCaseLastTestResultArrayOutput) ToCxTestCaseLastTestResultArrayOutputWithContext(ctx context.Context) CxTestCaseLastTestResultArrayOutput {
	return o
}

func (o CxTestCaseLastTestResultArrayOutput) Index(i pulumi.IntInput) CxTestCaseLastTestResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxTestCaseLastTestResult {
		return vs[0].([]CxTestCaseLastTestResult)[vs[1].(int)]
	}).(CxTestCaseLastTestResultOutput)
}

type CxTestCaseLastTestResultConversationTurn struct {
	// The user input.
	// Structure is documented below.
	UserInput *CxTestCaseLastTestResultConversationTurnUserInput `pulumi:"userInput"`
	// The virtual agent output.
	// Structure is documented below.
	VirtualAgentOutput *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput `pulumi:"virtualAgentOutput"`
}

// CxTestCaseLastTestResultConversationTurnInput is an input type that accepts CxTestCaseLastTestResultConversationTurnArgs and CxTestCaseLastTestResultConversationTurnOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnInput` via:
//
//	CxTestCaseLastTestResultConversationTurnArgs{...}
type CxTestCaseLastTestResultConversationTurnInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnOutput() CxTestCaseLastTestResultConversationTurnOutput
	ToCxTestCaseLastTestResultConversationTurnOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnOutput
}

type CxTestCaseLastTestResultConversationTurnArgs struct {
	// The user input.
	// Structure is documented below.
	UserInput CxTestCaseLastTestResultConversationTurnUserInputPtrInput `pulumi:"userInput"`
	// The virtual agent output.
	// Structure is documented below.
	VirtualAgentOutput CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrInput `pulumi:"virtualAgentOutput"`
}

func (CxTestCaseLastTestResultConversationTurnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurn)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnArgs) ToCxTestCaseLastTestResultConversationTurnOutput() CxTestCaseLastTestResultConversationTurnOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnArgs) ToCxTestCaseLastTestResultConversationTurnOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnOutput)
}

// CxTestCaseLastTestResultConversationTurnArrayInput is an input type that accepts CxTestCaseLastTestResultConversationTurnArray and CxTestCaseLastTestResultConversationTurnArrayOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnArrayInput` via:
//
//	CxTestCaseLastTestResultConversationTurnArray{ CxTestCaseLastTestResultConversationTurnArgs{...} }
type CxTestCaseLastTestResultConversationTurnArrayInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnArrayOutput() CxTestCaseLastTestResultConversationTurnArrayOutput
	ToCxTestCaseLastTestResultConversationTurnArrayOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnArrayOutput
}

type CxTestCaseLastTestResultConversationTurnArray []CxTestCaseLastTestResultConversationTurnInput

func (CxTestCaseLastTestResultConversationTurnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseLastTestResultConversationTurn)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnArray) ToCxTestCaseLastTestResultConversationTurnArrayOutput() CxTestCaseLastTestResultConversationTurnArrayOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnArrayOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnArray) ToCxTestCaseLastTestResultConversationTurnArrayOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnArrayOutput)
}

type CxTestCaseLastTestResultConversationTurnOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurn)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnOutput) ToCxTestCaseLastTestResultConversationTurnOutput() CxTestCaseLastTestResultConversationTurnOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnOutput) ToCxTestCaseLastTestResultConversationTurnOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnOutput {
	return o
}

// The user input.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnOutput) UserInput() CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurn) *CxTestCaseLastTestResultConversationTurnUserInput {
		return v.UserInput
	}).(CxTestCaseLastTestResultConversationTurnUserInputPtrOutput)
}

// The virtual agent output.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnOutput) VirtualAgentOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurn) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput {
		return v.VirtualAgentOutput
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnArrayOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseLastTestResultConversationTurn)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnArrayOutput) ToCxTestCaseLastTestResultConversationTurnArrayOutput() CxTestCaseLastTestResultConversationTurnArrayOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnArrayOutput) ToCxTestCaseLastTestResultConversationTurnArrayOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnArrayOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnArrayOutput) Index(i pulumi.IntInput) CxTestCaseLastTestResultConversationTurnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxTestCaseLastTestResultConversationTurn {
		return vs[0].([]CxTestCaseLastTestResultConversationTurn)[vs[1].(int)]
	}).(CxTestCaseLastTestResultConversationTurnOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInput struct {
	// Whether sentiment analysis is enabled.
	EnableSentimentAnalysis *bool `pulumi:"enableSentimentAnalysis"`
	// Parameters that need to be injected into the conversation during intent detection.
	InjectedParameters *string `pulumi:"injectedParameters"`
	// User input. Supports text input, event input, dtmf input in the test case.
	// Structure is documented below.
	Input *CxTestCaseLastTestResultConversationTurnUserInputInputType `pulumi:"input"`
	// If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
	IsWebhookEnabled *bool `pulumi:"isWebhookEnabled"`
}

// CxTestCaseLastTestResultConversationTurnUserInputInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputArgs and CxTestCaseLastTestResultConversationTurnUserInputOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInput` via:
//
//	CxTestCaseLastTestResultConversationTurnUserInputArgs{...}
type CxTestCaseLastTestResultConversationTurnUserInputInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputOutput() CxTestCaseLastTestResultConversationTurnUserInputOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputOutput
}

type CxTestCaseLastTestResultConversationTurnUserInputArgs struct {
	// Whether sentiment analysis is enabled.
	EnableSentimentAnalysis pulumi.BoolPtrInput `pulumi:"enableSentimentAnalysis"`
	// Parameters that need to be injected into the conversation during intent detection.
	InjectedParameters pulumi.StringPtrInput `pulumi:"injectedParameters"`
	// User input. Supports text input, event input, dtmf input in the test case.
	// Structure is documented below.
	Input CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrInput `pulumi:"input"`
	// If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
	IsWebhookEnabled pulumi.BoolPtrInput `pulumi:"isWebhookEnabled"`
}

func (CxTestCaseLastTestResultConversationTurnUserInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInput)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnUserInputArgs) ToCxTestCaseLastTestResultConversationTurnUserInputOutput() CxTestCaseLastTestResultConversationTurnUserInputOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputArgs) ToCxTestCaseLastTestResultConversationTurnUserInputOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputOutput)
}

func (i CxTestCaseLastTestResultConversationTurnUserInputArgs) ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputArgs) ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputOutput).ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnUserInputPtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputArgs, CxTestCaseLastTestResultConversationTurnUserInputPtr and CxTestCaseLastTestResultConversationTurnUserInputPtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputPtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnUserInputArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnUserInputPtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputPtrOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputPtrOutput
}

type cxTestCaseLastTestResultConversationTurnUserInputPtrType CxTestCaseLastTestResultConversationTurnUserInputArgs

func CxTestCaseLastTestResultConversationTurnUserInputPtr(v *CxTestCaseLastTestResultConversationTurnUserInputArgs) CxTestCaseLastTestResultConversationTurnUserInputPtrInput {
	return (*cxTestCaseLastTestResultConversationTurnUserInputPtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnUserInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInput)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputPtrType) ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputPtrType) ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInput)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputOutput) ToCxTestCaseLastTestResultConversationTurnUserInputOutput() CxTestCaseLastTestResultConversationTurnUserInputOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputOutput) ToCxTestCaseLastTestResultConversationTurnUserInputOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputOutput) ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnUserInputOutput) ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnUserInput) *CxTestCaseLastTestResultConversationTurnUserInput {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnUserInputPtrOutput)
}

// Whether sentiment analysis is enabled.
func (o CxTestCaseLastTestResultConversationTurnUserInputOutput) EnableSentimentAnalysis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInput) *bool { return v.EnableSentimentAnalysis }).(pulumi.BoolPtrOutput)
}

// Parameters that need to be injected into the conversation during intent detection.
func (o CxTestCaseLastTestResultConversationTurnUserInputOutput) InjectedParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInput) *string { return v.InjectedParameters }).(pulumi.StringPtrOutput)
}

// User input. Supports text input, event input, dtmf input in the test case.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnUserInputOutput) Input() CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInput) *CxTestCaseLastTestResultConversationTurnUserInputInputType {
		return v.Input
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput)
}

// If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
func (o CxTestCaseLastTestResultConversationTurnUserInputOutput) IsWebhookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInput) *bool { return v.IsWebhookEnabled }).(pulumi.BoolPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInput)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputPtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputPtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputPtrOutput) Elem() CxTestCaseLastTestResultConversationTurnUserInputOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInput) CxTestCaseLastTestResultConversationTurnUserInput {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnUserInput
		return ret
	}).(CxTestCaseLastTestResultConversationTurnUserInputOutput)
}

// Whether sentiment analysis is enabled.
func (o CxTestCaseLastTestResultConversationTurnUserInputPtrOutput) EnableSentimentAnalysis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInput) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSentimentAnalysis
	}).(pulumi.BoolPtrOutput)
}

// Parameters that need to be injected into the conversation during intent detection.
func (o CxTestCaseLastTestResultConversationTurnUserInputPtrOutput) InjectedParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInput) *string {
		if v == nil {
			return nil
		}
		return v.InjectedParameters
	}).(pulumi.StringPtrOutput)
}

// User input. Supports text input, event input, dtmf input in the test case.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnUserInputPtrOutput) Input() CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInput) *CxTestCaseLastTestResultConversationTurnUserInputInputType {
		if v == nil {
			return nil
		}
		return v.Input
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput)
}

// If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
func (o CxTestCaseLastTestResultConversationTurnUserInputPtrOutput) IsWebhookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInput) *bool {
		if v == nil {
			return nil
		}
		return v.IsWebhookEnabled
	}).(pulumi.BoolPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputType struct {
	// The DTMF event to be handled.
	// Structure is documented below.
	Dtmf *CxTestCaseLastTestResultConversationTurnUserInputInputDtmf `pulumi:"dtmf"`
	// The event to be triggered.
	// Structure is documented below.
	Event *CxTestCaseLastTestResultConversationTurnUserInputInputEvent `pulumi:"event"`
	// The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
	// Note that queries in the same session do not necessarily need to specify the same language.
	LanguageCode *string `pulumi:"languageCode"`
	// The natural language text to be processed.
	// Structure is documented below.
	Text *CxTestCaseLastTestResultConversationTurnUserInputInputText `pulumi:"text"`
}

// CxTestCaseLastTestResultConversationTurnUserInputInputTypeInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs and CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInputTypeInput` via:
//
//	CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs{...}
type CxTestCaseLastTestResultConversationTurnUserInputInputTypeInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputInputTypeOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput
}

type CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs struct {
	// The DTMF event to be handled.
	// Structure is documented below.
	Dtmf CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrInput `pulumi:"dtmf"`
	// The event to be triggered.
	// Structure is documented below.
	Event CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrInput `pulumi:"event"`
	// The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
	// Note that queries in the same session do not necessarily need to specify the same language.
	LanguageCode pulumi.StringPtrInput `pulumi:"languageCode"`
	// The natural language text to be processed.
	// Structure is documented below.
	Text CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrInput `pulumi:"text"`
}

func (CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputType)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputTypeOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypeOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput)
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput).ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs, CxTestCaseLastTestResultConversationTurnUserInputInputTypePtr and CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput
}

type cxTestCaseLastTestResultConversationTurnUserInputInputTypePtrType CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs

func CxTestCaseLastTestResultConversationTurnUserInputInputTypePtr(v *CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs) CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrInput {
	return (*cxTestCaseLastTestResultConversationTurnUserInputInputTypePtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnUserInputInputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInputInputType)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputInputTypePtrType) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputInputTypePtrType) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputType)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypeOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnUserInputInputType) *CxTestCaseLastTestResultConversationTurnUserInputInputType {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput)
}

// The DTMF event to be handled.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) Dtmf() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInputInputType) *CxTestCaseLastTestResultConversationTurnUserInputInputDtmf {
		return v.Dtmf
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput)
}

// The event to be triggered.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) Event() CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInputInputType) *CxTestCaseLastTestResultConversationTurnUserInputInputEvent {
		return v.Event
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput)
}

// The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
// Note that queries in the same session do not necessarily need to specify the same language.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInputInputType) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// The natural language text to be processed.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput) Text() CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInputInputType) *CxTestCaseLastTestResultConversationTurnUserInputInputText {
		return v.Text
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInputInputType)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput) Elem() CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputType) CxTestCaseLastTestResultConversationTurnUserInputInputType {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnUserInputInputType
		return ret
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput)
}

// The DTMF event to be handled.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput) Dtmf() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputType) *CxTestCaseLastTestResultConversationTurnUserInputInputDtmf {
		if v == nil {
			return nil
		}
		return v.Dtmf
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput)
}

// The event to be triggered.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput) Event() CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputType) *CxTestCaseLastTestResultConversationTurnUserInputInputEvent {
		if v == nil {
			return nil
		}
		return v.Event
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput)
}

// The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
// Note that queries in the same session do not necessarily need to specify the same language.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputType) *string {
		if v == nil {
			return nil
		}
		return v.LanguageCode
	}).(pulumi.StringPtrOutput)
}

// The natural language text to be processed.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput) Text() CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputType) *CxTestCaseLastTestResultConversationTurnUserInputInputText {
		if v == nil {
			return nil
		}
		return v.Text
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputDtmf struct {
	// The dtmf digits.
	Digits *string `pulumi:"digits"`
	// The finish digit (if any).
	FinishDigit *string `pulumi:"finishDigit"`
}

// CxTestCaseLastTestResultConversationTurnUserInputInputDtmfInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs and CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInputDtmfInput` via:
//
//	CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs{...}
type CxTestCaseLastTestResultConversationTurnUserInputInputDtmfInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput
}

type CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs struct {
	// The dtmf digits.
	Digits pulumi.StringPtrInput `pulumi:"digits"`
	// The finish digit (if any).
	FinishDigit pulumi.StringPtrInput `pulumi:"finishDigit"`
}

func (CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputDtmf)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput)
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput).ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs, CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtr and CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput
}

type cxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrType CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs

func CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtr(v *CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrInput {
	return (*cxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInputInputDtmf)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrType) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrType) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputDtmf)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnUserInputInputDtmf) *CxTestCaseLastTestResultConversationTurnUserInputInputDtmf {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput)
}

// The dtmf digits.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput) Digits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInputInputDtmf) *string { return v.Digits }).(pulumi.StringPtrOutput)
}

// The finish digit (if any).
func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInputInputDtmf) *string { return v.FinishDigit }).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInputInputDtmf)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput) Elem() CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputDtmf) CxTestCaseLastTestResultConversationTurnUserInputInputDtmf {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnUserInputInputDtmf
		return ret
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput)
}

// The dtmf digits.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput) Digits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputDtmf) *string {
		if v == nil {
			return nil
		}
		return v.Digits
	}).(pulumi.StringPtrOutput)
}

// The finish digit (if any).
func (o CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputDtmf) *string {
		if v == nil {
			return nil
		}
		return v.FinishDigit
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputEvent struct {
	// Name of the event.
	Event string `pulumi:"event"`
}

// CxTestCaseLastTestResultConversationTurnUserInputInputEventInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs and CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInputEventInput` via:
//
//	CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs{...}
type CxTestCaseLastTestResultConversationTurnUserInputInputEventInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputInputEventOutput() CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputInputEventOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput
}

type CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs struct {
	// Name of the event.
	Event pulumi.StringInput `pulumi:"event"`
}

func (CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputEvent)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventOutput() CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputEventOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput)
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput).ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs, CxTestCaseLastTestResultConversationTurnUserInputInputEventPtr and CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput
}

type cxTestCaseLastTestResultConversationTurnUserInputInputEventPtrType CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs

func CxTestCaseLastTestResultConversationTurnUserInputInputEventPtr(v *CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs) CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrInput {
	return (*cxTestCaseLastTestResultConversationTurnUserInputInputEventPtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnUserInputInputEventPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInputInputEvent)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputInputEventPtrType) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputInputEventPtrType) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputEvent)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventOutput() CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnUserInputInputEvent) *CxTestCaseLastTestResultConversationTurnUserInputInputEvent {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput)
}

// Name of the event.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput) Event() pulumi.StringOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInputInputEvent) string { return v.Event }).(pulumi.StringOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInputInputEvent)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput) Elem() CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputEvent) CxTestCaseLastTestResultConversationTurnUserInputInputEvent {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnUserInputInputEvent
		return ret
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput)
}

// Name of the event.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputEvent) *string {
		if v == nil {
			return nil
		}
		return &v.Event
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputText struct {
	// The natural language text to be processed. Text length must not exceed 256 characters.
	Text string `pulumi:"text"`
}

// CxTestCaseLastTestResultConversationTurnUserInputInputTextInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs and CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInputTextInput` via:
//
//	CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs{...}
type CxTestCaseLastTestResultConversationTurnUserInputInputTextInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputInputTextOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputInputTextOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput
}

type CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs struct {
	// The natural language text to be processed. Text length must not exceed 256 characters.
	Text pulumi.StringInput `pulumi:"text"`
}

func (CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputText)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputTextOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput)
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput).ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs, CxTestCaseLastTestResultConversationTurnUserInputInputTextPtr and CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput
	ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput
}

type cxTestCaseLastTestResultConversationTurnUserInputInputTextPtrType CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs

func CxTestCaseLastTestResultConversationTurnUserInputInputTextPtr(v *CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs) CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrInput {
	return (*cxTestCaseLastTestResultConversationTurnUserInputInputTextPtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnUserInputInputTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInputInputText)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputInputTextPtrType) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnUserInputInputTextPtrType) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputText)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnUserInputInputText) *CxTestCaseLastTestResultConversationTurnUserInputInputText {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput)
}

// The natural language text to be processed. Text length must not exceed 256 characters.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnUserInputInputText) string { return v.Text }).(pulumi.StringOutput)
}

type CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnUserInputInputText)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput() CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput) ToCxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput) Elem() CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputText) CxTestCaseLastTestResultConversationTurnUserInputInputText {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnUserInputInputText
		return ret
	}).(CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput)
}

// The natural language text to be processed. Text length must not exceed 256 characters.
func (o CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnUserInputInputText) *string {
		if v == nil {
			return nil
		}
		return &v.Text
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutput struct {
	// The [Page](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages#Page) on which the utterance was spoken.
	// Structure is documented below.
	CurrentPage *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage `pulumi:"currentPage"`
	// The list of differences between the original run and the replay for this output, if any.
	// Structure is documented below.
	Differences []CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference `pulumi:"differences"`
	// The session parameters available to the bot at this point.
	SessionParameters *string `pulumi:"sessionParameters"`
	// Response error from the agent in the test result. If set, other output is empty.
	// Structure is documented below.
	Status *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus `pulumi:"status"`
	// The text responses from the agent for the turn.
	// Structure is documented below.
	TextResponses []CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse `pulumi:"textResponses"`
	// The [Intent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents#Intent) that triggered the response.
	// Structure is documented below.
	TriggeredIntent *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent `pulumi:"triggeredIntent"`
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputInput` via:
//
//	CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs{...}
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs struct {
	// The [Page](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages#Page) on which the utterance was spoken.
	// Structure is documented below.
	CurrentPage CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrInput `pulumi:"currentPage"`
	// The list of differences between the original run and the replay for this output, if any.
	// Structure is documented below.
	Differences CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayInput `pulumi:"differences"`
	// The session parameters available to the bot at this point.
	SessionParameters pulumi.StringPtrInput `pulumi:"sessionParameters"`
	// Response error from the agent in the test result. If set, other output is empty.
	// Structure is documented below.
	Status CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrInput `pulumi:"status"`
	// The text responses from the agent for the turn.
	// Structure is documented below.
	TextResponses CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayInput `pulumi:"textResponses"`
	// The [Intent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents#Intent) that triggered the response.
	// Structure is documented below.
	TriggeredIntent CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrInput `pulumi:"triggeredIntent"`
}

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutput)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput)
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput).ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs, CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtr and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput
}

type cxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrType CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs

func CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtr(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrInput {
	return (*cxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnVirtualAgentOutput)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrType) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrType) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutput)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput)
}

// The [Page](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages#Page) on which the utterance was spoken.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) CurrentPage() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage {
		return v.CurrentPage
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput)
}

// The list of differences between the original run and the replay for this output, if any.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) Differences() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) []CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference {
		return v.Differences
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput)
}

// The session parameters available to the bot at this point.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) SessionParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *string { return v.SessionParameters }).(pulumi.StringPtrOutput)
}

// Response error from the agent in the test result. If set, other output is empty.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) Status() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus {
		return v.Status
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput)
}

// The text responses from the agent for the turn.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) TextResponses() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) []CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse {
		return v.TextResponses
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput)
}

// The [Intent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents#Intent) that triggered the response.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput) TriggeredIntent() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent {
		return v.TriggeredIntent
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnVirtualAgentOutput)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) Elem() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) CxTestCaseLastTestResultConversationTurnVirtualAgentOutput {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnVirtualAgentOutput
		return ret
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput)
}

// The [Page](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages#Page) on which the utterance was spoken.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) CurrentPage() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage {
		if v == nil {
			return nil
		}
		return v.CurrentPage
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput)
}

// The list of differences between the original run and the replay for this output, if any.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) Differences() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) []CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference {
		if v == nil {
			return nil
		}
		return v.Differences
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput)
}

// The session parameters available to the bot at this point.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) SessionParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *string {
		if v == nil {
			return nil
		}
		return v.SessionParameters
	}).(pulumi.StringPtrOutput)
}

// Response error from the agent in the test result. If set, other output is empty.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) Status() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput)
}

// The text responses from the agent for the turn.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) TextResponses() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) []CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse {
		if v == nil {
			return nil
		}
		return v.TextResponses
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput)
}

// The [Intent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents#Intent) that triggered the response.
// Structure is documented below.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput) TriggeredIntent() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutput) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent {
		if v == nil {
			return nil
		}
		return v.TriggeredIntent
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage struct {
	// (Output)
	// The human-readable name of the page, unique within the flow.
	DisplayName *string `pulumi:"displayName"`
	// The unique identifier of the page.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	Name *string `pulumi:"name"`
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageInput` via:
//
//	CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs{...}
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs struct {
	// (Output)
	// The human-readable name of the page, unique within the flow.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The unique identifier of the page.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput)
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput).ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs, CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtr and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput
}

type cxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrType CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs

func CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtr(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrInput {
	return (*cxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrType) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrType) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput)
}

// (Output)
// The human-readable name of the page, unique within the flow.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage) *string {
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the page.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput) Elem() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage
		return ret
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput)
}

// (Output)
// The human-readable name of the page, unique within the flow.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the page.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference struct {
	// A human readable description of the diff, showing the actual output vs expected output.
	Description *string `pulumi:"description"`
	// The type of diff.
	// * INTENT: The intent.
	// * PAGE: The page.
	// * PARAMETERS: The parameters.
	// * UTTERANCE: The message utterance.
	// * FLOW: The flow.
	//   Possible values are: `INTENT`, `PAGE`, `PARAMETERS`, `UTTERANCE`, `FLOW`.
	Type *string `pulumi:"type"`
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArgs and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceInput` via:
//
//	CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArgs{...}
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArgs struct {
	// A human readable description of the diff, showing the actual output vs expected output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The type of diff.
	// * INTENT: The intent.
	// * PAGE: The page.
	// * PARAMETERS: The parameters.
	// * UTTERANCE: The message utterance.
	// * FLOW: The flow.
	//   Possible values are: `INTENT`, `PAGE`, `PARAMETERS`, `UTTERANCE`, `FLOW`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput)
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArray and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayInput` via:
//
//	CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArray{ CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArgs{...} }
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArray []CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceInput

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArray) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArray) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput {
	return o
}

// A human readable description of the diff, showing the actual output vs expected output.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference) *string {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The type of diff.
//   - INTENT: The intent.
//   - PAGE: The page.
//   - PARAMETERS: The parameters.
//   - UTTERANCE: The message utterance.
//   - FLOW: The flow.
//     Possible values are: `INTENT`, `PAGE`, `PARAMETERS`, `UTTERANCE`, `FLOW`.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput) Index(i pulumi.IntInput) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference {
		return vs[0].([]CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifference)[vs[1].(int)]
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A JSON encoded list of messages that carry the error details.
	Details *string `pulumi:"details"`
	// A developer-facing error message.
	Message *string `pulumi:"message"`
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusInput` via:
//
//	CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs{...}
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A JSON encoded list of messages that carry the error details.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// A developer-facing error message.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput)
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput).ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs, CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtr and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput
}

type cxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrType CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs

func CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtr(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrInput {
	return (*cxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrType) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrType) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A JSON encoded list of messages that carry the error details.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// A developer-facing error message.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput) Elem() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus
		return ret
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A JSON encoded list of messages that carry the error details.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus) *string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringPtrOutput)
}

// A developer-facing error message.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse struct {
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArgs and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseInput` via:
//
//	CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArgs{...}
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArgs struct {
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput)
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArray and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayInput` via:
//
//	CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArray{ CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArgs{...} }
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArray []CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseInput

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArray) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArray) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput {
	return o
}

// A collection of text responses.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse) []string {
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput) Index(i pulumi.IntInput) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse {
		return vs[0].([]CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponse)[vs[1].(int)]
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent struct {
	// (Output)
	// The human-readable name of the intent, unique within the agent.
	DisplayName *string `pulumi:"displayName"`
	// The unique identifier of the intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>.
	Name *string `pulumi:"name"`
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentInput` via:
//
//	CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs{...}
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs struct {
	// (Output)
	// The human-readable name of the intent, unique within the agent.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The unique identifier of the intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent)(nil)).Elem()
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput)
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(context.Background())
}

func (i CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput).ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx)
}

// CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrInput is an input type that accepts CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs, CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtr and CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput values.
// You can construct a concrete instance of `CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrInput` via:
//
//	        CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrInput interface {
	pulumi.Input

	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput
	ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput
}

type cxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrType CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs

func CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtr(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrInput {
	return (*cxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrType)(v)
}

func (*cxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent)(nil)).Elem()
}

func (i *cxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrType) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return i.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrType) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o.ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(context.Background())
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent) *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent {
		return &v
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput)
}

// (Output)
// The human-readable name of the intent, unique within the agent.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent) *string {
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the intent.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent)(nil)).Elem()
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) ToCxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx context.Context) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o
}

func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) Elem() CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent) CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent {
		if v != nil {
			return *v
		}
		var ret CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent
		return ret
	}).(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput)
}

// (Output)
// The human-readable name of the intent, unique within the agent.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the intent.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>.
func (o CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntent) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseTestCaseConversationTurn struct {
	// The user input.
	// Structure is documented below.
	UserInput *CxTestCaseTestCaseConversationTurnUserInput `pulumi:"userInput"`
	// The virtual agent output.
	// Structure is documented below.
	VirtualAgentOutput *CxTestCaseTestCaseConversationTurnVirtualAgentOutput `pulumi:"virtualAgentOutput"`
}

// CxTestCaseTestCaseConversationTurnInput is an input type that accepts CxTestCaseTestCaseConversationTurnArgs and CxTestCaseTestCaseConversationTurnOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnInput` via:
//
//	CxTestCaseTestCaseConversationTurnArgs{...}
type CxTestCaseTestCaseConversationTurnInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnOutput() CxTestCaseTestCaseConversationTurnOutput
	ToCxTestCaseTestCaseConversationTurnOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnOutput
}

type CxTestCaseTestCaseConversationTurnArgs struct {
	// The user input.
	// Structure is documented below.
	UserInput CxTestCaseTestCaseConversationTurnUserInputPtrInput `pulumi:"userInput"`
	// The virtual agent output.
	// Structure is documented below.
	VirtualAgentOutput CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrInput `pulumi:"virtualAgentOutput"`
}

func (CxTestCaseTestCaseConversationTurnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurn)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnArgs) ToCxTestCaseTestCaseConversationTurnOutput() CxTestCaseTestCaseConversationTurnOutput {
	return i.ToCxTestCaseTestCaseConversationTurnOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnArgs) ToCxTestCaseTestCaseConversationTurnOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnOutput)
}

// CxTestCaseTestCaseConversationTurnArrayInput is an input type that accepts CxTestCaseTestCaseConversationTurnArray and CxTestCaseTestCaseConversationTurnArrayOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnArrayInput` via:
//
//	CxTestCaseTestCaseConversationTurnArray{ CxTestCaseTestCaseConversationTurnArgs{...} }
type CxTestCaseTestCaseConversationTurnArrayInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnArrayOutput() CxTestCaseTestCaseConversationTurnArrayOutput
	ToCxTestCaseTestCaseConversationTurnArrayOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnArrayOutput
}

type CxTestCaseTestCaseConversationTurnArray []CxTestCaseTestCaseConversationTurnInput

func (CxTestCaseTestCaseConversationTurnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseTestCaseConversationTurn)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnArray) ToCxTestCaseTestCaseConversationTurnArrayOutput() CxTestCaseTestCaseConversationTurnArrayOutput {
	return i.ToCxTestCaseTestCaseConversationTurnArrayOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnArray) ToCxTestCaseTestCaseConversationTurnArrayOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnArrayOutput)
}

type CxTestCaseTestCaseConversationTurnOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurn)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnOutput) ToCxTestCaseTestCaseConversationTurnOutput() CxTestCaseTestCaseConversationTurnOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnOutput) ToCxTestCaseTestCaseConversationTurnOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnOutput {
	return o
}

// The user input.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnOutput) UserInput() CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurn) *CxTestCaseTestCaseConversationTurnUserInput {
		return v.UserInput
	}).(CxTestCaseTestCaseConversationTurnUserInputPtrOutput)
}

// The virtual agent output.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnOutput) VirtualAgentOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurn) *CxTestCaseTestCaseConversationTurnVirtualAgentOutput {
		return v.VirtualAgentOutput
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput)
}

type CxTestCaseTestCaseConversationTurnArrayOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseTestCaseConversationTurn)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnArrayOutput) ToCxTestCaseTestCaseConversationTurnArrayOutput() CxTestCaseTestCaseConversationTurnArrayOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnArrayOutput) ToCxTestCaseTestCaseConversationTurnArrayOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnArrayOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnArrayOutput) Index(i pulumi.IntInput) CxTestCaseTestCaseConversationTurnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxTestCaseTestCaseConversationTurn {
		return vs[0].([]CxTestCaseTestCaseConversationTurn)[vs[1].(int)]
	}).(CxTestCaseTestCaseConversationTurnOutput)
}

type CxTestCaseTestCaseConversationTurnUserInput struct {
	// Whether sentiment analysis is enabled.
	EnableSentimentAnalysis *bool `pulumi:"enableSentimentAnalysis"`
	// Parameters that need to be injected into the conversation during intent detection.
	InjectedParameters *string `pulumi:"injectedParameters"`
	// User input. Supports text input, event input, dtmf input in the test case.
	// Structure is documented below.
	Input *CxTestCaseTestCaseConversationTurnUserInputInputType `pulumi:"input"`
	// If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
	IsWebhookEnabled *bool `pulumi:"isWebhookEnabled"`
}

// CxTestCaseTestCaseConversationTurnUserInputInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputArgs and CxTestCaseTestCaseConversationTurnUserInputOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInput` via:
//
//	CxTestCaseTestCaseConversationTurnUserInputArgs{...}
type CxTestCaseTestCaseConversationTurnUserInputInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputOutput() CxTestCaseTestCaseConversationTurnUserInputOutput
	ToCxTestCaseTestCaseConversationTurnUserInputOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputOutput
}

type CxTestCaseTestCaseConversationTurnUserInputArgs struct {
	// Whether sentiment analysis is enabled.
	EnableSentimentAnalysis pulumi.BoolPtrInput `pulumi:"enableSentimentAnalysis"`
	// Parameters that need to be injected into the conversation during intent detection.
	InjectedParameters pulumi.StringPtrInput `pulumi:"injectedParameters"`
	// User input. Supports text input, event input, dtmf input in the test case.
	// Structure is documented below.
	Input CxTestCaseTestCaseConversationTurnUserInputInputTypePtrInput `pulumi:"input"`
	// If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
	IsWebhookEnabled pulumi.BoolPtrInput `pulumi:"isWebhookEnabled"`
}

func (CxTestCaseTestCaseConversationTurnUserInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInput)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnUserInputArgs) ToCxTestCaseTestCaseConversationTurnUserInputOutput() CxTestCaseTestCaseConversationTurnUserInputOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputArgs) ToCxTestCaseTestCaseConversationTurnUserInputOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputOutput)
}

func (i CxTestCaseTestCaseConversationTurnUserInputArgs) ToCxTestCaseTestCaseConversationTurnUserInputPtrOutput() CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputArgs) ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputOutput).ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(ctx)
}

// CxTestCaseTestCaseConversationTurnUserInputPtrInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputArgs, CxTestCaseTestCaseConversationTurnUserInputPtr and CxTestCaseTestCaseConversationTurnUserInputPtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputPtrInput` via:
//
//	        CxTestCaseTestCaseConversationTurnUserInputArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestCaseConversationTurnUserInputPtrInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputPtrOutput() CxTestCaseTestCaseConversationTurnUserInputPtrOutput
	ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputPtrOutput
}

type cxTestCaseTestCaseConversationTurnUserInputPtrType CxTestCaseTestCaseConversationTurnUserInputArgs

func CxTestCaseTestCaseConversationTurnUserInputPtr(v *CxTestCaseTestCaseConversationTurnUserInputArgs) CxTestCaseTestCaseConversationTurnUserInputPtrInput {
	return (*cxTestCaseTestCaseConversationTurnUserInputPtrType)(v)
}

func (*cxTestCaseTestCaseConversationTurnUserInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInput)(nil)).Elem()
}

func (i *cxTestCaseTestCaseConversationTurnUserInputPtrType) ToCxTestCaseTestCaseConversationTurnUserInputPtrOutput() CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestCaseConversationTurnUserInputPtrType) ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInput)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputOutput) ToCxTestCaseTestCaseConversationTurnUserInputOutput() CxTestCaseTestCaseConversationTurnUserInputOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputOutput) ToCxTestCaseTestCaseConversationTurnUserInputOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputOutput) ToCxTestCaseTestCaseConversationTurnUserInputPtrOutput() CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return o.ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestCaseConversationTurnUserInputOutput) ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestCaseConversationTurnUserInput) *CxTestCaseTestCaseConversationTurnUserInput {
		return &v
	}).(CxTestCaseTestCaseConversationTurnUserInputPtrOutput)
}

// Whether sentiment analysis is enabled.
func (o CxTestCaseTestCaseConversationTurnUserInputOutput) EnableSentimentAnalysis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInput) *bool { return v.EnableSentimentAnalysis }).(pulumi.BoolPtrOutput)
}

// Parameters that need to be injected into the conversation during intent detection.
func (o CxTestCaseTestCaseConversationTurnUserInputOutput) InjectedParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInput) *string { return v.InjectedParameters }).(pulumi.StringPtrOutput)
}

// User input. Supports text input, event input, dtmf input in the test case.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnUserInputOutput) Input() CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInput) *CxTestCaseTestCaseConversationTurnUserInputInputType {
		return v.Input
	}).(CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput)
}

// If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
func (o CxTestCaseTestCaseConversationTurnUserInputOutput) IsWebhookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInput) *bool { return v.IsWebhookEnabled }).(pulumi.BoolPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInput)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputPtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputPtrOutput() CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputPtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputPtrOutput) Elem() CxTestCaseTestCaseConversationTurnUserInputOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInput) CxTestCaseTestCaseConversationTurnUserInput {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestCaseConversationTurnUserInput
		return ret
	}).(CxTestCaseTestCaseConversationTurnUserInputOutput)
}

// Whether sentiment analysis is enabled.
func (o CxTestCaseTestCaseConversationTurnUserInputPtrOutput) EnableSentimentAnalysis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInput) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSentimentAnalysis
	}).(pulumi.BoolPtrOutput)
}

// Parameters that need to be injected into the conversation during intent detection.
func (o CxTestCaseTestCaseConversationTurnUserInputPtrOutput) InjectedParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInput) *string {
		if v == nil {
			return nil
		}
		return v.InjectedParameters
	}).(pulumi.StringPtrOutput)
}

// User input. Supports text input, event input, dtmf input in the test case.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnUserInputPtrOutput) Input() CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInput) *CxTestCaseTestCaseConversationTurnUserInputInputType {
		if v == nil {
			return nil
		}
		return v.Input
	}).(CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput)
}

// If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
func (o CxTestCaseTestCaseConversationTurnUserInputPtrOutput) IsWebhookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInput) *bool {
		if v == nil {
			return nil
		}
		return v.IsWebhookEnabled
	}).(pulumi.BoolPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputType struct {
	// The DTMF event to be handled.
	// Structure is documented below.
	Dtmf *CxTestCaseTestCaseConversationTurnUserInputInputDtmf `pulumi:"dtmf"`
	// The event to be triggered.
	// Structure is documented below.
	Event *CxTestCaseTestCaseConversationTurnUserInputInputEvent `pulumi:"event"`
	// The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
	// Note that queries in the same session do not necessarily need to specify the same language.
	LanguageCode *string `pulumi:"languageCode"`
	// The natural language text to be processed.
	// Structure is documented below.
	Text *CxTestCaseTestCaseConversationTurnUserInputInputText `pulumi:"text"`
}

// CxTestCaseTestCaseConversationTurnUserInputInputTypeInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs and CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInputTypeInput` via:
//
//	CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs{...}
type CxTestCaseTestCaseConversationTurnUserInputInputTypeInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputInputTypeOutput() CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput
	ToCxTestCaseTestCaseConversationTurnUserInputInputTypeOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput
}

type CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs struct {
	// The DTMF event to be handled.
	// Structure is documented below.
	Dtmf CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrInput `pulumi:"dtmf"`
	// The event to be triggered.
	// Structure is documented below.
	Event CxTestCaseTestCaseConversationTurnUserInputInputEventPtrInput `pulumi:"event"`
	// The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
	// Note that queries in the same session do not necessarily need to specify the same language.
	LanguageCode pulumi.StringPtrInput `pulumi:"languageCode"`
	// The natural language text to be processed.
	// Structure is documented below.
	Text CxTestCaseTestCaseConversationTurnUserInputInputTextPtrInput `pulumi:"text"`
}

func (CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputType)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputTypeOutput() CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputTypeOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputTypeOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput)
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput).ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(ctx)
}

// CxTestCaseTestCaseConversationTurnUserInputInputTypePtrInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs, CxTestCaseTestCaseConversationTurnUserInputInputTypePtr and CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInputTypePtrInput` via:
//
//	        CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestCaseConversationTurnUserInputInputTypePtrInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput
	ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput
}

type cxTestCaseTestCaseConversationTurnUserInputInputTypePtrType CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs

func CxTestCaseTestCaseConversationTurnUserInputInputTypePtr(v *CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs) CxTestCaseTestCaseConversationTurnUserInputInputTypePtrInput {
	return (*cxTestCaseTestCaseConversationTurnUserInputInputTypePtrType)(v)
}

func (*cxTestCaseTestCaseConversationTurnUserInputInputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInputInputType)(nil)).Elem()
}

func (i *cxTestCaseTestCaseConversationTurnUserInputInputTypePtrType) ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestCaseConversationTurnUserInputInputTypePtrType) ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputType)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTypeOutput() CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTypeOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return o.ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestCaseConversationTurnUserInputInputType) *CxTestCaseTestCaseConversationTurnUserInputInputType {
		return &v
	}).(CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput)
}

// The DTMF event to be handled.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) Dtmf() CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInputInputType) *CxTestCaseTestCaseConversationTurnUserInputInputDtmf {
		return v.Dtmf
	}).(CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput)
}

// The event to be triggered.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) Event() CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInputInputType) *CxTestCaseTestCaseConversationTurnUserInputInputEvent {
		return v.Event
	}).(CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput)
}

// The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
// Note that queries in the same session do not necessarily need to specify the same language.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInputInputType) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// The natural language text to be processed.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput) Text() CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInputInputType) *CxTestCaseTestCaseConversationTurnUserInputInputText {
		return v.Text
	}).(CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInputInputType)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput) Elem() CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputType) CxTestCaseTestCaseConversationTurnUserInputInputType {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestCaseConversationTurnUserInputInputType
		return ret
	}).(CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput)
}

// The DTMF event to be handled.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput) Dtmf() CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputType) *CxTestCaseTestCaseConversationTurnUserInputInputDtmf {
		if v == nil {
			return nil
		}
		return v.Dtmf
	}).(CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput)
}

// The event to be triggered.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput) Event() CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputType) *CxTestCaseTestCaseConversationTurnUserInputInputEvent {
		if v == nil {
			return nil
		}
		return v.Event
	}).(CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput)
}

// The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
// Note that queries in the same session do not necessarily need to specify the same language.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputType) *string {
		if v == nil {
			return nil
		}
		return v.LanguageCode
	}).(pulumi.StringPtrOutput)
}

// The natural language text to be processed.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput) Text() CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputType) *CxTestCaseTestCaseConversationTurnUserInputInputText {
		if v == nil {
			return nil
		}
		return v.Text
	}).(CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputDtmf struct {
	// The dtmf digits.
	Digits *string `pulumi:"digits"`
	// The finish digit (if any).
	FinishDigit *string `pulumi:"finishDigit"`
}

// CxTestCaseTestCaseConversationTurnUserInputInputDtmfInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs and CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInputDtmfInput` via:
//
//	CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs{...}
type CxTestCaseTestCaseConversationTurnUserInputInputDtmfInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput() CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput
	ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput
}

type CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs struct {
	// The dtmf digits.
	Digits pulumi.StringPtrInput `pulumi:"digits"`
	// The finish digit (if any).
	FinishDigit pulumi.StringPtrInput `pulumi:"finishDigit"`
}

func (CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputDtmf)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput() CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput)
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput).ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx)
}

// CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs, CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtr and CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrInput` via:
//
//	        CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput
	ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput
}

type cxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrType CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs

func CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtr(v *CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs) CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrInput {
	return (*cxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrType)(v)
}

func (*cxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInputInputDtmf)(nil)).Elem()
}

func (i *cxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrType) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrType) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputDtmf)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput() CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return o.ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestCaseConversationTurnUserInputInputDtmf) *CxTestCaseTestCaseConversationTurnUserInputInputDtmf {
		return &v
	}).(CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput)
}

// The dtmf digits.
func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput) Digits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInputInputDtmf) *string { return v.Digits }).(pulumi.StringPtrOutput)
}

// The finish digit (if any).
func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInputInputDtmf) *string { return v.FinishDigit }).(pulumi.StringPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInputInputDtmf)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput) Elem() CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputDtmf) CxTestCaseTestCaseConversationTurnUserInputInputDtmf {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestCaseConversationTurnUserInputInputDtmf
		return ret
	}).(CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput)
}

// The dtmf digits.
func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput) Digits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputDtmf) *string {
		if v == nil {
			return nil
		}
		return v.Digits
	}).(pulumi.StringPtrOutput)
}

// The finish digit (if any).
func (o CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput) FinishDigit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputDtmf) *string {
		if v == nil {
			return nil
		}
		return v.FinishDigit
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputEvent struct {
	// Name of the event.
	Event string `pulumi:"event"`
}

// CxTestCaseTestCaseConversationTurnUserInputInputEventInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputInputEventArgs and CxTestCaseTestCaseConversationTurnUserInputInputEventOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInputEventInput` via:
//
//	CxTestCaseTestCaseConversationTurnUserInputInputEventArgs{...}
type CxTestCaseTestCaseConversationTurnUserInputInputEventInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputInputEventOutput() CxTestCaseTestCaseConversationTurnUserInputInputEventOutput
	ToCxTestCaseTestCaseConversationTurnUserInputInputEventOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputInputEventOutput
}

type CxTestCaseTestCaseConversationTurnUserInputInputEventArgs struct {
	// Name of the event.
	Event pulumi.StringInput `pulumi:"event"`
}

func (CxTestCaseTestCaseConversationTurnUserInputInputEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputEvent)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputEventArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputEventOutput() CxTestCaseTestCaseConversationTurnUserInputInputEventOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputEventOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputEventArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputEventOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputEventOutput)
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputEventArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputEventArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputEventOutput).ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(ctx)
}

// CxTestCaseTestCaseConversationTurnUserInputInputEventPtrInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputInputEventArgs, CxTestCaseTestCaseConversationTurnUserInputInputEventPtr and CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInputEventPtrInput` via:
//
//	        CxTestCaseTestCaseConversationTurnUserInputInputEventArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestCaseConversationTurnUserInputInputEventPtrInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput
	ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput
}

type cxTestCaseTestCaseConversationTurnUserInputInputEventPtrType CxTestCaseTestCaseConversationTurnUserInputInputEventArgs

func CxTestCaseTestCaseConversationTurnUserInputInputEventPtr(v *CxTestCaseTestCaseConversationTurnUserInputInputEventArgs) CxTestCaseTestCaseConversationTurnUserInputInputEventPtrInput {
	return (*cxTestCaseTestCaseConversationTurnUserInputInputEventPtrType)(v)
}

func (*cxTestCaseTestCaseConversationTurnUserInputInputEventPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInputInputEvent)(nil)).Elem()
}

func (i *cxTestCaseTestCaseConversationTurnUserInputInputEventPtrType) ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestCaseConversationTurnUserInputInputEventPtrType) ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputEventOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputInputEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputEvent)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputEventOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputEventOutput() CxTestCaseTestCaseConversationTurnUserInputInputEventOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputEventOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputEventOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputEventOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputEventOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return o.ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputEventOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestCaseConversationTurnUserInputInputEvent) *CxTestCaseTestCaseConversationTurnUserInputInputEvent {
		return &v
	}).(CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput)
}

// Name of the event.
func (o CxTestCaseTestCaseConversationTurnUserInputInputEventOutput) Event() pulumi.StringOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInputInputEvent) string { return v.Event }).(pulumi.StringOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInputInputEvent)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput) Elem() CxTestCaseTestCaseConversationTurnUserInputInputEventOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputEvent) CxTestCaseTestCaseConversationTurnUserInputInputEvent {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestCaseConversationTurnUserInputInputEvent
		return ret
	}).(CxTestCaseTestCaseConversationTurnUserInputInputEventOutput)
}

// Name of the event.
func (o CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputEvent) *string {
		if v == nil {
			return nil
		}
		return &v.Event
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputText struct {
	// The natural language text to be processed. Text length must not exceed 256 characters.
	Text string `pulumi:"text"`
}

// CxTestCaseTestCaseConversationTurnUserInputInputTextInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputInputTextArgs and CxTestCaseTestCaseConversationTurnUserInputInputTextOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInputTextInput` via:
//
//	CxTestCaseTestCaseConversationTurnUserInputInputTextArgs{...}
type CxTestCaseTestCaseConversationTurnUserInputInputTextInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputInputTextOutput() CxTestCaseTestCaseConversationTurnUserInputInputTextOutput
	ToCxTestCaseTestCaseConversationTurnUserInputInputTextOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTextOutput
}

type CxTestCaseTestCaseConversationTurnUserInputInputTextArgs struct {
	// The natural language text to be processed. Text length must not exceed 256 characters.
	Text pulumi.StringInput `pulumi:"text"`
}

func (CxTestCaseTestCaseConversationTurnUserInputInputTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputText)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputTextArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputTextOutput() CxTestCaseTestCaseConversationTurnUserInputInputTextOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputTextOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputTextArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputTextOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputTextOutput)
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputTextArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnUserInputInputTextArgs) ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputTextOutput).ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(ctx)
}

// CxTestCaseTestCaseConversationTurnUserInputInputTextPtrInput is an input type that accepts CxTestCaseTestCaseConversationTurnUserInputInputTextArgs, CxTestCaseTestCaseConversationTurnUserInputInputTextPtr and CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnUserInputInputTextPtrInput` via:
//
//	        CxTestCaseTestCaseConversationTurnUserInputInputTextArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestCaseConversationTurnUserInputInputTextPtrInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput
	ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput
}

type cxTestCaseTestCaseConversationTurnUserInputInputTextPtrType CxTestCaseTestCaseConversationTurnUserInputInputTextArgs

func CxTestCaseTestCaseConversationTurnUserInputInputTextPtr(v *CxTestCaseTestCaseConversationTurnUserInputInputTextArgs) CxTestCaseTestCaseConversationTurnUserInputInputTextPtrInput {
	return (*cxTestCaseTestCaseConversationTurnUserInputInputTextPtrType)(v)
}

func (*cxTestCaseTestCaseConversationTurnUserInputInputTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInputInputText)(nil)).Elem()
}

func (i *cxTestCaseTestCaseConversationTurnUserInputInputTextPtrType) ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestCaseConversationTurnUserInputInputTextPtrType) ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputTextOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputInputTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputText)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTextOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTextOutput() CxTestCaseTestCaseConversationTurnUserInputInputTextOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTextOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTextOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTextOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTextOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return o.ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTextOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestCaseConversationTurnUserInputInputText) *CxTestCaseTestCaseConversationTurnUserInputInputText {
		return &v
	}).(CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput)
}

// The natural language text to be processed. Text length must not exceed 256 characters.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTextOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnUserInputInputText) string { return v.Text }).(pulumi.StringOutput)
}

type CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnUserInputInputText)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput() CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput) ToCxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput) Elem() CxTestCaseTestCaseConversationTurnUserInputInputTextOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputText) CxTestCaseTestCaseConversationTurnUserInputInputText {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestCaseConversationTurnUserInputInputText
		return ret
	}).(CxTestCaseTestCaseConversationTurnUserInputInputTextOutput)
}

// The natural language text to be processed. Text length must not exceed 256 characters.
func (o CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnUserInputInputText) *string {
		if v == nil {
			return nil
		}
		return &v.Text
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutput struct {
	// The [Page](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages#Page) on which the utterance was spoken.
	// Structure is documented below.
	CurrentPage *CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage `pulumi:"currentPage"`
	// The session parameters available to the bot at this point.
	SessionParameters *string `pulumi:"sessionParameters"`
	// The text responses from the agent for the turn.
	// Structure is documented below.
	TextResponses []CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse `pulumi:"textResponses"`
	// The [Intent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents#Intent) that triggered the response.
	// Structure is documented below.
	TriggeredIntent *CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent `pulumi:"triggeredIntent"`
}

// CxTestCaseTestCaseConversationTurnVirtualAgentOutputInput is an input type that accepts CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs and CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnVirtualAgentOutputInput` via:
//
//	CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs{...}
type CxTestCaseTestCaseConversationTurnVirtualAgentOutputInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput
	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs struct {
	// The [Page](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages#Page) on which the utterance was spoken.
	// Structure is documented below.
	CurrentPage CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrInput `pulumi:"currentPage"`
	// The session parameters available to the bot at this point.
	SessionParameters pulumi.StringPtrInput `pulumi:"sessionParameters"`
	// The text responses from the agent for the turn.
	// Structure is documented below.
	TextResponses CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayInput `pulumi:"textResponses"`
	// The [Intent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents#Intent) that triggered the response.
	// Structure is documented below.
	TriggeredIntent CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrInput `pulumi:"triggeredIntent"`
}

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutput)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput)
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput).ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx)
}

// CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrInput is an input type that accepts CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs, CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtr and CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrInput` via:
//
//	        CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput
	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput
}

type cxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrType CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs

func CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtr(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs) CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrInput {
	return (*cxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrType)(v)
}

func (*cxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnVirtualAgentOutput)(nil)).Elem()
}

func (i *cxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrType) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrType) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutput)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return o.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestCaseConversationTurnVirtualAgentOutput) *CxTestCaseTestCaseConversationTurnVirtualAgentOutput {
		return &v
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput)
}

// The [Page](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages#Page) on which the utterance was spoken.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) CurrentPage() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutput) *CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage {
		return v.CurrentPage
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput)
}

// The session parameters available to the bot at this point.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) SessionParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutput) *string { return v.SessionParameters }).(pulumi.StringPtrOutput)
}

// The text responses from the agent for the turn.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) TextResponses() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutput) []CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse {
		return v.TextResponses
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput)
}

// The [Intent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents#Intent) that triggered the response.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput) TriggeredIntent() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutput) *CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent {
		return v.TriggeredIntent
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnVirtualAgentOutput)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput) Elem() CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutput) CxTestCaseTestCaseConversationTurnVirtualAgentOutput {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestCaseConversationTurnVirtualAgentOutput
		return ret
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput)
}

// The [Page](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages#Page) on which the utterance was spoken.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput) CurrentPage() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutput) *CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage {
		if v == nil {
			return nil
		}
		return v.CurrentPage
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput)
}

// The session parameters available to the bot at this point.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput) SessionParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutput) *string {
		if v == nil {
			return nil
		}
		return v.SessionParameters
	}).(pulumi.StringPtrOutput)
}

// The text responses from the agent for the turn.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput) TextResponses() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutput) []CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse {
		if v == nil {
			return nil
		}
		return v.TextResponses
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput)
}

// The [Intent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents#Intent) that triggered the response.
// Structure is documented below.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput) TriggeredIntent() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutput) *CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent {
		if v == nil {
			return nil
		}
		return v.TriggeredIntent
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage struct {
	// (Output)
	// The human-readable name of the page, unique within the flow.
	DisplayName *string `pulumi:"displayName"`
	// The unique identifier of the page.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	Name *string `pulumi:"name"`
}

// CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageInput is an input type that accepts CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs and CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageInput` via:
//
//	CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs{...}
type CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput
	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs struct {
	// (Output)
	// The human-readable name of the page, unique within the flow.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The unique identifier of the page.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput)
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput).ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx)
}

// CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrInput is an input type that accepts CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs, CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtr and CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrInput` via:
//
//	        CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput
	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput
}

type cxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrType CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs

func CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtr(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrInput {
	return (*cxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrType)(v)
}

func (*cxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage)(nil)).Elem()
}

func (i *cxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrType) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrType) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage) *CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage {
		return &v
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput)
}

// (Output)
// The human-readable name of the page, unique within the flow.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier of the page.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput) Elem() CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage) CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage
		return ret
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput)
}

// (Output)
// The human-readable name of the page, unique within the flow.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the page.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse struct {
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseInput is an input type that accepts CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs and CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseInput` via:
//
//	CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs{...}
type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput
	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs struct {
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput)
}

// CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayInput is an input type that accepts CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArray and CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayInput` via:
//
//	CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArray{ CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs{...} }
type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput
	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArray []CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseInput

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArray) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArray) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput {
	return o
}

// A collection of text responses.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput) Index(i pulumi.IntInput) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse {
		return vs[0].([]CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponse)[vs[1].(int)]
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent struct {
	// (Output)
	// The human-readable name of the intent, unique within the agent.
	DisplayName *string `pulumi:"displayName"`
	// The unique identifier of the intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>.
	Name *string `pulumi:"name"`
}

// CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentInput is an input type that accepts CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs and CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentInput` via:
//
//	CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs{...}
type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput
	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs struct {
	// (Output)
	// The human-readable name of the intent, unique within the agent.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The unique identifier of the intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent)(nil)).Elem()
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput)
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput).ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx)
}

// CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrInput is an input type that accepts CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs, CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtr and CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrInput` via:
//
//	        CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrInput interface {
	pulumi.Input

	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput
	ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput
}

type cxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrType CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs

func CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtr(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrInput {
	return (*cxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrType)(v)
}

func (*cxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent)(nil)).Elem()
}

func (i *cxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrType) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return i.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrType) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o.ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent) *CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent {
		return &v
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput)
}

// (Output)
// The human-readable name of the intent, unique within the agent.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent) *string {
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the intent.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent)(nil)).Elem()
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) ToCxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutputWithContext(ctx context.Context) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput {
	return o
}

func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) Elem() CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent) CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent
		return ret
	}).(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput)
}

// (Output)
// The human-readable name of the intent, unique within the agent.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the intent.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>.
func (o CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntent) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type CxTestCaseTestConfig struct {
	// Flow name to start the test case with.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	// Only one of flow and page should be set to indicate the starting point of the test case. If neither is set, the test case will start with start page on the default start flow.
	Flow *string `pulumi:"flow"`
	// The page to start the test case with.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	// Only one of flow and page should be set to indicate the starting point of the test case. If neither is set, the test case will start with start page on the default start flow.
	Page *string `pulumi:"page"`
	// Session parameters to be compared when calculating differences.
	TrackingParameters []string `pulumi:"trackingParameters"`
}

// CxTestCaseTestConfigInput is an input type that accepts CxTestCaseTestConfigArgs and CxTestCaseTestConfigOutput values.
// You can construct a concrete instance of `CxTestCaseTestConfigInput` via:
//
//	CxTestCaseTestConfigArgs{...}
type CxTestCaseTestConfigInput interface {
	pulumi.Input

	ToCxTestCaseTestConfigOutput() CxTestCaseTestConfigOutput
	ToCxTestCaseTestConfigOutputWithContext(context.Context) CxTestCaseTestConfigOutput
}

type CxTestCaseTestConfigArgs struct {
	// Flow name to start the test case with.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	// Only one of flow and page should be set to indicate the starting point of the test case. If neither is set, the test case will start with start page on the default start flow.
	Flow pulumi.StringPtrInput `pulumi:"flow"`
	// The page to start the test case with.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	// Only one of flow and page should be set to indicate the starting point of the test case. If neither is set, the test case will start with start page on the default start flow.
	Page pulumi.StringPtrInput `pulumi:"page"`
	// Session parameters to be compared when calculating differences.
	TrackingParameters pulumi.StringArrayInput `pulumi:"trackingParameters"`
}

func (CxTestCaseTestConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestConfig)(nil)).Elem()
}

func (i CxTestCaseTestConfigArgs) ToCxTestCaseTestConfigOutput() CxTestCaseTestConfigOutput {
	return i.ToCxTestCaseTestConfigOutputWithContext(context.Background())
}

func (i CxTestCaseTestConfigArgs) ToCxTestCaseTestConfigOutputWithContext(ctx context.Context) CxTestCaseTestConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestConfigOutput)
}

func (i CxTestCaseTestConfigArgs) ToCxTestCaseTestConfigPtrOutput() CxTestCaseTestConfigPtrOutput {
	return i.ToCxTestCaseTestConfigPtrOutputWithContext(context.Background())
}

func (i CxTestCaseTestConfigArgs) ToCxTestCaseTestConfigPtrOutputWithContext(ctx context.Context) CxTestCaseTestConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestConfigOutput).ToCxTestCaseTestConfigPtrOutputWithContext(ctx)
}

// CxTestCaseTestConfigPtrInput is an input type that accepts CxTestCaseTestConfigArgs, CxTestCaseTestConfigPtr and CxTestCaseTestConfigPtrOutput values.
// You can construct a concrete instance of `CxTestCaseTestConfigPtrInput` via:
//
//	        CxTestCaseTestConfigArgs{...}
//
//	or:
//
//	        nil
type CxTestCaseTestConfigPtrInput interface {
	pulumi.Input

	ToCxTestCaseTestConfigPtrOutput() CxTestCaseTestConfigPtrOutput
	ToCxTestCaseTestConfigPtrOutputWithContext(context.Context) CxTestCaseTestConfigPtrOutput
}

type cxTestCaseTestConfigPtrType CxTestCaseTestConfigArgs

func CxTestCaseTestConfigPtr(v *CxTestCaseTestConfigArgs) CxTestCaseTestConfigPtrInput {
	return (*cxTestCaseTestConfigPtrType)(v)
}

func (*cxTestCaseTestConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestConfig)(nil)).Elem()
}

func (i *cxTestCaseTestConfigPtrType) ToCxTestCaseTestConfigPtrOutput() CxTestCaseTestConfigPtrOutput {
	return i.ToCxTestCaseTestConfigPtrOutputWithContext(context.Background())
}

func (i *cxTestCaseTestConfigPtrType) ToCxTestCaseTestConfigPtrOutputWithContext(ctx context.Context) CxTestCaseTestConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxTestCaseTestConfigPtrOutput)
}

type CxTestCaseTestConfigOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxTestCaseTestConfig)(nil)).Elem()
}

func (o CxTestCaseTestConfigOutput) ToCxTestCaseTestConfigOutput() CxTestCaseTestConfigOutput {
	return o
}

func (o CxTestCaseTestConfigOutput) ToCxTestCaseTestConfigOutputWithContext(ctx context.Context) CxTestCaseTestConfigOutput {
	return o
}

func (o CxTestCaseTestConfigOutput) ToCxTestCaseTestConfigPtrOutput() CxTestCaseTestConfigPtrOutput {
	return o.ToCxTestCaseTestConfigPtrOutputWithContext(context.Background())
}

func (o CxTestCaseTestConfigOutput) ToCxTestCaseTestConfigPtrOutputWithContext(ctx context.Context) CxTestCaseTestConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxTestCaseTestConfig) *CxTestCaseTestConfig {
		return &v
	}).(CxTestCaseTestConfigPtrOutput)
}

// Flow name to start the test case with.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
// Only one of flow and page should be set to indicate the starting point of the test case. If neither is set, the test case will start with start page on the default start flow.
func (o CxTestCaseTestConfigOutput) Flow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestConfig) *string { return v.Flow }).(pulumi.StringPtrOutput)
}

// The page to start the test case with.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
// Only one of flow and page should be set to indicate the starting point of the test case. If neither is set, the test case will start with start page on the default start flow.
func (o CxTestCaseTestConfigOutput) Page() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxTestCaseTestConfig) *string { return v.Page }).(pulumi.StringPtrOutput)
}

// Session parameters to be compared when calculating differences.
func (o CxTestCaseTestConfigOutput) TrackingParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxTestCaseTestConfig) []string { return v.TrackingParameters }).(pulumi.StringArrayOutput)
}

type CxTestCaseTestConfigPtrOutput struct{ *pulumi.OutputState }

func (CxTestCaseTestConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxTestCaseTestConfig)(nil)).Elem()
}

func (o CxTestCaseTestConfigPtrOutput) ToCxTestCaseTestConfigPtrOutput() CxTestCaseTestConfigPtrOutput {
	return o
}

func (o CxTestCaseTestConfigPtrOutput) ToCxTestCaseTestConfigPtrOutputWithContext(ctx context.Context) CxTestCaseTestConfigPtrOutput {
	return o
}

func (o CxTestCaseTestConfigPtrOutput) Elem() CxTestCaseTestConfigOutput {
	return o.ApplyT(func(v *CxTestCaseTestConfig) CxTestCaseTestConfig {
		if v != nil {
			return *v
		}
		var ret CxTestCaseTestConfig
		return ret
	}).(CxTestCaseTestConfigOutput)
}

// Flow name to start the test case with.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
// Only one of flow and page should be set to indicate the starting point of the test case. If neither is set, the test case will start with start page on the default start flow.
func (o CxTestCaseTestConfigPtrOutput) Flow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestConfig) *string {
		if v == nil {
			return nil
		}
		return v.Flow
	}).(pulumi.StringPtrOutput)
}

// The page to start the test case with.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
// Only one of flow and page should be set to indicate the starting point of the test case. If neither is set, the test case will start with start page on the default start flow.
func (o CxTestCaseTestConfigPtrOutput) Page() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxTestCaseTestConfig) *string {
		if v == nil {
			return nil
		}
		return v.Page
	}).(pulumi.StringPtrOutput)
}

// Session parameters to be compared when calculating differences.
func (o CxTestCaseTestConfigPtrOutput) TrackingParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxTestCaseTestConfig) []string {
		if v == nil {
			return nil
		}
		return v.TrackingParameters
	}).(pulumi.StringArrayOutput)
}

type CxVersionNluSetting struct {
	// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered.
	// The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
	ClassificationThreshold *float64 `pulumi:"classificationThreshold"`
	// Indicates NLU model training mode.
	// * MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
	// * MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
	//   Possible values are: `MODEL_TRAINING_MODE_AUTOMATIC`, `MODEL_TRAINING_MODE_MANUAL`.
	ModelTrainingMode *string `pulumi:"modelTrainingMode"`
	// Indicates the type of NLU model.
	// * MODEL_TYPE_STANDARD: Use standard NLU model.
	// * MODEL_TYPE_ADVANCED: Use advanced NLU model.
	//   Possible values are: `MODEL_TYPE_STANDARD`, `MODEL_TYPE_ADVANCED`.
	ModelType *string `pulumi:"modelType"`
}

// CxVersionNluSettingInput is an input type that accepts CxVersionNluSettingArgs and CxVersionNluSettingOutput values.
// You can construct a concrete instance of `CxVersionNluSettingInput` via:
//
//	CxVersionNluSettingArgs{...}
type CxVersionNluSettingInput interface {
	pulumi.Input

	ToCxVersionNluSettingOutput() CxVersionNluSettingOutput
	ToCxVersionNluSettingOutputWithContext(context.Context) CxVersionNluSettingOutput
}

type CxVersionNluSettingArgs struct {
	// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered.
	// The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
	ClassificationThreshold pulumi.Float64PtrInput `pulumi:"classificationThreshold"`
	// Indicates NLU model training mode.
	// * MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
	// * MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
	//   Possible values are: `MODEL_TRAINING_MODE_AUTOMATIC`, `MODEL_TRAINING_MODE_MANUAL`.
	ModelTrainingMode pulumi.StringPtrInput `pulumi:"modelTrainingMode"`
	// Indicates the type of NLU model.
	// * MODEL_TYPE_STANDARD: Use standard NLU model.
	// * MODEL_TYPE_ADVANCED: Use advanced NLU model.
	//   Possible values are: `MODEL_TYPE_STANDARD`, `MODEL_TYPE_ADVANCED`.
	ModelType pulumi.StringPtrInput `pulumi:"modelType"`
}

func (CxVersionNluSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxVersionNluSetting)(nil)).Elem()
}

func (i CxVersionNluSettingArgs) ToCxVersionNluSettingOutput() CxVersionNluSettingOutput {
	return i.ToCxVersionNluSettingOutputWithContext(context.Background())
}

func (i CxVersionNluSettingArgs) ToCxVersionNluSettingOutputWithContext(ctx context.Context) CxVersionNluSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxVersionNluSettingOutput)
}

// CxVersionNluSettingArrayInput is an input type that accepts CxVersionNluSettingArray and CxVersionNluSettingArrayOutput values.
// You can construct a concrete instance of `CxVersionNluSettingArrayInput` via:
//
//	CxVersionNluSettingArray{ CxVersionNluSettingArgs{...} }
type CxVersionNluSettingArrayInput interface {
	pulumi.Input

	ToCxVersionNluSettingArrayOutput() CxVersionNluSettingArrayOutput
	ToCxVersionNluSettingArrayOutputWithContext(context.Context) CxVersionNluSettingArrayOutput
}

type CxVersionNluSettingArray []CxVersionNluSettingInput

func (CxVersionNluSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxVersionNluSetting)(nil)).Elem()
}

func (i CxVersionNluSettingArray) ToCxVersionNluSettingArrayOutput() CxVersionNluSettingArrayOutput {
	return i.ToCxVersionNluSettingArrayOutputWithContext(context.Background())
}

func (i CxVersionNluSettingArray) ToCxVersionNluSettingArrayOutputWithContext(ctx context.Context) CxVersionNluSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxVersionNluSettingArrayOutput)
}

type CxVersionNluSettingOutput struct{ *pulumi.OutputState }

func (CxVersionNluSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxVersionNluSetting)(nil)).Elem()
}

func (o CxVersionNluSettingOutput) ToCxVersionNluSettingOutput() CxVersionNluSettingOutput {
	return o
}

func (o CxVersionNluSettingOutput) ToCxVersionNluSettingOutputWithContext(ctx context.Context) CxVersionNluSettingOutput {
	return o
}

// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered.
// The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
func (o CxVersionNluSettingOutput) ClassificationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CxVersionNluSetting) *float64 { return v.ClassificationThreshold }).(pulumi.Float64PtrOutput)
}

// Indicates NLU model training mode.
//   - MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
//   - MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
//     Possible values are: `MODEL_TRAINING_MODE_AUTOMATIC`, `MODEL_TRAINING_MODE_MANUAL`.
func (o CxVersionNluSettingOutput) ModelTrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxVersionNluSetting) *string { return v.ModelTrainingMode }).(pulumi.StringPtrOutput)
}

// Indicates the type of NLU model.
//   - MODEL_TYPE_STANDARD: Use standard NLU model.
//   - MODEL_TYPE_ADVANCED: Use advanced NLU model.
//     Possible values are: `MODEL_TYPE_STANDARD`, `MODEL_TYPE_ADVANCED`.
func (o CxVersionNluSettingOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxVersionNluSetting) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

type CxVersionNluSettingArrayOutput struct{ *pulumi.OutputState }

func (CxVersionNluSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxVersionNluSetting)(nil)).Elem()
}

func (o CxVersionNluSettingArrayOutput) ToCxVersionNluSettingArrayOutput() CxVersionNluSettingArrayOutput {
	return o
}

func (o CxVersionNluSettingArrayOutput) ToCxVersionNluSettingArrayOutputWithContext(ctx context.Context) CxVersionNluSettingArrayOutput {
	return o
}

func (o CxVersionNluSettingArrayOutput) Index(i pulumi.IntInput) CxVersionNluSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxVersionNluSetting {
		return vs[0].([]CxVersionNluSetting)[vs[1].(int)]
	}).(CxVersionNluSettingOutput)
}

type CxWebhookGenericWebService struct {
	// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
	AllowedCaCerts []string `pulumi:"allowedCaCerts"`
	// The HTTP request headers to send together with webhook requests.
	RequestHeaders map[string]string `pulumi:"requestHeaders"`
	// Whether to use speech adaptation for speech recognition.
	Uri string `pulumi:"uri"`
}

// CxWebhookGenericWebServiceInput is an input type that accepts CxWebhookGenericWebServiceArgs and CxWebhookGenericWebServiceOutput values.
// You can construct a concrete instance of `CxWebhookGenericWebServiceInput` via:
//
//	CxWebhookGenericWebServiceArgs{...}
type CxWebhookGenericWebServiceInput interface {
	pulumi.Input

	ToCxWebhookGenericWebServiceOutput() CxWebhookGenericWebServiceOutput
	ToCxWebhookGenericWebServiceOutputWithContext(context.Context) CxWebhookGenericWebServiceOutput
}

type CxWebhookGenericWebServiceArgs struct {
	// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
	AllowedCaCerts pulumi.StringArrayInput `pulumi:"allowedCaCerts"`
	// The HTTP request headers to send together with webhook requests.
	RequestHeaders pulumi.StringMapInput `pulumi:"requestHeaders"`
	// Whether to use speech adaptation for speech recognition.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (CxWebhookGenericWebServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxWebhookGenericWebService)(nil)).Elem()
}

func (i CxWebhookGenericWebServiceArgs) ToCxWebhookGenericWebServiceOutput() CxWebhookGenericWebServiceOutput {
	return i.ToCxWebhookGenericWebServiceOutputWithContext(context.Background())
}

func (i CxWebhookGenericWebServiceArgs) ToCxWebhookGenericWebServiceOutputWithContext(ctx context.Context) CxWebhookGenericWebServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookGenericWebServiceOutput)
}

func (i CxWebhookGenericWebServiceArgs) ToCxWebhookGenericWebServicePtrOutput() CxWebhookGenericWebServicePtrOutput {
	return i.ToCxWebhookGenericWebServicePtrOutputWithContext(context.Background())
}

func (i CxWebhookGenericWebServiceArgs) ToCxWebhookGenericWebServicePtrOutputWithContext(ctx context.Context) CxWebhookGenericWebServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookGenericWebServiceOutput).ToCxWebhookGenericWebServicePtrOutputWithContext(ctx)
}

// CxWebhookGenericWebServicePtrInput is an input type that accepts CxWebhookGenericWebServiceArgs, CxWebhookGenericWebServicePtr and CxWebhookGenericWebServicePtrOutput values.
// You can construct a concrete instance of `CxWebhookGenericWebServicePtrInput` via:
//
//	        CxWebhookGenericWebServiceArgs{...}
//
//	or:
//
//	        nil
type CxWebhookGenericWebServicePtrInput interface {
	pulumi.Input

	ToCxWebhookGenericWebServicePtrOutput() CxWebhookGenericWebServicePtrOutput
	ToCxWebhookGenericWebServicePtrOutputWithContext(context.Context) CxWebhookGenericWebServicePtrOutput
}

type cxWebhookGenericWebServicePtrType CxWebhookGenericWebServiceArgs

func CxWebhookGenericWebServicePtr(v *CxWebhookGenericWebServiceArgs) CxWebhookGenericWebServicePtrInput {
	return (*cxWebhookGenericWebServicePtrType)(v)
}

func (*cxWebhookGenericWebServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxWebhookGenericWebService)(nil)).Elem()
}

func (i *cxWebhookGenericWebServicePtrType) ToCxWebhookGenericWebServicePtrOutput() CxWebhookGenericWebServicePtrOutput {
	return i.ToCxWebhookGenericWebServicePtrOutputWithContext(context.Background())
}

func (i *cxWebhookGenericWebServicePtrType) ToCxWebhookGenericWebServicePtrOutputWithContext(ctx context.Context) CxWebhookGenericWebServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookGenericWebServicePtrOutput)
}

type CxWebhookGenericWebServiceOutput struct{ *pulumi.OutputState }

func (CxWebhookGenericWebServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxWebhookGenericWebService)(nil)).Elem()
}

func (o CxWebhookGenericWebServiceOutput) ToCxWebhookGenericWebServiceOutput() CxWebhookGenericWebServiceOutput {
	return o
}

func (o CxWebhookGenericWebServiceOutput) ToCxWebhookGenericWebServiceOutputWithContext(ctx context.Context) CxWebhookGenericWebServiceOutput {
	return o
}

func (o CxWebhookGenericWebServiceOutput) ToCxWebhookGenericWebServicePtrOutput() CxWebhookGenericWebServicePtrOutput {
	return o.ToCxWebhookGenericWebServicePtrOutputWithContext(context.Background())
}

func (o CxWebhookGenericWebServiceOutput) ToCxWebhookGenericWebServicePtrOutputWithContext(ctx context.Context) CxWebhookGenericWebServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxWebhookGenericWebService) *CxWebhookGenericWebService {
		return &v
	}).(CxWebhookGenericWebServicePtrOutput)
}

// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
func (o CxWebhookGenericWebServiceOutput) AllowedCaCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxWebhookGenericWebService) []string { return v.AllowedCaCerts }).(pulumi.StringArrayOutput)
}

// The HTTP request headers to send together with webhook requests.
func (o CxWebhookGenericWebServiceOutput) RequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v CxWebhookGenericWebService) map[string]string { return v.RequestHeaders }).(pulumi.StringMapOutput)
}

// Whether to use speech adaptation for speech recognition.
func (o CxWebhookGenericWebServiceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CxWebhookGenericWebService) string { return v.Uri }).(pulumi.StringOutput)
}

type CxWebhookGenericWebServicePtrOutput struct{ *pulumi.OutputState }

func (CxWebhookGenericWebServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxWebhookGenericWebService)(nil)).Elem()
}

func (o CxWebhookGenericWebServicePtrOutput) ToCxWebhookGenericWebServicePtrOutput() CxWebhookGenericWebServicePtrOutput {
	return o
}

func (o CxWebhookGenericWebServicePtrOutput) ToCxWebhookGenericWebServicePtrOutputWithContext(ctx context.Context) CxWebhookGenericWebServicePtrOutput {
	return o
}

func (o CxWebhookGenericWebServicePtrOutput) Elem() CxWebhookGenericWebServiceOutput {
	return o.ApplyT(func(v *CxWebhookGenericWebService) CxWebhookGenericWebService {
		if v != nil {
			return *v
		}
		var ret CxWebhookGenericWebService
		return ret
	}).(CxWebhookGenericWebServiceOutput)
}

// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
func (o CxWebhookGenericWebServicePtrOutput) AllowedCaCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxWebhookGenericWebService) []string {
		if v == nil {
			return nil
		}
		return v.AllowedCaCerts
	}).(pulumi.StringArrayOutput)
}

// The HTTP request headers to send together with webhook requests.
func (o CxWebhookGenericWebServicePtrOutput) RequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CxWebhookGenericWebService) map[string]string {
		if v == nil {
			return nil
		}
		return v.RequestHeaders
	}).(pulumi.StringMapOutput)
}

// Whether to use speech adaptation for speech recognition.
func (o CxWebhookGenericWebServicePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxWebhookGenericWebService) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type CxWebhookServiceDirectory struct {
	// The name of Service Directory service.
	// Structure is documented below.
	GenericWebService CxWebhookServiceDirectoryGenericWebService `pulumi:"genericWebService"`
	// The name of Service Directory service.
	Service string `pulumi:"service"`
}

// CxWebhookServiceDirectoryInput is an input type that accepts CxWebhookServiceDirectoryArgs and CxWebhookServiceDirectoryOutput values.
// You can construct a concrete instance of `CxWebhookServiceDirectoryInput` via:
//
//	CxWebhookServiceDirectoryArgs{...}
type CxWebhookServiceDirectoryInput interface {
	pulumi.Input

	ToCxWebhookServiceDirectoryOutput() CxWebhookServiceDirectoryOutput
	ToCxWebhookServiceDirectoryOutputWithContext(context.Context) CxWebhookServiceDirectoryOutput
}

type CxWebhookServiceDirectoryArgs struct {
	// The name of Service Directory service.
	// Structure is documented below.
	GenericWebService CxWebhookServiceDirectoryGenericWebServiceInput `pulumi:"genericWebService"`
	// The name of Service Directory service.
	Service pulumi.StringInput `pulumi:"service"`
}

func (CxWebhookServiceDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxWebhookServiceDirectory)(nil)).Elem()
}

func (i CxWebhookServiceDirectoryArgs) ToCxWebhookServiceDirectoryOutput() CxWebhookServiceDirectoryOutput {
	return i.ToCxWebhookServiceDirectoryOutputWithContext(context.Background())
}

func (i CxWebhookServiceDirectoryArgs) ToCxWebhookServiceDirectoryOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookServiceDirectoryOutput)
}

func (i CxWebhookServiceDirectoryArgs) ToCxWebhookServiceDirectoryPtrOutput() CxWebhookServiceDirectoryPtrOutput {
	return i.ToCxWebhookServiceDirectoryPtrOutputWithContext(context.Background())
}

func (i CxWebhookServiceDirectoryArgs) ToCxWebhookServiceDirectoryPtrOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookServiceDirectoryOutput).ToCxWebhookServiceDirectoryPtrOutputWithContext(ctx)
}

// CxWebhookServiceDirectoryPtrInput is an input type that accepts CxWebhookServiceDirectoryArgs, CxWebhookServiceDirectoryPtr and CxWebhookServiceDirectoryPtrOutput values.
// You can construct a concrete instance of `CxWebhookServiceDirectoryPtrInput` via:
//
//	        CxWebhookServiceDirectoryArgs{...}
//
//	or:
//
//	        nil
type CxWebhookServiceDirectoryPtrInput interface {
	pulumi.Input

	ToCxWebhookServiceDirectoryPtrOutput() CxWebhookServiceDirectoryPtrOutput
	ToCxWebhookServiceDirectoryPtrOutputWithContext(context.Context) CxWebhookServiceDirectoryPtrOutput
}

type cxWebhookServiceDirectoryPtrType CxWebhookServiceDirectoryArgs

func CxWebhookServiceDirectoryPtr(v *CxWebhookServiceDirectoryArgs) CxWebhookServiceDirectoryPtrInput {
	return (*cxWebhookServiceDirectoryPtrType)(v)
}

func (*cxWebhookServiceDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxWebhookServiceDirectory)(nil)).Elem()
}

func (i *cxWebhookServiceDirectoryPtrType) ToCxWebhookServiceDirectoryPtrOutput() CxWebhookServiceDirectoryPtrOutput {
	return i.ToCxWebhookServiceDirectoryPtrOutputWithContext(context.Background())
}

func (i *cxWebhookServiceDirectoryPtrType) ToCxWebhookServiceDirectoryPtrOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookServiceDirectoryPtrOutput)
}

type CxWebhookServiceDirectoryOutput struct{ *pulumi.OutputState }

func (CxWebhookServiceDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxWebhookServiceDirectory)(nil)).Elem()
}

func (o CxWebhookServiceDirectoryOutput) ToCxWebhookServiceDirectoryOutput() CxWebhookServiceDirectoryOutput {
	return o
}

func (o CxWebhookServiceDirectoryOutput) ToCxWebhookServiceDirectoryOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryOutput {
	return o
}

func (o CxWebhookServiceDirectoryOutput) ToCxWebhookServiceDirectoryPtrOutput() CxWebhookServiceDirectoryPtrOutput {
	return o.ToCxWebhookServiceDirectoryPtrOutputWithContext(context.Background())
}

func (o CxWebhookServiceDirectoryOutput) ToCxWebhookServiceDirectoryPtrOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxWebhookServiceDirectory) *CxWebhookServiceDirectory {
		return &v
	}).(CxWebhookServiceDirectoryPtrOutput)
}

// The name of Service Directory service.
// Structure is documented below.
func (o CxWebhookServiceDirectoryOutput) GenericWebService() CxWebhookServiceDirectoryGenericWebServiceOutput {
	return o.ApplyT(func(v CxWebhookServiceDirectory) CxWebhookServiceDirectoryGenericWebService {
		return v.GenericWebService
	}).(CxWebhookServiceDirectoryGenericWebServiceOutput)
}

// The name of Service Directory service.
func (o CxWebhookServiceDirectoryOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v CxWebhookServiceDirectory) string { return v.Service }).(pulumi.StringOutput)
}

type CxWebhookServiceDirectoryPtrOutput struct{ *pulumi.OutputState }

func (CxWebhookServiceDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxWebhookServiceDirectory)(nil)).Elem()
}

func (o CxWebhookServiceDirectoryPtrOutput) ToCxWebhookServiceDirectoryPtrOutput() CxWebhookServiceDirectoryPtrOutput {
	return o
}

func (o CxWebhookServiceDirectoryPtrOutput) ToCxWebhookServiceDirectoryPtrOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryPtrOutput {
	return o
}

func (o CxWebhookServiceDirectoryPtrOutput) Elem() CxWebhookServiceDirectoryOutput {
	return o.ApplyT(func(v *CxWebhookServiceDirectory) CxWebhookServiceDirectory {
		if v != nil {
			return *v
		}
		var ret CxWebhookServiceDirectory
		return ret
	}).(CxWebhookServiceDirectoryOutput)
}

// The name of Service Directory service.
// Structure is documented below.
func (o CxWebhookServiceDirectoryPtrOutput) GenericWebService() CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return o.ApplyT(func(v *CxWebhookServiceDirectory) *CxWebhookServiceDirectoryGenericWebService {
		if v == nil {
			return nil
		}
		return &v.GenericWebService
	}).(CxWebhookServiceDirectoryGenericWebServicePtrOutput)
}

// The name of Service Directory service.
func (o CxWebhookServiceDirectoryPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxWebhookServiceDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type CxWebhookServiceDirectoryGenericWebService struct {
	// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
	AllowedCaCerts []string `pulumi:"allowedCaCerts"`
	// The HTTP request headers to send together with webhook requests.
	RequestHeaders map[string]string `pulumi:"requestHeaders"`
	// Whether to use speech adaptation for speech recognition.
	Uri string `pulumi:"uri"`
}

// CxWebhookServiceDirectoryGenericWebServiceInput is an input type that accepts CxWebhookServiceDirectoryGenericWebServiceArgs and CxWebhookServiceDirectoryGenericWebServiceOutput values.
// You can construct a concrete instance of `CxWebhookServiceDirectoryGenericWebServiceInput` via:
//
//	CxWebhookServiceDirectoryGenericWebServiceArgs{...}
type CxWebhookServiceDirectoryGenericWebServiceInput interface {
	pulumi.Input

	ToCxWebhookServiceDirectoryGenericWebServiceOutput() CxWebhookServiceDirectoryGenericWebServiceOutput
	ToCxWebhookServiceDirectoryGenericWebServiceOutputWithContext(context.Context) CxWebhookServiceDirectoryGenericWebServiceOutput
}

type CxWebhookServiceDirectoryGenericWebServiceArgs struct {
	// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
	AllowedCaCerts pulumi.StringArrayInput `pulumi:"allowedCaCerts"`
	// The HTTP request headers to send together with webhook requests.
	RequestHeaders pulumi.StringMapInput `pulumi:"requestHeaders"`
	// Whether to use speech adaptation for speech recognition.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (CxWebhookServiceDirectoryGenericWebServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxWebhookServiceDirectoryGenericWebService)(nil)).Elem()
}

func (i CxWebhookServiceDirectoryGenericWebServiceArgs) ToCxWebhookServiceDirectoryGenericWebServiceOutput() CxWebhookServiceDirectoryGenericWebServiceOutput {
	return i.ToCxWebhookServiceDirectoryGenericWebServiceOutputWithContext(context.Background())
}

func (i CxWebhookServiceDirectoryGenericWebServiceArgs) ToCxWebhookServiceDirectoryGenericWebServiceOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryGenericWebServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookServiceDirectoryGenericWebServiceOutput)
}

func (i CxWebhookServiceDirectoryGenericWebServiceArgs) ToCxWebhookServiceDirectoryGenericWebServicePtrOutput() CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return i.ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(context.Background())
}

func (i CxWebhookServiceDirectoryGenericWebServiceArgs) ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookServiceDirectoryGenericWebServiceOutput).ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(ctx)
}

// CxWebhookServiceDirectoryGenericWebServicePtrInput is an input type that accepts CxWebhookServiceDirectoryGenericWebServiceArgs, CxWebhookServiceDirectoryGenericWebServicePtr and CxWebhookServiceDirectoryGenericWebServicePtrOutput values.
// You can construct a concrete instance of `CxWebhookServiceDirectoryGenericWebServicePtrInput` via:
//
//	        CxWebhookServiceDirectoryGenericWebServiceArgs{...}
//
//	or:
//
//	        nil
type CxWebhookServiceDirectoryGenericWebServicePtrInput interface {
	pulumi.Input

	ToCxWebhookServiceDirectoryGenericWebServicePtrOutput() CxWebhookServiceDirectoryGenericWebServicePtrOutput
	ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(context.Context) CxWebhookServiceDirectoryGenericWebServicePtrOutput
}

type cxWebhookServiceDirectoryGenericWebServicePtrType CxWebhookServiceDirectoryGenericWebServiceArgs

func CxWebhookServiceDirectoryGenericWebServicePtr(v *CxWebhookServiceDirectoryGenericWebServiceArgs) CxWebhookServiceDirectoryGenericWebServicePtrInput {
	return (*cxWebhookServiceDirectoryGenericWebServicePtrType)(v)
}

func (*cxWebhookServiceDirectoryGenericWebServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxWebhookServiceDirectoryGenericWebService)(nil)).Elem()
}

func (i *cxWebhookServiceDirectoryGenericWebServicePtrType) ToCxWebhookServiceDirectoryGenericWebServicePtrOutput() CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return i.ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(context.Background())
}

func (i *cxWebhookServiceDirectoryGenericWebServicePtrType) ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxWebhookServiceDirectoryGenericWebServicePtrOutput)
}

type CxWebhookServiceDirectoryGenericWebServiceOutput struct{ *pulumi.OutputState }

func (CxWebhookServiceDirectoryGenericWebServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxWebhookServiceDirectoryGenericWebService)(nil)).Elem()
}

func (o CxWebhookServiceDirectoryGenericWebServiceOutput) ToCxWebhookServiceDirectoryGenericWebServiceOutput() CxWebhookServiceDirectoryGenericWebServiceOutput {
	return o
}

func (o CxWebhookServiceDirectoryGenericWebServiceOutput) ToCxWebhookServiceDirectoryGenericWebServiceOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryGenericWebServiceOutput {
	return o
}

func (o CxWebhookServiceDirectoryGenericWebServiceOutput) ToCxWebhookServiceDirectoryGenericWebServicePtrOutput() CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return o.ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(context.Background())
}

func (o CxWebhookServiceDirectoryGenericWebServiceOutput) ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxWebhookServiceDirectoryGenericWebService) *CxWebhookServiceDirectoryGenericWebService {
		return &v
	}).(CxWebhookServiceDirectoryGenericWebServicePtrOutput)
}

// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
func (o CxWebhookServiceDirectoryGenericWebServiceOutput) AllowedCaCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxWebhookServiceDirectoryGenericWebService) []string { return v.AllowedCaCerts }).(pulumi.StringArrayOutput)
}

// The HTTP request headers to send together with webhook requests.
func (o CxWebhookServiceDirectoryGenericWebServiceOutput) RequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v CxWebhookServiceDirectoryGenericWebService) map[string]string { return v.RequestHeaders }).(pulumi.StringMapOutput)
}

// Whether to use speech adaptation for speech recognition.
func (o CxWebhookServiceDirectoryGenericWebServiceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CxWebhookServiceDirectoryGenericWebService) string { return v.Uri }).(pulumi.StringOutput)
}

type CxWebhookServiceDirectoryGenericWebServicePtrOutput struct{ *pulumi.OutputState }

func (CxWebhookServiceDirectoryGenericWebServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxWebhookServiceDirectoryGenericWebService)(nil)).Elem()
}

func (o CxWebhookServiceDirectoryGenericWebServicePtrOutput) ToCxWebhookServiceDirectoryGenericWebServicePtrOutput() CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return o
}

func (o CxWebhookServiceDirectoryGenericWebServicePtrOutput) ToCxWebhookServiceDirectoryGenericWebServicePtrOutputWithContext(ctx context.Context) CxWebhookServiceDirectoryGenericWebServicePtrOutput {
	return o
}

func (o CxWebhookServiceDirectoryGenericWebServicePtrOutput) Elem() CxWebhookServiceDirectoryGenericWebServiceOutput {
	return o.ApplyT(func(v *CxWebhookServiceDirectoryGenericWebService) CxWebhookServiceDirectoryGenericWebService {
		if v != nil {
			return *v
		}
		var ret CxWebhookServiceDirectoryGenericWebService
		return ret
	}).(CxWebhookServiceDirectoryGenericWebServiceOutput)
}

// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
func (o CxWebhookServiceDirectoryGenericWebServicePtrOutput) AllowedCaCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxWebhookServiceDirectoryGenericWebService) []string {
		if v == nil {
			return nil
		}
		return v.AllowedCaCerts
	}).(pulumi.StringArrayOutput)
}

// The HTTP request headers to send together with webhook requests.
func (o CxWebhookServiceDirectoryGenericWebServicePtrOutput) RequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CxWebhookServiceDirectoryGenericWebService) map[string]string {
		if v == nil {
			return nil
		}
		return v.RequestHeaders
	}).(pulumi.StringMapOutput)
}

// Whether to use speech adaptation for speech recognition.
func (o CxWebhookServiceDirectoryGenericWebServicePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxWebhookServiceDirectoryGenericWebService) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type EntityTypeEntity struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym
	// could be green onions.
	// For KIND_LIST entity types:
	// * This collection must contain exactly one synonym equal to value.
	Synonyms []string `pulumi:"synonyms"`
	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value
	// could be scallions.
	// For KIND_MAP entity types:
	// * A reference value to be used in place of synonyms.
	//   For KIND_LIST entity types:
	// * A string that can contain references to other entity types (with or without aliases).
	Value string `pulumi:"value"`
}

// EntityTypeEntityInput is an input type that accepts EntityTypeEntityArgs and EntityTypeEntityOutput values.
// You can construct a concrete instance of `EntityTypeEntityInput` via:
//
//	EntityTypeEntityArgs{...}
type EntityTypeEntityInput interface {
	pulumi.Input

	ToEntityTypeEntityOutput() EntityTypeEntityOutput
	ToEntityTypeEntityOutputWithContext(context.Context) EntityTypeEntityOutput
}

type EntityTypeEntityArgs struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym
	// could be green onions.
	// For KIND_LIST entity types:
	// * This collection must contain exactly one synonym equal to value.
	Synonyms pulumi.StringArrayInput `pulumi:"synonyms"`
	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value
	// could be scallions.
	// For KIND_MAP entity types:
	// * A reference value to be used in place of synonyms.
	//   For KIND_LIST entity types:
	// * A string that can contain references to other entity types (with or without aliases).
	Value pulumi.StringInput `pulumi:"value"`
}

func (EntityTypeEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTypeEntity)(nil)).Elem()
}

func (i EntityTypeEntityArgs) ToEntityTypeEntityOutput() EntityTypeEntityOutput {
	return i.ToEntityTypeEntityOutputWithContext(context.Background())
}

func (i EntityTypeEntityArgs) ToEntityTypeEntityOutputWithContext(ctx context.Context) EntityTypeEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTypeEntityOutput)
}

// EntityTypeEntityArrayInput is an input type that accepts EntityTypeEntityArray and EntityTypeEntityArrayOutput values.
// You can construct a concrete instance of `EntityTypeEntityArrayInput` via:
//
//	EntityTypeEntityArray{ EntityTypeEntityArgs{...} }
type EntityTypeEntityArrayInput interface {
	pulumi.Input

	ToEntityTypeEntityArrayOutput() EntityTypeEntityArrayOutput
	ToEntityTypeEntityArrayOutputWithContext(context.Context) EntityTypeEntityArrayOutput
}

type EntityTypeEntityArray []EntityTypeEntityInput

func (EntityTypeEntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTypeEntity)(nil)).Elem()
}

func (i EntityTypeEntityArray) ToEntityTypeEntityArrayOutput() EntityTypeEntityArrayOutput {
	return i.ToEntityTypeEntityArrayOutputWithContext(context.Background())
}

func (i EntityTypeEntityArray) ToEntityTypeEntityArrayOutputWithContext(ctx context.Context) EntityTypeEntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTypeEntityArrayOutput)
}

type EntityTypeEntityOutput struct{ *pulumi.OutputState }

func (EntityTypeEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTypeEntity)(nil)).Elem()
}

func (o EntityTypeEntityOutput) ToEntityTypeEntityOutput() EntityTypeEntityOutput {
	return o
}

func (o EntityTypeEntityOutput) ToEntityTypeEntityOutputWithContext(ctx context.Context) EntityTypeEntityOutput {
	return o
}

// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym
// could be green onions.
// For KIND_LIST entity types:
// * This collection must contain exactly one synonym equal to value.
func (o EntityTypeEntityOutput) Synonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EntityTypeEntity) []string { return v.Synonyms }).(pulumi.StringArrayOutput)
}

// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value
// could be scallions.
// For KIND_MAP entity types:
//   - A reference value to be used in place of synonyms.
//     For KIND_LIST entity types:
//   - A string that can contain references to other entity types (with or without aliases).
func (o EntityTypeEntityOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EntityTypeEntity) string { return v.Value }).(pulumi.StringOutput)
}

type EntityTypeEntityArrayOutput struct{ *pulumi.OutputState }

func (EntityTypeEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTypeEntity)(nil)).Elem()
}

func (o EntityTypeEntityArrayOutput) ToEntityTypeEntityArrayOutput() EntityTypeEntityArrayOutput {
	return o
}

func (o EntityTypeEntityArrayOutput) ToEntityTypeEntityArrayOutputWithContext(ctx context.Context) EntityTypeEntityArrayOutput {
	return o
}

func (o EntityTypeEntityArrayOutput) Index(i pulumi.IntInput) EntityTypeEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityTypeEntity {
		return vs[0].([]EntityTypeEntity)[vs[1].(int)]
	}).(EntityTypeEntityOutput)
}

type FulfillmentFeature struct {
	// The type of the feature that enabled for fulfillment.
	// * SMALLTALK: Fulfillment is enabled for SmallTalk.
	//   Possible values are: `SMALLTALK`.
	Type string `pulumi:"type"`
}

// FulfillmentFeatureInput is an input type that accepts FulfillmentFeatureArgs and FulfillmentFeatureOutput values.
// You can construct a concrete instance of `FulfillmentFeatureInput` via:
//
//	FulfillmentFeatureArgs{...}
type FulfillmentFeatureInput interface {
	pulumi.Input

	ToFulfillmentFeatureOutput() FulfillmentFeatureOutput
	ToFulfillmentFeatureOutputWithContext(context.Context) FulfillmentFeatureOutput
}

type FulfillmentFeatureArgs struct {
	// The type of the feature that enabled for fulfillment.
	// * SMALLTALK: Fulfillment is enabled for SmallTalk.
	//   Possible values are: `SMALLTALK`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FulfillmentFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FulfillmentFeature)(nil)).Elem()
}

func (i FulfillmentFeatureArgs) ToFulfillmentFeatureOutput() FulfillmentFeatureOutput {
	return i.ToFulfillmentFeatureOutputWithContext(context.Background())
}

func (i FulfillmentFeatureArgs) ToFulfillmentFeatureOutputWithContext(ctx context.Context) FulfillmentFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentFeatureOutput)
}

// FulfillmentFeatureArrayInput is an input type that accepts FulfillmentFeatureArray and FulfillmentFeatureArrayOutput values.
// You can construct a concrete instance of `FulfillmentFeatureArrayInput` via:
//
//	FulfillmentFeatureArray{ FulfillmentFeatureArgs{...} }
type FulfillmentFeatureArrayInput interface {
	pulumi.Input

	ToFulfillmentFeatureArrayOutput() FulfillmentFeatureArrayOutput
	ToFulfillmentFeatureArrayOutputWithContext(context.Context) FulfillmentFeatureArrayOutput
}

type FulfillmentFeatureArray []FulfillmentFeatureInput

func (FulfillmentFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FulfillmentFeature)(nil)).Elem()
}

func (i FulfillmentFeatureArray) ToFulfillmentFeatureArrayOutput() FulfillmentFeatureArrayOutput {
	return i.ToFulfillmentFeatureArrayOutputWithContext(context.Background())
}

func (i FulfillmentFeatureArray) ToFulfillmentFeatureArrayOutputWithContext(ctx context.Context) FulfillmentFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentFeatureArrayOutput)
}

type FulfillmentFeatureOutput struct{ *pulumi.OutputState }

func (FulfillmentFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FulfillmentFeature)(nil)).Elem()
}

func (o FulfillmentFeatureOutput) ToFulfillmentFeatureOutput() FulfillmentFeatureOutput {
	return o
}

func (o FulfillmentFeatureOutput) ToFulfillmentFeatureOutputWithContext(ctx context.Context) FulfillmentFeatureOutput {
	return o
}

// The type of the feature that enabled for fulfillment.
//   - SMALLTALK: Fulfillment is enabled for SmallTalk.
//     Possible values are: `SMALLTALK`.
func (o FulfillmentFeatureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FulfillmentFeature) string { return v.Type }).(pulumi.StringOutput)
}

type FulfillmentFeatureArrayOutput struct{ *pulumi.OutputState }

func (FulfillmentFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FulfillmentFeature)(nil)).Elem()
}

func (o FulfillmentFeatureArrayOutput) ToFulfillmentFeatureArrayOutput() FulfillmentFeatureArrayOutput {
	return o
}

func (o FulfillmentFeatureArrayOutput) ToFulfillmentFeatureArrayOutputWithContext(ctx context.Context) FulfillmentFeatureArrayOutput {
	return o
}

func (o FulfillmentFeatureArrayOutput) Index(i pulumi.IntInput) FulfillmentFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FulfillmentFeature {
		return vs[0].([]FulfillmentFeature)[vs[1].(int)]
	}).(FulfillmentFeatureOutput)
}

type FulfillmentGenericWebService struct {
	// The password for HTTP Basic authentication.
	Password *string `pulumi:"password"`
	// The HTTP request headers to send together with fulfillment requests.
	RequestHeaders map[string]string `pulumi:"requestHeaders"`
	// The fulfillment URI for receiving POST requests. It must use https protocol.
	Uri string `pulumi:"uri"`
	// The user name for HTTP Basic authentication.
	Username *string `pulumi:"username"`
}

// FulfillmentGenericWebServiceInput is an input type that accepts FulfillmentGenericWebServiceArgs and FulfillmentGenericWebServiceOutput values.
// You can construct a concrete instance of `FulfillmentGenericWebServiceInput` via:
//
//	FulfillmentGenericWebServiceArgs{...}
type FulfillmentGenericWebServiceInput interface {
	pulumi.Input

	ToFulfillmentGenericWebServiceOutput() FulfillmentGenericWebServiceOutput
	ToFulfillmentGenericWebServiceOutputWithContext(context.Context) FulfillmentGenericWebServiceOutput
}

type FulfillmentGenericWebServiceArgs struct {
	// The password for HTTP Basic authentication.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The HTTP request headers to send together with fulfillment requests.
	RequestHeaders pulumi.StringMapInput `pulumi:"requestHeaders"`
	// The fulfillment URI for receiving POST requests. It must use https protocol.
	Uri pulumi.StringInput `pulumi:"uri"`
	// The user name for HTTP Basic authentication.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (FulfillmentGenericWebServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FulfillmentGenericWebService)(nil)).Elem()
}

func (i FulfillmentGenericWebServiceArgs) ToFulfillmentGenericWebServiceOutput() FulfillmentGenericWebServiceOutput {
	return i.ToFulfillmentGenericWebServiceOutputWithContext(context.Background())
}

func (i FulfillmentGenericWebServiceArgs) ToFulfillmentGenericWebServiceOutputWithContext(ctx context.Context) FulfillmentGenericWebServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentGenericWebServiceOutput)
}

func (i FulfillmentGenericWebServiceArgs) ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput {
	return i.ToFulfillmentGenericWebServicePtrOutputWithContext(context.Background())
}

func (i FulfillmentGenericWebServiceArgs) ToFulfillmentGenericWebServicePtrOutputWithContext(ctx context.Context) FulfillmentGenericWebServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentGenericWebServiceOutput).ToFulfillmentGenericWebServicePtrOutputWithContext(ctx)
}

// FulfillmentGenericWebServicePtrInput is an input type that accepts FulfillmentGenericWebServiceArgs, FulfillmentGenericWebServicePtr and FulfillmentGenericWebServicePtrOutput values.
// You can construct a concrete instance of `FulfillmentGenericWebServicePtrInput` via:
//
//	        FulfillmentGenericWebServiceArgs{...}
//
//	or:
//
//	        nil
type FulfillmentGenericWebServicePtrInput interface {
	pulumi.Input

	ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput
	ToFulfillmentGenericWebServicePtrOutputWithContext(context.Context) FulfillmentGenericWebServicePtrOutput
}

type fulfillmentGenericWebServicePtrType FulfillmentGenericWebServiceArgs

func FulfillmentGenericWebServicePtr(v *FulfillmentGenericWebServiceArgs) FulfillmentGenericWebServicePtrInput {
	return (*fulfillmentGenericWebServicePtrType)(v)
}

func (*fulfillmentGenericWebServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FulfillmentGenericWebService)(nil)).Elem()
}

func (i *fulfillmentGenericWebServicePtrType) ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput {
	return i.ToFulfillmentGenericWebServicePtrOutputWithContext(context.Background())
}

func (i *fulfillmentGenericWebServicePtrType) ToFulfillmentGenericWebServicePtrOutputWithContext(ctx context.Context) FulfillmentGenericWebServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentGenericWebServicePtrOutput)
}

type FulfillmentGenericWebServiceOutput struct{ *pulumi.OutputState }

func (FulfillmentGenericWebServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FulfillmentGenericWebService)(nil)).Elem()
}

func (o FulfillmentGenericWebServiceOutput) ToFulfillmentGenericWebServiceOutput() FulfillmentGenericWebServiceOutput {
	return o
}

func (o FulfillmentGenericWebServiceOutput) ToFulfillmentGenericWebServiceOutputWithContext(ctx context.Context) FulfillmentGenericWebServiceOutput {
	return o
}

func (o FulfillmentGenericWebServiceOutput) ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput {
	return o.ToFulfillmentGenericWebServicePtrOutputWithContext(context.Background())
}

func (o FulfillmentGenericWebServiceOutput) ToFulfillmentGenericWebServicePtrOutputWithContext(ctx context.Context) FulfillmentGenericWebServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FulfillmentGenericWebService) *FulfillmentGenericWebService {
		return &v
	}).(FulfillmentGenericWebServicePtrOutput)
}

// The password for HTTP Basic authentication.
func (o FulfillmentGenericWebServiceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FulfillmentGenericWebService) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The HTTP request headers to send together with fulfillment requests.
func (o FulfillmentGenericWebServiceOutput) RequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v FulfillmentGenericWebService) map[string]string { return v.RequestHeaders }).(pulumi.StringMapOutput)
}

// The fulfillment URI for receiving POST requests. It must use https protocol.
func (o FulfillmentGenericWebServiceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v FulfillmentGenericWebService) string { return v.Uri }).(pulumi.StringOutput)
}

// The user name for HTTP Basic authentication.
func (o FulfillmentGenericWebServiceOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FulfillmentGenericWebService) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type FulfillmentGenericWebServicePtrOutput struct{ *pulumi.OutputState }

func (FulfillmentGenericWebServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FulfillmentGenericWebService)(nil)).Elem()
}

func (o FulfillmentGenericWebServicePtrOutput) ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput {
	return o
}

func (o FulfillmentGenericWebServicePtrOutput) ToFulfillmentGenericWebServicePtrOutputWithContext(ctx context.Context) FulfillmentGenericWebServicePtrOutput {
	return o
}

func (o FulfillmentGenericWebServicePtrOutput) Elem() FulfillmentGenericWebServiceOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) FulfillmentGenericWebService {
		if v != nil {
			return *v
		}
		var ret FulfillmentGenericWebService
		return ret
	}).(FulfillmentGenericWebServiceOutput)
}

// The password for HTTP Basic authentication.
func (o FulfillmentGenericWebServicePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The HTTP request headers to send together with fulfillment requests.
func (o FulfillmentGenericWebServicePtrOutput) RequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) map[string]string {
		if v == nil {
			return nil
		}
		return v.RequestHeaders
	}).(pulumi.StringMapOutput)
}

// The fulfillment URI for receiving POST requests. It must use https protocol.
func (o FulfillmentGenericWebServicePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// The user name for HTTP Basic authentication.
func (o FulfillmentGenericWebServicePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type IntentFollowupIntentInfo struct {
	// The unique identifier of the followup intent.
	// Format: projects/<Project ID>/agent/intents/<Intent ID>.
	FollowupIntentName *string `pulumi:"followupIntentName"`
	// The unique identifier of the parent intent in the chain of followup intents.
	// Format: projects/<Project ID>/agent/intents/<Intent ID>.
	ParentFollowupIntentName *string `pulumi:"parentFollowupIntentName"`
}

// IntentFollowupIntentInfoInput is an input type that accepts IntentFollowupIntentInfoArgs and IntentFollowupIntentInfoOutput values.
// You can construct a concrete instance of `IntentFollowupIntentInfoInput` via:
//
//	IntentFollowupIntentInfoArgs{...}
type IntentFollowupIntentInfoInput interface {
	pulumi.Input

	ToIntentFollowupIntentInfoOutput() IntentFollowupIntentInfoOutput
	ToIntentFollowupIntentInfoOutputWithContext(context.Context) IntentFollowupIntentInfoOutput
}

type IntentFollowupIntentInfoArgs struct {
	// The unique identifier of the followup intent.
	// Format: projects/<Project ID>/agent/intents/<Intent ID>.
	FollowupIntentName pulumi.StringPtrInput `pulumi:"followupIntentName"`
	// The unique identifier of the parent intent in the chain of followup intents.
	// Format: projects/<Project ID>/agent/intents/<Intent ID>.
	ParentFollowupIntentName pulumi.StringPtrInput `pulumi:"parentFollowupIntentName"`
}

func (IntentFollowupIntentInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntentFollowupIntentInfo)(nil)).Elem()
}

func (i IntentFollowupIntentInfoArgs) ToIntentFollowupIntentInfoOutput() IntentFollowupIntentInfoOutput {
	return i.ToIntentFollowupIntentInfoOutputWithContext(context.Background())
}

func (i IntentFollowupIntentInfoArgs) ToIntentFollowupIntentInfoOutputWithContext(ctx context.Context) IntentFollowupIntentInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntentFollowupIntentInfoOutput)
}

// IntentFollowupIntentInfoArrayInput is an input type that accepts IntentFollowupIntentInfoArray and IntentFollowupIntentInfoArrayOutput values.
// You can construct a concrete instance of `IntentFollowupIntentInfoArrayInput` via:
//
//	IntentFollowupIntentInfoArray{ IntentFollowupIntentInfoArgs{...} }
type IntentFollowupIntentInfoArrayInput interface {
	pulumi.Input

	ToIntentFollowupIntentInfoArrayOutput() IntentFollowupIntentInfoArrayOutput
	ToIntentFollowupIntentInfoArrayOutputWithContext(context.Context) IntentFollowupIntentInfoArrayOutput
}

type IntentFollowupIntentInfoArray []IntentFollowupIntentInfoInput

func (IntentFollowupIntentInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntentFollowupIntentInfo)(nil)).Elem()
}

func (i IntentFollowupIntentInfoArray) ToIntentFollowupIntentInfoArrayOutput() IntentFollowupIntentInfoArrayOutput {
	return i.ToIntentFollowupIntentInfoArrayOutputWithContext(context.Background())
}

func (i IntentFollowupIntentInfoArray) ToIntentFollowupIntentInfoArrayOutputWithContext(ctx context.Context) IntentFollowupIntentInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntentFollowupIntentInfoArrayOutput)
}

type IntentFollowupIntentInfoOutput struct{ *pulumi.OutputState }

func (IntentFollowupIntentInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntentFollowupIntentInfo)(nil)).Elem()
}

func (o IntentFollowupIntentInfoOutput) ToIntentFollowupIntentInfoOutput() IntentFollowupIntentInfoOutput {
	return o
}

func (o IntentFollowupIntentInfoOutput) ToIntentFollowupIntentInfoOutputWithContext(ctx context.Context) IntentFollowupIntentInfoOutput {
	return o
}

// The unique identifier of the followup intent.
// Format: projects/<Project ID>/agent/intents/<Intent ID>.
func (o IntentFollowupIntentInfoOutput) FollowupIntentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntentFollowupIntentInfo) *string { return v.FollowupIntentName }).(pulumi.StringPtrOutput)
}

// The unique identifier of the parent intent in the chain of followup intents.
// Format: projects/<Project ID>/agent/intents/<Intent ID>.
func (o IntentFollowupIntentInfoOutput) ParentFollowupIntentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntentFollowupIntentInfo) *string { return v.ParentFollowupIntentName }).(pulumi.StringPtrOutput)
}

type IntentFollowupIntentInfoArrayOutput struct{ *pulumi.OutputState }

func (IntentFollowupIntentInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntentFollowupIntentInfo)(nil)).Elem()
}

func (o IntentFollowupIntentInfoArrayOutput) ToIntentFollowupIntentInfoArrayOutput() IntentFollowupIntentInfoArrayOutput {
	return o
}

func (o IntentFollowupIntentInfoArrayOutput) ToIntentFollowupIntentInfoArrayOutputWithContext(ctx context.Context) IntentFollowupIntentInfoArrayOutput {
	return o
}

func (o IntentFollowupIntentInfoArrayOutput) Index(i pulumi.IntInput) IntentFollowupIntentInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntentFollowupIntentInfo {
		return vs[0].([]IntentFollowupIntentInfo)[vs[1].(int)]
	}).(IntentFollowupIntentInfoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentAdvancedSettingsInput)(nil)).Elem(), CxAgentAdvancedSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentAdvancedSettingsPtrInput)(nil)).Elem(), CxAgentAdvancedSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentAdvancedSettingsAudioExportGcsDestinationInput)(nil)).Elem(), CxAgentAdvancedSettingsAudioExportGcsDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentAdvancedSettingsAudioExportGcsDestinationPtrInput)(nil)).Elem(), CxAgentAdvancedSettingsAudioExportGcsDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentAdvancedSettingsDtmfSettingsInput)(nil)).Elem(), CxAgentAdvancedSettingsDtmfSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentAdvancedSettingsDtmfSettingsPtrInput)(nil)).Elem(), CxAgentAdvancedSettingsDtmfSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentGitIntegrationSettingsInput)(nil)).Elem(), CxAgentGitIntegrationSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentGitIntegrationSettingsPtrInput)(nil)).Elem(), CxAgentGitIntegrationSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentGitIntegrationSettingsGithubSettingsInput)(nil)).Elem(), CxAgentGitIntegrationSettingsGithubSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentGitIntegrationSettingsGithubSettingsPtrInput)(nil)).Elem(), CxAgentGitIntegrationSettingsGithubSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentSpeechToTextSettingsInput)(nil)).Elem(), CxAgentSpeechToTextSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentSpeechToTextSettingsPtrInput)(nil)).Elem(), CxAgentSpeechToTextSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentTextToSpeechSettingsInput)(nil)).Elem(), CxAgentTextToSpeechSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentTextToSpeechSettingsPtrInput)(nil)).Elem(), CxAgentTextToSpeechSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEntityTypeEntityInput)(nil)).Elem(), CxEntityTypeEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEntityTypeEntityArrayInput)(nil)).Elem(), CxEntityTypeEntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEntityTypeExcludedPhraseInput)(nil)).Elem(), CxEntityTypeExcludedPhraseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEntityTypeExcludedPhraseArrayInput)(nil)).Elem(), CxEntityTypeExcludedPhraseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEnvironmentVersionConfigInput)(nil)).Elem(), CxEnvironmentVersionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEnvironmentVersionConfigArrayInput)(nil)).Elem(), CxEnvironmentVersionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowAdvancedSettingsInput)(nil)).Elem(), CxFlowAdvancedSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowAdvancedSettingsPtrInput)(nil)).Elem(), CxFlowAdvancedSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowAdvancedSettingsAudioExportGcsDestinationInput)(nil)).Elem(), CxFlowAdvancedSettingsAudioExportGcsDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowAdvancedSettingsAudioExportGcsDestinationPtrInput)(nil)).Elem(), CxFlowAdvancedSettingsAudioExportGcsDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowAdvancedSettingsDtmfSettingsInput)(nil)).Elem(), CxFlowAdvancedSettingsDtmfSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowAdvancedSettingsDtmfSettingsPtrInput)(nil)).Elem(), CxFlowAdvancedSettingsDtmfSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerInput)(nil)).Elem(), CxFlowEventHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerArrayInput)(nil)).Elem(), CxFlowEventHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentConditionalCaseInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentConditionalCaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentConditionalCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentSetParameterActionInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentSetParameterActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentSetParameterActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowNluSettingsInput)(nil)).Elem(), CxFlowNluSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowNluSettingsPtrInput)(nil)).Elem(), CxFlowNluSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteInput)(nil)).Elem(), CxFlowTransitionRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteArrayInput)(nil)).Elem(), CxFlowTransitionRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentConditionalCaseInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentSetParameterActionInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentParameterInput)(nil)).Elem(), CxIntentParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentParameterArrayInput)(nil)).Elem(), CxIntentParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentTrainingPhraseInput)(nil)).Elem(), CxIntentTrainingPhraseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentTrainingPhraseArrayInput)(nil)).Elem(), CxIntentTrainingPhraseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentTrainingPhrasePartInput)(nil)).Elem(), CxIntentTrainingPhrasePartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentTrainingPhrasePartArrayInput)(nil)).Elem(), CxIntentTrainingPhrasePartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageAdvancedSettingsInput)(nil)).Elem(), CxPageAdvancedSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageAdvancedSettingsPtrInput)(nil)).Elem(), CxPageAdvancedSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageAdvancedSettingsDtmfSettingsInput)(nil)).Elem(), CxPageAdvancedSettingsDtmfSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageAdvancedSettingsDtmfSettingsPtrInput)(nil)).Elem(), CxPageAdvancedSettingsDtmfSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentInput)(nil)).Elem(), CxPageEntryFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentPtrInput)(nil)).Elem(), CxPageEntryFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentConditionalCaseInput)(nil)).Elem(), CxPageEntryFulfillmentConditionalCaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentConditionalCaseArrayInput)(nil)).Elem(), CxPageEntryFulfillmentConditionalCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageInput)(nil)).Elem(), CxPageEntryFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageArrayInput)(nil)).Elem(), CxPageEntryFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageConversationSuccessInput)(nil)).Elem(), CxPageEntryFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageConversationSuccessPtrInput)(nil)).Elem(), CxPageEntryFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageLiveAgentHandoffInput)(nil)).Elem(), CxPageEntryFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageLiveAgentHandoffPtrInput)(nil)).Elem(), CxPageEntryFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageOutputAudioTextInput)(nil)).Elem(), CxPageEntryFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageOutputAudioTextPtrInput)(nil)).Elem(), CxPageEntryFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessagePlayAudioInput)(nil)).Elem(), CxPageEntryFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessagePlayAudioPtrInput)(nil)).Elem(), CxPageEntryFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageTelephonyTransferCallInput)(nil)).Elem(), CxPageEntryFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageTelephonyTransferCallPtrInput)(nil)).Elem(), CxPageEntryFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageTextInput)(nil)).Elem(), CxPageEntryFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageEntryFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentSetParameterActionInput)(nil)).Elem(), CxPageEntryFulfillmentSetParameterActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentSetParameterActionArrayInput)(nil)).Elem(), CxPageEntryFulfillmentSetParameterActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerInput)(nil)).Elem(), CxPageEventHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerArrayInput)(nil)).Elem(), CxPageEventHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentConditionalCaseInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentConditionalCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessagePlayAudioInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentSetParameterActionInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentSetParameterActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormInput)(nil)).Elem(), CxPageFormArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormPtrInput)(nil)).Elem(), CxPageFormArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterInput)(nil)).Elem(), CxPageFormParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterArrayInput)(nil)).Elem(), CxPageFormParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterAdvancedSettingsInput)(nil)).Elem(), CxPageFormParameterAdvancedSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterAdvancedSettingsPtrInput)(nil)).Elem(), CxPageFormParameterAdvancedSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterAdvancedSettingsDtmfSettingsInput)(nil)).Elem(), CxPageFormParameterAdvancedSettingsDtmfSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterAdvancedSettingsDtmfSettingsPtrInput)(nil)).Elem(), CxPageFormParameterAdvancedSettingsDtmfSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInput)(nil)).Elem(), CxPageFormParameterFillBehaviorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerArrayInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayInput)(nil)).Elem(), CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteInput)(nil)).Elem(), CxPageTransitionRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteArrayInput)(nil)).Elem(), CxPageTransitionRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentConditionalCaseInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentConditionalCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentSetParameterActionInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentSetParameterActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxSecuritySettingsAudioExportSettingsInput)(nil)).Elem(), CxSecuritySettingsAudioExportSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxSecuritySettingsAudioExportSettingsPtrInput)(nil)).Elem(), CxSecuritySettingsAudioExportSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxSecuritySettingsInsightsExportSettingsInput)(nil)).Elem(), CxSecuritySettingsInsightsExportSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxSecuritySettingsInsightsExportSettingsPtrInput)(nil)).Elem(), CxSecuritySettingsInsightsExportSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultInput)(nil)).Elem(), CxTestCaseLastTestResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultArrayInput)(nil)).Elem(), CxTestCaseLastTestResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnArrayInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputPtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputTypeInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputDtmfInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputInputDtmfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputEventInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputInputEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputTextInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnUserInputInputTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrInput)(nil)).Elem(), CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnArrayInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputPtrInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputTypeInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputTypePtrInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputDtmfInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputEventInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputInputEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputEventPtrInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputInputEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputTextInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputInputTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnUserInputInputTextPtrInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnUserInputInputTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrInput)(nil)).Elem(), CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestConfigInput)(nil)).Elem(), CxTestCaseTestConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxTestCaseTestConfigPtrInput)(nil)).Elem(), CxTestCaseTestConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxVersionNluSettingInput)(nil)).Elem(), CxVersionNluSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxVersionNluSettingArrayInput)(nil)).Elem(), CxVersionNluSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxWebhookGenericWebServiceInput)(nil)).Elem(), CxWebhookGenericWebServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxWebhookGenericWebServicePtrInput)(nil)).Elem(), CxWebhookGenericWebServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxWebhookServiceDirectoryInput)(nil)).Elem(), CxWebhookServiceDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxWebhookServiceDirectoryPtrInput)(nil)).Elem(), CxWebhookServiceDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxWebhookServiceDirectoryGenericWebServiceInput)(nil)).Elem(), CxWebhookServiceDirectoryGenericWebServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxWebhookServiceDirectoryGenericWebServicePtrInput)(nil)).Elem(), CxWebhookServiceDirectoryGenericWebServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTypeEntityInput)(nil)).Elem(), EntityTypeEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTypeEntityArrayInput)(nil)).Elem(), EntityTypeEntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FulfillmentFeatureInput)(nil)).Elem(), FulfillmentFeatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FulfillmentFeatureArrayInput)(nil)).Elem(), FulfillmentFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FulfillmentGenericWebServiceInput)(nil)).Elem(), FulfillmentGenericWebServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FulfillmentGenericWebServicePtrInput)(nil)).Elem(), FulfillmentGenericWebServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntentFollowupIntentInfoInput)(nil)).Elem(), IntentFollowupIntentInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntentFollowupIntentInfoArrayInput)(nil)).Elem(), IntentFollowupIntentInfoArray{})
	pulumi.RegisterOutputType(CxAgentAdvancedSettingsOutput{})
	pulumi.RegisterOutputType(CxAgentAdvancedSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxAgentAdvancedSettingsAudioExportGcsDestinationOutput{})
	pulumi.RegisterOutputType(CxAgentAdvancedSettingsAudioExportGcsDestinationPtrOutput{})
	pulumi.RegisterOutputType(CxAgentAdvancedSettingsDtmfSettingsOutput{})
	pulumi.RegisterOutputType(CxAgentAdvancedSettingsDtmfSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxAgentGitIntegrationSettingsOutput{})
	pulumi.RegisterOutputType(CxAgentGitIntegrationSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxAgentGitIntegrationSettingsGithubSettingsOutput{})
	pulumi.RegisterOutputType(CxAgentGitIntegrationSettingsGithubSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxAgentSpeechToTextSettingsOutput{})
	pulumi.RegisterOutputType(CxAgentSpeechToTextSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxAgentTextToSpeechSettingsOutput{})
	pulumi.RegisterOutputType(CxAgentTextToSpeechSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxEntityTypeEntityOutput{})
	pulumi.RegisterOutputType(CxEntityTypeEntityArrayOutput{})
	pulumi.RegisterOutputType(CxEntityTypeExcludedPhraseOutput{})
	pulumi.RegisterOutputType(CxEntityTypeExcludedPhraseArrayOutput{})
	pulumi.RegisterOutputType(CxEnvironmentVersionConfigOutput{})
	pulumi.RegisterOutputType(CxEnvironmentVersionConfigArrayOutput{})
	pulumi.RegisterOutputType(CxFlowAdvancedSettingsOutput{})
	pulumi.RegisterOutputType(CxFlowAdvancedSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxFlowAdvancedSettingsAudioExportGcsDestinationOutput{})
	pulumi.RegisterOutputType(CxFlowAdvancedSettingsAudioExportGcsDestinationPtrOutput{})
	pulumi.RegisterOutputType(CxFlowAdvancedSettingsDtmfSettingsOutput{})
	pulumi.RegisterOutputType(CxFlowAdvancedSettingsDtmfSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerArrayOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentConditionalCaseOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentConditionalCaseArrayOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentSetParameterActionOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentSetParameterActionArrayOutput{})
	pulumi.RegisterOutputType(CxFlowNluSettingsOutput{})
	pulumi.RegisterOutputType(CxFlowNluSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteArrayOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentConditionalCaseOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentSetParameterActionOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput{})
	pulumi.RegisterOutputType(CxIntentParameterOutput{})
	pulumi.RegisterOutputType(CxIntentParameterArrayOutput{})
	pulumi.RegisterOutputType(CxIntentTrainingPhraseOutput{})
	pulumi.RegisterOutputType(CxIntentTrainingPhraseArrayOutput{})
	pulumi.RegisterOutputType(CxIntentTrainingPhrasePartOutput{})
	pulumi.RegisterOutputType(CxIntentTrainingPhrasePartArrayOutput{})
	pulumi.RegisterOutputType(CxPageAdvancedSettingsOutput{})
	pulumi.RegisterOutputType(CxPageAdvancedSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxPageAdvancedSettingsDtmfSettingsOutput{})
	pulumi.RegisterOutputType(CxPageAdvancedSettingsDtmfSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentConditionalCaseOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentConditionalCaseArrayOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageConversationSuccessOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageConversationSuccessPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageLiveAgentHandoffOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageLiveAgentHandoffPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageOutputAudioTextOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageOutputAudioTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessagePlayAudioOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessagePlayAudioPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageTelephonyTransferCallOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageTelephonyTransferCallPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentSetParameterActionOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentSetParameterActionArrayOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerArrayOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentConditionalCaseOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentConditionalCaseArrayOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentSetParameterActionOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentSetParameterActionArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormOutput{})
	pulumi.RegisterOutputType(CxPageFormPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterAdvancedSettingsOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterAdvancedSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterAdvancedSettingsDtmfSettingsOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterAdvancedSettingsDtmfSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrayOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteArrayOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentConditionalCaseOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrayOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentSetParameterActionOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrayOutput{})
	pulumi.RegisterOutputType(CxSecuritySettingsAudioExportSettingsOutput{})
	pulumi.RegisterOutputType(CxSecuritySettingsAudioExportSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxSecuritySettingsInsightsExportSettingsOutput{})
	pulumi.RegisterOutputType(CxSecuritySettingsInsightsExportSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultArrayOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnArrayOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputInputTypeOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputInputTypePtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputInputDtmfPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputInputEventOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputInputEventPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputInputTextOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnUserInputInputTextPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPageOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputCurrentPagePtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputDifferenceArrayOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputStatusPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTextResponseArrayOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentOutput{})
	pulumi.RegisterOutputType(CxTestCaseLastTestResultConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnArrayOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputInputTypeOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputInputTypePtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputInputDtmfOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputInputDtmfPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputInputEventOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputInputEventPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputInputTextOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnUserInputInputTextPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnVirtualAgentOutputOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnVirtualAgentOutputPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPagePtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArrayOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentPtrOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestConfigOutput{})
	pulumi.RegisterOutputType(CxTestCaseTestConfigPtrOutput{})
	pulumi.RegisterOutputType(CxVersionNluSettingOutput{})
	pulumi.RegisterOutputType(CxVersionNluSettingArrayOutput{})
	pulumi.RegisterOutputType(CxWebhookGenericWebServiceOutput{})
	pulumi.RegisterOutputType(CxWebhookGenericWebServicePtrOutput{})
	pulumi.RegisterOutputType(CxWebhookServiceDirectoryOutput{})
	pulumi.RegisterOutputType(CxWebhookServiceDirectoryPtrOutput{})
	pulumi.RegisterOutputType(CxWebhookServiceDirectoryGenericWebServiceOutput{})
	pulumi.RegisterOutputType(CxWebhookServiceDirectoryGenericWebServicePtrOutput{})
	pulumi.RegisterOutputType(EntityTypeEntityOutput{})
	pulumi.RegisterOutputType(EntityTypeEntityArrayOutput{})
	pulumi.RegisterOutputType(FulfillmentFeatureOutput{})
	pulumi.RegisterOutputType(FulfillmentFeatureArrayOutput{})
	pulumi.RegisterOutputType(FulfillmentGenericWebServiceOutput{})
	pulumi.RegisterOutputType(FulfillmentGenericWebServicePtrOutput{})
	pulumi.RegisterOutputType(IntentFollowupIntentInfoOutput{})
	pulumi.RegisterOutputType(IntentFollowupIntentInfoArrayOutput{})
}
