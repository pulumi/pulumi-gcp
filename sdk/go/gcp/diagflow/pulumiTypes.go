// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CxAgentSpeechToTextSettings struct {
	// Whether to use speech adaptation for speech recognition.
	EnableSpeechAdaptation *bool `pulumi:"enableSpeechAdaptation"`
}

// CxAgentSpeechToTextSettingsInput is an input type that accepts CxAgentSpeechToTextSettingsArgs and CxAgentSpeechToTextSettingsOutput values.
// You can construct a concrete instance of `CxAgentSpeechToTextSettingsInput` via:
//
//	CxAgentSpeechToTextSettingsArgs{...}
type CxAgentSpeechToTextSettingsInput interface {
	pulumi.Input

	ToCxAgentSpeechToTextSettingsOutput() CxAgentSpeechToTextSettingsOutput
	ToCxAgentSpeechToTextSettingsOutputWithContext(context.Context) CxAgentSpeechToTextSettingsOutput
}

type CxAgentSpeechToTextSettingsArgs struct {
	// Whether to use speech adaptation for speech recognition.
	EnableSpeechAdaptation pulumi.BoolPtrInput `pulumi:"enableSpeechAdaptation"`
}

func (CxAgentSpeechToTextSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentSpeechToTextSettings)(nil)).Elem()
}

func (i CxAgentSpeechToTextSettingsArgs) ToCxAgentSpeechToTextSettingsOutput() CxAgentSpeechToTextSettingsOutput {
	return i.ToCxAgentSpeechToTextSettingsOutputWithContext(context.Background())
}

func (i CxAgentSpeechToTextSettingsArgs) ToCxAgentSpeechToTextSettingsOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentSpeechToTextSettingsOutput)
}

func (i CxAgentSpeechToTextSettingsArgs) ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput {
	return i.ToCxAgentSpeechToTextSettingsPtrOutputWithContext(context.Background())
}

func (i CxAgentSpeechToTextSettingsArgs) ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentSpeechToTextSettingsOutput).ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx)
}

// CxAgentSpeechToTextSettingsPtrInput is an input type that accepts CxAgentSpeechToTextSettingsArgs, CxAgentSpeechToTextSettingsPtr and CxAgentSpeechToTextSettingsPtrOutput values.
// You can construct a concrete instance of `CxAgentSpeechToTextSettingsPtrInput` via:
//
//	        CxAgentSpeechToTextSettingsArgs{...}
//
//	or:
//
//	        nil
type CxAgentSpeechToTextSettingsPtrInput interface {
	pulumi.Input

	ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput
	ToCxAgentSpeechToTextSettingsPtrOutputWithContext(context.Context) CxAgentSpeechToTextSettingsPtrOutput
}

type cxAgentSpeechToTextSettingsPtrType CxAgentSpeechToTextSettingsArgs

func CxAgentSpeechToTextSettingsPtr(v *CxAgentSpeechToTextSettingsArgs) CxAgentSpeechToTextSettingsPtrInput {
	return (*cxAgentSpeechToTextSettingsPtrType)(v)
}

func (*cxAgentSpeechToTextSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentSpeechToTextSettings)(nil)).Elem()
}

func (i *cxAgentSpeechToTextSettingsPtrType) ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput {
	return i.ToCxAgentSpeechToTextSettingsPtrOutputWithContext(context.Background())
}

func (i *cxAgentSpeechToTextSettingsPtrType) ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxAgentSpeechToTextSettingsPtrOutput)
}

type CxAgentSpeechToTextSettingsOutput struct{ *pulumi.OutputState }

func (CxAgentSpeechToTextSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxAgentSpeechToTextSettings)(nil)).Elem()
}

func (o CxAgentSpeechToTextSettingsOutput) ToCxAgentSpeechToTextSettingsOutput() CxAgentSpeechToTextSettingsOutput {
	return o
}

func (o CxAgentSpeechToTextSettingsOutput) ToCxAgentSpeechToTextSettingsOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsOutput {
	return o
}

func (o CxAgentSpeechToTextSettingsOutput) ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput {
	return o.ToCxAgentSpeechToTextSettingsPtrOutputWithContext(context.Background())
}

func (o CxAgentSpeechToTextSettingsOutput) ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxAgentSpeechToTextSettings) *CxAgentSpeechToTextSettings {
		return &v
	}).(CxAgentSpeechToTextSettingsPtrOutput)
}

// Whether to use speech adaptation for speech recognition.
func (o CxAgentSpeechToTextSettingsOutput) EnableSpeechAdaptation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxAgentSpeechToTextSettings) *bool { return v.EnableSpeechAdaptation }).(pulumi.BoolPtrOutput)
}

type CxAgentSpeechToTextSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxAgentSpeechToTextSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxAgentSpeechToTextSettings)(nil)).Elem()
}

func (o CxAgentSpeechToTextSettingsPtrOutput) ToCxAgentSpeechToTextSettingsPtrOutput() CxAgentSpeechToTextSettingsPtrOutput {
	return o
}

func (o CxAgentSpeechToTextSettingsPtrOutput) ToCxAgentSpeechToTextSettingsPtrOutputWithContext(ctx context.Context) CxAgentSpeechToTextSettingsPtrOutput {
	return o
}

func (o CxAgentSpeechToTextSettingsPtrOutput) Elem() CxAgentSpeechToTextSettingsOutput {
	return o.ApplyT(func(v *CxAgentSpeechToTextSettings) CxAgentSpeechToTextSettings {
		if v != nil {
			return *v
		}
		var ret CxAgentSpeechToTextSettings
		return ret
	}).(CxAgentSpeechToTextSettingsOutput)
}

// Whether to use speech adaptation for speech recognition.
func (o CxAgentSpeechToTextSettingsPtrOutput) EnableSpeechAdaptation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxAgentSpeechToTextSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSpeechAdaptation
	}).(pulumi.BoolPtrOutput)
}

type CxEntityTypeEntity struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym could be green onions.
	// For KIND_LIST entity types: This collection must contain exactly one synonym equal to value.
	Synonyms []string `pulumi:"synonyms"`
	// The word or phrase to be excluded.
	Value *string `pulumi:"value"`
}

// CxEntityTypeEntityInput is an input type that accepts CxEntityTypeEntityArgs and CxEntityTypeEntityOutput values.
// You can construct a concrete instance of `CxEntityTypeEntityInput` via:
//
//	CxEntityTypeEntityArgs{...}
type CxEntityTypeEntityInput interface {
	pulumi.Input

	ToCxEntityTypeEntityOutput() CxEntityTypeEntityOutput
	ToCxEntityTypeEntityOutputWithContext(context.Context) CxEntityTypeEntityOutput
}

type CxEntityTypeEntityArgs struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym could be green onions.
	// For KIND_LIST entity types: This collection must contain exactly one synonym equal to value.
	Synonyms pulumi.StringArrayInput `pulumi:"synonyms"`
	// The word or phrase to be excluded.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxEntityTypeEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEntityTypeEntity)(nil)).Elem()
}

func (i CxEntityTypeEntityArgs) ToCxEntityTypeEntityOutput() CxEntityTypeEntityOutput {
	return i.ToCxEntityTypeEntityOutputWithContext(context.Background())
}

func (i CxEntityTypeEntityArgs) ToCxEntityTypeEntityOutputWithContext(ctx context.Context) CxEntityTypeEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEntityTypeEntityOutput)
}

// CxEntityTypeEntityArrayInput is an input type that accepts CxEntityTypeEntityArray and CxEntityTypeEntityArrayOutput values.
// You can construct a concrete instance of `CxEntityTypeEntityArrayInput` via:
//
//	CxEntityTypeEntityArray{ CxEntityTypeEntityArgs{...} }
type CxEntityTypeEntityArrayInput interface {
	pulumi.Input

	ToCxEntityTypeEntityArrayOutput() CxEntityTypeEntityArrayOutput
	ToCxEntityTypeEntityArrayOutputWithContext(context.Context) CxEntityTypeEntityArrayOutput
}

type CxEntityTypeEntityArray []CxEntityTypeEntityInput

func (CxEntityTypeEntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEntityTypeEntity)(nil)).Elem()
}

func (i CxEntityTypeEntityArray) ToCxEntityTypeEntityArrayOutput() CxEntityTypeEntityArrayOutput {
	return i.ToCxEntityTypeEntityArrayOutputWithContext(context.Background())
}

func (i CxEntityTypeEntityArray) ToCxEntityTypeEntityArrayOutputWithContext(ctx context.Context) CxEntityTypeEntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEntityTypeEntityArrayOutput)
}

type CxEntityTypeEntityOutput struct{ *pulumi.OutputState }

func (CxEntityTypeEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEntityTypeEntity)(nil)).Elem()
}

func (o CxEntityTypeEntityOutput) ToCxEntityTypeEntityOutput() CxEntityTypeEntityOutput {
	return o
}

func (o CxEntityTypeEntityOutput) ToCxEntityTypeEntityOutputWithContext(ctx context.Context) CxEntityTypeEntityOutput {
	return o
}

// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym could be green onions.
// For KIND_LIST entity types: This collection must contain exactly one synonym equal to value.
func (o CxEntityTypeEntityOutput) Synonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxEntityTypeEntity) []string { return v.Synonyms }).(pulumi.StringArrayOutput)
}

// The word or phrase to be excluded.
func (o CxEntityTypeEntityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxEntityTypeEntity) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxEntityTypeEntityArrayOutput struct{ *pulumi.OutputState }

func (CxEntityTypeEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEntityTypeEntity)(nil)).Elem()
}

func (o CxEntityTypeEntityArrayOutput) ToCxEntityTypeEntityArrayOutput() CxEntityTypeEntityArrayOutput {
	return o
}

func (o CxEntityTypeEntityArrayOutput) ToCxEntityTypeEntityArrayOutputWithContext(ctx context.Context) CxEntityTypeEntityArrayOutput {
	return o
}

func (o CxEntityTypeEntityArrayOutput) Index(i pulumi.IntInput) CxEntityTypeEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxEntityTypeEntity {
		return vs[0].([]CxEntityTypeEntity)[vs[1].(int)]
	}).(CxEntityTypeEntityOutput)
}

type CxEntityTypeExcludedPhrase struct {
	// The word or phrase to be excluded.
	Value *string `pulumi:"value"`
}

// CxEntityTypeExcludedPhraseInput is an input type that accepts CxEntityTypeExcludedPhraseArgs and CxEntityTypeExcludedPhraseOutput values.
// You can construct a concrete instance of `CxEntityTypeExcludedPhraseInput` via:
//
//	CxEntityTypeExcludedPhraseArgs{...}
type CxEntityTypeExcludedPhraseInput interface {
	pulumi.Input

	ToCxEntityTypeExcludedPhraseOutput() CxEntityTypeExcludedPhraseOutput
	ToCxEntityTypeExcludedPhraseOutputWithContext(context.Context) CxEntityTypeExcludedPhraseOutput
}

type CxEntityTypeExcludedPhraseArgs struct {
	// The word or phrase to be excluded.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CxEntityTypeExcludedPhraseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEntityTypeExcludedPhrase)(nil)).Elem()
}

func (i CxEntityTypeExcludedPhraseArgs) ToCxEntityTypeExcludedPhraseOutput() CxEntityTypeExcludedPhraseOutput {
	return i.ToCxEntityTypeExcludedPhraseOutputWithContext(context.Background())
}

func (i CxEntityTypeExcludedPhraseArgs) ToCxEntityTypeExcludedPhraseOutputWithContext(ctx context.Context) CxEntityTypeExcludedPhraseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEntityTypeExcludedPhraseOutput)
}

// CxEntityTypeExcludedPhraseArrayInput is an input type that accepts CxEntityTypeExcludedPhraseArray and CxEntityTypeExcludedPhraseArrayOutput values.
// You can construct a concrete instance of `CxEntityTypeExcludedPhraseArrayInput` via:
//
//	CxEntityTypeExcludedPhraseArray{ CxEntityTypeExcludedPhraseArgs{...} }
type CxEntityTypeExcludedPhraseArrayInput interface {
	pulumi.Input

	ToCxEntityTypeExcludedPhraseArrayOutput() CxEntityTypeExcludedPhraseArrayOutput
	ToCxEntityTypeExcludedPhraseArrayOutputWithContext(context.Context) CxEntityTypeExcludedPhraseArrayOutput
}

type CxEntityTypeExcludedPhraseArray []CxEntityTypeExcludedPhraseInput

func (CxEntityTypeExcludedPhraseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEntityTypeExcludedPhrase)(nil)).Elem()
}

func (i CxEntityTypeExcludedPhraseArray) ToCxEntityTypeExcludedPhraseArrayOutput() CxEntityTypeExcludedPhraseArrayOutput {
	return i.ToCxEntityTypeExcludedPhraseArrayOutputWithContext(context.Background())
}

func (i CxEntityTypeExcludedPhraseArray) ToCxEntityTypeExcludedPhraseArrayOutputWithContext(ctx context.Context) CxEntityTypeExcludedPhraseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEntityTypeExcludedPhraseArrayOutput)
}

type CxEntityTypeExcludedPhraseOutput struct{ *pulumi.OutputState }

func (CxEntityTypeExcludedPhraseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEntityTypeExcludedPhrase)(nil)).Elem()
}

func (o CxEntityTypeExcludedPhraseOutput) ToCxEntityTypeExcludedPhraseOutput() CxEntityTypeExcludedPhraseOutput {
	return o
}

func (o CxEntityTypeExcludedPhraseOutput) ToCxEntityTypeExcludedPhraseOutputWithContext(ctx context.Context) CxEntityTypeExcludedPhraseOutput {
	return o
}

// The word or phrase to be excluded.
func (o CxEntityTypeExcludedPhraseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxEntityTypeExcludedPhrase) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CxEntityTypeExcludedPhraseArrayOutput struct{ *pulumi.OutputState }

func (CxEntityTypeExcludedPhraseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEntityTypeExcludedPhrase)(nil)).Elem()
}

func (o CxEntityTypeExcludedPhraseArrayOutput) ToCxEntityTypeExcludedPhraseArrayOutput() CxEntityTypeExcludedPhraseArrayOutput {
	return o
}

func (o CxEntityTypeExcludedPhraseArrayOutput) ToCxEntityTypeExcludedPhraseArrayOutputWithContext(ctx context.Context) CxEntityTypeExcludedPhraseArrayOutput {
	return o
}

func (o CxEntityTypeExcludedPhraseArrayOutput) Index(i pulumi.IntInput) CxEntityTypeExcludedPhraseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxEntityTypeExcludedPhrase {
		return vs[0].([]CxEntityTypeExcludedPhrase)[vs[1].(int)]
	}).(CxEntityTypeExcludedPhraseOutput)
}

type CxEnvironmentVersionConfig struct {
	// Format: projects/{{project}}/locations/{{location}}/agents/{{agent}}/flows/{{flow}}/versions/{{version}}.
	Version string `pulumi:"version"`
}

// CxEnvironmentVersionConfigInput is an input type that accepts CxEnvironmentVersionConfigArgs and CxEnvironmentVersionConfigOutput values.
// You can construct a concrete instance of `CxEnvironmentVersionConfigInput` via:
//
//	CxEnvironmentVersionConfigArgs{...}
type CxEnvironmentVersionConfigInput interface {
	pulumi.Input

	ToCxEnvironmentVersionConfigOutput() CxEnvironmentVersionConfigOutput
	ToCxEnvironmentVersionConfigOutputWithContext(context.Context) CxEnvironmentVersionConfigOutput
}

type CxEnvironmentVersionConfigArgs struct {
	// Format: projects/{{project}}/locations/{{location}}/agents/{{agent}}/flows/{{flow}}/versions/{{version}}.
	Version pulumi.StringInput `pulumi:"version"`
}

func (CxEnvironmentVersionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEnvironmentVersionConfig)(nil)).Elem()
}

func (i CxEnvironmentVersionConfigArgs) ToCxEnvironmentVersionConfigOutput() CxEnvironmentVersionConfigOutput {
	return i.ToCxEnvironmentVersionConfigOutputWithContext(context.Background())
}

func (i CxEnvironmentVersionConfigArgs) ToCxEnvironmentVersionConfigOutputWithContext(ctx context.Context) CxEnvironmentVersionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEnvironmentVersionConfigOutput)
}

// CxEnvironmentVersionConfigArrayInput is an input type that accepts CxEnvironmentVersionConfigArray and CxEnvironmentVersionConfigArrayOutput values.
// You can construct a concrete instance of `CxEnvironmentVersionConfigArrayInput` via:
//
//	CxEnvironmentVersionConfigArray{ CxEnvironmentVersionConfigArgs{...} }
type CxEnvironmentVersionConfigArrayInput interface {
	pulumi.Input

	ToCxEnvironmentVersionConfigArrayOutput() CxEnvironmentVersionConfigArrayOutput
	ToCxEnvironmentVersionConfigArrayOutputWithContext(context.Context) CxEnvironmentVersionConfigArrayOutput
}

type CxEnvironmentVersionConfigArray []CxEnvironmentVersionConfigInput

func (CxEnvironmentVersionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEnvironmentVersionConfig)(nil)).Elem()
}

func (i CxEnvironmentVersionConfigArray) ToCxEnvironmentVersionConfigArrayOutput() CxEnvironmentVersionConfigArrayOutput {
	return i.ToCxEnvironmentVersionConfigArrayOutputWithContext(context.Background())
}

func (i CxEnvironmentVersionConfigArray) ToCxEnvironmentVersionConfigArrayOutputWithContext(ctx context.Context) CxEnvironmentVersionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxEnvironmentVersionConfigArrayOutput)
}

type CxEnvironmentVersionConfigOutput struct{ *pulumi.OutputState }

func (CxEnvironmentVersionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxEnvironmentVersionConfig)(nil)).Elem()
}

func (o CxEnvironmentVersionConfigOutput) ToCxEnvironmentVersionConfigOutput() CxEnvironmentVersionConfigOutput {
	return o
}

func (o CxEnvironmentVersionConfigOutput) ToCxEnvironmentVersionConfigOutputWithContext(ctx context.Context) CxEnvironmentVersionConfigOutput {
	return o
}

// Format: projects/{{project}}/locations/{{location}}/agents/{{agent}}/flows/{{flow}}/versions/{{version}}.
func (o CxEnvironmentVersionConfigOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v CxEnvironmentVersionConfig) string { return v.Version }).(pulumi.StringOutput)
}

type CxEnvironmentVersionConfigArrayOutput struct{ *pulumi.OutputState }

func (CxEnvironmentVersionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxEnvironmentVersionConfig)(nil)).Elem()
}

func (o CxEnvironmentVersionConfigArrayOutput) ToCxEnvironmentVersionConfigArrayOutput() CxEnvironmentVersionConfigArrayOutput {
	return o
}

func (o CxEnvironmentVersionConfigArrayOutput) ToCxEnvironmentVersionConfigArrayOutputWithContext(ctx context.Context) CxEnvironmentVersionConfigArrayOutput {
	return o
}

func (o CxEnvironmentVersionConfigArrayOutput) Index(i pulumi.IntInput) CxEnvironmentVersionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxEnvironmentVersionConfig {
		return vs[0].([]CxEnvironmentVersionConfig)[vs[1].(int)]
	}).(CxEnvironmentVersionConfigOutput)
}

type CxFlowEventHandler struct {
	// The name of the event to handle.
	Event *string `pulumi:"event"`
	// -
	// The unique identifier of this event handler.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment *CxFlowEventHandlerTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxFlowEventHandlerInput is an input type that accepts CxFlowEventHandlerArgs and CxFlowEventHandlerOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerInput` via:
//
//	CxFlowEventHandlerArgs{...}
type CxFlowEventHandlerInput interface {
	pulumi.Input

	ToCxFlowEventHandlerOutput() CxFlowEventHandlerOutput
	ToCxFlowEventHandlerOutputWithContext(context.Context) CxFlowEventHandlerOutput
}

type CxFlowEventHandlerArgs struct {
	// The name of the event to handle.
	Event pulumi.StringPtrInput `pulumi:"event"`
	// -
	// The unique identifier of this event handler.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment CxFlowEventHandlerTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxFlowEventHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandler)(nil)).Elem()
}

func (i CxFlowEventHandlerArgs) ToCxFlowEventHandlerOutput() CxFlowEventHandlerOutput {
	return i.ToCxFlowEventHandlerOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerArgs) ToCxFlowEventHandlerOutputWithContext(ctx context.Context) CxFlowEventHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerOutput)
}

// CxFlowEventHandlerArrayInput is an input type that accepts CxFlowEventHandlerArray and CxFlowEventHandlerArrayOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerArrayInput` via:
//
//	CxFlowEventHandlerArray{ CxFlowEventHandlerArgs{...} }
type CxFlowEventHandlerArrayInput interface {
	pulumi.Input

	ToCxFlowEventHandlerArrayOutput() CxFlowEventHandlerArrayOutput
	ToCxFlowEventHandlerArrayOutputWithContext(context.Context) CxFlowEventHandlerArrayOutput
}

type CxFlowEventHandlerArray []CxFlowEventHandlerInput

func (CxFlowEventHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandler)(nil)).Elem()
}

func (i CxFlowEventHandlerArray) ToCxFlowEventHandlerArrayOutput() CxFlowEventHandlerArrayOutput {
	return i.ToCxFlowEventHandlerArrayOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerArray) ToCxFlowEventHandlerArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerArrayOutput)
}

type CxFlowEventHandlerOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandler)(nil)).Elem()
}

func (o CxFlowEventHandlerOutput) ToCxFlowEventHandlerOutput() CxFlowEventHandlerOutput {
	return o
}

func (o CxFlowEventHandlerOutput) ToCxFlowEventHandlerOutputWithContext(ctx context.Context) CxFlowEventHandlerOutput {
	return o
}

// The name of the event to handle.
func (o CxFlowEventHandlerOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *string { return v.Event }).(pulumi.StringPtrOutput)
}

// -
// The unique identifier of this event handler.
func (o CxFlowEventHandlerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxFlowEventHandlerOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxFlowEventHandlerOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
// Structure is documented below.
func (o CxFlowEventHandlerOutput) TriggerFulfillment() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandler) *CxFlowEventHandlerTriggerFulfillment { return v.TriggerFulfillment }).(CxFlowEventHandlerTriggerFulfillmentPtrOutput)
}

type CxFlowEventHandlerArrayOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandler)(nil)).Elem()
}

func (o CxFlowEventHandlerArrayOutput) ToCxFlowEventHandlerArrayOutput() CxFlowEventHandlerArrayOutput {
	return o
}

func (o CxFlowEventHandlerArrayOutput) ToCxFlowEventHandlerArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerArrayOutput {
	return o
}

func (o CxFlowEventHandlerArrayOutput) Index(i pulumi.IntInput) CxFlowEventHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowEventHandler {
		return vs[0].([]CxFlowEventHandler)[vs[1].(int)]
	}).(CxFlowEventHandlerOutput)
}

type CxFlowEventHandlerTriggerFulfillment struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxFlowEventHandlerTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxFlowEventHandlerTriggerFulfillmentInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentArgs and CxFlowEventHandlerTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentArgs{...}
type CxFlowEventHandlerTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentOutput() CxFlowEventHandlerTriggerFulfillmentOutput
	ToCxFlowEventHandlerTriggerFulfillmentOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentOutput
}

type CxFlowEventHandlerTriggerFulfillmentArgs struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxFlowEventHandlerTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxFlowEventHandlerTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentArgs) ToCxFlowEventHandlerTriggerFulfillmentOutput() CxFlowEventHandlerTriggerFulfillmentOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentArgs) ToCxFlowEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentArgs) ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentArgs) ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentOutput).ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentArgs, CxFlowEventHandlerTriggerFulfillmentPtr and CxFlowEventHandlerTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentPtrType CxFlowEventHandlerTriggerFulfillmentArgs

func CxFlowEventHandlerTriggerFulfillmentPtr(v *CxFlowEventHandlerTriggerFulfillmentArgs) CxFlowEventHandlerTriggerFulfillmentPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentPtrType) ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentPtrType) ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentOutput) ToCxFlowEventHandlerTriggerFulfillmentOutput() CxFlowEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentOutput) ToCxFlowEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentOutput) ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentOutput) ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillment) *CxFlowEventHandlerTriggerFulfillment {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentPtrOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) Messages() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) []CxFlowEventHandlerTriggerFulfillmentMessage {
		return v.Messages
	}).(CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxFlowEventHandlerTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentPtrOutput() CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) CxFlowEventHandlerTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillment
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) Messages() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) []CxFlowEventHandlerTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxFlowEventHandlerTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessage struct {
	// A collection of text responses.
	Text *CxFlowEventHandlerTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxFlowEventHandlerTriggerFulfillmentMessageInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageArgs and CxFlowEventHandlerTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageArgs struct {
	// A collection of text responses.
	Text CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageOutput)
}

// CxFlowEventHandlerTriggerFulfillmentMessageArrayInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageArray and CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageArrayInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageArray{ CxFlowEventHandlerTriggerFulfillmentMessageArgs{...} }
type CxFlowEventHandlerTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutput() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageArray []CxFlowEventHandlerTriggerFulfillmentMessageInput

func (CxFlowEventHandlerTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageArray) ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutput() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageArray) ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutput() CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

// A collection of text responses.
func (o CxFlowEventHandlerTriggerFulfillmentMessageOutput) Text() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessage) *CxFlowEventHandlerTriggerFulfillmentMessageText {
		return v.Text
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutput() CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxFlowEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowEventHandlerTriggerFulfillmentMessage {
		return vs[0].([]CxFlowEventHandlerTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxFlowEventHandlerTriggerFulfillmentMessageOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageText struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxFlowEventHandlerTriggerFulfillmentMessageTextInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageTextArgs and CxFlowEventHandlerTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageTextInput` via:
//
//	CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{...}
type CxFlowEventHandlerTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextOutput
}

type CxFlowEventHandlerTriggerFulfillmentMessageTextArgs struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTextOutput)
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTextOutput).ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxFlowEventHandlerTriggerFulfillmentMessageTextArgs, CxFlowEventHandlerTriggerFulfillmentMessageTextPtr and CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput
	ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput
}

type cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType CxFlowEventHandlerTriggerFulfillmentMessageTextArgs

func CxFlowEventHandlerTriggerFulfillmentMessageTextPtr(v *CxFlowEventHandlerTriggerFulfillmentMessageTextArgs) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput {
	return (*cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxFlowEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowEventHandlerTriggerFulfillmentMessageText) *CxFlowEventHandlerTriggerFulfillmentMessageText {
		return &v
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxFlowEventHandlerTriggerFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) Elem() CxFlowEventHandlerTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageText) CxFlowEventHandlerTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxFlowEventHandlerTriggerFulfillmentMessageText
		return ret
	}).(CxFlowEventHandlerTriggerFulfillmentMessageTextOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxFlowEventHandlerTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxFlowNluSettings struct {
	// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
	// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
	ClassificationThreshold *float64 `pulumi:"classificationThreshold"`
	// Indicates NLU model training mode.
	// * MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
	// * MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
	//   Possible values are `MODEL_TRAINING_MODE_AUTOMATIC` and `MODEL_TRAINING_MODE_MANUAL`.
	ModelTrainingMode *string `pulumi:"modelTrainingMode"`
	// Indicates the type of NLU model.
	// * MODEL_TYPE_STANDARD: Use standard NLU model.
	// * MODEL_TYPE_ADVANCED: Use advanced NLU model.
	//   Possible values are `MODEL_TYPE_STANDARD` and `MODEL_TYPE_ADVANCED`.
	ModelType *string `pulumi:"modelType"`
}

// CxFlowNluSettingsInput is an input type that accepts CxFlowNluSettingsArgs and CxFlowNluSettingsOutput values.
// You can construct a concrete instance of `CxFlowNluSettingsInput` via:
//
//	CxFlowNluSettingsArgs{...}
type CxFlowNluSettingsInput interface {
	pulumi.Input

	ToCxFlowNluSettingsOutput() CxFlowNluSettingsOutput
	ToCxFlowNluSettingsOutputWithContext(context.Context) CxFlowNluSettingsOutput
}

type CxFlowNluSettingsArgs struct {
	// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
	// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
	ClassificationThreshold pulumi.Float64PtrInput `pulumi:"classificationThreshold"`
	// Indicates NLU model training mode.
	// * MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
	// * MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
	//   Possible values are `MODEL_TRAINING_MODE_AUTOMATIC` and `MODEL_TRAINING_MODE_MANUAL`.
	ModelTrainingMode pulumi.StringPtrInput `pulumi:"modelTrainingMode"`
	// Indicates the type of NLU model.
	// * MODEL_TYPE_STANDARD: Use standard NLU model.
	// * MODEL_TYPE_ADVANCED: Use advanced NLU model.
	//   Possible values are `MODEL_TYPE_STANDARD` and `MODEL_TYPE_ADVANCED`.
	ModelType pulumi.StringPtrInput `pulumi:"modelType"`
}

func (CxFlowNluSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowNluSettings)(nil)).Elem()
}

func (i CxFlowNluSettingsArgs) ToCxFlowNluSettingsOutput() CxFlowNluSettingsOutput {
	return i.ToCxFlowNluSettingsOutputWithContext(context.Background())
}

func (i CxFlowNluSettingsArgs) ToCxFlowNluSettingsOutputWithContext(ctx context.Context) CxFlowNluSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowNluSettingsOutput)
}

func (i CxFlowNluSettingsArgs) ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput {
	return i.ToCxFlowNluSettingsPtrOutputWithContext(context.Background())
}

func (i CxFlowNluSettingsArgs) ToCxFlowNluSettingsPtrOutputWithContext(ctx context.Context) CxFlowNluSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowNluSettingsOutput).ToCxFlowNluSettingsPtrOutputWithContext(ctx)
}

// CxFlowNluSettingsPtrInput is an input type that accepts CxFlowNluSettingsArgs, CxFlowNluSettingsPtr and CxFlowNluSettingsPtrOutput values.
// You can construct a concrete instance of `CxFlowNluSettingsPtrInput` via:
//
//	        CxFlowNluSettingsArgs{...}
//
//	or:
//
//	        nil
type CxFlowNluSettingsPtrInput interface {
	pulumi.Input

	ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput
	ToCxFlowNluSettingsPtrOutputWithContext(context.Context) CxFlowNluSettingsPtrOutput
}

type cxFlowNluSettingsPtrType CxFlowNluSettingsArgs

func CxFlowNluSettingsPtr(v *CxFlowNluSettingsArgs) CxFlowNluSettingsPtrInput {
	return (*cxFlowNluSettingsPtrType)(v)
}

func (*cxFlowNluSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowNluSettings)(nil)).Elem()
}

func (i *cxFlowNluSettingsPtrType) ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput {
	return i.ToCxFlowNluSettingsPtrOutputWithContext(context.Background())
}

func (i *cxFlowNluSettingsPtrType) ToCxFlowNluSettingsPtrOutputWithContext(ctx context.Context) CxFlowNluSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowNluSettingsPtrOutput)
}

type CxFlowNluSettingsOutput struct{ *pulumi.OutputState }

func (CxFlowNluSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowNluSettings)(nil)).Elem()
}

func (o CxFlowNluSettingsOutput) ToCxFlowNluSettingsOutput() CxFlowNluSettingsOutput {
	return o
}

func (o CxFlowNluSettingsOutput) ToCxFlowNluSettingsOutputWithContext(ctx context.Context) CxFlowNluSettingsOutput {
	return o
}

func (o CxFlowNluSettingsOutput) ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput {
	return o.ToCxFlowNluSettingsPtrOutputWithContext(context.Background())
}

func (o CxFlowNluSettingsOutput) ToCxFlowNluSettingsPtrOutputWithContext(ctx context.Context) CxFlowNluSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowNluSettings) *CxFlowNluSettings {
		return &v
	}).(CxFlowNluSettingsPtrOutput)
}

// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
func (o CxFlowNluSettingsOutput) ClassificationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CxFlowNluSettings) *float64 { return v.ClassificationThreshold }).(pulumi.Float64PtrOutput)
}

// Indicates NLU model training mode.
//   - MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
//   - MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
//     Possible values are `MODEL_TRAINING_MODE_AUTOMATIC` and `MODEL_TRAINING_MODE_MANUAL`.
func (o CxFlowNluSettingsOutput) ModelTrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowNluSettings) *string { return v.ModelTrainingMode }).(pulumi.StringPtrOutput)
}

// Indicates the type of NLU model.
//   - MODEL_TYPE_STANDARD: Use standard NLU model.
//   - MODEL_TYPE_ADVANCED: Use advanced NLU model.
//     Possible values are `MODEL_TYPE_STANDARD` and `MODEL_TYPE_ADVANCED`.
func (o CxFlowNluSettingsOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowNluSettings) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

type CxFlowNluSettingsPtrOutput struct{ *pulumi.OutputState }

func (CxFlowNluSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowNluSettings)(nil)).Elem()
}

func (o CxFlowNluSettingsPtrOutput) ToCxFlowNluSettingsPtrOutput() CxFlowNluSettingsPtrOutput {
	return o
}

func (o CxFlowNluSettingsPtrOutput) ToCxFlowNluSettingsPtrOutputWithContext(ctx context.Context) CxFlowNluSettingsPtrOutput {
	return o
}

func (o CxFlowNluSettingsPtrOutput) Elem() CxFlowNluSettingsOutput {
	return o.ApplyT(func(v *CxFlowNluSettings) CxFlowNluSettings {
		if v != nil {
			return *v
		}
		var ret CxFlowNluSettings
		return ret
	}).(CxFlowNluSettingsOutput)
}

// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
func (o CxFlowNluSettingsPtrOutput) ClassificationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CxFlowNluSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ClassificationThreshold
	}).(pulumi.Float64PtrOutput)
}

// Indicates NLU model training mode.
//   - MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
//   - MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
//     Possible values are `MODEL_TRAINING_MODE_AUTOMATIC` and `MODEL_TRAINING_MODE_MANUAL`.
func (o CxFlowNluSettingsPtrOutput) ModelTrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowNluSettings) *string {
		if v == nil {
			return nil
		}
		return v.ModelTrainingMode
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of NLU model.
//   - MODEL_TYPE_STANDARD: Use standard NLU model.
//   - MODEL_TYPE_ADVANCED: Use advanced NLU model.
//     Possible values are `MODEL_TYPE_STANDARD` and `MODEL_TYPE_ADVANCED`.
func (o CxFlowNluSettingsPtrOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowNluSettings) *string {
		if v == nil {
			return nil
		}
		return v.ModelType
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRoute struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Condition *string `pulumi:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Intent *string `pulumi:"intent"`
	// -
	// The unique identifier of this event handler.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment *CxFlowTransitionRouteTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxFlowTransitionRouteInput is an input type that accepts CxFlowTransitionRouteArgs and CxFlowTransitionRouteOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteInput` via:
//
//	CxFlowTransitionRouteArgs{...}
type CxFlowTransitionRouteInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteOutput() CxFlowTransitionRouteOutput
	ToCxFlowTransitionRouteOutputWithContext(context.Context) CxFlowTransitionRouteOutput
}

type CxFlowTransitionRouteArgs struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Intent pulumi.StringPtrInput `pulumi:"intent"`
	// -
	// The unique identifier of this event handler.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment CxFlowTransitionRouteTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxFlowTransitionRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRoute)(nil)).Elem()
}

func (i CxFlowTransitionRouteArgs) ToCxFlowTransitionRouteOutput() CxFlowTransitionRouteOutput {
	return i.ToCxFlowTransitionRouteOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteArgs) ToCxFlowTransitionRouteOutputWithContext(ctx context.Context) CxFlowTransitionRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteOutput)
}

// CxFlowTransitionRouteArrayInput is an input type that accepts CxFlowTransitionRouteArray and CxFlowTransitionRouteArrayOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteArrayInput` via:
//
//	CxFlowTransitionRouteArray{ CxFlowTransitionRouteArgs{...} }
type CxFlowTransitionRouteArrayInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteArrayOutput() CxFlowTransitionRouteArrayOutput
	ToCxFlowTransitionRouteArrayOutputWithContext(context.Context) CxFlowTransitionRouteArrayOutput
}

type CxFlowTransitionRouteArray []CxFlowTransitionRouteInput

func (CxFlowTransitionRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRoute)(nil)).Elem()
}

func (i CxFlowTransitionRouteArray) ToCxFlowTransitionRouteArrayOutput() CxFlowTransitionRouteArrayOutput {
	return i.ToCxFlowTransitionRouteArrayOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteArray) ToCxFlowTransitionRouteArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteArrayOutput)
}

type CxFlowTransitionRouteOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRoute)(nil)).Elem()
}

func (o CxFlowTransitionRouteOutput) ToCxFlowTransitionRouteOutput() CxFlowTransitionRouteOutput {
	return o
}

func (o CxFlowTransitionRouteOutput) ToCxFlowTransitionRouteOutputWithContext(ctx context.Context) CxFlowTransitionRouteOutput {
	return o
}

// The condition to evaluate against form parameters or session parameters.
// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
func (o CxFlowTransitionRouteOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The unique identifier of an Intent.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
func (o CxFlowTransitionRouteOutput) Intent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.Intent }).(pulumi.StringPtrOutput)
}

// -
// The unique identifier of this event handler.
func (o CxFlowTransitionRouteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxFlowTransitionRouteOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxFlowTransitionRouteOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
// Structure is documented below.
func (o CxFlowTransitionRouteOutput) TriggerFulfillment() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRoute) *CxFlowTransitionRouteTriggerFulfillment { return v.TriggerFulfillment }).(CxFlowTransitionRouteTriggerFulfillmentPtrOutput)
}

type CxFlowTransitionRouteArrayOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRoute)(nil)).Elem()
}

func (o CxFlowTransitionRouteArrayOutput) ToCxFlowTransitionRouteArrayOutput() CxFlowTransitionRouteArrayOutput {
	return o
}

func (o CxFlowTransitionRouteArrayOutput) ToCxFlowTransitionRouteArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteArrayOutput {
	return o
}

func (o CxFlowTransitionRouteArrayOutput) Index(i pulumi.IntInput) CxFlowTransitionRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowTransitionRoute {
		return vs[0].([]CxFlowTransitionRoute)[vs[1].(int)]
	}).(CxFlowTransitionRouteOutput)
}

type CxFlowTransitionRouteTriggerFulfillment struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxFlowTransitionRouteTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxFlowTransitionRouteTriggerFulfillmentInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentArgs and CxFlowTransitionRouteTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentOutput() CxFlowTransitionRouteTriggerFulfillmentOutput
	ToCxFlowTransitionRouteTriggerFulfillmentOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentOutput
}

type CxFlowTransitionRouteTriggerFulfillmentArgs struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxFlowTransitionRouteTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentArgs) ToCxFlowTransitionRouteTriggerFulfillmentOutput() CxFlowTransitionRouteTriggerFulfillmentOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentArgs) ToCxFlowTransitionRouteTriggerFulfillmentOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentArgs) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentArgs) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentOutput).ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentArgs, CxFlowTransitionRouteTriggerFulfillmentPtr and CxFlowTransitionRouteTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentPtrType CxFlowTransitionRouteTriggerFulfillmentArgs

func CxFlowTransitionRouteTriggerFulfillmentPtr(v *CxFlowTransitionRouteTriggerFulfillmentArgs) CxFlowTransitionRouteTriggerFulfillmentPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentPtrType) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentPtrType) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ToCxFlowTransitionRouteTriggerFulfillmentOutput() CxFlowTransitionRouteTriggerFulfillmentOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ToCxFlowTransitionRouteTriggerFulfillmentOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillment) *CxFlowTransitionRouteTriggerFulfillment {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentPtrOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) Messages() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) []CxFlowTransitionRouteTriggerFulfillmentMessage {
		return v.Messages
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxFlowTransitionRouteTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutput() CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) CxFlowTransitionRouteTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillment
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) Messages() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) []CxFlowTransitionRouteTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxFlowTransitionRouteTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessage struct {
	// A collection of text responses.
	Text *CxFlowTransitionRouteTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessageInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageArgs and CxFlowTransitionRouteTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageArgs struct {
	// A collection of text responses.
	Text CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageOutput)
}

// CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageArray and CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageArray{ CxFlowTransitionRouteTriggerFulfillmentMessageArgs{...} }
type CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageArray []CxFlowTransitionRouteTriggerFulfillmentMessageInput

func (CxFlowTransitionRouteTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageArray) ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageArray) ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutput() CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return o
}

// A collection of text responses.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageOutput) Text() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessage) *CxFlowTransitionRouteTriggerFulfillmentMessageText {
		return v.Text
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlowTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput() CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxFlowTransitionRouteTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlowTransitionRouteTriggerFulfillmentMessage {
		return vs[0].([]CxFlowTransitionRouteTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageText struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxFlowTransitionRouteTriggerFulfillmentMessageTextInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs and CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageTextInput` via:
//
//	CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs{...}
type CxFlowTransitionRouteTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput)
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput).ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs, CxFlowTransitionRouteTriggerFulfillmentMessageTextPtr and CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput
	ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput
}

type cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs

func CxFlowTransitionRouteTriggerFulfillmentMessageTextPtr(v *CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput {
	return (*cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxFlowTransitionRouteTriggerFulfillmentMessageTextPtrType) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxFlowTransitionRouteTriggerFulfillmentMessageText) *CxFlowTransitionRouteTriggerFulfillmentMessageText {
		return &v
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxFlowTransitionRouteTriggerFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlowTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ToCxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) Elem() CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageText) CxFlowTransitionRouteTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxFlowTransitionRouteTriggerFulfillmentMessageText
		return ret
	}).(CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxFlowTransitionRouteTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxIntentParameter struct {
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	EntityType string `pulumi:"entityType"`
	// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
	Id string `pulumi:"id"`
	// Indicates whether the parameter represents a list of values.
	IsList *bool `pulumi:"isList"`
	// Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging.
	// Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	Redact *bool `pulumi:"redact"`
}

// CxIntentParameterInput is an input type that accepts CxIntentParameterArgs and CxIntentParameterOutput values.
// You can construct a concrete instance of `CxIntentParameterInput` via:
//
//	CxIntentParameterArgs{...}
type CxIntentParameterInput interface {
	pulumi.Input

	ToCxIntentParameterOutput() CxIntentParameterOutput
	ToCxIntentParameterOutputWithContext(context.Context) CxIntentParameterOutput
}

type CxIntentParameterArgs struct {
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates whether the parameter represents a list of values.
	IsList pulumi.BoolPtrInput `pulumi:"isList"`
	// Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging.
	// Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	Redact pulumi.BoolPtrInput `pulumi:"redact"`
}

func (CxIntentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentParameter)(nil)).Elem()
}

func (i CxIntentParameterArgs) ToCxIntentParameterOutput() CxIntentParameterOutput {
	return i.ToCxIntentParameterOutputWithContext(context.Background())
}

func (i CxIntentParameterArgs) ToCxIntentParameterOutputWithContext(ctx context.Context) CxIntentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentParameterOutput)
}

// CxIntentParameterArrayInput is an input type that accepts CxIntentParameterArray and CxIntentParameterArrayOutput values.
// You can construct a concrete instance of `CxIntentParameterArrayInput` via:
//
//	CxIntentParameterArray{ CxIntentParameterArgs{...} }
type CxIntentParameterArrayInput interface {
	pulumi.Input

	ToCxIntentParameterArrayOutput() CxIntentParameterArrayOutput
	ToCxIntentParameterArrayOutputWithContext(context.Context) CxIntentParameterArrayOutput
}

type CxIntentParameterArray []CxIntentParameterInput

func (CxIntentParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentParameter)(nil)).Elem()
}

func (i CxIntentParameterArray) ToCxIntentParameterArrayOutput() CxIntentParameterArrayOutput {
	return i.ToCxIntentParameterArrayOutputWithContext(context.Background())
}

func (i CxIntentParameterArray) ToCxIntentParameterArrayOutputWithContext(ctx context.Context) CxIntentParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentParameterArrayOutput)
}

type CxIntentParameterOutput struct{ *pulumi.OutputState }

func (CxIntentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentParameter)(nil)).Elem()
}

func (o CxIntentParameterOutput) ToCxIntentParameterOutput() CxIntentParameterOutput {
	return o
}

func (o CxIntentParameterOutput) ToCxIntentParameterOutputWithContext(ctx context.Context) CxIntentParameterOutput {
	return o
}

// The entity type of the parameter.
// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
func (o CxIntentParameterOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v CxIntentParameter) string { return v.EntityType }).(pulumi.StringOutput)
}

// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
func (o CxIntentParameterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CxIntentParameter) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the parameter represents a list of values.
func (o CxIntentParameterOutput) IsList() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxIntentParameter) *bool { return v.IsList }).(pulumi.BoolPtrOutput)
}

// Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging.
// Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
func (o CxIntentParameterOutput) Redact() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxIntentParameter) *bool { return v.Redact }).(pulumi.BoolPtrOutput)
}

type CxIntentParameterArrayOutput struct{ *pulumi.OutputState }

func (CxIntentParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentParameter)(nil)).Elem()
}

func (o CxIntentParameterArrayOutput) ToCxIntentParameterArrayOutput() CxIntentParameterArrayOutput {
	return o
}

func (o CxIntentParameterArrayOutput) ToCxIntentParameterArrayOutputWithContext(ctx context.Context) CxIntentParameterArrayOutput {
	return o
}

func (o CxIntentParameterArrayOutput) Index(i pulumi.IntInput) CxIntentParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxIntentParameter {
		return vs[0].([]CxIntentParameter)[vs[1].(int)]
	}).(CxIntentParameterOutput)
}

type CxIntentTrainingPhrase struct {
	// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
	Id *string `pulumi:"id"`
	// The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase.
	// Note: The API does not automatically annotate training phrases like the Dialogflow Console does.
	// Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated.
	// If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set.
	// If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways:
	// Part.text is set to a part of the phrase that has no parameters.
	// Part.text is set to a part of the phrase that you want to annotate, and the parameterId field is set.
	// Structure is documented below.
	Parts []CxIntentTrainingPhrasePart `pulumi:"parts"`
	// Indicates how many times this example was added to the intent.
	RepeatCount *int `pulumi:"repeatCount"`
}

// CxIntentTrainingPhraseInput is an input type that accepts CxIntentTrainingPhraseArgs and CxIntentTrainingPhraseOutput values.
// You can construct a concrete instance of `CxIntentTrainingPhraseInput` via:
//
//	CxIntentTrainingPhraseArgs{...}
type CxIntentTrainingPhraseInput interface {
	pulumi.Input

	ToCxIntentTrainingPhraseOutput() CxIntentTrainingPhraseOutput
	ToCxIntentTrainingPhraseOutputWithContext(context.Context) CxIntentTrainingPhraseOutput
}

type CxIntentTrainingPhraseArgs struct {
	// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase.
	// Note: The API does not automatically annotate training phrases like the Dialogflow Console does.
	// Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated.
	// If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set.
	// If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways:
	// Part.text is set to a part of the phrase that has no parameters.
	// Part.text is set to a part of the phrase that you want to annotate, and the parameterId field is set.
	// Structure is documented below.
	Parts CxIntentTrainingPhrasePartArrayInput `pulumi:"parts"`
	// Indicates how many times this example was added to the intent.
	RepeatCount pulumi.IntPtrInput `pulumi:"repeatCount"`
}

func (CxIntentTrainingPhraseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentTrainingPhrase)(nil)).Elem()
}

func (i CxIntentTrainingPhraseArgs) ToCxIntentTrainingPhraseOutput() CxIntentTrainingPhraseOutput {
	return i.ToCxIntentTrainingPhraseOutputWithContext(context.Background())
}

func (i CxIntentTrainingPhraseArgs) ToCxIntentTrainingPhraseOutputWithContext(ctx context.Context) CxIntentTrainingPhraseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentTrainingPhraseOutput)
}

// CxIntentTrainingPhraseArrayInput is an input type that accepts CxIntentTrainingPhraseArray and CxIntentTrainingPhraseArrayOutput values.
// You can construct a concrete instance of `CxIntentTrainingPhraseArrayInput` via:
//
//	CxIntentTrainingPhraseArray{ CxIntentTrainingPhraseArgs{...} }
type CxIntentTrainingPhraseArrayInput interface {
	pulumi.Input

	ToCxIntentTrainingPhraseArrayOutput() CxIntentTrainingPhraseArrayOutput
	ToCxIntentTrainingPhraseArrayOutputWithContext(context.Context) CxIntentTrainingPhraseArrayOutput
}

type CxIntentTrainingPhraseArray []CxIntentTrainingPhraseInput

func (CxIntentTrainingPhraseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentTrainingPhrase)(nil)).Elem()
}

func (i CxIntentTrainingPhraseArray) ToCxIntentTrainingPhraseArrayOutput() CxIntentTrainingPhraseArrayOutput {
	return i.ToCxIntentTrainingPhraseArrayOutputWithContext(context.Background())
}

func (i CxIntentTrainingPhraseArray) ToCxIntentTrainingPhraseArrayOutputWithContext(ctx context.Context) CxIntentTrainingPhraseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentTrainingPhraseArrayOutput)
}

type CxIntentTrainingPhraseOutput struct{ *pulumi.OutputState }

func (CxIntentTrainingPhraseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentTrainingPhrase)(nil)).Elem()
}

func (o CxIntentTrainingPhraseOutput) ToCxIntentTrainingPhraseOutput() CxIntentTrainingPhraseOutput {
	return o
}

func (o CxIntentTrainingPhraseOutput) ToCxIntentTrainingPhraseOutputWithContext(ctx context.Context) CxIntentTrainingPhraseOutput {
	return o
}

// The unique identifier of the parameter. This field is used by training phrases to annotate their parts.
func (o CxIntentTrainingPhraseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrase) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase.
// Note: The API does not automatically annotate training phrases like the Dialogflow Console does.
// Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated.
// If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set.
// If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways:
// Part.text is set to a part of the phrase that has no parameters.
// Part.text is set to a part of the phrase that you want to annotate, and the parameterId field is set.
// Structure is documented below.
func (o CxIntentTrainingPhraseOutput) Parts() CxIntentTrainingPhrasePartArrayOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrase) []CxIntentTrainingPhrasePart { return v.Parts }).(CxIntentTrainingPhrasePartArrayOutput)
}

// Indicates how many times this example was added to the intent.
func (o CxIntentTrainingPhraseOutput) RepeatCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrase) *int { return v.RepeatCount }).(pulumi.IntPtrOutput)
}

type CxIntentTrainingPhraseArrayOutput struct{ *pulumi.OutputState }

func (CxIntentTrainingPhraseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentTrainingPhrase)(nil)).Elem()
}

func (o CxIntentTrainingPhraseArrayOutput) ToCxIntentTrainingPhraseArrayOutput() CxIntentTrainingPhraseArrayOutput {
	return o
}

func (o CxIntentTrainingPhraseArrayOutput) ToCxIntentTrainingPhraseArrayOutputWithContext(ctx context.Context) CxIntentTrainingPhraseArrayOutput {
	return o
}

func (o CxIntentTrainingPhraseArrayOutput) Index(i pulumi.IntInput) CxIntentTrainingPhraseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxIntentTrainingPhrase {
		return vs[0].([]CxIntentTrainingPhrase)[vs[1].(int)]
	}).(CxIntentTrainingPhraseOutput)
}

type CxIntentTrainingPhrasePart struct {
	// The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.
	ParameterId *string `pulumi:"parameterId"`
	// The text for this part.
	Text string `pulumi:"text"`
}

// CxIntentTrainingPhrasePartInput is an input type that accepts CxIntentTrainingPhrasePartArgs and CxIntentTrainingPhrasePartOutput values.
// You can construct a concrete instance of `CxIntentTrainingPhrasePartInput` via:
//
//	CxIntentTrainingPhrasePartArgs{...}
type CxIntentTrainingPhrasePartInput interface {
	pulumi.Input

	ToCxIntentTrainingPhrasePartOutput() CxIntentTrainingPhrasePartOutput
	ToCxIntentTrainingPhrasePartOutputWithContext(context.Context) CxIntentTrainingPhrasePartOutput
}

type CxIntentTrainingPhrasePartArgs struct {
	// The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.
	ParameterId pulumi.StringPtrInput `pulumi:"parameterId"`
	// The text for this part.
	Text pulumi.StringInput `pulumi:"text"`
}

func (CxIntentTrainingPhrasePartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentTrainingPhrasePart)(nil)).Elem()
}

func (i CxIntentTrainingPhrasePartArgs) ToCxIntentTrainingPhrasePartOutput() CxIntentTrainingPhrasePartOutput {
	return i.ToCxIntentTrainingPhrasePartOutputWithContext(context.Background())
}

func (i CxIntentTrainingPhrasePartArgs) ToCxIntentTrainingPhrasePartOutputWithContext(ctx context.Context) CxIntentTrainingPhrasePartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentTrainingPhrasePartOutput)
}

// CxIntentTrainingPhrasePartArrayInput is an input type that accepts CxIntentTrainingPhrasePartArray and CxIntentTrainingPhrasePartArrayOutput values.
// You can construct a concrete instance of `CxIntentTrainingPhrasePartArrayInput` via:
//
//	CxIntentTrainingPhrasePartArray{ CxIntentTrainingPhrasePartArgs{...} }
type CxIntentTrainingPhrasePartArrayInput interface {
	pulumi.Input

	ToCxIntentTrainingPhrasePartArrayOutput() CxIntentTrainingPhrasePartArrayOutput
	ToCxIntentTrainingPhrasePartArrayOutputWithContext(context.Context) CxIntentTrainingPhrasePartArrayOutput
}

type CxIntentTrainingPhrasePartArray []CxIntentTrainingPhrasePartInput

func (CxIntentTrainingPhrasePartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentTrainingPhrasePart)(nil)).Elem()
}

func (i CxIntentTrainingPhrasePartArray) ToCxIntentTrainingPhrasePartArrayOutput() CxIntentTrainingPhrasePartArrayOutput {
	return i.ToCxIntentTrainingPhrasePartArrayOutputWithContext(context.Background())
}

func (i CxIntentTrainingPhrasePartArray) ToCxIntentTrainingPhrasePartArrayOutputWithContext(ctx context.Context) CxIntentTrainingPhrasePartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxIntentTrainingPhrasePartArrayOutput)
}

type CxIntentTrainingPhrasePartOutput struct{ *pulumi.OutputState }

func (CxIntentTrainingPhrasePartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxIntentTrainingPhrasePart)(nil)).Elem()
}

func (o CxIntentTrainingPhrasePartOutput) ToCxIntentTrainingPhrasePartOutput() CxIntentTrainingPhrasePartOutput {
	return o
}

func (o CxIntentTrainingPhrasePartOutput) ToCxIntentTrainingPhrasePartOutputWithContext(ctx context.Context) CxIntentTrainingPhrasePartOutput {
	return o
}

// The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.
func (o CxIntentTrainingPhrasePartOutput) ParameterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrasePart) *string { return v.ParameterId }).(pulumi.StringPtrOutput)
}

// The text for this part.
func (o CxIntentTrainingPhrasePartOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v CxIntentTrainingPhrasePart) string { return v.Text }).(pulumi.StringOutput)
}

type CxIntentTrainingPhrasePartArrayOutput struct{ *pulumi.OutputState }

func (CxIntentTrainingPhrasePartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxIntentTrainingPhrasePart)(nil)).Elem()
}

func (o CxIntentTrainingPhrasePartArrayOutput) ToCxIntentTrainingPhrasePartArrayOutput() CxIntentTrainingPhrasePartArrayOutput {
	return o
}

func (o CxIntentTrainingPhrasePartArrayOutput) ToCxIntentTrainingPhrasePartArrayOutputWithContext(ctx context.Context) CxIntentTrainingPhrasePartArrayOutput {
	return o
}

func (o CxIntentTrainingPhrasePartArrayOutput) Index(i pulumi.IntInput) CxIntentTrainingPhrasePartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxIntentTrainingPhrasePart {
		return vs[0].([]CxIntentTrainingPhrasePart)[vs[1].(int)]
	}).(CxIntentTrainingPhrasePartOutput)
}

type CxPageEntryFulfillment struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageEntryFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageEntryFulfillmentInput is an input type that accepts CxPageEntryFulfillmentArgs and CxPageEntryFulfillmentOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentInput` via:
//
//	CxPageEntryFulfillmentArgs{...}
type CxPageEntryFulfillmentInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentOutput() CxPageEntryFulfillmentOutput
	ToCxPageEntryFulfillmentOutputWithContext(context.Context) CxPageEntryFulfillmentOutput
}

type CxPageEntryFulfillmentArgs struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageEntryFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageEntryFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillment)(nil)).Elem()
}

func (i CxPageEntryFulfillmentArgs) ToCxPageEntryFulfillmentOutput() CxPageEntryFulfillmentOutput {
	return i.ToCxPageEntryFulfillmentOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentArgs) ToCxPageEntryFulfillmentOutputWithContext(ctx context.Context) CxPageEntryFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentOutput)
}

func (i CxPageEntryFulfillmentArgs) ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput {
	return i.ToCxPageEntryFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentArgs) ToCxPageEntryFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentOutput).ToCxPageEntryFulfillmentPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentPtrInput is an input type that accepts CxPageEntryFulfillmentArgs, CxPageEntryFulfillmentPtr and CxPageEntryFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentPtrInput` via:
//
//	        CxPageEntryFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput
	ToCxPageEntryFulfillmentPtrOutputWithContext(context.Context) CxPageEntryFulfillmentPtrOutput
}

type cxPageEntryFulfillmentPtrType CxPageEntryFulfillmentArgs

func CxPageEntryFulfillmentPtr(v *CxPageEntryFulfillmentArgs) CxPageEntryFulfillmentPtrInput {
	return (*cxPageEntryFulfillmentPtrType)(v)
}

func (*cxPageEntryFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillment)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentPtrType) ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput {
	return i.ToCxPageEntryFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentPtrType) ToCxPageEntryFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentPtrOutput)
}

type CxPageEntryFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillment)(nil)).Elem()
}

func (o CxPageEntryFulfillmentOutput) ToCxPageEntryFulfillmentOutput() CxPageEntryFulfillmentOutput {
	return o
}

func (o CxPageEntryFulfillmentOutput) ToCxPageEntryFulfillmentOutputWithContext(ctx context.Context) CxPageEntryFulfillmentOutput {
	return o
}

func (o CxPageEntryFulfillmentOutput) ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput {
	return o.ToCxPageEntryFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentOutput) ToCxPageEntryFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillment) *CxPageEntryFulfillment {
		return &v
	}).(CxPageEntryFulfillmentPtrOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageEntryFulfillmentOutput) Messages() CxPageEntryFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) []CxPageEntryFulfillmentMessage { return v.Messages }).(CxPageEntryFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageEntryFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageEntryFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageEntryFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillment)(nil)).Elem()
}

func (o CxPageEntryFulfillmentPtrOutput) ToCxPageEntryFulfillmentPtrOutput() CxPageEntryFulfillmentPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentPtrOutput) ToCxPageEntryFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentPtrOutput) Elem() CxPageEntryFulfillmentOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) CxPageEntryFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillment
		return ret
	}).(CxPageEntryFulfillmentOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageEntryFulfillmentPtrOutput) Messages() CxPageEntryFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) []CxPageEntryFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageEntryFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageEntryFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageEntryFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageEntryFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageEntryFulfillmentMessage struct {
	// A collection of text responses.
	Text *CxPageEntryFulfillmentMessageText `pulumi:"text"`
}

// CxPageEntryFulfillmentMessageInput is an input type that accepts CxPageEntryFulfillmentMessageArgs and CxPageEntryFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageInput` via:
//
//	CxPageEntryFulfillmentMessageArgs{...}
type CxPageEntryFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageOutput() CxPageEntryFulfillmentMessageOutput
	ToCxPageEntryFulfillmentMessageOutputWithContext(context.Context) CxPageEntryFulfillmentMessageOutput
}

type CxPageEntryFulfillmentMessageArgs struct {
	// A collection of text responses.
	Text CxPageEntryFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageEntryFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessage)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageArgs) ToCxPageEntryFulfillmentMessageOutput() CxPageEntryFulfillmentMessageOutput {
	return i.ToCxPageEntryFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageArgs) ToCxPageEntryFulfillmentMessageOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageOutput)
}

// CxPageEntryFulfillmentMessageArrayInput is an input type that accepts CxPageEntryFulfillmentMessageArray and CxPageEntryFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageArrayInput` via:
//
//	CxPageEntryFulfillmentMessageArray{ CxPageEntryFulfillmentMessageArgs{...} }
type CxPageEntryFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageArrayOutput() CxPageEntryFulfillmentMessageArrayOutput
	ToCxPageEntryFulfillmentMessageArrayOutputWithContext(context.Context) CxPageEntryFulfillmentMessageArrayOutput
}

type CxPageEntryFulfillmentMessageArray []CxPageEntryFulfillmentMessageInput

func (CxPageEntryFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEntryFulfillmentMessage)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageArray) ToCxPageEntryFulfillmentMessageArrayOutput() CxPageEntryFulfillmentMessageArrayOutput {
	return i.ToCxPageEntryFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageArray) ToCxPageEntryFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageArrayOutput)
}

type CxPageEntryFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessage)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageOutput) ToCxPageEntryFulfillmentMessageOutput() CxPageEntryFulfillmentMessageOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageOutput) ToCxPageEntryFulfillmentMessageOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageOutput {
	return o
}

// A collection of text responses.
func (o CxPageEntryFulfillmentMessageOutput) Text() CxPageEntryFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessage) *CxPageEntryFulfillmentMessageText { return v.Text }).(CxPageEntryFulfillmentMessageTextPtrOutput)
}

type CxPageEntryFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEntryFulfillmentMessage)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageArrayOutput) ToCxPageEntryFulfillmentMessageArrayOutput() CxPageEntryFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageArrayOutput) ToCxPageEntryFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageEntryFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEntryFulfillmentMessage {
		return vs[0].([]CxPageEntryFulfillmentMessage)[vs[1].(int)]
	}).(CxPageEntryFulfillmentMessageOutput)
}

type CxPageEntryFulfillmentMessageText struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageEntryFulfillmentMessageTextInput is an input type that accepts CxPageEntryFulfillmentMessageTextArgs and CxPageEntryFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageTextInput` via:
//
//	CxPageEntryFulfillmentMessageTextArgs{...}
type CxPageEntryFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageTextOutput() CxPageEntryFulfillmentMessageTextOutput
	ToCxPageEntryFulfillmentMessageTextOutputWithContext(context.Context) CxPageEntryFulfillmentMessageTextOutput
}

type CxPageEntryFulfillmentMessageTextArgs struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageEntryFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageEntryFulfillmentMessageTextArgs) ToCxPageEntryFulfillmentMessageTextOutput() CxPageEntryFulfillmentMessageTextOutput {
	return i.ToCxPageEntryFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageTextArgs) ToCxPageEntryFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTextOutput)
}

func (i CxPageEntryFulfillmentMessageTextArgs) ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageEntryFulfillmentMessageTextArgs) ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTextOutput).ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageEntryFulfillmentMessageTextPtrInput is an input type that accepts CxPageEntryFulfillmentMessageTextArgs, CxPageEntryFulfillmentMessageTextPtr and CxPageEntryFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageEntryFulfillmentMessageTextPtrInput` via:
//
//	        CxPageEntryFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageEntryFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput
	ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageEntryFulfillmentMessageTextPtrOutput
}

type cxPageEntryFulfillmentMessageTextPtrType CxPageEntryFulfillmentMessageTextArgs

func CxPageEntryFulfillmentMessageTextPtr(v *CxPageEntryFulfillmentMessageTextArgs) CxPageEntryFulfillmentMessageTextPtrInput {
	return (*cxPageEntryFulfillmentMessageTextPtrType)(v)
}

func (*cxPageEntryFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageEntryFulfillmentMessageTextPtrType) ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput {
	return i.ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageEntryFulfillmentMessageTextPtrType) ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEntryFulfillmentMessageTextPtrOutput)
}

type CxPageEntryFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEntryFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageTextOutput) ToCxPageEntryFulfillmentMessageTextOutput() CxPageEntryFulfillmentMessageTextOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTextOutput) ToCxPageEntryFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTextOutput) ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput {
	return o.ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageEntryFulfillmentMessageTextOutput) ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEntryFulfillmentMessageText) *CxPageEntryFulfillmentMessageText {
		return &v
	}).(CxPageEntryFulfillmentMessageTextPtrOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEntryFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageEntryFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageEntryFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxPageEntryFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageEntryFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEntryFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageEntryFulfillmentMessageTextPtrOutput) ToCxPageEntryFulfillmentMessageTextPtrOutput() CxPageEntryFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTextPtrOutput) ToCxPageEntryFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEntryFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageEntryFulfillmentMessageTextPtrOutput) Elem() CxPageEntryFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageText) CxPageEntryFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageEntryFulfillmentMessageText
		return ret
	}).(CxPageEntryFulfillmentMessageTextOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEntryFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageEntryFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageEntryFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageEventHandler struct {
	// The name of the event to handle.
	Event *string `pulumi:"event"`
	// -
	// The unique identifier of this event handler.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment *CxPageEventHandlerTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxPageEventHandlerInput is an input type that accepts CxPageEventHandlerArgs and CxPageEventHandlerOutput values.
// You can construct a concrete instance of `CxPageEventHandlerInput` via:
//
//	CxPageEventHandlerArgs{...}
type CxPageEventHandlerInput interface {
	pulumi.Input

	ToCxPageEventHandlerOutput() CxPageEventHandlerOutput
	ToCxPageEventHandlerOutputWithContext(context.Context) CxPageEventHandlerOutput
}

type CxPageEventHandlerArgs struct {
	// The name of the event to handle.
	Event pulumi.StringPtrInput `pulumi:"event"`
	// -
	// The unique identifier of this event handler.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment CxPageEventHandlerTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxPageEventHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandler)(nil)).Elem()
}

func (i CxPageEventHandlerArgs) ToCxPageEventHandlerOutput() CxPageEventHandlerOutput {
	return i.ToCxPageEventHandlerOutputWithContext(context.Background())
}

func (i CxPageEventHandlerArgs) ToCxPageEventHandlerOutputWithContext(ctx context.Context) CxPageEventHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerOutput)
}

// CxPageEventHandlerArrayInput is an input type that accepts CxPageEventHandlerArray and CxPageEventHandlerArrayOutput values.
// You can construct a concrete instance of `CxPageEventHandlerArrayInput` via:
//
//	CxPageEventHandlerArray{ CxPageEventHandlerArgs{...} }
type CxPageEventHandlerArrayInput interface {
	pulumi.Input

	ToCxPageEventHandlerArrayOutput() CxPageEventHandlerArrayOutput
	ToCxPageEventHandlerArrayOutputWithContext(context.Context) CxPageEventHandlerArrayOutput
}

type CxPageEventHandlerArray []CxPageEventHandlerInput

func (CxPageEventHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandler)(nil)).Elem()
}

func (i CxPageEventHandlerArray) ToCxPageEventHandlerArrayOutput() CxPageEventHandlerArrayOutput {
	return i.ToCxPageEventHandlerArrayOutputWithContext(context.Background())
}

func (i CxPageEventHandlerArray) ToCxPageEventHandlerArrayOutputWithContext(ctx context.Context) CxPageEventHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerArrayOutput)
}

type CxPageEventHandlerOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandler)(nil)).Elem()
}

func (o CxPageEventHandlerOutput) ToCxPageEventHandlerOutput() CxPageEventHandlerOutput {
	return o
}

func (o CxPageEventHandlerOutput) ToCxPageEventHandlerOutputWithContext(ctx context.Context) CxPageEventHandlerOutput {
	return o
}

// The name of the event to handle.
func (o CxPageEventHandlerOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *string { return v.Event }).(pulumi.StringPtrOutput)
}

// -
// The unique identifier of this event handler.
func (o CxPageEventHandlerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxPageEventHandlerOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxPageEventHandlerOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
// Structure is documented below.
func (o CxPageEventHandlerOutput) TriggerFulfillment() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxPageEventHandler) *CxPageEventHandlerTriggerFulfillment { return v.TriggerFulfillment }).(CxPageEventHandlerTriggerFulfillmentPtrOutput)
}

type CxPageEventHandlerArrayOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandler)(nil)).Elem()
}

func (o CxPageEventHandlerArrayOutput) ToCxPageEventHandlerArrayOutput() CxPageEventHandlerArrayOutput {
	return o
}

func (o CxPageEventHandlerArrayOutput) ToCxPageEventHandlerArrayOutputWithContext(ctx context.Context) CxPageEventHandlerArrayOutput {
	return o
}

func (o CxPageEventHandlerArrayOutput) Index(i pulumi.IntInput) CxPageEventHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEventHandler {
		return vs[0].([]CxPageEventHandler)[vs[1].(int)]
	}).(CxPageEventHandlerOutput)
}

type CxPageEventHandlerTriggerFulfillment struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageEventHandlerTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageEventHandlerTriggerFulfillmentInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentArgs and CxPageEventHandlerTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentArgs{...}
type CxPageEventHandlerTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentOutput() CxPageEventHandlerTriggerFulfillmentOutput
	ToCxPageEventHandlerTriggerFulfillmentOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentOutput
}

type CxPageEventHandlerTriggerFulfillmentArgs struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageEventHandlerTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageEventHandlerTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentArgs) ToCxPageEventHandlerTriggerFulfillmentOutput() CxPageEventHandlerTriggerFulfillmentOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentArgs) ToCxPageEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentArgs) ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentArgs) ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentOutput).ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentArgs, CxPageEventHandlerTriggerFulfillmentPtr and CxPageEventHandlerTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentPtrType CxPageEventHandlerTriggerFulfillmentArgs

func CxPageEventHandlerTriggerFulfillmentPtr(v *CxPageEventHandlerTriggerFulfillmentArgs) CxPageEventHandlerTriggerFulfillmentPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentPtrType) ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentPtrType) ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentOutput) ToCxPageEventHandlerTriggerFulfillmentOutput() CxPageEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentOutput) ToCxPageEventHandlerTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentOutput) ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentOutput) ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillment) *CxPageEventHandlerTriggerFulfillment {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentPtrOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentOutput) Messages() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) []CxPageEventHandlerTriggerFulfillmentMessage {
		return v.Messages
	}).(CxPageEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageEventHandlerTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageEventHandlerTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageEventHandlerTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillment)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) ToCxPageEventHandlerTriggerFulfillmentPtrOutput() CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) ToCxPageEventHandlerTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) CxPageEventHandlerTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillment
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) Messages() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) []CxPageEventHandlerTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageEventHandlerTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageEventHandlerTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessage struct {
	// A collection of text responses.
	Text *CxPageEventHandlerTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxPageEventHandlerTriggerFulfillmentMessageInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageArgs and CxPageEventHandlerTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageOutput() CxPageEventHandlerTriggerFulfillmentMessageOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageArgs struct {
	// A collection of text responses.
	Text CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageEventHandlerTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageArgs) ToCxPageEventHandlerTriggerFulfillmentMessageOutput() CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageArgs) ToCxPageEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageOutput)
}

// CxPageEventHandlerTriggerFulfillmentMessageArrayInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageArray and CxPageEventHandlerTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageArrayInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageArray{ CxPageEventHandlerTriggerFulfillmentMessageArgs{...} }
type CxPageEventHandlerTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageArrayOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageArray []CxPageEventHandlerTriggerFulfillmentMessageInput

func (CxPageEventHandlerTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageArray) ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageArray) ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageArrayOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutput() CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) ToCxPageEventHandlerTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return o
}

// A collection of text responses.
func (o CxPageEventHandlerTriggerFulfillmentMessageOutput) Text() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessage) *CxPageEventHandlerTriggerFulfillmentMessageText {
		return v.Text
	}).(CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageEventHandlerTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutput() CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageArrayOutput) ToCxPageEventHandlerTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageEventHandlerTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageEventHandlerTriggerFulfillmentMessage {
		return vs[0].([]CxPageEventHandlerTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxPageEventHandlerTriggerFulfillmentMessageOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageText struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageEventHandlerTriggerFulfillmentMessageTextInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageTextArgs and CxPageEventHandlerTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageTextInput` via:
//
//	CxPageEventHandlerTriggerFulfillmentMessageTextArgs{...}
type CxPageEventHandlerTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageTextOutput() CxPageEventHandlerTriggerFulfillmentMessageTextOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextOutput
}

type CxPageEventHandlerTriggerFulfillmentMessageTextArgs struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTextOutput() CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTextOutput)
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageEventHandlerTriggerFulfillmentMessageTextArgs) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTextOutput).ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxPageEventHandlerTriggerFulfillmentMessageTextArgs, CxPageEventHandlerTriggerFulfillmentMessageTextPtr and CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxPageEventHandlerTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput
	ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput
}

type cxPageEventHandlerTriggerFulfillmentMessageTextPtrType CxPageEventHandlerTriggerFulfillmentMessageTextArgs

func CxPageEventHandlerTriggerFulfillmentMessageTextPtr(v *CxPageEventHandlerTriggerFulfillmentMessageTextArgs) CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput {
	return (*cxPageEventHandlerTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxPageEventHandlerTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageEventHandlerTriggerFulfillmentMessageTextPtrType) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextOutput() CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageEventHandlerTriggerFulfillmentMessageText) *CxPageEventHandlerTriggerFulfillmentMessageText {
		return &v
	}).(CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageEventHandlerTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageEventHandlerTriggerFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageEventHandlerTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput() CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) ToCxPageEventHandlerTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) Elem() CxPageEventHandlerTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageText) CxPageEventHandlerTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageEventHandlerTriggerFulfillmentMessageText
		return ret
	}).(CxPageEventHandlerTriggerFulfillmentMessageTextOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageEventHandlerTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageForm struct {
	// Parameters to collect from the user.
	// Structure is documented below.
	Parameters []CxPageFormParameter `pulumi:"parameters"`
}

// CxPageFormInput is an input type that accepts CxPageFormArgs and CxPageFormOutput values.
// You can construct a concrete instance of `CxPageFormInput` via:
//
//	CxPageFormArgs{...}
type CxPageFormInput interface {
	pulumi.Input

	ToCxPageFormOutput() CxPageFormOutput
	ToCxPageFormOutputWithContext(context.Context) CxPageFormOutput
}

type CxPageFormArgs struct {
	// Parameters to collect from the user.
	// Structure is documented below.
	Parameters CxPageFormParameterArrayInput `pulumi:"parameters"`
}

func (CxPageFormArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageForm)(nil)).Elem()
}

func (i CxPageFormArgs) ToCxPageFormOutput() CxPageFormOutput {
	return i.ToCxPageFormOutputWithContext(context.Background())
}

func (i CxPageFormArgs) ToCxPageFormOutputWithContext(ctx context.Context) CxPageFormOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormOutput)
}

func (i CxPageFormArgs) ToCxPageFormPtrOutput() CxPageFormPtrOutput {
	return i.ToCxPageFormPtrOutputWithContext(context.Background())
}

func (i CxPageFormArgs) ToCxPageFormPtrOutputWithContext(ctx context.Context) CxPageFormPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormOutput).ToCxPageFormPtrOutputWithContext(ctx)
}

// CxPageFormPtrInput is an input type that accepts CxPageFormArgs, CxPageFormPtr and CxPageFormPtrOutput values.
// You can construct a concrete instance of `CxPageFormPtrInput` via:
//
//	        CxPageFormArgs{...}
//
//	or:
//
//	        nil
type CxPageFormPtrInput interface {
	pulumi.Input

	ToCxPageFormPtrOutput() CxPageFormPtrOutput
	ToCxPageFormPtrOutputWithContext(context.Context) CxPageFormPtrOutput
}

type cxPageFormPtrType CxPageFormArgs

func CxPageFormPtr(v *CxPageFormArgs) CxPageFormPtrInput {
	return (*cxPageFormPtrType)(v)
}

func (*cxPageFormPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageForm)(nil)).Elem()
}

func (i *cxPageFormPtrType) ToCxPageFormPtrOutput() CxPageFormPtrOutput {
	return i.ToCxPageFormPtrOutputWithContext(context.Background())
}

func (i *cxPageFormPtrType) ToCxPageFormPtrOutputWithContext(ctx context.Context) CxPageFormPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormPtrOutput)
}

type CxPageFormOutput struct{ *pulumi.OutputState }

func (CxPageFormOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageForm)(nil)).Elem()
}

func (o CxPageFormOutput) ToCxPageFormOutput() CxPageFormOutput {
	return o
}

func (o CxPageFormOutput) ToCxPageFormOutputWithContext(ctx context.Context) CxPageFormOutput {
	return o
}

func (o CxPageFormOutput) ToCxPageFormPtrOutput() CxPageFormPtrOutput {
	return o.ToCxPageFormPtrOutputWithContext(context.Background())
}

func (o CxPageFormOutput) ToCxPageFormPtrOutputWithContext(ctx context.Context) CxPageFormPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageForm) *CxPageForm {
		return &v
	}).(CxPageFormPtrOutput)
}

// Parameters to collect from the user.
// Structure is documented below.
func (o CxPageFormOutput) Parameters() CxPageFormParameterArrayOutput {
	return o.ApplyT(func(v CxPageForm) []CxPageFormParameter { return v.Parameters }).(CxPageFormParameterArrayOutput)
}

type CxPageFormPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageForm)(nil)).Elem()
}

func (o CxPageFormPtrOutput) ToCxPageFormPtrOutput() CxPageFormPtrOutput {
	return o
}

func (o CxPageFormPtrOutput) ToCxPageFormPtrOutputWithContext(ctx context.Context) CxPageFormPtrOutput {
	return o
}

func (o CxPageFormPtrOutput) Elem() CxPageFormOutput {
	return o.ApplyT(func(v *CxPageForm) CxPageForm {
		if v != nil {
			return *v
		}
		var ret CxPageForm
		return ret
	}).(CxPageFormOutput)
}

// Parameters to collect from the user.
// Structure is documented below.
func (o CxPageFormPtrOutput) Parameters() CxPageFormParameterArrayOutput {
	return o.ApplyT(func(v *CxPageForm) []CxPageFormParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(CxPageFormParameterArrayOutput)
}

type CxPageFormParameter struct {
	// The human-readable name of the parameter, unique within the form.
	DisplayName *string `pulumi:"displayName"`
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	EntityType *string `pulumi:"entityType"`
	// Defines fill behavior for the parameter.
	// Structure is documented below.
	FillBehavior *CxPageFormParameterFillBehavior `pulumi:"fillBehavior"`
	// Indicates whether the parameter represents a list of values.
	IsList *bool `pulumi:"isList"`
	// Indicates whether the parameter content should be redacted in log.
	// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	Redact *bool `pulumi:"redact"`
	// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
	// Required parameters must be filled before form filling concludes.
	Required *bool `pulumi:"required"`
}

// CxPageFormParameterInput is an input type that accepts CxPageFormParameterArgs and CxPageFormParameterOutput values.
// You can construct a concrete instance of `CxPageFormParameterInput` via:
//
//	CxPageFormParameterArgs{...}
type CxPageFormParameterInput interface {
	pulumi.Input

	ToCxPageFormParameterOutput() CxPageFormParameterOutput
	ToCxPageFormParameterOutputWithContext(context.Context) CxPageFormParameterOutput
}

type CxPageFormParameterArgs struct {
	// The human-readable name of the parameter, unique within the form.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	EntityType pulumi.StringPtrInput `pulumi:"entityType"`
	// Defines fill behavior for the parameter.
	// Structure is documented below.
	FillBehavior CxPageFormParameterFillBehaviorPtrInput `pulumi:"fillBehavior"`
	// Indicates whether the parameter represents a list of values.
	IsList pulumi.BoolPtrInput `pulumi:"isList"`
	// Indicates whether the parameter content should be redacted in log.
	// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	Redact pulumi.BoolPtrInput `pulumi:"redact"`
	// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
	// Required parameters must be filled before form filling concludes.
	Required pulumi.BoolPtrInput `pulumi:"required"`
}

func (CxPageFormParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameter)(nil)).Elem()
}

func (i CxPageFormParameterArgs) ToCxPageFormParameterOutput() CxPageFormParameterOutput {
	return i.ToCxPageFormParameterOutputWithContext(context.Background())
}

func (i CxPageFormParameterArgs) ToCxPageFormParameterOutputWithContext(ctx context.Context) CxPageFormParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterOutput)
}

// CxPageFormParameterArrayInput is an input type that accepts CxPageFormParameterArray and CxPageFormParameterArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterArrayInput` via:
//
//	CxPageFormParameterArray{ CxPageFormParameterArgs{...} }
type CxPageFormParameterArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterArrayOutput() CxPageFormParameterArrayOutput
	ToCxPageFormParameterArrayOutputWithContext(context.Context) CxPageFormParameterArrayOutput
}

type CxPageFormParameterArray []CxPageFormParameterInput

func (CxPageFormParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameter)(nil)).Elem()
}

func (i CxPageFormParameterArray) ToCxPageFormParameterArrayOutput() CxPageFormParameterArrayOutput {
	return i.ToCxPageFormParameterArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterArray) ToCxPageFormParameterArrayOutputWithContext(ctx context.Context) CxPageFormParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterArrayOutput)
}

type CxPageFormParameterOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameter)(nil)).Elem()
}

func (o CxPageFormParameterOutput) ToCxPageFormParameterOutput() CxPageFormParameterOutput {
	return o
}

func (o CxPageFormParameterOutput) ToCxPageFormParameterOutputWithContext(ctx context.Context) CxPageFormParameterOutput {
	return o
}

// The human-readable name of the parameter, unique within the form.
func (o CxPageFormParameterOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The entity type of the parameter.
// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
func (o CxPageFormParameterOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// Defines fill behavior for the parameter.
// Structure is documented below.
func (o CxPageFormParameterOutput) FillBehavior() CxPageFormParameterFillBehaviorPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *CxPageFormParameterFillBehavior { return v.FillBehavior }).(CxPageFormParameterFillBehaviorPtrOutput)
}

// Indicates whether the parameter represents a list of values.
func (o CxPageFormParameterOutput) IsList() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *bool { return v.IsList }).(pulumi.BoolPtrOutput)
}

// Indicates whether the parameter content should be redacted in log.
// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
func (o CxPageFormParameterOutput) Redact() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *bool { return v.Redact }).(pulumi.BoolPtrOutput)
}

// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
// Required parameters must be filled before form filling concludes.
func (o CxPageFormParameterOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameter) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

type CxPageFormParameterArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameter)(nil)).Elem()
}

func (o CxPageFormParameterArrayOutput) ToCxPageFormParameterArrayOutput() CxPageFormParameterArrayOutput {
	return o
}

func (o CxPageFormParameterArrayOutput) ToCxPageFormParameterArrayOutputWithContext(ctx context.Context) CxPageFormParameterArrayOutput {
	return o
}

func (o CxPageFormParameterArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameter {
		return vs[0].([]CxPageFormParameter)[vs[1].(int)]
	}).(CxPageFormParameterOutput)
}

type CxPageFormParameterFillBehavior struct {
	// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
	// Structure is documented below.
	InitialPromptFulfillment *CxPageFormParameterFillBehaviorInitialPromptFulfillment `pulumi:"initialPromptFulfillment"`
}

// CxPageFormParameterFillBehaviorInput is an input type that accepts CxPageFormParameterFillBehaviorArgs and CxPageFormParameterFillBehaviorOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInput` via:
//
//	CxPageFormParameterFillBehaviorArgs{...}
type CxPageFormParameterFillBehaviorInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorOutput() CxPageFormParameterFillBehaviorOutput
	ToCxPageFormParameterFillBehaviorOutputWithContext(context.Context) CxPageFormParameterFillBehaviorOutput
}

type CxPageFormParameterFillBehaviorArgs struct {
	// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
	// Structure is documented below.
	InitialPromptFulfillment CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput `pulumi:"initialPromptFulfillment"`
}

func (CxPageFormParameterFillBehaviorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehavior)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorArgs) ToCxPageFormParameterFillBehaviorOutput() CxPageFormParameterFillBehaviorOutput {
	return i.ToCxPageFormParameterFillBehaviorOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorArgs) ToCxPageFormParameterFillBehaviorOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorOutput)
}

func (i CxPageFormParameterFillBehaviorArgs) ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorArgs) ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorOutput).ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorPtrInput is an input type that accepts CxPageFormParameterFillBehaviorArgs, CxPageFormParameterFillBehaviorPtr and CxPageFormParameterFillBehaviorPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput
	ToCxPageFormParameterFillBehaviorPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorPtrOutput
}

type cxPageFormParameterFillBehaviorPtrType CxPageFormParameterFillBehaviorArgs

func CxPageFormParameterFillBehaviorPtr(v *CxPageFormParameterFillBehaviorArgs) CxPageFormParameterFillBehaviorPtrInput {
	return (*cxPageFormParameterFillBehaviorPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehavior)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorPtrType) ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorPtrType) ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorPtrOutput)
}

type CxPageFormParameterFillBehaviorOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehavior)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorOutput) ToCxPageFormParameterFillBehaviorOutput() CxPageFormParameterFillBehaviorOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorOutput) ToCxPageFormParameterFillBehaviorOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorOutput) ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorOutput) ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehavior) *CxPageFormParameterFillBehavior {
		return &v
	}).(CxPageFormParameterFillBehaviorPtrOutput)
}

// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorOutput) InitialPromptFulfillment() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehavior) *CxPageFormParameterFillBehaviorInitialPromptFulfillment {
		return v.InitialPromptFulfillment
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput)
}

type CxPageFormParameterFillBehaviorPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehavior)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorPtrOutput) ToCxPageFormParameterFillBehaviorPtrOutput() CxPageFormParameterFillBehaviorPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorPtrOutput) ToCxPageFormParameterFillBehaviorPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorPtrOutput) Elem() CxPageFormParameterFillBehaviorOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehavior) CxPageFormParameterFillBehavior {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehavior
		return ret
	}).(CxPageFormParameterFillBehaviorOutput)
}

// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorPtrOutput) InitialPromptFulfillment() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehavior) *CxPageFormParameterFillBehaviorInitialPromptFulfillment {
		if v == nil {
			return nil
		}
		return v.InitialPromptFulfillment
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillment struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillment)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillment)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillment)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillment) *CxPageFormParameterFillBehaviorInitialPromptFulfillment {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) Messages() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) []CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage {
		return v.Messages
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillment)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) CxPageFormParameterFillBehaviorInitialPromptFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillment
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) Messages() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) []CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage struct {
	// A collection of text responses.
	Text *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText `pulumi:"text"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs struct {
	// A collection of text responses.
	Text CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray{ CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs{...} }
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray []CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return o
}

// A collection of text responses.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput) Text() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText {
		return v.Text
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage {
		return vs[0].([]CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessage)[vs[1].(int)]
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextInput` via:
//
//	CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{...}
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput)
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput).ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput is an input type that accepts CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs, CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtr and CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput` via:
//
//	        CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput
	ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput
}

type cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs

func CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtr(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput {
	return (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType)(v)
}

func (*cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return i.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrType) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o.ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText {
		return &v
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) *bool {
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) ToCxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) Elem() CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText
		return ret
	}).(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxPageTransitionRoute struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Condition *string `pulumi:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Intent *string `pulumi:"intent"`
	// -
	// The unique identifier of this event handler.
	Name *string `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow *string `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage *string `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment *CxPageTransitionRouteTriggerFulfillment `pulumi:"triggerFulfillment"`
}

// CxPageTransitionRouteInput is an input type that accepts CxPageTransitionRouteArgs and CxPageTransitionRouteOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteInput` via:
//
//	CxPageTransitionRouteArgs{...}
type CxPageTransitionRouteInput interface {
	pulumi.Input

	ToCxPageTransitionRouteOutput() CxPageTransitionRouteOutput
	ToCxPageTransitionRouteOutputWithContext(context.Context) CxPageTransitionRouteOutput
}

type CxPageTransitionRouteArgs struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	Intent pulumi.StringPtrInput `pulumi:"intent"`
	// -
	// The unique identifier of this event handler.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	TargetFlow pulumi.StringPtrInput `pulumi:"targetFlow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	TargetPage pulumi.StringPtrInput `pulumi:"targetPage"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	TriggerFulfillment CxPageTransitionRouteTriggerFulfillmentPtrInput `pulumi:"triggerFulfillment"`
}

func (CxPageTransitionRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRoute)(nil)).Elem()
}

func (i CxPageTransitionRouteArgs) ToCxPageTransitionRouteOutput() CxPageTransitionRouteOutput {
	return i.ToCxPageTransitionRouteOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteArgs) ToCxPageTransitionRouteOutputWithContext(ctx context.Context) CxPageTransitionRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteOutput)
}

// CxPageTransitionRouteArrayInput is an input type that accepts CxPageTransitionRouteArray and CxPageTransitionRouteArrayOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteArrayInput` via:
//
//	CxPageTransitionRouteArray{ CxPageTransitionRouteArgs{...} }
type CxPageTransitionRouteArrayInput interface {
	pulumi.Input

	ToCxPageTransitionRouteArrayOutput() CxPageTransitionRouteArrayOutput
	ToCxPageTransitionRouteArrayOutputWithContext(context.Context) CxPageTransitionRouteArrayOutput
}

type CxPageTransitionRouteArray []CxPageTransitionRouteInput

func (CxPageTransitionRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRoute)(nil)).Elem()
}

func (i CxPageTransitionRouteArray) ToCxPageTransitionRouteArrayOutput() CxPageTransitionRouteArrayOutput {
	return i.ToCxPageTransitionRouteArrayOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteArray) ToCxPageTransitionRouteArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteArrayOutput)
}

type CxPageTransitionRouteOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRoute)(nil)).Elem()
}

func (o CxPageTransitionRouteOutput) ToCxPageTransitionRouteOutput() CxPageTransitionRouteOutput {
	return o
}

func (o CxPageTransitionRouteOutput) ToCxPageTransitionRouteOutputWithContext(ctx context.Context) CxPageTransitionRouteOutput {
	return o
}

// The condition to evaluate against form parameters or session parameters.
// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
func (o CxPageTransitionRouteOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The unique identifier of an Intent.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
func (o CxPageTransitionRouteOutput) Intent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.Intent }).(pulumi.StringPtrOutput)
}

// -
// The unique identifier of this event handler.
func (o CxPageTransitionRouteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target flow to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
func (o CxPageTransitionRouteOutput) TargetFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.TargetFlow }).(pulumi.StringPtrOutput)
}

// The target page to transition to.
// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
func (o CxPageTransitionRouteOutput) TargetPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *string { return v.TargetPage }).(pulumi.StringPtrOutput)
}

// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
// Structure is documented below.
func (o CxPageTransitionRouteOutput) TriggerFulfillment() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRoute) *CxPageTransitionRouteTriggerFulfillment { return v.TriggerFulfillment }).(CxPageTransitionRouteTriggerFulfillmentPtrOutput)
}

type CxPageTransitionRouteArrayOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRoute)(nil)).Elem()
}

func (o CxPageTransitionRouteArrayOutput) ToCxPageTransitionRouteArrayOutput() CxPageTransitionRouteArrayOutput {
	return o
}

func (o CxPageTransitionRouteArrayOutput) ToCxPageTransitionRouteArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteArrayOutput {
	return o
}

func (o CxPageTransitionRouteArrayOutput) Index(i pulumi.IntInput) CxPageTransitionRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageTransitionRoute {
		return vs[0].([]CxPageTransitionRoute)[vs[1].(int)]
	}).(CxPageTransitionRouteOutput)
}

type CxPageTransitionRouteTriggerFulfillment struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages []CxPageTransitionRouteTriggerFulfillmentMessage `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses *bool `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag *string `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook *string `pulumi:"webhook"`
}

// CxPageTransitionRouteTriggerFulfillmentInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentArgs and CxPageTransitionRouteTriggerFulfillmentOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentArgs{...}
type CxPageTransitionRouteTriggerFulfillmentInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentOutput() CxPageTransitionRouteTriggerFulfillmentOutput
	ToCxPageTransitionRouteTriggerFulfillmentOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentOutput
}

type CxPageTransitionRouteTriggerFulfillmentArgs struct {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	Messages CxPageTransitionRouteTriggerFulfillmentMessageArrayInput `pulumi:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	ReturnPartialResponses pulumi.BoolPtrInput `pulumi:"returnPartialResponses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	Webhook pulumi.StringPtrInput `pulumi:"webhook"`
}

func (CxPageTransitionRouteTriggerFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentArgs) ToCxPageTransitionRouteTriggerFulfillmentOutput() CxPageTransitionRouteTriggerFulfillmentOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentArgs) ToCxPageTransitionRouteTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentArgs) ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentArgs) ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentOutput).ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentArgs, CxPageTransitionRouteTriggerFulfillmentPtr and CxPageTransitionRouteTriggerFulfillmentPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentPtrType CxPageTransitionRouteTriggerFulfillmentArgs

func CxPageTransitionRouteTriggerFulfillmentPtr(v *CxPageTransitionRouteTriggerFulfillmentArgs) CxPageTransitionRouteTriggerFulfillmentPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentPtrType) ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentPtrType) ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentOutput) ToCxPageTransitionRouteTriggerFulfillmentOutput() CxPageTransitionRouteTriggerFulfillmentOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentOutput) ToCxPageTransitionRouteTriggerFulfillmentOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentOutput) ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentOutput) ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillment) *CxPageTransitionRouteTriggerFulfillment {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentPtrOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) Messages() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) []CxPageTransitionRouteTriggerFulfillmentMessage {
		return v.Messages
	}).(CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) *bool { return v.ReturnPartialResponses }).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageTransitionRouteTriggerFulfillmentOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillment) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillment)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentPtrOutput() CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) CxPageTransitionRouteTriggerFulfillment {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillment
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentOutput)
}

// The list of rich message responses to present to the user.
// Structure is documented below.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) Messages() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) []CxPageTransitionRouteTriggerFulfillmentMessage {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) ReturnPartialResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnPartialResponses
	}).(pulumi.BoolPtrOutput)
}

// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
func (o CxPageTransitionRouteTriggerFulfillmentPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillment) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessage struct {
	// A collection of text responses.
	Text *CxPageTransitionRouteTriggerFulfillmentMessageText `pulumi:"text"`
}

// CxPageTransitionRouteTriggerFulfillmentMessageInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageArgs and CxPageTransitionRouteTriggerFulfillmentMessageOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessageInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageArgs struct {
	// A collection of text responses.
	Text CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput `pulumi:"text"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageOutput)
}

// CxPageTransitionRouteTriggerFulfillmentMessageArrayInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageArray and CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageArrayInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageArray{ CxPageTransitionRouteTriggerFulfillmentMessageArgs{...} }
type CxPageTransitionRouteTriggerFulfillmentMessageArrayInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutput() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageArray []CxPageTransitionRouteTriggerFulfillmentMessageInput

func (CxPageTransitionRouteTriggerFulfillmentMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageArray) ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutput() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageArray) ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutput() CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return o
}

// A collection of text responses.
func (o CxPageTransitionRouteTriggerFulfillmentMessageOutput) Text() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessage) *CxPageTransitionRouteTriggerFulfillmentMessageText {
		return v.Text
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxPageTransitionRouteTriggerFulfillmentMessage)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutput() CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageArrayOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput) Index(i pulumi.IntInput) CxPageTransitionRouteTriggerFulfillmentMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxPageTransitionRouteTriggerFulfillmentMessage {
		return vs[0].([]CxPageTransitionRouteTriggerFulfillmentMessage)[vs[1].(int)]
	}).(CxPageTransitionRouteTriggerFulfillmentMessageOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageText struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption *bool `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts []string `pulumi:"texts"`
}

// CxPageTransitionRouteTriggerFulfillmentMessageTextInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageTextArgs and CxPageTransitionRouteTriggerFulfillmentMessageTextOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageTextInput` via:
//
//	CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{...}
type CxPageTransitionRouteTriggerFulfillmentMessageTextInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextOutput
}

type CxPageTransitionRouteTriggerFulfillmentMessageTextArgs struct {
	// -
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	AllowPlaybackInterruption pulumi.BoolPtrInput `pulumi:"allowPlaybackInterruption"`
	// A collection of text responses.
	Texts pulumi.StringArrayInput `pulumi:"texts"`
}

func (CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTextOutput)
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTextOutput).ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx)
}

// CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput is an input type that accepts CxPageTransitionRouteTriggerFulfillmentMessageTextArgs, CxPageTransitionRouteTriggerFulfillmentMessageTextPtr and CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput values.
// You can construct a concrete instance of `CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput` via:
//
//	        CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{...}
//
//	or:
//
//	        nil
type CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput interface {
	pulumi.Input

	ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput
	ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput
}

type cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType CxPageTransitionRouteTriggerFulfillmentMessageTextArgs

func CxPageTransitionRouteTriggerFulfillmentMessageTextPtr(v *CxPageTransitionRouteTriggerFulfillmentMessageTextArgs) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput {
	return (*cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType)(v)
}

func (*cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return i.ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (i *cxPageTransitionRouteTriggerFulfillmentMessageTextPtrType) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageTextOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(context.Background())
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CxPageTransitionRouteTriggerFulfillmentMessageText) *CxPageTransitionRouteTriggerFulfillmentMessageText {
		return &v
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageText) *bool { return v.AllowPlaybackInterruption }).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTextOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CxPageTransitionRouteTriggerFulfillmentMessageText) []string { return v.Texts }).(pulumi.StringArrayOutput)
}

type CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput struct{ *pulumi.OutputState }

func (CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxPageTransitionRouteTriggerFulfillmentMessageText)(nil)).Elem()
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput() CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) ToCxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutputWithContext(ctx context.Context) CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput {
	return o
}

func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) Elem() CxPageTransitionRouteTriggerFulfillmentMessageTextOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageText) CxPageTransitionRouteTriggerFulfillmentMessageText {
		if v != nil {
			return *v
		}
		var ret CxPageTransitionRouteTriggerFulfillmentMessageText
		return ret
	}).(CxPageTransitionRouteTriggerFulfillmentMessageTextOutput)
}

// -
// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) AllowPlaybackInterruption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageText) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPlaybackInterruption
	}).(pulumi.BoolPtrOutput)
}

// A collection of text responses.
func (o CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput) Texts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CxPageTransitionRouteTriggerFulfillmentMessageText) []string {
		if v == nil {
			return nil
		}
		return v.Texts
	}).(pulumi.StringArrayOutput)
}

type CxVersionNluSetting struct {
	ClassificationThreshold *float64 `pulumi:"classificationThreshold"`
	ModelTrainingMode       *string  `pulumi:"modelTrainingMode"`
	ModelType               *string  `pulumi:"modelType"`
}

// CxVersionNluSettingInput is an input type that accepts CxVersionNluSettingArgs and CxVersionNluSettingOutput values.
// You can construct a concrete instance of `CxVersionNluSettingInput` via:
//
//	CxVersionNluSettingArgs{...}
type CxVersionNluSettingInput interface {
	pulumi.Input

	ToCxVersionNluSettingOutput() CxVersionNluSettingOutput
	ToCxVersionNluSettingOutputWithContext(context.Context) CxVersionNluSettingOutput
}

type CxVersionNluSettingArgs struct {
	ClassificationThreshold pulumi.Float64PtrInput `pulumi:"classificationThreshold"`
	ModelTrainingMode       pulumi.StringPtrInput  `pulumi:"modelTrainingMode"`
	ModelType               pulumi.StringPtrInput  `pulumi:"modelType"`
}

func (CxVersionNluSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CxVersionNluSetting)(nil)).Elem()
}

func (i CxVersionNluSettingArgs) ToCxVersionNluSettingOutput() CxVersionNluSettingOutput {
	return i.ToCxVersionNluSettingOutputWithContext(context.Background())
}

func (i CxVersionNluSettingArgs) ToCxVersionNluSettingOutputWithContext(ctx context.Context) CxVersionNluSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxVersionNluSettingOutput)
}

// CxVersionNluSettingArrayInput is an input type that accepts CxVersionNluSettingArray and CxVersionNluSettingArrayOutput values.
// You can construct a concrete instance of `CxVersionNluSettingArrayInput` via:
//
//	CxVersionNluSettingArray{ CxVersionNluSettingArgs{...} }
type CxVersionNluSettingArrayInput interface {
	pulumi.Input

	ToCxVersionNluSettingArrayOutput() CxVersionNluSettingArrayOutput
	ToCxVersionNluSettingArrayOutputWithContext(context.Context) CxVersionNluSettingArrayOutput
}

type CxVersionNluSettingArray []CxVersionNluSettingInput

func (CxVersionNluSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxVersionNluSetting)(nil)).Elem()
}

func (i CxVersionNluSettingArray) ToCxVersionNluSettingArrayOutput() CxVersionNluSettingArrayOutput {
	return i.ToCxVersionNluSettingArrayOutputWithContext(context.Background())
}

func (i CxVersionNluSettingArray) ToCxVersionNluSettingArrayOutputWithContext(ctx context.Context) CxVersionNluSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxVersionNluSettingArrayOutput)
}

type CxVersionNluSettingOutput struct{ *pulumi.OutputState }

func (CxVersionNluSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxVersionNluSetting)(nil)).Elem()
}

func (o CxVersionNluSettingOutput) ToCxVersionNluSettingOutput() CxVersionNluSettingOutput {
	return o
}

func (o CxVersionNluSettingOutput) ToCxVersionNluSettingOutputWithContext(ctx context.Context) CxVersionNluSettingOutput {
	return o
}

func (o CxVersionNluSettingOutput) ClassificationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CxVersionNluSetting) *float64 { return v.ClassificationThreshold }).(pulumi.Float64PtrOutput)
}

func (o CxVersionNluSettingOutput) ModelTrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxVersionNluSetting) *string { return v.ModelTrainingMode }).(pulumi.StringPtrOutput)
}

func (o CxVersionNluSettingOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CxVersionNluSetting) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

type CxVersionNluSettingArrayOutput struct{ *pulumi.OutputState }

func (CxVersionNluSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxVersionNluSetting)(nil)).Elem()
}

func (o CxVersionNluSettingArrayOutput) ToCxVersionNluSettingArrayOutput() CxVersionNluSettingArrayOutput {
	return o
}

func (o CxVersionNluSettingArrayOutput) ToCxVersionNluSettingArrayOutputWithContext(ctx context.Context) CxVersionNluSettingArrayOutput {
	return o
}

func (o CxVersionNluSettingArrayOutput) Index(i pulumi.IntInput) CxVersionNluSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxVersionNluSetting {
		return vs[0].([]CxVersionNluSetting)[vs[1].(int)]
	}).(CxVersionNluSettingOutput)
}

type EntityTypeEntity struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym
	// could be green onions.
	// For KIND_LIST entity types:
	// * This collection must contain exactly one synonym equal to value.
	Synonyms []string `pulumi:"synonyms"`
	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value
	// could be scallions.
	// For KIND_MAP entity types:
	// * A reference value to be used in place of synonyms.
	//   For KIND_LIST entity types:
	// * A string that can contain references to other entity types (with or without aliases).
	Value string `pulumi:"value"`
}

// EntityTypeEntityInput is an input type that accepts EntityTypeEntityArgs and EntityTypeEntityOutput values.
// You can construct a concrete instance of `EntityTypeEntityInput` via:
//
//	EntityTypeEntityArgs{...}
type EntityTypeEntityInput interface {
	pulumi.Input

	ToEntityTypeEntityOutput() EntityTypeEntityOutput
	ToEntityTypeEntityOutputWithContext(context.Context) EntityTypeEntityOutput
}

type EntityTypeEntityArgs struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym
	// could be green onions.
	// For KIND_LIST entity types:
	// * This collection must contain exactly one synonym equal to value.
	Synonyms pulumi.StringArrayInput `pulumi:"synonyms"`
	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value
	// could be scallions.
	// For KIND_MAP entity types:
	// * A reference value to be used in place of synonyms.
	//   For KIND_LIST entity types:
	// * A string that can contain references to other entity types (with or without aliases).
	Value pulumi.StringInput `pulumi:"value"`
}

func (EntityTypeEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTypeEntity)(nil)).Elem()
}

func (i EntityTypeEntityArgs) ToEntityTypeEntityOutput() EntityTypeEntityOutput {
	return i.ToEntityTypeEntityOutputWithContext(context.Background())
}

func (i EntityTypeEntityArgs) ToEntityTypeEntityOutputWithContext(ctx context.Context) EntityTypeEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTypeEntityOutput)
}

// EntityTypeEntityArrayInput is an input type that accepts EntityTypeEntityArray and EntityTypeEntityArrayOutput values.
// You can construct a concrete instance of `EntityTypeEntityArrayInput` via:
//
//	EntityTypeEntityArray{ EntityTypeEntityArgs{...} }
type EntityTypeEntityArrayInput interface {
	pulumi.Input

	ToEntityTypeEntityArrayOutput() EntityTypeEntityArrayOutput
	ToEntityTypeEntityArrayOutputWithContext(context.Context) EntityTypeEntityArrayOutput
}

type EntityTypeEntityArray []EntityTypeEntityInput

func (EntityTypeEntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTypeEntity)(nil)).Elem()
}

func (i EntityTypeEntityArray) ToEntityTypeEntityArrayOutput() EntityTypeEntityArrayOutput {
	return i.ToEntityTypeEntityArrayOutputWithContext(context.Background())
}

func (i EntityTypeEntityArray) ToEntityTypeEntityArrayOutputWithContext(ctx context.Context) EntityTypeEntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTypeEntityArrayOutput)
}

type EntityTypeEntityOutput struct{ *pulumi.OutputState }

func (EntityTypeEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTypeEntity)(nil)).Elem()
}

func (o EntityTypeEntityOutput) ToEntityTypeEntityOutput() EntityTypeEntityOutput {
	return o
}

func (o EntityTypeEntityOutput) ToEntityTypeEntityOutputWithContext(ctx context.Context) EntityTypeEntityOutput {
	return o
}

// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym
// could be green onions.
// For KIND_LIST entity types:
// * This collection must contain exactly one synonym equal to value.
func (o EntityTypeEntityOutput) Synonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EntityTypeEntity) []string { return v.Synonyms }).(pulumi.StringArrayOutput)
}

// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value
// could be scallions.
// For KIND_MAP entity types:
//   - A reference value to be used in place of synonyms.
//     For KIND_LIST entity types:
//   - A string that can contain references to other entity types (with or without aliases).
func (o EntityTypeEntityOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EntityTypeEntity) string { return v.Value }).(pulumi.StringOutput)
}

type EntityTypeEntityArrayOutput struct{ *pulumi.OutputState }

func (EntityTypeEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTypeEntity)(nil)).Elem()
}

func (o EntityTypeEntityArrayOutput) ToEntityTypeEntityArrayOutput() EntityTypeEntityArrayOutput {
	return o
}

func (o EntityTypeEntityArrayOutput) ToEntityTypeEntityArrayOutputWithContext(ctx context.Context) EntityTypeEntityArrayOutput {
	return o
}

func (o EntityTypeEntityArrayOutput) Index(i pulumi.IntInput) EntityTypeEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityTypeEntity {
		return vs[0].([]EntityTypeEntity)[vs[1].(int)]
	}).(EntityTypeEntityOutput)
}

type FulfillmentFeature struct {
	// The type of the feature that enabled for fulfillment.
	// * SMALLTALK: Fulfillment is enabled for SmallTalk.
	//   Possible values are `SMALLTALK`.
	Type string `pulumi:"type"`
}

// FulfillmentFeatureInput is an input type that accepts FulfillmentFeatureArgs and FulfillmentFeatureOutput values.
// You can construct a concrete instance of `FulfillmentFeatureInput` via:
//
//	FulfillmentFeatureArgs{...}
type FulfillmentFeatureInput interface {
	pulumi.Input

	ToFulfillmentFeatureOutput() FulfillmentFeatureOutput
	ToFulfillmentFeatureOutputWithContext(context.Context) FulfillmentFeatureOutput
}

type FulfillmentFeatureArgs struct {
	// The type of the feature that enabled for fulfillment.
	// * SMALLTALK: Fulfillment is enabled for SmallTalk.
	//   Possible values are `SMALLTALK`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FulfillmentFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FulfillmentFeature)(nil)).Elem()
}

func (i FulfillmentFeatureArgs) ToFulfillmentFeatureOutput() FulfillmentFeatureOutput {
	return i.ToFulfillmentFeatureOutputWithContext(context.Background())
}

func (i FulfillmentFeatureArgs) ToFulfillmentFeatureOutputWithContext(ctx context.Context) FulfillmentFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentFeatureOutput)
}

// FulfillmentFeatureArrayInput is an input type that accepts FulfillmentFeatureArray and FulfillmentFeatureArrayOutput values.
// You can construct a concrete instance of `FulfillmentFeatureArrayInput` via:
//
//	FulfillmentFeatureArray{ FulfillmentFeatureArgs{...} }
type FulfillmentFeatureArrayInput interface {
	pulumi.Input

	ToFulfillmentFeatureArrayOutput() FulfillmentFeatureArrayOutput
	ToFulfillmentFeatureArrayOutputWithContext(context.Context) FulfillmentFeatureArrayOutput
}

type FulfillmentFeatureArray []FulfillmentFeatureInput

func (FulfillmentFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FulfillmentFeature)(nil)).Elem()
}

func (i FulfillmentFeatureArray) ToFulfillmentFeatureArrayOutput() FulfillmentFeatureArrayOutput {
	return i.ToFulfillmentFeatureArrayOutputWithContext(context.Background())
}

func (i FulfillmentFeatureArray) ToFulfillmentFeatureArrayOutputWithContext(ctx context.Context) FulfillmentFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentFeatureArrayOutput)
}

type FulfillmentFeatureOutput struct{ *pulumi.OutputState }

func (FulfillmentFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FulfillmentFeature)(nil)).Elem()
}

func (o FulfillmentFeatureOutput) ToFulfillmentFeatureOutput() FulfillmentFeatureOutput {
	return o
}

func (o FulfillmentFeatureOutput) ToFulfillmentFeatureOutputWithContext(ctx context.Context) FulfillmentFeatureOutput {
	return o
}

// The type of the feature that enabled for fulfillment.
//   - SMALLTALK: Fulfillment is enabled for SmallTalk.
//     Possible values are `SMALLTALK`.
func (o FulfillmentFeatureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FulfillmentFeature) string { return v.Type }).(pulumi.StringOutput)
}

type FulfillmentFeatureArrayOutput struct{ *pulumi.OutputState }

func (FulfillmentFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FulfillmentFeature)(nil)).Elem()
}

func (o FulfillmentFeatureArrayOutput) ToFulfillmentFeatureArrayOutput() FulfillmentFeatureArrayOutput {
	return o
}

func (o FulfillmentFeatureArrayOutput) ToFulfillmentFeatureArrayOutputWithContext(ctx context.Context) FulfillmentFeatureArrayOutput {
	return o
}

func (o FulfillmentFeatureArrayOutput) Index(i pulumi.IntInput) FulfillmentFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FulfillmentFeature {
		return vs[0].([]FulfillmentFeature)[vs[1].(int)]
	}).(FulfillmentFeatureOutput)
}

type FulfillmentGenericWebService struct {
	// The password for HTTP Basic authentication.
	Password *string `pulumi:"password"`
	// The HTTP request headers to send together with fulfillment requests.
	RequestHeaders map[string]string `pulumi:"requestHeaders"`
	// The fulfillment URI for receiving POST requests. It must use https protocol.
	Uri string `pulumi:"uri"`
	// The user name for HTTP Basic authentication.
	Username *string `pulumi:"username"`
}

// FulfillmentGenericWebServiceInput is an input type that accepts FulfillmentGenericWebServiceArgs and FulfillmentGenericWebServiceOutput values.
// You can construct a concrete instance of `FulfillmentGenericWebServiceInput` via:
//
//	FulfillmentGenericWebServiceArgs{...}
type FulfillmentGenericWebServiceInput interface {
	pulumi.Input

	ToFulfillmentGenericWebServiceOutput() FulfillmentGenericWebServiceOutput
	ToFulfillmentGenericWebServiceOutputWithContext(context.Context) FulfillmentGenericWebServiceOutput
}

type FulfillmentGenericWebServiceArgs struct {
	// The password for HTTP Basic authentication.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The HTTP request headers to send together with fulfillment requests.
	RequestHeaders pulumi.StringMapInput `pulumi:"requestHeaders"`
	// The fulfillment URI for receiving POST requests. It must use https protocol.
	Uri pulumi.StringInput `pulumi:"uri"`
	// The user name for HTTP Basic authentication.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (FulfillmentGenericWebServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FulfillmentGenericWebService)(nil)).Elem()
}

func (i FulfillmentGenericWebServiceArgs) ToFulfillmentGenericWebServiceOutput() FulfillmentGenericWebServiceOutput {
	return i.ToFulfillmentGenericWebServiceOutputWithContext(context.Background())
}

func (i FulfillmentGenericWebServiceArgs) ToFulfillmentGenericWebServiceOutputWithContext(ctx context.Context) FulfillmentGenericWebServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentGenericWebServiceOutput)
}

func (i FulfillmentGenericWebServiceArgs) ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput {
	return i.ToFulfillmentGenericWebServicePtrOutputWithContext(context.Background())
}

func (i FulfillmentGenericWebServiceArgs) ToFulfillmentGenericWebServicePtrOutputWithContext(ctx context.Context) FulfillmentGenericWebServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentGenericWebServiceOutput).ToFulfillmentGenericWebServicePtrOutputWithContext(ctx)
}

// FulfillmentGenericWebServicePtrInput is an input type that accepts FulfillmentGenericWebServiceArgs, FulfillmentGenericWebServicePtr and FulfillmentGenericWebServicePtrOutput values.
// You can construct a concrete instance of `FulfillmentGenericWebServicePtrInput` via:
//
//	        FulfillmentGenericWebServiceArgs{...}
//
//	or:
//
//	        nil
type FulfillmentGenericWebServicePtrInput interface {
	pulumi.Input

	ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput
	ToFulfillmentGenericWebServicePtrOutputWithContext(context.Context) FulfillmentGenericWebServicePtrOutput
}

type fulfillmentGenericWebServicePtrType FulfillmentGenericWebServiceArgs

func FulfillmentGenericWebServicePtr(v *FulfillmentGenericWebServiceArgs) FulfillmentGenericWebServicePtrInput {
	return (*fulfillmentGenericWebServicePtrType)(v)
}

func (*fulfillmentGenericWebServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FulfillmentGenericWebService)(nil)).Elem()
}

func (i *fulfillmentGenericWebServicePtrType) ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput {
	return i.ToFulfillmentGenericWebServicePtrOutputWithContext(context.Background())
}

func (i *fulfillmentGenericWebServicePtrType) ToFulfillmentGenericWebServicePtrOutputWithContext(ctx context.Context) FulfillmentGenericWebServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FulfillmentGenericWebServicePtrOutput)
}

type FulfillmentGenericWebServiceOutput struct{ *pulumi.OutputState }

func (FulfillmentGenericWebServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FulfillmentGenericWebService)(nil)).Elem()
}

func (o FulfillmentGenericWebServiceOutput) ToFulfillmentGenericWebServiceOutput() FulfillmentGenericWebServiceOutput {
	return o
}

func (o FulfillmentGenericWebServiceOutput) ToFulfillmentGenericWebServiceOutputWithContext(ctx context.Context) FulfillmentGenericWebServiceOutput {
	return o
}

func (o FulfillmentGenericWebServiceOutput) ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput {
	return o.ToFulfillmentGenericWebServicePtrOutputWithContext(context.Background())
}

func (o FulfillmentGenericWebServiceOutput) ToFulfillmentGenericWebServicePtrOutputWithContext(ctx context.Context) FulfillmentGenericWebServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FulfillmentGenericWebService) *FulfillmentGenericWebService {
		return &v
	}).(FulfillmentGenericWebServicePtrOutput)
}

// The password for HTTP Basic authentication.
func (o FulfillmentGenericWebServiceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FulfillmentGenericWebService) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The HTTP request headers to send together with fulfillment requests.
func (o FulfillmentGenericWebServiceOutput) RequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v FulfillmentGenericWebService) map[string]string { return v.RequestHeaders }).(pulumi.StringMapOutput)
}

// The fulfillment URI for receiving POST requests. It must use https protocol.
func (o FulfillmentGenericWebServiceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v FulfillmentGenericWebService) string { return v.Uri }).(pulumi.StringOutput)
}

// The user name for HTTP Basic authentication.
func (o FulfillmentGenericWebServiceOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FulfillmentGenericWebService) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type FulfillmentGenericWebServicePtrOutput struct{ *pulumi.OutputState }

func (FulfillmentGenericWebServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FulfillmentGenericWebService)(nil)).Elem()
}

func (o FulfillmentGenericWebServicePtrOutput) ToFulfillmentGenericWebServicePtrOutput() FulfillmentGenericWebServicePtrOutput {
	return o
}

func (o FulfillmentGenericWebServicePtrOutput) ToFulfillmentGenericWebServicePtrOutputWithContext(ctx context.Context) FulfillmentGenericWebServicePtrOutput {
	return o
}

func (o FulfillmentGenericWebServicePtrOutput) Elem() FulfillmentGenericWebServiceOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) FulfillmentGenericWebService {
		if v != nil {
			return *v
		}
		var ret FulfillmentGenericWebService
		return ret
	}).(FulfillmentGenericWebServiceOutput)
}

// The password for HTTP Basic authentication.
func (o FulfillmentGenericWebServicePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The HTTP request headers to send together with fulfillment requests.
func (o FulfillmentGenericWebServicePtrOutput) RequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) map[string]string {
		if v == nil {
			return nil
		}
		return v.RequestHeaders
	}).(pulumi.StringMapOutput)
}

// The fulfillment URI for receiving POST requests. It must use https protocol.
func (o FulfillmentGenericWebServicePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// The user name for HTTP Basic authentication.
func (o FulfillmentGenericWebServicePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FulfillmentGenericWebService) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type IntentFollowupIntentInfo struct {
	FollowupIntentName *string `pulumi:"followupIntentName"`
	// The unique identifier of the parent intent in the chain of followup intents.
	// Format: projects/<Project ID>/agent/intents/<Intent ID>.
	ParentFollowupIntentName *string `pulumi:"parentFollowupIntentName"`
}

// IntentFollowupIntentInfoInput is an input type that accepts IntentFollowupIntentInfoArgs and IntentFollowupIntentInfoOutput values.
// You can construct a concrete instance of `IntentFollowupIntentInfoInput` via:
//
//	IntentFollowupIntentInfoArgs{...}
type IntentFollowupIntentInfoInput interface {
	pulumi.Input

	ToIntentFollowupIntentInfoOutput() IntentFollowupIntentInfoOutput
	ToIntentFollowupIntentInfoOutputWithContext(context.Context) IntentFollowupIntentInfoOutput
}

type IntentFollowupIntentInfoArgs struct {
	FollowupIntentName pulumi.StringPtrInput `pulumi:"followupIntentName"`
	// The unique identifier of the parent intent in the chain of followup intents.
	// Format: projects/<Project ID>/agent/intents/<Intent ID>.
	ParentFollowupIntentName pulumi.StringPtrInput `pulumi:"parentFollowupIntentName"`
}

func (IntentFollowupIntentInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntentFollowupIntentInfo)(nil)).Elem()
}

func (i IntentFollowupIntentInfoArgs) ToIntentFollowupIntentInfoOutput() IntentFollowupIntentInfoOutput {
	return i.ToIntentFollowupIntentInfoOutputWithContext(context.Background())
}

func (i IntentFollowupIntentInfoArgs) ToIntentFollowupIntentInfoOutputWithContext(ctx context.Context) IntentFollowupIntentInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntentFollowupIntentInfoOutput)
}

// IntentFollowupIntentInfoArrayInput is an input type that accepts IntentFollowupIntentInfoArray and IntentFollowupIntentInfoArrayOutput values.
// You can construct a concrete instance of `IntentFollowupIntentInfoArrayInput` via:
//
//	IntentFollowupIntentInfoArray{ IntentFollowupIntentInfoArgs{...} }
type IntentFollowupIntentInfoArrayInput interface {
	pulumi.Input

	ToIntentFollowupIntentInfoArrayOutput() IntentFollowupIntentInfoArrayOutput
	ToIntentFollowupIntentInfoArrayOutputWithContext(context.Context) IntentFollowupIntentInfoArrayOutput
}

type IntentFollowupIntentInfoArray []IntentFollowupIntentInfoInput

func (IntentFollowupIntentInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntentFollowupIntentInfo)(nil)).Elem()
}

func (i IntentFollowupIntentInfoArray) ToIntentFollowupIntentInfoArrayOutput() IntentFollowupIntentInfoArrayOutput {
	return i.ToIntentFollowupIntentInfoArrayOutputWithContext(context.Background())
}

func (i IntentFollowupIntentInfoArray) ToIntentFollowupIntentInfoArrayOutputWithContext(ctx context.Context) IntentFollowupIntentInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntentFollowupIntentInfoArrayOutput)
}

type IntentFollowupIntentInfoOutput struct{ *pulumi.OutputState }

func (IntentFollowupIntentInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntentFollowupIntentInfo)(nil)).Elem()
}

func (o IntentFollowupIntentInfoOutput) ToIntentFollowupIntentInfoOutput() IntentFollowupIntentInfoOutput {
	return o
}

func (o IntentFollowupIntentInfoOutput) ToIntentFollowupIntentInfoOutputWithContext(ctx context.Context) IntentFollowupIntentInfoOutput {
	return o
}

func (o IntentFollowupIntentInfoOutput) FollowupIntentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntentFollowupIntentInfo) *string { return v.FollowupIntentName }).(pulumi.StringPtrOutput)
}

// The unique identifier of the parent intent in the chain of followup intents.
// Format: projects/<Project ID>/agent/intents/<Intent ID>.
func (o IntentFollowupIntentInfoOutput) ParentFollowupIntentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntentFollowupIntentInfo) *string { return v.ParentFollowupIntentName }).(pulumi.StringPtrOutput)
}

type IntentFollowupIntentInfoArrayOutput struct{ *pulumi.OutputState }

func (IntentFollowupIntentInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntentFollowupIntentInfo)(nil)).Elem()
}

func (o IntentFollowupIntentInfoArrayOutput) ToIntentFollowupIntentInfoArrayOutput() IntentFollowupIntentInfoArrayOutput {
	return o
}

func (o IntentFollowupIntentInfoArrayOutput) ToIntentFollowupIntentInfoArrayOutputWithContext(ctx context.Context) IntentFollowupIntentInfoArrayOutput {
	return o
}

func (o IntentFollowupIntentInfoArrayOutput) Index(i pulumi.IntInput) IntentFollowupIntentInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntentFollowupIntentInfo {
		return vs[0].([]IntentFollowupIntentInfo)[vs[1].(int)]
	}).(IntentFollowupIntentInfoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentSpeechToTextSettingsInput)(nil)).Elem(), CxAgentSpeechToTextSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxAgentSpeechToTextSettingsPtrInput)(nil)).Elem(), CxAgentSpeechToTextSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEntityTypeEntityInput)(nil)).Elem(), CxEntityTypeEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEntityTypeEntityArrayInput)(nil)).Elem(), CxEntityTypeEntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEntityTypeExcludedPhraseInput)(nil)).Elem(), CxEntityTypeExcludedPhraseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEntityTypeExcludedPhraseArrayInput)(nil)).Elem(), CxEntityTypeExcludedPhraseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEnvironmentVersionConfigInput)(nil)).Elem(), CxEnvironmentVersionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxEnvironmentVersionConfigArrayInput)(nil)).Elem(), CxEnvironmentVersionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerInput)(nil)).Elem(), CxFlowEventHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerArrayInput)(nil)).Elem(), CxFlowEventHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowEventHandlerTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowNluSettingsInput)(nil)).Elem(), CxFlowNluSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowNluSettingsPtrInput)(nil)).Elem(), CxFlowNluSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteInput)(nil)).Elem(), CxFlowTransitionRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteArrayInput)(nil)).Elem(), CxFlowTransitionRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxFlowTransitionRouteTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentParameterInput)(nil)).Elem(), CxIntentParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentParameterArrayInput)(nil)).Elem(), CxIntentParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentTrainingPhraseInput)(nil)).Elem(), CxIntentTrainingPhraseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentTrainingPhraseArrayInput)(nil)).Elem(), CxIntentTrainingPhraseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentTrainingPhrasePartInput)(nil)).Elem(), CxIntentTrainingPhrasePartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxIntentTrainingPhrasePartArrayInput)(nil)).Elem(), CxIntentTrainingPhrasePartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentInput)(nil)).Elem(), CxPageEntryFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentPtrInput)(nil)).Elem(), CxPageEntryFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageInput)(nil)).Elem(), CxPageEntryFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageArrayInput)(nil)).Elem(), CxPageEntryFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageTextInput)(nil)).Elem(), CxPageEntryFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEntryFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageEntryFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerInput)(nil)).Elem(), CxPageEventHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerArrayInput)(nil)).Elem(), CxPageEventHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageEventHandlerTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageEventHandlerTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormInput)(nil)).Elem(), CxPageFormArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormPtrInput)(nil)).Elem(), CxPageFormArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterInput)(nil)).Elem(), CxPageFormParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterArrayInput)(nil)).Elem(), CxPageFormParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInput)(nil)).Elem(), CxPageFormParameterFillBehaviorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteInput)(nil)).Elem(), CxPageTransitionRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteArrayInput)(nil)).Elem(), CxPageTransitionRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageArrayInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageTextInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxPageTransitionRouteTriggerFulfillmentMessageTextPtrInput)(nil)).Elem(), CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxVersionNluSettingInput)(nil)).Elem(), CxVersionNluSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CxVersionNluSettingArrayInput)(nil)).Elem(), CxVersionNluSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTypeEntityInput)(nil)).Elem(), EntityTypeEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTypeEntityArrayInput)(nil)).Elem(), EntityTypeEntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FulfillmentFeatureInput)(nil)).Elem(), FulfillmentFeatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FulfillmentFeatureArrayInput)(nil)).Elem(), FulfillmentFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FulfillmentGenericWebServiceInput)(nil)).Elem(), FulfillmentGenericWebServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FulfillmentGenericWebServicePtrInput)(nil)).Elem(), FulfillmentGenericWebServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntentFollowupIntentInfoInput)(nil)).Elem(), IntentFollowupIntentInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntentFollowupIntentInfoArrayInput)(nil)).Elem(), IntentFollowupIntentInfoArray{})
	pulumi.RegisterOutputType(CxAgentSpeechToTextSettingsOutput{})
	pulumi.RegisterOutputType(CxAgentSpeechToTextSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxEntityTypeEntityOutput{})
	pulumi.RegisterOutputType(CxEntityTypeEntityArrayOutput{})
	pulumi.RegisterOutputType(CxEntityTypeExcludedPhraseOutput{})
	pulumi.RegisterOutputType(CxEntityTypeExcludedPhraseArrayOutput{})
	pulumi.RegisterOutputType(CxEnvironmentVersionConfigOutput{})
	pulumi.RegisterOutputType(CxEnvironmentVersionConfigArrayOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerArrayOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxFlowEventHandlerTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxFlowNluSettingsOutput{})
	pulumi.RegisterOutputType(CxFlowNluSettingsPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteArrayOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxFlowTransitionRouteTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxIntentParameterOutput{})
	pulumi.RegisterOutputType(CxIntentParameterArrayOutput{})
	pulumi.RegisterOutputType(CxIntentTrainingPhraseOutput{})
	pulumi.RegisterOutputType(CxIntentTrainingPhraseArrayOutput{})
	pulumi.RegisterOutputType(CxIntentTrainingPhrasePartOutput{})
	pulumi.RegisterOutputType(CxIntentTrainingPhrasePartArrayOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageEntryFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerArrayOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageEventHandlerTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormOutput{})
	pulumi.RegisterOutputType(CxPageFormPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteArrayOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentPtrOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageArrayOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageTextOutput{})
	pulumi.RegisterOutputType(CxPageTransitionRouteTriggerFulfillmentMessageTextPtrOutput{})
	pulumi.RegisterOutputType(CxVersionNluSettingOutput{})
	pulumi.RegisterOutputType(CxVersionNluSettingArrayOutput{})
	pulumi.RegisterOutputType(EntityTypeEntityOutput{})
	pulumi.RegisterOutputType(EntityTypeEntityArrayOutput{})
	pulumi.RegisterOutputType(FulfillmentFeatureOutput{})
	pulumi.RegisterOutputType(FulfillmentFeatureArrayOutput{})
	pulumi.RegisterOutputType(FulfillmentGenericWebServiceOutput{})
	pulumi.RegisterOutputType(FulfillmentGenericWebServicePtrOutput{})
	pulumi.RegisterOutputType(IntentFollowupIntentInfoOutput{})
	pulumi.RegisterOutputType(IntentFollowupIntentInfoArrayOutput{})
}
