// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package diagflow

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Flows represents the conversation flows when you build your chatbot agent.
//
// To get more information about Flow, see:
//
// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
//
// ## Example Usage
// ### Dialogflowcx Flow Full
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/diagflow"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
// 			DisplayName:         pulumi.String("dialogflowcx-agent"),
// 			Location:            pulumi.String("global"),
// 			DefaultLanguageCode: pulumi.String("en"),
// 			SupportedLanguageCodes: pulumi.StringArray{
// 				pulumi.String("fr"),
// 				pulumi.String("de"),
// 				pulumi.String("es"),
// 			},
// 			TimeZone:                 pulumi.String("America/New_York"),
// 			Description:              pulumi.String("Example description."),
// 			AvatarUri:                pulumi.String("https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png"),
// 			EnableStackdriverLogging: pulumi.Bool(true),
// 			EnableSpellCorrection:    pulumi.Bool(true),
// 			SpeechToTextSettings: &diagflow.CxAgentSpeechToTextSettingsArgs{
// 				EnableSpeechAdaptation: pulumi.Bool(true),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = diagflow.NewCxFlow(ctx, "basicFlow", &diagflow.CxFlowArgs{
// 			Parent:      agent.ID(),
// 			DisplayName: pulumi.String("MyFlow"),
// 			Description: pulumi.String("Test Flow"),
// 			NluSettings: &diagflow.CxFlowNluSettingsArgs{
// 				ClassificationThreshold: pulumi.Float64(0.3),
// 				ModelType:               pulumi.String("MODEL_TYPE_STANDARD"),
// 			},
// 			EventHandlers: diagflow.CxFlowEventHandlerArray{
// 				&diagflow.CxFlowEventHandlerArgs{
// 					Event: pulumi.String("custom-event"),
// 					TriggerFulfillment: &diagflow.CxFlowEventHandlerTriggerFulfillmentArgs{
// 						ReturnPartialResponses: pulumi.Bool(false),
// 						Messages: diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArray{
// 							&diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs{
// 								Text: &diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{
// 									Texts: pulumi.StringArray{
// 										pulumi.String("I didn't get that. Can you say it again?"),
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 				&diagflow.CxFlowEventHandlerArgs{
// 					Event: pulumi.String("sys.no-match-default"),
// 					TriggerFulfillment: &diagflow.CxFlowEventHandlerTriggerFulfillmentArgs{
// 						ReturnPartialResponses: pulumi.Bool(false),
// 						Messages: diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArray{
// 							&diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs{
// 								Text: &diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{
// 									Texts: pulumi.StringArray{
// 										pulumi.String("Sorry, could you say that again?"),
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 				&diagflow.CxFlowEventHandlerArgs{
// 					Event: pulumi.String("sys.no-input-default"),
// 					TriggerFulfillment: &diagflow.CxFlowEventHandlerTriggerFulfillmentArgs{
// 						ReturnPartialResponses: pulumi.Bool(false),
// 						Messages: diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArray{
// 							&diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs{
// 								Text: &diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{
// 									Texts: pulumi.StringArray{
// 										pulumi.String("One more time?"),
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Flow can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:diagflow/cxFlow:CxFlow default {{parent}}/flows/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:diagflow/cxFlow:CxFlow default {{parent}}/{{name}}
// ```
type CxFlow struct {
	pulumi.CustomResourceState

	// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The human-readable name of the flow.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// A flow's event handlers serve two purposes:
	// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
	// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
	// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
	// Structure is documented below.
	EventHandlers CxFlowEventHandlerArrayOutput `pulumi:"eventHandlers"`
	// The language of the following fields in flow:
	// Flow.event_handlers.trigger_fulfillment.messages
	// Flow.event_handlers.trigger_fulfillment.conditional_cases
	// Flow.transition_routes.trigger_fulfillment.messages
	// Flow.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	LanguageCode pulumi.StringPtrOutput `pulumi:"languageCode"`
	// -
	// The unique identifier of this event handler.
	Name pulumi.StringOutput `pulumi:"name"`
	// NLU related settings of the flow.
	// Structure is documented below.
	NluSettings CxFlowNluSettingsPtrOutput `pulumi:"nluSettings"`
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
	// A flow's transition route group serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
	// Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
	TransitionRouteGroups pulumi.StringArrayOutput `pulumi:"transitionRouteGroups"`
	// A flow's transition routes serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
	TransitionRoutes CxFlowTransitionRouteArrayOutput `pulumi:"transitionRoutes"`
}

// NewCxFlow registers a new resource with the given unique name, arguments, and options.
func NewCxFlow(ctx *pulumi.Context,
	name string, args *CxFlowArgs, opts ...pulumi.ResourceOption) (*CxFlow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource CxFlow
	err := ctx.RegisterResource("gcp:diagflow/cxFlow:CxFlow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCxFlow gets an existing CxFlow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCxFlow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CxFlowState, opts ...pulumi.ResourceOption) (*CxFlow, error) {
	var resource CxFlow
	err := ctx.ReadResource("gcp:diagflow/cxFlow:CxFlow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CxFlow resources.
type cxFlowState struct {
	// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description *string `pulumi:"description"`
	// The human-readable name of the flow.
	DisplayName *string `pulumi:"displayName"`
	// A flow's event handlers serve two purposes:
	// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
	// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
	// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
	// Structure is documented below.
	EventHandlers []CxFlowEventHandler `pulumi:"eventHandlers"`
	// The language of the following fields in flow:
	// Flow.event_handlers.trigger_fulfillment.messages
	// Flow.event_handlers.trigger_fulfillment.conditional_cases
	// Flow.transition_routes.trigger_fulfillment.messages
	// Flow.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	LanguageCode *string `pulumi:"languageCode"`
	// -
	// The unique identifier of this event handler.
	Name *string `pulumi:"name"`
	// NLU related settings of the flow.
	// Structure is documented below.
	NluSettings *CxFlowNluSettings `pulumi:"nluSettings"`
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
	// A flow's transition route group serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
	// Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
	TransitionRouteGroups []string `pulumi:"transitionRouteGroups"`
	// A flow's transition routes serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
	TransitionRoutes []CxFlowTransitionRoute `pulumi:"transitionRoutes"`
}

type CxFlowState struct {
	// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description pulumi.StringPtrInput
	// The human-readable name of the flow.
	DisplayName pulumi.StringPtrInput
	// A flow's event handlers serve two purposes:
	// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
	// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
	// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
	// Structure is documented below.
	EventHandlers CxFlowEventHandlerArrayInput
	// The language of the following fields in flow:
	// Flow.event_handlers.trigger_fulfillment.messages
	// Flow.event_handlers.trigger_fulfillment.conditional_cases
	// Flow.transition_routes.trigger_fulfillment.messages
	// Flow.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	LanguageCode pulumi.StringPtrInput
	// -
	// The unique identifier of this event handler.
	Name pulumi.StringPtrInput
	// NLU related settings of the flow.
	// Structure is documented below.
	NluSettings CxFlowNluSettingsPtrInput
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
	// A flow's transition route group serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
	// Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
	TransitionRouteGroups pulumi.StringArrayInput
	// A flow's transition routes serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
	TransitionRoutes CxFlowTransitionRouteArrayInput
}

func (CxFlowState) ElementType() reflect.Type {
	return reflect.TypeOf((*cxFlowState)(nil)).Elem()
}

type cxFlowArgs struct {
	// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description *string `pulumi:"description"`
	// The human-readable name of the flow.
	DisplayName string `pulumi:"displayName"`
	// A flow's event handlers serve two purposes:
	// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
	// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
	// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
	// Structure is documented below.
	EventHandlers []CxFlowEventHandler `pulumi:"eventHandlers"`
	// The language of the following fields in flow:
	// Flow.event_handlers.trigger_fulfillment.messages
	// Flow.event_handlers.trigger_fulfillment.conditional_cases
	// Flow.transition_routes.trigger_fulfillment.messages
	// Flow.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	LanguageCode *string `pulumi:"languageCode"`
	// NLU related settings of the flow.
	// Structure is documented below.
	NluSettings *CxFlowNluSettings `pulumi:"nluSettings"`
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent *string `pulumi:"parent"`
	// A flow's transition route group serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
	// Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
	TransitionRouteGroups []string `pulumi:"transitionRouteGroups"`
	// A flow's transition routes serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
	TransitionRoutes []CxFlowTransitionRoute `pulumi:"transitionRoutes"`
}

// The set of arguments for constructing a CxFlow resource.
type CxFlowArgs struct {
	// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description pulumi.StringPtrInput
	// The human-readable name of the flow.
	DisplayName pulumi.StringInput
	// A flow's event handlers serve two purposes:
	// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
	// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
	// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
	// Structure is documented below.
	EventHandlers CxFlowEventHandlerArrayInput
	// The language of the following fields in flow:
	// Flow.event_handlers.trigger_fulfillment.messages
	// Flow.event_handlers.trigger_fulfillment.conditional_cases
	// Flow.transition_routes.trigger_fulfillment.messages
	// Flow.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	LanguageCode pulumi.StringPtrInput
	// NLU related settings of the flow.
	// Structure is documented below.
	NluSettings CxFlowNluSettingsPtrInput
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	Parent pulumi.StringPtrInput
	// A flow's transition route group serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
	// Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
	TransitionRouteGroups pulumi.StringArrayInput
	// A flow's transition routes serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
	TransitionRoutes CxFlowTransitionRouteArrayInput
}

func (CxFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cxFlowArgs)(nil)).Elem()
}

type CxFlowInput interface {
	pulumi.Input

	ToCxFlowOutput() CxFlowOutput
	ToCxFlowOutputWithContext(ctx context.Context) CxFlowOutput
}

func (*CxFlow) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlow)(nil))
}

func (i *CxFlow) ToCxFlowOutput() CxFlowOutput {
	return i.ToCxFlowOutputWithContext(context.Background())
}

func (i *CxFlow) ToCxFlowOutputWithContext(ctx context.Context) CxFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowOutput)
}

func (i *CxFlow) ToCxFlowPtrOutput() CxFlowPtrOutput {
	return i.ToCxFlowPtrOutputWithContext(context.Background())
}

func (i *CxFlow) ToCxFlowPtrOutputWithContext(ctx context.Context) CxFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowPtrOutput)
}

type CxFlowPtrInput interface {
	pulumi.Input

	ToCxFlowPtrOutput() CxFlowPtrOutput
	ToCxFlowPtrOutputWithContext(ctx context.Context) CxFlowPtrOutput
}

type cxFlowPtrType CxFlowArgs

func (*cxFlowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlow)(nil))
}

func (i *cxFlowPtrType) ToCxFlowPtrOutput() CxFlowPtrOutput {
	return i.ToCxFlowPtrOutputWithContext(context.Background())
}

func (i *cxFlowPtrType) ToCxFlowPtrOutputWithContext(ctx context.Context) CxFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowPtrOutput)
}

// CxFlowArrayInput is an input type that accepts CxFlowArray and CxFlowArrayOutput values.
// You can construct a concrete instance of `CxFlowArrayInput` via:
//
//          CxFlowArray{ CxFlowArgs{...} }
type CxFlowArrayInput interface {
	pulumi.Input

	ToCxFlowArrayOutput() CxFlowArrayOutput
	ToCxFlowArrayOutputWithContext(context.Context) CxFlowArrayOutput
}

type CxFlowArray []CxFlowInput

func (CxFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*CxFlow)(nil))
}

func (i CxFlowArray) ToCxFlowArrayOutput() CxFlowArrayOutput {
	return i.ToCxFlowArrayOutputWithContext(context.Background())
}

func (i CxFlowArray) ToCxFlowArrayOutputWithContext(ctx context.Context) CxFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowArrayOutput)
}

// CxFlowMapInput is an input type that accepts CxFlowMap and CxFlowMapOutput values.
// You can construct a concrete instance of `CxFlowMapInput` via:
//
//          CxFlowMap{ "key": CxFlowArgs{...} }
type CxFlowMapInput interface {
	pulumi.Input

	ToCxFlowMapOutput() CxFlowMapOutput
	ToCxFlowMapOutputWithContext(context.Context) CxFlowMapOutput
}

type CxFlowMap map[string]CxFlowInput

func (CxFlowMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*CxFlow)(nil))
}

func (i CxFlowMap) ToCxFlowMapOutput() CxFlowMapOutput {
	return i.ToCxFlowMapOutputWithContext(context.Background())
}

func (i CxFlowMap) ToCxFlowMapOutputWithContext(ctx context.Context) CxFlowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CxFlowMapOutput)
}

type CxFlowOutput struct {
	*pulumi.OutputState
}

func (CxFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CxFlow)(nil))
}

func (o CxFlowOutput) ToCxFlowOutput() CxFlowOutput {
	return o
}

func (o CxFlowOutput) ToCxFlowOutputWithContext(ctx context.Context) CxFlowOutput {
	return o
}

func (o CxFlowOutput) ToCxFlowPtrOutput() CxFlowPtrOutput {
	return o.ToCxFlowPtrOutputWithContext(context.Background())
}

func (o CxFlowOutput) ToCxFlowPtrOutputWithContext(ctx context.Context) CxFlowPtrOutput {
	return o.ApplyT(func(v CxFlow) *CxFlow {
		return &v
	}).(CxFlowPtrOutput)
}

type CxFlowPtrOutput struct {
	*pulumi.OutputState
}

func (CxFlowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CxFlow)(nil))
}

func (o CxFlowPtrOutput) ToCxFlowPtrOutput() CxFlowPtrOutput {
	return o
}

func (o CxFlowPtrOutput) ToCxFlowPtrOutputWithContext(ctx context.Context) CxFlowPtrOutput {
	return o
}

type CxFlowArrayOutput struct{ *pulumi.OutputState }

func (CxFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CxFlow)(nil))
}

func (o CxFlowArrayOutput) ToCxFlowArrayOutput() CxFlowArrayOutput {
	return o
}

func (o CxFlowArrayOutput) ToCxFlowArrayOutputWithContext(ctx context.Context) CxFlowArrayOutput {
	return o
}

func (o CxFlowArrayOutput) Index(i pulumi.IntInput) CxFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CxFlow {
		return vs[0].([]CxFlow)[vs[1].(int)]
	}).(CxFlowOutput)
}

type CxFlowMapOutput struct{ *pulumi.OutputState }

func (CxFlowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CxFlow)(nil))
}

func (o CxFlowMapOutput) ToCxFlowMapOutput() CxFlowMapOutput {
	return o
}

func (o CxFlowMapOutput) ToCxFlowMapOutputWithContext(ctx context.Context) CxFlowMapOutput {
	return o
}

func (o CxFlowMapOutput) MapIndex(k pulumi.StringInput) CxFlowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CxFlow {
		return vs[0].(map[string]CxFlow)[vs[1].(string)]
	}).(CxFlowOutput)
}

func init() {
	pulumi.RegisterOutputType(CxFlowOutput{})
	pulumi.RegisterOutputType(CxFlowPtrOutput{})
	pulumi.RegisterOutputType(CxFlowArrayOutput{})
	pulumi.RegisterOutputType(CxFlowMapOutput{})
}
