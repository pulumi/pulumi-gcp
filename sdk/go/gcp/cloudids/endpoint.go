// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudids

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Cloud IDS is an intrusion detection service that provides threat detection for intrusions, malware, spyware, and command-and-control attacks on your network.
//
// To get more information about Endpoint, see:
//
// * [API documentation](https://cloud.google.com/intrusion-detection-system/docs/configuring-ids)
//
// ## Example Usage
// ### Cloudids Endpoint
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudids"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewNetwork(ctx, "default", nil)
//			if err != nil {
//				return err
//			}
//			serviceRange, err := compute.NewGlobalAddress(ctx, "serviceRange", &compute.GlobalAddressArgs{
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      _default.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			privateServiceConnection, err := servicenetworking.NewConnection(ctx, "privateServiceConnection", &servicenetworking.ConnectionArgs{
//				Network: _default.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					serviceRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudids.NewEndpoint(ctx, "example-endpoint", &cloudids.EndpointArgs{
//				Location: pulumi.String("us-central1-f"),
//				Network:  _default.ID(),
//				Severity: pulumi.String("INFORMATIONAL"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				privateServiceConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Endpoint can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:cloudids/endpoint:Endpoint default projects/{{project}}/locations/{{location}}/endpoints/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:cloudids/endpoint:Endpoint default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:cloudids/endpoint:Endpoint default {{location}}/{{name}}
//
// ```
type Endpoint struct {
	pulumi.CustomResourceState

	// Creation timestamp in RFC 3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// An optional description of the endpoint.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// URL of the endpoint's network address to which traffic is to be sent by Packet Mirroring.
	EndpointForwardingRule pulumi.StringOutput `pulumi:"endpointForwardingRule"`
	// Internal IP address of the endpoint's network entry point.
	EndpointIp pulumi.StringOutput `pulumi:"endpointIp"`
	// The location for the endpoint.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The minimum alert severity level that is reported by the endpoint.
	// Possible values are `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, and `CRITICAL`.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Last update timestamp in RFC 3339 text format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	var resource Endpoint
	err := ctx.RegisterResource("gcp:cloudids/endpoint:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("gcp:cloudids/endpoint:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
	// Creation timestamp in RFC 3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// An optional description of the endpoint.
	Description *string `pulumi:"description"`
	// URL of the endpoint's network address to which traffic is to be sent by Packet Mirroring.
	EndpointForwardingRule *string `pulumi:"endpointForwardingRule"`
	// Internal IP address of the endpoint's network entry point.
	EndpointIp *string `pulumi:"endpointIp"`
	// The location for the endpoint.
	Location *string `pulumi:"location"`
	// Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
	Name *string `pulumi:"name"`
	// Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The minimum alert severity level that is reported by the endpoint.
	// Possible values are `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, and `CRITICAL`.
	Severity *string `pulumi:"severity"`
	// Last update timestamp in RFC 3339 text format.
	UpdateTime *string `pulumi:"updateTime"`
}

type EndpointState struct {
	// Creation timestamp in RFC 3339 text format.
	CreateTime pulumi.StringPtrInput
	// An optional description of the endpoint.
	Description pulumi.StringPtrInput
	// URL of the endpoint's network address to which traffic is to be sent by Packet Mirroring.
	EndpointForwardingRule pulumi.StringPtrInput
	// Internal IP address of the endpoint's network entry point.
	EndpointIp pulumi.StringPtrInput
	// The location for the endpoint.
	Location pulumi.StringPtrInput
	// Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
	Name pulumi.StringPtrInput
	// Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The minimum alert severity level that is reported by the endpoint.
	// Possible values are `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, and `CRITICAL`.
	Severity pulumi.StringPtrInput
	// Last update timestamp in RFC 3339 text format.
	UpdateTime pulumi.StringPtrInput
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// An optional description of the endpoint.
	Description *string `pulumi:"description"`
	// The location for the endpoint.
	Location string `pulumi:"location"`
	// Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
	Name *string `pulumi:"name"`
	// Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
	Network string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The minimum alert severity level that is reported by the endpoint.
	// Possible values are `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, and `CRITICAL`.
	Severity string `pulumi:"severity"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// An optional description of the endpoint.
	Description pulumi.StringPtrInput
	// The location for the endpoint.
	Location pulumi.StringInput
	// Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
	Name pulumi.StringPtrInput
	// Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
	Network pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The minimum alert severity level that is reported by the endpoint.
	// Possible values are `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, and `CRITICAL`.
	Severity pulumi.StringInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// EndpointMapInput is an input type that accepts EndpointMap and EndpointMapOutput values.
// You can construct a concrete instance of `EndpointMapInput` via:
//
//	EndpointMap{ "key": EndpointArgs{...} }
type EndpointMapInput interface {
	pulumi.Input

	ToEndpointMapOutput() EndpointMapOutput
	ToEndpointMapOutputWithContext(context.Context) EndpointMapOutput
}

type EndpointMap map[string]EndpointInput

func (EndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (i EndpointMap) ToEndpointMapOutput() EndpointMapOutput {
	return i.ToEndpointMapOutputWithContext(context.Background())
}

func (i EndpointMap) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMapOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// Creation timestamp in RFC 3339 text format.
func (o EndpointOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// An optional description of the endpoint.
func (o EndpointOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// URL of the endpoint's network address to which traffic is to be sent by Packet Mirroring.
func (o EndpointOutput) EndpointForwardingRule() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointForwardingRule }).(pulumi.StringOutput)
}

// Internal IP address of the endpoint's network entry point.
func (o EndpointOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointIp }).(pulumi.StringOutput)
}

// The location for the endpoint.
func (o EndpointOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
func (o EndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
func (o EndpointOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o EndpointOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The minimum alert severity level that is reported by the endpoint.
// Possible values are `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, and `CRITICAL`.
func (o EndpointOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Last update timestamp in RFC 3339 text format.
func (o EndpointOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].([]*Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

type EndpointMapOutput struct{ *pulumi.OutputState }

func (EndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (o EndpointMapOutput) ToEndpointMapOutput() EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) MapIndex(k pulumi.StringInput) EndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].(map[string]*Endpoint)[vs[1].(string)]
	}).(EndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointArrayInput)(nil)).Elem(), EndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMapInput)(nil)).Elem(), EndpointMap{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointMapOutput{})
}
