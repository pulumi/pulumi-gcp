// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package edgecontainer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A VPN connection
//
// To get more information about VpnConnection, see:
//
// * [API documentation](https://cloud.google.com/distributed-cloud/edge/latest/docs/reference/container/rest/v1/projects.locations.vpnConnections)
// * How-to Guides
//   - [Google Distributed Cloud Edge](https://cloud.google.com/distributed-cloud/edge/latest/docs)
//
// ## Example Usage
//
// ### Edgecontainer Vpn Connection
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/edgecontainer"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			cluster, err := edgecontainer.NewCluster(ctx, "cluster", &edgecontainer.ClusterArgs{
//				Name:     pulumi.String("default"),
//				Location: pulumi.String("us-central1"),
//				Authorization: &edgecontainer.ClusterAuthorizationArgs{
//					AdminUsers: &edgecontainer.ClusterAuthorizationAdminUsersArgs{
//						Username: pulumi.String("admin@hashicorptest.com"),
//					},
//				},
//				Networking: &edgecontainer.ClusterNetworkingArgs{
//					ClusterIpv4CidrBlocks: pulumi.StringArray{
//						pulumi.String("10.0.0.0/16"),
//					},
//					ServicesIpv4CidrBlocks: pulumi.StringArray{
//						pulumi.String("10.1.0.0/16"),
//					},
//				},
//				Fleet: &edgecontainer.ClusterFleetArgs{
//					Project: pulumi.Sprintf("projects/%v", project.Number),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			nodePool, err := edgecontainer.NewNodePool(ctx, "node_pool", &edgecontainer.NodePoolArgs{
//				Name:         pulumi.String("nodepool-1"),
//				Cluster:      cluster.Name,
//				Location:     pulumi.String("us-central1"),
//				NodeLocation: pulumi.String("us-central1-edge-example-edgesite"),
//				NodeCount:    pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			vpc, err := compute.NewNetwork(ctx, "vpc", &compute.NetworkArgs{
//				Name: pulumi.String("example-vpc"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edgecontainer.NewVpnConnection(ctx, "default", &edgecontainer.VpnConnectionArgs{
//				Name:     pulumi.String("vpn-connection-1"),
//				Location: pulumi.String("us-central1"),
//				Cluster: cluster.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("projects/%v/locations/us-east1/clusters/%v", project.Number, name), nil
//				}).(pulumi.StringOutput),
//				Vpc:                    vpc.Name,
//				EnableHighAvailability: pulumi.Bool(true),
//				Labels: pulumi.StringMap{
//					"my_key":    pulumi.String("my_val"),
//					"other_key": pulumi.String("other_val"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				nodePool,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpnConnection can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/vpnConnections/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, VpnConnection can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:edgecontainer/vpnConnection:VpnConnection default projects/{{project}}/locations/{{location}}/vpnConnections/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:edgecontainer/vpnConnection:VpnConnection default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:edgecontainer/vpnConnection:VpnConnection default {{location}}/{{name}}
// ```
type VpnConnection struct {
	pulumi.CustomResourceState

	// The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// The time when the VPN connection was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A nested object resource
	// Structure is documented below.
	Details VpnConnectionDetailArrayOutput `pulumi:"details"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
	EnableHighAvailability pulumi.BoolOutput `pulumi:"enableHighAvailability"`
	// Labels associated with this resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Google Cloud Platform location.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of VPN connection
	Name pulumi.StringOutput `pulumi:"name"`
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
	// This is empty if NAT is not used.
	NatGatewayIp pulumi.StringPtrOutput `pulumi:"natGatewayIp"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The VPN connection Cloud Router name.
	Router pulumi.StringPtrOutput `pulumi:"router"`
	// The time when the VPN connection was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The network ID of VPC to connect to.
	Vpc pulumi.StringPtrOutput `pulumi:"vpc"`
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	// Structure is documented below.
	VpcProject VpnConnectionVpcProjectPtrOutput `pulumi:"vpcProject"`
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnConnection
	err := ctx.RegisterResource("gcp:edgecontainer/vpnConnection:VpnConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionState, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	var resource VpnConnection
	err := ctx.ReadResource("gcp:edgecontainer/vpnConnection:VpnConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnection resources.
type vpnConnectionState struct {
	// The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster *string `pulumi:"cluster"`
	// The time when the VPN connection was created.
	CreateTime *string `pulumi:"createTime"`
	// A nested object resource
	// Structure is documented below.
	Details []VpnConnectionDetail `pulumi:"details"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
	EnableHighAvailability *bool `pulumi:"enableHighAvailability"`
	// Labels associated with this resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Google Cloud Platform location.
	Location *string `pulumi:"location"`
	// The resource name of VPN connection
	Name *string `pulumi:"name"`
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
	// This is empty if NAT is not used.
	NatGatewayIp *string `pulumi:"natGatewayIp"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The VPN connection Cloud Router name.
	Router *string `pulumi:"router"`
	// The time when the VPN connection was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// The network ID of VPC to connect to.
	Vpc *string `pulumi:"vpc"`
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	// Structure is documented below.
	VpcProject *VpnConnectionVpcProject `pulumi:"vpcProject"`
}

type VpnConnectionState struct {
	// The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster pulumi.StringPtrInput
	// The time when the VPN connection was created.
	CreateTime pulumi.StringPtrInput
	// A nested object resource
	// Structure is documented below.
	Details VpnConnectionDetailArrayInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
	EnableHighAvailability pulumi.BoolPtrInput
	// Labels associated with this resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Google Cloud Platform location.
	Location pulumi.StringPtrInput
	// The resource name of VPN connection
	Name pulumi.StringPtrInput
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
	// This is empty if NAT is not used.
	NatGatewayIp pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The VPN connection Cloud Router name.
	Router pulumi.StringPtrInput
	// The time when the VPN connection was last updated.
	UpdateTime pulumi.StringPtrInput
	// The network ID of VPC to connect to.
	Vpc pulumi.StringPtrInput
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	// Structure is documented below.
	VpcProject VpnConnectionVpcProjectPtrInput
}

func (VpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionState)(nil)).Elem()
}

type vpnConnectionArgs struct {
	// The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster string `pulumi:"cluster"`
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
	EnableHighAvailability *bool `pulumi:"enableHighAvailability"`
	// Labels associated with this resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Google Cloud Platform location.
	Location string `pulumi:"location"`
	// The resource name of VPN connection
	Name *string `pulumi:"name"`
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
	// This is empty if NAT is not used.
	NatGatewayIp *string `pulumi:"natGatewayIp"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The VPN connection Cloud Router name.
	Router *string `pulumi:"router"`
	// The network ID of VPC to connect to.
	Vpc *string `pulumi:"vpc"`
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	// Structure is documented below.
	VpcProject *VpnConnectionVpcProject `pulumi:"vpcProject"`
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	// The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster pulumi.StringInput
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
	EnableHighAvailability pulumi.BoolPtrInput
	// Labels associated with this resource.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Google Cloud Platform location.
	Location pulumi.StringInput
	// The resource name of VPN connection
	Name pulumi.StringPtrInput
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
	// This is empty if NAT is not used.
	NatGatewayIp pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The VPN connection Cloud Router name.
	Router pulumi.StringPtrInput
	// The network ID of VPC to connect to.
	Vpc pulumi.StringPtrInput
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	// Structure is documented below.
	VpcProject VpnConnectionVpcProjectPtrInput
}

func (VpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionArgs)(nil)).Elem()
}

type VpnConnectionInput interface {
	pulumi.Input

	ToVpnConnectionOutput() VpnConnectionOutput
	ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput
}

func (*VpnConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (i *VpnConnection) ToVpnConnectionOutput() VpnConnectionOutput {
	return i.ToVpnConnectionOutputWithContext(context.Background())
}

func (i *VpnConnection) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionOutput)
}

// VpnConnectionArrayInput is an input type that accepts VpnConnectionArray and VpnConnectionArrayOutput values.
// You can construct a concrete instance of `VpnConnectionArrayInput` via:
//
//	VpnConnectionArray{ VpnConnectionArgs{...} }
type VpnConnectionArrayInput interface {
	pulumi.Input

	ToVpnConnectionArrayOutput() VpnConnectionArrayOutput
	ToVpnConnectionArrayOutputWithContext(context.Context) VpnConnectionArrayOutput
}

type VpnConnectionArray []VpnConnectionInput

func (VpnConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return i.ToVpnConnectionArrayOutputWithContext(context.Background())
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionArrayOutput)
}

// VpnConnectionMapInput is an input type that accepts VpnConnectionMap and VpnConnectionMapOutput values.
// You can construct a concrete instance of `VpnConnectionMapInput` via:
//
//	VpnConnectionMap{ "key": VpnConnectionArgs{...} }
type VpnConnectionMapInput interface {
	pulumi.Input

	ToVpnConnectionMapOutput() VpnConnectionMapOutput
	ToVpnConnectionMapOutputWithContext(context.Context) VpnConnectionMapOutput
}

type VpnConnectionMap map[string]VpnConnectionInput

func (VpnConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionMap) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return i.ToVpnConnectionMapOutputWithContext(context.Background())
}

func (i VpnConnectionMap) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionMapOutput)
}

type VpnConnectionOutput struct{ *pulumi.OutputState }

func (VpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (o VpnConnectionOutput) ToVpnConnectionOutput() VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return o
}

// The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
func (o VpnConnectionOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// The time when the VPN connection was created.
func (o VpnConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A nested object resource
// Structure is documented below.
func (o VpnConnectionOutput) Details() VpnConnectionDetailArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionDetailArrayOutput { return v.Details }).(VpnConnectionDetailArrayOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o VpnConnectionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
func (o VpnConnectionOutput) EnableHighAvailability() pulumi.BoolOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolOutput { return v.EnableHighAvailability }).(pulumi.BoolOutput)
}

// Labels associated with this resource.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o VpnConnectionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Google Cloud Platform location.
func (o VpnConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of VPN connection
func (o VpnConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
// This is empty if NAT is not used.
func (o VpnConnectionOutput) NatGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.NatGatewayIp }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o VpnConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o VpnConnectionOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The VPN connection Cloud Router name.
func (o VpnConnectionOutput) Router() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.Router }).(pulumi.StringPtrOutput)
}

// The time when the VPN connection was last updated.
func (o VpnConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The network ID of VPC to connect to.
func (o VpnConnectionOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.Vpc }).(pulumi.StringPtrOutput)
}

// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
// Structure is documented below.
func (o VpnConnectionOutput) VpcProject() VpnConnectionVpcProjectPtrOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionVpcProjectPtrOutput { return v.VpcProject }).(VpnConnectionVpcProjectPtrOutput)
}

type VpnConnectionArrayOutput struct{ *pulumi.OutputState }

func (VpnConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) Index(i pulumi.IntInput) VpnConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].([]*VpnConnection)[vs[1].(int)]
	}).(VpnConnectionOutput)
}

type VpnConnectionMapOutput struct{ *pulumi.OutputState }

func (VpnConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) MapIndex(k pulumi.StringInput) VpnConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].(map[string]*VpnConnection)[vs[1].(string)]
	}).(VpnConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionInput)(nil)).Elem(), &VpnConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionArrayInput)(nil)).Elem(), VpnConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionMapInput)(nil)).Elem(), VpnConnectionMap{})
	pulumi.RegisterOutputType(VpnConnectionOutput{})
	pulumi.RegisterOutputType(VpnConnectionArrayOutput{})
	pulumi.RegisterOutputType(VpnConnectionMapOutput{})
}
