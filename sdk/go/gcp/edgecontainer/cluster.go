// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package edgecontainer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Cluster contains information about a Google Distributed Cloud Edge Kubernetes cluster.
//
// To get more information about Cluster, see:
//
// * [API documentation](https://cloud.google.com/distributed-cloud/edge/latest/docs/reference/container/rest/v1/projects.locations.clusters)
// * How-to Guides
//   - [Create and manage clusters](https://cloud.google.com/distributed-cloud/edge/latest/docs/clusters)
//
// ## Example Usage
//
// ### Edgecontainer Cluster
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/edgecontainer"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = edgecontainer.NewCluster(ctx, "default", &edgecontainer.ClusterArgs{
//				Name:     pulumi.String("basic-cluster"),
//				Location: pulumi.String("us-central1"),
//				Authorization: &edgecontainer.ClusterAuthorizationArgs{
//					AdminUsers: &edgecontainer.ClusterAuthorizationAdminUsersArgs{
//						Username: pulumi.String("admin@hashicorptest.com"),
//					},
//				},
//				Networking: &edgecontainer.ClusterNetworkingArgs{
//					ClusterIpv4CidrBlocks: pulumi.StringArray{
//						pulumi.String("10.0.0.0/16"),
//					},
//					ServicesIpv4CidrBlocks: pulumi.StringArray{
//						pulumi.String("10.1.0.0/16"),
//					},
//				},
//				Fleet: &edgecontainer.ClusterFleetArgs{
//					Project: pulumi.Sprintf("projects/%v", project.Number),
//				},
//				Labels: pulumi.StringMap{
//					"my_key":    pulumi.String("my_val"),
//					"other_key": pulumi.String("other_val"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Edgecontainer Cluster With Maintenance Window
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/edgecontainer"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = edgecontainer.NewCluster(ctx, "default", &edgecontainer.ClusterArgs{
//				Name:     pulumi.String("cluster-with-maintenance"),
//				Location: pulumi.String("us-central1"),
//				Authorization: &edgecontainer.ClusterAuthorizationArgs{
//					AdminUsers: &edgecontainer.ClusterAuthorizationAdminUsersArgs{
//						Username: pulumi.String("admin@hashicorptest.com"),
//					},
//				},
//				Networking: &edgecontainer.ClusterNetworkingArgs{
//					ClusterIpv4CidrBlocks: pulumi.StringArray{
//						pulumi.String("10.0.0.0/16"),
//					},
//					ServicesIpv4CidrBlocks: pulumi.StringArray{
//						pulumi.String("10.1.0.0/16"),
//					},
//				},
//				Fleet: &edgecontainer.ClusterFleetArgs{
//					Project: pulumi.Sprintf("projects/%v", project.Number),
//				},
//				MaintenancePolicy: &edgecontainer.ClusterMaintenancePolicyArgs{
//					Window: &edgecontainer.ClusterMaintenancePolicyWindowArgs{
//						RecurringWindow: &edgecontainer.ClusterMaintenancePolicyWindowRecurringWindowArgs{
//							Window: &edgecontainer.ClusterMaintenancePolicyWindowRecurringWindowWindowArgs{
//								StartTime: pulumi.String("2023-01-01T08:00:00Z"),
//								EndTime:   pulumi.String("2023-01-01T17:00:00Z"),
//							},
//							Recurrence: pulumi.String("FREQ=WEEKLY;BYDAY=SA"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Edgecontainer Local Control Plane Cluster
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/edgecontainer"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = edgecontainer.NewCluster(ctx, "default", &edgecontainer.ClusterArgs{
//				Name:     pulumi.String("local-control-plane-cluster"),
//				Location: pulumi.String("us-central1"),
//				Authorization: &edgecontainer.ClusterAuthorizationArgs{
//					AdminUsers: &edgecontainer.ClusterAuthorizationAdminUsersArgs{
//						Username: pulumi.String("admin@hashicorptest.com"),
//					},
//				},
//				Networking: &edgecontainer.ClusterNetworkingArgs{
//					ClusterIpv4CidrBlocks: pulumi.StringArray{
//						pulumi.String("10.0.0.0/16"),
//					},
//					ServicesIpv4CidrBlocks: pulumi.StringArray{
//						pulumi.String("10.1.0.0/16"),
//					},
//				},
//				Fleet: &edgecontainer.ClusterFleetArgs{
//					Project: pulumi.Sprintf("projects/%v", project.Number),
//				},
//				ExternalLoadBalancerIpv4AddressPools: pulumi.StringArray{
//					pulumi.String("10.100.0.0-10.100.0.10"),
//				},
//				ControlPlane: &edgecontainer.ClusterControlPlaneArgs{
//					Local: &edgecontainer.ClusterControlPlaneLocalArgs{
//						NodeLocation:           pulumi.String("us-central1-edge-example-edgesite"),
//						NodeCount:              pulumi.Int(1),
//						MachineFilter:          pulumi.String("machine-name"),
//						SharedDeploymentPolicy: pulumi.String("ALLOWED"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cluster can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/clusters/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, Cluster can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:edgecontainer/cluster:Cluster default projects/{{project}}/locations/{{location}}/clusters/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:edgecontainer/cluster:Cluster default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:edgecontainer/cluster:Cluster default {{location}}/{{name}}
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// RBAC policy that will be applied and managed by GEC.
	// Structure is documented below.
	Authorization ClusterAuthorizationOutput `pulumi:"authorization"`
	// The PEM-encoded public certificate of the cluster's CA.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClusterCaCertificate pulumi.StringOutput `pulumi:"clusterCaCertificate"`
	// The configuration of the cluster control plane.
	ControlPlane ClusterControlPlanePtrOutput `pulumi:"controlPlane"`
	// Remote control plane disk encryption options. This field is only used when enabling CMEK support.
	ControlPlaneEncryption ClusterControlPlaneEncryptionOutput `pulumi:"controlPlaneEncryption"`
	// The control plane release version.
	ControlPlaneVersion pulumi.StringOutput `pulumi:"controlPlaneVersion"`
	// (Output)
	// The time when the maintenance event request was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The default maximum number of pods per node used if a maximum value is not specified explicitly for a node pool in this
	// cluster. If unspecified, the Kubernetes default value will be used.
	DefaultMaxPodsPerNode pulumi.IntOutput `pulumi:"defaultMaxPodsPerNode"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The IP address of the Kubernetes API server.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Address pools for cluster data plane external load balancing.
	ExternalLoadBalancerIpv4AddressPools pulumi.StringArrayOutput `pulumi:"externalLoadBalancerIpv4AddressPools"`
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Fleet ClusterFleetOutput `pulumi:"fleet"`
	// User-defined labels for the edgecloud cluster. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// All the maintenance events scheduled for the cluster, including the ones
	// ongoing, planned for the future and done in the past (up to 90 days).
	// Structure is documented below.
	MaintenanceEvents ClusterMaintenanceEventArrayOutput `pulumi:"maintenanceEvents"`
	// Cluster-wide maintenance policy configuration.
	MaintenancePolicy ClusterMaintenancePolicyOutput `pulumi:"maintenancePolicy"`
	// The GDCE cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Networking ClusterNetworkingOutput `pulumi:"networking"`
	// The lowest release version among all worker nodes. This field can be empty
	// if the cluster does not have any worker nodes.
	NodeVersion pulumi.StringOutput `pulumi:"nodeVersion"`
	// The port number of the Kubernetes API server.
	Port    pulumi.IntOutput    `pulumi:"port"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The release channel a cluster is subscribed to. Possible values: ["RELEASE_CHANNEL_UNSPECIFIED", "NONE", "REGULAR"]
	ReleaseChannel pulumi.StringOutput `pulumi:"releaseChannel"`
	// Indicates the status of the cluster.
	Status pulumi.StringOutput `pulumi:"status"`
	// Config that customers are allowed to define for GDCE system add-ons.
	SystemAddonsConfig ClusterSystemAddonsConfigOutput `pulumi:"systemAddonsConfig"`
	// (Output)
	// The target version of the cluster.
	TargetVersion pulumi.StringOutput `pulumi:"targetVersion"`
	// (Output)
	// The time when the maintenance event message was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authorization == nil {
		return nil, errors.New("invalid value for required argument 'Authorization'")
	}
	if args.Fleet == nil {
		return nil, errors.New("invalid value for required argument 'Fleet'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Networking == nil {
		return nil, errors.New("invalid value for required argument 'Networking'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clusterCaCertificate",
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("gcp:edgecontainer/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("gcp:edgecontainer/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// RBAC policy that will be applied and managed by GEC.
	// Structure is documented below.
	Authorization *ClusterAuthorization `pulumi:"authorization"`
	// The PEM-encoded public certificate of the cluster's CA.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// The configuration of the cluster control plane.
	ControlPlane *ClusterControlPlane `pulumi:"controlPlane"`
	// Remote control plane disk encryption options. This field is only used when enabling CMEK support.
	ControlPlaneEncryption *ClusterControlPlaneEncryption `pulumi:"controlPlaneEncryption"`
	// The control plane release version.
	ControlPlaneVersion *string `pulumi:"controlPlaneVersion"`
	// (Output)
	// The time when the maintenance event request was created.
	CreateTime *string `pulumi:"createTime"`
	// The default maximum number of pods per node used if a maximum value is not specified explicitly for a node pool in this
	// cluster. If unspecified, the Kubernetes default value will be used.
	DefaultMaxPodsPerNode *int `pulumi:"defaultMaxPodsPerNode"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The IP address of the Kubernetes API server.
	Endpoint *string `pulumi:"endpoint"`
	// Address pools for cluster data plane external load balancing.
	ExternalLoadBalancerIpv4AddressPools []string `pulumi:"externalLoadBalancerIpv4AddressPools"`
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Fleet *ClusterFleet `pulumi:"fleet"`
	// User-defined labels for the edgecloud cluster. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// All the maintenance events scheduled for the cluster, including the ones
	// ongoing, planned for the future and done in the past (up to 90 days).
	// Structure is documented below.
	MaintenanceEvents []ClusterMaintenanceEvent `pulumi:"maintenanceEvents"`
	// Cluster-wide maintenance policy configuration.
	MaintenancePolicy *ClusterMaintenancePolicy `pulumi:"maintenancePolicy"`
	// The GDCE cluster name.
	Name *string `pulumi:"name"`
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Networking *ClusterNetworking `pulumi:"networking"`
	// The lowest release version among all worker nodes. This field can be empty
	// if the cluster does not have any worker nodes.
	NodeVersion *string `pulumi:"nodeVersion"`
	// The port number of the Kubernetes API server.
	Port    *int    `pulumi:"port"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The release channel a cluster is subscribed to. Possible values: ["RELEASE_CHANNEL_UNSPECIFIED", "NONE", "REGULAR"]
	ReleaseChannel *string `pulumi:"releaseChannel"`
	// Indicates the status of the cluster.
	Status *string `pulumi:"status"`
	// Config that customers are allowed to define for GDCE system add-ons.
	SystemAddonsConfig *ClusterSystemAddonsConfig `pulumi:"systemAddonsConfig"`
	// (Output)
	// The target version of the cluster.
	TargetVersion *string `pulumi:"targetVersion"`
	// (Output)
	// The time when the maintenance event message was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ClusterState struct {
	// RBAC policy that will be applied and managed by GEC.
	// Structure is documented below.
	Authorization ClusterAuthorizationPtrInput
	// The PEM-encoded public certificate of the cluster's CA.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClusterCaCertificate pulumi.StringPtrInput
	// The configuration of the cluster control plane.
	ControlPlane ClusterControlPlanePtrInput
	// Remote control plane disk encryption options. This field is only used when enabling CMEK support.
	ControlPlaneEncryption ClusterControlPlaneEncryptionPtrInput
	// The control plane release version.
	ControlPlaneVersion pulumi.StringPtrInput
	// (Output)
	// The time when the maintenance event request was created.
	CreateTime pulumi.StringPtrInput
	// The default maximum number of pods per node used if a maximum value is not specified explicitly for a node pool in this
	// cluster. If unspecified, the Kubernetes default value will be used.
	DefaultMaxPodsPerNode pulumi.IntPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The IP address of the Kubernetes API server.
	Endpoint pulumi.StringPtrInput
	// Address pools for cluster data plane external load balancing.
	ExternalLoadBalancerIpv4AddressPools pulumi.StringArrayInput
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Fleet ClusterFleetPtrInput
	// User-defined labels for the edgecloud cluster. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// All the maintenance events scheduled for the cluster, including the ones
	// ongoing, planned for the future and done in the past (up to 90 days).
	// Structure is documented below.
	MaintenanceEvents ClusterMaintenanceEventArrayInput
	// Cluster-wide maintenance policy configuration.
	MaintenancePolicy ClusterMaintenancePolicyPtrInput
	// The GDCE cluster name.
	Name pulumi.StringPtrInput
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Networking ClusterNetworkingPtrInput
	// The lowest release version among all worker nodes. This field can be empty
	// if the cluster does not have any worker nodes.
	NodeVersion pulumi.StringPtrInput
	// The port number of the Kubernetes API server.
	Port    pulumi.IntPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The release channel a cluster is subscribed to. Possible values: ["RELEASE_CHANNEL_UNSPECIFIED", "NONE", "REGULAR"]
	ReleaseChannel pulumi.StringPtrInput
	// Indicates the status of the cluster.
	Status pulumi.StringPtrInput
	// Config that customers are allowed to define for GDCE system add-ons.
	SystemAddonsConfig ClusterSystemAddonsConfigPtrInput
	// (Output)
	// The target version of the cluster.
	TargetVersion pulumi.StringPtrInput
	// (Output)
	// The time when the maintenance event message was updated.
	UpdateTime pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// RBAC policy that will be applied and managed by GEC.
	// Structure is documented below.
	Authorization ClusterAuthorization `pulumi:"authorization"`
	// The configuration of the cluster control plane.
	ControlPlane *ClusterControlPlane `pulumi:"controlPlane"`
	// Remote control plane disk encryption options. This field is only used when enabling CMEK support.
	ControlPlaneEncryption *ClusterControlPlaneEncryption `pulumi:"controlPlaneEncryption"`
	// The default maximum number of pods per node used if a maximum value is not specified explicitly for a node pool in this
	// cluster. If unspecified, the Kubernetes default value will be used.
	DefaultMaxPodsPerNode *int `pulumi:"defaultMaxPodsPerNode"`
	// Address pools for cluster data plane external load balancing.
	ExternalLoadBalancerIpv4AddressPools []string `pulumi:"externalLoadBalancerIpv4AddressPools"`
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Fleet ClusterFleet `pulumi:"fleet"`
	// User-defined labels for the edgecloud cluster. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// Cluster-wide maintenance policy configuration.
	MaintenancePolicy *ClusterMaintenancePolicy `pulumi:"maintenancePolicy"`
	// The GDCE cluster name.
	Name *string `pulumi:"name"`
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Networking ClusterNetworking `pulumi:"networking"`
	Project    *string           `pulumi:"project"`
	// The release channel a cluster is subscribed to. Possible values: ["RELEASE_CHANNEL_UNSPECIFIED", "NONE", "REGULAR"]
	ReleaseChannel *string `pulumi:"releaseChannel"`
	// Config that customers are allowed to define for GDCE system add-ons.
	SystemAddonsConfig *ClusterSystemAddonsConfig `pulumi:"systemAddonsConfig"`
	// (Output)
	// The target version of the cluster.
	TargetVersion *string `pulumi:"targetVersion"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// RBAC policy that will be applied and managed by GEC.
	// Structure is documented below.
	Authorization ClusterAuthorizationInput
	// The configuration of the cluster control plane.
	ControlPlane ClusterControlPlanePtrInput
	// Remote control plane disk encryption options. This field is only used when enabling CMEK support.
	ControlPlaneEncryption ClusterControlPlaneEncryptionPtrInput
	// The default maximum number of pods per node used if a maximum value is not specified explicitly for a node pool in this
	// cluster. If unspecified, the Kubernetes default value will be used.
	DefaultMaxPodsPerNode pulumi.IntPtrInput
	// Address pools for cluster data plane external load balancing.
	ExternalLoadBalancerIpv4AddressPools pulumi.StringArrayInput
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Fleet ClusterFleetInput
	// User-defined labels for the edgecloud cluster. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The location of the resource.
	Location pulumi.StringInput
	// Cluster-wide maintenance policy configuration.
	MaintenancePolicy ClusterMaintenancePolicyPtrInput
	// The GDCE cluster name.
	Name pulumi.StringPtrInput
	// Fleet related configuration.
	// Fleets are a Google Cloud concept for logically organizing clusters,
	// letting you use and manage multi-cluster capabilities and apply
	// consistent policies across your systems.
	// Structure is documented below.
	Networking ClusterNetworkingInput
	Project    pulumi.StringPtrInput
	// The release channel a cluster is subscribed to. Possible values: ["RELEASE_CHANNEL_UNSPECIFIED", "NONE", "REGULAR"]
	ReleaseChannel pulumi.StringPtrInput
	// Config that customers are allowed to define for GDCE system add-ons.
	SystemAddonsConfig ClusterSystemAddonsConfigPtrInput
	// (Output)
	// The target version of the cluster.
	TargetVersion pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// RBAC policy that will be applied and managed by GEC.
// Structure is documented below.
func (o ClusterOutput) Authorization() ClusterAuthorizationOutput {
	return o.ApplyT(func(v *Cluster) ClusterAuthorizationOutput { return v.Authorization }).(ClusterAuthorizationOutput)
}

// The PEM-encoded public certificate of the cluster's CA.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ClusterOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// The configuration of the cluster control plane.
func (o ClusterOutput) ControlPlane() ClusterControlPlanePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterControlPlanePtrOutput { return v.ControlPlane }).(ClusterControlPlanePtrOutput)
}

// Remote control plane disk encryption options. This field is only used when enabling CMEK support.
func (o ClusterOutput) ControlPlaneEncryption() ClusterControlPlaneEncryptionOutput {
	return o.ApplyT(func(v *Cluster) ClusterControlPlaneEncryptionOutput { return v.ControlPlaneEncryption }).(ClusterControlPlaneEncryptionOutput)
}

// The control plane release version.
func (o ClusterOutput) ControlPlaneVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ControlPlaneVersion }).(pulumi.StringOutput)
}

// (Output)
// The time when the maintenance event request was created.
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The default maximum number of pods per node used if a maximum value is not specified explicitly for a node pool in this
// cluster. If unspecified, the Kubernetes default value will be used.
func (o ClusterOutput) DefaultMaxPodsPerNode() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.DefaultMaxPodsPerNode }).(pulumi.IntOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ClusterOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The IP address of the Kubernetes API server.
func (o ClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Address pools for cluster data plane external load balancing.
func (o ClusterOutput) ExternalLoadBalancerIpv4AddressPools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.ExternalLoadBalancerIpv4AddressPools }).(pulumi.StringArrayOutput)
}

// Fleet related configuration.
// Fleets are a Google Cloud concept for logically organizing clusters,
// letting you use and manage multi-cluster capabilities and apply
// consistent policies across your systems.
// Structure is documented below.
func (o ClusterOutput) Fleet() ClusterFleetOutput {
	return o.ApplyT(func(v *Cluster) ClusterFleetOutput { return v.Fleet }).(ClusterFleetOutput)
}

// User-defined labels for the edgecloud cluster. **Note**: This field is non-authoritative, and will only manage the
// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
// resource.
func (o ClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the resource.
func (o ClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// All the maintenance events scheduled for the cluster, including the ones
// ongoing, planned for the future and done in the past (up to 90 days).
// Structure is documented below.
func (o ClusterOutput) MaintenanceEvents() ClusterMaintenanceEventArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterMaintenanceEventArrayOutput { return v.MaintenanceEvents }).(ClusterMaintenanceEventArrayOutput)
}

// Cluster-wide maintenance policy configuration.
func (o ClusterOutput) MaintenancePolicy() ClusterMaintenancePolicyOutput {
	return o.ApplyT(func(v *Cluster) ClusterMaintenancePolicyOutput { return v.MaintenancePolicy }).(ClusterMaintenancePolicyOutput)
}

// The GDCE cluster name.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Fleet related configuration.
// Fleets are a Google Cloud concept for logically organizing clusters,
// letting you use and manage multi-cluster capabilities and apply
// consistent policies across your systems.
// Structure is documented below.
func (o ClusterOutput) Networking() ClusterNetworkingOutput {
	return o.ApplyT(func(v *Cluster) ClusterNetworkingOutput { return v.Networking }).(ClusterNetworkingOutput)
}

// The lowest release version among all worker nodes. This field can be empty
// if the cluster does not have any worker nodes.
func (o ClusterOutput) NodeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NodeVersion }).(pulumi.StringOutput)
}

// The port number of the Kubernetes API server.
func (o ClusterOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o ClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ClusterOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The release channel a cluster is subscribed to. Possible values: ["RELEASE_CHANNEL_UNSPECIFIED", "NONE", "REGULAR"]
func (o ClusterOutput) ReleaseChannel() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ReleaseChannel }).(pulumi.StringOutput)
}

// Indicates the status of the cluster.
func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Config that customers are allowed to define for GDCE system add-ons.
func (o ClusterOutput) SystemAddonsConfig() ClusterSystemAddonsConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterSystemAddonsConfigOutput { return v.SystemAddonsConfig }).(ClusterSystemAddonsConfigOutput)
}

// (Output)
// The target version of the cluster.
func (o ClusterOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.TargetVersion }).(pulumi.StringOutput)
}

// (Output)
// The time when the maintenance event message was updated.
func (o ClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
