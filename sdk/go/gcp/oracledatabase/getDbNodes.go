// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oracledatabase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List all DbNodes of a Cloud VmCluster.
//
// For more information see the
// [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters.dbNodes).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/oracledatabase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oracledatabase.GetDbNodes(ctx, &oracledatabase.GetDbNodesArgs{
//				Location:       "us-east4",
//				CloudVmCluster: "vmcluster-id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Attributes reference
//
// The following attributes are exported:
//
// * `dbNodes` - List of dbNodes. Structure is documented below.
//
// <a name="nestedDbnodes"></a> The `dbNodes` block supports:
//
// * `name` - The name of the database node resource in the following format: projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}/dbNodes/{db_node}
//
// * `properties` - Various properties of the database node. Structure is documented below.
//
// <a name="nestedProperties"></a> The `properties` block supports:
//
// * `ocid`- OCID of database node.
//
// * `ocpuCount` - OCPU count per database node.
//
// * `memorySizeGb` - The allocated memory in GBs on the database node.
//
// * `dbNodeStorageSizeGb` - The allocated local node storage in GBs on the database node.
//
// * `dbServerOcid` - The OCID of the Database server associated with the database node.
//
// * `hostname` - The host name for the database node.
//
// * `state` - State of the database node.
// <a name="nestedStates"></a>Possible values for `state` are:<br>
// `PROVISIONING` - Indicates that the resource is being provisioned.<br>
// `AVAILABLE` - Indicates that the resource is available.<br>
// `UPDATING` - Indicates that the resource is being updated.<br>
// `STOPPING` - Indicates that the resource is being stopped.<br>
// `STOPPED` - Indicates that the resource is stopped.<br>
// `STARTING` - Indicates that the resource is being started.<br>
// `TERMINATING` - Indicates that the resource is being terminated.<br>
// `TERMINATED` - Indicates that the resource is terminated.<br>
// `FAILED` - Indicates that the resource has failed.<br>
//
// * `totalCpuCoreCount` - The total number of CPU cores reserved on the database node.
func GetDbNodes(ctx *pulumi.Context, args *GetDbNodesArgs, opts ...pulumi.InvokeOption) (*GetDbNodesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDbNodesResult
	err := ctx.Invoke("gcp:oracledatabase/getDbNodes:getDbNodes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbNodes.
type GetDbNodesArgs struct {
	// The ID of the VM Cluster.
	CloudVmCluster string `pulumi:"cloudVmCluster"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getDbNodes.
type GetDbNodesResult struct {
	CloudVmCluster string             `pulumi:"cloudVmCluster"`
	DbNodes        []GetDbNodesDbNode `pulumi:"dbNodes"`
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

func GetDbNodesOutput(ctx *pulumi.Context, args GetDbNodesOutputArgs, opts ...pulumi.InvokeOption) GetDbNodesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDbNodesResultOutput, error) {
			args := v.(GetDbNodesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:oracledatabase/getDbNodes:getDbNodes", args, GetDbNodesResultOutput{}, options).(GetDbNodesResultOutput), nil
		}).(GetDbNodesResultOutput)
}

// A collection of arguments for invoking getDbNodes.
type GetDbNodesOutputArgs struct {
	// The ID of the VM Cluster.
	CloudVmCluster pulumi.StringInput `pulumi:"cloudVmCluster"`
	// The location of the resource.
	Location pulumi.StringInput `pulumi:"location"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetDbNodesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbNodesArgs)(nil)).Elem()
}

// A collection of values returned by getDbNodes.
type GetDbNodesResultOutput struct{ *pulumi.OutputState }

func (GetDbNodesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbNodesResult)(nil)).Elem()
}

func (o GetDbNodesResultOutput) ToGetDbNodesResultOutput() GetDbNodesResultOutput {
	return o
}

func (o GetDbNodesResultOutput) ToGetDbNodesResultOutputWithContext(ctx context.Context) GetDbNodesResultOutput {
	return o
}

func (o GetDbNodesResultOutput) CloudVmCluster() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbNodesResult) string { return v.CloudVmCluster }).(pulumi.StringOutput)
}

func (o GetDbNodesResultOutput) DbNodes() GetDbNodesDbNodeArrayOutput {
	return o.ApplyT(func(v GetDbNodesResult) []GetDbNodesDbNode { return v.DbNodes }).(GetDbNodesDbNodeArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDbNodesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbNodesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDbNodesResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbNodesResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetDbNodesResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDbNodesResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDbNodesResultOutput{})
}
