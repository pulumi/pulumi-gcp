// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oracledatabase

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List all CloudVmClusters.
//
// For more information see the
// [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/oracledatabase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oracledatabase.GetCloudVmClusters(ctx, &oracledatabase.GetCloudVmClustersArgs{
//				Location: "us-east4",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCloudVmClusters(ctx *pulumi.Context, args *GetCloudVmClustersArgs, opts ...pulumi.InvokeOption) (*GetCloudVmClustersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &GetCloudVmClustersResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &GetCloudVmClustersResult{}, errors.New("DependsOn is not supported for direct form invoke GetCloudVmClusters, use GetCloudVmClustersOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &GetCloudVmClustersResult{}, errors.New("DependsOnInputs is not supported for direct form invoke GetCloudVmClusters, use GetCloudVmClustersOutput instead")
	}
	var rv GetCloudVmClustersResult
	err := ctx.Invoke("gcp:oracledatabase/getCloudVmClusters:getCloudVmClusters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudVmClusters.
type GetCloudVmClustersArgs struct {
	// The location of the resource.
	//
	// ***
	Location string `pulumi:"location"`
	// The project to which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getCloudVmClusters.
type GetCloudVmClustersResult struct {
	CloudVmClusters []GetCloudVmClustersCloudVmCluster `pulumi:"cloudVmClusters"`
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

func GetCloudVmClustersOutput(ctx *pulumi.Context, args GetCloudVmClustersOutputArgs, opts ...pulumi.InvokeOption) GetCloudVmClustersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCloudVmClustersResultOutput, error) {
			args := v.(GetCloudVmClustersArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetCloudVmClustersResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:oracledatabase/getCloudVmClusters:getCloudVmClusters", args, &rv, "", opts...)
			if err != nil {
				return GetCloudVmClustersResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetCloudVmClustersResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(GetCloudVmClustersResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetCloudVmClustersResultOutput), nil
			}
			return output, nil
		}).(GetCloudVmClustersResultOutput)
}

// A collection of arguments for invoking getCloudVmClusters.
type GetCloudVmClustersOutputArgs struct {
	// The location of the resource.
	//
	// ***
	Location pulumi.StringInput `pulumi:"location"`
	// The project to which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetCloudVmClustersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudVmClustersArgs)(nil)).Elem()
}

// A collection of values returned by getCloudVmClusters.
type GetCloudVmClustersResultOutput struct{ *pulumi.OutputState }

func (GetCloudVmClustersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudVmClustersResult)(nil)).Elem()
}

func (o GetCloudVmClustersResultOutput) ToGetCloudVmClustersResultOutput() GetCloudVmClustersResultOutput {
	return o
}

func (o GetCloudVmClustersResultOutput) ToGetCloudVmClustersResultOutputWithContext(ctx context.Context) GetCloudVmClustersResultOutput {
	return o
}

func (o GetCloudVmClustersResultOutput) CloudVmClusters() GetCloudVmClustersCloudVmClusterArrayOutput {
	return o.ApplyT(func(v GetCloudVmClustersResult) []GetCloudVmClustersCloudVmCluster { return v.CloudVmClusters }).(GetCloudVmClustersCloudVmClusterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCloudVmClustersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudVmClustersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCloudVmClustersResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudVmClustersResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetCloudVmClustersResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCloudVmClustersResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCloudVmClustersResultOutput{})
}
