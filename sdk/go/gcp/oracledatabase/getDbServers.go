// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oracledatabase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List all DbServers of a Cloud Exdata Infrastructure.
//
// For more information see the
// [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures.dbServers).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/oracledatabase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oracledatabase.GetDbServers(ctx, &oracledatabase.GetDbServersArgs{
//				Location:                   "us-east4",
//				CloudExadataInfrastructure: "exadata-id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Attributes reference
//
// The following attributes are exported:
//
// * `dbServers` - List of dbServers. Structure is documented below.
//
// <a name="nestedDbservers"></a> The `dbServers` block supports:
//
// * `displayName` - User friendly name for the resource.
//
// * `properties` - Various properties of the databse server. Structure is documented below.
//
// <a name="nestedProperties"></a> The `properties` block supports:
//
// * `ocid` - The OCID of database server.
//
// * `ocpuCount` - The OCPU count per database.
//
// * `maxOcpuCount` - The total number of CPU cores available.
//
// * `memorySizeGb` - The allocated memory in gigabytes on the database server.
//
// * `maxMemorySizeGb` - The total memory available in gigabytes.
//
// * `dbNodeStorageSizeGb` - The local storage per VM.
//
// * `maxDbNodeStorageSizeGb` - The total local node storage available in GBs.
//
// * `vmCount` - The VM count per database.
//
// * `state` - The current state of the database server.
// <a name="nestedStates"></a>Allowed values for `state` are:<br>
// `CREATING` - Indicates that the resource is being created.<br>
// `AVAILABLE` - Indicates that the resource is available.<br>
// `UNAVAILABLE` - Indicates that the resource is unavailable.<br>
// `DELETING` - Indicates that the resource is being deleted.<br>
// `DELETED` - Indicates that the resource has been deleted.<br>
//
// * `dbNodeIds` - The OCID of database nodes associated with the database server.
func GetDbServers(ctx *pulumi.Context, args *GetDbServersArgs, opts ...pulumi.InvokeOption) (*GetDbServersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDbServersResult
	err := ctx.Invoke("gcp:oracledatabase/getDbServers:getDbServers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbServers.
type GetDbServersArgs struct {
	// The Exadata Infrastructure id.
	CloudExadataInfrastructure string `pulumi:"cloudExadataInfrastructure"`
	// The location of resource.
	Location string `pulumi:"location"`
	// The project to which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getDbServers.
type GetDbServersResult struct {
	CloudExadataInfrastructure string                 `pulumi:"cloudExadataInfrastructure"`
	DbServers                  []GetDbServersDbServer `pulumi:"dbServers"`
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

func GetDbServersOutput(ctx *pulumi.Context, args GetDbServersOutputArgs, opts ...pulumi.InvokeOption) GetDbServersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDbServersResultOutput, error) {
			args := v.(GetDbServersArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetDbServersResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:oracledatabase/getDbServers:getDbServers", args, &rv, "", opts...)
			if err != nil {
				return GetDbServersResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetDbServersResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(GetDbServersResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetDbServersResultOutput), nil
			}
			return output, nil
		}).(GetDbServersResultOutput)
}

// A collection of arguments for invoking getDbServers.
type GetDbServersOutputArgs struct {
	// The Exadata Infrastructure id.
	CloudExadataInfrastructure pulumi.StringInput `pulumi:"cloudExadataInfrastructure"`
	// The location of resource.
	Location pulumi.StringInput `pulumi:"location"`
	// The project to which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetDbServersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbServersArgs)(nil)).Elem()
}

// A collection of values returned by getDbServers.
type GetDbServersResultOutput struct{ *pulumi.OutputState }

func (GetDbServersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbServersResult)(nil)).Elem()
}

func (o GetDbServersResultOutput) ToGetDbServersResultOutput() GetDbServersResultOutput {
	return o
}

func (o GetDbServersResultOutput) ToGetDbServersResultOutputWithContext(ctx context.Context) GetDbServersResultOutput {
	return o
}

func (o GetDbServersResultOutput) CloudExadataInfrastructure() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbServersResult) string { return v.CloudExadataInfrastructure }).(pulumi.StringOutput)
}

func (o GetDbServersResultOutput) DbServers() GetDbServersDbServerArrayOutput {
	return o.ApplyT(func(v GetDbServersResult) []GetDbServersDbServer { return v.DbServers }).(GetDbServersDbServerArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDbServersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbServersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDbServersResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbServersResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetDbServersResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDbServersResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDbServersResultOutput{})
}
