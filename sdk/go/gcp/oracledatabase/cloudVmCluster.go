// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oracledatabase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A CloudVmCluster resource.
//
// To get more information about CloudVmCluster, see:
//
// * [API documentation](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters)
// * How-to Guides
//   - [Create VM clusters](https://cloud.google.com/oracle/database/docs/create-clusters)
//
// ## Example Usage
//
// ### Oracledatabase Cloud Vmcluster Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/oracledatabase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cloudExadataInfrastructures, err := oracledatabase.NewCloudExadataInfrastructure(ctx, "cloudExadataInfrastructures", &oracledatabase.CloudExadataInfrastructureArgs{
//				CloudExadataInfrastructureId: pulumi.String("my-exadata"),
//				DisplayName:                  pulumi.String("my-exadata displayname"),
//				Location:                     pulumi.String("us-east4"),
//				Project:                      pulumi.String("my-project"),
//				Properties: &oracledatabase.CloudExadataInfrastructurePropertiesArgs{
//					Shape:        pulumi.String("Exadata.X9M"),
//					ComputeCount: pulumi.Int(2),
//					StorageCount: pulumi.Int(3),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name:    "new",
//				Project: pulumi.StringRef("my-project"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = oracledatabase.NewCloudVmCluster(ctx, "my_vmcluster", &oracledatabase.CloudVmClusterArgs{
//				CloudVmClusterId:      pulumi.String("my-instance"),
//				DisplayName:           pulumi.String("my-instance displayname"),
//				Location:              pulumi.String("us-east4"),
//				Project:               pulumi.String("my-project"),
//				ExadataInfrastructure: cloudExadataInfrastructures.ID(),
//				Network:               pulumi.String(_default.Id),
//				Cidr:                  pulumi.String("10.5.0.0/24"),
//				BackupSubnetCidr:      pulumi.String("10.6.0.0/24"),
//				Properties: &oracledatabase.CloudVmClusterPropertiesArgs{
//					LicenseType: pulumi.String("LICENSE_INCLUDED"),
//					SshPublicKeys: pulumi.StringArray{
//						pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCz1X2744t+6vRLmE5u6nHi6/QWh8bQDgHmd+OIxRQIGA/IWUtCs2FnaCNZcqvZkaeyjk5v0lTA/n+9jvO42Ipib53athrfVG8gRt8fzPL66C6ZqHq+6zZophhrCdfJh/0G4x9xJh5gdMprlaCR1P8yAaVvhBQSKGc4SiIkyMNBcHJ5YTtMQMTfxaB4G1sHZ6SDAY9a6Cq/zNjDwfPapWLsiP4mRhE5SSjJX6l6EYbkm0JeLQg+AbJiNEPvrvDp1wtTxzlPJtIivthmLMThFxK7+DkrYFuLvN5AHUdo9KTDLvHtDCvV70r8v0gafsrKkM/OE9Jtzoo0e1N/5K/ZdyFRbAkFT4QSF3nwpbmBWLf2Evg//YyEuxnz4CwPqFST2mucnrCCGCVWp1vnHZ0y30nM35njLOmWdRDFy5l27pKUTwLp02y3UYiiZyP7d3/u5pKiN4vC27VuvzprSdJxWoAvluOiDeRh+/oeQDowxoT/Oop8DzB9uJmjktXw8jyMW2+Rpg+ENQqeNgF1OGlEzypaWiRskEFlkpLb4v/s3ZDYkL1oW0Nv/J8LTjTOTEaYt2Udjoe9x2xWiGnQixhdChWuG+MaoWffzUgx1tsVj/DBXijR5DjkPkrA1GA98zd3q8GKEaAdcDenJjHhNYSd4+rE9pIsnYn7fo5X/tFfcQH1XQ== nobody@google.com"),
//					},
//					CpuCoreCount:   pulumi.Int(4),
//					GiVersion:      pulumi.String("19.0.0.0"),
//					HostnamePrefix: pulumi.String("hostname1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Oracledatabase Cloud Vmcluster Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/oracledatabase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cloudExadataInfrastructures, err := oracledatabase.NewCloudExadataInfrastructure(ctx, "cloudExadataInfrastructures", &oracledatabase.CloudExadataInfrastructureArgs{
//				CloudExadataInfrastructureId: pulumi.String("my-exadata"),
//				DisplayName:                  pulumi.String("my-exadata displayname"),
//				Location:                     pulumi.String("us-east4"),
//				Project:                      pulumi.String("my-project"),
//				Properties: &oracledatabase.CloudExadataInfrastructurePropertiesArgs{
//					Shape:        pulumi.String("Exadata.X9M"),
//					ComputeCount: pulumi.Int(2),
//					StorageCount: pulumi.Int(3),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name:    "new",
//				Project: pulumi.StringRef("my-project"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mydbserver := oracledatabase.GetDbServersOutput(ctx, oracledatabase.GetDbServersOutputArgs{
//				Location:                   pulumi.String("us-east4"),
//				Project:                    pulumi.String("my-project"),
//				CloudExadataInfrastructure: cloudExadataInfrastructures.CloudExadataInfrastructureId,
//			}, nil)
//			_, err = oracledatabase.NewCloudVmCluster(ctx, "my_vmcluster", &oracledatabase.CloudVmClusterArgs{
//				CloudVmClusterId:      pulumi.String("my-instance"),
//				DisplayName:           pulumi.String("my-instance displayname"),
//				Location:              pulumi.String("us-east4"),
//				Project:               pulumi.String("my-project"),
//				ExadataInfrastructure: cloudExadataInfrastructures.ID(),
//				Network:               pulumi.String(_default.Id),
//				Cidr:                  pulumi.String("10.5.0.0/24"),
//				BackupSubnetCidr:      pulumi.String("10.6.0.0/24"),
//				Labels: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//				Properties: &oracledatabase.CloudVmClusterPropertiesArgs{
//					LicenseType: pulumi.String("LICENSE_INCLUDED"),
//					SshPublicKeys: pulumi.StringArray{
//						pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCz1X2744t+6vRLmE5u6nHi6/QWh8bQDgHmd+OIxRQIGA/IWUtCs2FnaCNZcqvZkaeyjk5v0lTA/n+9jvO42Ipib53athrfVG8gRt8fzPL66C6ZqHq+6zZophhrCdfJh/0G4x9xJh5gdMprlaCR1P8yAaVvhBQSKGc4SiIkyMNBcHJ5YTtMQMTfxaB4G1sHZ6SDAY9a6Cq/zNjDwfPapWLsiP4mRhE5SSjJX6l6EYbkm0JeLQg+AbJiNEPvrvDp1wtTxzlPJtIivthmLMThFxK7+DkrYFuLvN5AHUdo9KTDLvHtDCvV70r8v0gafsrKkM/OE9Jtzoo0e1N/5K/ZdyFRbAkFT4QSF3nwpbmBWLf2Evg//YyEuxnz4CwPqFST2mucnrCCGCVWp1vnHZ0y30nM35njLOmWdRDFy5l27pKUTwLp02y3UYiiZyP7d3/u5pKiN4vC27VuvzprSdJxWoAvluOiDeRh+/oeQDowxoT/Oop8DzB9uJmjktXw8jyMW2+Rpg+ENQqeNgF1OGlEzypaWiRskEFlkpLb4v/s3ZDYkL1oW0Nv/J8LTjTOTEaYt2Udjoe9x2xWiGnQixhdChWuG+MaoWffzUgx1tsVj/DBXijR5DjkPkrA1GA98zd3q8GKEaAdcDenJjHhNYSd4+rE9pIsnYn7fo5X/tFfcQH1XQ== nobody@google.com"),
//					},
//					CpuCoreCount: pulumi.Int(4),
//					GiVersion:    pulumi.String("19.0.0.0"),
//					TimeZone: &oracledatabase.CloudVmClusterPropertiesTimeZoneArgs{
//						Id: pulumi.String("UTC"),
//					},
//					NodeCount:           pulumi.Int(2),
//					OcpuCount:           pulumi.Float64(4),
//					DataStorageSizeTb:   pulumi.Float64(2),
//					DbNodeStorageSizeGb: pulumi.Int(120),
//					DbServerOcids: pulumi.StringArray{
//						mydbserver.ApplyT(func(mydbserver oracledatabase.GetDbServersResult) (*string, error) {
//							return &mydbserver.DbServers[0].Properties[0].Ocid, nil
//						}).(pulumi.StringPtrOutput),
//						mydbserver.ApplyT(func(mydbserver oracledatabase.GetDbServersResult) (*string, error) {
//							return &mydbserver.DbServers[1].Properties[0].Ocid, nil
//						}).(pulumi.StringPtrOutput),
//					},
//					DiskRedundancy:         pulumi.String("HIGH"),
//					SparseDiskgroupEnabled: pulumi.Bool(false),
//					LocalBackupEnabled:     pulumi.Bool(false),
//					ClusterName:            pulumi.String("pq-ppat4"),
//					HostnamePrefix:         pulumi.String("hostname1"),
//					DiagnosticsDataCollectionOptions: &oracledatabase.CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs{
//						DiagnosticsEventsEnabled: pulumi.Bool(true),
//						HealthMonitoringEnabled:  pulumi.Bool(true),
//						IncidentLogsEnabled:      pulumi.Bool(true),
//					},
//					MemorySizeGb: pulumi.Int(60),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CloudVmCluster can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/cloudVmClusters/{{cloud_vm_cluster_id}}`
//
// * `{{project}}/{{location}}/{{cloud_vm_cluster_id}}`
//
// * `{{location}}/{{cloud_vm_cluster_id}}`
//
// When using the `pulumi import` command, CloudVmCluster can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:oracledatabase/cloudVmCluster:CloudVmCluster default projects/{{project}}/locations/{{location}}/cloudVmClusters/{{cloud_vm_cluster_id}}
// ```
//
// ```sh
// $ pulumi import gcp:oracledatabase/cloudVmCluster:CloudVmCluster default {{project}}/{{location}}/{{cloud_vm_cluster_id}}
// ```
//
// ```sh
// $ pulumi import gcp:oracledatabase/cloudVmCluster:CloudVmCluster default {{location}}/{{cloud_vm_cluster_id}}
// ```
type CloudVmCluster struct {
	pulumi.CustomResourceState

	// CIDR range of the backup subnet.
	BackupSubnetCidr pulumi.StringOutput `pulumi:"backupSubnetCidr"`
	// Network settings. CIDR to use for cluster IP allocation.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// The ID of the VM Cluster to create. This value is restricted
	// to (^a-z?$) and must be a maximum of 63
	// characters in length. The value must start with a letter and end with
	// a letter or a number.
	//
	// ***
	CloudVmClusterId pulumi.StringOutput `pulumi:"cloudVmClusterId"`
	// The date and time that the VM cluster was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User friendly name for this resource.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The name of the Exadata Infrastructure resource on which VM cluster
	// resource is created, in the following format:
	// projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
	ExadataInfrastructure pulumi.StringOutput `pulumi:"exadataInfrastructure"`
	// GCP location where Oracle Exadata is hosted. It is same as GCP Oracle zone
	// of Exadata infrastructure.
	GcpOracleZone pulumi.StringOutput `pulumi:"gcpOracleZone"`
	// Labels or tags associated with the VM Cluster.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/DbNode`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The name of the VM Cluster resource with the format:
	// projects/{project}/locations/{region}/cloudVmClusters/{cloud_vm_cluster}
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the VPC network.
	// Format: projects/{project}/global/networks/{network}
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Various properties and settings associated with Exadata VM cluster.
	// Structure is documented below.
	Properties CloudVmClusterPropertiesPtrOutput `pulumi:"properties"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
}

// NewCloudVmCluster registers a new resource with the given unique name, arguments, and options.
func NewCloudVmCluster(ctx *pulumi.Context,
	name string, args *CloudVmClusterArgs, opts ...pulumi.ResourceOption) (*CloudVmCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupSubnetCidr == nil {
		return nil, errors.New("invalid value for required argument 'BackupSubnetCidr'")
	}
	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.CloudVmClusterId == nil {
		return nil, errors.New("invalid value for required argument 'CloudVmClusterId'")
	}
	if args.ExadataInfrastructure == nil {
		return nil, errors.New("invalid value for required argument 'ExadataInfrastructure'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudVmCluster
	err := ctx.RegisterResource("gcp:oracledatabase/cloudVmCluster:CloudVmCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudVmCluster gets an existing CloudVmCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudVmCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudVmClusterState, opts ...pulumi.ResourceOption) (*CloudVmCluster, error) {
	var resource CloudVmCluster
	err := ctx.ReadResource("gcp:oracledatabase/cloudVmCluster:CloudVmCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudVmCluster resources.
type cloudVmClusterState struct {
	// CIDR range of the backup subnet.
	BackupSubnetCidr *string `pulumi:"backupSubnetCidr"`
	// Network settings. CIDR to use for cluster IP allocation.
	Cidr *string `pulumi:"cidr"`
	// The ID of the VM Cluster to create. This value is restricted
	// to (^a-z?$) and must be a maximum of 63
	// characters in length. The value must start with a letter and end with
	// a letter or a number.
	//
	// ***
	CloudVmClusterId *string `pulumi:"cloudVmClusterId"`
	// The date and time that the VM cluster was created.
	CreateTime *string `pulumi:"createTime"`
	// User friendly name for this resource.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The name of the Exadata Infrastructure resource on which VM cluster
	// resource is created, in the following format:
	// projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
	ExadataInfrastructure *string `pulumi:"exadataInfrastructure"`
	// GCP location where Oracle Exadata is hosted. It is same as GCP Oracle zone
	// of Exadata infrastructure.
	GcpOracleZone *string `pulumi:"gcpOracleZone"`
	// Labels or tags associated with the VM Cluster.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/DbNode`.
	Location *string `pulumi:"location"`
	// Identifier. The name of the VM Cluster resource with the format:
	// projects/{project}/locations/{region}/cloudVmClusters/{cloud_vm_cluster}
	Name *string `pulumi:"name"`
	// The name of the VPC network.
	// Format: projects/{project}/global/networks/{network}
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Various properties and settings associated with Exadata VM cluster.
	// Structure is documented below.
	Properties *CloudVmClusterProperties `pulumi:"properties"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
}

type CloudVmClusterState struct {
	// CIDR range of the backup subnet.
	BackupSubnetCidr pulumi.StringPtrInput
	// Network settings. CIDR to use for cluster IP allocation.
	Cidr pulumi.StringPtrInput
	// The ID of the VM Cluster to create. This value is restricted
	// to (^a-z?$) and must be a maximum of 63
	// characters in length. The value must start with a letter and end with
	// a letter or a number.
	//
	// ***
	CloudVmClusterId pulumi.StringPtrInput
	// The date and time that the VM cluster was created.
	CreateTime pulumi.StringPtrInput
	// User friendly name for this resource.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The name of the Exadata Infrastructure resource on which VM cluster
	// resource is created, in the following format:
	// projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
	ExadataInfrastructure pulumi.StringPtrInput
	// GCP location where Oracle Exadata is hosted. It is same as GCP Oracle zone
	// of Exadata infrastructure.
	GcpOracleZone pulumi.StringPtrInput
	// Labels or tags associated with the VM Cluster.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/DbNode`.
	Location pulumi.StringPtrInput
	// Identifier. The name of the VM Cluster resource with the format:
	// projects/{project}/locations/{region}/cloudVmClusters/{cloud_vm_cluster}
	Name pulumi.StringPtrInput
	// The name of the VPC network.
	// Format: projects/{project}/global/networks/{network}
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Various properties and settings associated with Exadata VM cluster.
	// Structure is documented below.
	Properties CloudVmClusterPropertiesPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
}

func (CloudVmClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudVmClusterState)(nil)).Elem()
}

type cloudVmClusterArgs struct {
	// CIDR range of the backup subnet.
	BackupSubnetCidr string `pulumi:"backupSubnetCidr"`
	// Network settings. CIDR to use for cluster IP allocation.
	Cidr string `pulumi:"cidr"`
	// The ID of the VM Cluster to create. This value is restricted
	// to (^a-z?$) and must be a maximum of 63
	// characters in length. The value must start with a letter and end with
	// a letter or a number.
	//
	// ***
	CloudVmClusterId string `pulumi:"cloudVmClusterId"`
	// User friendly name for this resource.
	DisplayName *string `pulumi:"displayName"`
	// The name of the Exadata Infrastructure resource on which VM cluster
	// resource is created, in the following format:
	// projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
	ExadataInfrastructure string `pulumi:"exadataInfrastructure"`
	// Labels or tags associated with the VM Cluster.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/DbNode`.
	Location string `pulumi:"location"`
	// The name of the VPC network.
	// Format: projects/{project}/global/networks/{network}
	Network string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Various properties and settings associated with Exadata VM cluster.
	// Structure is documented below.
	Properties *CloudVmClusterProperties `pulumi:"properties"`
}

// The set of arguments for constructing a CloudVmCluster resource.
type CloudVmClusterArgs struct {
	// CIDR range of the backup subnet.
	BackupSubnetCidr pulumi.StringInput
	// Network settings. CIDR to use for cluster IP allocation.
	Cidr pulumi.StringInput
	// The ID of the VM Cluster to create. This value is restricted
	// to (^a-z?$) and must be a maximum of 63
	// characters in length. The value must start with a letter and end with
	// a letter or a number.
	//
	// ***
	CloudVmClusterId pulumi.StringInput
	// User friendly name for this resource.
	DisplayName pulumi.StringPtrInput
	// The name of the Exadata Infrastructure resource on which VM cluster
	// resource is created, in the following format:
	// projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
	ExadataInfrastructure pulumi.StringInput
	// Labels or tags associated with the VM Cluster.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/DbNode`.
	Location pulumi.StringInput
	// The name of the VPC network.
	// Format: projects/{project}/global/networks/{network}
	Network pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Various properties and settings associated with Exadata VM cluster.
	// Structure is documented below.
	Properties CloudVmClusterPropertiesPtrInput
}

func (CloudVmClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudVmClusterArgs)(nil)).Elem()
}

type CloudVmClusterInput interface {
	pulumi.Input

	ToCloudVmClusterOutput() CloudVmClusterOutput
	ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput
}

func (*CloudVmCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudVmCluster)(nil)).Elem()
}

func (i *CloudVmCluster) ToCloudVmClusterOutput() CloudVmClusterOutput {
	return i.ToCloudVmClusterOutputWithContext(context.Background())
}

func (i *CloudVmCluster) ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudVmClusterOutput)
}

// CloudVmClusterArrayInput is an input type that accepts CloudVmClusterArray and CloudVmClusterArrayOutput values.
// You can construct a concrete instance of `CloudVmClusterArrayInput` via:
//
//	CloudVmClusterArray{ CloudVmClusterArgs{...} }
type CloudVmClusterArrayInput interface {
	pulumi.Input

	ToCloudVmClusterArrayOutput() CloudVmClusterArrayOutput
	ToCloudVmClusterArrayOutputWithContext(context.Context) CloudVmClusterArrayOutput
}

type CloudVmClusterArray []CloudVmClusterInput

func (CloudVmClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudVmCluster)(nil)).Elem()
}

func (i CloudVmClusterArray) ToCloudVmClusterArrayOutput() CloudVmClusterArrayOutput {
	return i.ToCloudVmClusterArrayOutputWithContext(context.Background())
}

func (i CloudVmClusterArray) ToCloudVmClusterArrayOutputWithContext(ctx context.Context) CloudVmClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudVmClusterArrayOutput)
}

// CloudVmClusterMapInput is an input type that accepts CloudVmClusterMap and CloudVmClusterMapOutput values.
// You can construct a concrete instance of `CloudVmClusterMapInput` via:
//
//	CloudVmClusterMap{ "key": CloudVmClusterArgs{...} }
type CloudVmClusterMapInput interface {
	pulumi.Input

	ToCloudVmClusterMapOutput() CloudVmClusterMapOutput
	ToCloudVmClusterMapOutputWithContext(context.Context) CloudVmClusterMapOutput
}

type CloudVmClusterMap map[string]CloudVmClusterInput

func (CloudVmClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudVmCluster)(nil)).Elem()
}

func (i CloudVmClusterMap) ToCloudVmClusterMapOutput() CloudVmClusterMapOutput {
	return i.ToCloudVmClusterMapOutputWithContext(context.Background())
}

func (i CloudVmClusterMap) ToCloudVmClusterMapOutputWithContext(ctx context.Context) CloudVmClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudVmClusterMapOutput)
}

type CloudVmClusterOutput struct{ *pulumi.OutputState }

func (CloudVmClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudVmCluster)(nil)).Elem()
}

func (o CloudVmClusterOutput) ToCloudVmClusterOutput() CloudVmClusterOutput {
	return o
}

func (o CloudVmClusterOutput) ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput {
	return o
}

// CIDR range of the backup subnet.
func (o CloudVmClusterOutput) BackupSubnetCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.BackupSubnetCidr }).(pulumi.StringOutput)
}

// Network settings. CIDR to use for cluster IP allocation.
func (o CloudVmClusterOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// The ID of the VM Cluster to create. This value is restricted
// to (^a-z?$) and must be a maximum of 63
// characters in length. The value must start with a letter and end with
// a letter or a number.
//
// ***
func (o CloudVmClusterOutput) CloudVmClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.CloudVmClusterId }).(pulumi.StringOutput)
}

// The date and time that the VM cluster was created.
func (o CloudVmClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User friendly name for this resource.
func (o CloudVmClusterOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o CloudVmClusterOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The name of the Exadata Infrastructure resource on which VM cluster
// resource is created, in the following format:
// projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
func (o CloudVmClusterOutput) ExadataInfrastructure() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.ExadataInfrastructure }).(pulumi.StringOutput)
}

// GCP location where Oracle Exadata is hosted. It is same as GCP Oracle zone
// of Exadata infrastructure.
func (o CloudVmClusterOutput) GcpOracleZone() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.GcpOracleZone }).(pulumi.StringOutput)
}

// Labels or tags associated with the VM Cluster.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o CloudVmClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/DbNode`.
func (o CloudVmClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The name of the VM Cluster resource with the format:
// projects/{project}/locations/{region}/cloudVmClusters/{cloud_vm_cluster}
func (o CloudVmClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the VPC network.
// Format: projects/{project}/global/networks/{network}
func (o CloudVmClusterOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CloudVmClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Various properties and settings associated with Exadata VM cluster.
// Structure is documented below.
func (o CloudVmClusterOutput) Properties() CloudVmClusterPropertiesPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) CloudVmClusterPropertiesPtrOutput { return v.Properties }).(CloudVmClusterPropertiesPtrOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o CloudVmClusterOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

type CloudVmClusterArrayOutput struct{ *pulumi.OutputState }

func (CloudVmClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudVmCluster)(nil)).Elem()
}

func (o CloudVmClusterArrayOutput) ToCloudVmClusterArrayOutput() CloudVmClusterArrayOutput {
	return o
}

func (o CloudVmClusterArrayOutput) ToCloudVmClusterArrayOutputWithContext(ctx context.Context) CloudVmClusterArrayOutput {
	return o
}

func (o CloudVmClusterArrayOutput) Index(i pulumi.IntInput) CloudVmClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudVmCluster {
		return vs[0].([]*CloudVmCluster)[vs[1].(int)]
	}).(CloudVmClusterOutput)
}

type CloudVmClusterMapOutput struct{ *pulumi.OutputState }

func (CloudVmClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudVmCluster)(nil)).Elem()
}

func (o CloudVmClusterMapOutput) ToCloudVmClusterMapOutput() CloudVmClusterMapOutput {
	return o
}

func (o CloudVmClusterMapOutput) ToCloudVmClusterMapOutputWithContext(ctx context.Context) CloudVmClusterMapOutput {
	return o
}

func (o CloudVmClusterMapOutput) MapIndex(k pulumi.StringInput) CloudVmClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudVmCluster {
		return vs[0].(map[string]*CloudVmCluster)[vs[1].(string)]
	}).(CloudVmClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudVmClusterInput)(nil)).Elem(), &CloudVmCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudVmClusterArrayInput)(nil)).Elem(), CloudVmClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudVmClusterMapInput)(nil)).Elem(), CloudVmClusterMap{})
	pulumi.RegisterOutputType(CloudVmClusterOutput{})
	pulumi.RegisterOutputType(CloudVmClusterArrayOutput{})
	pulumi.RegisterOutputType(CloudVmClusterMapOutput{})
}
