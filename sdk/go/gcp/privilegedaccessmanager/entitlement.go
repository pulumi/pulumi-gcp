// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privilegedaccessmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Entitlement defines the eligibility of a set of users to obtain a predefined access for some time possibly after going through an approval workflow.
//
// ## Example Usage
//
// ### Privileged Access Manager Entitlement Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/privilegedaccessmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := privilegedaccessmanager.Newentitlement(ctx, "tfentitlement", &privilegedaccessmanager.entitlementArgs{
//				EntitlementId:      pulumi.String("example-entitlement"),
//				Location:           pulumi.String("global"),
//				MaxRequestDuration: pulumi.String("43200s"),
//				Parent:             pulumi.String("projects/my-project-name"),
//				RequesterJustificationConfig: &privilegedaccessmanager.EntitlementRequesterJustificationConfigArgs{
//					Unstructured: nil,
//				},
//				EligibleUsers: privilegedaccessmanager.EntitlementEligibleUserArray{
//					&privilegedaccessmanager.EntitlementEligibleUserArgs{
//						Principals: pulumi.StringArray{
//							pulumi.String("group:test@google.com"),
//						},
//					},
//				},
//				PrivilegedAccess: &privilegedaccessmanager.EntitlementPrivilegedAccessArgs{
//					GcpIamAccess: &privilegedaccessmanager.EntitlementPrivilegedAccessGcpIamAccessArgs{
//						RoleBindings: privilegedaccessmanager.EntitlementPrivilegedAccessGcpIamAccessRoleBindingArray{
//							&privilegedaccessmanager.EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs{
//								Role:                pulumi.String("roles/storage.admin"),
//								ConditionExpression: pulumi.String("request.time < timestamp(\"2024-04-23T18:30:00.000Z\")"),
//							},
//						},
//						Resource:     pulumi.String("//cloudresourcemanager.googleapis.com/projects/my-project-name"),
//						ResourceType: pulumi.String("cloudresourcemanager.googleapis.com/Project"),
//					},
//				},
//				AdditionalNotificationTargets: &privilegedaccessmanager.EntitlementAdditionalNotificationTargetsArgs{
//					AdminEmailRecipients: pulumi.StringArray{
//						pulumi.String("user@example.com"),
//					},
//					RequesterEmailRecipients: pulumi.StringArray{
//						pulumi.String("user@example.com"),
//					},
//				},
//				ApprovalWorkflow: &privilegedaccessmanager.EntitlementApprovalWorkflowArgs{
//					ManualApprovals: &privilegedaccessmanager.EntitlementApprovalWorkflowManualApprovalsArgs{
//						RequireApproverJustification: pulumi.Bool(true),
//						Steps: privilegedaccessmanager.EntitlementApprovalWorkflowManualApprovalsStepArray{
//							&privilegedaccessmanager.EntitlementApprovalWorkflowManualApprovalsStepArgs{
//								ApprovalsNeeded: pulumi.Int(1),
//								ApproverEmailRecipients: pulumi.StringArray{
//									pulumi.String("user@example.com"),
//								},
//								Approvers: &privilegedaccessmanager.EntitlementApprovalWorkflowManualApprovalsStepApproversArgs{
//									Principals: pulumi.StringArray{
//										pulumi.String("group:test@google.com"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Entitlement can be imported using any of these accepted formats:
//
// * `{{parent}}/locations/{{location}}/entitlements/{{entitlement_id}}`
//
// When using the `pulumi import` command, Entitlement can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:privilegedaccessmanager/entitlement:entitlement default {{parent}}/locations/{{location}}/entitlements/{{entitlement_id}}
// ```
type Entitlement struct {
	pulumi.CustomResourceState

	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets EntitlementAdditionalNotificationTargetsPtrOutput `pulumi:"additionalNotificationTargets"`
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow EntitlementApprovalWorkflowPtrOutput `pulumi:"approvalWorkflow"`
	// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Who can create Grants using Entitlement. This list should contain at most one entry
	// Structure is documented below.
	EligibleUsers EntitlementEligibleUserArrayOutput `pulumi:"eligibleUsers"`
	// The ID to use for this Entitlement. This will become the last part of the resource name.
	// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
	// This value should be unique among all other Entitlements under the specified `parent`.
	EntitlementId pulumi.StringOutput `pulumi:"entitlementId"`
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The region of the Entitlement resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum amount of time for which access would be granted for a request.
	// A requester can choose to ask for access for less than this duration but never more.
	// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
	MaxRequestDuration pulumi.StringOutput `pulumi:"maxRequestDuration"`
	// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project, alongside the region and a unique entitlement ID.
	// Formats: organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id}, folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
	Name pulumi.StringOutput `pulumi:"name"`
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Privileged access that this service can be used to gate.
	// Structure is documented below.
	PrivilegedAccess EntitlementPrivilegedAccessOutput `pulumi:"privilegedAccess"`
	// Defines the ways in which a requester should provide the justification while requesting for access.
	// Structure is documented below.
	RequesterJustificationConfig EntitlementRequesterJustificationConfigOutput `pulumi:"requesterJustificationConfig"`
	// Output only. The current state of the Entitlement.
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEntitlement registers a new resource with the given unique name, arguments, and options.
func NewEntitlement(ctx *pulumi.Context,
	name string, args *EntitlementArgs, opts ...pulumi.ResourceOption) (*Entitlement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EligibleUsers == nil {
		return nil, errors.New("invalid value for required argument 'EligibleUsers'")
	}
	if args.EntitlementId == nil {
		return nil, errors.New("invalid value for required argument 'EntitlementId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MaxRequestDuration == nil {
		return nil, errors.New("invalid value for required argument 'MaxRequestDuration'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.PrivilegedAccess == nil {
		return nil, errors.New("invalid value for required argument 'PrivilegedAccess'")
	}
	if args.RequesterJustificationConfig == nil {
		return nil, errors.New("invalid value for required argument 'RequesterJustificationConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Entitlement
	err := ctx.RegisterResource("gcp:privilegedaccessmanager/entitlement:entitlement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntitlement gets an existing Entitlement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntitlement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntitlementState, opts ...pulumi.ResourceOption) (*Entitlement, error) {
	var resource Entitlement
	err := ctx.ReadResource("gcp:privilegedaccessmanager/entitlement:entitlement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Entitlement resources.
type entitlementState struct {
	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets *EntitlementAdditionalNotificationTargets `pulumi:"additionalNotificationTargets"`
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow *EntitlementApprovalWorkflow `pulumi:"approvalWorkflow"`
	// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
	CreateTime *string `pulumi:"createTime"`
	// Who can create Grants using Entitlement. This list should contain at most one entry
	// Structure is documented below.
	EligibleUsers []EntitlementEligibleUser `pulumi:"eligibleUsers"`
	// The ID to use for this Entitlement. This will become the last part of the resource name.
	// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
	// This value should be unique among all other Entitlements under the specified `parent`.
	EntitlementId *string `pulumi:"entitlementId"`
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag *string `pulumi:"etag"`
	// The region of the Entitlement resource.
	Location *string `pulumi:"location"`
	// The maximum amount of time for which access would be granted for a request.
	// A requester can choose to ask for access for less than this duration but never more.
	// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
	MaxRequestDuration *string `pulumi:"maxRequestDuration"`
	// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project, alongside the region and a unique entitlement ID.
	// Formats: organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id}, folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
	Name *string `pulumi:"name"`
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent *string `pulumi:"parent"`
	// Privileged access that this service can be used to gate.
	// Structure is documented below.
	PrivilegedAccess *EntitlementPrivilegedAccess `pulumi:"privilegedAccess"`
	// Defines the ways in which a requester should provide the justification while requesting for access.
	// Structure is documented below.
	RequesterJustificationConfig *EntitlementRequesterJustificationConfig `pulumi:"requesterJustificationConfig"`
	// Output only. The current state of the Entitlement.
	State *string `pulumi:"state"`
	// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type EntitlementState struct {
	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets EntitlementAdditionalNotificationTargetsPtrInput
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow EntitlementApprovalWorkflowPtrInput
	// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
	CreateTime pulumi.StringPtrInput
	// Who can create Grants using Entitlement. This list should contain at most one entry
	// Structure is documented below.
	EligibleUsers EntitlementEligibleUserArrayInput
	// The ID to use for this Entitlement. This will become the last part of the resource name.
	// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
	// This value should be unique among all other Entitlements under the specified `parent`.
	EntitlementId pulumi.StringPtrInput
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag pulumi.StringPtrInput
	// The region of the Entitlement resource.
	Location pulumi.StringPtrInput
	// The maximum amount of time for which access would be granted for a request.
	// A requester can choose to ask for access for less than this duration but never more.
	// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
	MaxRequestDuration pulumi.StringPtrInput
	// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project, alongside the region and a unique entitlement ID.
	// Formats: organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id}, folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
	Name pulumi.StringPtrInput
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent pulumi.StringPtrInput
	// Privileged access that this service can be used to gate.
	// Structure is documented below.
	PrivilegedAccess EntitlementPrivilegedAccessPtrInput
	// Defines the ways in which a requester should provide the justification while requesting for access.
	// Structure is documented below.
	RequesterJustificationConfig EntitlementRequesterJustificationConfigPtrInput
	// Output only. The current state of the Entitlement.
	State pulumi.StringPtrInput
	// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (EntitlementState) ElementType() reflect.Type {
	return reflect.TypeOf((*entitlementState)(nil)).Elem()
}

type entitlementArgs struct {
	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets *EntitlementAdditionalNotificationTargets `pulumi:"additionalNotificationTargets"`
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow *EntitlementApprovalWorkflow `pulumi:"approvalWorkflow"`
	// Who can create Grants using Entitlement. This list should contain at most one entry
	// Structure is documented below.
	EligibleUsers []EntitlementEligibleUser `pulumi:"eligibleUsers"`
	// The ID to use for this Entitlement. This will become the last part of the resource name.
	// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
	// This value should be unique among all other Entitlements under the specified `parent`.
	EntitlementId string `pulumi:"entitlementId"`
	// The region of the Entitlement resource.
	Location string `pulumi:"location"`
	// The maximum amount of time for which access would be granted for a request.
	// A requester can choose to ask for access for less than this duration but never more.
	// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
	MaxRequestDuration string `pulumi:"maxRequestDuration"`
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent string `pulumi:"parent"`
	// Privileged access that this service can be used to gate.
	// Structure is documented below.
	PrivilegedAccess EntitlementPrivilegedAccess `pulumi:"privilegedAccess"`
	// Defines the ways in which a requester should provide the justification while requesting for access.
	// Structure is documented below.
	RequesterJustificationConfig EntitlementRequesterJustificationConfig `pulumi:"requesterJustificationConfig"`
}

// The set of arguments for constructing a Entitlement resource.
type EntitlementArgs struct {
	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets EntitlementAdditionalNotificationTargetsPtrInput
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow EntitlementApprovalWorkflowPtrInput
	// Who can create Grants using Entitlement. This list should contain at most one entry
	// Structure is documented below.
	EligibleUsers EntitlementEligibleUserArrayInput
	// The ID to use for this Entitlement. This will become the last part of the resource name.
	// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
	// This value should be unique among all other Entitlements under the specified `parent`.
	EntitlementId pulumi.StringInput
	// The region of the Entitlement resource.
	Location pulumi.StringInput
	// The maximum amount of time for which access would be granted for a request.
	// A requester can choose to ask for access for less than this duration but never more.
	// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
	MaxRequestDuration pulumi.StringInput
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent pulumi.StringInput
	// Privileged access that this service can be used to gate.
	// Structure is documented below.
	PrivilegedAccess EntitlementPrivilegedAccessInput
	// Defines the ways in which a requester should provide the justification while requesting for access.
	// Structure is documented below.
	RequesterJustificationConfig EntitlementRequesterJustificationConfigInput
}

func (EntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entitlementArgs)(nil)).Elem()
}

type EntitlementInput interface {
	pulumi.Input

	ToEntitlementOutput() EntitlementOutput
	ToEntitlementOutputWithContext(ctx context.Context) EntitlementOutput
}

func (*Entitlement) ElementType() reflect.Type {
	return reflect.TypeOf((**Entitlement)(nil)).Elem()
}

func (i *Entitlement) ToEntitlementOutput() EntitlementOutput {
	return i.ToEntitlementOutputWithContext(context.Background())
}

func (i *Entitlement) ToEntitlementOutputWithContext(ctx context.Context) EntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementOutput)
}

// EntitlementArrayInput is an input type that accepts EntitlementArray and EntitlementArrayOutput values.
// You can construct a concrete instance of `EntitlementArrayInput` via:
//
//	EntitlementArray{ EntitlementArgs{...} }
type EntitlementArrayInput interface {
	pulumi.Input

	ToEntitlementArrayOutput() EntitlementArrayOutput
	ToEntitlementArrayOutputWithContext(context.Context) EntitlementArrayOutput
}

type EntitlementArray []EntitlementInput

func (EntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Entitlement)(nil)).Elem()
}

func (i EntitlementArray) ToEntitlementArrayOutput() EntitlementArrayOutput {
	return i.ToEntitlementArrayOutputWithContext(context.Background())
}

func (i EntitlementArray) ToEntitlementArrayOutputWithContext(ctx context.Context) EntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementArrayOutput)
}

// EntitlementMapInput is an input type that accepts EntitlementMap and EntitlementMapOutput values.
// You can construct a concrete instance of `EntitlementMapInput` via:
//
//	EntitlementMap{ "key": EntitlementArgs{...} }
type EntitlementMapInput interface {
	pulumi.Input

	ToEntitlementMapOutput() EntitlementMapOutput
	ToEntitlementMapOutputWithContext(context.Context) EntitlementMapOutput
}

type EntitlementMap map[string]EntitlementInput

func (EntitlementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Entitlement)(nil)).Elem()
}

func (i EntitlementMap) ToEntitlementMapOutput() EntitlementMapOutput {
	return i.ToEntitlementMapOutputWithContext(context.Background())
}

func (i EntitlementMap) ToEntitlementMapOutputWithContext(ctx context.Context) EntitlementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementMapOutput)
}

type EntitlementOutput struct{ *pulumi.OutputState }

func (EntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Entitlement)(nil)).Elem()
}

func (o EntitlementOutput) ToEntitlementOutput() EntitlementOutput {
	return o
}

func (o EntitlementOutput) ToEntitlementOutputWithContext(ctx context.Context) EntitlementOutput {
	return o
}

// AdditionalNotificationTargets includes email addresses to be notified.
func (o EntitlementOutput) AdditionalNotificationTargets() EntitlementAdditionalNotificationTargetsPtrOutput {
	return o.ApplyT(func(v *Entitlement) EntitlementAdditionalNotificationTargetsPtrOutput {
		return v.AdditionalNotificationTargets
	}).(EntitlementAdditionalNotificationTargetsPtrOutput)
}

// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
// Different types of approval workflows that can be used to gate privileged access granting.
func (o EntitlementOutput) ApprovalWorkflow() EntitlementApprovalWorkflowPtrOutput {
	return o.ApplyT(func(v *Entitlement) EntitlementApprovalWorkflowPtrOutput { return v.ApprovalWorkflow }).(EntitlementApprovalWorkflowPtrOutput)
}

// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
func (o EntitlementOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Who can create Grants using Entitlement. This list should contain at most one entry
// Structure is documented below.
func (o EntitlementOutput) EligibleUsers() EntitlementEligibleUserArrayOutput {
	return o.ApplyT(func(v *Entitlement) EntitlementEligibleUserArrayOutput { return v.EligibleUsers }).(EntitlementEligibleUserArrayOutput)
}

// The ID to use for this Entitlement. This will become the last part of the resource name.
// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
// This value should be unique among all other Entitlements under the specified `parent`.
func (o EntitlementOutput) EntitlementId() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.EntitlementId }).(pulumi.StringOutput)
}

// For Resource freshness validation (https://google.aip.dev/154)
func (o EntitlementOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The region of the Entitlement resource.
func (o EntitlementOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The maximum amount of time for which access would be granted for a request.
// A requester can choose to ask for access for less than this duration but never more.
// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
func (o EntitlementOutput) MaxRequestDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.MaxRequestDuration }).(pulumi.StringOutput)
}

// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project, alongside the region and a unique entitlement ID.
// Formats: organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id}, folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
func (o EntitlementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
func (o EntitlementOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Privileged access that this service can be used to gate.
// Structure is documented below.
func (o EntitlementOutput) PrivilegedAccess() EntitlementPrivilegedAccessOutput {
	return o.ApplyT(func(v *Entitlement) EntitlementPrivilegedAccessOutput { return v.PrivilegedAccess }).(EntitlementPrivilegedAccessOutput)
}

// Defines the ways in which a requester should provide the justification while requesting for access.
// Structure is documented below.
func (o EntitlementOutput) RequesterJustificationConfig() EntitlementRequesterJustificationConfigOutput {
	return o.ApplyT(func(v *Entitlement) EntitlementRequesterJustificationConfigOutput {
		return v.RequesterJustificationConfig
	}).(EntitlementRequesterJustificationConfigOutput)
}

// Output only. The current state of the Entitlement.
func (o EntitlementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o EntitlementOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type EntitlementArrayOutput struct{ *pulumi.OutputState }

func (EntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Entitlement)(nil)).Elem()
}

func (o EntitlementArrayOutput) ToEntitlementArrayOutput() EntitlementArrayOutput {
	return o
}

func (o EntitlementArrayOutput) ToEntitlementArrayOutputWithContext(ctx context.Context) EntitlementArrayOutput {
	return o
}

func (o EntitlementArrayOutput) Index(i pulumi.IntInput) EntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Entitlement {
		return vs[0].([]*Entitlement)[vs[1].(int)]
	}).(EntitlementOutput)
}

type EntitlementMapOutput struct{ *pulumi.OutputState }

func (EntitlementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Entitlement)(nil)).Elem()
}

func (o EntitlementMapOutput) ToEntitlementMapOutput() EntitlementMapOutput {
	return o
}

func (o EntitlementMapOutput) ToEntitlementMapOutputWithContext(ctx context.Context) EntitlementMapOutput {
	return o
}

func (o EntitlementMapOutput) MapIndex(k pulumi.StringInput) EntitlementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Entitlement {
		return vs[0].(map[string]*Entitlement)[vs[1].(string)]
	}).(EntitlementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementInput)(nil)).Elem(), &Entitlement{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementArrayInput)(nil)).Elem(), EntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementMapInput)(nil)).Elem(), EntitlementMap{})
	pulumi.RegisterOutputType(EntitlementOutput{})
	pulumi.RegisterOutputType(EntitlementArrayOutput{})
	pulumi.RegisterOutputType(EntitlementMapOutput{})
}
