// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Google Cloud Storage Folder.
//
// # The Folder resource represents a folder in a Cloud Storage bucket with hierarchical namespace enabled
//
// To get more information about Folder, see:
//
// * [API documentation](https://cloud.google.com/storage/docs/json_api/v1/folders)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/storage/docs/folders-overview)
//
// ## Example Usage
//
// ### Storage Folder Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("my-bucket"),
//				Location:                 pulumi.String("EU"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//				HierarchicalNamespace: &storage.BucketHierarchicalNamespaceArgs{
//					Enabled: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			folder, err := storage.NewFolder(ctx, "folder", &storage.FolderArgs{
//				Bucket: bucket.Name,
//				Name:   pulumi.String("parent-folder/"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewFolder(ctx, "subfolder", &storage.FolderArgs{
//				Bucket: bucket.Name,
//				Name: folder.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("%vsubfolder/", name), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Folder can be imported using any of these accepted formats:
//
// * `{{bucket}}/folders/{{name}}`
//
// * `{{bucket}}/{{name}}`
//
// When using the `pulumi import` command, Folder can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:storage/folder:Folder default {{bucket}}/folders/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:storage/folder:Folder default {{bucket}}/{{name}}
// ```
type Folder struct {
	pulumi.CustomResourceState

	// The name of the bucket that contains the folder.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The timestamp at which this folder was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// If set to true, items within folder if any will be force destroyed.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// The metadata generation of the folder.
	Metageneration pulumi.StringOutput `pulumi:"metageneration"`
	// The name of the folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`, `example@#/`, `a-b/d-f/`.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The timestamp at which this folder was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewFolder registers a new resource with the given unique name, arguments, and options.
func NewFolder(ctx *pulumi.Context,
	name string, args *FolderArgs, opts ...pulumi.ResourceOption) (*Folder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Folder
	err := ctx.RegisterResource("gcp:storage/folder:Folder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolder gets an existing Folder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderState, opts ...pulumi.ResourceOption) (*Folder, error) {
	var resource Folder
	err := ctx.ReadResource("gcp:storage/folder:Folder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Folder resources.
type folderState struct {
	// The name of the bucket that contains the folder.
	Bucket *string `pulumi:"bucket"`
	// The timestamp at which this folder was created.
	CreateTime *string `pulumi:"createTime"`
	// If set to true, items within folder if any will be force destroyed.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The metadata generation of the folder.
	Metageneration *string `pulumi:"metageneration"`
	// The name of the folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`, `example@#/`, `a-b/d-f/`.
	//
	// ***
	Name *string `pulumi:"name"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// The timestamp at which this folder was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type FolderState struct {
	// The name of the bucket that contains the folder.
	Bucket pulumi.StringPtrInput
	// The timestamp at which this folder was created.
	CreateTime pulumi.StringPtrInput
	// If set to true, items within folder if any will be force destroyed.
	ForceDestroy pulumi.BoolPtrInput
	// The metadata generation of the folder.
	Metageneration pulumi.StringPtrInput
	// The name of the folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`, `example@#/`, `a-b/d-f/`.
	//
	// ***
	Name pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// The timestamp at which this folder was most recently updated.
	UpdateTime pulumi.StringPtrInput
}

func (FolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderState)(nil)).Elem()
}

type folderArgs struct {
	// The name of the bucket that contains the folder.
	Bucket string `pulumi:"bucket"`
	// If set to true, items within folder if any will be force destroyed.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The name of the folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`, `example@#/`, `a-b/d-f/`.
	//
	// ***
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Folder resource.
type FolderArgs struct {
	// The name of the bucket that contains the folder.
	Bucket pulumi.StringInput
	// If set to true, items within folder if any will be force destroyed.
	ForceDestroy pulumi.BoolPtrInput
	// The name of the folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`, `example@#/`, `a-b/d-f/`.
	//
	// ***
	Name pulumi.StringPtrInput
}

func (FolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderArgs)(nil)).Elem()
}

type FolderInput interface {
	pulumi.Input

	ToFolderOutput() FolderOutput
	ToFolderOutputWithContext(ctx context.Context) FolderOutput
}

func (*Folder) ElementType() reflect.Type {
	return reflect.TypeOf((**Folder)(nil)).Elem()
}

func (i *Folder) ToFolderOutput() FolderOutput {
	return i.ToFolderOutputWithContext(context.Background())
}

func (i *Folder) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderOutput)
}

// FolderArrayInput is an input type that accepts FolderArray and FolderArrayOutput values.
// You can construct a concrete instance of `FolderArrayInput` via:
//
//	FolderArray{ FolderArgs{...} }
type FolderArrayInput interface {
	pulumi.Input

	ToFolderArrayOutput() FolderArrayOutput
	ToFolderArrayOutputWithContext(context.Context) FolderArrayOutput
}

type FolderArray []FolderInput

func (FolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Folder)(nil)).Elem()
}

func (i FolderArray) ToFolderArrayOutput() FolderArrayOutput {
	return i.ToFolderArrayOutputWithContext(context.Background())
}

func (i FolderArray) ToFolderArrayOutputWithContext(ctx context.Context) FolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderArrayOutput)
}

// FolderMapInput is an input type that accepts FolderMap and FolderMapOutput values.
// You can construct a concrete instance of `FolderMapInput` via:
//
//	FolderMap{ "key": FolderArgs{...} }
type FolderMapInput interface {
	pulumi.Input

	ToFolderMapOutput() FolderMapOutput
	ToFolderMapOutputWithContext(context.Context) FolderMapOutput
}

type FolderMap map[string]FolderInput

func (FolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Folder)(nil)).Elem()
}

func (i FolderMap) ToFolderMapOutput() FolderMapOutput {
	return i.ToFolderMapOutputWithContext(context.Background())
}

func (i FolderMap) ToFolderMapOutputWithContext(ctx context.Context) FolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderMapOutput)
}

type FolderOutput struct{ *pulumi.OutputState }

func (FolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Folder)(nil)).Elem()
}

func (o FolderOutput) ToFolderOutput() FolderOutput {
	return o
}

func (o FolderOutput) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return o
}

// The name of the bucket that contains the folder.
func (o FolderOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The timestamp at which this folder was created.
func (o FolderOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// If set to true, items within folder if any will be force destroyed.
func (o FolderOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Folder) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// The metadata generation of the folder.
func (o FolderOutput) Metageneration() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Metageneration }).(pulumi.StringOutput)
}

// The name of the folder expressed as a path. Must include
// trailing '/'. For example, `example_dir/example_dir2/`, `example@#/`, `a-b/d-f/`.
//
// ***
func (o FolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o FolderOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The timestamp at which this folder was most recently updated.
func (o FolderOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type FolderArrayOutput struct{ *pulumi.OutputState }

func (FolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Folder)(nil)).Elem()
}

func (o FolderArrayOutput) ToFolderArrayOutput() FolderArrayOutput {
	return o
}

func (o FolderArrayOutput) ToFolderArrayOutputWithContext(ctx context.Context) FolderArrayOutput {
	return o
}

func (o FolderArrayOutput) Index(i pulumi.IntInput) FolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Folder {
		return vs[0].([]*Folder)[vs[1].(int)]
	}).(FolderOutput)
}

type FolderMapOutput struct{ *pulumi.OutputState }

func (FolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Folder)(nil)).Elem()
}

func (o FolderMapOutput) ToFolderMapOutput() FolderMapOutput {
	return o
}

func (o FolderMapOutput) ToFolderMapOutputWithContext(ctx context.Context) FolderMapOutput {
	return o
}

func (o FolderMapOutput) MapIndex(k pulumi.StringInput) FolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Folder {
		return vs[0].(map[string]*Folder)[vs[1].(string)]
	}).(FolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderInput)(nil)).Elem(), &Folder{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderArrayInput)(nil)).Elem(), FolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderMapInput)(nil)).Elem(), FolderMap{})
	pulumi.RegisterOutputType(FolderOutput{})
	pulumi.RegisterOutputType(FolderArrayOutput{})
	pulumi.RegisterOutputType(FolderMapOutput{})
}
