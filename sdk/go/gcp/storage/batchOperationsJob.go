// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Storage Batch Operations (SBO) is a Cloud Storage management feature that offers a
// seamless experience to perform single batch operations on millions of GCS objects in a
// serverless manner.
//
// ## Example Usage
//
// ### Storage Batch Operations
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:         pulumi.String("tf-sample-bucket"),
//				Location:     pulumi.String("us-central1"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewBatchOperationsJob(ctx, "tf-job", &storage.BatchOperationsJobArgs{
//				JobId: pulumi.String("tf-job"),
//				BucketList: &storage.BatchOperationsJobBucketListArgs{
//					Buckets: &storage.BatchOperationsJobBucketListBucketsArgs{
//						Bucket: bucket.Name,
//						PrefixList: &storage.BatchOperationsJobBucketListBucketsPrefixListArgs{
//							IncludedObjectPrefixes: pulumi.StringArray{
//								pulumi.String("bkt"),
//							},
//						},
//					},
//				},
//				PutMetadata: &storage.BatchOperationsJobPutMetadataArgs{
//					CustomMetadata: pulumi.StringMap{
//						"key": pulumi.String("value"),
//					},
//				},
//				DeleteProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Job can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/jobs/{{job_id}}`
//
// * `{{project}}/{{job_id}}`
//
// * `{{job_id}}`
//
// When using the `pulumi import` command, Job can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:storage/batchOperationsJob:BatchOperationsJob default projects/{{project}}/locations/global/jobs/{{job_id}}
// ```
//
// ```sh
// $ pulumi import gcp:storage/batchOperationsJob:BatchOperationsJob default {{project}}/{{job_id}}
// ```
//
// ```sh
// $ pulumi import gcp:storage/batchOperationsJob:BatchOperationsJob default {{job_id}}
// ```
type BatchOperationsJob struct {
	pulumi.CustomResourceState

	// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
	// Structure is documented below.
	BucketList BatchOperationsJobBucketListPtrOutput `pulumi:"bucketList"`
	// The time that the job was completed.
	CompleteTime pulumi.StringOutput `pulumi:"completeTime"`
	// The timestamp at which this storage batch operation was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// allows batch operations to delete objects in bucket
	// Structure is documented below.
	DeleteObject BatchOperationsJobDeleteObjectPtrOutput `pulumi:"deleteObject"`
	// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
	DeleteProtection pulumi.BoolPtrOutput `pulumi:"deleteProtection"`
	// The ID of the job.
	JobId pulumi.StringPtrOutput `pulumi:"jobId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// allows batch operations to update metadata for objects in bucket
	// Structure is documented below.
	PutMetadata BatchOperationsJobPutMetadataPtrOutput `pulumi:"putMetadata"`
	// allows to update temporary hold or eventBased hold for objects in bucket.
	// Structure is documented below.
	PutObjectHold BatchOperationsJobPutObjectHoldPtrOutput `pulumi:"putObjectHold"`
	// allows to update encryption key for objects in bucket.
	// Structure is documented below.
	RewriteObject BatchOperationsJobRewriteObjectPtrOutput `pulumi:"rewriteObject"`
	// The time that the job was scheduled.
	ScheduleTime pulumi.StringOutput `pulumi:"scheduleTime"`
	// State of the job.
	State pulumi.StringOutput `pulumi:"state"`
	// The timestamp at which this storage batch operation was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBatchOperationsJob registers a new resource with the given unique name, arguments, and options.
func NewBatchOperationsJob(ctx *pulumi.Context,
	name string, args *BatchOperationsJobArgs, opts ...pulumi.ResourceOption) (*BatchOperationsJob, error) {
	if args == nil {
		args = &BatchOperationsJobArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BatchOperationsJob
	err := ctx.RegisterResource("gcp:storage/batchOperationsJob:BatchOperationsJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBatchOperationsJob gets an existing BatchOperationsJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBatchOperationsJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BatchOperationsJobState, opts ...pulumi.ResourceOption) (*BatchOperationsJob, error) {
	var resource BatchOperationsJob
	err := ctx.ReadResource("gcp:storage/batchOperationsJob:BatchOperationsJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BatchOperationsJob resources.
type batchOperationsJobState struct {
	// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
	// Structure is documented below.
	BucketList *BatchOperationsJobBucketList `pulumi:"bucketList"`
	// The time that the job was completed.
	CompleteTime *string `pulumi:"completeTime"`
	// The timestamp at which this storage batch operation was created.
	CreateTime *string `pulumi:"createTime"`
	// allows batch operations to delete objects in bucket
	// Structure is documented below.
	DeleteObject *BatchOperationsJobDeleteObject `pulumi:"deleteObject"`
	// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// The ID of the job.
	JobId *string `pulumi:"jobId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// allows batch operations to update metadata for objects in bucket
	// Structure is documented below.
	PutMetadata *BatchOperationsJobPutMetadata `pulumi:"putMetadata"`
	// allows to update temporary hold or eventBased hold for objects in bucket.
	// Structure is documented below.
	PutObjectHold *BatchOperationsJobPutObjectHold `pulumi:"putObjectHold"`
	// allows to update encryption key for objects in bucket.
	// Structure is documented below.
	RewriteObject *BatchOperationsJobRewriteObject `pulumi:"rewriteObject"`
	// The time that the job was scheduled.
	ScheduleTime *string `pulumi:"scheduleTime"`
	// State of the job.
	State *string `pulumi:"state"`
	// The timestamp at which this storage batch operation was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type BatchOperationsJobState struct {
	// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
	// Structure is documented below.
	BucketList BatchOperationsJobBucketListPtrInput
	// The time that the job was completed.
	CompleteTime pulumi.StringPtrInput
	// The timestamp at which this storage batch operation was created.
	CreateTime pulumi.StringPtrInput
	// allows batch operations to delete objects in bucket
	// Structure is documented below.
	DeleteObject BatchOperationsJobDeleteObjectPtrInput
	// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
	DeleteProtection pulumi.BoolPtrInput
	// The ID of the job.
	JobId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// allows batch operations to update metadata for objects in bucket
	// Structure is documented below.
	PutMetadata BatchOperationsJobPutMetadataPtrInput
	// allows to update temporary hold or eventBased hold for objects in bucket.
	// Structure is documented below.
	PutObjectHold BatchOperationsJobPutObjectHoldPtrInput
	// allows to update encryption key for objects in bucket.
	// Structure is documented below.
	RewriteObject BatchOperationsJobRewriteObjectPtrInput
	// The time that the job was scheduled.
	ScheduleTime pulumi.StringPtrInput
	// State of the job.
	State pulumi.StringPtrInput
	// The timestamp at which this storage batch operation was most recently updated.
	UpdateTime pulumi.StringPtrInput
}

func (BatchOperationsJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*batchOperationsJobState)(nil)).Elem()
}

type batchOperationsJobArgs struct {
	// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
	// Structure is documented below.
	BucketList *BatchOperationsJobBucketList `pulumi:"bucketList"`
	// allows batch operations to delete objects in bucket
	// Structure is documented below.
	DeleteObject *BatchOperationsJobDeleteObject `pulumi:"deleteObject"`
	// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// The ID of the job.
	JobId *string `pulumi:"jobId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// allows batch operations to update metadata for objects in bucket
	// Structure is documented below.
	PutMetadata *BatchOperationsJobPutMetadata `pulumi:"putMetadata"`
	// allows to update temporary hold or eventBased hold for objects in bucket.
	// Structure is documented below.
	PutObjectHold *BatchOperationsJobPutObjectHold `pulumi:"putObjectHold"`
	// allows to update encryption key for objects in bucket.
	// Structure is documented below.
	RewriteObject *BatchOperationsJobRewriteObject `pulumi:"rewriteObject"`
}

// The set of arguments for constructing a BatchOperationsJob resource.
type BatchOperationsJobArgs struct {
	// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
	// Structure is documented below.
	BucketList BatchOperationsJobBucketListPtrInput
	// allows batch operations to delete objects in bucket
	// Structure is documented below.
	DeleteObject BatchOperationsJobDeleteObjectPtrInput
	// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
	DeleteProtection pulumi.BoolPtrInput
	// The ID of the job.
	JobId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// allows batch operations to update metadata for objects in bucket
	// Structure is documented below.
	PutMetadata BatchOperationsJobPutMetadataPtrInput
	// allows to update temporary hold or eventBased hold for objects in bucket.
	// Structure is documented below.
	PutObjectHold BatchOperationsJobPutObjectHoldPtrInput
	// allows to update encryption key for objects in bucket.
	// Structure is documented below.
	RewriteObject BatchOperationsJobRewriteObjectPtrInput
}

func (BatchOperationsJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*batchOperationsJobArgs)(nil)).Elem()
}

type BatchOperationsJobInput interface {
	pulumi.Input

	ToBatchOperationsJobOutput() BatchOperationsJobOutput
	ToBatchOperationsJobOutputWithContext(ctx context.Context) BatchOperationsJobOutput
}

func (*BatchOperationsJob) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchOperationsJob)(nil)).Elem()
}

func (i *BatchOperationsJob) ToBatchOperationsJobOutput() BatchOperationsJobOutput {
	return i.ToBatchOperationsJobOutputWithContext(context.Background())
}

func (i *BatchOperationsJob) ToBatchOperationsJobOutputWithContext(ctx context.Context) BatchOperationsJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchOperationsJobOutput)
}

// BatchOperationsJobArrayInput is an input type that accepts BatchOperationsJobArray and BatchOperationsJobArrayOutput values.
// You can construct a concrete instance of `BatchOperationsJobArrayInput` via:
//
//	BatchOperationsJobArray{ BatchOperationsJobArgs{...} }
type BatchOperationsJobArrayInput interface {
	pulumi.Input

	ToBatchOperationsJobArrayOutput() BatchOperationsJobArrayOutput
	ToBatchOperationsJobArrayOutputWithContext(context.Context) BatchOperationsJobArrayOutput
}

type BatchOperationsJobArray []BatchOperationsJobInput

func (BatchOperationsJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BatchOperationsJob)(nil)).Elem()
}

func (i BatchOperationsJobArray) ToBatchOperationsJobArrayOutput() BatchOperationsJobArrayOutput {
	return i.ToBatchOperationsJobArrayOutputWithContext(context.Background())
}

func (i BatchOperationsJobArray) ToBatchOperationsJobArrayOutputWithContext(ctx context.Context) BatchOperationsJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchOperationsJobArrayOutput)
}

// BatchOperationsJobMapInput is an input type that accepts BatchOperationsJobMap and BatchOperationsJobMapOutput values.
// You can construct a concrete instance of `BatchOperationsJobMapInput` via:
//
//	BatchOperationsJobMap{ "key": BatchOperationsJobArgs{...} }
type BatchOperationsJobMapInput interface {
	pulumi.Input

	ToBatchOperationsJobMapOutput() BatchOperationsJobMapOutput
	ToBatchOperationsJobMapOutputWithContext(context.Context) BatchOperationsJobMapOutput
}

type BatchOperationsJobMap map[string]BatchOperationsJobInput

func (BatchOperationsJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BatchOperationsJob)(nil)).Elem()
}

func (i BatchOperationsJobMap) ToBatchOperationsJobMapOutput() BatchOperationsJobMapOutput {
	return i.ToBatchOperationsJobMapOutputWithContext(context.Background())
}

func (i BatchOperationsJobMap) ToBatchOperationsJobMapOutputWithContext(ctx context.Context) BatchOperationsJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchOperationsJobMapOutput)
}

type BatchOperationsJobOutput struct{ *pulumi.OutputState }

func (BatchOperationsJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchOperationsJob)(nil)).Elem()
}

func (o BatchOperationsJobOutput) ToBatchOperationsJobOutput() BatchOperationsJobOutput {
	return o
}

func (o BatchOperationsJobOutput) ToBatchOperationsJobOutputWithContext(ctx context.Context) BatchOperationsJobOutput {
	return o
}

// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
// Structure is documented below.
func (o BatchOperationsJobOutput) BucketList() BatchOperationsJobBucketListPtrOutput {
	return o.ApplyT(func(v *BatchOperationsJob) BatchOperationsJobBucketListPtrOutput { return v.BucketList }).(BatchOperationsJobBucketListPtrOutput)
}

// The time that the job was completed.
func (o BatchOperationsJobOutput) CompleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchOperationsJob) pulumi.StringOutput { return v.CompleteTime }).(pulumi.StringOutput)
}

// The timestamp at which this storage batch operation was created.
func (o BatchOperationsJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchOperationsJob) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// allows batch operations to delete objects in bucket
// Structure is documented below.
func (o BatchOperationsJobOutput) DeleteObject() BatchOperationsJobDeleteObjectPtrOutput {
	return o.ApplyT(func(v *BatchOperationsJob) BatchOperationsJobDeleteObjectPtrOutput { return v.DeleteObject }).(BatchOperationsJobDeleteObjectPtrOutput)
}

// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
func (o BatchOperationsJobOutput) DeleteProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BatchOperationsJob) pulumi.BoolPtrOutput { return v.DeleteProtection }).(pulumi.BoolPtrOutput)
}

// The ID of the job.
func (o BatchOperationsJobOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchOperationsJob) pulumi.StringPtrOutput { return v.JobId }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BatchOperationsJobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchOperationsJob) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// allows batch operations to update metadata for objects in bucket
// Structure is documented below.
func (o BatchOperationsJobOutput) PutMetadata() BatchOperationsJobPutMetadataPtrOutput {
	return o.ApplyT(func(v *BatchOperationsJob) BatchOperationsJobPutMetadataPtrOutput { return v.PutMetadata }).(BatchOperationsJobPutMetadataPtrOutput)
}

// allows to update temporary hold or eventBased hold for objects in bucket.
// Structure is documented below.
func (o BatchOperationsJobOutput) PutObjectHold() BatchOperationsJobPutObjectHoldPtrOutput {
	return o.ApplyT(func(v *BatchOperationsJob) BatchOperationsJobPutObjectHoldPtrOutput { return v.PutObjectHold }).(BatchOperationsJobPutObjectHoldPtrOutput)
}

// allows to update encryption key for objects in bucket.
// Structure is documented below.
func (o BatchOperationsJobOutput) RewriteObject() BatchOperationsJobRewriteObjectPtrOutput {
	return o.ApplyT(func(v *BatchOperationsJob) BatchOperationsJobRewriteObjectPtrOutput { return v.RewriteObject }).(BatchOperationsJobRewriteObjectPtrOutput)
}

// The time that the job was scheduled.
func (o BatchOperationsJobOutput) ScheduleTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchOperationsJob) pulumi.StringOutput { return v.ScheduleTime }).(pulumi.StringOutput)
}

// State of the job.
func (o BatchOperationsJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchOperationsJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The timestamp at which this storage batch operation was most recently updated.
func (o BatchOperationsJobOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchOperationsJob) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type BatchOperationsJobArrayOutput struct{ *pulumi.OutputState }

func (BatchOperationsJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BatchOperationsJob)(nil)).Elem()
}

func (o BatchOperationsJobArrayOutput) ToBatchOperationsJobArrayOutput() BatchOperationsJobArrayOutput {
	return o
}

func (o BatchOperationsJobArrayOutput) ToBatchOperationsJobArrayOutputWithContext(ctx context.Context) BatchOperationsJobArrayOutput {
	return o
}

func (o BatchOperationsJobArrayOutput) Index(i pulumi.IntInput) BatchOperationsJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BatchOperationsJob {
		return vs[0].([]*BatchOperationsJob)[vs[1].(int)]
	}).(BatchOperationsJobOutput)
}

type BatchOperationsJobMapOutput struct{ *pulumi.OutputState }

func (BatchOperationsJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BatchOperationsJob)(nil)).Elem()
}

func (o BatchOperationsJobMapOutput) ToBatchOperationsJobMapOutput() BatchOperationsJobMapOutput {
	return o
}

func (o BatchOperationsJobMapOutput) ToBatchOperationsJobMapOutputWithContext(ctx context.Context) BatchOperationsJobMapOutput {
	return o
}

func (o BatchOperationsJobMapOutput) MapIndex(k pulumi.StringInput) BatchOperationsJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BatchOperationsJob {
		return vs[0].(map[string]*BatchOperationsJob)[vs[1].(string)]
	}).(BatchOperationsJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BatchOperationsJobInput)(nil)).Elem(), &BatchOperationsJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*BatchOperationsJobArrayInput)(nil)).Elem(), BatchOperationsJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BatchOperationsJobMapInput)(nil)).Elem(), BatchOperationsJobMap{})
	pulumi.RegisterOutputType(BatchOperationsJobOutput{})
	pulumi.RegisterOutputType(BatchOperationsJobArrayOutput{})
	pulumi.RegisterOutputType(BatchOperationsJobMapOutput{})
}
