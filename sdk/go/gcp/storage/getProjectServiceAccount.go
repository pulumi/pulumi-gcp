// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the email address of a project's unique [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts).
//
// For each Google Cloud project, Google maintains a unique service account which
// is used as the identity for various Google Cloud Storage operations, including
// operations involving
// [customer-managed encryption keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys)
// and those involving
// [storage notifications to pub/sub](https://cloud.google.com/storage/docs/gsutil/commands/notification).
// This automatic Google service account requires access to the relevant Cloud KMS keys or pub/sub topics, respectively, in order for Cloud Storage to use
// these customer-managed resources.
//
// The service account has a well-known, documented naming format which is parameterised on the numeric Google project ID.
// However, as noted in [the docs](https://cloud.google.com/storage/docs/projects#service-accounts), it is only created when certain relevant actions occur which
// presuppose its existence.
// These actions include calling a [Cloud Storage API endpoint](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get) to yield the
// service account's identity, or performing some operations in the UI which must use the service account's identity, such as attempting to list Cloud KMS keys
// on the bucket creation page.
//
// Use of this data source calls the relevant API endpoint to obtain the service account's identity and thus ensures it exists prior to any API operations
// which demand its existence, such as specifying it in Cloud IAM policy.
// Always prefer to use this data source over interpolating the project ID into the well-known format for this service account, as the latter approach may cause
// provider update errors in cases where the service account does not yet exist.
//
// >  When you write provider code which uses features depending on this service account *and* your provider code adds the service account in IAM policy on other resources,
//    you must take care for race conditions between the establishment of the IAM policy and creation of the relevant Cloud Storage resource.
//    Cloud Storage APIs will require permissions on resources such as pub/sub topics or Cloud KMS keys to exist *before* the attempt to utilise them in a
//    bucket configuration, otherwise the API calls will fail.
//    You may need to use `dependsOn` to create an explicit dependency between the IAM policy resource and the Cloud Storage resource which depends on it.
//    See the examples here and in the `storage.Notification` resource.
//
// For more information see
// [the API reference](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount).
//
// ## Example Usage
// ### Pub/Sub Notifications
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/pubsub"
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		gcsAccount, err := storage.GetProjectServiceAccount(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = pubsub.NewTopicIAMBinding(ctx, "binding", &pubsub.TopicIAMBindingArgs{
// 			Topic: pulumi.Any(google_pubsub_topic.Topic.Name),
// 			Role:  pulumi.String("roles/pubsub.publisher"),
// 			Members: pulumi.StringArray{
// 				pulumi.String(fmt.Sprintf("%v%v", "serviceAccount:", gcsAccount.EmailAddress)),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Cloud KMS Keys
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/kms"
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		gcsAccount, err := storage.GetProjectServiceAccount(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		binding, err := kms.NewCryptoKeyIAMBinding(ctx, "binding", &kms.CryptoKeyIAMBindingArgs{
// 			CryptoKeyId: pulumi.String("your-crypto-key-id"),
// 			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
// 			Members: pulumi.StringArray{
// 				pulumi.String(fmt.Sprintf("%v%v", "serviceAccount:", gcsAccount.EmailAddress)),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
// 			Encryption: &storage.BucketEncryptionArgs{
// 				DefaultKmsKeyName: pulumi.String("your-crypto-key-id"),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			binding,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetProjectServiceAccount(ctx *pulumi.Context, args *GetProjectServiceAccountArgs, opts ...pulumi.InvokeOption) (*GetProjectServiceAccountResult, error) {
	var rv GetProjectServiceAccountResult
	err := ctx.Invoke("gcp:storage/getProjectServiceAccount:getProjectServiceAccount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectServiceAccount.
type GetProjectServiceAccountArgs struct {
	// The project the unique service account was created for. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The project the lookup originates from. This field is used if you are making the request
	// from a different account than the one you are finding the service account for.
	UserProject *string `pulumi:"userProject"`
}

// A collection of values returned by getProjectServiceAccount.
type GetProjectServiceAccountResult struct {
	// The email address of the service account. This value is often used to refer to the service account
	// in order to grant IAM permissions.
	EmailAddress string `pulumi:"emailAddress"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	Project     string  `pulumi:"project"`
	UserProject *string `pulumi:"userProject"`
}

func GetProjectServiceAccountOutput(ctx *pulumi.Context, args GetProjectServiceAccountOutputArgs, opts ...pulumi.InvokeOption) GetProjectServiceAccountResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetProjectServiceAccountResult, error) {
			args := v.(GetProjectServiceAccountArgs)
			r, err := GetProjectServiceAccount(ctx, &args, opts...)
			return *r, err
		}).(GetProjectServiceAccountResultOutput)
}

// A collection of arguments for invoking getProjectServiceAccount.
type GetProjectServiceAccountOutputArgs struct {
	// The project the unique service account was created for. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The project the lookup originates from. This field is used if you are making the request
	// from a different account than the one you are finding the service account for.
	UserProject pulumi.StringPtrInput `pulumi:"userProject"`
}

func (GetProjectServiceAccountOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectServiceAccountArgs)(nil)).Elem()
}

// A collection of values returned by getProjectServiceAccount.
type GetProjectServiceAccountResultOutput struct{ *pulumi.OutputState }

func (GetProjectServiceAccountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectServiceAccountResult)(nil)).Elem()
}

func (o GetProjectServiceAccountResultOutput) ToGetProjectServiceAccountResultOutput() GetProjectServiceAccountResultOutput {
	return o
}

func (o GetProjectServiceAccountResultOutput) ToGetProjectServiceAccountResultOutputWithContext(ctx context.Context) GetProjectServiceAccountResultOutput {
	return o
}

// The email address of the service account. This value is often used to refer to the service account
// in order to grant IAM permissions.
func (o GetProjectServiceAccountResultOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectServiceAccountResult) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProjectServiceAccountResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectServiceAccountResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProjectServiceAccountResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectServiceAccountResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetProjectServiceAccountResultOutput) UserProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectServiceAccountResult) *string { return v.UserProject }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectServiceAccountResultOutput{})
}
