// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-gcp/sdk/v2/go/gcp"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gcp:storage/bucket:Bucket":
		r, err = NewBucket(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/bucketACL:BucketACL":
		r, err = NewBucketACL(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/bucketAccessControl:BucketAccessControl":
		r, err = NewBucketAccessControl(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/bucketIAMBinding:BucketIAMBinding":
		r, err = NewBucketIAMBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/bucketIAMMember:BucketIAMMember":
		r, err = NewBucketIAMMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/bucketIAMPolicy:BucketIAMPolicy":
		r, err = NewBucketIAMPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/bucketObject:BucketObject":
		r, err = NewBucketObject(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/defaultObjectACL:DefaultObjectACL":
		r, err = NewDefaultObjectACL(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/defaultObjectAccessControl:DefaultObjectAccessControl":
		r, err = NewDefaultObjectAccessControl(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/hmacKey:HmacKey":
		r, err = NewHmacKey(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/notification:Notification":
		r, err = NewNotification(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/objectACL:ObjectACL":
		r, err = NewObjectACL(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/objectAccessControl:ObjectAccessControl":
		r, err = NewObjectAccessControl(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:storage/transferJob:TransferJob":
		r, err = NewTransferJob(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := gcp.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/bucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/bucketACL",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/bucketAccessControl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/bucketIAMBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/bucketIAMMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/bucketIAMPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/bucketObject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/defaultObjectACL",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/defaultObjectAccessControl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/hmacKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/notification",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/objectACL",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/objectAccessControl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"storage/transferJob",
		&module{version},
	)
}
