// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Storage Hmac Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/serviceAccount"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceAccount, err := serviceAccount.NewAccount(ctx, "serviceAccount", &serviceAccount.AccountArgs{
//				AccountId: pulumi.String("my-svc-acc"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewHmacKey(ctx, "key", &storage.HmacKeyArgs{
//				ServiceAccountEmail: serviceAccount.Email,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # HmacKey can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:storage/hmacKey:HmacKey default projects/{{project}}/hmacKeys/{{access_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:storage/hmacKey:HmacKey default {{project}}/{{access_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:storage/hmacKey:HmacKey default {{access_id}}
//
// ```
type HmacKey struct {
	pulumi.CustomResourceState

	// The access ID of the HMAC Key.
	AccessId pulumi.StringOutput `pulumi:"accessId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// HMAC secret key material.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// The email address of the key's associated service account.
	ServiceAccountEmail pulumi.StringOutput `pulumi:"serviceAccountEmail"`
	// The state of the key. Can be set to one of ACTIVE, INACTIVE.
	// Default value is `ACTIVE`.
	// Possible values are `ACTIVE` and `INACTIVE`.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// 'The creation time of the HMAC key in RFC 3339 format. '
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// 'The last modification time of the HMAC key metadata in RFC 3339 format.'
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewHmacKey registers a new resource with the given unique name, arguments, and options.
func NewHmacKey(ctx *pulumi.Context,
	name string, args *HmacKeyArgs, opts ...pulumi.ResourceOption) (*HmacKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceAccountEmail == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountEmail'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	var resource HmacKey
	err := ctx.RegisterResource("gcp:storage/hmacKey:HmacKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHmacKey gets an existing HmacKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHmacKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HmacKeyState, opts ...pulumi.ResourceOption) (*HmacKey, error) {
	var resource HmacKey
	err := ctx.ReadResource("gcp:storage/hmacKey:HmacKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HmacKey resources.
type hmacKeyState struct {
	// The access ID of the HMAC Key.
	AccessId *string `pulumi:"accessId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// HMAC secret key material.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Secret *string `pulumi:"secret"`
	// The email address of the key's associated service account.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
	// The state of the key. Can be set to one of ACTIVE, INACTIVE.
	// Default value is `ACTIVE`.
	// Possible values are `ACTIVE` and `INACTIVE`.
	State *string `pulumi:"state"`
	// 'The creation time of the HMAC key in RFC 3339 format. '
	TimeCreated *string `pulumi:"timeCreated"`
	// 'The last modification time of the HMAC key metadata in RFC 3339 format.'
	Updated *string `pulumi:"updated"`
}

type HmacKeyState struct {
	// The access ID of the HMAC Key.
	AccessId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// HMAC secret key material.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Secret pulumi.StringPtrInput
	// The email address of the key's associated service account.
	ServiceAccountEmail pulumi.StringPtrInput
	// The state of the key. Can be set to one of ACTIVE, INACTIVE.
	// Default value is `ACTIVE`.
	// Possible values are `ACTIVE` and `INACTIVE`.
	State pulumi.StringPtrInput
	// 'The creation time of the HMAC key in RFC 3339 format. '
	TimeCreated pulumi.StringPtrInput
	// 'The last modification time of the HMAC key metadata in RFC 3339 format.'
	Updated pulumi.StringPtrInput
}

func (HmacKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*hmacKeyState)(nil)).Elem()
}

type hmacKeyArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The email address of the key's associated service account.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
	// The state of the key. Can be set to one of ACTIVE, INACTIVE.
	// Default value is `ACTIVE`.
	// Possible values are `ACTIVE` and `INACTIVE`.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a HmacKey resource.
type HmacKeyArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The email address of the key's associated service account.
	ServiceAccountEmail pulumi.StringInput
	// The state of the key. Can be set to one of ACTIVE, INACTIVE.
	// Default value is `ACTIVE`.
	// Possible values are `ACTIVE` and `INACTIVE`.
	State pulumi.StringPtrInput
}

func (HmacKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hmacKeyArgs)(nil)).Elem()
}

type HmacKeyInput interface {
	pulumi.Input

	ToHmacKeyOutput() HmacKeyOutput
	ToHmacKeyOutputWithContext(ctx context.Context) HmacKeyOutput
}

func (*HmacKey) ElementType() reflect.Type {
	return reflect.TypeOf((**HmacKey)(nil)).Elem()
}

func (i *HmacKey) ToHmacKeyOutput() HmacKeyOutput {
	return i.ToHmacKeyOutputWithContext(context.Background())
}

func (i *HmacKey) ToHmacKeyOutputWithContext(ctx context.Context) HmacKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmacKeyOutput)
}

// HmacKeyArrayInput is an input type that accepts HmacKeyArray and HmacKeyArrayOutput values.
// You can construct a concrete instance of `HmacKeyArrayInput` via:
//
//	HmacKeyArray{ HmacKeyArgs{...} }
type HmacKeyArrayInput interface {
	pulumi.Input

	ToHmacKeyArrayOutput() HmacKeyArrayOutput
	ToHmacKeyArrayOutputWithContext(context.Context) HmacKeyArrayOutput
}

type HmacKeyArray []HmacKeyInput

func (HmacKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HmacKey)(nil)).Elem()
}

func (i HmacKeyArray) ToHmacKeyArrayOutput() HmacKeyArrayOutput {
	return i.ToHmacKeyArrayOutputWithContext(context.Background())
}

func (i HmacKeyArray) ToHmacKeyArrayOutputWithContext(ctx context.Context) HmacKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmacKeyArrayOutput)
}

// HmacKeyMapInput is an input type that accepts HmacKeyMap and HmacKeyMapOutput values.
// You can construct a concrete instance of `HmacKeyMapInput` via:
//
//	HmacKeyMap{ "key": HmacKeyArgs{...} }
type HmacKeyMapInput interface {
	pulumi.Input

	ToHmacKeyMapOutput() HmacKeyMapOutput
	ToHmacKeyMapOutputWithContext(context.Context) HmacKeyMapOutput
}

type HmacKeyMap map[string]HmacKeyInput

func (HmacKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HmacKey)(nil)).Elem()
}

func (i HmacKeyMap) ToHmacKeyMapOutput() HmacKeyMapOutput {
	return i.ToHmacKeyMapOutputWithContext(context.Background())
}

func (i HmacKeyMap) ToHmacKeyMapOutputWithContext(ctx context.Context) HmacKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmacKeyMapOutput)
}

type HmacKeyOutput struct{ *pulumi.OutputState }

func (HmacKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HmacKey)(nil)).Elem()
}

func (o HmacKeyOutput) ToHmacKeyOutput() HmacKeyOutput {
	return o
}

func (o HmacKeyOutput) ToHmacKeyOutputWithContext(ctx context.Context) HmacKeyOutput {
	return o
}

// The access ID of the HMAC Key.
func (o HmacKeyOutput) AccessId() pulumi.StringOutput {
	return o.ApplyT(func(v *HmacKey) pulumi.StringOutput { return v.AccessId }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o HmacKeyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *HmacKey) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// HMAC secret key material.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o HmacKeyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *HmacKey) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// The email address of the key's associated service account.
func (o HmacKeyOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *HmacKey) pulumi.StringOutput { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

// The state of the key. Can be set to one of ACTIVE, INACTIVE.
// Default value is `ACTIVE`.
// Possible values are `ACTIVE` and `INACTIVE`.
func (o HmacKeyOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HmacKey) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// 'The creation time of the HMAC key in RFC 3339 format. '
func (o HmacKeyOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *HmacKey) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// 'The last modification time of the HMAC key metadata in RFC 3339 format.'
func (o HmacKeyOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *HmacKey) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

type HmacKeyArrayOutput struct{ *pulumi.OutputState }

func (HmacKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HmacKey)(nil)).Elem()
}

func (o HmacKeyArrayOutput) ToHmacKeyArrayOutput() HmacKeyArrayOutput {
	return o
}

func (o HmacKeyArrayOutput) ToHmacKeyArrayOutputWithContext(ctx context.Context) HmacKeyArrayOutput {
	return o
}

func (o HmacKeyArrayOutput) Index(i pulumi.IntInput) HmacKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HmacKey {
		return vs[0].([]*HmacKey)[vs[1].(int)]
	}).(HmacKeyOutput)
}

type HmacKeyMapOutput struct{ *pulumi.OutputState }

func (HmacKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HmacKey)(nil)).Elem()
}

func (o HmacKeyMapOutput) ToHmacKeyMapOutput() HmacKeyMapOutput {
	return o
}

func (o HmacKeyMapOutput) ToHmacKeyMapOutputWithContext(ctx context.Context) HmacKeyMapOutput {
	return o
}

func (o HmacKeyMapOutput) MapIndex(k pulumi.StringInput) HmacKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HmacKey {
		return vs[0].(map[string]*HmacKey)[vs[1].(string)]
	}).(HmacKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HmacKeyInput)(nil)).Elem(), &HmacKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*HmacKeyArrayInput)(nil)).Elem(), HmacKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HmacKeyMapInput)(nil)).Elem(), HmacKeyMap{})
	pulumi.RegisterOutputType(HmacKeyOutput{})
	pulumi.RegisterOutputType(HmacKeyArrayOutput{})
	pulumi.RegisterOutputType(HmacKeyMapOutput{})
}
