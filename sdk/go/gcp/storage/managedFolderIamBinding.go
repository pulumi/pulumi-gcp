// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Storage ManagedFolder. Each of these resources serves a different use case:
//
// * `storage.ManagedFolderIamPolicy`: Authoritative. Sets the IAM policy for the managedfolder and replaces any existing policy already attached.
// * `storage.ManagedFolderIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the managedfolder are preserved.
// * `storage.ManagedFolderIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the managedfolder are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `storage.ManagedFolderIamPolicy`: Retrieves the IAM policy for the managedfolder
//
// > **Note:** `storage.ManagedFolderIamPolicy` **cannot** be used in conjunction with `storage.ManagedFolderIamBinding` and `storage.ManagedFolderIamMember` or they will fight over what your policy should be.
//
// > **Note:** `storage.ManagedFolderIamBinding` resources **can be** used in conjunction with `storage.ManagedFolderIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## storage.ManagedFolderIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/storage.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				PolicyData:    pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/storage.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				PolicyData:    pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## storage.ManagedFolderIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				Role:          pulumi.String("roles/storage.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				Role:          pulumi.String("roles/storage.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &storage.ManagedFolderIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## storage.ManagedFolderIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				Role:          pulumi.String("roles/storage.admin"),
//				Member:        pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				Role:          pulumi.String("roles/storage.admin"),
//				Member:        pulumi.String("user:jane@example.com"),
//				Condition: &storage.ManagedFolderIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## > **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
// ---
//
// # IAM policy for Cloud Storage ManagedFolder
// Three different resources help you manage your IAM policy for Cloud Storage ManagedFolder. Each of these resources serves a different use case:
//
// * `storage.ManagedFolderIamPolicy`: Authoritative. Sets the IAM policy for the managedfolder and replaces any existing policy already attached.
// * `storage.ManagedFolderIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the managedfolder are preserved.
// * `storage.ManagedFolderIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the managedfolder are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `storage.ManagedFolderIamPolicy`: Retrieves the IAM policy for the managedfolder
//
// > **Note:** `storage.ManagedFolderIamPolicy` **cannot** be used in conjunction with `storage.ManagedFolderIamBinding` and `storage.ManagedFolderIamMember` or they will fight over what your policy should be.
//
// > **Note:** `storage.ManagedFolderIamBinding` resources **can be** used in conjunction with `storage.ManagedFolderIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## storage.ManagedFolderIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/storage.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				PolicyData:    pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/storage.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				PolicyData:    pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## storage.ManagedFolderIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				Role:          pulumi.String("roles/storage.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				Role:          pulumi.String("roles/storage.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &storage.ManagedFolderIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## storage.ManagedFolderIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				Role:          pulumi.String("roles/storage.admin"),
//				Member:        pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
//				Bucket:        pulumi.Any(folder.Bucket),
//				ManagedFolder: pulumi.Any(folder.Name),
//				Role:          pulumi.String("roles/storage.admin"),
//				Member:        pulumi.String("user:jane@example.com"),
//				Condition: &storage.ManagedFolderIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * b/{{bucket}}/managedFolders/{{managed_folder}}
//
// * {{bucket}}/{{managed_folder}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Cloud Storage managedfolder IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding editor "b/{{bucket}}/managedFolders/{{managed_folder}} roles/storage.objectViewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding editor "b/{{bucket}}/managedFolders/{{managed_folder}} roles/storage.objectViewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding editor b/{{bucket}}/managedFolders/{{managed_folder}}
// ```
//
// -> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ManagedFolderIamBinding struct {
	pulumi.CustomResourceState

	// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition ManagedFolderIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	ManagedFolder pulumi.StringOutput `pulumi:"managedFolder"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. Only one
	// `storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewManagedFolderIamBinding registers a new resource with the given unique name, arguments, and options.
func NewManagedFolderIamBinding(ctx *pulumi.Context,
	name string, args *ManagedFolderIamBindingArgs, opts ...pulumi.ResourceOption) (*ManagedFolderIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.ManagedFolder == nil {
		return nil, errors.New("invalid value for required argument 'ManagedFolder'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedFolderIamBinding
	err := ctx.RegisterResource("gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedFolderIamBinding gets an existing ManagedFolderIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedFolderIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedFolderIamBindingState, opts ...pulumi.ResourceOption) (*ManagedFolderIamBinding, error) {
	var resource ManagedFolderIamBinding
	err := ctx.ReadResource("gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedFolderIamBinding resources.
type managedFolderIamBindingState struct {
	// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
	Bucket *string `pulumi:"bucket"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *ManagedFolderIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	ManagedFolder *string `pulumi:"managedFolder"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type ManagedFolderIamBindingState struct {
	// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
	Bucket pulumi.StringPtrInput
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition ManagedFolderIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	ManagedFolder pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (ManagedFolderIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedFolderIamBindingState)(nil)).Elem()
}

type managedFolderIamBindingArgs struct {
	// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
	Bucket string `pulumi:"bucket"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *ManagedFolderIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	ManagedFolder string `pulumi:"managedFolder"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ManagedFolderIamBinding resource.
type ManagedFolderIamBindingArgs struct {
	// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
	Bucket pulumi.StringInput
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition ManagedFolderIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	ManagedFolder pulumi.StringInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (ManagedFolderIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedFolderIamBindingArgs)(nil)).Elem()
}

type ManagedFolderIamBindingInput interface {
	pulumi.Input

	ToManagedFolderIamBindingOutput() ManagedFolderIamBindingOutput
	ToManagedFolderIamBindingOutputWithContext(ctx context.Context) ManagedFolderIamBindingOutput
}

func (*ManagedFolderIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedFolderIamBinding)(nil)).Elem()
}

func (i *ManagedFolderIamBinding) ToManagedFolderIamBindingOutput() ManagedFolderIamBindingOutput {
	return i.ToManagedFolderIamBindingOutputWithContext(context.Background())
}

func (i *ManagedFolderIamBinding) ToManagedFolderIamBindingOutputWithContext(ctx context.Context) ManagedFolderIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFolderIamBindingOutput)
}

// ManagedFolderIamBindingArrayInput is an input type that accepts ManagedFolderIamBindingArray and ManagedFolderIamBindingArrayOutput values.
// You can construct a concrete instance of `ManagedFolderIamBindingArrayInput` via:
//
//	ManagedFolderIamBindingArray{ ManagedFolderIamBindingArgs{...} }
type ManagedFolderIamBindingArrayInput interface {
	pulumi.Input

	ToManagedFolderIamBindingArrayOutput() ManagedFolderIamBindingArrayOutput
	ToManagedFolderIamBindingArrayOutputWithContext(context.Context) ManagedFolderIamBindingArrayOutput
}

type ManagedFolderIamBindingArray []ManagedFolderIamBindingInput

func (ManagedFolderIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedFolderIamBinding)(nil)).Elem()
}

func (i ManagedFolderIamBindingArray) ToManagedFolderIamBindingArrayOutput() ManagedFolderIamBindingArrayOutput {
	return i.ToManagedFolderIamBindingArrayOutputWithContext(context.Background())
}

func (i ManagedFolderIamBindingArray) ToManagedFolderIamBindingArrayOutputWithContext(ctx context.Context) ManagedFolderIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFolderIamBindingArrayOutput)
}

// ManagedFolderIamBindingMapInput is an input type that accepts ManagedFolderIamBindingMap and ManagedFolderIamBindingMapOutput values.
// You can construct a concrete instance of `ManagedFolderIamBindingMapInput` via:
//
//	ManagedFolderIamBindingMap{ "key": ManagedFolderIamBindingArgs{...} }
type ManagedFolderIamBindingMapInput interface {
	pulumi.Input

	ToManagedFolderIamBindingMapOutput() ManagedFolderIamBindingMapOutput
	ToManagedFolderIamBindingMapOutputWithContext(context.Context) ManagedFolderIamBindingMapOutput
}

type ManagedFolderIamBindingMap map[string]ManagedFolderIamBindingInput

func (ManagedFolderIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedFolderIamBinding)(nil)).Elem()
}

func (i ManagedFolderIamBindingMap) ToManagedFolderIamBindingMapOutput() ManagedFolderIamBindingMapOutput {
	return i.ToManagedFolderIamBindingMapOutputWithContext(context.Background())
}

func (i ManagedFolderIamBindingMap) ToManagedFolderIamBindingMapOutputWithContext(ctx context.Context) ManagedFolderIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFolderIamBindingMapOutput)
}

type ManagedFolderIamBindingOutput struct{ *pulumi.OutputState }

func (ManagedFolderIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedFolderIamBinding)(nil)).Elem()
}

func (o ManagedFolderIamBindingOutput) ToManagedFolderIamBindingOutput() ManagedFolderIamBindingOutput {
	return o
}

func (o ManagedFolderIamBindingOutput) ToManagedFolderIamBindingOutputWithContext(ctx context.Context) ManagedFolderIamBindingOutput {
	return o
}

// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
func (o ManagedFolderIamBindingOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolderIamBinding) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o ManagedFolderIamBindingOutput) Condition() ManagedFolderIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *ManagedFolderIamBinding) ManagedFolderIamBindingConditionPtrOutput { return v.Condition }).(ManagedFolderIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o ManagedFolderIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolderIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o ManagedFolderIamBindingOutput) ManagedFolder() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolderIamBinding) pulumi.StringOutput { return v.ManagedFolder }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o ManagedFolderIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedFolderIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. Only one
// `storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o ManagedFolderIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolderIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ManagedFolderIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ManagedFolderIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedFolderIamBinding)(nil)).Elem()
}

func (o ManagedFolderIamBindingArrayOutput) ToManagedFolderIamBindingArrayOutput() ManagedFolderIamBindingArrayOutput {
	return o
}

func (o ManagedFolderIamBindingArrayOutput) ToManagedFolderIamBindingArrayOutputWithContext(ctx context.Context) ManagedFolderIamBindingArrayOutput {
	return o
}

func (o ManagedFolderIamBindingArrayOutput) Index(i pulumi.IntInput) ManagedFolderIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedFolderIamBinding {
		return vs[0].([]*ManagedFolderIamBinding)[vs[1].(int)]
	}).(ManagedFolderIamBindingOutput)
}

type ManagedFolderIamBindingMapOutput struct{ *pulumi.OutputState }

func (ManagedFolderIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedFolderIamBinding)(nil)).Elem()
}

func (o ManagedFolderIamBindingMapOutput) ToManagedFolderIamBindingMapOutput() ManagedFolderIamBindingMapOutput {
	return o
}

func (o ManagedFolderIamBindingMapOutput) ToManagedFolderIamBindingMapOutputWithContext(ctx context.Context) ManagedFolderIamBindingMapOutput {
	return o
}

func (o ManagedFolderIamBindingMapOutput) MapIndex(k pulumi.StringInput) ManagedFolderIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedFolderIamBinding {
		return vs[0].(map[string]*ManagedFolderIamBinding)[vs[1].(string)]
	}).(ManagedFolderIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFolderIamBindingInput)(nil)).Elem(), &ManagedFolderIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFolderIamBindingArrayInput)(nil)).Elem(), ManagedFolderIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFolderIamBindingMapInput)(nil)).Elem(), ManagedFolderIamBindingMap{})
	pulumi.RegisterOutputType(ManagedFolderIamBindingOutput{})
	pulumi.RegisterOutputType(ManagedFolderIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ManagedFolderIamBindingMapOutput{})
}
