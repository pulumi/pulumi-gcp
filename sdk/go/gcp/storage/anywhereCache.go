// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Google Cloud Storage (GCS) Anywhere Cache feature allows users to
// create SSD backed zonal read cache for their buckets. These zonal
// caches are co-located with the customers compute engines to provide
// cost efficiency.
//
// ## Example Usage
//
// ### Storage Anywhere Cache Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/storage"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:     pulumi.String("bucket-name"),
//				Location: pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			destroyWait5000Seconds, err := time.NewSleep(ctx, "destroy_wait_5000_seconds", &time.SleepArgs{
//				DestroyDuration: "5000s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				bucket,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewAnywhereCache(ctx, "cache", &storage.AnywhereCacheArgs{
//				Bucket: bucket.Name,
//				Zone:   pulumi.String("us-central1-f"),
//				Ttl:    pulumi.String("3601s"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				destroyWait5000Seconds,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AnywhereCache can be imported using any of these accepted formats:
//
// * `b/{{bucket}}/anywhereCaches/{{anywhere_cache_id}}`
//
// * `{{bucket}}/{{anywhere_cache_id}}`
//
// When using the `pulumi import` command, AnywhereCache can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:storage/anywhereCache:AnywhereCache default b/{{bucket}}/anywhereCaches/{{anywhere_cache_id}}
// ```
//
// ```sh
// $ pulumi import gcp:storage/anywhereCache:AnywhereCache default {{bucket}}/{{anywhere_cache_id}}
// ```
type AnywhereCache struct {
	pulumi.CustomResourceState

	// The cache admission policy dictates whether a block should be inserted upon a cache miss.
	// Default value is `admit-on-first-miss`.
	// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
	AdmissionPolicy pulumi.StringPtrOutput `pulumi:"admissionPolicy"`
	// The ID of the Anywhere cache instance.
	AnywhereCacheId pulumi.StringOutput `pulumi:"anywhereCacheId"`
	// A reference to Bucket resource
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The creation time of the cache instance in RFC 3339 format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// True if the cache instance has an active Update long-running operation.
	PendingUpdate pulumi.BoolOutput `pulumi:"pendingUpdate"`
	// The current state of the cache instance.
	State pulumi.StringOutput `pulumi:"state"`
	// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
	Ttl pulumi.StringPtrOutput `pulumi:"ttl"`
	// The modification time of the cache instance metadata in RFC 3339 format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewAnywhereCache registers a new resource with the given unique name, arguments, and options.
func NewAnywhereCache(ctx *pulumi.Context,
	name string, args *AnywhereCacheArgs, opts ...pulumi.ResourceOption) (*AnywhereCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnywhereCache
	err := ctx.RegisterResource("gcp:storage/anywhereCache:AnywhereCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnywhereCache gets an existing AnywhereCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnywhereCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnywhereCacheState, opts ...pulumi.ResourceOption) (*AnywhereCache, error) {
	var resource AnywhereCache
	err := ctx.ReadResource("gcp:storage/anywhereCache:AnywhereCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnywhereCache resources.
type anywhereCacheState struct {
	// The cache admission policy dictates whether a block should be inserted upon a cache miss.
	// Default value is `admit-on-first-miss`.
	// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
	AdmissionPolicy *string `pulumi:"admissionPolicy"`
	// The ID of the Anywhere cache instance.
	AnywhereCacheId *string `pulumi:"anywhereCacheId"`
	// A reference to Bucket resource
	Bucket *string `pulumi:"bucket"`
	// The creation time of the cache instance in RFC 3339 format.
	CreateTime *string `pulumi:"createTime"`
	// True if the cache instance has an active Update long-running operation.
	PendingUpdate *bool `pulumi:"pendingUpdate"`
	// The current state of the cache instance.
	State *string `pulumi:"state"`
	// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
	Ttl *string `pulumi:"ttl"`
	// The modification time of the cache instance metadata in RFC 3339 format.
	UpdateTime *string `pulumi:"updateTime"`
	// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
	Zone *string `pulumi:"zone"`
}

type AnywhereCacheState struct {
	// The cache admission policy dictates whether a block should be inserted upon a cache miss.
	// Default value is `admit-on-first-miss`.
	// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
	AdmissionPolicy pulumi.StringPtrInput
	// The ID of the Anywhere cache instance.
	AnywhereCacheId pulumi.StringPtrInput
	// A reference to Bucket resource
	Bucket pulumi.StringPtrInput
	// The creation time of the cache instance in RFC 3339 format.
	CreateTime pulumi.StringPtrInput
	// True if the cache instance has an active Update long-running operation.
	PendingUpdate pulumi.BoolPtrInput
	// The current state of the cache instance.
	State pulumi.StringPtrInput
	// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
	Ttl pulumi.StringPtrInput
	// The modification time of the cache instance metadata in RFC 3339 format.
	UpdateTime pulumi.StringPtrInput
	// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
	Zone pulumi.StringPtrInput
}

func (AnywhereCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*anywhereCacheState)(nil)).Elem()
}

type anywhereCacheArgs struct {
	// The cache admission policy dictates whether a block should be inserted upon a cache miss.
	// Default value is `admit-on-first-miss`.
	// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
	AdmissionPolicy *string `pulumi:"admissionPolicy"`
	// A reference to Bucket resource
	Bucket string `pulumi:"bucket"`
	// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
	Ttl *string `pulumi:"ttl"`
	// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a AnywhereCache resource.
type AnywhereCacheArgs struct {
	// The cache admission policy dictates whether a block should be inserted upon a cache miss.
	// Default value is `admit-on-first-miss`.
	// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
	AdmissionPolicy pulumi.StringPtrInput
	// A reference to Bucket resource
	Bucket pulumi.StringInput
	// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
	Ttl pulumi.StringPtrInput
	// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
	Zone pulumi.StringInput
}

func (AnywhereCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*anywhereCacheArgs)(nil)).Elem()
}

type AnywhereCacheInput interface {
	pulumi.Input

	ToAnywhereCacheOutput() AnywhereCacheOutput
	ToAnywhereCacheOutputWithContext(ctx context.Context) AnywhereCacheOutput
}

func (*AnywhereCache) ElementType() reflect.Type {
	return reflect.TypeOf((**AnywhereCache)(nil)).Elem()
}

func (i *AnywhereCache) ToAnywhereCacheOutput() AnywhereCacheOutput {
	return i.ToAnywhereCacheOutputWithContext(context.Background())
}

func (i *AnywhereCache) ToAnywhereCacheOutputWithContext(ctx context.Context) AnywhereCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnywhereCacheOutput)
}

// AnywhereCacheArrayInput is an input type that accepts AnywhereCacheArray and AnywhereCacheArrayOutput values.
// You can construct a concrete instance of `AnywhereCacheArrayInput` via:
//
//	AnywhereCacheArray{ AnywhereCacheArgs{...} }
type AnywhereCacheArrayInput interface {
	pulumi.Input

	ToAnywhereCacheArrayOutput() AnywhereCacheArrayOutput
	ToAnywhereCacheArrayOutputWithContext(context.Context) AnywhereCacheArrayOutput
}

type AnywhereCacheArray []AnywhereCacheInput

func (AnywhereCacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnywhereCache)(nil)).Elem()
}

func (i AnywhereCacheArray) ToAnywhereCacheArrayOutput() AnywhereCacheArrayOutput {
	return i.ToAnywhereCacheArrayOutputWithContext(context.Background())
}

func (i AnywhereCacheArray) ToAnywhereCacheArrayOutputWithContext(ctx context.Context) AnywhereCacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnywhereCacheArrayOutput)
}

// AnywhereCacheMapInput is an input type that accepts AnywhereCacheMap and AnywhereCacheMapOutput values.
// You can construct a concrete instance of `AnywhereCacheMapInput` via:
//
//	AnywhereCacheMap{ "key": AnywhereCacheArgs{...} }
type AnywhereCacheMapInput interface {
	pulumi.Input

	ToAnywhereCacheMapOutput() AnywhereCacheMapOutput
	ToAnywhereCacheMapOutputWithContext(context.Context) AnywhereCacheMapOutput
}

type AnywhereCacheMap map[string]AnywhereCacheInput

func (AnywhereCacheMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnywhereCache)(nil)).Elem()
}

func (i AnywhereCacheMap) ToAnywhereCacheMapOutput() AnywhereCacheMapOutput {
	return i.ToAnywhereCacheMapOutputWithContext(context.Background())
}

func (i AnywhereCacheMap) ToAnywhereCacheMapOutputWithContext(ctx context.Context) AnywhereCacheMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnywhereCacheMapOutput)
}

type AnywhereCacheOutput struct{ *pulumi.OutputState }

func (AnywhereCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnywhereCache)(nil)).Elem()
}

func (o AnywhereCacheOutput) ToAnywhereCacheOutput() AnywhereCacheOutput {
	return o
}

func (o AnywhereCacheOutput) ToAnywhereCacheOutputWithContext(ctx context.Context) AnywhereCacheOutput {
	return o
}

// The cache admission policy dictates whether a block should be inserted upon a cache miss.
// Default value is `admit-on-first-miss`.
// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
func (o AnywhereCacheOutput) AdmissionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.StringPtrOutput { return v.AdmissionPolicy }).(pulumi.StringPtrOutput)
}

// The ID of the Anywhere cache instance.
func (o AnywhereCacheOutput) AnywhereCacheId() pulumi.StringOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.StringOutput { return v.AnywhereCacheId }).(pulumi.StringOutput)
}

// A reference to Bucket resource
func (o AnywhereCacheOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The creation time of the cache instance in RFC 3339 format.
func (o AnywhereCacheOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// True if the cache instance has an active Update long-running operation.
func (o AnywhereCacheOutput) PendingUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.BoolOutput { return v.PendingUpdate }).(pulumi.BoolOutput)
}

// The current state of the cache instance.
func (o AnywhereCacheOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
func (o AnywhereCacheOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.StringPtrOutput { return v.Ttl }).(pulumi.StringPtrOutput)
}

// The modification time of the cache instance metadata in RFC 3339 format.
func (o AnywhereCacheOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
func (o AnywhereCacheOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *AnywhereCache) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type AnywhereCacheArrayOutput struct{ *pulumi.OutputState }

func (AnywhereCacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnywhereCache)(nil)).Elem()
}

func (o AnywhereCacheArrayOutput) ToAnywhereCacheArrayOutput() AnywhereCacheArrayOutput {
	return o
}

func (o AnywhereCacheArrayOutput) ToAnywhereCacheArrayOutputWithContext(ctx context.Context) AnywhereCacheArrayOutput {
	return o
}

func (o AnywhereCacheArrayOutput) Index(i pulumi.IntInput) AnywhereCacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnywhereCache {
		return vs[0].([]*AnywhereCache)[vs[1].(int)]
	}).(AnywhereCacheOutput)
}

type AnywhereCacheMapOutput struct{ *pulumi.OutputState }

func (AnywhereCacheMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnywhereCache)(nil)).Elem()
}

func (o AnywhereCacheMapOutput) ToAnywhereCacheMapOutput() AnywhereCacheMapOutput {
	return o
}

func (o AnywhereCacheMapOutput) ToAnywhereCacheMapOutputWithContext(ctx context.Context) AnywhereCacheMapOutput {
	return o
}

func (o AnywhereCacheMapOutput) MapIndex(k pulumi.StringInput) AnywhereCacheOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnywhereCache {
		return vs[0].(map[string]*AnywhereCache)[vs[1].(string)]
	}).(AnywhereCacheOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnywhereCacheInput)(nil)).Elem(), &AnywhereCache{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnywhereCacheArrayInput)(nil)).Elem(), AnywhereCacheArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnywhereCacheMapInput)(nil)).Elem(), AnywhereCacheMap{})
	pulumi.RegisterOutputType(AnywhereCacheOutput{})
	pulumi.RegisterOutputType(AnywhereCacheArrayOutput{})
	pulumi.RegisterOutputType(AnywhereCacheMapOutput{})
}
