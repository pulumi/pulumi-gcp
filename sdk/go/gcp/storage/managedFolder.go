// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Google Cloud Storage Managed Folder.
//
// You can apply Identity and Access Management (IAM) policies to
// managed folders to grant principals access only to the objects
// within the managed folder, which lets you more finely control access
// for specific data sets and tables within a bucket. You can nest
// managed folders up to 15 levels deep, including the parent managed
// folder.
//
// Managed folders can only be created in buckets that have uniform
// bucket-level access enabled.
//
// To get more information about ManagedFolder, see:
//
// * [API documentation](https://cloud.google.com/storage/docs/json_api/v1/managedFolder)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/storage/docs/managed-folders)
//
// ## Example Usage
//
// ### Storage Managed Folder Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("my-bucket"),
//				Location:                 pulumi.String("EU"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewManagedFolder(ctx, "folder", &storage.ManagedFolderArgs{
//				Bucket:       bucket.Name,
//				Name:         pulumi.String("managed/folder/name/"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ManagedFolder can be imported using any of these accepted formats:
//
// * `{{bucket}}/managedFolders/{{name}}`
//
// * `{{bucket}}/{{name}}`
//
// When using the `pulumi import` command, ManagedFolder can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:storage/managedFolder:ManagedFolder default {{bucket}}/managedFolders/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:storage/managedFolder:ManagedFolder default {{bucket}}/{{name}}
// ```
type ManagedFolder struct {
	pulumi.CustomResourceState

	// The name of the bucket that contains the managed folder.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The timestamp at which this managed folder was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Allows the deletion of a managed folder even if contains
	// objects. If a non-empty managed folder is deleted, any objects
	// within the folder will remain in a simulated folder with the
	// same name.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// The metadata generation of the managed folder.
	Metageneration pulumi.StringOutput `pulumi:"metageneration"`
	// The name of the managed folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The timestamp at which this managed folder was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewManagedFolder registers a new resource with the given unique name, arguments, and options.
func NewManagedFolder(ctx *pulumi.Context,
	name string, args *ManagedFolderArgs, opts ...pulumi.ResourceOption) (*ManagedFolder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedFolder
	err := ctx.RegisterResource("gcp:storage/managedFolder:ManagedFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedFolder gets an existing ManagedFolder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedFolderState, opts ...pulumi.ResourceOption) (*ManagedFolder, error) {
	var resource ManagedFolder
	err := ctx.ReadResource("gcp:storage/managedFolder:ManagedFolder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedFolder resources.
type managedFolderState struct {
	// The name of the bucket that contains the managed folder.
	Bucket *string `pulumi:"bucket"`
	// The timestamp at which this managed folder was created.
	CreateTime *string `pulumi:"createTime"`
	// Allows the deletion of a managed folder even if contains
	// objects. If a non-empty managed folder is deleted, any objects
	// within the folder will remain in a simulated folder with the
	// same name.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The metadata generation of the managed folder.
	Metageneration *string `pulumi:"metageneration"`
	// The name of the managed folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`.
	//
	// ***
	Name *string `pulumi:"name"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// The timestamp at which this managed folder was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ManagedFolderState struct {
	// The name of the bucket that contains the managed folder.
	Bucket pulumi.StringPtrInput
	// The timestamp at which this managed folder was created.
	CreateTime pulumi.StringPtrInput
	// Allows the deletion of a managed folder even if contains
	// objects. If a non-empty managed folder is deleted, any objects
	// within the folder will remain in a simulated folder with the
	// same name.
	ForceDestroy pulumi.BoolPtrInput
	// The metadata generation of the managed folder.
	Metageneration pulumi.StringPtrInput
	// The name of the managed folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`.
	//
	// ***
	Name pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// The timestamp at which this managed folder was most recently updated.
	UpdateTime pulumi.StringPtrInput
}

func (ManagedFolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedFolderState)(nil)).Elem()
}

type managedFolderArgs struct {
	// The name of the bucket that contains the managed folder.
	Bucket string `pulumi:"bucket"`
	// Allows the deletion of a managed folder even if contains
	// objects. If a non-empty managed folder is deleted, any objects
	// within the folder will remain in a simulated folder with the
	// same name.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The name of the managed folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`.
	//
	// ***
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ManagedFolder resource.
type ManagedFolderArgs struct {
	// The name of the bucket that contains the managed folder.
	Bucket pulumi.StringInput
	// Allows the deletion of a managed folder even if contains
	// objects. If a non-empty managed folder is deleted, any objects
	// within the folder will remain in a simulated folder with the
	// same name.
	ForceDestroy pulumi.BoolPtrInput
	// The name of the managed folder expressed as a path. Must include
	// trailing '/'. For example, `example_dir/example_dir2/`.
	//
	// ***
	Name pulumi.StringPtrInput
}

func (ManagedFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedFolderArgs)(nil)).Elem()
}

type ManagedFolderInput interface {
	pulumi.Input

	ToManagedFolderOutput() ManagedFolderOutput
	ToManagedFolderOutputWithContext(ctx context.Context) ManagedFolderOutput
}

func (*ManagedFolder) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedFolder)(nil)).Elem()
}

func (i *ManagedFolder) ToManagedFolderOutput() ManagedFolderOutput {
	return i.ToManagedFolderOutputWithContext(context.Background())
}

func (i *ManagedFolder) ToManagedFolderOutputWithContext(ctx context.Context) ManagedFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFolderOutput)
}

// ManagedFolderArrayInput is an input type that accepts ManagedFolderArray and ManagedFolderArrayOutput values.
// You can construct a concrete instance of `ManagedFolderArrayInput` via:
//
//	ManagedFolderArray{ ManagedFolderArgs{...} }
type ManagedFolderArrayInput interface {
	pulumi.Input

	ToManagedFolderArrayOutput() ManagedFolderArrayOutput
	ToManagedFolderArrayOutputWithContext(context.Context) ManagedFolderArrayOutput
}

type ManagedFolderArray []ManagedFolderInput

func (ManagedFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedFolder)(nil)).Elem()
}

func (i ManagedFolderArray) ToManagedFolderArrayOutput() ManagedFolderArrayOutput {
	return i.ToManagedFolderArrayOutputWithContext(context.Background())
}

func (i ManagedFolderArray) ToManagedFolderArrayOutputWithContext(ctx context.Context) ManagedFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFolderArrayOutput)
}

// ManagedFolderMapInput is an input type that accepts ManagedFolderMap and ManagedFolderMapOutput values.
// You can construct a concrete instance of `ManagedFolderMapInput` via:
//
//	ManagedFolderMap{ "key": ManagedFolderArgs{...} }
type ManagedFolderMapInput interface {
	pulumi.Input

	ToManagedFolderMapOutput() ManagedFolderMapOutput
	ToManagedFolderMapOutputWithContext(context.Context) ManagedFolderMapOutput
}

type ManagedFolderMap map[string]ManagedFolderInput

func (ManagedFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedFolder)(nil)).Elem()
}

func (i ManagedFolderMap) ToManagedFolderMapOutput() ManagedFolderMapOutput {
	return i.ToManagedFolderMapOutputWithContext(context.Background())
}

func (i ManagedFolderMap) ToManagedFolderMapOutputWithContext(ctx context.Context) ManagedFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFolderMapOutput)
}

type ManagedFolderOutput struct{ *pulumi.OutputState }

func (ManagedFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedFolder)(nil)).Elem()
}

func (o ManagedFolderOutput) ToManagedFolderOutput() ManagedFolderOutput {
	return o
}

func (o ManagedFolderOutput) ToManagedFolderOutputWithContext(ctx context.Context) ManagedFolderOutput {
	return o
}

// The name of the bucket that contains the managed folder.
func (o ManagedFolderOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The timestamp at which this managed folder was created.
func (o ManagedFolderOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Allows the deletion of a managed folder even if contains
// objects. If a non-empty managed folder is deleted, any objects
// within the folder will remain in a simulated folder with the
// same name.
func (o ManagedFolderOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// The metadata generation of the managed folder.
func (o ManagedFolderOutput) Metageneration() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.Metageneration }).(pulumi.StringOutput)
}

// The name of the managed folder expressed as a path. Must include
// trailing '/'. For example, `example_dir/example_dir2/`.
//
// ***
func (o ManagedFolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o ManagedFolderOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The timestamp at which this managed folder was most recently updated.
func (o ManagedFolderOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ManagedFolderArrayOutput struct{ *pulumi.OutputState }

func (ManagedFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedFolder)(nil)).Elem()
}

func (o ManagedFolderArrayOutput) ToManagedFolderArrayOutput() ManagedFolderArrayOutput {
	return o
}

func (o ManagedFolderArrayOutput) ToManagedFolderArrayOutputWithContext(ctx context.Context) ManagedFolderArrayOutput {
	return o
}

func (o ManagedFolderArrayOutput) Index(i pulumi.IntInput) ManagedFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedFolder {
		return vs[0].([]*ManagedFolder)[vs[1].(int)]
	}).(ManagedFolderOutput)
}

type ManagedFolderMapOutput struct{ *pulumi.OutputState }

func (ManagedFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedFolder)(nil)).Elem()
}

func (o ManagedFolderMapOutput) ToManagedFolderMapOutput() ManagedFolderMapOutput {
	return o
}

func (o ManagedFolderMapOutput) ToManagedFolderMapOutputWithContext(ctx context.Context) ManagedFolderMapOutput {
	return o
}

func (o ManagedFolderMapOutput) MapIndex(k pulumi.StringInput) ManagedFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedFolder {
		return vs[0].(map[string]*ManagedFolder)[vs[1].(string)]
	}).(ManagedFolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFolderInput)(nil)).Elem(), &ManagedFolder{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFolderArrayInput)(nil)).Elem(), ManagedFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFolderMapInput)(nil)).Elem(), ManagedFolderMap{})
	pulumi.RegisterOutputType(ManagedFolderOutput{})
	pulumi.RegisterOutputType(ManagedFolderArrayOutput{})
	pulumi.RegisterOutputType(ManagedFolderMapOutput{})
}
