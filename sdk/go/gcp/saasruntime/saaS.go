// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package saasruntime

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Saas Runtime Saas Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/saasruntime"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := saasruntime.NewSaaS(ctx, "example", &saasruntime.SaaSArgs{
//				SaasId:   pulumi.String("test-saas"),
//				Location: pulumi.String("global"),
//				Locations: saasruntime.SaaSLocationArray{
//					&saasruntime.SaaSLocationArgs{
//						Name: pulumi.String("us-central1"),
//					},
//					&saasruntime.SaaSLocationArgs{
//						Name: pulumi.String("europe-west1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Saas can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/saas/{{saas_id}}`
//
// * `{{project}}/{{location}}/{{saas_id}}`
//
// * `{{location}}/{{saas_id}}`
//
// When using the `pulumi import` command, Saas can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:saasruntime/saaS:SaaS default projects/{{project}}/locations/{{location}}/saas/{{saas_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/saaS:SaaS default {{project}}/{{location}}/{{saas_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/saaS:SaaS default {{location}}/{{saas_id}}
// ```
type SaaS struct {
	pulumi.CustomResourceState

	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The timestamp when the resource was created.
	CreateTime           pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// List of locations that the service is available in. Rollout refers to the
	// list to generate a rollout plan.
	// Structure is documented below.
	Locations SaaSLocationArrayOutput `pulumi:"locations"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/saas/{saas}"
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The ID value for the new saas.
	SaasId pulumi.StringOutput `pulumi:"saasId"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSaaS registers a new resource with the given unique name, arguments, and options.
func NewSaaS(ctx *pulumi.Context,
	name string, args *SaaSArgs, opts ...pulumi.ResourceOption) (*SaaS, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.SaasId == nil {
		return nil, errors.New("invalid value for required argument 'SaasId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SaaS
	err := ctx.RegisterResource("gcp:saasruntime/saaS:SaaS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaaS gets an existing SaaS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaaS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SaaSState, opts ...pulumi.ResourceOption) (*SaaS, error) {
	var resource SaaS
	err := ctx.ReadResource("gcp:saasruntime/saaS:SaaS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SaaS resources.
type saaSState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The timestamp when the resource was created.
	CreateTime           *string           `pulumi:"createTime"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag *string `pulumi:"etag"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// List of locations that the service is available in. Rollout refers to the
	// list to generate a rollout plan.
	// Structure is documented below.
	Locations []SaaSLocation `pulumi:"locations"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/saas/{saas}"
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The ID value for the new saas.
	SaasId *string `pulumi:"saasId"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid *string `pulumi:"uid"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime *string `pulumi:"updateTime"`
}

type SaaSState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The timestamp when the resource was created.
	CreateTime           pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag pulumi.StringPtrInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// List of locations that the service is available in. Rollout refers to the
	// list to generate a rollout plan.
	// Structure is documented below.
	Locations SaaSLocationArrayInput
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/saas/{saas}"
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The ID value for the new saas.
	SaasId pulumi.StringPtrInput
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringPtrInput
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringPtrInput
}

func (SaaSState) ElementType() reflect.Type {
	return reflect.TypeOf((*saaSState)(nil)).Elem()
}

type saaSArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// List of locations that the service is available in. Rollout refers to the
	// list to generate a rollout plan.
	// Structure is documented below.
	Locations []SaaSLocation `pulumi:"locations"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID value for the new saas.
	SaasId string `pulumi:"saasId"`
}

// The set of arguments for constructing a SaaS resource.
type SaaSArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// List of locations that the service is available in. Rollout refers to the
	// list to generate a rollout plan.
	// Structure is documented below.
	Locations SaaSLocationArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID value for the new saas.
	SaasId pulumi.StringInput
}

func (SaaSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*saaSArgs)(nil)).Elem()
}

type SaaSInput interface {
	pulumi.Input

	ToSaaSOutput() SaaSOutput
	ToSaaSOutputWithContext(ctx context.Context) SaaSOutput
}

func (*SaaS) ElementType() reflect.Type {
	return reflect.TypeOf((**SaaS)(nil)).Elem()
}

func (i *SaaS) ToSaaSOutput() SaaSOutput {
	return i.ToSaaSOutputWithContext(context.Background())
}

func (i *SaaS) ToSaaSOutputWithContext(ctx context.Context) SaaSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaaSOutput)
}

// SaaSArrayInput is an input type that accepts SaaSArray and SaaSArrayOutput values.
// You can construct a concrete instance of `SaaSArrayInput` via:
//
//	SaaSArray{ SaaSArgs{...} }
type SaaSArrayInput interface {
	pulumi.Input

	ToSaaSArrayOutput() SaaSArrayOutput
	ToSaaSArrayOutputWithContext(context.Context) SaaSArrayOutput
}

type SaaSArray []SaaSInput

func (SaaSArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SaaS)(nil)).Elem()
}

func (i SaaSArray) ToSaaSArrayOutput() SaaSArrayOutput {
	return i.ToSaaSArrayOutputWithContext(context.Background())
}

func (i SaaSArray) ToSaaSArrayOutputWithContext(ctx context.Context) SaaSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaaSArrayOutput)
}

// SaaSMapInput is an input type that accepts SaaSMap and SaaSMapOutput values.
// You can construct a concrete instance of `SaaSMapInput` via:
//
//	SaaSMap{ "key": SaaSArgs{...} }
type SaaSMapInput interface {
	pulumi.Input

	ToSaaSMapOutput() SaaSMapOutput
	ToSaaSMapOutputWithContext(context.Context) SaaSMapOutput
}

type SaaSMap map[string]SaaSInput

func (SaaSMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SaaS)(nil)).Elem()
}

func (i SaaSMap) ToSaaSMapOutput() SaaSMapOutput {
	return i.ToSaaSMapOutputWithContext(context.Background())
}

func (i SaaSMap) ToSaaSMapOutputWithContext(ctx context.Context) SaaSMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaaSMapOutput)
}

type SaaSOutput struct{ *pulumi.OutputState }

func (SaaSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SaaS)(nil)).Elem()
}

func (o SaaSOutput) ToSaaSOutput() SaaSOutput {
	return o
}

func (o SaaSOutput) ToSaaSOutputWithContext(ctx context.Context) SaaSOutput {
	return o
}

// Annotations is an unstructured key-value map stored with a resource that
// may be set by external tools to store and retrieve arbitrary metadata.
// They are not queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/user-guide/annotations
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o SaaSOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The timestamp when the resource was created.
func (o SaaSOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o SaaSOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o SaaSOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// An opaque value that uniquely identifies a version or
// generation of a resource. It can be used to confirm that the client
// and server agree on the ordering of a resource being written.
func (o SaaSOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The labels on the resource, which can be used for categorization.
// similar to Kubernetes resource labels.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o SaaSOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o SaaSOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// List of locations that the service is available in. Rollout refers to the
// list to generate a rollout plan.
// Structure is documented below.
func (o SaaSOutput) Locations() SaaSLocationArrayOutput {
	return o.ApplyT(func(v *SaaS) SaaSLocationArrayOutput { return v.Locations }).(SaaSLocationArrayOutput)
}

// Identifier. The resource name (full URI of the resource) following the standard naming
// scheme:
// "projects/{project}/locations/{location}/saas/{saas}"
func (o SaaSOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o SaaSOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o SaaSOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The ID value for the new saas.
func (o SaaSOutput) SaasId() pulumi.StringOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringOutput { return v.SaasId }).(pulumi.StringOutput)
}

// The unique identifier of the resource. UID is unique in the time
// and space for this resource within the scope of the service. It is
// typically generated by the server on successful creation of a resource
// and must not be changed. UID is used to uniquely identify resources
// with resource name reuses. This should be a UUID4.
func (o SaaSOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The timestamp when the resource was last updated. Any
// change to the resource made by users must refresh this value.
// Changes to a resource made by the service should refresh this value.
func (o SaaSOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SaaS) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type SaaSArrayOutput struct{ *pulumi.OutputState }

func (SaaSArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SaaS)(nil)).Elem()
}

func (o SaaSArrayOutput) ToSaaSArrayOutput() SaaSArrayOutput {
	return o
}

func (o SaaSArrayOutput) ToSaaSArrayOutputWithContext(ctx context.Context) SaaSArrayOutput {
	return o
}

func (o SaaSArrayOutput) Index(i pulumi.IntInput) SaaSOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SaaS {
		return vs[0].([]*SaaS)[vs[1].(int)]
	}).(SaaSOutput)
}

type SaaSMapOutput struct{ *pulumi.OutputState }

func (SaaSMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SaaS)(nil)).Elem()
}

func (o SaaSMapOutput) ToSaaSMapOutput() SaaSMapOutput {
	return o
}

func (o SaaSMapOutput) ToSaaSMapOutputWithContext(ctx context.Context) SaaSMapOutput {
	return o
}

func (o SaaSMapOutput) MapIndex(k pulumi.StringInput) SaaSOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SaaS {
		return vs[0].(map[string]*SaaS)[vs[1].(string)]
	}).(SaaSOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SaaSInput)(nil)).Elem(), &SaaS{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaaSArrayInput)(nil)).Elem(), SaaSArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaaSMapInput)(nil)).Elem(), SaaSMap{})
	pulumi.RegisterOutputType(SaaSOutput{})
	pulumi.RegisterOutputType(SaaSArrayOutput{})
	pulumi.RegisterOutputType(SaaSMapOutput{})
}
