// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package saasruntime

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A UnitKind serves as a template or type definition for a group of Units. Units that belong to the same UnitKind are managed together, follow the same release model, and are typically updated together through rollouts.
//
// ## Example Usage
//
// ### Saas Runtime Unit Kind Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/saasruntime"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSaas, err := saasruntime.NewSaaS(ctx, "example_saas", &saasruntime.SaaSArgs{
//				SaasId:   pulumi.String("example-saas"),
//				Location: pulumi.String("global"),
//				Locations: saasruntime.SaaSLocationArray{
//					&saasruntime.SaaSLocationArgs{
//						Name: pulumi.String("us-central1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			clusterUnitKind, err := saasruntime.NewUnitKind(ctx, "cluster_unit_kind", &saasruntime.UnitKindArgs{
//				Location:   pulumi.String("global"),
//				UnitKindId: pulumi.String("cluster-unitkind"),
//				Saas:       exampleSaas.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = saasruntime.NewUnitKind(ctx, "example", &saasruntime.UnitKindArgs{
//				Location:   pulumi.String("global"),
//				UnitKindId: pulumi.String("app-unitkind"),
//				Saas:       exampleSaas.ID(),
//				Dependencies: saasruntime.UnitKindDependencyArray{
//					&saasruntime.UnitKindDependencyArgs{
//						UnitKind: clusterUnitKind.ID(),
//						Alias:    pulumi.String("cluster"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// UnitKind can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/unitKinds/{{unit_kind_id}}`
//
// * `{{project}}/{{location}}/{{unit_kind_id}}`
//
// * `{{location}}/{{unit_kind_id}}`
//
// When using the `pulumi import` command, UnitKind can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:saasruntime/unitKind:UnitKind default projects/{{project}}/locations/{{location}}/unitKinds/{{unit_kind_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/unitKind:UnitKind default {{project}}/{{location}}/{{unit_kind_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/unitKind:UnitKind default {{location}}/{{unit_kind_id}}
// ```
type UnitKind struct {
	pulumi.CustomResourceState

	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// List of other unit kinds that this release will depend on. Dependencies
	// will be automatically provisioned if not found. Maximum 10.
	// Structure is documented below.
	Dependencies         UnitKindDependencyArrayOutput `pulumi:"dependencies"`
	EffectiveAnnotations pulumi.StringMapOutput        `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// List of inputVariables for this release that will either be retrieved from
	// a dependency’s outputVariables, or will be passed on to a dependency’s
	// inputVariables. Maximum 100.
	// Structure is documented below.
	InputVariableMappings UnitKindInputVariableMappingArrayOutput `pulumi:"inputVariableMappings"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/unitKinds/{unitKind}"
	Name pulumi.StringOutput `pulumi:"name"`
	// List of outputVariables for this unit kind will be passed to this unit's
	// outputVariables. Maximum 100.
	// Structure is documented below.
	OutputVariableMappings UnitKindOutputVariableMappingArrayOutput `pulumi:"outputVariableMappings"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
	// common data model. Immutable once set.
	Saas pulumi.StringOutput `pulumi:"saas"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The ID value for the new unit kind.
	UnitKindId pulumi.StringOutput `pulumi:"unitKindId"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewUnitKind registers a new resource with the given unique name, arguments, and options.
func NewUnitKind(ctx *pulumi.Context,
	name string, args *UnitKindArgs, opts ...pulumi.ResourceOption) (*UnitKind, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Saas == nil {
		return nil, errors.New("invalid value for required argument 'Saas'")
	}
	if args.UnitKindId == nil {
		return nil, errors.New("invalid value for required argument 'UnitKindId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UnitKind
	err := ctx.RegisterResource("gcp:saasruntime/unitKind:UnitKind", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUnitKind gets an existing UnitKind resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUnitKind(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UnitKindState, opts ...pulumi.ResourceOption) (*UnitKind, error) {
	var resource UnitKind
	err := ctx.ReadResource("gcp:saasruntime/unitKind:UnitKind", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UnitKind resources.
type unitKindState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The timestamp when the resource was created.
	CreateTime *string `pulumi:"createTime"`
	// List of other unit kinds that this release will depend on. Dependencies
	// will be automatically provisioned if not found. Maximum 10.
	// Structure is documented below.
	Dependencies         []UnitKindDependency `pulumi:"dependencies"`
	EffectiveAnnotations map[string]string    `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag *string `pulumi:"etag"`
	// List of inputVariables for this release that will either be retrieved from
	// a dependency’s outputVariables, or will be passed on to a dependency’s
	// inputVariables. Maximum 100.
	// Structure is documented below.
	InputVariableMappings []UnitKindInputVariableMapping `pulumi:"inputVariableMappings"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/unitKinds/{unitKind}"
	Name *string `pulumi:"name"`
	// List of outputVariables for this unit kind will be passed to this unit's
	// outputVariables. Maximum 100.
	// Structure is documented below.
	OutputVariableMappings []UnitKindOutputVariableMapping `pulumi:"outputVariableMappings"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
	// common data model. Immutable once set.
	Saas *string `pulumi:"saas"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid *string `pulumi:"uid"`
	// The ID value for the new unit kind.
	UnitKindId *string `pulumi:"unitKindId"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime *string `pulumi:"updateTime"`
}

type UnitKindState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The timestamp when the resource was created.
	CreateTime pulumi.StringPtrInput
	// List of other unit kinds that this release will depend on. Dependencies
	// will be automatically provisioned if not found. Maximum 10.
	// Structure is documented below.
	Dependencies         UnitKindDependencyArrayInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag pulumi.StringPtrInput
	// List of inputVariables for this release that will either be retrieved from
	// a dependency’s outputVariables, or will be passed on to a dependency’s
	// inputVariables. Maximum 100.
	// Structure is documented below.
	InputVariableMappings UnitKindInputVariableMappingArrayInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/unitKinds/{unitKind}"
	Name pulumi.StringPtrInput
	// List of outputVariables for this unit kind will be passed to this unit's
	// outputVariables. Maximum 100.
	// Structure is documented below.
	OutputVariableMappings UnitKindOutputVariableMappingArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
	// common data model. Immutable once set.
	Saas pulumi.StringPtrInput
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringPtrInput
	// The ID value for the new unit kind.
	UnitKindId pulumi.StringPtrInput
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringPtrInput
}

func (UnitKindState) ElementType() reflect.Type {
	return reflect.TypeOf((*unitKindState)(nil)).Elem()
}

type unitKindArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// List of other unit kinds that this release will depend on. Dependencies
	// will be automatically provisioned if not found. Maximum 10.
	// Structure is documented below.
	Dependencies []UnitKindDependency `pulumi:"dependencies"`
	// List of inputVariables for this release that will either be retrieved from
	// a dependency’s outputVariables, or will be passed on to a dependency’s
	// inputVariables. Maximum 100.
	// Structure is documented below.
	InputVariableMappings []UnitKindInputVariableMapping `pulumi:"inputVariableMappings"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// List of outputVariables for this unit kind will be passed to this unit's
	// outputVariables. Maximum 100.
	// Structure is documented below.
	OutputVariableMappings []UnitKindOutputVariableMapping `pulumi:"outputVariableMappings"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
	// common data model. Immutable once set.
	Saas string `pulumi:"saas"`
	// The ID value for the new unit kind.
	UnitKindId string `pulumi:"unitKindId"`
}

// The set of arguments for constructing a UnitKind resource.
type UnitKindArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// List of other unit kinds that this release will depend on. Dependencies
	// will be automatically provisioned if not found. Maximum 10.
	// Structure is documented below.
	Dependencies UnitKindDependencyArrayInput
	// List of inputVariables for this release that will either be retrieved from
	// a dependency’s outputVariables, or will be passed on to a dependency’s
	// inputVariables. Maximum 100.
	// Structure is documented below.
	InputVariableMappings UnitKindInputVariableMappingArrayInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// List of outputVariables for this unit kind will be passed to this unit's
	// outputVariables. Maximum 100.
	// Structure is documented below.
	OutputVariableMappings UnitKindOutputVariableMappingArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
	// common data model. Immutable once set.
	Saas pulumi.StringInput
	// The ID value for the new unit kind.
	UnitKindId pulumi.StringInput
}

func (UnitKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*unitKindArgs)(nil)).Elem()
}

type UnitKindInput interface {
	pulumi.Input

	ToUnitKindOutput() UnitKindOutput
	ToUnitKindOutputWithContext(ctx context.Context) UnitKindOutput
}

func (*UnitKind) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKind)(nil)).Elem()
}

func (i *UnitKind) ToUnitKindOutput() UnitKindOutput {
	return i.ToUnitKindOutputWithContext(context.Background())
}

func (i *UnitKind) ToUnitKindOutputWithContext(ctx context.Context) UnitKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutput)
}

// UnitKindArrayInput is an input type that accepts UnitKindArray and UnitKindArrayOutput values.
// You can construct a concrete instance of `UnitKindArrayInput` via:
//
//	UnitKindArray{ UnitKindArgs{...} }
type UnitKindArrayInput interface {
	pulumi.Input

	ToUnitKindArrayOutput() UnitKindArrayOutput
	ToUnitKindArrayOutputWithContext(context.Context) UnitKindArrayOutput
}

type UnitKindArray []UnitKindInput

func (UnitKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UnitKind)(nil)).Elem()
}

func (i UnitKindArray) ToUnitKindArrayOutput() UnitKindArrayOutput {
	return i.ToUnitKindArrayOutputWithContext(context.Background())
}

func (i UnitKindArray) ToUnitKindArrayOutputWithContext(ctx context.Context) UnitKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindArrayOutput)
}

// UnitKindMapInput is an input type that accepts UnitKindMap and UnitKindMapOutput values.
// You can construct a concrete instance of `UnitKindMapInput` via:
//
//	UnitKindMap{ "key": UnitKindArgs{...} }
type UnitKindMapInput interface {
	pulumi.Input

	ToUnitKindMapOutput() UnitKindMapOutput
	ToUnitKindMapOutputWithContext(context.Context) UnitKindMapOutput
}

type UnitKindMap map[string]UnitKindInput

func (UnitKindMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UnitKind)(nil)).Elem()
}

func (i UnitKindMap) ToUnitKindMapOutput() UnitKindMapOutput {
	return i.ToUnitKindMapOutputWithContext(context.Background())
}

func (i UnitKindMap) ToUnitKindMapOutputWithContext(ctx context.Context) UnitKindMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindMapOutput)
}

type UnitKindOutput struct{ *pulumi.OutputState }

func (UnitKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKind)(nil)).Elem()
}

func (o UnitKindOutput) ToUnitKindOutput() UnitKindOutput {
	return o
}

func (o UnitKindOutput) ToUnitKindOutputWithContext(ctx context.Context) UnitKindOutput {
	return o
}

// Annotations is an unstructured key-value map stored with a resource that
// may be set by external tools to store and retrieve arbitrary metadata.
// They are not queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/user-guide/annotations
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o UnitKindOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The timestamp when the resource was created.
func (o UnitKindOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// List of other unit kinds that this release will depend on. Dependencies
// will be automatically provisioned if not found. Maximum 10.
// Structure is documented below.
func (o UnitKindOutput) Dependencies() UnitKindDependencyArrayOutput {
	return o.ApplyT(func(v *UnitKind) UnitKindDependencyArrayOutput { return v.Dependencies }).(UnitKindDependencyArrayOutput)
}

func (o UnitKindOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o UnitKindOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// An opaque value that uniquely identifies a version or
// generation of a resource. It can be used to confirm that the client
// and server agree on the ordering of a resource being written.
func (o UnitKindOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// List of inputVariables for this release that will either be retrieved from
// a dependency’s outputVariables, or will be passed on to a dependency’s
// inputVariables. Maximum 100.
// Structure is documented below.
func (o UnitKindOutput) InputVariableMappings() UnitKindInputVariableMappingArrayOutput {
	return o.ApplyT(func(v *UnitKind) UnitKindInputVariableMappingArrayOutput { return v.InputVariableMappings }).(UnitKindInputVariableMappingArrayOutput)
}

// The labels on the resource, which can be used for categorization.
// similar to Kubernetes resource labels.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o UnitKindOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o UnitKindOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name (full URI of the resource) following the standard naming
// scheme:
// "projects/{project}/locations/{location}/unitKinds/{unitKind}"
func (o UnitKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of outputVariables for this unit kind will be passed to this unit's
// outputVariables. Maximum 100.
// Structure is documented below.
func (o UnitKindOutput) OutputVariableMappings() UnitKindOutputVariableMappingArrayOutput {
	return o.ApplyT(func(v *UnitKind) UnitKindOutputVariableMappingArrayOutput { return v.OutputVariableMappings }).(UnitKindOutputVariableMappingArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o UnitKindOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o UnitKindOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// A reference to the Saas that defines the product (managed service) that
// the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
// common data model. Immutable once set.
func (o UnitKindOutput) Saas() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.Saas }).(pulumi.StringOutput)
}

// The unique identifier of the resource. UID is unique in the time
// and space for this resource within the scope of the service. It is
// typically generated by the server on successful creation of a resource
// and must not be changed. UID is used to uniquely identify resources
// with resource name reuses. This should be a UUID4.
func (o UnitKindOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The ID value for the new unit kind.
func (o UnitKindOutput) UnitKindId() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.UnitKindId }).(pulumi.StringOutput)
}

// The timestamp when the resource was last updated. Any
// change to the resource made by users must refresh this value.
// Changes to a resource made by the service should refresh this value.
func (o UnitKindOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitKind) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type UnitKindArrayOutput struct{ *pulumi.OutputState }

func (UnitKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UnitKind)(nil)).Elem()
}

func (o UnitKindArrayOutput) ToUnitKindArrayOutput() UnitKindArrayOutput {
	return o
}

func (o UnitKindArrayOutput) ToUnitKindArrayOutputWithContext(ctx context.Context) UnitKindArrayOutput {
	return o
}

func (o UnitKindArrayOutput) Index(i pulumi.IntInput) UnitKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UnitKind {
		return vs[0].([]*UnitKind)[vs[1].(int)]
	}).(UnitKindOutput)
}

type UnitKindMapOutput struct{ *pulumi.OutputState }

func (UnitKindMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UnitKind)(nil)).Elem()
}

func (o UnitKindMapOutput) ToUnitKindMapOutput() UnitKindMapOutput {
	return o
}

func (o UnitKindMapOutput) ToUnitKindMapOutputWithContext(ctx context.Context) UnitKindMapOutput {
	return o
}

func (o UnitKindMapOutput) MapIndex(k pulumi.StringInput) UnitKindOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UnitKind {
		return vs[0].(map[string]*UnitKind)[vs[1].(string)]
	}).(UnitKindOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindInput)(nil)).Elem(), &UnitKind{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindArrayInput)(nil)).Elem(), UnitKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindMapInput)(nil)).Elem(), UnitKindMap{})
	pulumi.RegisterOutputType(UnitKindOutput{})
	pulumi.RegisterOutputType(UnitKindArrayOutput{})
	pulumi.RegisterOutputType(UnitKindMapOutput{})
}
