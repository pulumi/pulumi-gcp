// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package saasruntime

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SaaSLocation struct {
	// Name of location.
	Name *string `pulumi:"name"`
}

// SaaSLocationInput is an input type that accepts SaaSLocationArgs and SaaSLocationOutput values.
// You can construct a concrete instance of `SaaSLocationInput` via:
//
//	SaaSLocationArgs{...}
type SaaSLocationInput interface {
	pulumi.Input

	ToSaaSLocationOutput() SaaSLocationOutput
	ToSaaSLocationOutputWithContext(context.Context) SaaSLocationOutput
}

type SaaSLocationArgs struct {
	// Name of location.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SaaSLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SaaSLocation)(nil)).Elem()
}

func (i SaaSLocationArgs) ToSaaSLocationOutput() SaaSLocationOutput {
	return i.ToSaaSLocationOutputWithContext(context.Background())
}

func (i SaaSLocationArgs) ToSaaSLocationOutputWithContext(ctx context.Context) SaaSLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaaSLocationOutput)
}

// SaaSLocationArrayInput is an input type that accepts SaaSLocationArray and SaaSLocationArrayOutput values.
// You can construct a concrete instance of `SaaSLocationArrayInput` via:
//
//	SaaSLocationArray{ SaaSLocationArgs{...} }
type SaaSLocationArrayInput interface {
	pulumi.Input

	ToSaaSLocationArrayOutput() SaaSLocationArrayOutput
	ToSaaSLocationArrayOutputWithContext(context.Context) SaaSLocationArrayOutput
}

type SaaSLocationArray []SaaSLocationInput

func (SaaSLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SaaSLocation)(nil)).Elem()
}

func (i SaaSLocationArray) ToSaaSLocationArrayOutput() SaaSLocationArrayOutput {
	return i.ToSaaSLocationArrayOutputWithContext(context.Background())
}

func (i SaaSLocationArray) ToSaaSLocationArrayOutputWithContext(ctx context.Context) SaaSLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaaSLocationArrayOutput)
}

type SaaSLocationOutput struct{ *pulumi.OutputState }

func (SaaSLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaaSLocation)(nil)).Elem()
}

func (o SaaSLocationOutput) ToSaaSLocationOutput() SaaSLocationOutput {
	return o
}

func (o SaaSLocationOutput) ToSaaSLocationOutputWithContext(ctx context.Context) SaaSLocationOutput {
	return o
}

// Name of location.
func (o SaaSLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SaaSLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SaaSLocationArrayOutput struct{ *pulumi.OutputState }

func (SaaSLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SaaSLocation)(nil)).Elem()
}

func (o SaaSLocationArrayOutput) ToSaaSLocationArrayOutput() SaaSLocationArrayOutput {
	return o
}

func (o SaaSLocationArrayOutput) ToSaaSLocationArrayOutputWithContext(ctx context.Context) SaaSLocationArrayOutput {
	return o
}

func (o SaaSLocationArrayOutput) Index(i pulumi.IntInput) SaaSLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SaaSLocation {
		return vs[0].([]SaaSLocation)[vs[1].(int)]
	}).(SaaSLocationOutput)
}

type UnitKindDependency struct {
	// An alias for the dependency. Used for input variable mapping.
	Alias string `pulumi:"alias"`
	// The unit kind of the dependency.
	UnitKind string `pulumi:"unitKind"`
}

// UnitKindDependencyInput is an input type that accepts UnitKindDependencyArgs and UnitKindDependencyOutput values.
// You can construct a concrete instance of `UnitKindDependencyInput` via:
//
//	UnitKindDependencyArgs{...}
type UnitKindDependencyInput interface {
	pulumi.Input

	ToUnitKindDependencyOutput() UnitKindDependencyOutput
	ToUnitKindDependencyOutputWithContext(context.Context) UnitKindDependencyOutput
}

type UnitKindDependencyArgs struct {
	// An alias for the dependency. Used for input variable mapping.
	Alias pulumi.StringInput `pulumi:"alias"`
	// The unit kind of the dependency.
	UnitKind pulumi.StringInput `pulumi:"unitKind"`
}

func (UnitKindDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindDependency)(nil)).Elem()
}

func (i UnitKindDependencyArgs) ToUnitKindDependencyOutput() UnitKindDependencyOutput {
	return i.ToUnitKindDependencyOutputWithContext(context.Background())
}

func (i UnitKindDependencyArgs) ToUnitKindDependencyOutputWithContext(ctx context.Context) UnitKindDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindDependencyOutput)
}

// UnitKindDependencyArrayInput is an input type that accepts UnitKindDependencyArray and UnitKindDependencyArrayOutput values.
// You can construct a concrete instance of `UnitKindDependencyArrayInput` via:
//
//	UnitKindDependencyArray{ UnitKindDependencyArgs{...} }
type UnitKindDependencyArrayInput interface {
	pulumi.Input

	ToUnitKindDependencyArrayOutput() UnitKindDependencyArrayOutput
	ToUnitKindDependencyArrayOutputWithContext(context.Context) UnitKindDependencyArrayOutput
}

type UnitKindDependencyArray []UnitKindDependencyInput

func (UnitKindDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnitKindDependency)(nil)).Elem()
}

func (i UnitKindDependencyArray) ToUnitKindDependencyArrayOutput() UnitKindDependencyArrayOutput {
	return i.ToUnitKindDependencyArrayOutputWithContext(context.Background())
}

func (i UnitKindDependencyArray) ToUnitKindDependencyArrayOutputWithContext(ctx context.Context) UnitKindDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindDependencyArrayOutput)
}

type UnitKindDependencyOutput struct{ *pulumi.OutputState }

func (UnitKindDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindDependency)(nil)).Elem()
}

func (o UnitKindDependencyOutput) ToUnitKindDependencyOutput() UnitKindDependencyOutput {
	return o
}

func (o UnitKindDependencyOutput) ToUnitKindDependencyOutputWithContext(ctx context.Context) UnitKindDependencyOutput {
	return o
}

// An alias for the dependency. Used for input variable mapping.
func (o UnitKindDependencyOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindDependency) string { return v.Alias }).(pulumi.StringOutput)
}

// The unit kind of the dependency.
func (o UnitKindDependencyOutput) UnitKind() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindDependency) string { return v.UnitKind }).(pulumi.StringOutput)
}

type UnitKindDependencyArrayOutput struct{ *pulumi.OutputState }

func (UnitKindDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnitKindDependency)(nil)).Elem()
}

func (o UnitKindDependencyArrayOutput) ToUnitKindDependencyArrayOutput() UnitKindDependencyArrayOutput {
	return o
}

func (o UnitKindDependencyArrayOutput) ToUnitKindDependencyArrayOutputWithContext(ctx context.Context) UnitKindDependencyArrayOutput {
	return o
}

func (o UnitKindDependencyArrayOutput) Index(i pulumi.IntInput) UnitKindDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UnitKindDependency {
		return vs[0].([]UnitKindDependency)[vs[1].(int)]
	}).(UnitKindDependencyOutput)
}

type UnitKindInputVariableMapping struct {
	// Output variables whose values will be passed on to dependencies
	// Structure is documented below.
	From *UnitKindInputVariableMappingFrom `pulumi:"from"`
	// Input variables whose values will be passed on to dependencies
	// Structure is documented below.
	To *UnitKindInputVariableMappingTo `pulumi:"to"`
	// name of the variable
	Variable string `pulumi:"variable"`
}

// UnitKindInputVariableMappingInput is an input type that accepts UnitKindInputVariableMappingArgs and UnitKindInputVariableMappingOutput values.
// You can construct a concrete instance of `UnitKindInputVariableMappingInput` via:
//
//	UnitKindInputVariableMappingArgs{...}
type UnitKindInputVariableMappingInput interface {
	pulumi.Input

	ToUnitKindInputVariableMappingOutput() UnitKindInputVariableMappingOutput
	ToUnitKindInputVariableMappingOutputWithContext(context.Context) UnitKindInputVariableMappingOutput
}

type UnitKindInputVariableMappingArgs struct {
	// Output variables whose values will be passed on to dependencies
	// Structure is documented below.
	From UnitKindInputVariableMappingFromPtrInput `pulumi:"from"`
	// Input variables whose values will be passed on to dependencies
	// Structure is documented below.
	To UnitKindInputVariableMappingToPtrInput `pulumi:"to"`
	// name of the variable
	Variable pulumi.StringInput `pulumi:"variable"`
}

func (UnitKindInputVariableMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindInputVariableMapping)(nil)).Elem()
}

func (i UnitKindInputVariableMappingArgs) ToUnitKindInputVariableMappingOutput() UnitKindInputVariableMappingOutput {
	return i.ToUnitKindInputVariableMappingOutputWithContext(context.Background())
}

func (i UnitKindInputVariableMappingArgs) ToUnitKindInputVariableMappingOutputWithContext(ctx context.Context) UnitKindInputVariableMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindInputVariableMappingOutput)
}

// UnitKindInputVariableMappingArrayInput is an input type that accepts UnitKindInputVariableMappingArray and UnitKindInputVariableMappingArrayOutput values.
// You can construct a concrete instance of `UnitKindInputVariableMappingArrayInput` via:
//
//	UnitKindInputVariableMappingArray{ UnitKindInputVariableMappingArgs{...} }
type UnitKindInputVariableMappingArrayInput interface {
	pulumi.Input

	ToUnitKindInputVariableMappingArrayOutput() UnitKindInputVariableMappingArrayOutput
	ToUnitKindInputVariableMappingArrayOutputWithContext(context.Context) UnitKindInputVariableMappingArrayOutput
}

type UnitKindInputVariableMappingArray []UnitKindInputVariableMappingInput

func (UnitKindInputVariableMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnitKindInputVariableMapping)(nil)).Elem()
}

func (i UnitKindInputVariableMappingArray) ToUnitKindInputVariableMappingArrayOutput() UnitKindInputVariableMappingArrayOutput {
	return i.ToUnitKindInputVariableMappingArrayOutputWithContext(context.Background())
}

func (i UnitKindInputVariableMappingArray) ToUnitKindInputVariableMappingArrayOutputWithContext(ctx context.Context) UnitKindInputVariableMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindInputVariableMappingArrayOutput)
}

type UnitKindInputVariableMappingOutput struct{ *pulumi.OutputState }

func (UnitKindInputVariableMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindInputVariableMapping)(nil)).Elem()
}

func (o UnitKindInputVariableMappingOutput) ToUnitKindInputVariableMappingOutput() UnitKindInputVariableMappingOutput {
	return o
}

func (o UnitKindInputVariableMappingOutput) ToUnitKindInputVariableMappingOutputWithContext(ctx context.Context) UnitKindInputVariableMappingOutput {
	return o
}

// Output variables whose values will be passed on to dependencies
// Structure is documented below.
func (o UnitKindInputVariableMappingOutput) From() UnitKindInputVariableMappingFromPtrOutput {
	return o.ApplyT(func(v UnitKindInputVariableMapping) *UnitKindInputVariableMappingFrom { return v.From }).(UnitKindInputVariableMappingFromPtrOutput)
}

// Input variables whose values will be passed on to dependencies
// Structure is documented below.
func (o UnitKindInputVariableMappingOutput) To() UnitKindInputVariableMappingToPtrOutput {
	return o.ApplyT(func(v UnitKindInputVariableMapping) *UnitKindInputVariableMappingTo { return v.To }).(UnitKindInputVariableMappingToPtrOutput)
}

// name of the variable
func (o UnitKindInputVariableMappingOutput) Variable() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindInputVariableMapping) string { return v.Variable }).(pulumi.StringOutput)
}

type UnitKindInputVariableMappingArrayOutput struct{ *pulumi.OutputState }

func (UnitKindInputVariableMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnitKindInputVariableMapping)(nil)).Elem()
}

func (o UnitKindInputVariableMappingArrayOutput) ToUnitKindInputVariableMappingArrayOutput() UnitKindInputVariableMappingArrayOutput {
	return o
}

func (o UnitKindInputVariableMappingArrayOutput) ToUnitKindInputVariableMappingArrayOutputWithContext(ctx context.Context) UnitKindInputVariableMappingArrayOutput {
	return o
}

func (o UnitKindInputVariableMappingArrayOutput) Index(i pulumi.IntInput) UnitKindInputVariableMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UnitKindInputVariableMapping {
		return vs[0].([]UnitKindInputVariableMapping)[vs[1].(int)]
	}).(UnitKindInputVariableMappingOutput)
}

type UnitKindInputVariableMappingFrom struct {
	// Alias of the dependency that the outputVariable will pass its value to
	Dependency string `pulumi:"dependency"`
	// Name of the outputVariable on the dependency
	OutputVariable string `pulumi:"outputVariable"`
}

// UnitKindInputVariableMappingFromInput is an input type that accepts UnitKindInputVariableMappingFromArgs and UnitKindInputVariableMappingFromOutput values.
// You can construct a concrete instance of `UnitKindInputVariableMappingFromInput` via:
//
//	UnitKindInputVariableMappingFromArgs{...}
type UnitKindInputVariableMappingFromInput interface {
	pulumi.Input

	ToUnitKindInputVariableMappingFromOutput() UnitKindInputVariableMappingFromOutput
	ToUnitKindInputVariableMappingFromOutputWithContext(context.Context) UnitKindInputVariableMappingFromOutput
}

type UnitKindInputVariableMappingFromArgs struct {
	// Alias of the dependency that the outputVariable will pass its value to
	Dependency pulumi.StringInput `pulumi:"dependency"`
	// Name of the outputVariable on the dependency
	OutputVariable pulumi.StringInput `pulumi:"outputVariable"`
}

func (UnitKindInputVariableMappingFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindInputVariableMappingFrom)(nil)).Elem()
}

func (i UnitKindInputVariableMappingFromArgs) ToUnitKindInputVariableMappingFromOutput() UnitKindInputVariableMappingFromOutput {
	return i.ToUnitKindInputVariableMappingFromOutputWithContext(context.Background())
}

func (i UnitKindInputVariableMappingFromArgs) ToUnitKindInputVariableMappingFromOutputWithContext(ctx context.Context) UnitKindInputVariableMappingFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindInputVariableMappingFromOutput)
}

func (i UnitKindInputVariableMappingFromArgs) ToUnitKindInputVariableMappingFromPtrOutput() UnitKindInputVariableMappingFromPtrOutput {
	return i.ToUnitKindInputVariableMappingFromPtrOutputWithContext(context.Background())
}

func (i UnitKindInputVariableMappingFromArgs) ToUnitKindInputVariableMappingFromPtrOutputWithContext(ctx context.Context) UnitKindInputVariableMappingFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindInputVariableMappingFromOutput).ToUnitKindInputVariableMappingFromPtrOutputWithContext(ctx)
}

// UnitKindInputVariableMappingFromPtrInput is an input type that accepts UnitKindInputVariableMappingFromArgs, UnitKindInputVariableMappingFromPtr and UnitKindInputVariableMappingFromPtrOutput values.
// You can construct a concrete instance of `UnitKindInputVariableMappingFromPtrInput` via:
//
//	        UnitKindInputVariableMappingFromArgs{...}
//
//	or:
//
//	        nil
type UnitKindInputVariableMappingFromPtrInput interface {
	pulumi.Input

	ToUnitKindInputVariableMappingFromPtrOutput() UnitKindInputVariableMappingFromPtrOutput
	ToUnitKindInputVariableMappingFromPtrOutputWithContext(context.Context) UnitKindInputVariableMappingFromPtrOutput
}

type unitKindInputVariableMappingFromPtrType UnitKindInputVariableMappingFromArgs

func UnitKindInputVariableMappingFromPtr(v *UnitKindInputVariableMappingFromArgs) UnitKindInputVariableMappingFromPtrInput {
	return (*unitKindInputVariableMappingFromPtrType)(v)
}

func (*unitKindInputVariableMappingFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKindInputVariableMappingFrom)(nil)).Elem()
}

func (i *unitKindInputVariableMappingFromPtrType) ToUnitKindInputVariableMappingFromPtrOutput() UnitKindInputVariableMappingFromPtrOutput {
	return i.ToUnitKindInputVariableMappingFromPtrOutputWithContext(context.Background())
}

func (i *unitKindInputVariableMappingFromPtrType) ToUnitKindInputVariableMappingFromPtrOutputWithContext(ctx context.Context) UnitKindInputVariableMappingFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindInputVariableMappingFromPtrOutput)
}

type UnitKindInputVariableMappingFromOutput struct{ *pulumi.OutputState }

func (UnitKindInputVariableMappingFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindInputVariableMappingFrom)(nil)).Elem()
}

func (o UnitKindInputVariableMappingFromOutput) ToUnitKindInputVariableMappingFromOutput() UnitKindInputVariableMappingFromOutput {
	return o
}

func (o UnitKindInputVariableMappingFromOutput) ToUnitKindInputVariableMappingFromOutputWithContext(ctx context.Context) UnitKindInputVariableMappingFromOutput {
	return o
}

func (o UnitKindInputVariableMappingFromOutput) ToUnitKindInputVariableMappingFromPtrOutput() UnitKindInputVariableMappingFromPtrOutput {
	return o.ToUnitKindInputVariableMappingFromPtrOutputWithContext(context.Background())
}

func (o UnitKindInputVariableMappingFromOutput) ToUnitKindInputVariableMappingFromPtrOutputWithContext(ctx context.Context) UnitKindInputVariableMappingFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UnitKindInputVariableMappingFrom) *UnitKindInputVariableMappingFrom {
		return &v
	}).(UnitKindInputVariableMappingFromPtrOutput)
}

// Alias of the dependency that the outputVariable will pass its value to
func (o UnitKindInputVariableMappingFromOutput) Dependency() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindInputVariableMappingFrom) string { return v.Dependency }).(pulumi.StringOutput)
}

// Name of the outputVariable on the dependency
func (o UnitKindInputVariableMappingFromOutput) OutputVariable() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindInputVariableMappingFrom) string { return v.OutputVariable }).(pulumi.StringOutput)
}

type UnitKindInputVariableMappingFromPtrOutput struct{ *pulumi.OutputState }

func (UnitKindInputVariableMappingFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKindInputVariableMappingFrom)(nil)).Elem()
}

func (o UnitKindInputVariableMappingFromPtrOutput) ToUnitKindInputVariableMappingFromPtrOutput() UnitKindInputVariableMappingFromPtrOutput {
	return o
}

func (o UnitKindInputVariableMappingFromPtrOutput) ToUnitKindInputVariableMappingFromPtrOutputWithContext(ctx context.Context) UnitKindInputVariableMappingFromPtrOutput {
	return o
}

func (o UnitKindInputVariableMappingFromPtrOutput) Elem() UnitKindInputVariableMappingFromOutput {
	return o.ApplyT(func(v *UnitKindInputVariableMappingFrom) UnitKindInputVariableMappingFrom {
		if v != nil {
			return *v
		}
		var ret UnitKindInputVariableMappingFrom
		return ret
	}).(UnitKindInputVariableMappingFromOutput)
}

// Alias of the dependency that the outputVariable will pass its value to
func (o UnitKindInputVariableMappingFromPtrOutput) Dependency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnitKindInputVariableMappingFrom) *string {
		if v == nil {
			return nil
		}
		return &v.Dependency
	}).(pulumi.StringPtrOutput)
}

// Name of the outputVariable on the dependency
func (o UnitKindInputVariableMappingFromPtrOutput) OutputVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnitKindInputVariableMappingFrom) *string {
		if v == nil {
			return nil
		}
		return &v.OutputVariable
	}).(pulumi.StringPtrOutput)
}

type UnitKindInputVariableMappingTo struct {
	// Alias of the dependency that the inputVariable will pass its value to
	Dependency string `pulumi:"dependency"`
	// Tells SaaS Runtime if this mapping should be used during lookup or not
	IgnoreForLookup *bool `pulumi:"ignoreForLookup"`
	// Name of the inputVariable on the dependency
	InputVariable string `pulumi:"inputVariable"`
}

// UnitKindInputVariableMappingToInput is an input type that accepts UnitKindInputVariableMappingToArgs and UnitKindInputVariableMappingToOutput values.
// You can construct a concrete instance of `UnitKindInputVariableMappingToInput` via:
//
//	UnitKindInputVariableMappingToArgs{...}
type UnitKindInputVariableMappingToInput interface {
	pulumi.Input

	ToUnitKindInputVariableMappingToOutput() UnitKindInputVariableMappingToOutput
	ToUnitKindInputVariableMappingToOutputWithContext(context.Context) UnitKindInputVariableMappingToOutput
}

type UnitKindInputVariableMappingToArgs struct {
	// Alias of the dependency that the inputVariable will pass its value to
	Dependency pulumi.StringInput `pulumi:"dependency"`
	// Tells SaaS Runtime if this mapping should be used during lookup or not
	IgnoreForLookup pulumi.BoolPtrInput `pulumi:"ignoreForLookup"`
	// Name of the inputVariable on the dependency
	InputVariable pulumi.StringInput `pulumi:"inputVariable"`
}

func (UnitKindInputVariableMappingToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindInputVariableMappingTo)(nil)).Elem()
}

func (i UnitKindInputVariableMappingToArgs) ToUnitKindInputVariableMappingToOutput() UnitKindInputVariableMappingToOutput {
	return i.ToUnitKindInputVariableMappingToOutputWithContext(context.Background())
}

func (i UnitKindInputVariableMappingToArgs) ToUnitKindInputVariableMappingToOutputWithContext(ctx context.Context) UnitKindInputVariableMappingToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindInputVariableMappingToOutput)
}

func (i UnitKindInputVariableMappingToArgs) ToUnitKindInputVariableMappingToPtrOutput() UnitKindInputVariableMappingToPtrOutput {
	return i.ToUnitKindInputVariableMappingToPtrOutputWithContext(context.Background())
}

func (i UnitKindInputVariableMappingToArgs) ToUnitKindInputVariableMappingToPtrOutputWithContext(ctx context.Context) UnitKindInputVariableMappingToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindInputVariableMappingToOutput).ToUnitKindInputVariableMappingToPtrOutputWithContext(ctx)
}

// UnitKindInputVariableMappingToPtrInput is an input type that accepts UnitKindInputVariableMappingToArgs, UnitKindInputVariableMappingToPtr and UnitKindInputVariableMappingToPtrOutput values.
// You can construct a concrete instance of `UnitKindInputVariableMappingToPtrInput` via:
//
//	        UnitKindInputVariableMappingToArgs{...}
//
//	or:
//
//	        nil
type UnitKindInputVariableMappingToPtrInput interface {
	pulumi.Input

	ToUnitKindInputVariableMappingToPtrOutput() UnitKindInputVariableMappingToPtrOutput
	ToUnitKindInputVariableMappingToPtrOutputWithContext(context.Context) UnitKindInputVariableMappingToPtrOutput
}

type unitKindInputVariableMappingToPtrType UnitKindInputVariableMappingToArgs

func UnitKindInputVariableMappingToPtr(v *UnitKindInputVariableMappingToArgs) UnitKindInputVariableMappingToPtrInput {
	return (*unitKindInputVariableMappingToPtrType)(v)
}

func (*unitKindInputVariableMappingToPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKindInputVariableMappingTo)(nil)).Elem()
}

func (i *unitKindInputVariableMappingToPtrType) ToUnitKindInputVariableMappingToPtrOutput() UnitKindInputVariableMappingToPtrOutput {
	return i.ToUnitKindInputVariableMappingToPtrOutputWithContext(context.Background())
}

func (i *unitKindInputVariableMappingToPtrType) ToUnitKindInputVariableMappingToPtrOutputWithContext(ctx context.Context) UnitKindInputVariableMappingToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindInputVariableMappingToPtrOutput)
}

type UnitKindInputVariableMappingToOutput struct{ *pulumi.OutputState }

func (UnitKindInputVariableMappingToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindInputVariableMappingTo)(nil)).Elem()
}

func (o UnitKindInputVariableMappingToOutput) ToUnitKindInputVariableMappingToOutput() UnitKindInputVariableMappingToOutput {
	return o
}

func (o UnitKindInputVariableMappingToOutput) ToUnitKindInputVariableMappingToOutputWithContext(ctx context.Context) UnitKindInputVariableMappingToOutput {
	return o
}

func (o UnitKindInputVariableMappingToOutput) ToUnitKindInputVariableMappingToPtrOutput() UnitKindInputVariableMappingToPtrOutput {
	return o.ToUnitKindInputVariableMappingToPtrOutputWithContext(context.Background())
}

func (o UnitKindInputVariableMappingToOutput) ToUnitKindInputVariableMappingToPtrOutputWithContext(ctx context.Context) UnitKindInputVariableMappingToPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UnitKindInputVariableMappingTo) *UnitKindInputVariableMappingTo {
		return &v
	}).(UnitKindInputVariableMappingToPtrOutput)
}

// Alias of the dependency that the inputVariable will pass its value to
func (o UnitKindInputVariableMappingToOutput) Dependency() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindInputVariableMappingTo) string { return v.Dependency }).(pulumi.StringOutput)
}

// Tells SaaS Runtime if this mapping should be used during lookup or not
func (o UnitKindInputVariableMappingToOutput) IgnoreForLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UnitKindInputVariableMappingTo) *bool { return v.IgnoreForLookup }).(pulumi.BoolPtrOutput)
}

// Name of the inputVariable on the dependency
func (o UnitKindInputVariableMappingToOutput) InputVariable() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindInputVariableMappingTo) string { return v.InputVariable }).(pulumi.StringOutput)
}

type UnitKindInputVariableMappingToPtrOutput struct{ *pulumi.OutputState }

func (UnitKindInputVariableMappingToPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKindInputVariableMappingTo)(nil)).Elem()
}

func (o UnitKindInputVariableMappingToPtrOutput) ToUnitKindInputVariableMappingToPtrOutput() UnitKindInputVariableMappingToPtrOutput {
	return o
}

func (o UnitKindInputVariableMappingToPtrOutput) ToUnitKindInputVariableMappingToPtrOutputWithContext(ctx context.Context) UnitKindInputVariableMappingToPtrOutput {
	return o
}

func (o UnitKindInputVariableMappingToPtrOutput) Elem() UnitKindInputVariableMappingToOutput {
	return o.ApplyT(func(v *UnitKindInputVariableMappingTo) UnitKindInputVariableMappingTo {
		if v != nil {
			return *v
		}
		var ret UnitKindInputVariableMappingTo
		return ret
	}).(UnitKindInputVariableMappingToOutput)
}

// Alias of the dependency that the inputVariable will pass its value to
func (o UnitKindInputVariableMappingToPtrOutput) Dependency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnitKindInputVariableMappingTo) *string {
		if v == nil {
			return nil
		}
		return &v.Dependency
	}).(pulumi.StringPtrOutput)
}

// Tells SaaS Runtime if this mapping should be used during lookup or not
func (o UnitKindInputVariableMappingToPtrOutput) IgnoreForLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UnitKindInputVariableMappingTo) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreForLookup
	}).(pulumi.BoolPtrOutput)
}

// Name of the inputVariable on the dependency
func (o UnitKindInputVariableMappingToPtrOutput) InputVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnitKindInputVariableMappingTo) *string {
		if v == nil {
			return nil
		}
		return &v.InputVariable
	}).(pulumi.StringPtrOutput)
}

type UnitKindOutputVariableMapping struct {
	// Output variables whose values will be passed on to dependencies
	// Structure is documented below.
	From *UnitKindOutputVariableMappingFrom `pulumi:"from"`
	// Input variables whose values will be passed on to dependencies
	// Structure is documented below.
	To *UnitKindOutputVariableMappingTo `pulumi:"to"`
	// name of the variable
	Variable string `pulumi:"variable"`
}

// UnitKindOutputVariableMappingInput is an input type that accepts UnitKindOutputVariableMappingArgs and UnitKindOutputVariableMappingOutput values.
// You can construct a concrete instance of `UnitKindOutputVariableMappingInput` via:
//
//	UnitKindOutputVariableMappingArgs{...}
type UnitKindOutputVariableMappingInput interface {
	pulumi.Input

	ToUnitKindOutputVariableMappingOutput() UnitKindOutputVariableMappingOutput
	ToUnitKindOutputVariableMappingOutputWithContext(context.Context) UnitKindOutputVariableMappingOutput
}

type UnitKindOutputVariableMappingArgs struct {
	// Output variables whose values will be passed on to dependencies
	// Structure is documented below.
	From UnitKindOutputVariableMappingFromPtrInput `pulumi:"from"`
	// Input variables whose values will be passed on to dependencies
	// Structure is documented below.
	To UnitKindOutputVariableMappingToPtrInput `pulumi:"to"`
	// name of the variable
	Variable pulumi.StringInput `pulumi:"variable"`
}

func (UnitKindOutputVariableMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindOutputVariableMapping)(nil)).Elem()
}

func (i UnitKindOutputVariableMappingArgs) ToUnitKindOutputVariableMappingOutput() UnitKindOutputVariableMappingOutput {
	return i.ToUnitKindOutputVariableMappingOutputWithContext(context.Background())
}

func (i UnitKindOutputVariableMappingArgs) ToUnitKindOutputVariableMappingOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutputVariableMappingOutput)
}

// UnitKindOutputVariableMappingArrayInput is an input type that accepts UnitKindOutputVariableMappingArray and UnitKindOutputVariableMappingArrayOutput values.
// You can construct a concrete instance of `UnitKindOutputVariableMappingArrayInput` via:
//
//	UnitKindOutputVariableMappingArray{ UnitKindOutputVariableMappingArgs{...} }
type UnitKindOutputVariableMappingArrayInput interface {
	pulumi.Input

	ToUnitKindOutputVariableMappingArrayOutput() UnitKindOutputVariableMappingArrayOutput
	ToUnitKindOutputVariableMappingArrayOutputWithContext(context.Context) UnitKindOutputVariableMappingArrayOutput
}

type UnitKindOutputVariableMappingArray []UnitKindOutputVariableMappingInput

func (UnitKindOutputVariableMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnitKindOutputVariableMapping)(nil)).Elem()
}

func (i UnitKindOutputVariableMappingArray) ToUnitKindOutputVariableMappingArrayOutput() UnitKindOutputVariableMappingArrayOutput {
	return i.ToUnitKindOutputVariableMappingArrayOutputWithContext(context.Background())
}

func (i UnitKindOutputVariableMappingArray) ToUnitKindOutputVariableMappingArrayOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutputVariableMappingArrayOutput)
}

type UnitKindOutputVariableMappingOutput struct{ *pulumi.OutputState }

func (UnitKindOutputVariableMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindOutputVariableMapping)(nil)).Elem()
}

func (o UnitKindOutputVariableMappingOutput) ToUnitKindOutputVariableMappingOutput() UnitKindOutputVariableMappingOutput {
	return o
}

func (o UnitKindOutputVariableMappingOutput) ToUnitKindOutputVariableMappingOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingOutput {
	return o
}

// Output variables whose values will be passed on to dependencies
// Structure is documented below.
func (o UnitKindOutputVariableMappingOutput) From() UnitKindOutputVariableMappingFromPtrOutput {
	return o.ApplyT(func(v UnitKindOutputVariableMapping) *UnitKindOutputVariableMappingFrom { return v.From }).(UnitKindOutputVariableMappingFromPtrOutput)
}

// Input variables whose values will be passed on to dependencies
// Structure is documented below.
func (o UnitKindOutputVariableMappingOutput) To() UnitKindOutputVariableMappingToPtrOutput {
	return o.ApplyT(func(v UnitKindOutputVariableMapping) *UnitKindOutputVariableMappingTo { return v.To }).(UnitKindOutputVariableMappingToPtrOutput)
}

// name of the variable
func (o UnitKindOutputVariableMappingOutput) Variable() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindOutputVariableMapping) string { return v.Variable }).(pulumi.StringOutput)
}

type UnitKindOutputVariableMappingArrayOutput struct{ *pulumi.OutputState }

func (UnitKindOutputVariableMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnitKindOutputVariableMapping)(nil)).Elem()
}

func (o UnitKindOutputVariableMappingArrayOutput) ToUnitKindOutputVariableMappingArrayOutput() UnitKindOutputVariableMappingArrayOutput {
	return o
}

func (o UnitKindOutputVariableMappingArrayOutput) ToUnitKindOutputVariableMappingArrayOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingArrayOutput {
	return o
}

func (o UnitKindOutputVariableMappingArrayOutput) Index(i pulumi.IntInput) UnitKindOutputVariableMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UnitKindOutputVariableMapping {
		return vs[0].([]UnitKindOutputVariableMapping)[vs[1].(int)]
	}).(UnitKindOutputVariableMappingOutput)
}

type UnitKindOutputVariableMappingFrom struct {
	// Alias of the dependency that the outputVariable will pass its value to
	Dependency string `pulumi:"dependency"`
	// Name of the outputVariable on the dependency
	OutputVariable string `pulumi:"outputVariable"`
}

// UnitKindOutputVariableMappingFromInput is an input type that accepts UnitKindOutputVariableMappingFromArgs and UnitKindOutputVariableMappingFromOutput values.
// You can construct a concrete instance of `UnitKindOutputVariableMappingFromInput` via:
//
//	UnitKindOutputVariableMappingFromArgs{...}
type UnitKindOutputVariableMappingFromInput interface {
	pulumi.Input

	ToUnitKindOutputVariableMappingFromOutput() UnitKindOutputVariableMappingFromOutput
	ToUnitKindOutputVariableMappingFromOutputWithContext(context.Context) UnitKindOutputVariableMappingFromOutput
}

type UnitKindOutputVariableMappingFromArgs struct {
	// Alias of the dependency that the outputVariable will pass its value to
	Dependency pulumi.StringInput `pulumi:"dependency"`
	// Name of the outputVariable on the dependency
	OutputVariable pulumi.StringInput `pulumi:"outputVariable"`
}

func (UnitKindOutputVariableMappingFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindOutputVariableMappingFrom)(nil)).Elem()
}

func (i UnitKindOutputVariableMappingFromArgs) ToUnitKindOutputVariableMappingFromOutput() UnitKindOutputVariableMappingFromOutput {
	return i.ToUnitKindOutputVariableMappingFromOutputWithContext(context.Background())
}

func (i UnitKindOutputVariableMappingFromArgs) ToUnitKindOutputVariableMappingFromOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutputVariableMappingFromOutput)
}

func (i UnitKindOutputVariableMappingFromArgs) ToUnitKindOutputVariableMappingFromPtrOutput() UnitKindOutputVariableMappingFromPtrOutput {
	return i.ToUnitKindOutputVariableMappingFromPtrOutputWithContext(context.Background())
}

func (i UnitKindOutputVariableMappingFromArgs) ToUnitKindOutputVariableMappingFromPtrOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutputVariableMappingFromOutput).ToUnitKindOutputVariableMappingFromPtrOutputWithContext(ctx)
}

// UnitKindOutputVariableMappingFromPtrInput is an input type that accepts UnitKindOutputVariableMappingFromArgs, UnitKindOutputVariableMappingFromPtr and UnitKindOutputVariableMappingFromPtrOutput values.
// You can construct a concrete instance of `UnitKindOutputVariableMappingFromPtrInput` via:
//
//	        UnitKindOutputVariableMappingFromArgs{...}
//
//	or:
//
//	        nil
type UnitKindOutputVariableMappingFromPtrInput interface {
	pulumi.Input

	ToUnitKindOutputVariableMappingFromPtrOutput() UnitKindOutputVariableMappingFromPtrOutput
	ToUnitKindOutputVariableMappingFromPtrOutputWithContext(context.Context) UnitKindOutputVariableMappingFromPtrOutput
}

type unitKindOutputVariableMappingFromPtrType UnitKindOutputVariableMappingFromArgs

func UnitKindOutputVariableMappingFromPtr(v *UnitKindOutputVariableMappingFromArgs) UnitKindOutputVariableMappingFromPtrInput {
	return (*unitKindOutputVariableMappingFromPtrType)(v)
}

func (*unitKindOutputVariableMappingFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKindOutputVariableMappingFrom)(nil)).Elem()
}

func (i *unitKindOutputVariableMappingFromPtrType) ToUnitKindOutputVariableMappingFromPtrOutput() UnitKindOutputVariableMappingFromPtrOutput {
	return i.ToUnitKindOutputVariableMappingFromPtrOutputWithContext(context.Background())
}

func (i *unitKindOutputVariableMappingFromPtrType) ToUnitKindOutputVariableMappingFromPtrOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutputVariableMappingFromPtrOutput)
}

type UnitKindOutputVariableMappingFromOutput struct{ *pulumi.OutputState }

func (UnitKindOutputVariableMappingFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindOutputVariableMappingFrom)(nil)).Elem()
}

func (o UnitKindOutputVariableMappingFromOutput) ToUnitKindOutputVariableMappingFromOutput() UnitKindOutputVariableMappingFromOutput {
	return o
}

func (o UnitKindOutputVariableMappingFromOutput) ToUnitKindOutputVariableMappingFromOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingFromOutput {
	return o
}

func (o UnitKindOutputVariableMappingFromOutput) ToUnitKindOutputVariableMappingFromPtrOutput() UnitKindOutputVariableMappingFromPtrOutput {
	return o.ToUnitKindOutputVariableMappingFromPtrOutputWithContext(context.Background())
}

func (o UnitKindOutputVariableMappingFromOutput) ToUnitKindOutputVariableMappingFromPtrOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UnitKindOutputVariableMappingFrom) *UnitKindOutputVariableMappingFrom {
		return &v
	}).(UnitKindOutputVariableMappingFromPtrOutput)
}

// Alias of the dependency that the outputVariable will pass its value to
func (o UnitKindOutputVariableMappingFromOutput) Dependency() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindOutputVariableMappingFrom) string { return v.Dependency }).(pulumi.StringOutput)
}

// Name of the outputVariable on the dependency
func (o UnitKindOutputVariableMappingFromOutput) OutputVariable() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindOutputVariableMappingFrom) string { return v.OutputVariable }).(pulumi.StringOutput)
}

type UnitKindOutputVariableMappingFromPtrOutput struct{ *pulumi.OutputState }

func (UnitKindOutputVariableMappingFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKindOutputVariableMappingFrom)(nil)).Elem()
}

func (o UnitKindOutputVariableMappingFromPtrOutput) ToUnitKindOutputVariableMappingFromPtrOutput() UnitKindOutputVariableMappingFromPtrOutput {
	return o
}

func (o UnitKindOutputVariableMappingFromPtrOutput) ToUnitKindOutputVariableMappingFromPtrOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingFromPtrOutput {
	return o
}

func (o UnitKindOutputVariableMappingFromPtrOutput) Elem() UnitKindOutputVariableMappingFromOutput {
	return o.ApplyT(func(v *UnitKindOutputVariableMappingFrom) UnitKindOutputVariableMappingFrom {
		if v != nil {
			return *v
		}
		var ret UnitKindOutputVariableMappingFrom
		return ret
	}).(UnitKindOutputVariableMappingFromOutput)
}

// Alias of the dependency that the outputVariable will pass its value to
func (o UnitKindOutputVariableMappingFromPtrOutput) Dependency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnitKindOutputVariableMappingFrom) *string {
		if v == nil {
			return nil
		}
		return &v.Dependency
	}).(pulumi.StringPtrOutput)
}

// Name of the outputVariable on the dependency
func (o UnitKindOutputVariableMappingFromPtrOutput) OutputVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnitKindOutputVariableMappingFrom) *string {
		if v == nil {
			return nil
		}
		return &v.OutputVariable
	}).(pulumi.StringPtrOutput)
}

type UnitKindOutputVariableMappingTo struct {
	// Alias of the dependency that the inputVariable will pass its value to
	Dependency string `pulumi:"dependency"`
	// Tells SaaS Runtime if this mapping should be used during lookup or not
	IgnoreForLookup *bool `pulumi:"ignoreForLookup"`
	// Name of the inputVariable on the dependency
	InputVariable string `pulumi:"inputVariable"`
}

// UnitKindOutputVariableMappingToInput is an input type that accepts UnitKindOutputVariableMappingToArgs and UnitKindOutputVariableMappingToOutput values.
// You can construct a concrete instance of `UnitKindOutputVariableMappingToInput` via:
//
//	UnitKindOutputVariableMappingToArgs{...}
type UnitKindOutputVariableMappingToInput interface {
	pulumi.Input

	ToUnitKindOutputVariableMappingToOutput() UnitKindOutputVariableMappingToOutput
	ToUnitKindOutputVariableMappingToOutputWithContext(context.Context) UnitKindOutputVariableMappingToOutput
}

type UnitKindOutputVariableMappingToArgs struct {
	// Alias of the dependency that the inputVariable will pass its value to
	Dependency pulumi.StringInput `pulumi:"dependency"`
	// Tells SaaS Runtime if this mapping should be used during lookup or not
	IgnoreForLookup pulumi.BoolPtrInput `pulumi:"ignoreForLookup"`
	// Name of the inputVariable on the dependency
	InputVariable pulumi.StringInput `pulumi:"inputVariable"`
}

func (UnitKindOutputVariableMappingToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindOutputVariableMappingTo)(nil)).Elem()
}

func (i UnitKindOutputVariableMappingToArgs) ToUnitKindOutputVariableMappingToOutput() UnitKindOutputVariableMappingToOutput {
	return i.ToUnitKindOutputVariableMappingToOutputWithContext(context.Background())
}

func (i UnitKindOutputVariableMappingToArgs) ToUnitKindOutputVariableMappingToOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutputVariableMappingToOutput)
}

func (i UnitKindOutputVariableMappingToArgs) ToUnitKindOutputVariableMappingToPtrOutput() UnitKindOutputVariableMappingToPtrOutput {
	return i.ToUnitKindOutputVariableMappingToPtrOutputWithContext(context.Background())
}

func (i UnitKindOutputVariableMappingToArgs) ToUnitKindOutputVariableMappingToPtrOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutputVariableMappingToOutput).ToUnitKindOutputVariableMappingToPtrOutputWithContext(ctx)
}

// UnitKindOutputVariableMappingToPtrInput is an input type that accepts UnitKindOutputVariableMappingToArgs, UnitKindOutputVariableMappingToPtr and UnitKindOutputVariableMappingToPtrOutput values.
// You can construct a concrete instance of `UnitKindOutputVariableMappingToPtrInput` via:
//
//	        UnitKindOutputVariableMappingToArgs{...}
//
//	or:
//
//	        nil
type UnitKindOutputVariableMappingToPtrInput interface {
	pulumi.Input

	ToUnitKindOutputVariableMappingToPtrOutput() UnitKindOutputVariableMappingToPtrOutput
	ToUnitKindOutputVariableMappingToPtrOutputWithContext(context.Context) UnitKindOutputVariableMappingToPtrOutput
}

type unitKindOutputVariableMappingToPtrType UnitKindOutputVariableMappingToArgs

func UnitKindOutputVariableMappingToPtr(v *UnitKindOutputVariableMappingToArgs) UnitKindOutputVariableMappingToPtrInput {
	return (*unitKindOutputVariableMappingToPtrType)(v)
}

func (*unitKindOutputVariableMappingToPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKindOutputVariableMappingTo)(nil)).Elem()
}

func (i *unitKindOutputVariableMappingToPtrType) ToUnitKindOutputVariableMappingToPtrOutput() UnitKindOutputVariableMappingToPtrOutput {
	return i.ToUnitKindOutputVariableMappingToPtrOutputWithContext(context.Background())
}

func (i *unitKindOutputVariableMappingToPtrType) ToUnitKindOutputVariableMappingToPtrOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitKindOutputVariableMappingToPtrOutput)
}

type UnitKindOutputVariableMappingToOutput struct{ *pulumi.OutputState }

func (UnitKindOutputVariableMappingToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnitKindOutputVariableMappingTo)(nil)).Elem()
}

func (o UnitKindOutputVariableMappingToOutput) ToUnitKindOutputVariableMappingToOutput() UnitKindOutputVariableMappingToOutput {
	return o
}

func (o UnitKindOutputVariableMappingToOutput) ToUnitKindOutputVariableMappingToOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingToOutput {
	return o
}

func (o UnitKindOutputVariableMappingToOutput) ToUnitKindOutputVariableMappingToPtrOutput() UnitKindOutputVariableMappingToPtrOutput {
	return o.ToUnitKindOutputVariableMappingToPtrOutputWithContext(context.Background())
}

func (o UnitKindOutputVariableMappingToOutput) ToUnitKindOutputVariableMappingToPtrOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingToPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UnitKindOutputVariableMappingTo) *UnitKindOutputVariableMappingTo {
		return &v
	}).(UnitKindOutputVariableMappingToPtrOutput)
}

// Alias of the dependency that the inputVariable will pass its value to
func (o UnitKindOutputVariableMappingToOutput) Dependency() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindOutputVariableMappingTo) string { return v.Dependency }).(pulumi.StringOutput)
}

// Tells SaaS Runtime if this mapping should be used during lookup or not
func (o UnitKindOutputVariableMappingToOutput) IgnoreForLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UnitKindOutputVariableMappingTo) *bool { return v.IgnoreForLookup }).(pulumi.BoolPtrOutput)
}

// Name of the inputVariable on the dependency
func (o UnitKindOutputVariableMappingToOutput) InputVariable() pulumi.StringOutput {
	return o.ApplyT(func(v UnitKindOutputVariableMappingTo) string { return v.InputVariable }).(pulumi.StringOutput)
}

type UnitKindOutputVariableMappingToPtrOutput struct{ *pulumi.OutputState }

func (UnitKindOutputVariableMappingToPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitKindOutputVariableMappingTo)(nil)).Elem()
}

func (o UnitKindOutputVariableMappingToPtrOutput) ToUnitKindOutputVariableMappingToPtrOutput() UnitKindOutputVariableMappingToPtrOutput {
	return o
}

func (o UnitKindOutputVariableMappingToPtrOutput) ToUnitKindOutputVariableMappingToPtrOutputWithContext(ctx context.Context) UnitKindOutputVariableMappingToPtrOutput {
	return o
}

func (o UnitKindOutputVariableMappingToPtrOutput) Elem() UnitKindOutputVariableMappingToOutput {
	return o.ApplyT(func(v *UnitKindOutputVariableMappingTo) UnitKindOutputVariableMappingTo {
		if v != nil {
			return *v
		}
		var ret UnitKindOutputVariableMappingTo
		return ret
	}).(UnitKindOutputVariableMappingToOutput)
}

// Alias of the dependency that the inputVariable will pass its value to
func (o UnitKindOutputVariableMappingToPtrOutput) Dependency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnitKindOutputVariableMappingTo) *string {
		if v == nil {
			return nil
		}
		return &v.Dependency
	}).(pulumi.StringPtrOutput)
}

// Tells SaaS Runtime if this mapping should be used during lookup or not
func (o UnitKindOutputVariableMappingToPtrOutput) IgnoreForLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UnitKindOutputVariableMappingTo) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreForLookup
	}).(pulumi.BoolPtrOutput)
}

// Name of the inputVariable on the dependency
func (o UnitKindOutputVariableMappingToPtrOutput) InputVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnitKindOutputVariableMappingTo) *string {
		if v == nil {
			return nil
		}
		return &v.InputVariable
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SaaSLocationInput)(nil)).Elem(), SaaSLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaaSLocationArrayInput)(nil)).Elem(), SaaSLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindDependencyInput)(nil)).Elem(), UnitKindDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindDependencyArrayInput)(nil)).Elem(), UnitKindDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindInputVariableMappingInput)(nil)).Elem(), UnitKindInputVariableMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindInputVariableMappingArrayInput)(nil)).Elem(), UnitKindInputVariableMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindInputVariableMappingFromInput)(nil)).Elem(), UnitKindInputVariableMappingFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindInputVariableMappingFromPtrInput)(nil)).Elem(), UnitKindInputVariableMappingFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindInputVariableMappingToInput)(nil)).Elem(), UnitKindInputVariableMappingToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindInputVariableMappingToPtrInput)(nil)).Elem(), UnitKindInputVariableMappingToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindOutputVariableMappingInput)(nil)).Elem(), UnitKindOutputVariableMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindOutputVariableMappingArrayInput)(nil)).Elem(), UnitKindOutputVariableMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindOutputVariableMappingFromInput)(nil)).Elem(), UnitKindOutputVariableMappingFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindOutputVariableMappingFromPtrInput)(nil)).Elem(), UnitKindOutputVariableMappingFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindOutputVariableMappingToInput)(nil)).Elem(), UnitKindOutputVariableMappingToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitKindOutputVariableMappingToPtrInput)(nil)).Elem(), UnitKindOutputVariableMappingToArgs{})
	pulumi.RegisterOutputType(SaaSLocationOutput{})
	pulumi.RegisterOutputType(SaaSLocationArrayOutput{})
	pulumi.RegisterOutputType(UnitKindDependencyOutput{})
	pulumi.RegisterOutputType(UnitKindDependencyArrayOutput{})
	pulumi.RegisterOutputType(UnitKindInputVariableMappingOutput{})
	pulumi.RegisterOutputType(UnitKindInputVariableMappingArrayOutput{})
	pulumi.RegisterOutputType(UnitKindInputVariableMappingFromOutput{})
	pulumi.RegisterOutputType(UnitKindInputVariableMappingFromPtrOutput{})
	pulumi.RegisterOutputType(UnitKindInputVariableMappingToOutput{})
	pulumi.RegisterOutputType(UnitKindInputVariableMappingToPtrOutput{})
	pulumi.RegisterOutputType(UnitKindOutputVariableMappingOutput{})
	pulumi.RegisterOutputType(UnitKindOutputVariableMappingArrayOutput{})
	pulumi.RegisterOutputType(UnitKindOutputVariableMappingFromOutput{})
	pulumi.RegisterOutputType(UnitKindOutputVariableMappingFromPtrOutput{})
	pulumi.RegisterOutputType(UnitKindOutputVariableMappingToOutput{})
	pulumi.RegisterOutputType(UnitKindOutputVariableMappingToPtrOutput{})
}
