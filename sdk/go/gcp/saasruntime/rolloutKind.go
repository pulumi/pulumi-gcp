// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package saasruntime

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A RolloutKind is a reusable configuration resource that defines the policies, strategies, and targeting for Rollout operations. It acts as a template for repeatable Rollouts, providing guardrails and ensuring that updates are executed in a consistent manner across a fleet of Units.
//
// ## Example Usage
//
// ### Saas Runtime Rollout Kind Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/saasruntime"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSaas, err := saasruntime.NewSaaS(ctx, "example_saas", &saasruntime.SaaSArgs{
//				SaasId:   pulumi.String("example-saas"),
//				Location: pulumi.String("global"),
//				Locations: saasruntime.SaaSLocationArray{
//					&saasruntime.SaaSLocationArgs{
//						Name: pulumi.String("us-central1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleUnitkind, err := saasruntime.NewUnitKind(ctx, "example_unitkind", &saasruntime.UnitKindArgs{
//				Location:   pulumi.String("global"),
//				UnitKindId: pulumi.String("example-unitkind"),
//				Saas:       exampleSaas.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = saasruntime.NewRolloutKind(ctx, "example", &saasruntime.RolloutKindArgs{
//				Location:                     pulumi.String("global"),
//				RolloutKindId:                pulumi.String("example-rolloutkind"),
//				UnitKind:                     exampleUnitkind.ID(),
//				RolloutOrchestrationStrategy: pulumi.String("Google.Cloud.Simple.OneLocationAtATime"),
//				ErrorBudget: &saasruntime.RolloutKindErrorBudgetArgs{
//					AllowedCount: pulumi.Int(1),
//				},
//				UnitFilter: pulumi.String("unit.labels['key1'] == 'value1'"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RolloutKind can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/rolloutKinds/{{rollout_kind_id}}`
//
// * `{{project}}/{{location}}/{{rollout_kind_id}}`
//
// * `{{location}}/{{rollout_kind_id}}`
//
// When using the `pulumi import` command, RolloutKind can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default projects/{{project}}/locations/{{location}}/rolloutKinds/{{rollout_kind_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default {{project}}/{{location}}/{{rollout_kind_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default {{location}}/{{rollout_kind_id}}
// ```
type RolloutKind struct {
	pulumi.CustomResourceState

	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The timestamp when the resource was created.
	CreateTime           pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The configuration for error budget. If the number of failed units exceeds
	// max(allowed_count, allowedRatio * total_units), the rollout will be paused.
	// Structure is documented below.
	ErrorBudget RolloutKindErrorBudgetPtrOutput `pulumi:"errorBudget"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The ID value for the new rollout kind.
	RolloutKindId pulumi.StringOutput `pulumi:"rolloutKindId"`
	// The strategy used for executing a Rollout. This is a required field.
	// There are two supported values strategies which are used to control a rollout.
	// - "Google.Cloud.Simple.AllAtOnce"
	// - "Google.Cloud.Simple.OneLocationAtATime"
	//   A rollout with one of these simple strategies will rollout across
	//   all locations defined in the associated UnitKind's Saas Locations.
	RolloutOrchestrationStrategy pulumi.StringPtrOutput `pulumi:"rolloutOrchestrationStrategy"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// CEL(https://github.com/google/cel-spec) formatted filter string against
	// Unit. The filter will be applied to determine the eligible unit population.
	// This filter can only reduce, but not expand the scope of the rollout.
	UnitFilter pulumi.StringPtrOutput `pulumi:"unitFilter"`
	// UnitKind that this rollout kind corresponds to. Rollouts stemming from this
	// rollout kind will target the units of this unit kind. In other words, this
	// defines the population of target units to be upgraded by rollouts.
	UnitKind pulumi.StringOutput `pulumi:"unitKind"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The config for updating the unit kind. By default, the unit kind will be
	// updated on the rollout start.
	// Possible values:
	// UPDATE_UNIT_KIND_STRATEGY_ON_START
	// UPDATE_UNIT_KIND_STRATEGY_NEVER
	// Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
	UpdateUnitKindStrategy pulumi.StringPtrOutput `pulumi:"updateUnitKindStrategy"`
}

// NewRolloutKind registers a new resource with the given unique name, arguments, and options.
func NewRolloutKind(ctx *pulumi.Context,
	name string, args *RolloutKindArgs, opts ...pulumi.ResourceOption) (*RolloutKind, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.RolloutKindId == nil {
		return nil, errors.New("invalid value for required argument 'RolloutKindId'")
	}
	if args.UnitKind == nil {
		return nil, errors.New("invalid value for required argument 'UnitKind'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RolloutKind
	err := ctx.RegisterResource("gcp:saasruntime/rolloutKind:RolloutKind", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolloutKind gets an existing RolloutKind resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolloutKind(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolloutKindState, opts ...pulumi.ResourceOption) (*RolloutKind, error) {
	var resource RolloutKind
	err := ctx.ReadResource("gcp:saasruntime/rolloutKind:RolloutKind", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolloutKind resources.
type rolloutKindState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The timestamp when the resource was created.
	CreateTime           *string           `pulumi:"createTime"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The configuration for error budget. If the number of failed units exceeds
	// max(allowed_count, allowedRatio * total_units), the rollout will be paused.
	// Structure is documented below.
	ErrorBudget *RolloutKindErrorBudget `pulumi:"errorBudget"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The ID value for the new rollout kind.
	RolloutKindId *string `pulumi:"rolloutKindId"`
	// The strategy used for executing a Rollout. This is a required field.
	// There are two supported values strategies which are used to control a rollout.
	// - "Google.Cloud.Simple.AllAtOnce"
	// - "Google.Cloud.Simple.OneLocationAtATime"
	//   A rollout with one of these simple strategies will rollout across
	//   all locations defined in the associated UnitKind's Saas Locations.
	RolloutOrchestrationStrategy *string `pulumi:"rolloutOrchestrationStrategy"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid *string `pulumi:"uid"`
	// CEL(https://github.com/google/cel-spec) formatted filter string against
	// Unit. The filter will be applied to determine the eligible unit population.
	// This filter can only reduce, but not expand the scope of the rollout.
	UnitFilter *string `pulumi:"unitFilter"`
	// UnitKind that this rollout kind corresponds to. Rollouts stemming from this
	// rollout kind will target the units of this unit kind. In other words, this
	// defines the population of target units to be upgraded by rollouts.
	UnitKind *string `pulumi:"unitKind"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime *string `pulumi:"updateTime"`
	// The config for updating the unit kind. By default, the unit kind will be
	// updated on the rollout start.
	// Possible values:
	// UPDATE_UNIT_KIND_STRATEGY_ON_START
	// UPDATE_UNIT_KIND_STRATEGY_NEVER
	// Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
	UpdateUnitKindStrategy *string `pulumi:"updateUnitKindStrategy"`
}

type RolloutKindState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The timestamp when the resource was created.
	CreateTime           pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The configuration for error budget. If the number of failed units exceeds
	// max(allowed_count, allowedRatio * total_units), the rollout will be paused.
	// Structure is documented below.
	ErrorBudget RolloutKindErrorBudgetPtrInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The ID value for the new rollout kind.
	RolloutKindId pulumi.StringPtrInput
	// The strategy used for executing a Rollout. This is a required field.
	// There are two supported values strategies which are used to control a rollout.
	// - "Google.Cloud.Simple.AllAtOnce"
	// - "Google.Cloud.Simple.OneLocationAtATime"
	//   A rollout with one of these simple strategies will rollout across
	//   all locations defined in the associated UnitKind's Saas Locations.
	RolloutOrchestrationStrategy pulumi.StringPtrInput
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringPtrInput
	// CEL(https://github.com/google/cel-spec) formatted filter string against
	// Unit. The filter will be applied to determine the eligible unit population.
	// This filter can only reduce, but not expand the scope of the rollout.
	UnitFilter pulumi.StringPtrInput
	// UnitKind that this rollout kind corresponds to. Rollouts stemming from this
	// rollout kind will target the units of this unit kind. In other words, this
	// defines the population of target units to be upgraded by rollouts.
	UnitKind pulumi.StringPtrInput
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringPtrInput
	// The config for updating the unit kind. By default, the unit kind will be
	// updated on the rollout start.
	// Possible values:
	// UPDATE_UNIT_KIND_STRATEGY_ON_START
	// UPDATE_UNIT_KIND_STRATEGY_NEVER
	// Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
	UpdateUnitKindStrategy pulumi.StringPtrInput
}

func (RolloutKindState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutKindState)(nil)).Elem()
}

type rolloutKindArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The configuration for error budget. If the number of failed units exceeds
	// max(allowed_count, allowedRatio * total_units), the rollout will be paused.
	// Structure is documented below.
	ErrorBudget *RolloutKindErrorBudget `pulumi:"errorBudget"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID value for the new rollout kind.
	RolloutKindId string `pulumi:"rolloutKindId"`
	// The strategy used for executing a Rollout. This is a required field.
	// There are two supported values strategies which are used to control a rollout.
	// - "Google.Cloud.Simple.AllAtOnce"
	// - "Google.Cloud.Simple.OneLocationAtATime"
	//   A rollout with one of these simple strategies will rollout across
	//   all locations defined in the associated UnitKind's Saas Locations.
	RolloutOrchestrationStrategy *string `pulumi:"rolloutOrchestrationStrategy"`
	// CEL(https://github.com/google/cel-spec) formatted filter string against
	// Unit. The filter will be applied to determine the eligible unit population.
	// This filter can only reduce, but not expand the scope of the rollout.
	UnitFilter *string `pulumi:"unitFilter"`
	// UnitKind that this rollout kind corresponds to. Rollouts stemming from this
	// rollout kind will target the units of this unit kind. In other words, this
	// defines the population of target units to be upgraded by rollouts.
	UnitKind string `pulumi:"unitKind"`
	// The config for updating the unit kind. By default, the unit kind will be
	// updated on the rollout start.
	// Possible values:
	// UPDATE_UNIT_KIND_STRATEGY_ON_START
	// UPDATE_UNIT_KIND_STRATEGY_NEVER
	// Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
	UpdateUnitKindStrategy *string `pulumi:"updateUnitKindStrategy"`
}

// The set of arguments for constructing a RolloutKind resource.
type RolloutKindArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The configuration for error budget. If the number of failed units exceeds
	// max(allowed_count, allowedRatio * total_units), the rollout will be paused.
	// Structure is documented below.
	ErrorBudget RolloutKindErrorBudgetPtrInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID value for the new rollout kind.
	RolloutKindId pulumi.StringInput
	// The strategy used for executing a Rollout. This is a required field.
	// There are two supported values strategies which are used to control a rollout.
	// - "Google.Cloud.Simple.AllAtOnce"
	// - "Google.Cloud.Simple.OneLocationAtATime"
	//   A rollout with one of these simple strategies will rollout across
	//   all locations defined in the associated UnitKind's Saas Locations.
	RolloutOrchestrationStrategy pulumi.StringPtrInput
	// CEL(https://github.com/google/cel-spec) formatted filter string against
	// Unit. The filter will be applied to determine the eligible unit population.
	// This filter can only reduce, but not expand the scope of the rollout.
	UnitFilter pulumi.StringPtrInput
	// UnitKind that this rollout kind corresponds to. Rollouts stemming from this
	// rollout kind will target the units of this unit kind. In other words, this
	// defines the population of target units to be upgraded by rollouts.
	UnitKind pulumi.StringInput
	// The config for updating the unit kind. By default, the unit kind will be
	// updated on the rollout start.
	// Possible values:
	// UPDATE_UNIT_KIND_STRATEGY_ON_START
	// UPDATE_UNIT_KIND_STRATEGY_NEVER
	// Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
	UpdateUnitKindStrategy pulumi.StringPtrInput
}

func (RolloutKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutKindArgs)(nil)).Elem()
}

type RolloutKindInput interface {
	pulumi.Input

	ToRolloutKindOutput() RolloutKindOutput
	ToRolloutKindOutputWithContext(ctx context.Context) RolloutKindOutput
}

func (*RolloutKind) ElementType() reflect.Type {
	return reflect.TypeOf((**RolloutKind)(nil)).Elem()
}

func (i *RolloutKind) ToRolloutKindOutput() RolloutKindOutput {
	return i.ToRolloutKindOutputWithContext(context.Background())
}

func (i *RolloutKind) ToRolloutKindOutputWithContext(ctx context.Context) RolloutKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutKindOutput)
}

// RolloutKindArrayInput is an input type that accepts RolloutKindArray and RolloutKindArrayOutput values.
// You can construct a concrete instance of `RolloutKindArrayInput` via:
//
//	RolloutKindArray{ RolloutKindArgs{...} }
type RolloutKindArrayInput interface {
	pulumi.Input

	ToRolloutKindArrayOutput() RolloutKindArrayOutput
	ToRolloutKindArrayOutputWithContext(context.Context) RolloutKindArrayOutput
}

type RolloutKindArray []RolloutKindInput

func (RolloutKindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolloutKind)(nil)).Elem()
}

func (i RolloutKindArray) ToRolloutKindArrayOutput() RolloutKindArrayOutput {
	return i.ToRolloutKindArrayOutputWithContext(context.Background())
}

func (i RolloutKindArray) ToRolloutKindArrayOutputWithContext(ctx context.Context) RolloutKindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutKindArrayOutput)
}

// RolloutKindMapInput is an input type that accepts RolloutKindMap and RolloutKindMapOutput values.
// You can construct a concrete instance of `RolloutKindMapInput` via:
//
//	RolloutKindMap{ "key": RolloutKindArgs{...} }
type RolloutKindMapInput interface {
	pulumi.Input

	ToRolloutKindMapOutput() RolloutKindMapOutput
	ToRolloutKindMapOutputWithContext(context.Context) RolloutKindMapOutput
}

type RolloutKindMap map[string]RolloutKindInput

func (RolloutKindMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolloutKind)(nil)).Elem()
}

func (i RolloutKindMap) ToRolloutKindMapOutput() RolloutKindMapOutput {
	return i.ToRolloutKindMapOutputWithContext(context.Background())
}

func (i RolloutKindMap) ToRolloutKindMapOutputWithContext(ctx context.Context) RolloutKindMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutKindMapOutput)
}

type RolloutKindOutput struct{ *pulumi.OutputState }

func (RolloutKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolloutKind)(nil)).Elem()
}

func (o RolloutKindOutput) ToRolloutKindOutput() RolloutKindOutput {
	return o
}

func (o RolloutKindOutput) ToRolloutKindOutputWithContext(ctx context.Context) RolloutKindOutput {
	return o
}

// Annotations is an unstructured key-value map stored with a resource that
// may be set by external tools to store and retrieve arbitrary metadata.
// They are not queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/user-guide/annotations
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o RolloutKindOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The timestamp when the resource was created.
func (o RolloutKindOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o RolloutKindOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o RolloutKindOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The configuration for error budget. If the number of failed units exceeds
// max(allowed_count, allowedRatio * total_units), the rollout will be paused.
// Structure is documented below.
func (o RolloutKindOutput) ErrorBudget() RolloutKindErrorBudgetPtrOutput {
	return o.ApplyT(func(v *RolloutKind) RolloutKindErrorBudgetPtrOutput { return v.ErrorBudget }).(RolloutKindErrorBudgetPtrOutput)
}

// The labels on the resource, which can be used for categorization.
// similar to Kubernetes resource labels.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o RolloutKindOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o RolloutKindOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name (full URI of the resource) following the standard naming
// scheme:
// "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
func (o RolloutKindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RolloutKindOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o RolloutKindOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The ID value for the new rollout kind.
func (o RolloutKindOutput) RolloutKindId() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringOutput { return v.RolloutKindId }).(pulumi.StringOutput)
}

// The strategy used for executing a Rollout. This is a required field.
// There are two supported values strategies which are used to control a rollout.
//   - "Google.Cloud.Simple.AllAtOnce"
//   - "Google.Cloud.Simple.OneLocationAtATime"
//     A rollout with one of these simple strategies will rollout across
//     all locations defined in the associated UnitKind's Saas Locations.
func (o RolloutKindOutput) RolloutOrchestrationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringPtrOutput { return v.RolloutOrchestrationStrategy }).(pulumi.StringPtrOutput)
}

// The unique identifier of the resource. UID is unique in the time
// and space for this resource within the scope of the service. It is
// typically generated by the server on successful creation of a resource
// and must not be changed. UID is used to uniquely identify resources
// with resource name reuses. This should be a UUID4.
func (o RolloutKindOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// CEL(https://github.com/google/cel-spec) formatted filter string against
// Unit. The filter will be applied to determine the eligible unit population.
// This filter can only reduce, but not expand the scope of the rollout.
func (o RolloutKindOutput) UnitFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringPtrOutput { return v.UnitFilter }).(pulumi.StringPtrOutput)
}

// UnitKind that this rollout kind corresponds to. Rollouts stemming from this
// rollout kind will target the units of this unit kind. In other words, this
// defines the population of target units to be upgraded by rollouts.
func (o RolloutKindOutput) UnitKind() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringOutput { return v.UnitKind }).(pulumi.StringOutput)
}

// The timestamp when the resource was last updated. Any
// change to the resource made by users must refresh this value.
// Changes to a resource made by the service should refresh this value.
func (o RolloutKindOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The config for updating the unit kind. By default, the unit kind will be
// updated on the rollout start.
// Possible values:
// UPDATE_UNIT_KIND_STRATEGY_ON_START
// UPDATE_UNIT_KIND_STRATEGY_NEVER
// Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
func (o RolloutKindOutput) UpdateUnitKindStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RolloutKind) pulumi.StringPtrOutput { return v.UpdateUnitKindStrategy }).(pulumi.StringPtrOutput)
}

type RolloutKindArrayOutput struct{ *pulumi.OutputState }

func (RolloutKindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolloutKind)(nil)).Elem()
}

func (o RolloutKindArrayOutput) ToRolloutKindArrayOutput() RolloutKindArrayOutput {
	return o
}

func (o RolloutKindArrayOutput) ToRolloutKindArrayOutputWithContext(ctx context.Context) RolloutKindArrayOutput {
	return o
}

func (o RolloutKindArrayOutput) Index(i pulumi.IntInput) RolloutKindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolloutKind {
		return vs[0].([]*RolloutKind)[vs[1].(int)]
	}).(RolloutKindOutput)
}

type RolloutKindMapOutput struct{ *pulumi.OutputState }

func (RolloutKindMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolloutKind)(nil)).Elem()
}

func (o RolloutKindMapOutput) ToRolloutKindMapOutput() RolloutKindMapOutput {
	return o
}

func (o RolloutKindMapOutput) ToRolloutKindMapOutputWithContext(ctx context.Context) RolloutKindMapOutput {
	return o
}

func (o RolloutKindMapOutput) MapIndex(k pulumi.StringInput) RolloutKindOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolloutKind {
		return vs[0].(map[string]*RolloutKind)[vs[1].(string)]
	}).(RolloutKindOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutKindInput)(nil)).Elem(), &RolloutKind{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutKindArrayInput)(nil)).Elem(), RolloutKindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutKindMapInput)(nil)).Elem(), RolloutKindMap{})
	pulumi.RegisterOutputType(RolloutKindOutput{})
	pulumi.RegisterOutputType(RolloutKindArrayOutput{})
	pulumi.RegisterOutputType(RolloutKindMapOutput{})
}
