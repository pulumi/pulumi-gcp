// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package saasruntime

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Tenant resource represents the service producer's view of a service instance created for a consumer. It enables the association between the service producer's managed resources and the end consumer.
//
// ## Example Usage
//
// ### Saas Runtime Tenant Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/saasruntime"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSaas, err := saasruntime.NewSaaS(ctx, "example_saas", &saasruntime.SaaSArgs{
//				SaasId:   pulumi.String("example-saas"),
//				Location: pulumi.String("global"),
//				Locations: saasruntime.SaaSLocationArray{
//					&saasruntime.SaaSLocationArgs{
//						Name: pulumi.String("us-central1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = saasruntime.NewTenant(ctx, "example", &saasruntime.TenantArgs{
//				Location:         pulumi.String("global"),
//				TenantId:         pulumi.String("example-tenant"),
//				Saas:             exampleSaas.ID(),
//				ConsumerResource: pulumi.String("//compute.googleapis.com/projects/example-project/zones/us-central1-a/instances/example-instance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Tenant can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/tenants/{{tenant_id}}`
//
// * `{{project}}/{{location}}/{{tenant_id}}`
//
// * `{{location}}/{{tenant_id}}`
//
// When using the `pulumi import` command, Tenant can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:saasruntime/tenant:Tenant default projects/{{project}}/locations/{{location}}/tenants/{{tenant_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/tenant:Tenant default {{project}}/{{location}}/{{tenant_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/tenant:Tenant default {{location}}/{{tenant_id}}
// ```
type Tenant struct {
	pulumi.CustomResourceState

	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// A reference to the consumer resource this SaaS Tenant is representing.
	// The relationship with a consumer resource can be used by SaaS Runtime for
	// retrieving consumer-defined settings and policies such as maintenance
	// policies (using Unified Maintenance Policy API).
	ConsumerResource pulumi.StringPtrOutput `pulumi:"consumerResource"`
	// The timestamp when the resource was created.
	CreateTime           pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/tenants/{tenant}"
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the
	// SaaS Runtime common data model.
	Saas pulumi.StringOutput `pulumi:"saas"`
	// The ID value for the new tenant.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTenant registers a new resource with the given unique name, arguments, and options.
func NewTenant(ctx *pulumi.Context,
	name string, args *TenantArgs, opts ...pulumi.ResourceOption) (*Tenant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Saas == nil {
		return nil, errors.New("invalid value for required argument 'Saas'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tenant
	err := ctx.RegisterResource("gcp:saasruntime/tenant:Tenant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenant gets an existing Tenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantState, opts ...pulumi.ResourceOption) (*Tenant, error) {
	var resource Tenant
	err := ctx.ReadResource("gcp:saasruntime/tenant:Tenant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tenant resources.
type tenantState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// A reference to the consumer resource this SaaS Tenant is representing.
	// The relationship with a consumer resource can be used by SaaS Runtime for
	// retrieving consumer-defined settings and policies such as maintenance
	// policies (using Unified Maintenance Policy API).
	ConsumerResource *string `pulumi:"consumerResource"`
	// The timestamp when the resource was created.
	CreateTime           *string           `pulumi:"createTime"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/tenants/{tenant}"
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the
	// SaaS Runtime common data model.
	Saas *string `pulumi:"saas"`
	// The ID value for the new tenant.
	TenantId *string `pulumi:"tenantId"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid *string `pulumi:"uid"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime *string `pulumi:"updateTime"`
}

type TenantState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// A reference to the consumer resource this SaaS Tenant is representing.
	// The relationship with a consumer resource can be used by SaaS Runtime for
	// retrieving consumer-defined settings and policies such as maintenance
	// policies (using Unified Maintenance Policy API).
	ConsumerResource pulumi.StringPtrInput
	// The timestamp when the resource was created.
	CreateTime           pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/tenants/{tenant}"
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the
	// SaaS Runtime common data model.
	Saas pulumi.StringPtrInput
	// The ID value for the new tenant.
	TenantId pulumi.StringPtrInput
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringPtrInput
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringPtrInput
}

func (TenantState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantState)(nil)).Elem()
}

type tenantArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// A reference to the consumer resource this SaaS Tenant is representing.
	// The relationship with a consumer resource can be used by SaaS Runtime for
	// retrieving consumer-defined settings and policies such as maintenance
	// policies (using Unified Maintenance Policy API).
	ConsumerResource *string `pulumi:"consumerResource"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the
	// SaaS Runtime common data model.
	Saas string `pulumi:"saas"`
	// The ID value for the new tenant.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a Tenant resource.
type TenantArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// A reference to the consumer resource this SaaS Tenant is representing.
	// The relationship with a consumer resource can be used by SaaS Runtime for
	// retrieving consumer-defined settings and policies such as maintenance
	// policies (using Unified Maintenance Policy API).
	ConsumerResource pulumi.StringPtrInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the Saas that defines the product (managed service) that
	// the producer wants to manage with SaaS Runtime. Part of the
	// SaaS Runtime common data model.
	Saas pulumi.StringInput
	// The ID value for the new tenant.
	TenantId pulumi.StringInput
}

func (TenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantArgs)(nil)).Elem()
}

type TenantInput interface {
	pulumi.Input

	ToTenantOutput() TenantOutput
	ToTenantOutputWithContext(ctx context.Context) TenantOutput
}

func (*Tenant) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (i *Tenant) ToTenantOutput() TenantOutput {
	return i.ToTenantOutputWithContext(context.Background())
}

func (i *Tenant) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantOutput)
}

// TenantArrayInput is an input type that accepts TenantArray and TenantArrayOutput values.
// You can construct a concrete instance of `TenantArrayInput` via:
//
//	TenantArray{ TenantArgs{...} }
type TenantArrayInput interface {
	pulumi.Input

	ToTenantArrayOutput() TenantArrayOutput
	ToTenantArrayOutputWithContext(context.Context) TenantArrayOutput
}

type TenantArray []TenantInput

func (TenantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tenant)(nil)).Elem()
}

func (i TenantArray) ToTenantArrayOutput() TenantArrayOutput {
	return i.ToTenantArrayOutputWithContext(context.Background())
}

func (i TenantArray) ToTenantArrayOutputWithContext(ctx context.Context) TenantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantArrayOutput)
}

// TenantMapInput is an input type that accepts TenantMap and TenantMapOutput values.
// You can construct a concrete instance of `TenantMapInput` via:
//
//	TenantMap{ "key": TenantArgs{...} }
type TenantMapInput interface {
	pulumi.Input

	ToTenantMapOutput() TenantMapOutput
	ToTenantMapOutputWithContext(context.Context) TenantMapOutput
}

type TenantMap map[string]TenantInput

func (TenantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tenant)(nil)).Elem()
}

func (i TenantMap) ToTenantMapOutput() TenantMapOutput {
	return i.ToTenantMapOutputWithContext(context.Background())
}

func (i TenantMap) ToTenantMapOutputWithContext(ctx context.Context) TenantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantMapOutput)
}

type TenantOutput struct{ *pulumi.OutputState }

func (TenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (o TenantOutput) ToTenantOutput() TenantOutput {
	return o
}

func (o TenantOutput) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return o
}

// Annotations is an unstructured key-value map stored with a resource that
// may be set by external tools to store and retrieve arbitrary metadata.
// They are not queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/user-guide/annotations
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o TenantOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// A reference to the consumer resource this SaaS Tenant is representing.
// The relationship with a consumer resource can be used by SaaS Runtime for
// retrieving consumer-defined settings and policies such as maintenance
// policies (using Unified Maintenance Policy API).
func (o TenantOutput) ConsumerResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.ConsumerResource }).(pulumi.StringPtrOutput)
}

// The timestamp when the resource was created.
func (o TenantOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o TenantOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o TenantOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The labels on the resource, which can be used for categorization.
// similar to Kubernetes resource labels.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o TenantOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o TenantOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name (full URI of the resource) following the standard naming
// scheme:
// "projects/{project}/locations/{location}/tenants/{tenant}"
func (o TenantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TenantOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o TenantOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// A reference to the Saas that defines the product (managed service) that
// the producer wants to manage with SaaS Runtime. Part of the
// SaaS Runtime common data model.
func (o TenantOutput) Saas() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Saas }).(pulumi.StringOutput)
}

// The ID value for the new tenant.
func (o TenantOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The unique identifier of the resource. UID is unique in the time
// and space for this resource within the scope of the service. It is
// typically generated by the server on successful creation of a resource
// and must not be changed. UID is used to uniquely identify resources
// with resource name reuses. This should be a UUID4.
func (o TenantOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The timestamp when the resource was last updated. Any
// change to the resource made by users must refresh this value.
// Changes to a resource made by the service should refresh this value.
func (o TenantOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TenantArrayOutput struct{ *pulumi.OutputState }

func (TenantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tenant)(nil)).Elem()
}

func (o TenantArrayOutput) ToTenantArrayOutput() TenantArrayOutput {
	return o
}

func (o TenantArrayOutput) ToTenantArrayOutputWithContext(ctx context.Context) TenantArrayOutput {
	return o
}

func (o TenantArrayOutput) Index(i pulumi.IntInput) TenantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tenant {
		return vs[0].([]*Tenant)[vs[1].(int)]
	}).(TenantOutput)
}

type TenantMapOutput struct{ *pulumi.OutputState }

func (TenantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tenant)(nil)).Elem()
}

func (o TenantMapOutput) ToTenantMapOutput() TenantMapOutput {
	return o
}

func (o TenantMapOutput) ToTenantMapOutputWithContext(ctx context.Context) TenantMapOutput {
	return o
}

func (o TenantMapOutput) MapIndex(k pulumi.StringInput) TenantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tenant {
		return vs[0].(map[string]*Tenant)[vs[1].(string)]
	}).(TenantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInput)(nil)).Elem(), &Tenant{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantArrayInput)(nil)).Elem(), TenantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantMapInput)(nil)).Elem(), TenantMap{})
	pulumi.RegisterOutputType(TenantOutput{})
	pulumi.RegisterOutputType(TenantArrayOutput{})
	pulumi.RegisterOutputType(TenantMapOutput{})
}
