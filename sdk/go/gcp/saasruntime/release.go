// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package saasruntime

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A version to be propagated and deployed to Units. It points to a specific version of a Blueprint that can be applied to Units, for example, via a Rollout.
//
// ## Example Usage
//
// ### Saas Runtime Release Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/saasruntime"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSaas, err := saasruntime.NewSaaS(ctx, "example_saas", &saasruntime.SaaSArgs{
//				SaasId:   pulumi.String("example-saas"),
//				Location: pulumi.String("global"),
//				Locations: saasruntime.SaaSLocationArray{
//					&saasruntime.SaaSLocationArgs{
//						Name: pulumi.String("us-central1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleUnitkind, err := saasruntime.NewUnitKind(ctx, "example_unitkind", &saasruntime.UnitKindArgs{
//				Location:   pulumi.String("global"),
//				UnitKindId: pulumi.String("example-unitkind"),
//				Saas:       exampleSaas.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = saasruntime.NewRelease(ctx, "example_previous", &saasruntime.ReleaseArgs{
//				Location:  pulumi.String("global"),
//				ReleaseId: pulumi.String("previous-release"),
//				UnitKind:  exampleUnitkind.ID(),
//				Blueprint: &saasruntime.ReleaseBlueprintArgs{
//					Package: pulumi.String("us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-alpha-image@sha256:7992fdbaeaf998ecd31a7f937bb26e38a781ecf49b24857a6176c1e9bfc299ee"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = saasruntime.NewRelease(ctx, "example", &saasruntime.ReleaseArgs{
//				Location:  pulumi.String("global"),
//				ReleaseId: pulumi.String("example-release"),
//				UnitKind:  exampleUnitkind.ID(),
//				Blueprint: &saasruntime.ReleaseBlueprintArgs{
//					Package: pulumi.String("us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-beta-image@sha256:7bba0fa85b2956df7768f7b32e715b6fe11f4f4193e2a70a35bf3f286a6cdf9e"),
//				},
//				InputVariableDefaults: saasruntime.ReleaseInputVariableDefaultArray{
//					&saasruntime.ReleaseInputVariableDefaultArgs{
//						Variable: pulumi.String("name"),
//						Value:    pulumi.String("test"),
//						Type:     pulumi.String("STRING"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Release can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/releases/{{release_id}}`
//
// * `{{project}}/{{location}}/{{release_id}}`
//
// * `{{location}}/{{release_id}}`
//
// When using the `pulumi import` command, Release can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:saasruntime/release:Release default projects/{{project}}/locations/{{location}}/releases/{{release_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/release:Release default {{project}}/{{location}}/{{release_id}}
// ```
//
// ```sh
// $ pulumi import gcp:saasruntime/release:Release default {{location}}/{{release_id}}
// ```
type Release struct {
	pulumi.CustomResourceState

	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput    `pulumi:"annotations"`
	Blueprint   ReleaseBlueprintPtrOutput `pulumi:"blueprint"`
	// The timestamp when the resource was created.
	CreateTime           pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Mapping of input variables to default values. Maximum 100
	// Structure is documented below.
	InputVariableDefaults ReleaseInputVariableDefaultArrayOutput `pulumi:"inputVariableDefaults"`
	// List of input variables declared on the blueprint and can be present with
	// their values on the unit spec
	// Structure is documented below.
	InputVariables ReleaseInputVariableArrayOutput `pulumi:"inputVariables"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/releases/{release}"
	Name pulumi.StringOutput `pulumi:"name"`
	// List of output variables declared on the blueprint and can be present with
	// their values on the unit status
	// Structure is documented below.
	OutputVariables ReleaseOutputVariableArrayOutput `pulumi:"outputVariables"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The ID value for the new release.
	ReleaseId pulumi.StringOutput `pulumi:"releaseId"`
	// Set of requirements to be fulfilled on the Unit when using this Release.
	// Structure is documented below.
	ReleaseRequirements ReleaseReleaseRequirementsPtrOutput `pulumi:"releaseRequirements"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Reference to the UnitKind this Release corresponds to (required and
	// immutable once created).
	UnitKind pulumi.StringOutput `pulumi:"unitKind"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRelease registers a new resource with the given unique name, arguments, and options.
func NewRelease(ctx *pulumi.Context,
	name string, args *ReleaseArgs, opts ...pulumi.ResourceOption) (*Release, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ReleaseId == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseId'")
	}
	if args.UnitKind == nil {
		return nil, errors.New("invalid value for required argument 'UnitKind'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Release
	err := ctx.RegisterResource("gcp:saasruntime/release:Release", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRelease gets an existing Release resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReleaseState, opts ...pulumi.ResourceOption) (*Release, error) {
	var resource Release
	err := ctx.ReadResource("gcp:saasruntime/release:Release", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Release resources.
type releaseState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	Blueprint   *ReleaseBlueprint `pulumi:"blueprint"`
	// The timestamp when the resource was created.
	CreateTime           *string           `pulumi:"createTime"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag *string `pulumi:"etag"`
	// Mapping of input variables to default values. Maximum 100
	// Structure is documented below.
	InputVariableDefaults []ReleaseInputVariableDefault `pulumi:"inputVariableDefaults"`
	// List of input variables declared on the blueprint and can be present with
	// their values on the unit spec
	// Structure is documented below.
	InputVariables []ReleaseInputVariable `pulumi:"inputVariables"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/releases/{release}"
	Name *string `pulumi:"name"`
	// List of output variables declared on the blueprint and can be present with
	// their values on the unit status
	// Structure is documented below.
	OutputVariables []ReleaseOutputVariable `pulumi:"outputVariables"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The ID value for the new release.
	ReleaseId *string `pulumi:"releaseId"`
	// Set of requirements to be fulfilled on the Unit when using this Release.
	// Structure is documented below.
	ReleaseRequirements *ReleaseReleaseRequirements `pulumi:"releaseRequirements"`
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid *string `pulumi:"uid"`
	// Reference to the UnitKind this Release corresponds to (required and
	// immutable once created).
	UnitKind *string `pulumi:"unitKind"`
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime *string `pulumi:"updateTime"`
}

type ReleaseState struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	Blueprint   ReleaseBlueprintPtrInput
	// The timestamp when the resource was created.
	CreateTime           pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// An opaque value that uniquely identifies a version or
	// generation of a resource. It can be used to confirm that the client
	// and server agree on the ordering of a resource being written.
	Etag pulumi.StringPtrInput
	// Mapping of input variables to default values. Maximum 100
	// Structure is documented below.
	InputVariableDefaults ReleaseInputVariableDefaultArrayInput
	// List of input variables declared on the blueprint and can be present with
	// their values on the unit spec
	// Structure is documented below.
	InputVariables ReleaseInputVariableArrayInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. The resource name (full URI of the resource) following the standard naming
	// scheme:
	// "projects/{project}/locations/{location}/releases/{release}"
	Name pulumi.StringPtrInput
	// List of output variables declared on the blueprint and can be present with
	// their values on the unit status
	// Structure is documented below.
	OutputVariables ReleaseOutputVariableArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The ID value for the new release.
	ReleaseId pulumi.StringPtrInput
	// Set of requirements to be fulfilled on the Unit when using this Release.
	// Structure is documented below.
	ReleaseRequirements ReleaseReleaseRequirementsPtrInput
	// The unique identifier of the resource. UID is unique in the time
	// and space for this resource within the scope of the service. It is
	// typically generated by the server on successful creation of a resource
	// and must not be changed. UID is used to uniquely identify resources
	// with resource name reuses. This should be a UUID4.
	Uid pulumi.StringPtrInput
	// Reference to the UnitKind this Release corresponds to (required and
	// immutable once created).
	UnitKind pulumi.StringPtrInput
	// The timestamp when the resource was last updated. Any
	// change to the resource made by users must refresh this value.
	// Changes to a resource made by the service should refresh this value.
	UpdateTime pulumi.StringPtrInput
}

func (ReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseState)(nil)).Elem()
}

type releaseArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	Blueprint   *ReleaseBlueprint `pulumi:"blueprint"`
	// Mapping of input variables to default values. Maximum 100
	// Structure is documented below.
	InputVariableDefaults []ReleaseInputVariableDefault `pulumi:"inputVariableDefaults"`
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID value for the new release.
	ReleaseId string `pulumi:"releaseId"`
	// Set of requirements to be fulfilled on the Unit when using this Release.
	// Structure is documented below.
	ReleaseRequirements *ReleaseReleaseRequirements `pulumi:"releaseRequirements"`
	// Reference to the UnitKind this Release corresponds to (required and
	// immutable once created).
	UnitKind string `pulumi:"unitKind"`
}

// The set of arguments for constructing a Release resource.
type ReleaseArgs struct {
	// Annotations is an unstructured key-value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/user-guide/annotations
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	Blueprint   ReleaseBlueprintPtrInput
	// Mapping of input variables to default values. Maximum 100
	// Structure is documented below.
	InputVariableDefaults ReleaseInputVariableDefaultArrayInput
	// The labels on the resource, which can be used for categorization.
	// similar to Kubernetes resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID value for the new release.
	ReleaseId pulumi.StringInput
	// Set of requirements to be fulfilled on the Unit when using this Release.
	// Structure is documented below.
	ReleaseRequirements ReleaseReleaseRequirementsPtrInput
	// Reference to the UnitKind this Release corresponds to (required and
	// immutable once created).
	UnitKind pulumi.StringInput
}

func (ReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseArgs)(nil)).Elem()
}

type ReleaseInput interface {
	pulumi.Input

	ToReleaseOutput() ReleaseOutput
	ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput
}

func (*Release) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (i *Release) ToReleaseOutput() ReleaseOutput {
	return i.ToReleaseOutputWithContext(context.Background())
}

func (i *Release) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput)
}

// ReleaseArrayInput is an input type that accepts ReleaseArray and ReleaseArrayOutput values.
// You can construct a concrete instance of `ReleaseArrayInput` via:
//
//	ReleaseArray{ ReleaseArgs{...} }
type ReleaseArrayInput interface {
	pulumi.Input

	ToReleaseArrayOutput() ReleaseArrayOutput
	ToReleaseArrayOutputWithContext(context.Context) ReleaseArrayOutput
}

type ReleaseArray []ReleaseInput

func (ReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Release)(nil)).Elem()
}

func (i ReleaseArray) ToReleaseArrayOutput() ReleaseArrayOutput {
	return i.ToReleaseArrayOutputWithContext(context.Background())
}

func (i ReleaseArray) ToReleaseArrayOutputWithContext(ctx context.Context) ReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseArrayOutput)
}

// ReleaseMapInput is an input type that accepts ReleaseMap and ReleaseMapOutput values.
// You can construct a concrete instance of `ReleaseMapInput` via:
//
//	ReleaseMap{ "key": ReleaseArgs{...} }
type ReleaseMapInput interface {
	pulumi.Input

	ToReleaseMapOutput() ReleaseMapOutput
	ToReleaseMapOutputWithContext(context.Context) ReleaseMapOutput
}

type ReleaseMap map[string]ReleaseInput

func (ReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Release)(nil)).Elem()
}

func (i ReleaseMap) ToReleaseMapOutput() ReleaseMapOutput {
	return i.ToReleaseMapOutputWithContext(context.Background())
}

func (i ReleaseMap) ToReleaseMapOutputWithContext(ctx context.Context) ReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseMapOutput)
}

type ReleaseOutput struct{ *pulumi.OutputState }

func (ReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (o ReleaseOutput) ToReleaseOutput() ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return o
}

// Annotations is an unstructured key-value map stored with a resource that
// may be set by external tools to store and retrieve arbitrary metadata.
// They are not queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/user-guide/annotations
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o ReleaseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Release) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ReleaseOutput) Blueprint() ReleaseBlueprintPtrOutput {
	return o.ApplyT(func(v *Release) ReleaseBlueprintPtrOutput { return v.Blueprint }).(ReleaseBlueprintPtrOutput)
}

// The timestamp when the resource was created.
func (o ReleaseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o ReleaseOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Release) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ReleaseOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Release) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// An opaque value that uniquely identifies a version or
// generation of a resource. It can be used to confirm that the client
// and server agree on the ordering of a resource being written.
func (o ReleaseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Mapping of input variables to default values. Maximum 100
// Structure is documented below.
func (o ReleaseOutput) InputVariableDefaults() ReleaseInputVariableDefaultArrayOutput {
	return o.ApplyT(func(v *Release) ReleaseInputVariableDefaultArrayOutput { return v.InputVariableDefaults }).(ReleaseInputVariableDefaultArrayOutput)
}

// List of input variables declared on the blueprint and can be present with
// their values on the unit spec
// Structure is documented below.
func (o ReleaseOutput) InputVariables() ReleaseInputVariableArrayOutput {
	return o.ApplyT(func(v *Release) ReleaseInputVariableArrayOutput { return v.InputVariables }).(ReleaseInputVariableArrayOutput)
}

// The labels on the resource, which can be used for categorization.
// similar to Kubernetes resource labels.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ReleaseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Release) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o ReleaseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name (full URI of the resource) following the standard naming
// scheme:
// "projects/{project}/locations/{location}/releases/{release}"
func (o ReleaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of output variables declared on the blueprint and can be present with
// their values on the unit status
// Structure is documented below.
func (o ReleaseOutput) OutputVariables() ReleaseOutputVariableArrayOutput {
	return o.ApplyT(func(v *Release) ReleaseOutputVariableArrayOutput { return v.OutputVariables }).(ReleaseOutputVariableArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ReleaseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ReleaseOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Release) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The ID value for the new release.
func (o ReleaseOutput) ReleaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.ReleaseId }).(pulumi.StringOutput)
}

// Set of requirements to be fulfilled on the Unit when using this Release.
// Structure is documented below.
func (o ReleaseOutput) ReleaseRequirements() ReleaseReleaseRequirementsPtrOutput {
	return o.ApplyT(func(v *Release) ReleaseReleaseRequirementsPtrOutput { return v.ReleaseRequirements }).(ReleaseReleaseRequirementsPtrOutput)
}

// The unique identifier of the resource. UID is unique in the time
// and space for this resource within the scope of the service. It is
// typically generated by the server on successful creation of a resource
// and must not be changed. UID is used to uniquely identify resources
// with resource name reuses. This should be a UUID4.
func (o ReleaseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Reference to the UnitKind this Release corresponds to (required and
// immutable once created).
func (o ReleaseOutput) UnitKind() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.UnitKind }).(pulumi.StringOutput)
}

// The timestamp when the resource was last updated. Any
// change to the resource made by users must refresh this value.
// Changes to a resource made by the service should refresh this value.
func (o ReleaseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ReleaseArrayOutput struct{ *pulumi.OutputState }

func (ReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Release)(nil)).Elem()
}

func (o ReleaseArrayOutput) ToReleaseArrayOutput() ReleaseArrayOutput {
	return o
}

func (o ReleaseArrayOutput) ToReleaseArrayOutputWithContext(ctx context.Context) ReleaseArrayOutput {
	return o
}

func (o ReleaseArrayOutput) Index(i pulumi.IntInput) ReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Release {
		return vs[0].([]*Release)[vs[1].(int)]
	}).(ReleaseOutput)
}

type ReleaseMapOutput struct{ *pulumi.OutputState }

func (ReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Release)(nil)).Elem()
}

func (o ReleaseMapOutput) ToReleaseMapOutput() ReleaseMapOutput {
	return o
}

func (o ReleaseMapOutput) ToReleaseMapOutputWithContext(ctx context.Context) ReleaseMapOutput {
	return o
}

func (o ReleaseMapOutput) MapIndex(k pulumi.StringInput) ReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Release {
		return vs[0].(map[string]*Release)[vs[1].(string)]
	}).(ReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseInput)(nil)).Elem(), &Release{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseArrayInput)(nil)).Elem(), ReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseMapInput)(nil)).Elem(), ReleaseMap{})
	pulumi.RegisterOutputType(ReleaseOutput{})
	pulumi.RegisterOutputType(ReleaseArrayOutput{})
	pulumi.RegisterOutputType(ReleaseMapOutput{})
}
