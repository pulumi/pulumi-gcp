// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfunctionsv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Function that contains user computation executed in response to an event.
//
// To get more information about function, see:
//
// * [API documentation](https://cloud.google.com/functions/docs/reference/rest/v2beta/projects.locations.functions)
//
// ## Example Usage
// ### Cloudfunctions2 Basic Gcs
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudfunctionsv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/serviceAccount"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewBucket(ctx, "source-bucket", &storage.BucketArgs{
//				Location:                 pulumi.String("US"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
//				Bucket: source_bucket.Name,
//				Source: pulumi.NewFileAsset("function-source.zip"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewBucket(ctx, "trigger-bucket", &storage.BucketArgs{
//				Location:                 pulumi.String("us-central1"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			gcsAccount, err := storage.GetProjectServiceAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "gcs-pubsub-publishing", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/pubsub.publisher"),
//				Member:  pulumi.String(fmt.Sprintf("serviceAccount:%v", gcsAccount.EmailAddress)),
//			})
//			if err != nil {
//				return err
//			}
//			account, err := serviceAccount.NewAccount(ctx, "account", &serviceAccount.AccountArgs{
//				AccountId:   pulumi.String("gcf-sa"),
//				DisplayName: pulumi.String("Test Service Account - used for both the cloud function and eventarc trigger in the test"),
//			})
//			if err != nil {
//				return err
//			}
//			invoking, err := projects.NewIAMMember(ctx, "invoking", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/run.invoker"),
//				Member: account.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				gcs_pubsub_publishing,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "event-receiving", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/eventarc.eventReceiver"),
//				Member: account.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				invoking,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "artifactregistry-reader", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/artifactregistry.reader"),
//				Member: account.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				event_receiving,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = cloudfunctionsv2.NewFunction(ctx, "function", &cloudfunctionsv2.FunctionArgs{
//				Location:    pulumi.String("us-central1"),
//				Description: pulumi.String("a new function"),
//				BuildConfig: &cloudfunctionsv2.FunctionBuildConfigArgs{
//					Runtime:    pulumi.String("nodejs12"),
//					EntryPoint: pulumi.String("entryPoint"),
//					EnvironmentVariables: pulumi.StringMap{
//						"BUILD_CONFIG_TEST": pulumi.String("build_test"),
//					},
//					Source: &cloudfunctionsv2.FunctionBuildConfigSourceArgs{
//						StorageSource: &cloudfunctionsv2.FunctionBuildConfigSourceStorageSourceArgs{
//							Bucket: source_bucket.Name,
//							Object: object.Name,
//						},
//					},
//				},
//				ServiceConfig: &cloudfunctionsv2.FunctionServiceConfigArgs{
//					MaxInstanceCount: pulumi.Int(3),
//					MinInstanceCount: pulumi.Int(1),
//					AvailableMemory:  pulumi.String("256M"),
//					TimeoutSeconds:   pulumi.Int(60),
//					EnvironmentVariables: pulumi.StringMap{
//						"SERVICE_CONFIG_TEST": pulumi.String("config_test"),
//					},
//					IngressSettings:            pulumi.String("ALLOW_INTERNAL_ONLY"),
//					AllTrafficOnLatestRevision: pulumi.Bool(true),
//					ServiceAccountEmail:        account.Email,
//				},
//				EventTrigger: &cloudfunctionsv2.FunctionEventTriggerArgs{
//					TriggerRegion:       pulumi.String("us-central1"),
//					EventType:           pulumi.String("google.cloud.storage.object.v1.finalized"),
//					RetryPolicy:         pulumi.String("RETRY_POLICY_RETRY"),
//					ServiceAccountEmail: account.Email,
//					EventFilters: cloudfunctionsv2.FunctionEventTriggerEventFilterArray{
//						&cloudfunctionsv2.FunctionEventTriggerEventFilterArgs{
//							Attribute: pulumi.String("bucket"),
//							Value:     trigger_bucket.Name,
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				event_receiving,
//				artifactregistry_reader,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudfunctions2 Basic Auditlogs
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudfunctionsv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/serviceAccount"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.NewBucket(ctx, "source-bucket", &storage.BucketArgs{
//				Location:                 pulumi.String("US"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
//				Bucket: source_bucket.Name,
//				Source: pulumi.NewFileAsset("function-source.zip"),
//			})
//			if err != nil {
//				return err
//			}
//			account, err := serviceAccount.NewAccount(ctx, "account", &serviceAccount.AccountArgs{
//				AccountId:   pulumi.String("gcf-sa"),
//				DisplayName: pulumi.String("Test Service Account - used for both the cloud function and eventarc trigger in the test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewBucket(ctx, "audit-log-bucket", &storage.BucketArgs{
//				Location:                 pulumi.String("us-central1"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			invoking, err := projects.NewIAMMember(ctx, "invoking", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/run.invoker"),
//				Member: account.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "event-receiving", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/eventarc.eventReceiver"),
//				Member: account.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				invoking,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "artifactregistry-reader", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/artifactregistry.reader"),
//				Member: account.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				event_receiving,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = cloudfunctionsv2.NewFunction(ctx, "function", &cloudfunctionsv2.FunctionArgs{
//				Location:    pulumi.String("us-central1"),
//				Description: pulumi.String("a new function"),
//				BuildConfig: &cloudfunctionsv2.FunctionBuildConfigArgs{
//					Runtime:    pulumi.String("nodejs12"),
//					EntryPoint: pulumi.String("entryPoint"),
//					EnvironmentVariables: pulumi.StringMap{
//						"BUILD_CONFIG_TEST": pulumi.String("build_test"),
//					},
//					Source: &cloudfunctionsv2.FunctionBuildConfigSourceArgs{
//						StorageSource: &cloudfunctionsv2.FunctionBuildConfigSourceStorageSourceArgs{
//							Bucket: source_bucket.Name,
//							Object: object.Name,
//						},
//					},
//				},
//				ServiceConfig: &cloudfunctionsv2.FunctionServiceConfigArgs{
//					MaxInstanceCount: pulumi.Int(3),
//					MinInstanceCount: pulumi.Int(1),
//					AvailableMemory:  pulumi.String("256M"),
//					TimeoutSeconds:   pulumi.Int(60),
//					EnvironmentVariables: pulumi.StringMap{
//						"SERVICE_CONFIG_TEST": pulumi.String("config_test"),
//					},
//					IngressSettings:            pulumi.String("ALLOW_INTERNAL_ONLY"),
//					AllTrafficOnLatestRevision: pulumi.Bool(true),
//					ServiceAccountEmail:        account.Email,
//				},
//				EventTrigger: &cloudfunctionsv2.FunctionEventTriggerArgs{
//					TriggerRegion:       pulumi.String("us-central1"),
//					EventType:           pulumi.String("google.cloud.audit.log.v1.written"),
//					RetryPolicy:         pulumi.String("RETRY_POLICY_RETRY"),
//					ServiceAccountEmail: account.Email,
//					EventFilters: cloudfunctionsv2.FunctionEventTriggerEventFilterArray{
//						&cloudfunctionsv2.FunctionEventTriggerEventFilterArgs{
//							Attribute: pulumi.String("serviceName"),
//							Value:     pulumi.String("storage.googleapis.com"),
//						},
//						&cloudfunctionsv2.FunctionEventTriggerEventFilterArgs{
//							Attribute: pulumi.String("methodName"),
//							Value:     pulumi.String("storage.objects.create"),
//						},
//						&cloudfunctionsv2.FunctionEventTriggerEventFilterArgs{
//							Attribute: pulumi.String("resourceName"),
//							Value: audit_log_bucket.Name.ApplyT(func(name string) (string, error) {
//								return fmt.Sprintf("/projects/_/buckets/%v/objects/*.txt", name), nil
//							}).(pulumi.StringOutput),
//							Operator: pulumi.String("match-path-pattern"),
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				event_receiving,
//				artifactregistry_reader,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// function can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:cloudfunctionsv2/function:Function default projects/{{project}}/locations/{{location}}/functions/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:cloudfunctionsv2/function:Function default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:cloudfunctionsv2/function:Function default {{location}}/{{name}}
//
// ```
type Function struct {
	pulumi.CustomResourceState

	// Describes the Build step of the function that builds a container
	// from the given source.
	// Structure is documented below.
	BuildConfig FunctionBuildConfigPtrOutput `pulumi:"buildConfig"`
	// User-provided description of a function.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The environment the function is hosted on.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// An Eventarc trigger managed by Google Cloud Functions that fires events in
	// response to a condition in another service.
	// Structure is documented below.
	EventTrigger FunctionEventTriggerPtrOutput `pulumi:"eventTrigger"`
	// A set of key/value label pairs associated with this Cloud Function.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of this cloud function.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// A user-defined name of the function. Function names must
	// be unique globally and match pattern `projects/*/locations/*/functions/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Describes the Service being deployed.
	// Structure is documented below.
	ServiceConfig FunctionServiceConfigPtrOutput `pulumi:"serviceConfig"`
	// Describes the current state of the function.
	State pulumi.StringOutput `pulumi:"state"`
	// The last update timestamp of a Cloud Function.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil {
		args = &FunctionArgs{}
	}

	var resource Function
	err := ctx.RegisterResource("gcp:cloudfunctionsv2/function:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("gcp:cloudfunctionsv2/function:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
	// Describes the Build step of the function that builds a container
	// from the given source.
	// Structure is documented below.
	BuildConfig *FunctionBuildConfig `pulumi:"buildConfig"`
	// User-provided description of a function.
	Description *string `pulumi:"description"`
	// The environment the function is hosted on.
	Environment *string `pulumi:"environment"`
	// An Eventarc trigger managed by Google Cloud Functions that fires events in
	// response to a condition in another service.
	// Structure is documented below.
	EventTrigger *FunctionEventTrigger `pulumi:"eventTrigger"`
	// A set of key/value label pairs associated with this Cloud Function.
	Labels map[string]string `pulumi:"labels"`
	// The location of this cloud function.
	Location *string `pulumi:"location"`
	// A user-defined name of the function. Function names must
	// be unique globally and match pattern `projects/*/locations/*/functions/*`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Describes the Service being deployed.
	// Structure is documented below.
	ServiceConfig *FunctionServiceConfig `pulumi:"serviceConfig"`
	// Describes the current state of the function.
	State *string `pulumi:"state"`
	// The last update timestamp of a Cloud Function.
	UpdateTime *string `pulumi:"updateTime"`
}

type FunctionState struct {
	// Describes the Build step of the function that builds a container
	// from the given source.
	// Structure is documented below.
	BuildConfig FunctionBuildConfigPtrInput
	// User-provided description of a function.
	Description pulumi.StringPtrInput
	// The environment the function is hosted on.
	Environment pulumi.StringPtrInput
	// An Eventarc trigger managed by Google Cloud Functions that fires events in
	// response to a condition in another service.
	// Structure is documented below.
	EventTrigger FunctionEventTriggerPtrInput
	// A set of key/value label pairs associated with this Cloud Function.
	Labels pulumi.StringMapInput
	// The location of this cloud function.
	Location pulumi.StringPtrInput
	// A user-defined name of the function. Function names must
	// be unique globally and match pattern `projects/*/locations/*/functions/*`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Describes the Service being deployed.
	// Structure is documented below.
	ServiceConfig FunctionServiceConfigPtrInput
	// Describes the current state of the function.
	State pulumi.StringPtrInput
	// The last update timestamp of a Cloud Function.
	UpdateTime pulumi.StringPtrInput
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	// Describes the Build step of the function that builds a container
	// from the given source.
	// Structure is documented below.
	BuildConfig *FunctionBuildConfig `pulumi:"buildConfig"`
	// User-provided description of a function.
	Description *string `pulumi:"description"`
	// An Eventarc trigger managed by Google Cloud Functions that fires events in
	// response to a condition in another service.
	// Structure is documented below.
	EventTrigger *FunctionEventTrigger `pulumi:"eventTrigger"`
	// A set of key/value label pairs associated with this Cloud Function.
	Labels map[string]string `pulumi:"labels"`
	// The location of this cloud function.
	Location *string `pulumi:"location"`
	// A user-defined name of the function. Function names must
	// be unique globally and match pattern `projects/*/locations/*/functions/*`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Describes the Service being deployed.
	// Structure is documented below.
	ServiceConfig *FunctionServiceConfig `pulumi:"serviceConfig"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	// Describes the Build step of the function that builds a container
	// from the given source.
	// Structure is documented below.
	BuildConfig FunctionBuildConfigPtrInput
	// User-provided description of a function.
	Description pulumi.StringPtrInput
	// An Eventarc trigger managed by Google Cloud Functions that fires events in
	// response to a condition in another service.
	// Structure is documented below.
	EventTrigger FunctionEventTriggerPtrInput
	// A set of key/value label pairs associated with this Cloud Function.
	Labels pulumi.StringMapInput
	// The location of this cloud function.
	Location pulumi.StringPtrInput
	// A user-defined name of the function. Function names must
	// be unique globally and match pattern `projects/*/locations/*/functions/*`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Describes the Service being deployed.
	// Structure is documented below.
	ServiceConfig FunctionServiceConfigPtrInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}

type FunctionInput interface {
	pulumi.Input

	ToFunctionOutput() FunctionOutput
	ToFunctionOutputWithContext(ctx context.Context) FunctionOutput
}

func (*Function) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (i *Function) ToFunctionOutput() FunctionOutput {
	return i.ToFunctionOutputWithContext(context.Background())
}

func (i *Function) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutput)
}

// FunctionArrayInput is an input type that accepts FunctionArray and FunctionArrayOutput values.
// You can construct a concrete instance of `FunctionArrayInput` via:
//
//	FunctionArray{ FunctionArgs{...} }
type FunctionArrayInput interface {
	pulumi.Input

	ToFunctionArrayOutput() FunctionArrayOutput
	ToFunctionArrayOutputWithContext(context.Context) FunctionArrayOutput
}

type FunctionArray []FunctionInput

func (FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (i FunctionArray) ToFunctionArrayOutput() FunctionArrayOutput {
	return i.ToFunctionArrayOutputWithContext(context.Background())
}

func (i FunctionArray) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArrayOutput)
}

// FunctionMapInput is an input type that accepts FunctionMap and FunctionMapOutput values.
// You can construct a concrete instance of `FunctionMapInput` via:
//
//	FunctionMap{ "key": FunctionArgs{...} }
type FunctionMapInput interface {
	pulumi.Input

	ToFunctionMapOutput() FunctionMapOutput
	ToFunctionMapOutputWithContext(context.Context) FunctionMapOutput
}

type FunctionMap map[string]FunctionInput

func (FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (i FunctionMap) ToFunctionMapOutput() FunctionMapOutput {
	return i.ToFunctionMapOutputWithContext(context.Background())
}

func (i FunctionMap) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionMapOutput)
}

type FunctionOutput struct{ *pulumi.OutputState }

func (FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (o FunctionOutput) ToFunctionOutput() FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return o
}

// Describes the Build step of the function that builds a container
// from the given source.
// Structure is documented below.
func (o FunctionOutput) BuildConfig() FunctionBuildConfigPtrOutput {
	return o.ApplyT(func(v *Function) FunctionBuildConfigPtrOutput { return v.BuildConfig }).(FunctionBuildConfigPtrOutput)
}

// User-provided description of a function.
func (o FunctionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The environment the function is hosted on.
func (o FunctionOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// An Eventarc trigger managed by Google Cloud Functions that fires events in
// response to a condition in another service.
// Structure is documented below.
func (o FunctionOutput) EventTrigger() FunctionEventTriggerPtrOutput {
	return o.ApplyT(func(v *Function) FunctionEventTriggerPtrOutput { return v.EventTrigger }).(FunctionEventTriggerPtrOutput)
}

// A set of key/value label pairs associated with this Cloud Function.
func (o FunctionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Function) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of this cloud function.
func (o FunctionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// A user-defined name of the function. Function names must
// be unique globally and match pattern `projects/*/locations/*/functions/*`.
func (o FunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o FunctionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Describes the Service being deployed.
// Structure is documented below.
func (o FunctionOutput) ServiceConfig() FunctionServiceConfigPtrOutput {
	return o.ApplyT(func(v *Function) FunctionServiceConfigPtrOutput { return v.ServiceConfig }).(FunctionServiceConfigPtrOutput)
}

// Describes the current state of the function.
func (o FunctionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The last update timestamp of a Cloud Function.
func (o FunctionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type FunctionArrayOutput struct{ *pulumi.OutputState }

func (FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (o FunctionArrayOutput) ToFunctionArrayOutput() FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) Index(i pulumi.IntInput) FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Function {
		return vs[0].([]*Function)[vs[1].(int)]
	}).(FunctionOutput)
}

type FunctionMapOutput struct{ *pulumi.OutputState }

func (FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (o FunctionMapOutput) ToFunctionMapOutput() FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) MapIndex(k pulumi.StringInput) FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Function {
		return vs[0].(map[string]*Function)[vs[1].(string)]
	}).(FunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionInput)(nil)).Elem(), &Function{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArrayInput)(nil)).Elem(), FunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionMapInput)(nil)).Elem(), FunctionMap{})
	pulumi.RegisterOutputType(FunctionOutput{})
	pulumi.RegisterOutputType(FunctionArrayOutput{})
	pulumi.RegisterOutputType(FunctionMapOutput{})
}
