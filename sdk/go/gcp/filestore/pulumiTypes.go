// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package filestore

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type InstanceFileShares struct {
	// File share capacity in GiB. This must be at least 1024 GiB
	// for the standard tier, or 2560 GiB for the premium tier.
	CapacityGb int `pulumi:"capacityGb"`
	// The name of the fileshare (16 characters or less)
	Name string `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	// Structure is documented below.
	NfsExportOptions []InstanceFileSharesNfsExportOption `pulumi:"nfsExportOptions"`
	// The resource name of the backup, in the format
	// projects/{projectId}/locations/{locationId}/backups/{backupId},
	// that this file share has been restored from.
	SourceBackup *string `pulumi:"sourceBackup"`
}

// InstanceFileSharesInput is an input type that accepts InstanceFileSharesArgs and InstanceFileSharesOutput values.
// You can construct a concrete instance of `InstanceFileSharesInput` via:
//
//	InstanceFileSharesArgs{...}
type InstanceFileSharesInput interface {
	pulumi.Input

	ToInstanceFileSharesOutput() InstanceFileSharesOutput
	ToInstanceFileSharesOutputWithContext(context.Context) InstanceFileSharesOutput
}

type InstanceFileSharesArgs struct {
	// File share capacity in GiB. This must be at least 1024 GiB
	// for the standard tier, or 2560 GiB for the premium tier.
	CapacityGb pulumi.IntInput `pulumi:"capacityGb"`
	// The name of the fileshare (16 characters or less)
	Name pulumi.StringInput `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	// Structure is documented below.
	NfsExportOptions InstanceFileSharesNfsExportOptionArrayInput `pulumi:"nfsExportOptions"`
	// The resource name of the backup, in the format
	// projects/{projectId}/locations/{locationId}/backups/{backupId},
	// that this file share has been restored from.
	SourceBackup pulumi.StringPtrInput `pulumi:"sourceBackup"`
}

func (InstanceFileSharesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFileShares)(nil)).Elem()
}

func (i InstanceFileSharesArgs) ToInstanceFileSharesOutput() InstanceFileSharesOutput {
	return i.ToInstanceFileSharesOutputWithContext(context.Background())
}

func (i InstanceFileSharesArgs) ToInstanceFileSharesOutputWithContext(ctx context.Context) InstanceFileSharesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileSharesOutput)
}

func (i InstanceFileSharesArgs) ToInstanceFileSharesPtrOutput() InstanceFileSharesPtrOutput {
	return i.ToInstanceFileSharesPtrOutputWithContext(context.Background())
}

func (i InstanceFileSharesArgs) ToInstanceFileSharesPtrOutputWithContext(ctx context.Context) InstanceFileSharesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileSharesOutput).ToInstanceFileSharesPtrOutputWithContext(ctx)
}

// InstanceFileSharesPtrInput is an input type that accepts InstanceFileSharesArgs, InstanceFileSharesPtr and InstanceFileSharesPtrOutput values.
// You can construct a concrete instance of `InstanceFileSharesPtrInput` via:
//
//	        InstanceFileSharesArgs{...}
//
//	or:
//
//	        nil
type InstanceFileSharesPtrInput interface {
	pulumi.Input

	ToInstanceFileSharesPtrOutput() InstanceFileSharesPtrOutput
	ToInstanceFileSharesPtrOutputWithContext(context.Context) InstanceFileSharesPtrOutput
}

type instanceFileSharesPtrType InstanceFileSharesArgs

func InstanceFileSharesPtr(v *InstanceFileSharesArgs) InstanceFileSharesPtrInput {
	return (*instanceFileSharesPtrType)(v)
}

func (*instanceFileSharesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFileShares)(nil)).Elem()
}

func (i *instanceFileSharesPtrType) ToInstanceFileSharesPtrOutput() InstanceFileSharesPtrOutput {
	return i.ToInstanceFileSharesPtrOutputWithContext(context.Background())
}

func (i *instanceFileSharesPtrType) ToInstanceFileSharesPtrOutputWithContext(ctx context.Context) InstanceFileSharesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileSharesPtrOutput)
}

type InstanceFileSharesOutput struct{ *pulumi.OutputState }

func (InstanceFileSharesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFileShares)(nil)).Elem()
}

func (o InstanceFileSharesOutput) ToInstanceFileSharesOutput() InstanceFileSharesOutput {
	return o
}

func (o InstanceFileSharesOutput) ToInstanceFileSharesOutputWithContext(ctx context.Context) InstanceFileSharesOutput {
	return o
}

func (o InstanceFileSharesOutput) ToInstanceFileSharesPtrOutput() InstanceFileSharesPtrOutput {
	return o.ToInstanceFileSharesPtrOutputWithContext(context.Background())
}

func (o InstanceFileSharesOutput) ToInstanceFileSharesPtrOutputWithContext(ctx context.Context) InstanceFileSharesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceFileShares) *InstanceFileShares {
		return &v
	}).(InstanceFileSharesPtrOutput)
}

// File share capacity in GiB. This must be at least 1024 GiB
// for the standard tier, or 2560 GiB for the premium tier.
func (o InstanceFileSharesOutput) CapacityGb() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceFileShares) int { return v.CapacityGb }).(pulumi.IntOutput)
}

// The name of the fileshare (16 characters or less)
func (o InstanceFileSharesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFileShares) string { return v.Name }).(pulumi.StringOutput)
}

// Nfs Export Options. There is a limit of 10 export options per file share.
// Structure is documented below.
func (o InstanceFileSharesOutput) NfsExportOptions() InstanceFileSharesNfsExportOptionArrayOutput {
	return o.ApplyT(func(v InstanceFileShares) []InstanceFileSharesNfsExportOption { return v.NfsExportOptions }).(InstanceFileSharesNfsExportOptionArrayOutput)
}

// The resource name of the backup, in the format
// projects/{projectId}/locations/{locationId}/backups/{backupId},
// that this file share has been restored from.
func (o InstanceFileSharesOutput) SourceBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFileShares) *string { return v.SourceBackup }).(pulumi.StringPtrOutput)
}

type InstanceFileSharesPtrOutput struct{ *pulumi.OutputState }

func (InstanceFileSharesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFileShares)(nil)).Elem()
}

func (o InstanceFileSharesPtrOutput) ToInstanceFileSharesPtrOutput() InstanceFileSharesPtrOutput {
	return o
}

func (o InstanceFileSharesPtrOutput) ToInstanceFileSharesPtrOutputWithContext(ctx context.Context) InstanceFileSharesPtrOutput {
	return o
}

func (o InstanceFileSharesPtrOutput) Elem() InstanceFileSharesOutput {
	return o.ApplyT(func(v *InstanceFileShares) InstanceFileShares {
		if v != nil {
			return *v
		}
		var ret InstanceFileShares
		return ret
	}).(InstanceFileSharesOutput)
}

// File share capacity in GiB. This must be at least 1024 GiB
// for the standard tier, or 2560 GiB for the premium tier.
func (o InstanceFileSharesPtrOutput) CapacityGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceFileShares) *int {
		if v == nil {
			return nil
		}
		return &v.CapacityGb
	}).(pulumi.IntPtrOutput)
}

// The name of the fileshare (16 characters or less)
func (o InstanceFileSharesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFileShares) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Nfs Export Options. There is a limit of 10 export options per file share.
// Structure is documented below.
func (o InstanceFileSharesPtrOutput) NfsExportOptions() InstanceFileSharesNfsExportOptionArrayOutput {
	return o.ApplyT(func(v *InstanceFileShares) []InstanceFileSharesNfsExportOption {
		if v == nil {
			return nil
		}
		return v.NfsExportOptions
	}).(InstanceFileSharesNfsExportOptionArrayOutput)
}

// The resource name of the backup, in the format
// projects/{projectId}/locations/{locationId}/backups/{backupId},
// that this file share has been restored from.
func (o InstanceFileSharesPtrOutput) SourceBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFileShares) *string {
		if v == nil {
			return nil
		}
		return v.SourceBackup
	}).(pulumi.StringPtrOutput)
}

type InstanceFileSharesNfsExportOption struct {
	// Either READ_ONLY, for allowing only read requests on the exported directory,
	// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
	// Default value is `READ_WRITE`.
	// Possible values are: `READ_ONLY`, `READ_WRITE`.
	AccessMode *string `pulumi:"accessMode"`
	// An integer representing the anonymous group id with a default value of 65534.
	// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
	// if this field is specified for other squashMode settings.
	AnonGid *int `pulumi:"anonGid"`
	// An integer representing the anonymous user id with a default value of 65534.
	// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
	// if this field is specified for other squashMode settings.
	AnonUid *int `pulumi:"anonUid"`
	// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
	// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
	// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
	IpRanges []string `pulumi:"ipRanges"`
	// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
	// for not allowing root access. The default is NO_ROOT_SQUASH.
	// Default value is `NO_ROOT_SQUASH`.
	// Possible values are: `NO_ROOT_SQUASH`, `ROOT_SQUASH`.
	SquashMode *string `pulumi:"squashMode"`
}

// InstanceFileSharesNfsExportOptionInput is an input type that accepts InstanceFileSharesNfsExportOptionArgs and InstanceFileSharesNfsExportOptionOutput values.
// You can construct a concrete instance of `InstanceFileSharesNfsExportOptionInput` via:
//
//	InstanceFileSharesNfsExportOptionArgs{...}
type InstanceFileSharesNfsExportOptionInput interface {
	pulumi.Input

	ToInstanceFileSharesNfsExportOptionOutput() InstanceFileSharesNfsExportOptionOutput
	ToInstanceFileSharesNfsExportOptionOutputWithContext(context.Context) InstanceFileSharesNfsExportOptionOutput
}

type InstanceFileSharesNfsExportOptionArgs struct {
	// Either READ_ONLY, for allowing only read requests on the exported directory,
	// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
	// Default value is `READ_WRITE`.
	// Possible values are: `READ_ONLY`, `READ_WRITE`.
	AccessMode pulumi.StringPtrInput `pulumi:"accessMode"`
	// An integer representing the anonymous group id with a default value of 65534.
	// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
	// if this field is specified for other squashMode settings.
	AnonGid pulumi.IntPtrInput `pulumi:"anonGid"`
	// An integer representing the anonymous user id with a default value of 65534.
	// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
	// if this field is specified for other squashMode settings.
	AnonUid pulumi.IntPtrInput `pulumi:"anonUid"`
	// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
	// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
	// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
	IpRanges pulumi.StringArrayInput `pulumi:"ipRanges"`
	// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
	// for not allowing root access. The default is NO_ROOT_SQUASH.
	// Default value is `NO_ROOT_SQUASH`.
	// Possible values are: `NO_ROOT_SQUASH`, `ROOT_SQUASH`.
	SquashMode pulumi.StringPtrInput `pulumi:"squashMode"`
}

func (InstanceFileSharesNfsExportOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFileSharesNfsExportOption)(nil)).Elem()
}

func (i InstanceFileSharesNfsExportOptionArgs) ToInstanceFileSharesNfsExportOptionOutput() InstanceFileSharesNfsExportOptionOutput {
	return i.ToInstanceFileSharesNfsExportOptionOutputWithContext(context.Background())
}

func (i InstanceFileSharesNfsExportOptionArgs) ToInstanceFileSharesNfsExportOptionOutputWithContext(ctx context.Context) InstanceFileSharesNfsExportOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileSharesNfsExportOptionOutput)
}

// InstanceFileSharesNfsExportOptionArrayInput is an input type that accepts InstanceFileSharesNfsExportOptionArray and InstanceFileSharesNfsExportOptionArrayOutput values.
// You can construct a concrete instance of `InstanceFileSharesNfsExportOptionArrayInput` via:
//
//	InstanceFileSharesNfsExportOptionArray{ InstanceFileSharesNfsExportOptionArgs{...} }
type InstanceFileSharesNfsExportOptionArrayInput interface {
	pulumi.Input

	ToInstanceFileSharesNfsExportOptionArrayOutput() InstanceFileSharesNfsExportOptionArrayOutput
	ToInstanceFileSharesNfsExportOptionArrayOutputWithContext(context.Context) InstanceFileSharesNfsExportOptionArrayOutput
}

type InstanceFileSharesNfsExportOptionArray []InstanceFileSharesNfsExportOptionInput

func (InstanceFileSharesNfsExportOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFileSharesNfsExportOption)(nil)).Elem()
}

func (i InstanceFileSharesNfsExportOptionArray) ToInstanceFileSharesNfsExportOptionArrayOutput() InstanceFileSharesNfsExportOptionArrayOutput {
	return i.ToInstanceFileSharesNfsExportOptionArrayOutputWithContext(context.Background())
}

func (i InstanceFileSharesNfsExportOptionArray) ToInstanceFileSharesNfsExportOptionArrayOutputWithContext(ctx context.Context) InstanceFileSharesNfsExportOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileSharesNfsExportOptionArrayOutput)
}

type InstanceFileSharesNfsExportOptionOutput struct{ *pulumi.OutputState }

func (InstanceFileSharesNfsExportOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFileSharesNfsExportOption)(nil)).Elem()
}

func (o InstanceFileSharesNfsExportOptionOutput) ToInstanceFileSharesNfsExportOptionOutput() InstanceFileSharesNfsExportOptionOutput {
	return o
}

func (o InstanceFileSharesNfsExportOptionOutput) ToInstanceFileSharesNfsExportOptionOutputWithContext(ctx context.Context) InstanceFileSharesNfsExportOptionOutput {
	return o
}

// Either READ_ONLY, for allowing only read requests on the exported directory,
// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
// Default value is `READ_WRITE`.
// Possible values are: `READ_ONLY`, `READ_WRITE`.
func (o InstanceFileSharesNfsExportOptionOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFileSharesNfsExportOption) *string { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// An integer representing the anonymous group id with a default value of 65534.
// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
// if this field is specified for other squashMode settings.
func (o InstanceFileSharesNfsExportOptionOutput) AnonGid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceFileSharesNfsExportOption) *int { return v.AnonGid }).(pulumi.IntPtrOutput)
}

// An integer representing the anonymous user id with a default value of 65534.
// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
// if this field is specified for other squashMode settings.
func (o InstanceFileSharesNfsExportOptionOutput) AnonUid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceFileSharesNfsExportOption) *int { return v.AnonUid }).(pulumi.IntPtrOutput)
}

// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
func (o InstanceFileSharesNfsExportOptionOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceFileSharesNfsExportOption) []string { return v.IpRanges }).(pulumi.StringArrayOutput)
}

// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
// for not allowing root access. The default is NO_ROOT_SQUASH.
// Default value is `NO_ROOT_SQUASH`.
// Possible values are: `NO_ROOT_SQUASH`, `ROOT_SQUASH`.
func (o InstanceFileSharesNfsExportOptionOutput) SquashMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFileSharesNfsExportOption) *string { return v.SquashMode }).(pulumi.StringPtrOutput)
}

type InstanceFileSharesNfsExportOptionArrayOutput struct{ *pulumi.OutputState }

func (InstanceFileSharesNfsExportOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFileSharesNfsExportOption)(nil)).Elem()
}

func (o InstanceFileSharesNfsExportOptionArrayOutput) ToInstanceFileSharesNfsExportOptionArrayOutput() InstanceFileSharesNfsExportOptionArrayOutput {
	return o
}

func (o InstanceFileSharesNfsExportOptionArrayOutput) ToInstanceFileSharesNfsExportOptionArrayOutputWithContext(ctx context.Context) InstanceFileSharesNfsExportOptionArrayOutput {
	return o
}

func (o InstanceFileSharesNfsExportOptionArrayOutput) Index(i pulumi.IntInput) InstanceFileSharesNfsExportOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFileSharesNfsExportOption {
		return vs[0].([]InstanceFileSharesNfsExportOption)[vs[1].(int)]
	}).(InstanceFileSharesNfsExportOptionOutput)
}

type InstanceNetwork struct {
	// The network connect mode of the Filestore instance.
	// If not provided, the connect mode defaults to
	// DIRECT_PEERING.
	// Default value is `DIRECT_PEERING`.
	// Possible values are: `DIRECT_PEERING`, `PRIVATE_SERVICE_ACCESS`.
	//
	// ***
	ConnectMode *string `pulumi:"connectMode"`
	// (Output)
	// A list of IPv4 or IPv6 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// IP versions for which the instance has
	// IP addresses assigned.
	// Each value may be one of: `ADDRESS_MODE_UNSPECIFIED`, `MODE_IPV4`, `MODE_IPV6`.
	Modes []string `pulumi:"modes"`
	// The name of the GCE VPC network to which the
	// instance is connected.
	Network string `pulumi:"network"`
	// A /29 CIDR block that identifies the range of IP
	// addresses reserved for this instance.
	ReservedIpRange *string `pulumi:"reservedIpRange"`
}

// InstanceNetworkInput is an input type that accepts InstanceNetworkArgs and InstanceNetworkOutput values.
// You can construct a concrete instance of `InstanceNetworkInput` via:
//
//	InstanceNetworkArgs{...}
type InstanceNetworkInput interface {
	pulumi.Input

	ToInstanceNetworkOutput() InstanceNetworkOutput
	ToInstanceNetworkOutputWithContext(context.Context) InstanceNetworkOutput
}

type InstanceNetworkArgs struct {
	// The network connect mode of the Filestore instance.
	// If not provided, the connect mode defaults to
	// DIRECT_PEERING.
	// Default value is `DIRECT_PEERING`.
	// Possible values are: `DIRECT_PEERING`, `PRIVATE_SERVICE_ACCESS`.
	//
	// ***
	ConnectMode pulumi.StringPtrInput `pulumi:"connectMode"`
	// (Output)
	// A list of IPv4 or IPv6 addresses.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// IP versions for which the instance has
	// IP addresses assigned.
	// Each value may be one of: `ADDRESS_MODE_UNSPECIFIED`, `MODE_IPV4`, `MODE_IPV6`.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The name of the GCE VPC network to which the
	// instance is connected.
	Network pulumi.StringInput `pulumi:"network"`
	// A /29 CIDR block that identifies the range of IP
	// addresses reserved for this instance.
	ReservedIpRange pulumi.StringPtrInput `pulumi:"reservedIpRange"`
}

func (InstanceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetwork)(nil)).Elem()
}

func (i InstanceNetworkArgs) ToInstanceNetworkOutput() InstanceNetworkOutput {
	return i.ToInstanceNetworkOutputWithContext(context.Background())
}

func (i InstanceNetworkArgs) ToInstanceNetworkOutputWithContext(ctx context.Context) InstanceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkOutput)
}

// InstanceNetworkArrayInput is an input type that accepts InstanceNetworkArray and InstanceNetworkArrayOutput values.
// You can construct a concrete instance of `InstanceNetworkArrayInput` via:
//
//	InstanceNetworkArray{ InstanceNetworkArgs{...} }
type InstanceNetworkArrayInput interface {
	pulumi.Input

	ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput
	ToInstanceNetworkArrayOutputWithContext(context.Context) InstanceNetworkArrayOutput
}

type InstanceNetworkArray []InstanceNetworkInput

func (InstanceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetwork)(nil)).Elem()
}

func (i InstanceNetworkArray) ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput {
	return i.ToInstanceNetworkArrayOutputWithContext(context.Background())
}

func (i InstanceNetworkArray) ToInstanceNetworkArrayOutputWithContext(ctx context.Context) InstanceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkArrayOutput)
}

type InstanceNetworkOutput struct{ *pulumi.OutputState }

func (InstanceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetwork)(nil)).Elem()
}

func (o InstanceNetworkOutput) ToInstanceNetworkOutput() InstanceNetworkOutput {
	return o
}

func (o InstanceNetworkOutput) ToInstanceNetworkOutputWithContext(ctx context.Context) InstanceNetworkOutput {
	return o
}

// The network connect mode of the Filestore instance.
// If not provided, the connect mode defaults to
// DIRECT_PEERING.
// Default value is `DIRECT_PEERING`.
// Possible values are: `DIRECT_PEERING`, `PRIVATE_SERVICE_ACCESS`.
//
// ***
func (o InstanceNetworkOutput) ConnectMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *string { return v.ConnectMode }).(pulumi.StringPtrOutput)
}

// (Output)
// A list of IPv4 or IPv6 addresses.
func (o InstanceNetworkOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceNetwork) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// IP versions for which the instance has
// IP addresses assigned.
// Each value may be one of: `ADDRESS_MODE_UNSPECIFIED`, `MODE_IPV4`, `MODE_IPV6`.
func (o InstanceNetworkOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceNetwork) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The name of the GCE VPC network to which the
// instance is connected.
func (o InstanceNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceNetwork) string { return v.Network }).(pulumi.StringOutput)
}

// A /29 CIDR block that identifies the range of IP
// addresses reserved for this instance.
func (o InstanceNetworkOutput) ReservedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *string { return v.ReservedIpRange }).(pulumi.StringPtrOutput)
}

type InstanceNetworkArrayOutput struct{ *pulumi.OutputState }

func (InstanceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetwork)(nil)).Elem()
}

func (o InstanceNetworkArrayOutput) ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput {
	return o
}

func (o InstanceNetworkArrayOutput) ToInstanceNetworkArrayOutputWithContext(ctx context.Context) InstanceNetworkArrayOutput {
	return o
}

func (o InstanceNetworkArrayOutput) Index(i pulumi.IntInput) InstanceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNetwork {
		return vs[0].([]InstanceNetwork)[vs[1].(int)]
	}).(InstanceNetworkOutput)
}

type GetInstanceFileShare struct {
	// File share capacity in GiB. This must be at least 1024 GiB
	// for the standard tier, or 2560 GiB for the premium tier.
	CapacityGb int `pulumi:"capacityGb"`
	// The name of a Filestore instance.
	//
	// ***
	Name string `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions []GetInstanceFileShareNfsExportOption `pulumi:"nfsExportOptions"`
	// The resource name of the backup, in the format
	// projects/{projectId}/locations/{locationId}/backups/{backupId},
	// that this file share has been restored from.
	SourceBackup string `pulumi:"sourceBackup"`
}

// GetInstanceFileShareInput is an input type that accepts GetInstanceFileShareArgs and GetInstanceFileShareOutput values.
// You can construct a concrete instance of `GetInstanceFileShareInput` via:
//
//	GetInstanceFileShareArgs{...}
type GetInstanceFileShareInput interface {
	pulumi.Input

	ToGetInstanceFileShareOutput() GetInstanceFileShareOutput
	ToGetInstanceFileShareOutputWithContext(context.Context) GetInstanceFileShareOutput
}

type GetInstanceFileShareArgs struct {
	// File share capacity in GiB. This must be at least 1024 GiB
	// for the standard tier, or 2560 GiB for the premium tier.
	CapacityGb pulumi.IntInput `pulumi:"capacityGb"`
	// The name of a Filestore instance.
	//
	// ***
	Name pulumi.StringInput `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions GetInstanceFileShareNfsExportOptionArrayInput `pulumi:"nfsExportOptions"`
	// The resource name of the backup, in the format
	// projects/{projectId}/locations/{locationId}/backups/{backupId},
	// that this file share has been restored from.
	SourceBackup pulumi.StringInput `pulumi:"sourceBackup"`
}

func (GetInstanceFileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceFileShare)(nil)).Elem()
}

func (i GetInstanceFileShareArgs) ToGetInstanceFileShareOutput() GetInstanceFileShareOutput {
	return i.ToGetInstanceFileShareOutputWithContext(context.Background())
}

func (i GetInstanceFileShareArgs) ToGetInstanceFileShareOutputWithContext(ctx context.Context) GetInstanceFileShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceFileShareOutput)
}

// GetInstanceFileShareArrayInput is an input type that accepts GetInstanceFileShareArray and GetInstanceFileShareArrayOutput values.
// You can construct a concrete instance of `GetInstanceFileShareArrayInput` via:
//
//	GetInstanceFileShareArray{ GetInstanceFileShareArgs{...} }
type GetInstanceFileShareArrayInput interface {
	pulumi.Input

	ToGetInstanceFileShareArrayOutput() GetInstanceFileShareArrayOutput
	ToGetInstanceFileShareArrayOutputWithContext(context.Context) GetInstanceFileShareArrayOutput
}

type GetInstanceFileShareArray []GetInstanceFileShareInput

func (GetInstanceFileShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceFileShare)(nil)).Elem()
}

func (i GetInstanceFileShareArray) ToGetInstanceFileShareArrayOutput() GetInstanceFileShareArrayOutput {
	return i.ToGetInstanceFileShareArrayOutputWithContext(context.Background())
}

func (i GetInstanceFileShareArray) ToGetInstanceFileShareArrayOutputWithContext(ctx context.Context) GetInstanceFileShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceFileShareArrayOutput)
}

type GetInstanceFileShareOutput struct{ *pulumi.OutputState }

func (GetInstanceFileShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceFileShare)(nil)).Elem()
}

func (o GetInstanceFileShareOutput) ToGetInstanceFileShareOutput() GetInstanceFileShareOutput {
	return o
}

func (o GetInstanceFileShareOutput) ToGetInstanceFileShareOutputWithContext(ctx context.Context) GetInstanceFileShareOutput {
	return o
}

// File share capacity in GiB. This must be at least 1024 GiB
// for the standard tier, or 2560 GiB for the premium tier.
func (o GetInstanceFileShareOutput) CapacityGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceFileShare) int { return v.CapacityGb }).(pulumi.IntOutput)
}

// The name of a Filestore instance.
//
// ***
func (o GetInstanceFileShareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceFileShare) string { return v.Name }).(pulumi.StringOutput)
}

// Nfs Export Options. There is a limit of 10 export options per file share.
func (o GetInstanceFileShareOutput) NfsExportOptions() GetInstanceFileShareNfsExportOptionArrayOutput {
	return o.ApplyT(func(v GetInstanceFileShare) []GetInstanceFileShareNfsExportOption { return v.NfsExportOptions }).(GetInstanceFileShareNfsExportOptionArrayOutput)
}

// The resource name of the backup, in the format
// projects/{projectId}/locations/{locationId}/backups/{backupId},
// that this file share has been restored from.
func (o GetInstanceFileShareOutput) SourceBackup() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceFileShare) string { return v.SourceBackup }).(pulumi.StringOutput)
}

type GetInstanceFileShareArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceFileShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceFileShare)(nil)).Elem()
}

func (o GetInstanceFileShareArrayOutput) ToGetInstanceFileShareArrayOutput() GetInstanceFileShareArrayOutput {
	return o
}

func (o GetInstanceFileShareArrayOutput) ToGetInstanceFileShareArrayOutputWithContext(ctx context.Context) GetInstanceFileShareArrayOutput {
	return o
}

func (o GetInstanceFileShareArrayOutput) Index(i pulumi.IntInput) GetInstanceFileShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceFileShare {
		return vs[0].([]GetInstanceFileShare)[vs[1].(int)]
	}).(GetInstanceFileShareOutput)
}

type GetInstanceFileShareNfsExportOption struct {
	// Either READ_ONLY, for allowing only read requests on the exported directory,
	// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE. Default value: "READ_WRITE" Possible values: ["READ_ONLY", "READ_WRITE"]
	AccessMode string `pulumi:"accessMode"`
	// An integer representing the anonymous group id with a default value of 65534.
	// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
	// if this field is specified for other squashMode settings.
	AnonGid int `pulumi:"anonGid"`
	// An integer representing the anonymous user id with a default value of 65534.
	// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
	// if this field is specified for other squashMode settings.
	AnonUid int `pulumi:"anonUid"`
	// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
	// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
	// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
	IpRanges []string `pulumi:"ipRanges"`
	// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
	// for not allowing root access. The default is NO_ROOT_SQUASH. Default value: "NO_ROOT_SQUASH" Possible values: ["NO_ROOT_SQUASH", "ROOT_SQUASH"]
	SquashMode string `pulumi:"squashMode"`
}

// GetInstanceFileShareNfsExportOptionInput is an input type that accepts GetInstanceFileShareNfsExportOptionArgs and GetInstanceFileShareNfsExportOptionOutput values.
// You can construct a concrete instance of `GetInstanceFileShareNfsExportOptionInput` via:
//
//	GetInstanceFileShareNfsExportOptionArgs{...}
type GetInstanceFileShareNfsExportOptionInput interface {
	pulumi.Input

	ToGetInstanceFileShareNfsExportOptionOutput() GetInstanceFileShareNfsExportOptionOutput
	ToGetInstanceFileShareNfsExportOptionOutputWithContext(context.Context) GetInstanceFileShareNfsExportOptionOutput
}

type GetInstanceFileShareNfsExportOptionArgs struct {
	// Either READ_ONLY, for allowing only read requests on the exported directory,
	// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE. Default value: "READ_WRITE" Possible values: ["READ_ONLY", "READ_WRITE"]
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// An integer representing the anonymous group id with a default value of 65534.
	// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
	// if this field is specified for other squashMode settings.
	AnonGid pulumi.IntInput `pulumi:"anonGid"`
	// An integer representing the anonymous user id with a default value of 65534.
	// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
	// if this field is specified for other squashMode settings.
	AnonUid pulumi.IntInput `pulumi:"anonUid"`
	// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
	// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
	// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
	IpRanges pulumi.StringArrayInput `pulumi:"ipRanges"`
	// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
	// for not allowing root access. The default is NO_ROOT_SQUASH. Default value: "NO_ROOT_SQUASH" Possible values: ["NO_ROOT_SQUASH", "ROOT_SQUASH"]
	SquashMode pulumi.StringInput `pulumi:"squashMode"`
}

func (GetInstanceFileShareNfsExportOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceFileShareNfsExportOption)(nil)).Elem()
}

func (i GetInstanceFileShareNfsExportOptionArgs) ToGetInstanceFileShareNfsExportOptionOutput() GetInstanceFileShareNfsExportOptionOutput {
	return i.ToGetInstanceFileShareNfsExportOptionOutputWithContext(context.Background())
}

func (i GetInstanceFileShareNfsExportOptionArgs) ToGetInstanceFileShareNfsExportOptionOutputWithContext(ctx context.Context) GetInstanceFileShareNfsExportOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceFileShareNfsExportOptionOutput)
}

// GetInstanceFileShareNfsExportOptionArrayInput is an input type that accepts GetInstanceFileShareNfsExportOptionArray and GetInstanceFileShareNfsExportOptionArrayOutput values.
// You can construct a concrete instance of `GetInstanceFileShareNfsExportOptionArrayInput` via:
//
//	GetInstanceFileShareNfsExportOptionArray{ GetInstanceFileShareNfsExportOptionArgs{...} }
type GetInstanceFileShareNfsExportOptionArrayInput interface {
	pulumi.Input

	ToGetInstanceFileShareNfsExportOptionArrayOutput() GetInstanceFileShareNfsExportOptionArrayOutput
	ToGetInstanceFileShareNfsExportOptionArrayOutputWithContext(context.Context) GetInstanceFileShareNfsExportOptionArrayOutput
}

type GetInstanceFileShareNfsExportOptionArray []GetInstanceFileShareNfsExportOptionInput

func (GetInstanceFileShareNfsExportOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceFileShareNfsExportOption)(nil)).Elem()
}

func (i GetInstanceFileShareNfsExportOptionArray) ToGetInstanceFileShareNfsExportOptionArrayOutput() GetInstanceFileShareNfsExportOptionArrayOutput {
	return i.ToGetInstanceFileShareNfsExportOptionArrayOutputWithContext(context.Background())
}

func (i GetInstanceFileShareNfsExportOptionArray) ToGetInstanceFileShareNfsExportOptionArrayOutputWithContext(ctx context.Context) GetInstanceFileShareNfsExportOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceFileShareNfsExportOptionArrayOutput)
}

type GetInstanceFileShareNfsExportOptionOutput struct{ *pulumi.OutputState }

func (GetInstanceFileShareNfsExportOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceFileShareNfsExportOption)(nil)).Elem()
}

func (o GetInstanceFileShareNfsExportOptionOutput) ToGetInstanceFileShareNfsExportOptionOutput() GetInstanceFileShareNfsExportOptionOutput {
	return o
}

func (o GetInstanceFileShareNfsExportOptionOutput) ToGetInstanceFileShareNfsExportOptionOutputWithContext(ctx context.Context) GetInstanceFileShareNfsExportOptionOutput {
	return o
}

// Either READ_ONLY, for allowing only read requests on the exported directory,
// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE. Default value: "READ_WRITE" Possible values: ["READ_ONLY", "READ_WRITE"]
func (o GetInstanceFileShareNfsExportOptionOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceFileShareNfsExportOption) string { return v.AccessMode }).(pulumi.StringOutput)
}

// An integer representing the anonymous group id with a default value of 65534.
// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
// if this field is specified for other squashMode settings.
func (o GetInstanceFileShareNfsExportOptionOutput) AnonGid() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceFileShareNfsExportOption) int { return v.AnonGid }).(pulumi.IntOutput)
}

// An integer representing the anonymous user id with a default value of 65534.
// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
// if this field is specified for other squashMode settings.
func (o GetInstanceFileShareNfsExportOptionOutput) AnonUid() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceFileShareNfsExportOption) int { return v.AnonUid }).(pulumi.IntOutput)
}

// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
func (o GetInstanceFileShareNfsExportOptionOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceFileShareNfsExportOption) []string { return v.IpRanges }).(pulumi.StringArrayOutput)
}

// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
// for not allowing root access. The default is NO_ROOT_SQUASH. Default value: "NO_ROOT_SQUASH" Possible values: ["NO_ROOT_SQUASH", "ROOT_SQUASH"]
func (o GetInstanceFileShareNfsExportOptionOutput) SquashMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceFileShareNfsExportOption) string { return v.SquashMode }).(pulumi.StringOutput)
}

type GetInstanceFileShareNfsExportOptionArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceFileShareNfsExportOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceFileShareNfsExportOption)(nil)).Elem()
}

func (o GetInstanceFileShareNfsExportOptionArrayOutput) ToGetInstanceFileShareNfsExportOptionArrayOutput() GetInstanceFileShareNfsExportOptionArrayOutput {
	return o
}

func (o GetInstanceFileShareNfsExportOptionArrayOutput) ToGetInstanceFileShareNfsExportOptionArrayOutputWithContext(ctx context.Context) GetInstanceFileShareNfsExportOptionArrayOutput {
	return o
}

func (o GetInstanceFileShareNfsExportOptionArrayOutput) Index(i pulumi.IntInput) GetInstanceFileShareNfsExportOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceFileShareNfsExportOption {
		return vs[0].([]GetInstanceFileShareNfsExportOption)[vs[1].(int)]
	}).(GetInstanceFileShareNfsExportOptionOutput)
}

type GetInstanceNetwork struct {
	// The network connect mode of the Filestore instance.
	// If not provided, the connect mode defaults to
	// DIRECT_PEERING. Default value: "DIRECT_PEERING" Possible values: ["DIRECT_PEERING", "PRIVATE_SERVICE_ACCESS"]
	ConnectMode string `pulumi:"connectMode"`
	// A list of IPv4 or IPv6 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// IP versions for which the instance has
	// IP addresses assigned. Possible values: ["ADDRESS_MODE_UNSPECIFIED", "MODE_IPV4", "MODE_IPV6"]
	Modes []string `pulumi:"modes"`
	// The name of the GCE VPC network to which the
	// instance is connected.
	Network string `pulumi:"network"`
	// A /29 CIDR block that identifies the range of IP
	// addresses reserved for this instance.
	ReservedIpRange string `pulumi:"reservedIpRange"`
}

// GetInstanceNetworkInput is an input type that accepts GetInstanceNetworkArgs and GetInstanceNetworkOutput values.
// You can construct a concrete instance of `GetInstanceNetworkInput` via:
//
//	GetInstanceNetworkArgs{...}
type GetInstanceNetworkInput interface {
	pulumi.Input

	ToGetInstanceNetworkOutput() GetInstanceNetworkOutput
	ToGetInstanceNetworkOutputWithContext(context.Context) GetInstanceNetworkOutput
}

type GetInstanceNetworkArgs struct {
	// The network connect mode of the Filestore instance.
	// If not provided, the connect mode defaults to
	// DIRECT_PEERING. Default value: "DIRECT_PEERING" Possible values: ["DIRECT_PEERING", "PRIVATE_SERVICE_ACCESS"]
	ConnectMode pulumi.StringInput `pulumi:"connectMode"`
	// A list of IPv4 or IPv6 addresses.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// IP versions for which the instance has
	// IP addresses assigned. Possible values: ["ADDRESS_MODE_UNSPECIFIED", "MODE_IPV4", "MODE_IPV6"]
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The name of the GCE VPC network to which the
	// instance is connected.
	Network pulumi.StringInput `pulumi:"network"`
	// A /29 CIDR block that identifies the range of IP
	// addresses reserved for this instance.
	ReservedIpRange pulumi.StringInput `pulumi:"reservedIpRange"`
}

func (GetInstanceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetwork)(nil)).Elem()
}

func (i GetInstanceNetworkArgs) ToGetInstanceNetworkOutput() GetInstanceNetworkOutput {
	return i.ToGetInstanceNetworkOutputWithContext(context.Background())
}

func (i GetInstanceNetworkArgs) ToGetInstanceNetworkOutputWithContext(ctx context.Context) GetInstanceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkOutput)
}

// GetInstanceNetworkArrayInput is an input type that accepts GetInstanceNetworkArray and GetInstanceNetworkArrayOutput values.
// You can construct a concrete instance of `GetInstanceNetworkArrayInput` via:
//
//	GetInstanceNetworkArray{ GetInstanceNetworkArgs{...} }
type GetInstanceNetworkArrayInput interface {
	pulumi.Input

	ToGetInstanceNetworkArrayOutput() GetInstanceNetworkArrayOutput
	ToGetInstanceNetworkArrayOutputWithContext(context.Context) GetInstanceNetworkArrayOutput
}

type GetInstanceNetworkArray []GetInstanceNetworkInput

func (GetInstanceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetwork)(nil)).Elem()
}

func (i GetInstanceNetworkArray) ToGetInstanceNetworkArrayOutput() GetInstanceNetworkArrayOutput {
	return i.ToGetInstanceNetworkArrayOutputWithContext(context.Background())
}

func (i GetInstanceNetworkArray) ToGetInstanceNetworkArrayOutputWithContext(ctx context.Context) GetInstanceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkArrayOutput)
}

type GetInstanceNetworkOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetwork)(nil)).Elem()
}

func (o GetInstanceNetworkOutput) ToGetInstanceNetworkOutput() GetInstanceNetworkOutput {
	return o
}

func (o GetInstanceNetworkOutput) ToGetInstanceNetworkOutputWithContext(ctx context.Context) GetInstanceNetworkOutput {
	return o
}

// The network connect mode of the Filestore instance.
// If not provided, the connect mode defaults to
// DIRECT_PEERING. Default value: "DIRECT_PEERING" Possible values: ["DIRECT_PEERING", "PRIVATE_SERVICE_ACCESS"]
func (o GetInstanceNetworkOutput) ConnectMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetwork) string { return v.ConnectMode }).(pulumi.StringOutput)
}

// A list of IPv4 or IPv6 addresses.
func (o GetInstanceNetworkOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceNetwork) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// IP versions for which the instance has
// IP addresses assigned. Possible values: ["ADDRESS_MODE_UNSPECIFIED", "MODE_IPV4", "MODE_IPV6"]
func (o GetInstanceNetworkOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceNetwork) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The name of the GCE VPC network to which the
// instance is connected.
func (o GetInstanceNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetwork) string { return v.Network }).(pulumi.StringOutput)
}

// A /29 CIDR block that identifies the range of IP
// addresses reserved for this instance.
func (o GetInstanceNetworkOutput) ReservedIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetwork) string { return v.ReservedIpRange }).(pulumi.StringOutput)
}

type GetInstanceNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetwork)(nil)).Elem()
}

func (o GetInstanceNetworkArrayOutput) ToGetInstanceNetworkArrayOutput() GetInstanceNetworkArrayOutput {
	return o
}

func (o GetInstanceNetworkArrayOutput) ToGetInstanceNetworkArrayOutputWithContext(ctx context.Context) GetInstanceNetworkArrayOutput {
	return o
}

func (o GetInstanceNetworkArrayOutput) Index(i pulumi.IntInput) GetInstanceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceNetwork {
		return vs[0].([]GetInstanceNetwork)[vs[1].(int)]
	}).(GetInstanceNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileSharesInput)(nil)).Elem(), InstanceFileSharesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileSharesPtrInput)(nil)).Elem(), InstanceFileSharesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileSharesNfsExportOptionInput)(nil)).Elem(), InstanceFileSharesNfsExportOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileSharesNfsExportOptionArrayInput)(nil)).Elem(), InstanceFileSharesNfsExportOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNetworkInput)(nil)).Elem(), InstanceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNetworkArrayInput)(nil)).Elem(), InstanceNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceFileShareInput)(nil)).Elem(), GetInstanceFileShareArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceFileShareArrayInput)(nil)).Elem(), GetInstanceFileShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceFileShareNfsExportOptionInput)(nil)).Elem(), GetInstanceFileShareNfsExportOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceFileShareNfsExportOptionArrayInput)(nil)).Elem(), GetInstanceFileShareNfsExportOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceNetworkInput)(nil)).Elem(), GetInstanceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceNetworkArrayInput)(nil)).Elem(), GetInstanceNetworkArray{})
	pulumi.RegisterOutputType(InstanceFileSharesOutput{})
	pulumi.RegisterOutputType(InstanceFileSharesPtrOutput{})
	pulumi.RegisterOutputType(InstanceFileSharesNfsExportOptionOutput{})
	pulumi.RegisterOutputType(InstanceFileSharesNfsExportOptionArrayOutput{})
	pulumi.RegisterOutputType(InstanceNetworkOutput{})
	pulumi.RegisterOutputType(InstanceNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceFileShareOutput{})
	pulumi.RegisterOutputType(GetInstanceFileShareArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceFileShareNfsExportOptionOutput{})
	pulumi.RegisterOutputType(GetInstanceFileShareNfsExportOptionArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkArrayOutput{})
}
