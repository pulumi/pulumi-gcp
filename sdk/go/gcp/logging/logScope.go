// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a group of resources to read log entries from
//
// To get more information about LogScope, see:
//
// * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.locations.logScopes)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/logging/docs/apis)
//
// ## Example Usage
//
// ### Logging Log Scope Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogScope(ctx, "logging_log_scope", &logging.LogScopeArgs{
//				Parent:   pulumi.String("projects/my-project-name"),
//				Location: pulumi.String("global"),
//				Name:     pulumi.String("projects/my-project-name/locations/global/logScopes/my-log-scope"),
//				ResourceNames: pulumi.StringArray{
//					pulumi.String("projects/my-project-name"),
//					pulumi.String("projects/my-project-name/locations/global/buckets/_Default/views/view1"),
//					pulumi.String("projects/my-project-name/locations/global/buckets/_Default/views/view2"),
//				},
//				Description: pulumi.String("A log scope configured with Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// LogScope can be imported using any of these accepted formats:
//
// * `{{parent}}/locations/{{location}}/logScopes/{{name}}`
//
// When using the `pulumi import` command, LogScope can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:logging/logScope:LogScope default {{parent}}/locations/{{location}}/logScopes/{{name}}
// ```
type LogScope struct {
	pulumi.CustomResourceState

	// Output only. The creation timestamp of the log scopes.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes this log scopes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The location of the resource. The only supported location is global so far.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent of the resource.
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
	ResourceNames pulumi.StringArrayOutput `pulumi:"resourceNames"`
	// Output only. The last update timestamp of the log scopes.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewLogScope registers a new resource with the given unique name, arguments, and options.
func NewLogScope(ctx *pulumi.Context,
	name string, args *LogScopeArgs, opts ...pulumi.ResourceOption) (*LogScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceNames == nil {
		return nil, errors.New("invalid value for required argument 'ResourceNames'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogScope
	err := ctx.RegisterResource("gcp:logging/logScope:LogScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogScope gets an existing LogScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogScopeState, opts ...pulumi.ResourceOption) (*LogScope, error) {
	var resource LogScope
	err := ctx.ReadResource("gcp:logging/logScope:LogScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogScope resources.
type logScopeState struct {
	// Output only. The creation timestamp of the log scopes.
	CreateTime *string `pulumi:"createTime"`
	// Describes this log scopes.
	Description *string `pulumi:"description"`
	// The location of the resource. The only supported location is global so far.
	Location *string `pulumi:"location"`
	// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
	Name *string `pulumi:"name"`
	// The parent of the resource.
	Parent *string `pulumi:"parent"`
	// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
	ResourceNames []string `pulumi:"resourceNames"`
	// Output only. The last update timestamp of the log scopes.
	UpdateTime *string `pulumi:"updateTime"`
}

type LogScopeState struct {
	// Output only. The creation timestamp of the log scopes.
	CreateTime pulumi.StringPtrInput
	// Describes this log scopes.
	Description pulumi.StringPtrInput
	// The location of the resource. The only supported location is global so far.
	Location pulumi.StringPtrInput
	// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
	Name pulumi.StringPtrInput
	// The parent of the resource.
	Parent pulumi.StringPtrInput
	// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
	ResourceNames pulumi.StringArrayInput
	// Output only. The last update timestamp of the log scopes.
	UpdateTime pulumi.StringPtrInput
}

func (LogScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*logScopeState)(nil)).Elem()
}

type logScopeArgs struct {
	// Describes this log scopes.
	Description *string `pulumi:"description"`
	// The location of the resource. The only supported location is global so far.
	Location *string `pulumi:"location"`
	// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
	Name *string `pulumi:"name"`
	// The parent of the resource.
	Parent *string `pulumi:"parent"`
	// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
	ResourceNames []string `pulumi:"resourceNames"`
}

// The set of arguments for constructing a LogScope resource.
type LogScopeArgs struct {
	// Describes this log scopes.
	Description pulumi.StringPtrInput
	// The location of the resource. The only supported location is global so far.
	Location pulumi.StringPtrInput
	// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
	Name pulumi.StringPtrInput
	// The parent of the resource.
	Parent pulumi.StringPtrInput
	// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
	ResourceNames pulumi.StringArrayInput
}

func (LogScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logScopeArgs)(nil)).Elem()
}

type LogScopeInput interface {
	pulumi.Input

	ToLogScopeOutput() LogScopeOutput
	ToLogScopeOutputWithContext(ctx context.Context) LogScopeOutput
}

func (*LogScope) ElementType() reflect.Type {
	return reflect.TypeOf((**LogScope)(nil)).Elem()
}

func (i *LogScope) ToLogScopeOutput() LogScopeOutput {
	return i.ToLogScopeOutputWithContext(context.Background())
}

func (i *LogScope) ToLogScopeOutputWithContext(ctx context.Context) LogScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogScopeOutput)
}

// LogScopeArrayInput is an input type that accepts LogScopeArray and LogScopeArrayOutput values.
// You can construct a concrete instance of `LogScopeArrayInput` via:
//
//	LogScopeArray{ LogScopeArgs{...} }
type LogScopeArrayInput interface {
	pulumi.Input

	ToLogScopeArrayOutput() LogScopeArrayOutput
	ToLogScopeArrayOutputWithContext(context.Context) LogScopeArrayOutput
}

type LogScopeArray []LogScopeInput

func (LogScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogScope)(nil)).Elem()
}

func (i LogScopeArray) ToLogScopeArrayOutput() LogScopeArrayOutput {
	return i.ToLogScopeArrayOutputWithContext(context.Background())
}

func (i LogScopeArray) ToLogScopeArrayOutputWithContext(ctx context.Context) LogScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogScopeArrayOutput)
}

// LogScopeMapInput is an input type that accepts LogScopeMap and LogScopeMapOutput values.
// You can construct a concrete instance of `LogScopeMapInput` via:
//
//	LogScopeMap{ "key": LogScopeArgs{...} }
type LogScopeMapInput interface {
	pulumi.Input

	ToLogScopeMapOutput() LogScopeMapOutput
	ToLogScopeMapOutputWithContext(context.Context) LogScopeMapOutput
}

type LogScopeMap map[string]LogScopeInput

func (LogScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogScope)(nil)).Elem()
}

func (i LogScopeMap) ToLogScopeMapOutput() LogScopeMapOutput {
	return i.ToLogScopeMapOutputWithContext(context.Background())
}

func (i LogScopeMap) ToLogScopeMapOutputWithContext(ctx context.Context) LogScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogScopeMapOutput)
}

type LogScopeOutput struct{ *pulumi.OutputState }

func (LogScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogScope)(nil)).Elem()
}

func (o LogScopeOutput) ToLogScopeOutput() LogScopeOutput {
	return o
}

func (o LogScopeOutput) ToLogScopeOutputWithContext(ctx context.Context) LogScopeOutput {
	return o
}

// Output only. The creation timestamp of the log scopes.
func (o LogScopeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LogScope) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Describes this log scopes.
func (o LogScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The location of the resource. The only supported location is global so far.
func (o LogScopeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LogScope) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
func (o LogScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent of the resource.
func (o LogScopeOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *LogScope) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
func (o LogScopeOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogScope) pulumi.StringArrayOutput { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

// Output only. The last update timestamp of the log scopes.
func (o LogScopeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LogScope) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type LogScopeArrayOutput struct{ *pulumi.OutputState }

func (LogScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogScope)(nil)).Elem()
}

func (o LogScopeArrayOutput) ToLogScopeArrayOutput() LogScopeArrayOutput {
	return o
}

func (o LogScopeArrayOutput) ToLogScopeArrayOutputWithContext(ctx context.Context) LogScopeArrayOutput {
	return o
}

func (o LogScopeArrayOutput) Index(i pulumi.IntInput) LogScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogScope {
		return vs[0].([]*LogScope)[vs[1].(int)]
	}).(LogScopeOutput)
}

type LogScopeMapOutput struct{ *pulumi.OutputState }

func (LogScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogScope)(nil)).Elem()
}

func (o LogScopeMapOutput) ToLogScopeMapOutput() LogScopeMapOutput {
	return o
}

func (o LogScopeMapOutput) ToLogScopeMapOutputWithContext(ctx context.Context) LogScopeMapOutput {
	return o
}

func (o LogScopeMapOutput) MapIndex(k pulumi.StringInput) LogScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogScope {
		return vs[0].(map[string]*LogScope)[vs[1].(string)]
	}).(LogScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogScopeInput)(nil)).Elem(), &LogScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogScopeArrayInput)(nil)).Elem(), LogScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogScopeMapInput)(nil)).Elem(), LogScopeMap{})
	pulumi.RegisterOutputType(LogScopeOutput{})
	pulumi.RegisterOutputType(LogScopeArrayOutput{})
	pulumi.RegisterOutputType(LogScopeMapOutput{})
}
