// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type BillingAccountSinkBigqueryOptions struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

// BillingAccountSinkBigqueryOptionsInput is an input type that accepts BillingAccountSinkBigqueryOptionsArgs and BillingAccountSinkBigqueryOptionsOutput values.
// You can construct a concrete instance of `BillingAccountSinkBigqueryOptionsInput` via:
//
// 		 BillingAccountSinkBigqueryOptionsArgs{...}
//
type BillingAccountSinkBigqueryOptionsInput interface {
	pulumi.Input

	ToBillingAccountSinkBigqueryOptionsOutput() BillingAccountSinkBigqueryOptionsOutput
	ToBillingAccountSinkBigqueryOptionsOutputWithContext(context.Context) BillingAccountSinkBigqueryOptionsOutput
}

type BillingAccountSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (BillingAccountSinkBigqueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingAccountSinkBigqueryOptions)(nil)).Elem()
}

func (i BillingAccountSinkBigqueryOptionsArgs) ToBillingAccountSinkBigqueryOptionsOutput() BillingAccountSinkBigqueryOptionsOutput {
	return i.ToBillingAccountSinkBigqueryOptionsOutputWithContext(context.Background())
}

func (i BillingAccountSinkBigqueryOptionsArgs) ToBillingAccountSinkBigqueryOptionsOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsOutput)
}

func (i BillingAccountSinkBigqueryOptionsArgs) ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput {
	return i.ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i BillingAccountSinkBigqueryOptionsArgs) ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsOutput).ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx)
}

// BillingAccountSinkBigqueryOptionsPtrInput is an input type that accepts BillingAccountSinkBigqueryOptionsArgs, BillingAccountSinkBigqueryOptionsPtr and BillingAccountSinkBigqueryOptionsPtrOutput values.
// You can construct a concrete instance of `BillingAccountSinkBigqueryOptionsPtrInput` via:
//
// 		 BillingAccountSinkBigqueryOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type BillingAccountSinkBigqueryOptionsPtrInput interface {
	pulumi.Input

	ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput
	ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(context.Context) BillingAccountSinkBigqueryOptionsPtrOutput
}

type billingAccountSinkBigqueryOptionsPtrType BillingAccountSinkBigqueryOptionsArgs

func BillingAccountSinkBigqueryOptionsPtr(v *BillingAccountSinkBigqueryOptionsArgs) BillingAccountSinkBigqueryOptionsPtrInput {
	return (*billingAccountSinkBigqueryOptionsPtrType)(v)
}

func (*billingAccountSinkBigqueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingAccountSinkBigqueryOptions)(nil)).Elem()
}

func (i *billingAccountSinkBigqueryOptionsPtrType) ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput {
	return i.ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i *billingAccountSinkBigqueryOptionsPtrType) ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsPtrOutput)
}

type BillingAccountSinkBigqueryOptionsOutput struct{ *pulumi.OutputState }

func (BillingAccountSinkBigqueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingAccountSinkBigqueryOptions)(nil)).Elem()
}

func (o BillingAccountSinkBigqueryOptionsOutput) ToBillingAccountSinkBigqueryOptionsOutput() BillingAccountSinkBigqueryOptionsOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsOutput) ToBillingAccountSinkBigqueryOptionsOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsOutput) ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput {
	return o.ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (o BillingAccountSinkBigqueryOptionsOutput) ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptions) *BillingAccountSinkBigqueryOptions {
		return &v
	}).(BillingAccountSinkBigqueryOptionsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BillingAccountSinkBigqueryOptionsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type BillingAccountSinkBigqueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (BillingAccountSinkBigqueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingAccountSinkBigqueryOptions)(nil)).Elem()
}

func (o BillingAccountSinkBigqueryOptionsPtrOutput) ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsPtrOutput) ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsPtrOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsPtrOutput) Elem() BillingAccountSinkBigqueryOptionsOutput {
	return o.ApplyT(func(v *BillingAccountSinkBigqueryOptions) BillingAccountSinkBigqueryOptions { return *v }).(BillingAccountSinkBigqueryOptionsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BillingAccountSinkBigqueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BillingAccountSinkBigqueryOptions) *bool {
		if v == nil {
			return nil
		}
		return &v.UsePartitionedTables
	}).(pulumi.BoolPtrOutput)
}

type FolderSinkBigqueryOptions struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

// FolderSinkBigqueryOptionsInput is an input type that accepts FolderSinkBigqueryOptionsArgs and FolderSinkBigqueryOptionsOutput values.
// You can construct a concrete instance of `FolderSinkBigqueryOptionsInput` via:
//
// 		 FolderSinkBigqueryOptionsArgs{...}
//
type FolderSinkBigqueryOptionsInput interface {
	pulumi.Input

	ToFolderSinkBigqueryOptionsOutput() FolderSinkBigqueryOptionsOutput
	ToFolderSinkBigqueryOptionsOutputWithContext(context.Context) FolderSinkBigqueryOptionsOutput
}

type FolderSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (FolderSinkBigqueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderSinkBigqueryOptions)(nil)).Elem()
}

func (i FolderSinkBigqueryOptionsArgs) ToFolderSinkBigqueryOptionsOutput() FolderSinkBigqueryOptionsOutput {
	return i.ToFolderSinkBigqueryOptionsOutputWithContext(context.Background())
}

func (i FolderSinkBigqueryOptionsArgs) ToFolderSinkBigqueryOptionsOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsOutput)
}

func (i FolderSinkBigqueryOptionsArgs) ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput {
	return i.ToFolderSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i FolderSinkBigqueryOptionsArgs) ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsOutput).ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx)
}

// FolderSinkBigqueryOptionsPtrInput is an input type that accepts FolderSinkBigqueryOptionsArgs, FolderSinkBigqueryOptionsPtr and FolderSinkBigqueryOptionsPtrOutput values.
// You can construct a concrete instance of `FolderSinkBigqueryOptionsPtrInput` via:
//
// 		 FolderSinkBigqueryOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type FolderSinkBigqueryOptionsPtrInput interface {
	pulumi.Input

	ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput
	ToFolderSinkBigqueryOptionsPtrOutputWithContext(context.Context) FolderSinkBigqueryOptionsPtrOutput
}

type folderSinkBigqueryOptionsPtrType FolderSinkBigqueryOptionsArgs

func FolderSinkBigqueryOptionsPtr(v *FolderSinkBigqueryOptionsArgs) FolderSinkBigqueryOptionsPtrInput {
	return (*folderSinkBigqueryOptionsPtrType)(v)
}

func (*folderSinkBigqueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderSinkBigqueryOptions)(nil)).Elem()
}

func (i *folderSinkBigqueryOptionsPtrType) ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput {
	return i.ToFolderSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i *folderSinkBigqueryOptionsPtrType) ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsPtrOutput)
}

type FolderSinkBigqueryOptionsOutput struct{ *pulumi.OutputState }

func (FolderSinkBigqueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderSinkBigqueryOptions)(nil)).Elem()
}

func (o FolderSinkBigqueryOptionsOutput) ToFolderSinkBigqueryOptionsOutput() FolderSinkBigqueryOptionsOutput {
	return o
}

func (o FolderSinkBigqueryOptionsOutput) ToFolderSinkBigqueryOptionsOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsOutput {
	return o
}

func (o FolderSinkBigqueryOptionsOutput) ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput {
	return o.ToFolderSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (o FolderSinkBigqueryOptionsOutput) ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptions) *FolderSinkBigqueryOptions {
		return &v
	}).(FolderSinkBigqueryOptionsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o FolderSinkBigqueryOptionsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type FolderSinkBigqueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (FolderSinkBigqueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderSinkBigqueryOptions)(nil)).Elem()
}

func (o FolderSinkBigqueryOptionsPtrOutput) ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput {
	return o
}

func (o FolderSinkBigqueryOptionsPtrOutput) ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsPtrOutput {
	return o
}

func (o FolderSinkBigqueryOptionsPtrOutput) Elem() FolderSinkBigqueryOptionsOutput {
	return o.ApplyT(func(v *FolderSinkBigqueryOptions) FolderSinkBigqueryOptions { return *v }).(FolderSinkBigqueryOptionsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o FolderSinkBigqueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FolderSinkBigqueryOptions) *bool {
		if v == nil {
			return nil
		}
		return &v.UsePartitionedTables
	}).(pulumi.BoolPtrOutput)
}

type MetricBucketOptions struct {
	// Specifies a set of buckets with arbitrary widths.  Structure is documented below.
	ExplicitBuckets *MetricBucketOptionsExplicitBuckets `pulumi:"explicitBuckets"`
	// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
	// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.  Structure is documented below.
	ExponentialBuckets *MetricBucketOptionsExponentialBuckets `pulumi:"exponentialBuckets"`
	// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
	// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.  Structure is documented below.
	LinearBuckets *MetricBucketOptionsLinearBuckets `pulumi:"linearBuckets"`
}

// MetricBucketOptionsInput is an input type that accepts MetricBucketOptionsArgs and MetricBucketOptionsOutput values.
// You can construct a concrete instance of `MetricBucketOptionsInput` via:
//
// 		 MetricBucketOptionsArgs{...}
//
type MetricBucketOptionsInput interface {
	pulumi.Input

	ToMetricBucketOptionsOutput() MetricBucketOptionsOutput
	ToMetricBucketOptionsOutputWithContext(context.Context) MetricBucketOptionsOutput
}

type MetricBucketOptionsArgs struct {
	// Specifies a set of buckets with arbitrary widths.  Structure is documented below.
	ExplicitBuckets MetricBucketOptionsExplicitBucketsPtrInput `pulumi:"explicitBuckets"`
	// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
	// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.  Structure is documented below.
	ExponentialBuckets MetricBucketOptionsExponentialBucketsPtrInput `pulumi:"exponentialBuckets"`
	// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
	// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.  Structure is documented below.
	LinearBuckets MetricBucketOptionsLinearBucketsPtrInput `pulumi:"linearBuckets"`
}

func (MetricBucketOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptions)(nil)).Elem()
}

func (i MetricBucketOptionsArgs) ToMetricBucketOptionsOutput() MetricBucketOptionsOutput {
	return i.ToMetricBucketOptionsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsArgs) ToMetricBucketOptionsOutputWithContext(ctx context.Context) MetricBucketOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsOutput)
}

func (i MetricBucketOptionsArgs) ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput {
	return i.ToMetricBucketOptionsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsArgs) ToMetricBucketOptionsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsOutput).ToMetricBucketOptionsPtrOutputWithContext(ctx)
}

// MetricBucketOptionsPtrInput is an input type that accepts MetricBucketOptionsArgs, MetricBucketOptionsPtr and MetricBucketOptionsPtrOutput values.
// You can construct a concrete instance of `MetricBucketOptionsPtrInput` via:
//
// 		 MetricBucketOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type MetricBucketOptionsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput
	ToMetricBucketOptionsPtrOutputWithContext(context.Context) MetricBucketOptionsPtrOutput
}

type metricBucketOptionsPtrType MetricBucketOptionsArgs

func MetricBucketOptionsPtr(v *MetricBucketOptionsArgs) MetricBucketOptionsPtrInput {
	return (*metricBucketOptionsPtrType)(v)
}

func (*metricBucketOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptions)(nil)).Elem()
}

func (i *metricBucketOptionsPtrType) ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput {
	return i.ToMetricBucketOptionsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsPtrType) ToMetricBucketOptionsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsPtrOutput)
}

type MetricBucketOptionsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptions)(nil)).Elem()
}

func (o MetricBucketOptionsOutput) ToMetricBucketOptionsOutput() MetricBucketOptionsOutput {
	return o
}

func (o MetricBucketOptionsOutput) ToMetricBucketOptionsOutputWithContext(ctx context.Context) MetricBucketOptionsOutput {
	return o
}

func (o MetricBucketOptionsOutput) ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput {
	return o.ToMetricBucketOptionsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsOutput) ToMetricBucketOptionsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptions {
		return &v
	}).(MetricBucketOptionsPtrOutput)
}

// Specifies a set of buckets with arbitrary widths.  Structure is documented below.
func (o MetricBucketOptionsOutput) ExplicitBuckets() MetricBucketOptionsExplicitBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsExplicitBuckets { return v.ExplicitBuckets }).(MetricBucketOptionsExplicitBucketsPtrOutput)
}

// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.  Structure is documented below.
func (o MetricBucketOptionsOutput) ExponentialBuckets() MetricBucketOptionsExponentialBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsExponentialBuckets { return v.ExponentialBuckets }).(MetricBucketOptionsExponentialBucketsPtrOutput)
}

// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.  Structure is documented below.
func (o MetricBucketOptionsOutput) LinearBuckets() MetricBucketOptionsLinearBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsLinearBuckets { return v.LinearBuckets }).(MetricBucketOptionsLinearBucketsPtrOutput)
}

type MetricBucketOptionsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptions)(nil)).Elem()
}

func (o MetricBucketOptionsPtrOutput) ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput {
	return o
}

func (o MetricBucketOptionsPtrOutput) ToMetricBucketOptionsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsPtrOutput {
	return o
}

func (o MetricBucketOptionsPtrOutput) Elem() MetricBucketOptionsOutput {
	return o.ApplyT(func(v *MetricBucketOptions) MetricBucketOptions { return *v }).(MetricBucketOptionsOutput)
}

// Specifies a set of buckets with arbitrary widths.  Structure is documented below.
func (o MetricBucketOptionsPtrOutput) ExplicitBuckets() MetricBucketOptionsExplicitBucketsPtrOutput {
	return o.ApplyT(func(v *MetricBucketOptions) *MetricBucketOptionsExplicitBuckets {
		if v == nil {
			return nil
		}
		return v.ExplicitBuckets
	}).(MetricBucketOptionsExplicitBucketsPtrOutput)
}

// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.  Structure is documented below.
func (o MetricBucketOptionsPtrOutput) ExponentialBuckets() MetricBucketOptionsExponentialBucketsPtrOutput {
	return o.ApplyT(func(v *MetricBucketOptions) *MetricBucketOptionsExponentialBuckets {
		if v == nil {
			return nil
		}
		return v.ExponentialBuckets
	}).(MetricBucketOptionsExponentialBucketsPtrOutput)
}

// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.  Structure is documented below.
func (o MetricBucketOptionsPtrOutput) LinearBuckets() MetricBucketOptionsLinearBucketsPtrOutput {
	return o.ApplyT(func(v *MetricBucketOptions) *MetricBucketOptionsLinearBuckets {
		if v == nil {
			return nil
		}
		return v.LinearBuckets
	}).(MetricBucketOptionsLinearBucketsPtrOutput)
}

type MetricBucketOptionsExplicitBuckets struct {
	// The values must be monotonically increasing.
	Bounds []float64 `pulumi:"bounds"`
}

// MetricBucketOptionsExplicitBucketsInput is an input type that accepts MetricBucketOptionsExplicitBucketsArgs and MetricBucketOptionsExplicitBucketsOutput values.
// You can construct a concrete instance of `MetricBucketOptionsExplicitBucketsInput` via:
//
// 		 MetricBucketOptionsExplicitBucketsArgs{...}
//
type MetricBucketOptionsExplicitBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsExplicitBucketsOutput() MetricBucketOptionsExplicitBucketsOutput
	ToMetricBucketOptionsExplicitBucketsOutputWithContext(context.Context) MetricBucketOptionsExplicitBucketsOutput
}

type MetricBucketOptionsExplicitBucketsArgs struct {
	// The values must be monotonically increasing.
	Bounds pulumi.Float64ArrayInput `pulumi:"bounds"`
}

func (MetricBucketOptionsExplicitBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExplicitBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsExplicitBucketsArgs) ToMetricBucketOptionsExplicitBucketsOutput() MetricBucketOptionsExplicitBucketsOutput {
	return i.ToMetricBucketOptionsExplicitBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExplicitBucketsArgs) ToMetricBucketOptionsExplicitBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsOutput)
}

func (i MetricBucketOptionsExplicitBucketsArgs) ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput {
	return i.ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExplicitBucketsArgs) ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsOutput).ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx)
}

// MetricBucketOptionsExplicitBucketsPtrInput is an input type that accepts MetricBucketOptionsExplicitBucketsArgs, MetricBucketOptionsExplicitBucketsPtr and MetricBucketOptionsExplicitBucketsPtrOutput values.
// You can construct a concrete instance of `MetricBucketOptionsExplicitBucketsPtrInput` via:
//
// 		 MetricBucketOptionsExplicitBucketsArgs{...}
//
//  or:
//
// 		 nil
//
type MetricBucketOptionsExplicitBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput
	ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsExplicitBucketsPtrOutput
}

type metricBucketOptionsExplicitBucketsPtrType MetricBucketOptionsExplicitBucketsArgs

func MetricBucketOptionsExplicitBucketsPtr(v *MetricBucketOptionsExplicitBucketsArgs) MetricBucketOptionsExplicitBucketsPtrInput {
	return (*metricBucketOptionsExplicitBucketsPtrType)(v)
}

func (*metricBucketOptionsExplicitBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExplicitBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsExplicitBucketsPtrType) ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput {
	return i.ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsExplicitBucketsPtrType) ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsPtrOutput)
}

type MetricBucketOptionsExplicitBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExplicitBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExplicitBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsExplicitBucketsOutput) ToMetricBucketOptionsExplicitBucketsOutput() MetricBucketOptionsExplicitBucketsOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsOutput) ToMetricBucketOptionsExplicitBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsOutput) ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput {
	return o.ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsExplicitBucketsOutput) ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExplicitBuckets) *MetricBucketOptionsExplicitBuckets {
		return &v
	}).(MetricBucketOptionsExplicitBucketsPtrOutput)
}

// The values must be monotonically increasing.
func (o MetricBucketOptionsExplicitBucketsOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v MetricBucketOptionsExplicitBuckets) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type MetricBucketOptionsExplicitBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExplicitBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExplicitBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsExplicitBucketsPtrOutput) ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsPtrOutput) ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsPtrOutput) Elem() MetricBucketOptionsExplicitBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExplicitBuckets) MetricBucketOptionsExplicitBuckets { return *v }).(MetricBucketOptionsExplicitBucketsOutput)
}

// The values must be monotonically increasing.
func (o MetricBucketOptionsExplicitBucketsPtrOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExplicitBuckets) []float64 {
		if v == nil {
			return nil
		}
		return v.Bounds
	}).(pulumi.Float64ArrayOutput)
}

type MetricBucketOptionsExponentialBuckets struct {
	// Must be greater than 1.
	GrowthFactor *float64 `pulumi:"growthFactor"`
	// Must be greater than 0.
	NumFiniteBuckets *int `pulumi:"numFiniteBuckets"`
	// Must be greater than 0.
	Scale *float64 `pulumi:"scale"`
}

// MetricBucketOptionsExponentialBucketsInput is an input type that accepts MetricBucketOptionsExponentialBucketsArgs and MetricBucketOptionsExponentialBucketsOutput values.
// You can construct a concrete instance of `MetricBucketOptionsExponentialBucketsInput` via:
//
// 		 MetricBucketOptionsExponentialBucketsArgs{...}
//
type MetricBucketOptionsExponentialBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsExponentialBucketsOutput() MetricBucketOptionsExponentialBucketsOutput
	ToMetricBucketOptionsExponentialBucketsOutputWithContext(context.Context) MetricBucketOptionsExponentialBucketsOutput
}

type MetricBucketOptionsExponentialBucketsArgs struct {
	// Must be greater than 1.
	GrowthFactor pulumi.Float64PtrInput `pulumi:"growthFactor"`
	// Must be greater than 0.
	NumFiniteBuckets pulumi.IntPtrInput `pulumi:"numFiniteBuckets"`
	// Must be greater than 0.
	Scale pulumi.Float64PtrInput `pulumi:"scale"`
}

func (MetricBucketOptionsExponentialBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExponentialBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsExponentialBucketsArgs) ToMetricBucketOptionsExponentialBucketsOutput() MetricBucketOptionsExponentialBucketsOutput {
	return i.ToMetricBucketOptionsExponentialBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExponentialBucketsArgs) ToMetricBucketOptionsExponentialBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsOutput)
}

func (i MetricBucketOptionsExponentialBucketsArgs) ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput {
	return i.ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExponentialBucketsArgs) ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsOutput).ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx)
}

// MetricBucketOptionsExponentialBucketsPtrInput is an input type that accepts MetricBucketOptionsExponentialBucketsArgs, MetricBucketOptionsExponentialBucketsPtr and MetricBucketOptionsExponentialBucketsPtrOutput values.
// You can construct a concrete instance of `MetricBucketOptionsExponentialBucketsPtrInput` via:
//
// 		 MetricBucketOptionsExponentialBucketsArgs{...}
//
//  or:
//
// 		 nil
//
type MetricBucketOptionsExponentialBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput
	ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsExponentialBucketsPtrOutput
}

type metricBucketOptionsExponentialBucketsPtrType MetricBucketOptionsExponentialBucketsArgs

func MetricBucketOptionsExponentialBucketsPtr(v *MetricBucketOptionsExponentialBucketsArgs) MetricBucketOptionsExponentialBucketsPtrInput {
	return (*metricBucketOptionsExponentialBucketsPtrType)(v)
}

func (*metricBucketOptionsExponentialBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExponentialBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsExponentialBucketsPtrType) ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput {
	return i.ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsExponentialBucketsPtrType) ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsPtrOutput)
}

type MetricBucketOptionsExponentialBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExponentialBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExponentialBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsExponentialBucketsOutput) ToMetricBucketOptionsExponentialBucketsOutput() MetricBucketOptionsExponentialBucketsOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsOutput) ToMetricBucketOptionsExponentialBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsOutput) ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput {
	return o.ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsExponentialBucketsOutput) ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *MetricBucketOptionsExponentialBuckets {
		return &v
	}).(MetricBucketOptionsExponentialBucketsPtrOutput)
}

// Must be greater than 1.
func (o MetricBucketOptionsExponentialBucketsOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *float64 { return v.GrowthFactor }).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o MetricBucketOptionsExponentialBucketsOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

// Must be greater than 0.
func (o MetricBucketOptionsExponentialBucketsOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *float64 { return v.Scale }).(pulumi.Float64PtrOutput)
}

type MetricBucketOptionsExponentialBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExponentialBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExponentialBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) Elem() MetricBucketOptionsExponentialBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExponentialBuckets) MetricBucketOptionsExponentialBuckets { return *v }).(MetricBucketOptionsExponentialBucketsOutput)
}

// Must be greater than 1.
func (o MetricBucketOptionsExponentialBucketsPtrOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExponentialBuckets) *float64 {
		if v == nil {
			return nil
		}
		return v.GrowthFactor
	}).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o MetricBucketOptionsExponentialBucketsPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExponentialBuckets) *int {
		if v == nil {
			return nil
		}
		return v.NumFiniteBuckets
	}).(pulumi.IntPtrOutput)
}

// Must be greater than 0.
func (o MetricBucketOptionsExponentialBucketsPtrOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExponentialBuckets) *float64 {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(pulumi.Float64PtrOutput)
}

type MetricBucketOptionsLinearBuckets struct {
	// Must be greater than 0.
	NumFiniteBuckets *int `pulumi:"numFiniteBuckets"`
	// Lower bound of the first bucket.
	Offset *float64 `pulumi:"offset"`
	// Must be greater than 0.
	Width *int `pulumi:"width"`
}

// MetricBucketOptionsLinearBucketsInput is an input type that accepts MetricBucketOptionsLinearBucketsArgs and MetricBucketOptionsLinearBucketsOutput values.
// You can construct a concrete instance of `MetricBucketOptionsLinearBucketsInput` via:
//
// 		 MetricBucketOptionsLinearBucketsArgs{...}
//
type MetricBucketOptionsLinearBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsLinearBucketsOutput() MetricBucketOptionsLinearBucketsOutput
	ToMetricBucketOptionsLinearBucketsOutputWithContext(context.Context) MetricBucketOptionsLinearBucketsOutput
}

type MetricBucketOptionsLinearBucketsArgs struct {
	// Must be greater than 0.
	NumFiniteBuckets pulumi.IntPtrInput `pulumi:"numFiniteBuckets"`
	// Lower bound of the first bucket.
	Offset pulumi.Float64PtrInput `pulumi:"offset"`
	// Must be greater than 0.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (MetricBucketOptionsLinearBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsLinearBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsLinearBucketsArgs) ToMetricBucketOptionsLinearBucketsOutput() MetricBucketOptionsLinearBucketsOutput {
	return i.ToMetricBucketOptionsLinearBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsLinearBucketsArgs) ToMetricBucketOptionsLinearBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsOutput)
}

func (i MetricBucketOptionsLinearBucketsArgs) ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput {
	return i.ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsLinearBucketsArgs) ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsOutput).ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx)
}

// MetricBucketOptionsLinearBucketsPtrInput is an input type that accepts MetricBucketOptionsLinearBucketsArgs, MetricBucketOptionsLinearBucketsPtr and MetricBucketOptionsLinearBucketsPtrOutput values.
// You can construct a concrete instance of `MetricBucketOptionsLinearBucketsPtrInput` via:
//
// 		 MetricBucketOptionsLinearBucketsArgs{...}
//
//  or:
//
// 		 nil
//
type MetricBucketOptionsLinearBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput
	ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsLinearBucketsPtrOutput
}

type metricBucketOptionsLinearBucketsPtrType MetricBucketOptionsLinearBucketsArgs

func MetricBucketOptionsLinearBucketsPtr(v *MetricBucketOptionsLinearBucketsArgs) MetricBucketOptionsLinearBucketsPtrInput {
	return (*metricBucketOptionsLinearBucketsPtrType)(v)
}

func (*metricBucketOptionsLinearBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsLinearBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsLinearBucketsPtrType) ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput {
	return i.ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsLinearBucketsPtrType) ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsPtrOutput)
}

type MetricBucketOptionsLinearBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsLinearBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsLinearBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsLinearBucketsOutput) ToMetricBucketOptionsLinearBucketsOutput() MetricBucketOptionsLinearBucketsOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsOutput) ToMetricBucketOptionsLinearBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsOutput) ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput {
	return o.ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsLinearBucketsOutput) ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *MetricBucketOptionsLinearBuckets {
		return &v
	}).(MetricBucketOptionsLinearBucketsPtrOutput)
}

// Must be greater than 0.
func (o MetricBucketOptionsLinearBucketsOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

// Lower bound of the first bucket.
func (o MetricBucketOptionsLinearBucketsOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *float64 { return v.Offset }).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o MetricBucketOptionsLinearBucketsOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type MetricBucketOptionsLinearBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsLinearBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsLinearBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) Elem() MetricBucketOptionsLinearBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsLinearBuckets) MetricBucketOptionsLinearBuckets { return *v }).(MetricBucketOptionsLinearBucketsOutput)
}

// Must be greater than 0.
func (o MetricBucketOptionsLinearBucketsPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricBucketOptionsLinearBuckets) *int {
		if v == nil {
			return nil
		}
		return v.NumFiniteBuckets
	}).(pulumi.IntPtrOutput)
}

// Lower bound of the first bucket.
func (o MetricBucketOptionsLinearBucketsPtrOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricBucketOptionsLinearBuckets) *float64 {
		if v == nil {
			return nil
		}
		return v.Offset
	}).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o MetricBucketOptionsLinearBucketsPtrOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricBucketOptionsLinearBuckets) *int {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.IntPtrOutput)
}

type MetricMetricDescriptor struct {
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case
	// without an ending period, for example "Request count". This field is optional but it is
	// recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	DisplayName *string `pulumi:"displayName"`
	// The set of labels that can be used to describe a specific instance of this metric type. For
	// example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
	// for the HTTP response code, response_code, so you can look at latencies for successful responses
	// or just for responses that failed.  Structure is documented below.
	Labels []MetricMetricDescriptorLabel `pulumi:"labels"`
	// Whether the metric records instantaneous values, changes to a value, etc.
	// Some combinations of metricKind and valueType might not be supported.
	// For counter metrics, set this to DELTA.
	MetricKind string `pulumi:"metricKind"`
	// The unit in which the metric value is reported. It is only applicable if the valueType is
	// `INT64`, `DOUBLE`, or `DISTRIBUTION`. The supported units are a subset of
	// [The Unified Code for Units of Measure](http://unitsofmeasure.org/ucum.html) standard
	Unit *string `pulumi:"unit"`
	// The type of data that can be assigned to the label.
	ValueType string `pulumi:"valueType"`
}

// MetricMetricDescriptorInput is an input type that accepts MetricMetricDescriptorArgs and MetricMetricDescriptorOutput values.
// You can construct a concrete instance of `MetricMetricDescriptorInput` via:
//
// 		 MetricMetricDescriptorArgs{...}
//
type MetricMetricDescriptorInput interface {
	pulumi.Input

	ToMetricMetricDescriptorOutput() MetricMetricDescriptorOutput
	ToMetricMetricDescriptorOutputWithContext(context.Context) MetricMetricDescriptorOutput
}

type MetricMetricDescriptorArgs struct {
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case
	// without an ending period, for example "Request count". This field is optional but it is
	// recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The set of labels that can be used to describe a specific instance of this metric type. For
	// example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
	// for the HTTP response code, response_code, so you can look at latencies for successful responses
	// or just for responses that failed.  Structure is documented below.
	Labels MetricMetricDescriptorLabelArrayInput `pulumi:"labels"`
	// Whether the metric records instantaneous values, changes to a value, etc.
	// Some combinations of metricKind and valueType might not be supported.
	// For counter metrics, set this to DELTA.
	MetricKind pulumi.StringInput `pulumi:"metricKind"`
	// The unit in which the metric value is reported. It is only applicable if the valueType is
	// `INT64`, `DOUBLE`, or `DISTRIBUTION`. The supported units are a subset of
	// [The Unified Code for Units of Measure](http://unitsofmeasure.org/ucum.html) standard
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// The type of data that can be assigned to the label.
	ValueType pulumi.StringInput `pulumi:"valueType"`
}

func (MetricMetricDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptor)(nil)).Elem()
}

func (i MetricMetricDescriptorArgs) ToMetricMetricDescriptorOutput() MetricMetricDescriptorOutput {
	return i.ToMetricMetricDescriptorOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorArgs) ToMetricMetricDescriptorOutputWithContext(ctx context.Context) MetricMetricDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorOutput)
}

func (i MetricMetricDescriptorArgs) ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput {
	return i.ToMetricMetricDescriptorPtrOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorArgs) ToMetricMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorOutput).ToMetricMetricDescriptorPtrOutputWithContext(ctx)
}

// MetricMetricDescriptorPtrInput is an input type that accepts MetricMetricDescriptorArgs, MetricMetricDescriptorPtr and MetricMetricDescriptorPtrOutput values.
// You can construct a concrete instance of `MetricMetricDescriptorPtrInput` via:
//
// 		 MetricMetricDescriptorArgs{...}
//
//  or:
//
// 		 nil
//
type MetricMetricDescriptorPtrInput interface {
	pulumi.Input

	ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput
	ToMetricMetricDescriptorPtrOutputWithContext(context.Context) MetricMetricDescriptorPtrOutput
}

type metricMetricDescriptorPtrType MetricMetricDescriptorArgs

func MetricMetricDescriptorPtr(v *MetricMetricDescriptorArgs) MetricMetricDescriptorPtrInput {
	return (*metricMetricDescriptorPtrType)(v)
}

func (*metricMetricDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetricDescriptor)(nil)).Elem()
}

func (i *metricMetricDescriptorPtrType) ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput {
	return i.ToMetricMetricDescriptorPtrOutputWithContext(context.Background())
}

func (i *metricMetricDescriptorPtrType) ToMetricMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorPtrOutput)
}

type MetricMetricDescriptorOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptor)(nil)).Elem()
}

func (o MetricMetricDescriptorOutput) ToMetricMetricDescriptorOutput() MetricMetricDescriptorOutput {
	return o
}

func (o MetricMetricDescriptorOutput) ToMetricMetricDescriptorOutputWithContext(ctx context.Context) MetricMetricDescriptorOutput {
	return o
}

func (o MetricMetricDescriptorOutput) ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput {
	return o.ToMetricMetricDescriptorPtrOutputWithContext(context.Background())
}

func (o MetricMetricDescriptorOutput) ToMetricMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) *MetricMetricDescriptor {
		return &v
	}).(MetricMetricDescriptorPtrOutput)
}

// A concise name for the metric, which can be displayed in user interfaces. Use sentence case
// without an ending period, for example "Request count". This field is optional but it is
// recommended to be set for any metrics associated with user-visible concepts, such as Quota.
func (o MetricMetricDescriptorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The set of labels that can be used to describe a specific instance of this metric type. For
// example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
// for the HTTP response code, response_code, so you can look at latencies for successful responses
// or just for responses that failed.  Structure is documented below.
func (o MetricMetricDescriptorOutput) Labels() MetricMetricDescriptorLabelArrayOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) []MetricMetricDescriptorLabel { return v.Labels }).(MetricMetricDescriptorLabelArrayOutput)
}

// Whether the metric records instantaneous values, changes to a value, etc.
// Some combinations of metricKind and valueType might not be supported.
// For counter metrics, set this to DELTA.
func (o MetricMetricDescriptorOutput) MetricKind() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) string { return v.MetricKind }).(pulumi.StringOutput)
}

// The unit in which the metric value is reported. It is only applicable if the valueType is
// `INT64`, `DOUBLE`, or `DISTRIBUTION`. The supported units are a subset of
// [The Unified Code for Units of Measure](http://unitsofmeasure.org/ucum.html) standard
func (o MetricMetricDescriptorOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// The type of data that can be assigned to the label.
func (o MetricMetricDescriptorOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) string { return v.ValueType }).(pulumi.StringOutput)
}

type MetricMetricDescriptorPtrOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetricDescriptor)(nil)).Elem()
}

func (o MetricMetricDescriptorPtrOutput) ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput {
	return o
}

func (o MetricMetricDescriptorPtrOutput) ToMetricMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorPtrOutput {
	return o
}

func (o MetricMetricDescriptorPtrOutput) Elem() MetricMetricDescriptorOutput {
	return o.ApplyT(func(v *MetricMetricDescriptor) MetricMetricDescriptor { return *v }).(MetricMetricDescriptorOutput)
}

// A concise name for the metric, which can be displayed in user interfaces. Use sentence case
// without an ending period, for example "Request count". This field is optional but it is
// recommended to be set for any metrics associated with user-visible concepts, such as Quota.
func (o MetricMetricDescriptorPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The set of labels that can be used to describe a specific instance of this metric type. For
// example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
// for the HTTP response code, response_code, so you can look at latencies for successful responses
// or just for responses that failed.  Structure is documented below.
func (o MetricMetricDescriptorPtrOutput) Labels() MetricMetricDescriptorLabelArrayOutput {
	return o.ApplyT(func(v *MetricMetricDescriptor) []MetricMetricDescriptorLabel {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(MetricMetricDescriptorLabelArrayOutput)
}

// Whether the metric records instantaneous values, changes to a value, etc.
// Some combinations of metricKind and valueType might not be supported.
// For counter metrics, set this to DELTA.
func (o MetricMetricDescriptorPtrOutput) MetricKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return &v.MetricKind
	}).(pulumi.StringPtrOutput)
}

// The unit in which the metric value is reported. It is only applicable if the valueType is
// `INT64`, `DOUBLE`, or `DISTRIBUTION`. The supported units are a subset of
// [The Unified Code for Units of Measure](http://unitsofmeasure.org/ucum.html) standard
func (o MetricMetricDescriptorPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// The type of data that can be assigned to the label.
func (o MetricMetricDescriptorPtrOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return &v.ValueType
	}).(pulumi.StringPtrOutput)
}

type MetricMetricDescriptorLabel struct {
	// A description of this metric, which is used in documentation. The maximum length of the
	// description is 8000 characters.
	Description *string `pulumi:"description"`
	// The label key.
	Key string `pulumi:"key"`
	// The type of data that can be assigned to the label.
	ValueType *string `pulumi:"valueType"`
}

// MetricMetricDescriptorLabelInput is an input type that accepts MetricMetricDescriptorLabelArgs and MetricMetricDescriptorLabelOutput values.
// You can construct a concrete instance of `MetricMetricDescriptorLabelInput` via:
//
// 		 MetricMetricDescriptorLabelArgs{...}
//
type MetricMetricDescriptorLabelInput interface {
	pulumi.Input

	ToMetricMetricDescriptorLabelOutput() MetricMetricDescriptorLabelOutput
	ToMetricMetricDescriptorLabelOutputWithContext(context.Context) MetricMetricDescriptorLabelOutput
}

type MetricMetricDescriptorLabelArgs struct {
	// A description of this metric, which is used in documentation. The maximum length of the
	// description is 8000 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The label key.
	Key pulumi.StringInput `pulumi:"key"`
	// The type of data that can be assigned to the label.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
}

func (MetricMetricDescriptorLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorLabel)(nil)).Elem()
}

func (i MetricMetricDescriptorLabelArgs) ToMetricMetricDescriptorLabelOutput() MetricMetricDescriptorLabelOutput {
	return i.ToMetricMetricDescriptorLabelOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorLabelArgs) ToMetricMetricDescriptorLabelOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorLabelOutput)
}

// MetricMetricDescriptorLabelArrayInput is an input type that accepts MetricMetricDescriptorLabelArray and MetricMetricDescriptorLabelArrayOutput values.
// You can construct a concrete instance of `MetricMetricDescriptorLabelArrayInput` via:
//
// 		 MetricMetricDescriptorLabelArray{ MetricMetricDescriptorLabelArgs{...} }
//
type MetricMetricDescriptorLabelArrayInput interface {
	pulumi.Input

	ToMetricMetricDescriptorLabelArrayOutput() MetricMetricDescriptorLabelArrayOutput
	ToMetricMetricDescriptorLabelArrayOutputWithContext(context.Context) MetricMetricDescriptorLabelArrayOutput
}

type MetricMetricDescriptorLabelArray []MetricMetricDescriptorLabelInput

func (MetricMetricDescriptorLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricDescriptorLabel)(nil)).Elem()
}

func (i MetricMetricDescriptorLabelArray) ToMetricMetricDescriptorLabelArrayOutput() MetricMetricDescriptorLabelArrayOutput {
	return i.ToMetricMetricDescriptorLabelArrayOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorLabelArray) ToMetricMetricDescriptorLabelArrayOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorLabelArrayOutput)
}

type MetricMetricDescriptorLabelOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorLabel)(nil)).Elem()
}

func (o MetricMetricDescriptorLabelOutput) ToMetricMetricDescriptorLabelOutput() MetricMetricDescriptorLabelOutput {
	return o
}

func (o MetricMetricDescriptorLabelOutput) ToMetricMetricDescriptorLabelOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelOutput {
	return o
}

// A description of this metric, which is used in documentation. The maximum length of the
// description is 8000 characters.
func (o MetricMetricDescriptorLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabel) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The label key.
func (o MetricMetricDescriptorLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabel) string { return v.Key }).(pulumi.StringOutput)
}

// The type of data that can be assigned to the label.
func (o MetricMetricDescriptorLabelOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabel) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type MetricMetricDescriptorLabelArrayOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricDescriptorLabel)(nil)).Elem()
}

func (o MetricMetricDescriptorLabelArrayOutput) ToMetricMetricDescriptorLabelArrayOutput() MetricMetricDescriptorLabelArrayOutput {
	return o
}

func (o MetricMetricDescriptorLabelArrayOutput) ToMetricMetricDescriptorLabelArrayOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelArrayOutput {
	return o
}

func (o MetricMetricDescriptorLabelArrayOutput) Index(i pulumi.IntInput) MetricMetricDescriptorLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricMetricDescriptorLabel {
		return vs[0].([]MetricMetricDescriptorLabel)[vs[1].(int)]
	}).(MetricMetricDescriptorLabelOutput)
}

type OrganizationSinkBigqueryOptions struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

// OrganizationSinkBigqueryOptionsInput is an input type that accepts OrganizationSinkBigqueryOptionsArgs and OrganizationSinkBigqueryOptionsOutput values.
// You can construct a concrete instance of `OrganizationSinkBigqueryOptionsInput` via:
//
// 		 OrganizationSinkBigqueryOptionsArgs{...}
//
type OrganizationSinkBigqueryOptionsInput interface {
	pulumi.Input

	ToOrganizationSinkBigqueryOptionsOutput() OrganizationSinkBigqueryOptionsOutput
	ToOrganizationSinkBigqueryOptionsOutputWithContext(context.Context) OrganizationSinkBigqueryOptionsOutput
}

type OrganizationSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (OrganizationSinkBigqueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationSinkBigqueryOptions)(nil)).Elem()
}

func (i OrganizationSinkBigqueryOptionsArgs) ToOrganizationSinkBigqueryOptionsOutput() OrganizationSinkBigqueryOptionsOutput {
	return i.ToOrganizationSinkBigqueryOptionsOutputWithContext(context.Background())
}

func (i OrganizationSinkBigqueryOptionsArgs) ToOrganizationSinkBigqueryOptionsOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsOutput)
}

func (i OrganizationSinkBigqueryOptionsArgs) ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput {
	return i.ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i OrganizationSinkBigqueryOptionsArgs) ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsOutput).ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx)
}

// OrganizationSinkBigqueryOptionsPtrInput is an input type that accepts OrganizationSinkBigqueryOptionsArgs, OrganizationSinkBigqueryOptionsPtr and OrganizationSinkBigqueryOptionsPtrOutput values.
// You can construct a concrete instance of `OrganizationSinkBigqueryOptionsPtrInput` via:
//
// 		 OrganizationSinkBigqueryOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type OrganizationSinkBigqueryOptionsPtrInput interface {
	pulumi.Input

	ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput
	ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(context.Context) OrganizationSinkBigqueryOptionsPtrOutput
}

type organizationSinkBigqueryOptionsPtrType OrganizationSinkBigqueryOptionsArgs

func OrganizationSinkBigqueryOptionsPtr(v *OrganizationSinkBigqueryOptionsArgs) OrganizationSinkBigqueryOptionsPtrInput {
	return (*organizationSinkBigqueryOptionsPtrType)(v)
}

func (*organizationSinkBigqueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationSinkBigqueryOptions)(nil)).Elem()
}

func (i *organizationSinkBigqueryOptionsPtrType) ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput {
	return i.ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i *organizationSinkBigqueryOptionsPtrType) ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsPtrOutput)
}

type OrganizationSinkBigqueryOptionsOutput struct{ *pulumi.OutputState }

func (OrganizationSinkBigqueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationSinkBigqueryOptions)(nil)).Elem()
}

func (o OrganizationSinkBigqueryOptionsOutput) ToOrganizationSinkBigqueryOptionsOutput() OrganizationSinkBigqueryOptionsOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsOutput) ToOrganizationSinkBigqueryOptionsOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsOutput) ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput {
	return o.ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (o OrganizationSinkBigqueryOptionsOutput) ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptions) *OrganizationSinkBigqueryOptions {
		return &v
	}).(OrganizationSinkBigqueryOptionsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o OrganizationSinkBigqueryOptionsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type OrganizationSinkBigqueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (OrganizationSinkBigqueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationSinkBigqueryOptions)(nil)).Elem()
}

func (o OrganizationSinkBigqueryOptionsPtrOutput) ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsPtrOutput) ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsPtrOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsPtrOutput) Elem() OrganizationSinkBigqueryOptionsOutput {
	return o.ApplyT(func(v *OrganizationSinkBigqueryOptions) OrganizationSinkBigqueryOptions { return *v }).(OrganizationSinkBigqueryOptionsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o OrganizationSinkBigqueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationSinkBigqueryOptions) *bool {
		if v == nil {
			return nil
		}
		return &v.UsePartitionedTables
	}).(pulumi.BoolPtrOutput)
}

type ProjectSinkBigqueryOptions struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

// ProjectSinkBigqueryOptionsInput is an input type that accepts ProjectSinkBigqueryOptionsArgs and ProjectSinkBigqueryOptionsOutput values.
// You can construct a concrete instance of `ProjectSinkBigqueryOptionsInput` via:
//
// 		 ProjectSinkBigqueryOptionsArgs{...}
//
type ProjectSinkBigqueryOptionsInput interface {
	pulumi.Input

	ToProjectSinkBigqueryOptionsOutput() ProjectSinkBigqueryOptionsOutput
	ToProjectSinkBigqueryOptionsOutputWithContext(context.Context) ProjectSinkBigqueryOptionsOutput
}

type ProjectSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (ProjectSinkBigqueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSinkBigqueryOptions)(nil)).Elem()
}

func (i ProjectSinkBigqueryOptionsArgs) ToProjectSinkBigqueryOptionsOutput() ProjectSinkBigqueryOptionsOutput {
	return i.ToProjectSinkBigqueryOptionsOutputWithContext(context.Background())
}

func (i ProjectSinkBigqueryOptionsArgs) ToProjectSinkBigqueryOptionsOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsOutput)
}

func (i ProjectSinkBigqueryOptionsArgs) ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput {
	return i.ToProjectSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i ProjectSinkBigqueryOptionsArgs) ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsOutput).ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx)
}

// ProjectSinkBigqueryOptionsPtrInput is an input type that accepts ProjectSinkBigqueryOptionsArgs, ProjectSinkBigqueryOptionsPtr and ProjectSinkBigqueryOptionsPtrOutput values.
// You can construct a concrete instance of `ProjectSinkBigqueryOptionsPtrInput` via:
//
// 		 ProjectSinkBigqueryOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectSinkBigqueryOptionsPtrInput interface {
	pulumi.Input

	ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput
	ToProjectSinkBigqueryOptionsPtrOutputWithContext(context.Context) ProjectSinkBigqueryOptionsPtrOutput
}

type projectSinkBigqueryOptionsPtrType ProjectSinkBigqueryOptionsArgs

func ProjectSinkBigqueryOptionsPtr(v *ProjectSinkBigqueryOptionsArgs) ProjectSinkBigqueryOptionsPtrInput {
	return (*projectSinkBigqueryOptionsPtrType)(v)
}

func (*projectSinkBigqueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSinkBigqueryOptions)(nil)).Elem()
}

func (i *projectSinkBigqueryOptionsPtrType) ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput {
	return i.ToProjectSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i *projectSinkBigqueryOptionsPtrType) ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsPtrOutput)
}

type ProjectSinkBigqueryOptionsOutput struct{ *pulumi.OutputState }

func (ProjectSinkBigqueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSinkBigqueryOptions)(nil)).Elem()
}

func (o ProjectSinkBigqueryOptionsOutput) ToProjectSinkBigqueryOptionsOutput() ProjectSinkBigqueryOptionsOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsOutput) ToProjectSinkBigqueryOptionsOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsOutput) ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput {
	return o.ToProjectSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (o ProjectSinkBigqueryOptionsOutput) ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptions) *ProjectSinkBigqueryOptions {
		return &v
	}).(ProjectSinkBigqueryOptionsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o ProjectSinkBigqueryOptionsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type ProjectSinkBigqueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (ProjectSinkBigqueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSinkBigqueryOptions)(nil)).Elem()
}

func (o ProjectSinkBigqueryOptionsPtrOutput) ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsPtrOutput) ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsPtrOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsPtrOutput) Elem() ProjectSinkBigqueryOptionsOutput {
	return o.ApplyT(func(v *ProjectSinkBigqueryOptions) ProjectSinkBigqueryOptions { return *v }).(ProjectSinkBigqueryOptionsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o ProjectSinkBigqueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectSinkBigqueryOptions) *bool {
		if v == nil {
			return nil
		}
		return &v.UsePartitionedTables
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BillingAccountSinkBigqueryOptionsOutput{})
	pulumi.RegisterOutputType(BillingAccountSinkBigqueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(FolderSinkBigqueryOptionsOutput{})
	pulumi.RegisterOutputType(FolderSinkBigqueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExplicitBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExplicitBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExponentialBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExponentialBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsLinearBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsLinearBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorPtrOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorLabelOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorLabelArrayOutput{})
	pulumi.RegisterOutputType(OrganizationSinkBigqueryOptionsOutput{})
	pulumi.RegisterOutputType(OrganizationSinkBigqueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(ProjectSinkBigqueryOptionsOutput{})
	pulumi.RegisterOutputType(ProjectSinkBigqueryOptionsPtrOutput{})
}
