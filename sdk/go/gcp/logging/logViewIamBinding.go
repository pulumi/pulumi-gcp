// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud (Stackdriver) Logging LogView. Each of these resources serves a different use case:
//
// * `logging.LogViewIamPolicy`: Authoritative. Sets the IAM policy for the logview and replaces any existing policy already attached.
// * `logging.LogViewIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the logview are preserved.
// * `logging.LogViewIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the logview are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `logging.LogViewIamPolicy`: Retrieves the IAM policy for the logview
//
// > **Note:** `logging.LogViewIamPolicy` **cannot** be used in conjunction with `logging.LogViewIamBinding` and `logging.LogViewIamMember` or they will fight over what your policy should be.
//
// > **Note:** `logging.LogViewIamBinding` resources **can be** used in conjunction with `logging.LogViewIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## logging.LogViewIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/logging.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = logging.NewLogViewIamPolicy(ctx, "policy", &logging.LogViewIamPolicyArgs{
//				Parent:     pulumi.Any(loggingLogView.Parent),
//				Location:   pulumi.Any(loggingLogView.Location),
//				Bucket:     pulumi.Any(loggingLogView.Bucket),
//				Name:       pulumi.Any(loggingLogView.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/logging.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = logging.NewLogViewIamPolicy(ctx, "policy", &logging.LogViewIamPolicyArgs{
//				Parent:     pulumi.Any(loggingLogView.Parent),
//				Location:   pulumi.Any(loggingLogView.Location),
//				Bucket:     pulumi.Any(loggingLogView.Bucket),
//				Name:       pulumi.Any(loggingLogView.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## logging.LogViewIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogViewIamBinding(ctx, "binding", &logging.LogViewIamBindingArgs{
//				Parent:   pulumi.Any(loggingLogView.Parent),
//				Location: pulumi.Any(loggingLogView.Location),
//				Bucket:   pulumi.Any(loggingLogView.Bucket),
//				Name:     pulumi.Any(loggingLogView.Name),
//				Role:     pulumi.String("roles/logging.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogViewIamBinding(ctx, "binding", &logging.LogViewIamBindingArgs{
//				Parent:   pulumi.Any(loggingLogView.Parent),
//				Location: pulumi.Any(loggingLogView.Location),
//				Bucket:   pulumi.Any(loggingLogView.Bucket),
//				Name:     pulumi.Any(loggingLogView.Name),
//				Role:     pulumi.String("roles/logging.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &logging.LogViewIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## logging.LogViewIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogViewIamMember(ctx, "member", &logging.LogViewIamMemberArgs{
//				Parent:   pulumi.Any(loggingLogView.Parent),
//				Location: pulumi.Any(loggingLogView.Location),
//				Bucket:   pulumi.Any(loggingLogView.Bucket),
//				Name:     pulumi.Any(loggingLogView.Name),
//				Role:     pulumi.String("roles/logging.admin"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogViewIamMember(ctx, "member", &logging.LogViewIamMemberArgs{
//				Parent:   pulumi.Any(loggingLogView.Parent),
//				Location: pulumi.Any(loggingLogView.Location),
//				Bucket:   pulumi.Any(loggingLogView.Bucket),
//				Name:     pulumi.Any(loggingLogView.Name),
//				Role:     pulumi.String("roles/logging.admin"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &logging.LogViewIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
// ---
//
// # IAM policy for Cloud (Stackdriver) Logging LogView
//
// Three different resources help you manage your IAM policy for Cloud (Stackdriver) Logging LogView. Each of these resources serves a different use case:
//
// * `logging.LogViewIamPolicy`: Authoritative. Sets the IAM policy for the logview and replaces any existing policy already attached.
// * `logging.LogViewIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the logview are preserved.
// * `logging.LogViewIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the logview are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `logging.LogViewIamPolicy`: Retrieves the IAM policy for the logview
//
// > **Note:** `logging.LogViewIamPolicy` **cannot** be used in conjunction with `logging.LogViewIamBinding` and `logging.LogViewIamMember` or they will fight over what your policy should be.
//
// > **Note:** `logging.LogViewIamBinding` resources **can be** used in conjunction with `logging.LogViewIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## logging.LogViewIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/logging.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = logging.NewLogViewIamPolicy(ctx, "policy", &logging.LogViewIamPolicyArgs{
//				Parent:     pulumi.Any(loggingLogView.Parent),
//				Location:   pulumi.Any(loggingLogView.Location),
//				Bucket:     pulumi.Any(loggingLogView.Bucket),
//				Name:       pulumi.Any(loggingLogView.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/logging.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = logging.NewLogViewIamPolicy(ctx, "policy", &logging.LogViewIamPolicyArgs{
//				Parent:     pulumi.Any(loggingLogView.Parent),
//				Location:   pulumi.Any(loggingLogView.Location),
//				Bucket:     pulumi.Any(loggingLogView.Bucket),
//				Name:       pulumi.Any(loggingLogView.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## logging.LogViewIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogViewIamBinding(ctx, "binding", &logging.LogViewIamBindingArgs{
//				Parent:   pulumi.Any(loggingLogView.Parent),
//				Location: pulumi.Any(loggingLogView.Location),
//				Bucket:   pulumi.Any(loggingLogView.Bucket),
//				Name:     pulumi.Any(loggingLogView.Name),
//				Role:     pulumi.String("roles/logging.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogViewIamBinding(ctx, "binding", &logging.LogViewIamBindingArgs{
//				Parent:   pulumi.Any(loggingLogView.Parent),
//				Location: pulumi.Any(loggingLogView.Location),
//				Bucket:   pulumi.Any(loggingLogView.Bucket),
//				Name:     pulumi.Any(loggingLogView.Name),
//				Role:     pulumi.String("roles/logging.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &logging.LogViewIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## logging.LogViewIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogViewIamMember(ctx, "member", &logging.LogViewIamMemberArgs{
//				Parent:   pulumi.Any(loggingLogView.Parent),
//				Location: pulumi.Any(loggingLogView.Location),
//				Bucket:   pulumi.Any(loggingLogView.Bucket),
//				Name:     pulumi.Any(loggingLogView.Name),
//				Role:     pulumi.String("roles/logging.admin"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewLogViewIamMember(ctx, "member", &logging.LogViewIamMemberArgs{
//				Parent:   pulumi.Any(loggingLogView.Parent),
//				Location: pulumi.Any(loggingLogView.Location),
//				Bucket:   pulumi.Any(loggingLogView.Bucket),
//				Name:     pulumi.Any(loggingLogView.Name),
//				Role:     pulumi.String("roles/logging.admin"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &logging.LogViewIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * {{parent}}/locations/{{location}}/buckets/{{bucket}}/views/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Cloud (Stackdriver) Logging logview IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:logging/logViewIamBinding:LogViewIamBinding editor "{{parent}}/locations/{{location}}/buckets/{{bucket}}/views/{{log_view}} roles/logging.admin user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:logging/logViewIamBinding:LogViewIamBinding editor "{{parent}}/locations/{{location}}/buckets/{{bucket}}/views/{{log_view}} roles/logging.admin"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:logging/logViewIamBinding:LogViewIamBinding editor {{parent}}/locations/{{location}}/buckets/{{bucket}}/views/{{log_view}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type LogViewIamBinding struct {
	pulumi.CustomResourceState

	// The bucket of the resource Used to find the parent resource to bind the IAM policy to
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition LogViewIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent of the resource. Used to find the parent resource to bind the IAM policy to
	Parent pulumi.StringOutput `pulumi:"parent"`
	// The role that should be applied. Only one
	// `logging.LogViewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewLogViewIamBinding registers a new resource with the given unique name, arguments, and options.
func NewLogViewIamBinding(ctx *pulumi.Context,
	name string, args *LogViewIamBindingArgs, opts ...pulumi.ResourceOption) (*LogViewIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogViewIamBinding
	err := ctx.RegisterResource("gcp:logging/logViewIamBinding:LogViewIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogViewIamBinding gets an existing LogViewIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogViewIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogViewIamBindingState, opts ...pulumi.ResourceOption) (*LogViewIamBinding, error) {
	var resource LogViewIamBinding
	err := ctx.ReadResource("gcp:logging/logViewIamBinding:LogViewIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogViewIamBinding resources.
type logViewIamBindingState struct {
	// The bucket of the resource Used to find the parent resource to bind the IAM policy to
	Bucket *string `pulumi:"bucket"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *LogViewIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The parent of the resource. Used to find the parent resource to bind the IAM policy to
	Parent *string `pulumi:"parent"`
	// The role that should be applied. Only one
	// `logging.LogViewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type LogViewIamBindingState struct {
	// The bucket of the resource Used to find the parent resource to bind the IAM policy to
	Bucket pulumi.StringPtrInput
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition LogViewIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The parent of the resource. Used to find the parent resource to bind the IAM policy to
	Parent pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `logging.LogViewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (LogViewIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*logViewIamBindingState)(nil)).Elem()
}

type logViewIamBindingArgs struct {
	// The bucket of the resource Used to find the parent resource to bind the IAM policy to
	Bucket string `pulumi:"bucket"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *LogViewIamBindingCondition `pulumi:"condition"`
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The parent of the resource. Used to find the parent resource to bind the IAM policy to
	Parent string `pulumi:"parent"`
	// The role that should be applied. Only one
	// `logging.LogViewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a LogViewIamBinding resource.
type LogViewIamBindingArgs struct {
	// The bucket of the resource Used to find the parent resource to bind the IAM policy to
	Bucket pulumi.StringInput
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition LogViewIamBindingConditionPtrInput
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The parent of the resource. Used to find the parent resource to bind the IAM policy to
	Parent pulumi.StringInput
	// The role that should be applied. Only one
	// `logging.LogViewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (LogViewIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logViewIamBindingArgs)(nil)).Elem()
}

type LogViewIamBindingInput interface {
	pulumi.Input

	ToLogViewIamBindingOutput() LogViewIamBindingOutput
	ToLogViewIamBindingOutputWithContext(ctx context.Context) LogViewIamBindingOutput
}

func (*LogViewIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**LogViewIamBinding)(nil)).Elem()
}

func (i *LogViewIamBinding) ToLogViewIamBindingOutput() LogViewIamBindingOutput {
	return i.ToLogViewIamBindingOutputWithContext(context.Background())
}

func (i *LogViewIamBinding) ToLogViewIamBindingOutputWithContext(ctx context.Context) LogViewIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogViewIamBindingOutput)
}

// LogViewIamBindingArrayInput is an input type that accepts LogViewIamBindingArray and LogViewIamBindingArrayOutput values.
// You can construct a concrete instance of `LogViewIamBindingArrayInput` via:
//
//	LogViewIamBindingArray{ LogViewIamBindingArgs{...} }
type LogViewIamBindingArrayInput interface {
	pulumi.Input

	ToLogViewIamBindingArrayOutput() LogViewIamBindingArrayOutput
	ToLogViewIamBindingArrayOutputWithContext(context.Context) LogViewIamBindingArrayOutput
}

type LogViewIamBindingArray []LogViewIamBindingInput

func (LogViewIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogViewIamBinding)(nil)).Elem()
}

func (i LogViewIamBindingArray) ToLogViewIamBindingArrayOutput() LogViewIamBindingArrayOutput {
	return i.ToLogViewIamBindingArrayOutputWithContext(context.Background())
}

func (i LogViewIamBindingArray) ToLogViewIamBindingArrayOutputWithContext(ctx context.Context) LogViewIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogViewIamBindingArrayOutput)
}

// LogViewIamBindingMapInput is an input type that accepts LogViewIamBindingMap and LogViewIamBindingMapOutput values.
// You can construct a concrete instance of `LogViewIamBindingMapInput` via:
//
//	LogViewIamBindingMap{ "key": LogViewIamBindingArgs{...} }
type LogViewIamBindingMapInput interface {
	pulumi.Input

	ToLogViewIamBindingMapOutput() LogViewIamBindingMapOutput
	ToLogViewIamBindingMapOutputWithContext(context.Context) LogViewIamBindingMapOutput
}

type LogViewIamBindingMap map[string]LogViewIamBindingInput

func (LogViewIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogViewIamBinding)(nil)).Elem()
}

func (i LogViewIamBindingMap) ToLogViewIamBindingMapOutput() LogViewIamBindingMapOutput {
	return i.ToLogViewIamBindingMapOutputWithContext(context.Background())
}

func (i LogViewIamBindingMap) ToLogViewIamBindingMapOutputWithContext(ctx context.Context) LogViewIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogViewIamBindingMapOutput)
}

type LogViewIamBindingOutput struct{ *pulumi.OutputState }

func (LogViewIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogViewIamBinding)(nil)).Elem()
}

func (o LogViewIamBindingOutput) ToLogViewIamBindingOutput() LogViewIamBindingOutput {
	return o
}

func (o LogViewIamBindingOutput) ToLogViewIamBindingOutputWithContext(ctx context.Context) LogViewIamBindingOutput {
	return o
}

// The bucket of the resource Used to find the parent resource to bind the IAM policy to
func (o LogViewIamBindingOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *LogViewIamBinding) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o LogViewIamBindingOutput) Condition() LogViewIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *LogViewIamBinding) LogViewIamBindingConditionPtrOutput { return v.Condition }).(LogViewIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o LogViewIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *LogViewIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o LogViewIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LogViewIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o LogViewIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogViewIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o LogViewIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogViewIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent of the resource. Used to find the parent resource to bind the IAM policy to
func (o LogViewIamBindingOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *LogViewIamBinding) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `logging.LogViewIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o LogViewIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *LogViewIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type LogViewIamBindingArrayOutput struct{ *pulumi.OutputState }

func (LogViewIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogViewIamBinding)(nil)).Elem()
}

func (o LogViewIamBindingArrayOutput) ToLogViewIamBindingArrayOutput() LogViewIamBindingArrayOutput {
	return o
}

func (o LogViewIamBindingArrayOutput) ToLogViewIamBindingArrayOutputWithContext(ctx context.Context) LogViewIamBindingArrayOutput {
	return o
}

func (o LogViewIamBindingArrayOutput) Index(i pulumi.IntInput) LogViewIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogViewIamBinding {
		return vs[0].([]*LogViewIamBinding)[vs[1].(int)]
	}).(LogViewIamBindingOutput)
}

type LogViewIamBindingMapOutput struct{ *pulumi.OutputState }

func (LogViewIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogViewIamBinding)(nil)).Elem()
}

func (o LogViewIamBindingMapOutput) ToLogViewIamBindingMapOutput() LogViewIamBindingMapOutput {
	return o
}

func (o LogViewIamBindingMapOutput) ToLogViewIamBindingMapOutputWithContext(ctx context.Context) LogViewIamBindingMapOutput {
	return o
}

func (o LogViewIamBindingMapOutput) MapIndex(k pulumi.StringInput) LogViewIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogViewIamBinding {
		return vs[0].(map[string]*LogViewIamBinding)[vs[1].(string)]
	}).(LogViewIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogViewIamBindingInput)(nil)).Elem(), &LogViewIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogViewIamBindingArrayInput)(nil)).Elem(), LogViewIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogViewIamBindingMapInput)(nil)).Elem(), LogViewIamBindingMap{})
	pulumi.RegisterOutputType(LogViewIamBindingOutput{})
	pulumi.RegisterOutputType(LogViewIamBindingArrayOutput{})
	pulumi.RegisterOutputType(LogViewIamBindingMapOutput{})
}
