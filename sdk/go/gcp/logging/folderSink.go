// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a folder-level logging sink. For more information see
// [the official documentation](https://cloud.google.com/logging/docs/) and
// [Exporting Logs in the API](https://cloud.google.com/logging/docs/api/tasks/exporting-logs).
// 
// Note that you must have the "Logs Configuration Writer" IAM role (`roles/logging.configWriter`)
// granted to the credentials used with terraform.
type FolderSink struct {
	s *pulumi.ResourceState
}

// NewFolderSink registers a new resource with the given unique name, arguments, and options.
func NewFolderSink(ctx *pulumi.Context,
	name string, args *FolderSinkArgs, opts ...pulumi.ResourceOpt) (*FolderSink, error) {
	if args == nil || args.Destination == nil {
		return nil, errors.New("missing required argument 'Destination'")
	}
	if args == nil || args.Folder == nil {
		return nil, errors.New("missing required argument 'Folder'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["destination"] = nil
		inputs["filter"] = nil
		inputs["folder"] = nil
		inputs["includeChildren"] = nil
		inputs["name"] = nil
	} else {
		inputs["destination"] = args.Destination
		inputs["filter"] = args.Filter
		inputs["folder"] = args.Folder
		inputs["includeChildren"] = args.IncludeChildren
		inputs["name"] = args.Name
	}
	inputs["writerIdentity"] = nil
	s, err := ctx.RegisterResource("gcp:logging/folderSink:FolderSink", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FolderSink{s: s}, nil
}

// GetFolderSink gets an existing FolderSink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderSink(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FolderSinkState, opts ...pulumi.ResourceOpt) (*FolderSink, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["destination"] = state.Destination
		inputs["filter"] = state.Filter
		inputs["folder"] = state.Folder
		inputs["includeChildren"] = state.IncludeChildren
		inputs["name"] = state.Name
		inputs["writerIdentity"] = state.WriterIdentity
	}
	s, err := ctx.ReadResource("gcp:logging/folderSink:FolderSink", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FolderSink{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FolderSink) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FolderSink) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The destination of the sink (or, in other words, where logs are written to). Can be a
// Cloud Storage bucket, a PubSub topic, or a BigQuery dataset. Examples:
// The writer associated with the sink must have access to write to the above resource.
func (r *FolderSink) Destination() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destination"])
}

// The filter to apply when exporting logs. Only log entries that match the filter are exported.
// See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
// write a filter.
func (r *FolderSink) Filter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["filter"])
}

// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is
// accepted.
func (r *FolderSink) Folder() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["folder"])
}

// Whether or not to include children folders in the sink export. If true, logs
// associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
func (r *FolderSink) IncludeChildren() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["includeChildren"])
}

// The name of the logging sink.
func (r *FolderSink) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The identity associated with this sink. This identity must be granted write access to the
// configured `destination`.
func (r *FolderSink) WriterIdentity() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["writerIdentity"])
}

// Input properties used for looking up and filtering FolderSink resources.
type FolderSinkState struct {
	// The destination of the sink (or, in other words, where logs are written to). Can be a
	// Cloud Storage bucket, a PubSub topic, or a BigQuery dataset. Examples:
	// The writer associated with the sink must have access to write to the above resource.
	Destination interface{}
	// The filter to apply when exporting logs. Only log entries that match the filter are exported.
	// See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
	// write a filter.
	Filter interface{}
	// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is
	// accepted.
	Folder interface{}
	// Whether or not to include children folders in the sink export. If true, logs
	// associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
	IncludeChildren interface{}
	// The name of the logging sink.
	Name interface{}
	// The identity associated with this sink. This identity must be granted write access to the
	// configured `destination`.
	WriterIdentity interface{}
}

// The set of arguments for constructing a FolderSink resource.
type FolderSinkArgs struct {
	// The destination of the sink (or, in other words, where logs are written to). Can be a
	// Cloud Storage bucket, a PubSub topic, or a BigQuery dataset. Examples:
	// The writer associated with the sink must have access to write to the above resource.
	Destination interface{}
	// The filter to apply when exporting logs. Only log entries that match the filter are exported.
	// See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
	// write a filter.
	Filter interface{}
	// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is
	// accepted.
	Folder interface{}
	// Whether or not to include children folders in the sink export. If true, logs
	// associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
	IncludeChildren interface{}
	// The name of the logging sink.
	Name interface{}
}
