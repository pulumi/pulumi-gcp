// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Default resource settings control whether CMEK is required for new log buckets. These settings also determine the storage location for the _Default and _Required log buckets, and whether the _Default sink is enabled or disabled.
//
// To get more information about FolderSettings, see:
//
// * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/TopLevel/getSettings)
// * How-to Guides
//   - [Configure default settings for organizations and folders](https://cloud.google.com/logging/docs/default-settings)
//
// ## Example Usage
// ### Logging Folder Settings All
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/logging"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myFolder, err := organizations.NewFolder(ctx, "myFolder", &organizations.FolderArgs{
//				DisplayName: pulumi.String("folder-name"),
//				Parent:      pulumi.String("organizations/123456789"),
//			})
//			if err != nil {
//				return err
//			}
//			settings := logging.LookupFolderSettingsOutput(ctx, logging.GetFolderSettingsOutputArgs{
//				Folder: myFolder.FolderId,
//			}, nil)
//			iam, err := kms.NewCryptoKeyIAMMember(ctx, "iam", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String("kms-key"),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Member: settings.ApplyT(func(settings logging.GetFolderSettingsResult) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", settings.KmsServiceAccountId), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logging.NewFolderSettings(ctx, "example", &logging.FolderSettingsArgs{
//				DisableDefaultSink: pulumi.Bool(true),
//				Folder:             myFolder.FolderId,
//				KmsKeyName:         pulumi.String("kms-key"),
//				StorageLocation:    pulumi.String("us-central1"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				iam,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FolderSettings can be imported using any of these accepted formats:
//
//   - `folders/{{folder}}/settings`
//
//   - `{{folder}}`
//
//     When using the `pulumi import` command, FolderSettings can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:logging/folderSettings:FolderSettings default folders/{{folder}}/settings
// ```
//
// ```sh
// $ pulumi import gcp:logging/folderSettings:FolderSettings default {{folder}}
// ```
type FolderSettings struct {
	pulumi.CustomResourceState

	// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
	DisableDefaultSink pulumi.BoolOutput `pulumi:"disableDefaultSink"`
	// The folder for which to retrieve settings.
	//
	// ***
	Folder pulumi.StringOutput `pulumi:"folder"`
	// The resource name for the configured Cloud KMS key.
	KmsKeyName pulumi.StringOutput `pulumi:"kmsKeyName"`
	// The service account that will be used by the Log Router to access your Cloud KMS key.
	KmsServiceAccountId pulumi.StringOutput `pulumi:"kmsServiceAccountId"`
	// The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
	LoggingServiceAccountId pulumi.StringOutput `pulumi:"loggingServiceAccountId"`
	// The resource name of the settings.
	Name pulumi.StringOutput `pulumi:"name"`
	// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
	StorageLocation pulumi.StringOutput `pulumi:"storageLocation"`
}

// NewFolderSettings registers a new resource with the given unique name, arguments, and options.
func NewFolderSettings(ctx *pulumi.Context,
	name string, args *FolderSettingsArgs, opts ...pulumi.ResourceOption) (*FolderSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FolderSettings
	err := ctx.RegisterResource("gcp:logging/folderSettings:FolderSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderSettings gets an existing FolderSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderSettingsState, opts ...pulumi.ResourceOption) (*FolderSettings, error) {
	var resource FolderSettings
	err := ctx.ReadResource("gcp:logging/folderSettings:FolderSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderSettings resources.
type folderSettingsState struct {
	// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
	DisableDefaultSink *bool `pulumi:"disableDefaultSink"`
	// The folder for which to retrieve settings.
	//
	// ***
	Folder *string `pulumi:"folder"`
	// The resource name for the configured Cloud KMS key.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// The service account that will be used by the Log Router to access your Cloud KMS key.
	KmsServiceAccountId *string `pulumi:"kmsServiceAccountId"`
	// The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
	LoggingServiceAccountId *string `pulumi:"loggingServiceAccountId"`
	// The resource name of the settings.
	Name *string `pulumi:"name"`
	// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
	StorageLocation *string `pulumi:"storageLocation"`
}

type FolderSettingsState struct {
	// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
	DisableDefaultSink pulumi.BoolPtrInput
	// The folder for which to retrieve settings.
	//
	// ***
	Folder pulumi.StringPtrInput
	// The resource name for the configured Cloud KMS key.
	KmsKeyName pulumi.StringPtrInput
	// The service account that will be used by the Log Router to access your Cloud KMS key.
	KmsServiceAccountId pulumi.StringPtrInput
	// The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
	LoggingServiceAccountId pulumi.StringPtrInput
	// The resource name of the settings.
	Name pulumi.StringPtrInput
	// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
	StorageLocation pulumi.StringPtrInput
}

func (FolderSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderSettingsState)(nil)).Elem()
}

type folderSettingsArgs struct {
	// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
	DisableDefaultSink *bool `pulumi:"disableDefaultSink"`
	// The folder for which to retrieve settings.
	//
	// ***
	Folder string `pulumi:"folder"`
	// The resource name for the configured Cloud KMS key.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
	StorageLocation *string `pulumi:"storageLocation"`
}

// The set of arguments for constructing a FolderSettings resource.
type FolderSettingsArgs struct {
	// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
	DisableDefaultSink pulumi.BoolPtrInput
	// The folder for which to retrieve settings.
	//
	// ***
	Folder pulumi.StringInput
	// The resource name for the configured Cloud KMS key.
	KmsKeyName pulumi.StringPtrInput
	// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
	StorageLocation pulumi.StringPtrInput
}

func (FolderSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderSettingsArgs)(nil)).Elem()
}

type FolderSettingsInput interface {
	pulumi.Input

	ToFolderSettingsOutput() FolderSettingsOutput
	ToFolderSettingsOutputWithContext(ctx context.Context) FolderSettingsOutput
}

func (*FolderSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderSettings)(nil)).Elem()
}

func (i *FolderSettings) ToFolderSettingsOutput() FolderSettingsOutput {
	return i.ToFolderSettingsOutputWithContext(context.Background())
}

func (i *FolderSettings) ToFolderSettingsOutputWithContext(ctx context.Context) FolderSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSettingsOutput)
}

// FolderSettingsArrayInput is an input type that accepts FolderSettingsArray and FolderSettingsArrayOutput values.
// You can construct a concrete instance of `FolderSettingsArrayInput` via:
//
//	FolderSettingsArray{ FolderSettingsArgs{...} }
type FolderSettingsArrayInput interface {
	pulumi.Input

	ToFolderSettingsArrayOutput() FolderSettingsArrayOutput
	ToFolderSettingsArrayOutputWithContext(context.Context) FolderSettingsArrayOutput
}

type FolderSettingsArray []FolderSettingsInput

func (FolderSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FolderSettings)(nil)).Elem()
}

func (i FolderSettingsArray) ToFolderSettingsArrayOutput() FolderSettingsArrayOutput {
	return i.ToFolderSettingsArrayOutputWithContext(context.Background())
}

func (i FolderSettingsArray) ToFolderSettingsArrayOutputWithContext(ctx context.Context) FolderSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSettingsArrayOutput)
}

// FolderSettingsMapInput is an input type that accepts FolderSettingsMap and FolderSettingsMapOutput values.
// You can construct a concrete instance of `FolderSettingsMapInput` via:
//
//	FolderSettingsMap{ "key": FolderSettingsArgs{...} }
type FolderSettingsMapInput interface {
	pulumi.Input

	ToFolderSettingsMapOutput() FolderSettingsMapOutput
	ToFolderSettingsMapOutputWithContext(context.Context) FolderSettingsMapOutput
}

type FolderSettingsMap map[string]FolderSettingsInput

func (FolderSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FolderSettings)(nil)).Elem()
}

func (i FolderSettingsMap) ToFolderSettingsMapOutput() FolderSettingsMapOutput {
	return i.ToFolderSettingsMapOutputWithContext(context.Background())
}

func (i FolderSettingsMap) ToFolderSettingsMapOutputWithContext(ctx context.Context) FolderSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSettingsMapOutput)
}

type FolderSettingsOutput struct{ *pulumi.OutputState }

func (FolderSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderSettings)(nil)).Elem()
}

func (o FolderSettingsOutput) ToFolderSettingsOutput() FolderSettingsOutput {
	return o
}

func (o FolderSettingsOutput) ToFolderSettingsOutputWithContext(ctx context.Context) FolderSettingsOutput {
	return o
}

// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
func (o FolderSettingsOutput) DisableDefaultSink() pulumi.BoolOutput {
	return o.ApplyT(func(v *FolderSettings) pulumi.BoolOutput { return v.DisableDefaultSink }).(pulumi.BoolOutput)
}

// The folder for which to retrieve settings.
//
// ***
func (o FolderSettingsOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderSettings) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// The resource name for the configured Cloud KMS key.
func (o FolderSettingsOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderSettings) pulumi.StringOutput { return v.KmsKeyName }).(pulumi.StringOutput)
}

// The service account that will be used by the Log Router to access your Cloud KMS key.
func (o FolderSettingsOutput) KmsServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderSettings) pulumi.StringOutput { return v.KmsServiceAccountId }).(pulumi.StringOutput)
}

// The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
func (o FolderSettingsOutput) LoggingServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderSettings) pulumi.StringOutput { return v.LoggingServiceAccountId }).(pulumi.StringOutput)
}

// The resource name of the settings.
func (o FolderSettingsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderSettings) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
func (o FolderSettingsOutput) StorageLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderSettings) pulumi.StringOutput { return v.StorageLocation }).(pulumi.StringOutput)
}

type FolderSettingsArrayOutput struct{ *pulumi.OutputState }

func (FolderSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FolderSettings)(nil)).Elem()
}

func (o FolderSettingsArrayOutput) ToFolderSettingsArrayOutput() FolderSettingsArrayOutput {
	return o
}

func (o FolderSettingsArrayOutput) ToFolderSettingsArrayOutputWithContext(ctx context.Context) FolderSettingsArrayOutput {
	return o
}

func (o FolderSettingsArrayOutput) Index(i pulumi.IntInput) FolderSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FolderSettings {
		return vs[0].([]*FolderSettings)[vs[1].(int)]
	}).(FolderSettingsOutput)
}

type FolderSettingsMapOutput struct{ *pulumi.OutputState }

func (FolderSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FolderSettings)(nil)).Elem()
}

func (o FolderSettingsMapOutput) ToFolderSettingsMapOutput() FolderSettingsMapOutput {
	return o
}

func (o FolderSettingsMapOutput) ToFolderSettingsMapOutputWithContext(ctx context.Context) FolderSettingsMapOutput {
	return o
}

func (o FolderSettingsMapOutput) MapIndex(k pulumi.StringInput) FolderSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FolderSettings {
		return vs[0].(map[string]*FolderSettings)[vs[1].(string)]
	}).(FolderSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderSettingsInput)(nil)).Elem(), &FolderSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderSettingsArrayInput)(nil)).Elem(), FolderSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderSettingsMapInput)(nil)).Elem(), FolderSettingsMap{})
	pulumi.RegisterOutputType(FolderSettingsOutput{})
	pulumi.RegisterOutputType(FolderSettingsArrayOutput{})
	pulumi.RegisterOutputType(FolderSettingsMapOutput{})
}
