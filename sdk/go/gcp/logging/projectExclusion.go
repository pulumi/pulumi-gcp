// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a project-level logging exclusion. For more information see
// [the official documentation](https://cloud.google.com/logging/docs/) and
// [Excluding Logs](https://cloud.google.com/logging/docs/exclusions).
// 
// Note that you must have the "Logs Configuration Writer" IAM role (`roles/logging.configWriter`)
// granted to the credentials used with Terraform.
type ProjectExclusion struct {
	s *pulumi.ResourceState
}

// NewProjectExclusion registers a new resource with the given unique name, arguments, and options.
func NewProjectExclusion(ctx *pulumi.Context,
	name string, args *ProjectExclusionArgs, opts ...pulumi.ResourceOpt) (*ProjectExclusion, error) {
	if args == nil || args.Filter == nil {
		return nil, errors.New("missing required argument 'Filter'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["disabled"] = nil
		inputs["filter"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["disabled"] = args.Disabled
		inputs["filter"] = args.Filter
		inputs["name"] = args.Name
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("gcp:logging/projectExclusion:ProjectExclusion", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectExclusion{s: s}, nil
}

// GetProjectExclusion gets an existing ProjectExclusion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectExclusion(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectExclusionState, opts ...pulumi.ResourceOpt) (*ProjectExclusion, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["disabled"] = state.Disabled
		inputs["filter"] = state.Filter
		inputs["name"] = state.Name
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:logging/projectExclusion:ProjectExclusion", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectExclusion{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectExclusion) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectExclusion) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A human-readable description.
func (r *ProjectExclusion) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Whether this exclusion rule should be disabled or not. This defaults to
// false.
func (r *ProjectExclusion) Disabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disabled"])
}

// The filter to apply when excluding logs. Only log entries that match the filter are excluded.
// See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced-filters) for information on how to
// write a filter.
func (r *ProjectExclusion) Filter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["filter"])
}

// The name of the logging exclusion.
func (r *ProjectExclusion) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The project to create the exclusion in. If omitted, the project associated with the provider is
// used.
func (r *ProjectExclusion) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering ProjectExclusion resources.
type ProjectExclusionState struct {
	// A human-readable description.
	Description interface{}
	// Whether this exclusion rule should be disabled or not. This defaults to
	// false.
	Disabled interface{}
	// The filter to apply when excluding logs. Only log entries that match the filter are excluded.
	// See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced-filters) for information on how to
	// write a filter.
	Filter interface{}
	// The name of the logging exclusion.
	Name interface{}
	// The project to create the exclusion in. If omitted, the project associated with the provider is
	// used.
	Project interface{}
}

// The set of arguments for constructing a ProjectExclusion resource.
type ProjectExclusionArgs struct {
	// A human-readable description.
	Description interface{}
	// Whether this exclusion rule should be disabled or not. This defaults to
	// false.
	Disabled interface{}
	// The filter to apply when excluding logs. Only log entries that match the filter are excluded.
	// See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced-filters) for information on how to
	// write a filter.
	Filter interface{}
	// The name of the logging exclusion.
	Name interface{}
	// The project to create the exclusion in. If omitted, the project associated with the provider is
	// used.
	Project interface{}
}
