// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a BigQuery linked dataset
//
// To get more information about LinkedDataset, see:
//
// * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/locations.buckets.links)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/logging/docs/apis)
//
// ## Example Usage
// ### Logging Linked Dataset Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			loggingLinkedDatasetProjectBucketConfig, err := logging.NewProjectBucketConfig(ctx, "loggingLinkedDatasetProjectBucketConfig", &logging.ProjectBucketConfigArgs{
//				Location:        pulumi.String("global"),
//				Project:         pulumi.String("my-project-name"),
//				EnableAnalytics: pulumi.Bool(true),
//				BucketId:        pulumi.String("my-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logging.NewLinkedDataset(ctx, "loggingLinkedDatasetLinkedDataset", &logging.LinkedDatasetArgs{
//				LinkId:      pulumi.String("mylink"),
//				Bucket:      loggingLinkedDatasetProjectBucketConfig.ID(),
//				Description: pulumi.String("Linked dataset test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Logging Linked Dataset All Params
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/logging"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := logging.NewProjectBucketConfig(ctx, "loggingLinkedDatasetProjectBucketConfig", &logging.ProjectBucketConfigArgs{
//				BucketId:        pulumi.String("my-bucket"),
//				EnableAnalytics: pulumi.Bool(true),
//				Location:        pulumi.String("global"),
//				Project:         pulumi.String("my-project-name"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logging.NewLinkedDataset(ctx, "loggingLinkedDatasetLinkedDataset", &logging.LinkedDatasetArgs{
//				Bucket:      pulumi.String("my-bucket"),
//				Description: pulumi.String("Linked dataset test"),
//				LinkId:      pulumi.String("mylink"),
//				Location:    pulumi.String("global"),
//				Parent:      pulumi.String("projects/my-project-name"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				pulumi.Resource("google_logging_project_bucket_config.logging_linked_dataset"),
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # LinkedDataset can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:logging/linkedDataset:LinkedDataset default {{parent}}/locations/{{location}}/buckets/{{bucket}}/links/{{link_id}}
//
// ```
type LinkedDataset struct {
	pulumi.CustomResourceState

	// The information of a BigQuery Dataset. When a link is created, a BigQuery dataset is created along
	// with it, in the same project as the LogBucket it's linked to. This dataset will also have BigQuery
	// Views corresponding to the LogViews in the bucket.
	// Structure is documented below.
	BigqueryDatasets LinkedDatasetBigqueryDatasetArrayOutput `pulumi:"bigqueryDatasets"`
	// The bucket to which the linked dataset is attached.
	//
	// ***
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Output only. The creation timestamp of the link. A timestamp in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
	// and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes this link. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Output only. The linked dataset lifecycle state.
	LifecycleState pulumi.StringOutput `pulumi:"lifecycleState"`
	// The id of the linked dataset.
	LinkId pulumi.StringOutput `pulumi:"linkId"`
	// The location of the linked dataset.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the linked dataset. The name can have up to 100 characters. A valid link id
	// (at the end of the link name) must only have alphanumeric characters and underscores within it.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent of the linked dataset.
	Parent pulumi.StringOutput `pulumi:"parent"`
}

// NewLinkedDataset registers a new resource with the given unique name, arguments, and options.
func NewLinkedDataset(ctx *pulumi.Context,
	name string, args *LinkedDatasetArgs, opts ...pulumi.ResourceOption) (*LinkedDataset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.LinkId == nil {
		return nil, errors.New("invalid value for required argument 'LinkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedDataset
	err := ctx.RegisterResource("gcp:logging/linkedDataset:LinkedDataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedDataset gets an existing LinkedDataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedDatasetState, opts ...pulumi.ResourceOption) (*LinkedDataset, error) {
	var resource LinkedDataset
	err := ctx.ReadResource("gcp:logging/linkedDataset:LinkedDataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedDataset resources.
type linkedDatasetState struct {
	// The information of a BigQuery Dataset. When a link is created, a BigQuery dataset is created along
	// with it, in the same project as the LogBucket it's linked to. This dataset will also have BigQuery
	// Views corresponding to the LogViews in the bucket.
	// Structure is documented below.
	BigqueryDatasets []LinkedDatasetBigqueryDataset `pulumi:"bigqueryDatasets"`
	// The bucket to which the linked dataset is attached.
	//
	// ***
	Bucket *string `pulumi:"bucket"`
	// Output only. The creation timestamp of the link. A timestamp in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
	// and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// Describes this link. The maximum length of the description is 8000 characters.
	Description *string `pulumi:"description"`
	// Output only. The linked dataset lifecycle state.
	LifecycleState *string `pulumi:"lifecycleState"`
	// The id of the linked dataset.
	LinkId *string `pulumi:"linkId"`
	// The location of the linked dataset.
	Location *string `pulumi:"location"`
	// The resource name of the linked dataset. The name can have up to 100 characters. A valid link id
	// (at the end of the link name) must only have alphanumeric characters and underscores within it.
	Name *string `pulumi:"name"`
	// The parent of the linked dataset.
	Parent *string `pulumi:"parent"`
}

type LinkedDatasetState struct {
	// The information of a BigQuery Dataset. When a link is created, a BigQuery dataset is created along
	// with it, in the same project as the LogBucket it's linked to. This dataset will also have BigQuery
	// Views corresponding to the LogViews in the bucket.
	// Structure is documented below.
	BigqueryDatasets LinkedDatasetBigqueryDatasetArrayInput
	// The bucket to which the linked dataset is attached.
	//
	// ***
	Bucket pulumi.StringPtrInput
	// Output only. The creation timestamp of the link. A timestamp in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
	// and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// Describes this link. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrInput
	// Output only. The linked dataset lifecycle state.
	LifecycleState pulumi.StringPtrInput
	// The id of the linked dataset.
	LinkId pulumi.StringPtrInput
	// The location of the linked dataset.
	Location pulumi.StringPtrInput
	// The resource name of the linked dataset. The name can have up to 100 characters. A valid link id
	// (at the end of the link name) must only have alphanumeric characters and underscores within it.
	Name pulumi.StringPtrInput
	// The parent of the linked dataset.
	Parent pulumi.StringPtrInput
}

func (LinkedDatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedDatasetState)(nil)).Elem()
}

type linkedDatasetArgs struct {
	// The information of a BigQuery Dataset. When a link is created, a BigQuery dataset is created along
	// with it, in the same project as the LogBucket it's linked to. This dataset will also have BigQuery
	// Views corresponding to the LogViews in the bucket.
	// Structure is documented below.
	BigqueryDatasets []LinkedDatasetBigqueryDataset `pulumi:"bigqueryDatasets"`
	// The bucket to which the linked dataset is attached.
	//
	// ***
	Bucket string `pulumi:"bucket"`
	// Describes this link. The maximum length of the description is 8000 characters.
	Description *string `pulumi:"description"`
	// The id of the linked dataset.
	LinkId string `pulumi:"linkId"`
	// The location of the linked dataset.
	Location *string `pulumi:"location"`
	// The parent of the linked dataset.
	Parent *string `pulumi:"parent"`
}

// The set of arguments for constructing a LinkedDataset resource.
type LinkedDatasetArgs struct {
	// The information of a BigQuery Dataset. When a link is created, a BigQuery dataset is created along
	// with it, in the same project as the LogBucket it's linked to. This dataset will also have BigQuery
	// Views corresponding to the LogViews in the bucket.
	// Structure is documented below.
	BigqueryDatasets LinkedDatasetBigqueryDatasetArrayInput
	// The bucket to which the linked dataset is attached.
	//
	// ***
	Bucket pulumi.StringInput
	// Describes this link. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrInput
	// The id of the linked dataset.
	LinkId pulumi.StringInput
	// The location of the linked dataset.
	Location pulumi.StringPtrInput
	// The parent of the linked dataset.
	Parent pulumi.StringPtrInput
}

func (LinkedDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedDatasetArgs)(nil)).Elem()
}

type LinkedDatasetInput interface {
	pulumi.Input

	ToLinkedDatasetOutput() LinkedDatasetOutput
	ToLinkedDatasetOutputWithContext(ctx context.Context) LinkedDatasetOutput
}

func (*LinkedDataset) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedDataset)(nil)).Elem()
}

func (i *LinkedDataset) ToLinkedDatasetOutput() LinkedDatasetOutput {
	return i.ToLinkedDatasetOutputWithContext(context.Background())
}

func (i *LinkedDataset) ToLinkedDatasetOutputWithContext(ctx context.Context) LinkedDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedDatasetOutput)
}

// LinkedDatasetArrayInput is an input type that accepts LinkedDatasetArray and LinkedDatasetArrayOutput values.
// You can construct a concrete instance of `LinkedDatasetArrayInput` via:
//
//	LinkedDatasetArray{ LinkedDatasetArgs{...} }
type LinkedDatasetArrayInput interface {
	pulumi.Input

	ToLinkedDatasetArrayOutput() LinkedDatasetArrayOutput
	ToLinkedDatasetArrayOutputWithContext(context.Context) LinkedDatasetArrayOutput
}

type LinkedDatasetArray []LinkedDatasetInput

func (LinkedDatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedDataset)(nil)).Elem()
}

func (i LinkedDatasetArray) ToLinkedDatasetArrayOutput() LinkedDatasetArrayOutput {
	return i.ToLinkedDatasetArrayOutputWithContext(context.Background())
}

func (i LinkedDatasetArray) ToLinkedDatasetArrayOutputWithContext(ctx context.Context) LinkedDatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedDatasetArrayOutput)
}

// LinkedDatasetMapInput is an input type that accepts LinkedDatasetMap and LinkedDatasetMapOutput values.
// You can construct a concrete instance of `LinkedDatasetMapInput` via:
//
//	LinkedDatasetMap{ "key": LinkedDatasetArgs{...} }
type LinkedDatasetMapInput interface {
	pulumi.Input

	ToLinkedDatasetMapOutput() LinkedDatasetMapOutput
	ToLinkedDatasetMapOutputWithContext(context.Context) LinkedDatasetMapOutput
}

type LinkedDatasetMap map[string]LinkedDatasetInput

func (LinkedDatasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedDataset)(nil)).Elem()
}

func (i LinkedDatasetMap) ToLinkedDatasetMapOutput() LinkedDatasetMapOutput {
	return i.ToLinkedDatasetMapOutputWithContext(context.Background())
}

func (i LinkedDatasetMap) ToLinkedDatasetMapOutputWithContext(ctx context.Context) LinkedDatasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedDatasetMapOutput)
}

type LinkedDatasetOutput struct{ *pulumi.OutputState }

func (LinkedDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedDataset)(nil)).Elem()
}

func (o LinkedDatasetOutput) ToLinkedDatasetOutput() LinkedDatasetOutput {
	return o
}

func (o LinkedDatasetOutput) ToLinkedDatasetOutputWithContext(ctx context.Context) LinkedDatasetOutput {
	return o
}

// The information of a BigQuery Dataset. When a link is created, a BigQuery dataset is created along
// with it, in the same project as the LogBucket it's linked to. This dataset will also have BigQuery
// Views corresponding to the LogViews in the bucket.
// Structure is documented below.
func (o LinkedDatasetOutput) BigqueryDatasets() LinkedDatasetBigqueryDatasetArrayOutput {
	return o.ApplyT(func(v *LinkedDataset) LinkedDatasetBigqueryDatasetArrayOutput { return v.BigqueryDatasets }).(LinkedDatasetBigqueryDatasetArrayOutput)
}

// The bucket to which the linked dataset is attached.
//
// ***
func (o LinkedDatasetOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedDataset) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Output only. The creation timestamp of the link. A timestamp in RFC3339 UTC "Zulu" format,
// with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
// and "2014-10-02T15:01:23.045123456Z".
func (o LinkedDatasetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedDataset) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Describes this link. The maximum length of the description is 8000 characters.
func (o LinkedDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedDataset) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Output only. The linked dataset lifecycle state.
func (o LinkedDatasetOutput) LifecycleState() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedDataset) pulumi.StringOutput { return v.LifecycleState }).(pulumi.StringOutput)
}

// The id of the linked dataset.
func (o LinkedDatasetOutput) LinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedDataset) pulumi.StringOutput { return v.LinkId }).(pulumi.StringOutput)
}

// The location of the linked dataset.
func (o LinkedDatasetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedDataset) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the linked dataset. The name can have up to 100 characters. A valid link id
// (at the end of the link name) must only have alphanumeric characters and underscores within it.
func (o LinkedDatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedDataset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent of the linked dataset.
func (o LinkedDatasetOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedDataset) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

type LinkedDatasetArrayOutput struct{ *pulumi.OutputState }

func (LinkedDatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedDataset)(nil)).Elem()
}

func (o LinkedDatasetArrayOutput) ToLinkedDatasetArrayOutput() LinkedDatasetArrayOutput {
	return o
}

func (o LinkedDatasetArrayOutput) ToLinkedDatasetArrayOutputWithContext(ctx context.Context) LinkedDatasetArrayOutput {
	return o
}

func (o LinkedDatasetArrayOutput) Index(i pulumi.IntInput) LinkedDatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedDataset {
		return vs[0].([]*LinkedDataset)[vs[1].(int)]
	}).(LinkedDatasetOutput)
}

type LinkedDatasetMapOutput struct{ *pulumi.OutputState }

func (LinkedDatasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedDataset)(nil)).Elem()
}

func (o LinkedDatasetMapOutput) ToLinkedDatasetMapOutput() LinkedDatasetMapOutput {
	return o
}

func (o LinkedDatasetMapOutput) ToLinkedDatasetMapOutputWithContext(ctx context.Context) LinkedDatasetMapOutput {
	return o
}

func (o LinkedDatasetMapOutput) MapIndex(k pulumi.StringInput) LinkedDatasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedDataset {
		return vs[0].(map[string]*LinkedDataset)[vs[1].(string)]
	}).(LinkedDatasetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedDatasetInput)(nil)).Elem(), &LinkedDataset{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedDatasetArrayInput)(nil)).Elem(), LinkedDatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedDatasetMapInput)(nil)).Elem(), LinkedDatasetMap{})
	pulumi.RegisterOutputType(LinkedDatasetOutput{})
	pulumi.RegisterOutputType(LinkedDatasetArrayOutput{})
	pulumi.RegisterOutputType(LinkedDatasetMapOutput{})
}
