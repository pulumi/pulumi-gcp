// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package billing

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Billing information for a project.
//
// To get more information about ProjectInfo, see:
//
// * [API documentation](https://cloud.google.com/billing/docs/reference/rest/v1/projects)
// * How-to Guides
//   - [Enable, disable, or change billing for a project](https://cloud.google.com/billing/docs/how-to/modify-project)
//
// ## Example Usage
//
// ## Import
//
// # ProjectInfo can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:billing/projectInfo:ProjectInfo default projects/{{project}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:billing/projectInfo:ProjectInfo default {{project}}
//
// ```
type ProjectInfo struct {
	pulumi.CustomResourceState

	// The ID of the billing account associated with the project, if
	// any. Set to empty string to disable billing for the project.
	// For example, `"012345-567890-ABCDEF"` or `""`.
	//
	// ***
	BillingAccount pulumi.StringOutput `pulumi:"billingAccount"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewProjectInfo registers a new resource with the given unique name, arguments, and options.
func NewProjectInfo(ctx *pulumi.Context,
	name string, args *ProjectInfoArgs, opts ...pulumi.ResourceOption) (*ProjectInfo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BillingAccount == nil {
		return nil, errors.New("invalid value for required argument 'BillingAccount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectInfo
	err := ctx.RegisterResource("gcp:billing/projectInfo:ProjectInfo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectInfo gets an existing ProjectInfo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectInfo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectInfoState, opts ...pulumi.ResourceOption) (*ProjectInfo, error) {
	var resource ProjectInfo
	err := ctx.ReadResource("gcp:billing/projectInfo:ProjectInfo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectInfo resources.
type projectInfoState struct {
	// The ID of the billing account associated with the project, if
	// any. Set to empty string to disable billing for the project.
	// For example, `"012345-567890-ABCDEF"` or `""`.
	//
	// ***
	BillingAccount *string `pulumi:"billingAccount"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type ProjectInfoState struct {
	// The ID of the billing account associated with the project, if
	// any. Set to empty string to disable billing for the project.
	// For example, `"012345-567890-ABCDEF"` or `""`.
	//
	// ***
	BillingAccount pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ProjectInfoState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectInfoState)(nil)).Elem()
}

type projectInfoArgs struct {
	// The ID of the billing account associated with the project, if
	// any. Set to empty string to disable billing for the project.
	// For example, `"012345-567890-ABCDEF"` or `""`.
	//
	// ***
	BillingAccount string `pulumi:"billingAccount"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectInfo resource.
type ProjectInfoArgs struct {
	// The ID of the billing account associated with the project, if
	// any. Set to empty string to disable billing for the project.
	// For example, `"012345-567890-ABCDEF"` or `""`.
	//
	// ***
	BillingAccount pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ProjectInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectInfoArgs)(nil)).Elem()
}

type ProjectInfoInput interface {
	pulumi.Input

	ToProjectInfoOutput() ProjectInfoOutput
	ToProjectInfoOutputWithContext(ctx context.Context) ProjectInfoOutput
}

func (*ProjectInfo) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectInfo)(nil)).Elem()
}

func (i *ProjectInfo) ToProjectInfoOutput() ProjectInfoOutput {
	return i.ToProjectInfoOutputWithContext(context.Background())
}

func (i *ProjectInfo) ToProjectInfoOutputWithContext(ctx context.Context) ProjectInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectInfoOutput)
}

// ProjectInfoArrayInput is an input type that accepts ProjectInfoArray and ProjectInfoArrayOutput values.
// You can construct a concrete instance of `ProjectInfoArrayInput` via:
//
//	ProjectInfoArray{ ProjectInfoArgs{...} }
type ProjectInfoArrayInput interface {
	pulumi.Input

	ToProjectInfoArrayOutput() ProjectInfoArrayOutput
	ToProjectInfoArrayOutputWithContext(context.Context) ProjectInfoArrayOutput
}

type ProjectInfoArray []ProjectInfoInput

func (ProjectInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectInfo)(nil)).Elem()
}

func (i ProjectInfoArray) ToProjectInfoArrayOutput() ProjectInfoArrayOutput {
	return i.ToProjectInfoArrayOutputWithContext(context.Background())
}

func (i ProjectInfoArray) ToProjectInfoArrayOutputWithContext(ctx context.Context) ProjectInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectInfoArrayOutput)
}

// ProjectInfoMapInput is an input type that accepts ProjectInfoMap and ProjectInfoMapOutput values.
// You can construct a concrete instance of `ProjectInfoMapInput` via:
//
//	ProjectInfoMap{ "key": ProjectInfoArgs{...} }
type ProjectInfoMapInput interface {
	pulumi.Input

	ToProjectInfoMapOutput() ProjectInfoMapOutput
	ToProjectInfoMapOutputWithContext(context.Context) ProjectInfoMapOutput
}

type ProjectInfoMap map[string]ProjectInfoInput

func (ProjectInfoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectInfo)(nil)).Elem()
}

func (i ProjectInfoMap) ToProjectInfoMapOutput() ProjectInfoMapOutput {
	return i.ToProjectInfoMapOutputWithContext(context.Background())
}

func (i ProjectInfoMap) ToProjectInfoMapOutputWithContext(ctx context.Context) ProjectInfoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectInfoMapOutput)
}

type ProjectInfoOutput struct{ *pulumi.OutputState }

func (ProjectInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectInfo)(nil)).Elem()
}

func (o ProjectInfoOutput) ToProjectInfoOutput() ProjectInfoOutput {
	return o
}

func (o ProjectInfoOutput) ToProjectInfoOutputWithContext(ctx context.Context) ProjectInfoOutput {
	return o
}

// The ID of the billing account associated with the project, if
// any. Set to empty string to disable billing for the project.
// For example, `"012345-567890-ABCDEF"` or `""`.
//
// ***
func (o ProjectInfoOutput) BillingAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectInfo) pulumi.StringOutput { return v.BillingAccount }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ProjectInfoOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectInfo) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ProjectInfoArrayOutput struct{ *pulumi.OutputState }

func (ProjectInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectInfo)(nil)).Elem()
}

func (o ProjectInfoArrayOutput) ToProjectInfoArrayOutput() ProjectInfoArrayOutput {
	return o
}

func (o ProjectInfoArrayOutput) ToProjectInfoArrayOutputWithContext(ctx context.Context) ProjectInfoArrayOutput {
	return o
}

func (o ProjectInfoArrayOutput) Index(i pulumi.IntInput) ProjectInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectInfo {
		return vs[0].([]*ProjectInfo)[vs[1].(int)]
	}).(ProjectInfoOutput)
}

type ProjectInfoMapOutput struct{ *pulumi.OutputState }

func (ProjectInfoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectInfo)(nil)).Elem()
}

func (o ProjectInfoMapOutput) ToProjectInfoMapOutput() ProjectInfoMapOutput {
	return o
}

func (o ProjectInfoMapOutput) ToProjectInfoMapOutputWithContext(ctx context.Context) ProjectInfoMapOutput {
	return o
}

func (o ProjectInfoMapOutput) MapIndex(k pulumi.StringInput) ProjectInfoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectInfo {
		return vs[0].(map[string]*ProjectInfo)[vs[1].(string)]
	}).(ProjectInfoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInfoInput)(nil)).Elem(), &ProjectInfo{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInfoArrayInput)(nil)).Elem(), ProjectInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInfoMapInput)(nil)).Elem(), ProjectInfoMap{})
	pulumi.RegisterOutputType(ProjectInfoOutput{})
	pulumi.RegisterOutputType(ProjectInfoArrayOutput{})
	pulumi.RegisterOutputType(ProjectInfoMapOutput{})
}
