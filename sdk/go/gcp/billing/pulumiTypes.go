// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package billing

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AccountIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// AccountIamBindingConditionInput is an input type that accepts AccountIamBindingConditionArgs and AccountIamBindingConditionOutput values.
// You can construct a concrete instance of `AccountIamBindingConditionInput` via:
//
// 		 AccountIamBindingConditionArgs{...}
//
type AccountIamBindingConditionInput interface {
	pulumi.Input

	ToAccountIamBindingConditionOutput() AccountIamBindingConditionOutput
	ToAccountIamBindingConditionOutputWithContext(context.Context) AccountIamBindingConditionOutput
}

type AccountIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (AccountIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIamBindingCondition)(nil)).Elem()
}

func (i AccountIamBindingConditionArgs) ToAccountIamBindingConditionOutput() AccountIamBindingConditionOutput {
	return i.ToAccountIamBindingConditionOutputWithContext(context.Background())
}

func (i AccountIamBindingConditionArgs) ToAccountIamBindingConditionOutputWithContext(ctx context.Context) AccountIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamBindingConditionOutput)
}

func (i AccountIamBindingConditionArgs) ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput {
	return i.ToAccountIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i AccountIamBindingConditionArgs) ToAccountIamBindingConditionPtrOutputWithContext(ctx context.Context) AccountIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamBindingConditionOutput).ToAccountIamBindingConditionPtrOutputWithContext(ctx)
}

// AccountIamBindingConditionPtrInput is an input type that accepts AccountIamBindingConditionArgs, AccountIamBindingConditionPtr and AccountIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `AccountIamBindingConditionPtrInput` via:
//
// 		 AccountIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type AccountIamBindingConditionPtrInput interface {
	pulumi.Input

	ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput
	ToAccountIamBindingConditionPtrOutputWithContext(context.Context) AccountIamBindingConditionPtrOutput
}

type accountIamBindingConditionPtrType AccountIamBindingConditionArgs

func AccountIamBindingConditionPtr(v *AccountIamBindingConditionArgs) AccountIamBindingConditionPtrInput {
	return (*accountIamBindingConditionPtrType)(v)
}

func (*accountIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIamBindingCondition)(nil)).Elem()
}

func (i *accountIamBindingConditionPtrType) ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput {
	return i.ToAccountIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *accountIamBindingConditionPtrType) ToAccountIamBindingConditionPtrOutputWithContext(ctx context.Context) AccountIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamBindingConditionPtrOutput)
}

type AccountIamBindingConditionOutput struct{ *pulumi.OutputState }

func (AccountIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIamBindingCondition)(nil)).Elem()
}

func (o AccountIamBindingConditionOutput) ToAccountIamBindingConditionOutput() AccountIamBindingConditionOutput {
	return o
}

func (o AccountIamBindingConditionOutput) ToAccountIamBindingConditionOutputWithContext(ctx context.Context) AccountIamBindingConditionOutput {
	return o
}

func (o AccountIamBindingConditionOutput) ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput {
	return o.ToAccountIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o AccountIamBindingConditionOutput) ToAccountIamBindingConditionPtrOutputWithContext(ctx context.Context) AccountIamBindingConditionPtrOutput {
	return o.ApplyT(func(v AccountIamBindingCondition) *AccountIamBindingCondition {
		return &v
	}).(AccountIamBindingConditionPtrOutput)
}
func (o AccountIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AccountIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o AccountIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AccountIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (AccountIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIamBindingCondition)(nil)).Elem()
}

func (o AccountIamBindingConditionPtrOutput) ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput {
	return o
}

func (o AccountIamBindingConditionPtrOutput) ToAccountIamBindingConditionPtrOutputWithContext(ctx context.Context) AccountIamBindingConditionPtrOutput {
	return o
}

func (o AccountIamBindingConditionPtrOutput) Elem() AccountIamBindingConditionOutput {
	return o.ApplyT(func(v *AccountIamBindingCondition) AccountIamBindingCondition { return *v }).(AccountIamBindingConditionOutput)
}

func (o AccountIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o AccountIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o AccountIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type AccountIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// AccountIamMemberConditionInput is an input type that accepts AccountIamMemberConditionArgs and AccountIamMemberConditionOutput values.
// You can construct a concrete instance of `AccountIamMemberConditionInput` via:
//
// 		 AccountIamMemberConditionArgs{...}
//
type AccountIamMemberConditionInput interface {
	pulumi.Input

	ToAccountIamMemberConditionOutput() AccountIamMemberConditionOutput
	ToAccountIamMemberConditionOutputWithContext(context.Context) AccountIamMemberConditionOutput
}

type AccountIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (AccountIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIamMemberCondition)(nil)).Elem()
}

func (i AccountIamMemberConditionArgs) ToAccountIamMemberConditionOutput() AccountIamMemberConditionOutput {
	return i.ToAccountIamMemberConditionOutputWithContext(context.Background())
}

func (i AccountIamMemberConditionArgs) ToAccountIamMemberConditionOutputWithContext(ctx context.Context) AccountIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamMemberConditionOutput)
}

func (i AccountIamMemberConditionArgs) ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput {
	return i.ToAccountIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i AccountIamMemberConditionArgs) ToAccountIamMemberConditionPtrOutputWithContext(ctx context.Context) AccountIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamMemberConditionOutput).ToAccountIamMemberConditionPtrOutputWithContext(ctx)
}

// AccountIamMemberConditionPtrInput is an input type that accepts AccountIamMemberConditionArgs, AccountIamMemberConditionPtr and AccountIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `AccountIamMemberConditionPtrInput` via:
//
// 		 AccountIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type AccountIamMemberConditionPtrInput interface {
	pulumi.Input

	ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput
	ToAccountIamMemberConditionPtrOutputWithContext(context.Context) AccountIamMemberConditionPtrOutput
}

type accountIamMemberConditionPtrType AccountIamMemberConditionArgs

func AccountIamMemberConditionPtr(v *AccountIamMemberConditionArgs) AccountIamMemberConditionPtrInput {
	return (*accountIamMemberConditionPtrType)(v)
}

func (*accountIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIamMemberCondition)(nil)).Elem()
}

func (i *accountIamMemberConditionPtrType) ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput {
	return i.ToAccountIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *accountIamMemberConditionPtrType) ToAccountIamMemberConditionPtrOutputWithContext(ctx context.Context) AccountIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamMemberConditionPtrOutput)
}

type AccountIamMemberConditionOutput struct{ *pulumi.OutputState }

func (AccountIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIamMemberCondition)(nil)).Elem()
}

func (o AccountIamMemberConditionOutput) ToAccountIamMemberConditionOutput() AccountIamMemberConditionOutput {
	return o
}

func (o AccountIamMemberConditionOutput) ToAccountIamMemberConditionOutputWithContext(ctx context.Context) AccountIamMemberConditionOutput {
	return o
}

func (o AccountIamMemberConditionOutput) ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput {
	return o.ToAccountIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o AccountIamMemberConditionOutput) ToAccountIamMemberConditionPtrOutputWithContext(ctx context.Context) AccountIamMemberConditionPtrOutput {
	return o.ApplyT(func(v AccountIamMemberCondition) *AccountIamMemberCondition {
		return &v
	}).(AccountIamMemberConditionPtrOutput)
}
func (o AccountIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AccountIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o AccountIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AccountIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (AccountIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIamMemberCondition)(nil)).Elem()
}

func (o AccountIamMemberConditionPtrOutput) ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput {
	return o
}

func (o AccountIamMemberConditionPtrOutput) ToAccountIamMemberConditionPtrOutputWithContext(ctx context.Context) AccountIamMemberConditionPtrOutput {
	return o
}

func (o AccountIamMemberConditionPtrOutput) Elem() AccountIamMemberConditionOutput {
	return o.ApplyT(func(v *AccountIamMemberCondition) AccountIamMemberCondition { return *v }).(AccountIamMemberConditionOutput)
}

func (o AccountIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o AccountIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o AccountIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type BudgetAllUpdatesRule struct {
	// The name of the Cloud Pub/Sub topic where budget related
	// messages will be published, in the form
	// projects/{project_id}/topics/{topic_id}. Updates are sent
	// at regular intervals to the topic.
	PubsubTopic string `pulumi:"pubsubTopic"`
	// The schema version of the notification. Only "1.0" is
	// accepted. It represents the JSON schema as defined in
	// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
	SchemaVersion *string `pulumi:"schemaVersion"`
}

// BudgetAllUpdatesRuleInput is an input type that accepts BudgetAllUpdatesRuleArgs and BudgetAllUpdatesRuleOutput values.
// You can construct a concrete instance of `BudgetAllUpdatesRuleInput` via:
//
// 		 BudgetAllUpdatesRuleArgs{...}
//
type BudgetAllUpdatesRuleInput interface {
	pulumi.Input

	ToBudgetAllUpdatesRuleOutput() BudgetAllUpdatesRuleOutput
	ToBudgetAllUpdatesRuleOutputWithContext(context.Context) BudgetAllUpdatesRuleOutput
}

type BudgetAllUpdatesRuleArgs struct {
	// The name of the Cloud Pub/Sub topic where budget related
	// messages will be published, in the form
	// projects/{project_id}/topics/{topic_id}. Updates are sent
	// at regular intervals to the topic.
	PubsubTopic pulumi.StringInput `pulumi:"pubsubTopic"`
	// The schema version of the notification. Only "1.0" is
	// accepted. It represents the JSON schema as defined in
	// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
	SchemaVersion pulumi.StringPtrInput `pulumi:"schemaVersion"`
}

func (BudgetAllUpdatesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAllUpdatesRule)(nil)).Elem()
}

func (i BudgetAllUpdatesRuleArgs) ToBudgetAllUpdatesRuleOutput() BudgetAllUpdatesRuleOutput {
	return i.ToBudgetAllUpdatesRuleOutputWithContext(context.Background())
}

func (i BudgetAllUpdatesRuleArgs) ToBudgetAllUpdatesRuleOutputWithContext(ctx context.Context) BudgetAllUpdatesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAllUpdatesRuleOutput)
}

func (i BudgetAllUpdatesRuleArgs) ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput {
	return i.ToBudgetAllUpdatesRulePtrOutputWithContext(context.Background())
}

func (i BudgetAllUpdatesRuleArgs) ToBudgetAllUpdatesRulePtrOutputWithContext(ctx context.Context) BudgetAllUpdatesRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAllUpdatesRuleOutput).ToBudgetAllUpdatesRulePtrOutputWithContext(ctx)
}

// BudgetAllUpdatesRulePtrInput is an input type that accepts BudgetAllUpdatesRuleArgs, BudgetAllUpdatesRulePtr and BudgetAllUpdatesRulePtrOutput values.
// You can construct a concrete instance of `BudgetAllUpdatesRulePtrInput` via:
//
// 		 BudgetAllUpdatesRuleArgs{...}
//
//  or:
//
// 		 nil
//
type BudgetAllUpdatesRulePtrInput interface {
	pulumi.Input

	ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput
	ToBudgetAllUpdatesRulePtrOutputWithContext(context.Context) BudgetAllUpdatesRulePtrOutput
}

type budgetAllUpdatesRulePtrType BudgetAllUpdatesRuleArgs

func BudgetAllUpdatesRulePtr(v *BudgetAllUpdatesRuleArgs) BudgetAllUpdatesRulePtrInput {
	return (*budgetAllUpdatesRulePtrType)(v)
}

func (*budgetAllUpdatesRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAllUpdatesRule)(nil)).Elem()
}

func (i *budgetAllUpdatesRulePtrType) ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput {
	return i.ToBudgetAllUpdatesRulePtrOutputWithContext(context.Background())
}

func (i *budgetAllUpdatesRulePtrType) ToBudgetAllUpdatesRulePtrOutputWithContext(ctx context.Context) BudgetAllUpdatesRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAllUpdatesRulePtrOutput)
}

type BudgetAllUpdatesRuleOutput struct{ *pulumi.OutputState }

func (BudgetAllUpdatesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAllUpdatesRule)(nil)).Elem()
}

func (o BudgetAllUpdatesRuleOutput) ToBudgetAllUpdatesRuleOutput() BudgetAllUpdatesRuleOutput {
	return o
}

func (o BudgetAllUpdatesRuleOutput) ToBudgetAllUpdatesRuleOutputWithContext(ctx context.Context) BudgetAllUpdatesRuleOutput {
	return o
}

func (o BudgetAllUpdatesRuleOutput) ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput {
	return o.ToBudgetAllUpdatesRulePtrOutputWithContext(context.Background())
}

func (o BudgetAllUpdatesRuleOutput) ToBudgetAllUpdatesRulePtrOutputWithContext(ctx context.Context) BudgetAllUpdatesRulePtrOutput {
	return o.ApplyT(func(v BudgetAllUpdatesRule) *BudgetAllUpdatesRule {
		return &v
	}).(BudgetAllUpdatesRulePtrOutput)
}

// The name of the Cloud Pub/Sub topic where budget related
// messages will be published, in the form
// projects/{project_id}/topics/{topic_id}. Updates are sent
// at regular intervals to the topic.
func (o BudgetAllUpdatesRuleOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetAllUpdatesRule) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

// The schema version of the notification. Only "1.0" is
// accepted. It represents the JSON schema as defined in
// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
func (o BudgetAllUpdatesRuleOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetAllUpdatesRule) *string { return v.SchemaVersion }).(pulumi.StringPtrOutput)
}

type BudgetAllUpdatesRulePtrOutput struct{ *pulumi.OutputState }

func (BudgetAllUpdatesRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAllUpdatesRule)(nil)).Elem()
}

func (o BudgetAllUpdatesRulePtrOutput) ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput {
	return o
}

func (o BudgetAllUpdatesRulePtrOutput) ToBudgetAllUpdatesRulePtrOutputWithContext(ctx context.Context) BudgetAllUpdatesRulePtrOutput {
	return o
}

func (o BudgetAllUpdatesRulePtrOutput) Elem() BudgetAllUpdatesRuleOutput {
	return o.ApplyT(func(v *BudgetAllUpdatesRule) BudgetAllUpdatesRule { return *v }).(BudgetAllUpdatesRuleOutput)
}

// The name of the Cloud Pub/Sub topic where budget related
// messages will be published, in the form
// projects/{project_id}/topics/{topic_id}. Updates are sent
// at regular intervals to the topic.
func (o BudgetAllUpdatesRulePtrOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAllUpdatesRule) *string {
		if v == nil {
			return nil
		}
		return &v.PubsubTopic
	}).(pulumi.StringPtrOutput)
}

// The schema version of the notification. Only "1.0" is
// accepted. It represents the JSON schema as defined in
// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
func (o BudgetAllUpdatesRulePtrOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAllUpdatesRule) *string {
		if v == nil {
			return nil
		}
		return v.SchemaVersion
	}).(pulumi.StringPtrOutput)
}

type BudgetAmount struct {
	// A specified amount to use as the budget. currencyCode is
	// optional. If specified, it must match the currency of the
	// billing account. The currencyCode is provided on output.  Structure is documented below.
	SpecifiedAmount BudgetAmountSpecifiedAmount `pulumi:"specifiedAmount"`
}

// BudgetAmountInput is an input type that accepts BudgetAmountArgs and BudgetAmountOutput values.
// You can construct a concrete instance of `BudgetAmountInput` via:
//
// 		 BudgetAmountArgs{...}
//
type BudgetAmountInput interface {
	pulumi.Input

	ToBudgetAmountOutput() BudgetAmountOutput
	ToBudgetAmountOutputWithContext(context.Context) BudgetAmountOutput
}

type BudgetAmountArgs struct {
	// A specified amount to use as the budget. currencyCode is
	// optional. If specified, it must match the currency of the
	// billing account. The currencyCode is provided on output.  Structure is documented below.
	SpecifiedAmount BudgetAmountSpecifiedAmountInput `pulumi:"specifiedAmount"`
}

func (BudgetAmountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAmount)(nil)).Elem()
}

func (i BudgetAmountArgs) ToBudgetAmountOutput() BudgetAmountOutput {
	return i.ToBudgetAmountOutputWithContext(context.Background())
}

func (i BudgetAmountArgs) ToBudgetAmountOutputWithContext(ctx context.Context) BudgetAmountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountOutput)
}

func (i BudgetAmountArgs) ToBudgetAmountPtrOutput() BudgetAmountPtrOutput {
	return i.ToBudgetAmountPtrOutputWithContext(context.Background())
}

func (i BudgetAmountArgs) ToBudgetAmountPtrOutputWithContext(ctx context.Context) BudgetAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountOutput).ToBudgetAmountPtrOutputWithContext(ctx)
}

// BudgetAmountPtrInput is an input type that accepts BudgetAmountArgs, BudgetAmountPtr and BudgetAmountPtrOutput values.
// You can construct a concrete instance of `BudgetAmountPtrInput` via:
//
// 		 BudgetAmountArgs{...}
//
//  or:
//
// 		 nil
//
type BudgetAmountPtrInput interface {
	pulumi.Input

	ToBudgetAmountPtrOutput() BudgetAmountPtrOutput
	ToBudgetAmountPtrOutputWithContext(context.Context) BudgetAmountPtrOutput
}

type budgetAmountPtrType BudgetAmountArgs

func BudgetAmountPtr(v *BudgetAmountArgs) BudgetAmountPtrInput {
	return (*budgetAmountPtrType)(v)
}

func (*budgetAmountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAmount)(nil)).Elem()
}

func (i *budgetAmountPtrType) ToBudgetAmountPtrOutput() BudgetAmountPtrOutput {
	return i.ToBudgetAmountPtrOutputWithContext(context.Background())
}

func (i *budgetAmountPtrType) ToBudgetAmountPtrOutputWithContext(ctx context.Context) BudgetAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountPtrOutput)
}

type BudgetAmountOutput struct{ *pulumi.OutputState }

func (BudgetAmountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAmount)(nil)).Elem()
}

func (o BudgetAmountOutput) ToBudgetAmountOutput() BudgetAmountOutput {
	return o
}

func (o BudgetAmountOutput) ToBudgetAmountOutputWithContext(ctx context.Context) BudgetAmountOutput {
	return o
}

func (o BudgetAmountOutput) ToBudgetAmountPtrOutput() BudgetAmountPtrOutput {
	return o.ToBudgetAmountPtrOutputWithContext(context.Background())
}

func (o BudgetAmountOutput) ToBudgetAmountPtrOutputWithContext(ctx context.Context) BudgetAmountPtrOutput {
	return o.ApplyT(func(v BudgetAmount) *BudgetAmount {
		return &v
	}).(BudgetAmountPtrOutput)
}

// A specified amount to use as the budget. currencyCode is
// optional. If specified, it must match the currency of the
// billing account. The currencyCode is provided on output.  Structure is documented below.
func (o BudgetAmountOutput) SpecifiedAmount() BudgetAmountSpecifiedAmountOutput {
	return o.ApplyT(func(v BudgetAmount) BudgetAmountSpecifiedAmount { return v.SpecifiedAmount }).(BudgetAmountSpecifiedAmountOutput)
}

type BudgetAmountPtrOutput struct{ *pulumi.OutputState }

func (BudgetAmountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAmount)(nil)).Elem()
}

func (o BudgetAmountPtrOutput) ToBudgetAmountPtrOutput() BudgetAmountPtrOutput {
	return o
}

func (o BudgetAmountPtrOutput) ToBudgetAmountPtrOutputWithContext(ctx context.Context) BudgetAmountPtrOutput {
	return o
}

func (o BudgetAmountPtrOutput) Elem() BudgetAmountOutput {
	return o.ApplyT(func(v *BudgetAmount) BudgetAmount { return *v }).(BudgetAmountOutput)
}

// A specified amount to use as the budget. currencyCode is
// optional. If specified, it must match the currency of the
// billing account. The currencyCode is provided on output.  Structure is documented below.
func (o BudgetAmountPtrOutput) SpecifiedAmount() BudgetAmountSpecifiedAmountPtrOutput {
	return o.ApplyT(func(v *BudgetAmount) *BudgetAmountSpecifiedAmount {
		if v == nil {
			return nil
		}
		return &v.SpecifiedAmount
	}).(BudgetAmountSpecifiedAmountPtrOutput)
}

type BudgetAmountSpecifiedAmount struct {
	// The 3-letter currency code defined in ISO 4217.
	CurrencyCode *string `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount.
	// The value must be between -999,999,999 and +999,999,999
	// inclusive. If units is positive, nanos must be positive or
	// zero. If units is zero, nanos can be positive, zero, or
	// negative. If units is negative, nanos must be negative or
	// zero. For example $-1.75 is represented as units=-1 and
	// nanos=-750,000,000.
	Nanos *int `pulumi:"nanos"`
	// The whole units of the amount. For example if currencyCode
	// is "USD", then 1 unit is one US dollar.
	Units *string `pulumi:"units"`
}

// BudgetAmountSpecifiedAmountInput is an input type that accepts BudgetAmountSpecifiedAmountArgs and BudgetAmountSpecifiedAmountOutput values.
// You can construct a concrete instance of `BudgetAmountSpecifiedAmountInput` via:
//
// 		 BudgetAmountSpecifiedAmountArgs{...}
//
type BudgetAmountSpecifiedAmountInput interface {
	pulumi.Input

	ToBudgetAmountSpecifiedAmountOutput() BudgetAmountSpecifiedAmountOutput
	ToBudgetAmountSpecifiedAmountOutputWithContext(context.Context) BudgetAmountSpecifiedAmountOutput
}

type BudgetAmountSpecifiedAmountArgs struct {
	// The 3-letter currency code defined in ISO 4217.
	CurrencyCode pulumi.StringPtrInput `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount.
	// The value must be between -999,999,999 and +999,999,999
	// inclusive. If units is positive, nanos must be positive or
	// zero. If units is zero, nanos can be positive, zero, or
	// negative. If units is negative, nanos must be negative or
	// zero. For example $-1.75 is represented as units=-1 and
	// nanos=-750,000,000.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// The whole units of the amount. For example if currencyCode
	// is "USD", then 1 unit is one US dollar.
	Units pulumi.StringPtrInput `pulumi:"units"`
}

func (BudgetAmountSpecifiedAmountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAmountSpecifiedAmount)(nil)).Elem()
}

func (i BudgetAmountSpecifiedAmountArgs) ToBudgetAmountSpecifiedAmountOutput() BudgetAmountSpecifiedAmountOutput {
	return i.ToBudgetAmountSpecifiedAmountOutputWithContext(context.Background())
}

func (i BudgetAmountSpecifiedAmountArgs) ToBudgetAmountSpecifiedAmountOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountSpecifiedAmountOutput)
}

func (i BudgetAmountSpecifiedAmountArgs) ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput {
	return i.ToBudgetAmountSpecifiedAmountPtrOutputWithContext(context.Background())
}

func (i BudgetAmountSpecifiedAmountArgs) ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountSpecifiedAmountOutput).ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx)
}

// BudgetAmountSpecifiedAmountPtrInput is an input type that accepts BudgetAmountSpecifiedAmountArgs, BudgetAmountSpecifiedAmountPtr and BudgetAmountSpecifiedAmountPtrOutput values.
// You can construct a concrete instance of `BudgetAmountSpecifiedAmountPtrInput` via:
//
// 		 BudgetAmountSpecifiedAmountArgs{...}
//
//  or:
//
// 		 nil
//
type BudgetAmountSpecifiedAmountPtrInput interface {
	pulumi.Input

	ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput
	ToBudgetAmountSpecifiedAmountPtrOutputWithContext(context.Context) BudgetAmountSpecifiedAmountPtrOutput
}

type budgetAmountSpecifiedAmountPtrType BudgetAmountSpecifiedAmountArgs

func BudgetAmountSpecifiedAmountPtr(v *BudgetAmountSpecifiedAmountArgs) BudgetAmountSpecifiedAmountPtrInput {
	return (*budgetAmountSpecifiedAmountPtrType)(v)
}

func (*budgetAmountSpecifiedAmountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAmountSpecifiedAmount)(nil)).Elem()
}

func (i *budgetAmountSpecifiedAmountPtrType) ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput {
	return i.ToBudgetAmountSpecifiedAmountPtrOutputWithContext(context.Background())
}

func (i *budgetAmountSpecifiedAmountPtrType) ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountSpecifiedAmountPtrOutput)
}

type BudgetAmountSpecifiedAmountOutput struct{ *pulumi.OutputState }

func (BudgetAmountSpecifiedAmountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAmountSpecifiedAmount)(nil)).Elem()
}

func (o BudgetAmountSpecifiedAmountOutput) ToBudgetAmountSpecifiedAmountOutput() BudgetAmountSpecifiedAmountOutput {
	return o
}

func (o BudgetAmountSpecifiedAmountOutput) ToBudgetAmountSpecifiedAmountOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountOutput {
	return o
}

func (o BudgetAmountSpecifiedAmountOutput) ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput {
	return o.ToBudgetAmountSpecifiedAmountPtrOutputWithContext(context.Background())
}

func (o BudgetAmountSpecifiedAmountOutput) ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountPtrOutput {
	return o.ApplyT(func(v BudgetAmountSpecifiedAmount) *BudgetAmountSpecifiedAmount {
		return &v
	}).(BudgetAmountSpecifiedAmountPtrOutput)
}

// The 3-letter currency code defined in ISO 4217.
func (o BudgetAmountSpecifiedAmountOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetAmountSpecifiedAmount) *string { return v.CurrencyCode }).(pulumi.StringPtrOutput)
}

// Number of nano (10^-9) units of the amount.
// The value must be between -999,999,999 and +999,999,999
// inclusive. If units is positive, nanos must be positive or
// zero. If units is zero, nanos can be positive, zero, or
// negative. If units is negative, nanos must be negative or
// zero. For example $-1.75 is represented as units=-1 and
// nanos=-750,000,000.
func (o BudgetAmountSpecifiedAmountOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BudgetAmountSpecifiedAmount) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// The whole units of the amount. For example if currencyCode
// is "USD", then 1 unit is one US dollar.
func (o BudgetAmountSpecifiedAmountOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetAmountSpecifiedAmount) *string { return v.Units }).(pulumi.StringPtrOutput)
}

type BudgetAmountSpecifiedAmountPtrOutput struct{ *pulumi.OutputState }

func (BudgetAmountSpecifiedAmountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAmountSpecifiedAmount)(nil)).Elem()
}

func (o BudgetAmountSpecifiedAmountPtrOutput) ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput {
	return o
}

func (o BudgetAmountSpecifiedAmountPtrOutput) ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountPtrOutput {
	return o
}

func (o BudgetAmountSpecifiedAmountPtrOutput) Elem() BudgetAmountSpecifiedAmountOutput {
	return o.ApplyT(func(v *BudgetAmountSpecifiedAmount) BudgetAmountSpecifiedAmount { return *v }).(BudgetAmountSpecifiedAmountOutput)
}

// The 3-letter currency code defined in ISO 4217.
func (o BudgetAmountSpecifiedAmountPtrOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAmountSpecifiedAmount) *string {
		if v == nil {
			return nil
		}
		return v.CurrencyCode
	}).(pulumi.StringPtrOutput)
}

// Number of nano (10^-9) units of the amount.
// The value must be between -999,999,999 and +999,999,999
// inclusive. If units is positive, nanos must be positive or
// zero. If units is zero, nanos can be positive, zero, or
// negative. If units is negative, nanos must be negative or
// zero. For example $-1.75 is represented as units=-1 and
// nanos=-750,000,000.
func (o BudgetAmountSpecifiedAmountPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetAmountSpecifiedAmount) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// The whole units of the amount. For example if currencyCode
// is "USD", then 1 unit is one US dollar.
func (o BudgetAmountSpecifiedAmountPtrOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAmountSpecifiedAmount) *string {
		if v == nil {
			return nil
		}
		return v.Units
	}).(pulumi.StringPtrOutput)
}

type BudgetBudgetFilter struct {
	// Specifies how credits should be treated when determining spend
	// for threshold calculations.
	CreditTypesTreatment *string `pulumi:"creditTypesTreatment"`
	// A set of projects of the form projects/{project_id},
	// specifying that usage from only this set of projects should be
	// included in the budget. If omitted, the report will include
	// all usage for the billing account, regardless of which project
	// the usage occurred on. Only zero or one project can be
	// specified currently.
	Projects []string `pulumi:"projects"`
	// A set of services of the form services/{service_id},
	// specifying that usage from only this set of services should be
	// included in the budget. If omitted, the report will include
	// usage for all the services. The service names are available
	// through the Catalog API:
	// https://cloud.google.com/billing/v1/how-tos/catalog-api.
	Services []string `pulumi:"services"`
}

// BudgetBudgetFilterInput is an input type that accepts BudgetBudgetFilterArgs and BudgetBudgetFilterOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterInput` via:
//
// 		 BudgetBudgetFilterArgs{...}
//
type BudgetBudgetFilterInput interface {
	pulumi.Input

	ToBudgetBudgetFilterOutput() BudgetBudgetFilterOutput
	ToBudgetBudgetFilterOutputWithContext(context.Context) BudgetBudgetFilterOutput
}

type BudgetBudgetFilterArgs struct {
	// Specifies how credits should be treated when determining spend
	// for threshold calculations.
	CreditTypesTreatment pulumi.StringPtrInput `pulumi:"creditTypesTreatment"`
	// A set of projects of the form projects/{project_id},
	// specifying that usage from only this set of projects should be
	// included in the budget. If omitted, the report will include
	// all usage for the billing account, regardless of which project
	// the usage occurred on. Only zero or one project can be
	// specified currently.
	Projects pulumi.StringArrayInput `pulumi:"projects"`
	// A set of services of the form services/{service_id},
	// specifying that usage from only this set of services should be
	// included in the budget. If omitted, the report will include
	// usage for all the services. The service names are available
	// through the Catalog API:
	// https://cloud.google.com/billing/v1/how-tos/catalog-api.
	Services pulumi.StringArrayInput `pulumi:"services"`
}

func (BudgetBudgetFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilter)(nil)).Elem()
}

func (i BudgetBudgetFilterArgs) ToBudgetBudgetFilterOutput() BudgetBudgetFilterOutput {
	return i.ToBudgetBudgetFilterOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterArgs) ToBudgetBudgetFilterOutputWithContext(ctx context.Context) BudgetBudgetFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterOutput)
}

func (i BudgetBudgetFilterArgs) ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput {
	return i.ToBudgetBudgetFilterPtrOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterArgs) ToBudgetBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterOutput).ToBudgetBudgetFilterPtrOutputWithContext(ctx)
}

// BudgetBudgetFilterPtrInput is an input type that accepts BudgetBudgetFilterArgs, BudgetBudgetFilterPtr and BudgetBudgetFilterPtrOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterPtrInput` via:
//
// 		 BudgetBudgetFilterArgs{...}
//
//  or:
//
// 		 nil
//
type BudgetBudgetFilterPtrInput interface {
	pulumi.Input

	ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput
	ToBudgetBudgetFilterPtrOutputWithContext(context.Context) BudgetBudgetFilterPtrOutput
}

type budgetBudgetFilterPtrType BudgetBudgetFilterArgs

func BudgetBudgetFilterPtr(v *BudgetBudgetFilterArgs) BudgetBudgetFilterPtrInput {
	return (*budgetBudgetFilterPtrType)(v)
}

func (*budgetBudgetFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilter)(nil)).Elem()
}

func (i *budgetBudgetFilterPtrType) ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput {
	return i.ToBudgetBudgetFilterPtrOutputWithContext(context.Background())
}

func (i *budgetBudgetFilterPtrType) ToBudgetBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterPtrOutput)
}

type BudgetBudgetFilterOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilter)(nil)).Elem()
}

func (o BudgetBudgetFilterOutput) ToBudgetBudgetFilterOutput() BudgetBudgetFilterOutput {
	return o
}

func (o BudgetBudgetFilterOutput) ToBudgetBudgetFilterOutputWithContext(ctx context.Context) BudgetBudgetFilterOutput {
	return o
}

func (o BudgetBudgetFilterOutput) ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput {
	return o.ToBudgetBudgetFilterPtrOutputWithContext(context.Background())
}

func (o BudgetBudgetFilterOutput) ToBudgetBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterPtrOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) *BudgetBudgetFilter {
		return &v
	}).(BudgetBudgetFilterPtrOutput)
}

// Specifies how credits should be treated when determining spend
// for threshold calculations.
func (o BudgetBudgetFilterOutput) CreditTypesTreatment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) *string { return v.CreditTypesTreatment }).(pulumi.StringPtrOutput)
}

// A set of projects of the form projects/{project_id},
// specifying that usage from only this set of projects should be
// included in the budget. If omitted, the report will include
// all usage for the billing account, regardless of which project
// the usage occurred on. Only zero or one project can be
// specified currently.
func (o BudgetBudgetFilterOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) []string { return v.Projects }).(pulumi.StringArrayOutput)
}

// A set of services of the form services/{service_id},
// specifying that usage from only this set of services should be
// included in the budget. If omitted, the report will include
// usage for all the services. The service names are available
// through the Catalog API:
// https://cloud.google.com/billing/v1/how-tos/catalog-api.
func (o BudgetBudgetFilterOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) []string { return v.Services }).(pulumi.StringArrayOutput)
}

type BudgetBudgetFilterPtrOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilter)(nil)).Elem()
}

func (o BudgetBudgetFilterPtrOutput) ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput {
	return o
}

func (o BudgetBudgetFilterPtrOutput) ToBudgetBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterPtrOutput {
	return o
}

func (o BudgetBudgetFilterPtrOutput) Elem() BudgetBudgetFilterOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) BudgetBudgetFilter { return *v }).(BudgetBudgetFilterOutput)
}

// Specifies how credits should be treated when determining spend
// for threshold calculations.
func (o BudgetBudgetFilterPtrOutput) CreditTypesTreatment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) *string {
		if v == nil {
			return nil
		}
		return v.CreditTypesTreatment
	}).(pulumi.StringPtrOutput)
}

// A set of projects of the form projects/{project_id},
// specifying that usage from only this set of projects should be
// included in the budget. If omitted, the report will include
// all usage for the billing account, regardless of which project
// the usage occurred on. Only zero or one project can be
// specified currently.
func (o BudgetBudgetFilterPtrOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) []string {
		if v == nil {
			return nil
		}
		return v.Projects
	}).(pulumi.StringArrayOutput)
}

// A set of services of the form services/{service_id},
// specifying that usage from only this set of services should be
// included in the budget. If omitted, the report will include
// usage for all the services. The service names are available
// through the Catalog API:
// https://cloud.google.com/billing/v1/how-tos/catalog-api.
func (o BudgetBudgetFilterPtrOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) []string {
		if v == nil {
			return nil
		}
		return v.Services
	}).(pulumi.StringArrayOutput)
}

type BudgetThresholdRule struct {
	// The type of basis used to determine if spend has passed
	// the threshold.
	SpendBasis *string `pulumi:"spendBasis"`
	// Send an alert when this threshold is exceeded. This is a
	// 1.0-based percentage, so 0.5 = 50%. Must be >= 0.
	ThresholdPercent float64 `pulumi:"thresholdPercent"`
}

// BudgetThresholdRuleInput is an input type that accepts BudgetThresholdRuleArgs and BudgetThresholdRuleOutput values.
// You can construct a concrete instance of `BudgetThresholdRuleInput` via:
//
// 		 BudgetThresholdRuleArgs{...}
//
type BudgetThresholdRuleInput interface {
	pulumi.Input

	ToBudgetThresholdRuleOutput() BudgetThresholdRuleOutput
	ToBudgetThresholdRuleOutputWithContext(context.Context) BudgetThresholdRuleOutput
}

type BudgetThresholdRuleArgs struct {
	// The type of basis used to determine if spend has passed
	// the threshold.
	SpendBasis pulumi.StringPtrInput `pulumi:"spendBasis"`
	// Send an alert when this threshold is exceeded. This is a
	// 1.0-based percentage, so 0.5 = 50%. Must be >= 0.
	ThresholdPercent pulumi.Float64Input `pulumi:"thresholdPercent"`
}

func (BudgetThresholdRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetThresholdRule)(nil)).Elem()
}

func (i BudgetThresholdRuleArgs) ToBudgetThresholdRuleOutput() BudgetThresholdRuleOutput {
	return i.ToBudgetThresholdRuleOutputWithContext(context.Background())
}

func (i BudgetThresholdRuleArgs) ToBudgetThresholdRuleOutputWithContext(ctx context.Context) BudgetThresholdRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetThresholdRuleOutput)
}

// BudgetThresholdRuleArrayInput is an input type that accepts BudgetThresholdRuleArray and BudgetThresholdRuleArrayOutput values.
// You can construct a concrete instance of `BudgetThresholdRuleArrayInput` via:
//
// 		 BudgetThresholdRuleArray{ BudgetThresholdRuleArgs{...} }
//
type BudgetThresholdRuleArrayInput interface {
	pulumi.Input

	ToBudgetThresholdRuleArrayOutput() BudgetThresholdRuleArrayOutput
	ToBudgetThresholdRuleArrayOutputWithContext(context.Context) BudgetThresholdRuleArrayOutput
}

type BudgetThresholdRuleArray []BudgetThresholdRuleInput

func (BudgetThresholdRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetThresholdRule)(nil)).Elem()
}

func (i BudgetThresholdRuleArray) ToBudgetThresholdRuleArrayOutput() BudgetThresholdRuleArrayOutput {
	return i.ToBudgetThresholdRuleArrayOutputWithContext(context.Background())
}

func (i BudgetThresholdRuleArray) ToBudgetThresholdRuleArrayOutputWithContext(ctx context.Context) BudgetThresholdRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetThresholdRuleArrayOutput)
}

type BudgetThresholdRuleOutput struct{ *pulumi.OutputState }

func (BudgetThresholdRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetThresholdRule)(nil)).Elem()
}

func (o BudgetThresholdRuleOutput) ToBudgetThresholdRuleOutput() BudgetThresholdRuleOutput {
	return o
}

func (o BudgetThresholdRuleOutput) ToBudgetThresholdRuleOutputWithContext(ctx context.Context) BudgetThresholdRuleOutput {
	return o
}

// The type of basis used to determine if spend has passed
// the threshold.
func (o BudgetThresholdRuleOutput) SpendBasis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetThresholdRule) *string { return v.SpendBasis }).(pulumi.StringPtrOutput)
}

// Send an alert when this threshold is exceeded. This is a
// 1.0-based percentage, so 0.5 = 50%. Must be >= 0.
func (o BudgetThresholdRuleOutput) ThresholdPercent() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetThresholdRule) float64 { return v.ThresholdPercent }).(pulumi.Float64Output)
}

type BudgetThresholdRuleArrayOutput struct{ *pulumi.OutputState }

func (BudgetThresholdRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetThresholdRule)(nil)).Elem()
}

func (o BudgetThresholdRuleArrayOutput) ToBudgetThresholdRuleArrayOutput() BudgetThresholdRuleArrayOutput {
	return o
}

func (o BudgetThresholdRuleArrayOutput) ToBudgetThresholdRuleArrayOutputWithContext(ctx context.Context) BudgetThresholdRuleArrayOutput {
	return o
}

func (o BudgetThresholdRuleArrayOutput) Index(i pulumi.IntInput) BudgetThresholdRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetThresholdRule {
		return vs[0].([]BudgetThresholdRule)[vs[1].(int)]
	}).(BudgetThresholdRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountIamBindingConditionOutput{})
	pulumi.RegisterOutputType(AccountIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(AccountIamMemberConditionOutput{})
	pulumi.RegisterOutputType(AccountIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(BudgetAllUpdatesRuleOutput{})
	pulumi.RegisterOutputType(BudgetAllUpdatesRulePtrOutput{})
	pulumi.RegisterOutputType(BudgetAmountOutput{})
	pulumi.RegisterOutputType(BudgetAmountPtrOutput{})
	pulumi.RegisterOutputType(BudgetAmountSpecifiedAmountOutput{})
	pulumi.RegisterOutputType(BudgetAmountSpecifiedAmountPtrOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterPtrOutput{})
	pulumi.RegisterOutputType(BudgetThresholdRuleOutput{})
	pulumi.RegisterOutputType(BudgetThresholdRuleArrayOutput{})
}
