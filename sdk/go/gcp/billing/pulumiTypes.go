// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package billing

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccountIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// AccountIamBindingConditionInput is an input type that accepts AccountIamBindingConditionArgs and AccountIamBindingConditionOutput values.
// You can construct a concrete instance of `AccountIamBindingConditionInput` via:
//
//          AccountIamBindingConditionArgs{...}
type AccountIamBindingConditionInput interface {
	pulumi.Input

	ToAccountIamBindingConditionOutput() AccountIamBindingConditionOutput
	ToAccountIamBindingConditionOutputWithContext(context.Context) AccountIamBindingConditionOutput
}

type AccountIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (AccountIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIamBindingCondition)(nil)).Elem()
}

func (i AccountIamBindingConditionArgs) ToAccountIamBindingConditionOutput() AccountIamBindingConditionOutput {
	return i.ToAccountIamBindingConditionOutputWithContext(context.Background())
}

func (i AccountIamBindingConditionArgs) ToAccountIamBindingConditionOutputWithContext(ctx context.Context) AccountIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamBindingConditionOutput)
}

func (i AccountIamBindingConditionArgs) ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput {
	return i.ToAccountIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i AccountIamBindingConditionArgs) ToAccountIamBindingConditionPtrOutputWithContext(ctx context.Context) AccountIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamBindingConditionOutput).ToAccountIamBindingConditionPtrOutputWithContext(ctx)
}

// AccountIamBindingConditionPtrInput is an input type that accepts AccountIamBindingConditionArgs, AccountIamBindingConditionPtr and AccountIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `AccountIamBindingConditionPtrInput` via:
//
//          AccountIamBindingConditionArgs{...}
//
//  or:
//
//          nil
type AccountIamBindingConditionPtrInput interface {
	pulumi.Input

	ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput
	ToAccountIamBindingConditionPtrOutputWithContext(context.Context) AccountIamBindingConditionPtrOutput
}

type accountIamBindingConditionPtrType AccountIamBindingConditionArgs

func AccountIamBindingConditionPtr(v *AccountIamBindingConditionArgs) AccountIamBindingConditionPtrInput {
	return (*accountIamBindingConditionPtrType)(v)
}

func (*accountIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIamBindingCondition)(nil)).Elem()
}

func (i *accountIamBindingConditionPtrType) ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput {
	return i.ToAccountIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *accountIamBindingConditionPtrType) ToAccountIamBindingConditionPtrOutputWithContext(ctx context.Context) AccountIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamBindingConditionPtrOutput)
}

type AccountIamBindingConditionOutput struct{ *pulumi.OutputState }

func (AccountIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIamBindingCondition)(nil)).Elem()
}

func (o AccountIamBindingConditionOutput) ToAccountIamBindingConditionOutput() AccountIamBindingConditionOutput {
	return o
}

func (o AccountIamBindingConditionOutput) ToAccountIamBindingConditionOutputWithContext(ctx context.Context) AccountIamBindingConditionOutput {
	return o
}

func (o AccountIamBindingConditionOutput) ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput {
	return o.ToAccountIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o AccountIamBindingConditionOutput) ToAccountIamBindingConditionPtrOutputWithContext(ctx context.Context) AccountIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountIamBindingCondition) *AccountIamBindingCondition {
		return &v
	}).(AccountIamBindingConditionPtrOutput)
}

func (o AccountIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AccountIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o AccountIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AccountIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (AccountIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIamBindingCondition)(nil)).Elem()
}

func (o AccountIamBindingConditionPtrOutput) ToAccountIamBindingConditionPtrOutput() AccountIamBindingConditionPtrOutput {
	return o
}

func (o AccountIamBindingConditionPtrOutput) ToAccountIamBindingConditionPtrOutputWithContext(ctx context.Context) AccountIamBindingConditionPtrOutput {
	return o
}

func (o AccountIamBindingConditionPtrOutput) Elem() AccountIamBindingConditionOutput {
	return o.ApplyT(func(v *AccountIamBindingCondition) AccountIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret AccountIamBindingCondition
		return ret
	}).(AccountIamBindingConditionOutput)
}

func (o AccountIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o AccountIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o AccountIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type AccountIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// AccountIamMemberConditionInput is an input type that accepts AccountIamMemberConditionArgs and AccountIamMemberConditionOutput values.
// You can construct a concrete instance of `AccountIamMemberConditionInput` via:
//
//          AccountIamMemberConditionArgs{...}
type AccountIamMemberConditionInput interface {
	pulumi.Input

	ToAccountIamMemberConditionOutput() AccountIamMemberConditionOutput
	ToAccountIamMemberConditionOutputWithContext(context.Context) AccountIamMemberConditionOutput
}

type AccountIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (AccountIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIamMemberCondition)(nil)).Elem()
}

func (i AccountIamMemberConditionArgs) ToAccountIamMemberConditionOutput() AccountIamMemberConditionOutput {
	return i.ToAccountIamMemberConditionOutputWithContext(context.Background())
}

func (i AccountIamMemberConditionArgs) ToAccountIamMemberConditionOutputWithContext(ctx context.Context) AccountIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamMemberConditionOutput)
}

func (i AccountIamMemberConditionArgs) ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput {
	return i.ToAccountIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i AccountIamMemberConditionArgs) ToAccountIamMemberConditionPtrOutputWithContext(ctx context.Context) AccountIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamMemberConditionOutput).ToAccountIamMemberConditionPtrOutputWithContext(ctx)
}

// AccountIamMemberConditionPtrInput is an input type that accepts AccountIamMemberConditionArgs, AccountIamMemberConditionPtr and AccountIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `AccountIamMemberConditionPtrInput` via:
//
//          AccountIamMemberConditionArgs{...}
//
//  or:
//
//          nil
type AccountIamMemberConditionPtrInput interface {
	pulumi.Input

	ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput
	ToAccountIamMemberConditionPtrOutputWithContext(context.Context) AccountIamMemberConditionPtrOutput
}

type accountIamMemberConditionPtrType AccountIamMemberConditionArgs

func AccountIamMemberConditionPtr(v *AccountIamMemberConditionArgs) AccountIamMemberConditionPtrInput {
	return (*accountIamMemberConditionPtrType)(v)
}

func (*accountIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIamMemberCondition)(nil)).Elem()
}

func (i *accountIamMemberConditionPtrType) ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput {
	return i.ToAccountIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *accountIamMemberConditionPtrType) ToAccountIamMemberConditionPtrOutputWithContext(ctx context.Context) AccountIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIamMemberConditionPtrOutput)
}

type AccountIamMemberConditionOutput struct{ *pulumi.OutputState }

func (AccountIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIamMemberCondition)(nil)).Elem()
}

func (o AccountIamMemberConditionOutput) ToAccountIamMemberConditionOutput() AccountIamMemberConditionOutput {
	return o
}

func (o AccountIamMemberConditionOutput) ToAccountIamMemberConditionOutputWithContext(ctx context.Context) AccountIamMemberConditionOutput {
	return o
}

func (o AccountIamMemberConditionOutput) ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput {
	return o.ToAccountIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o AccountIamMemberConditionOutput) ToAccountIamMemberConditionPtrOutputWithContext(ctx context.Context) AccountIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountIamMemberCondition) *AccountIamMemberCondition {
		return &v
	}).(AccountIamMemberConditionPtrOutput)
}

func (o AccountIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AccountIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o AccountIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AccountIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (AccountIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIamMemberCondition)(nil)).Elem()
}

func (o AccountIamMemberConditionPtrOutput) ToAccountIamMemberConditionPtrOutput() AccountIamMemberConditionPtrOutput {
	return o
}

func (o AccountIamMemberConditionPtrOutput) ToAccountIamMemberConditionPtrOutputWithContext(ctx context.Context) AccountIamMemberConditionPtrOutput {
	return o
}

func (o AccountIamMemberConditionPtrOutput) Elem() AccountIamMemberConditionOutput {
	return o.ApplyT(func(v *AccountIamMemberCondition) AccountIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret AccountIamMemberCondition
		return ret
	}).(AccountIamMemberConditionOutput)
}

func (o AccountIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o AccountIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o AccountIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type BudgetAllUpdatesRule struct {
	// Boolean. When set to true, disables default notifications sent
	// when a threshold is exceeded. Default recipients are
	// those with Billing Account Administrators and Billing
	// Account Users IAM roles for the target account.
	DisableDefaultIamRecipients *bool `pulumi:"disableDefaultIamRecipients"`
	// The full resource name of a monitoring notification
	// channel in the form
	// projects/{project_id}/notificationChannels/{channel_id}.
	// A maximum of 5 channels are allowed.
	MonitoringNotificationChannels []string `pulumi:"monitoringNotificationChannels"`
	// The name of the Cloud Pub/Sub topic where budget related
	// messages will be published, in the form
	// projects/{project_id}/topics/{topic_id}. Updates are sent
	// at regular intervals to the topic.
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The schema version of the notification. Only "1.0" is
	// accepted. It represents the JSON schema as defined in
	// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
	SchemaVersion *string `pulumi:"schemaVersion"`
}

// BudgetAllUpdatesRuleInput is an input type that accepts BudgetAllUpdatesRuleArgs and BudgetAllUpdatesRuleOutput values.
// You can construct a concrete instance of `BudgetAllUpdatesRuleInput` via:
//
//          BudgetAllUpdatesRuleArgs{...}
type BudgetAllUpdatesRuleInput interface {
	pulumi.Input

	ToBudgetAllUpdatesRuleOutput() BudgetAllUpdatesRuleOutput
	ToBudgetAllUpdatesRuleOutputWithContext(context.Context) BudgetAllUpdatesRuleOutput
}

type BudgetAllUpdatesRuleArgs struct {
	// Boolean. When set to true, disables default notifications sent
	// when a threshold is exceeded. Default recipients are
	// those with Billing Account Administrators and Billing
	// Account Users IAM roles for the target account.
	DisableDefaultIamRecipients pulumi.BoolPtrInput `pulumi:"disableDefaultIamRecipients"`
	// The full resource name of a monitoring notification
	// channel in the form
	// projects/{project_id}/notificationChannels/{channel_id}.
	// A maximum of 5 channels are allowed.
	MonitoringNotificationChannels pulumi.StringArrayInput `pulumi:"monitoringNotificationChannels"`
	// The name of the Cloud Pub/Sub topic where budget related
	// messages will be published, in the form
	// projects/{project_id}/topics/{topic_id}. Updates are sent
	// at regular intervals to the topic.
	PubsubTopic pulumi.StringPtrInput `pulumi:"pubsubTopic"`
	// The schema version of the notification. Only "1.0" is
	// accepted. It represents the JSON schema as defined in
	// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
	SchemaVersion pulumi.StringPtrInput `pulumi:"schemaVersion"`
}

func (BudgetAllUpdatesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAllUpdatesRule)(nil)).Elem()
}

func (i BudgetAllUpdatesRuleArgs) ToBudgetAllUpdatesRuleOutput() BudgetAllUpdatesRuleOutput {
	return i.ToBudgetAllUpdatesRuleOutputWithContext(context.Background())
}

func (i BudgetAllUpdatesRuleArgs) ToBudgetAllUpdatesRuleOutputWithContext(ctx context.Context) BudgetAllUpdatesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAllUpdatesRuleOutput)
}

func (i BudgetAllUpdatesRuleArgs) ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput {
	return i.ToBudgetAllUpdatesRulePtrOutputWithContext(context.Background())
}

func (i BudgetAllUpdatesRuleArgs) ToBudgetAllUpdatesRulePtrOutputWithContext(ctx context.Context) BudgetAllUpdatesRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAllUpdatesRuleOutput).ToBudgetAllUpdatesRulePtrOutputWithContext(ctx)
}

// BudgetAllUpdatesRulePtrInput is an input type that accepts BudgetAllUpdatesRuleArgs, BudgetAllUpdatesRulePtr and BudgetAllUpdatesRulePtrOutput values.
// You can construct a concrete instance of `BudgetAllUpdatesRulePtrInput` via:
//
//          BudgetAllUpdatesRuleArgs{...}
//
//  or:
//
//          nil
type BudgetAllUpdatesRulePtrInput interface {
	pulumi.Input

	ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput
	ToBudgetAllUpdatesRulePtrOutputWithContext(context.Context) BudgetAllUpdatesRulePtrOutput
}

type budgetAllUpdatesRulePtrType BudgetAllUpdatesRuleArgs

func BudgetAllUpdatesRulePtr(v *BudgetAllUpdatesRuleArgs) BudgetAllUpdatesRulePtrInput {
	return (*budgetAllUpdatesRulePtrType)(v)
}

func (*budgetAllUpdatesRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAllUpdatesRule)(nil)).Elem()
}

func (i *budgetAllUpdatesRulePtrType) ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput {
	return i.ToBudgetAllUpdatesRulePtrOutputWithContext(context.Background())
}

func (i *budgetAllUpdatesRulePtrType) ToBudgetAllUpdatesRulePtrOutputWithContext(ctx context.Context) BudgetAllUpdatesRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAllUpdatesRulePtrOutput)
}

type BudgetAllUpdatesRuleOutput struct{ *pulumi.OutputState }

func (BudgetAllUpdatesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAllUpdatesRule)(nil)).Elem()
}

func (o BudgetAllUpdatesRuleOutput) ToBudgetAllUpdatesRuleOutput() BudgetAllUpdatesRuleOutput {
	return o
}

func (o BudgetAllUpdatesRuleOutput) ToBudgetAllUpdatesRuleOutputWithContext(ctx context.Context) BudgetAllUpdatesRuleOutput {
	return o
}

func (o BudgetAllUpdatesRuleOutput) ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput {
	return o.ToBudgetAllUpdatesRulePtrOutputWithContext(context.Background())
}

func (o BudgetAllUpdatesRuleOutput) ToBudgetAllUpdatesRulePtrOutputWithContext(ctx context.Context) BudgetAllUpdatesRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetAllUpdatesRule) *BudgetAllUpdatesRule {
		return &v
	}).(BudgetAllUpdatesRulePtrOutput)
}

// Boolean. When set to true, disables default notifications sent
// when a threshold is exceeded. Default recipients are
// those with Billing Account Administrators and Billing
// Account Users IAM roles for the target account.
func (o BudgetAllUpdatesRuleOutput) DisableDefaultIamRecipients() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetAllUpdatesRule) *bool { return v.DisableDefaultIamRecipients }).(pulumi.BoolPtrOutput)
}

// The full resource name of a monitoring notification
// channel in the form
// projects/{project_id}/notificationChannels/{channel_id}.
// A maximum of 5 channels are allowed.
func (o BudgetAllUpdatesRuleOutput) MonitoringNotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetAllUpdatesRule) []string { return v.MonitoringNotificationChannels }).(pulumi.StringArrayOutput)
}

// The name of the Cloud Pub/Sub topic where budget related
// messages will be published, in the form
// projects/{project_id}/topics/{topic_id}. Updates are sent
// at regular intervals to the topic.
func (o BudgetAllUpdatesRuleOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetAllUpdatesRule) *string { return v.PubsubTopic }).(pulumi.StringPtrOutput)
}

// The schema version of the notification. Only "1.0" is
// accepted. It represents the JSON schema as defined in
// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
func (o BudgetAllUpdatesRuleOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetAllUpdatesRule) *string { return v.SchemaVersion }).(pulumi.StringPtrOutput)
}

type BudgetAllUpdatesRulePtrOutput struct{ *pulumi.OutputState }

func (BudgetAllUpdatesRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAllUpdatesRule)(nil)).Elem()
}

func (o BudgetAllUpdatesRulePtrOutput) ToBudgetAllUpdatesRulePtrOutput() BudgetAllUpdatesRulePtrOutput {
	return o
}

func (o BudgetAllUpdatesRulePtrOutput) ToBudgetAllUpdatesRulePtrOutputWithContext(ctx context.Context) BudgetAllUpdatesRulePtrOutput {
	return o
}

func (o BudgetAllUpdatesRulePtrOutput) Elem() BudgetAllUpdatesRuleOutput {
	return o.ApplyT(func(v *BudgetAllUpdatesRule) BudgetAllUpdatesRule {
		if v != nil {
			return *v
		}
		var ret BudgetAllUpdatesRule
		return ret
	}).(BudgetAllUpdatesRuleOutput)
}

// Boolean. When set to true, disables default notifications sent
// when a threshold is exceeded. Default recipients are
// those with Billing Account Administrators and Billing
// Account Users IAM roles for the target account.
func (o BudgetAllUpdatesRulePtrOutput) DisableDefaultIamRecipients() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetAllUpdatesRule) *bool {
		if v == nil {
			return nil
		}
		return v.DisableDefaultIamRecipients
	}).(pulumi.BoolPtrOutput)
}

// The full resource name of a monitoring notification
// channel in the form
// projects/{project_id}/notificationChannels/{channel_id}.
// A maximum of 5 channels are allowed.
func (o BudgetAllUpdatesRulePtrOutput) MonitoringNotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetAllUpdatesRule) []string {
		if v == nil {
			return nil
		}
		return v.MonitoringNotificationChannels
	}).(pulumi.StringArrayOutput)
}

// The name of the Cloud Pub/Sub topic where budget related
// messages will be published, in the form
// projects/{project_id}/topics/{topic_id}. Updates are sent
// at regular intervals to the topic.
func (o BudgetAllUpdatesRulePtrOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAllUpdatesRule) *string {
		if v == nil {
			return nil
		}
		return v.PubsubTopic
	}).(pulumi.StringPtrOutput)
}

// The schema version of the notification. Only "1.0" is
// accepted. It represents the JSON schema as defined in
// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
func (o BudgetAllUpdatesRulePtrOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAllUpdatesRule) *string {
		if v == nil {
			return nil
		}
		return v.SchemaVersion
	}).(pulumi.StringPtrOutput)
}

type BudgetAmount struct {
	// Configures a budget amount that is automatically set to 100% of
	// last period's spend.
	// Boolean. Set value to true to use. Do not set to false, instead
	// use the `specifiedAmount` block.
	LastPeriodAmount *bool `pulumi:"lastPeriodAmount"`
	// A specified amount to use as the budget. currencyCode is
	// optional. If specified, it must match the currency of the
	// billing account. The currencyCode is provided on output.
	// Structure is documented below.
	SpecifiedAmount *BudgetAmountSpecifiedAmount `pulumi:"specifiedAmount"`
}

// BudgetAmountInput is an input type that accepts BudgetAmountArgs and BudgetAmountOutput values.
// You can construct a concrete instance of `BudgetAmountInput` via:
//
//          BudgetAmountArgs{...}
type BudgetAmountInput interface {
	pulumi.Input

	ToBudgetAmountOutput() BudgetAmountOutput
	ToBudgetAmountOutputWithContext(context.Context) BudgetAmountOutput
}

type BudgetAmountArgs struct {
	// Configures a budget amount that is automatically set to 100% of
	// last period's spend.
	// Boolean. Set value to true to use. Do not set to false, instead
	// use the `specifiedAmount` block.
	LastPeriodAmount pulumi.BoolPtrInput `pulumi:"lastPeriodAmount"`
	// A specified amount to use as the budget. currencyCode is
	// optional. If specified, it must match the currency of the
	// billing account. The currencyCode is provided on output.
	// Structure is documented below.
	SpecifiedAmount BudgetAmountSpecifiedAmountPtrInput `pulumi:"specifiedAmount"`
}

func (BudgetAmountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAmount)(nil)).Elem()
}

func (i BudgetAmountArgs) ToBudgetAmountOutput() BudgetAmountOutput {
	return i.ToBudgetAmountOutputWithContext(context.Background())
}

func (i BudgetAmountArgs) ToBudgetAmountOutputWithContext(ctx context.Context) BudgetAmountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountOutput)
}

func (i BudgetAmountArgs) ToBudgetAmountPtrOutput() BudgetAmountPtrOutput {
	return i.ToBudgetAmountPtrOutputWithContext(context.Background())
}

func (i BudgetAmountArgs) ToBudgetAmountPtrOutputWithContext(ctx context.Context) BudgetAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountOutput).ToBudgetAmountPtrOutputWithContext(ctx)
}

// BudgetAmountPtrInput is an input type that accepts BudgetAmountArgs, BudgetAmountPtr and BudgetAmountPtrOutput values.
// You can construct a concrete instance of `BudgetAmountPtrInput` via:
//
//          BudgetAmountArgs{...}
//
//  or:
//
//          nil
type BudgetAmountPtrInput interface {
	pulumi.Input

	ToBudgetAmountPtrOutput() BudgetAmountPtrOutput
	ToBudgetAmountPtrOutputWithContext(context.Context) BudgetAmountPtrOutput
}

type budgetAmountPtrType BudgetAmountArgs

func BudgetAmountPtr(v *BudgetAmountArgs) BudgetAmountPtrInput {
	return (*budgetAmountPtrType)(v)
}

func (*budgetAmountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAmount)(nil)).Elem()
}

func (i *budgetAmountPtrType) ToBudgetAmountPtrOutput() BudgetAmountPtrOutput {
	return i.ToBudgetAmountPtrOutputWithContext(context.Background())
}

func (i *budgetAmountPtrType) ToBudgetAmountPtrOutputWithContext(ctx context.Context) BudgetAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountPtrOutput)
}

type BudgetAmountOutput struct{ *pulumi.OutputState }

func (BudgetAmountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAmount)(nil)).Elem()
}

func (o BudgetAmountOutput) ToBudgetAmountOutput() BudgetAmountOutput {
	return o
}

func (o BudgetAmountOutput) ToBudgetAmountOutputWithContext(ctx context.Context) BudgetAmountOutput {
	return o
}

func (o BudgetAmountOutput) ToBudgetAmountPtrOutput() BudgetAmountPtrOutput {
	return o.ToBudgetAmountPtrOutputWithContext(context.Background())
}

func (o BudgetAmountOutput) ToBudgetAmountPtrOutputWithContext(ctx context.Context) BudgetAmountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetAmount) *BudgetAmount {
		return &v
	}).(BudgetAmountPtrOutput)
}

// Configures a budget amount that is automatically set to 100% of
// last period's spend.
// Boolean. Set value to true to use. Do not set to false, instead
// use the `specifiedAmount` block.
func (o BudgetAmountOutput) LastPeriodAmount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetAmount) *bool { return v.LastPeriodAmount }).(pulumi.BoolPtrOutput)
}

// A specified amount to use as the budget. currencyCode is
// optional. If specified, it must match the currency of the
// billing account. The currencyCode is provided on output.
// Structure is documented below.
func (o BudgetAmountOutput) SpecifiedAmount() BudgetAmountSpecifiedAmountPtrOutput {
	return o.ApplyT(func(v BudgetAmount) *BudgetAmountSpecifiedAmount { return v.SpecifiedAmount }).(BudgetAmountSpecifiedAmountPtrOutput)
}

type BudgetAmountPtrOutput struct{ *pulumi.OutputState }

func (BudgetAmountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAmount)(nil)).Elem()
}

func (o BudgetAmountPtrOutput) ToBudgetAmountPtrOutput() BudgetAmountPtrOutput {
	return o
}

func (o BudgetAmountPtrOutput) ToBudgetAmountPtrOutputWithContext(ctx context.Context) BudgetAmountPtrOutput {
	return o
}

func (o BudgetAmountPtrOutput) Elem() BudgetAmountOutput {
	return o.ApplyT(func(v *BudgetAmount) BudgetAmount {
		if v != nil {
			return *v
		}
		var ret BudgetAmount
		return ret
	}).(BudgetAmountOutput)
}

// Configures a budget amount that is automatically set to 100% of
// last period's spend.
// Boolean. Set value to true to use. Do not set to false, instead
// use the `specifiedAmount` block.
func (o BudgetAmountPtrOutput) LastPeriodAmount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetAmount) *bool {
		if v == nil {
			return nil
		}
		return v.LastPeriodAmount
	}).(pulumi.BoolPtrOutput)
}

// A specified amount to use as the budget. currencyCode is
// optional. If specified, it must match the currency of the
// billing account. The currencyCode is provided on output.
// Structure is documented below.
func (o BudgetAmountPtrOutput) SpecifiedAmount() BudgetAmountSpecifiedAmountPtrOutput {
	return o.ApplyT(func(v *BudgetAmount) *BudgetAmountSpecifiedAmount {
		if v == nil {
			return nil
		}
		return v.SpecifiedAmount
	}).(BudgetAmountSpecifiedAmountPtrOutput)
}

type BudgetAmountSpecifiedAmount struct {
	// The 3-letter currency code defined in ISO 4217.
	CurrencyCode *string `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount.
	// The value must be between -999,999,999 and +999,999,999
	// inclusive. If units is positive, nanos must be positive or
	// zero. If units is zero, nanos can be positive, zero, or
	// negative. If units is negative, nanos must be negative or
	// zero. For example $-1.75 is represented as units=-1 and
	// nanos=-750,000,000.
	Nanos *int `pulumi:"nanos"`
	// The whole units of the amount. For example if currencyCode
	// is "USD", then 1 unit is one US dollar.
	Units *string `pulumi:"units"`
}

// BudgetAmountSpecifiedAmountInput is an input type that accepts BudgetAmountSpecifiedAmountArgs and BudgetAmountSpecifiedAmountOutput values.
// You can construct a concrete instance of `BudgetAmountSpecifiedAmountInput` via:
//
//          BudgetAmountSpecifiedAmountArgs{...}
type BudgetAmountSpecifiedAmountInput interface {
	pulumi.Input

	ToBudgetAmountSpecifiedAmountOutput() BudgetAmountSpecifiedAmountOutput
	ToBudgetAmountSpecifiedAmountOutputWithContext(context.Context) BudgetAmountSpecifiedAmountOutput
}

type BudgetAmountSpecifiedAmountArgs struct {
	// The 3-letter currency code defined in ISO 4217.
	CurrencyCode pulumi.StringPtrInput `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount.
	// The value must be between -999,999,999 and +999,999,999
	// inclusive. If units is positive, nanos must be positive or
	// zero. If units is zero, nanos can be positive, zero, or
	// negative. If units is negative, nanos must be negative or
	// zero. For example $-1.75 is represented as units=-1 and
	// nanos=-750,000,000.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// The whole units of the amount. For example if currencyCode
	// is "USD", then 1 unit is one US dollar.
	Units pulumi.StringPtrInput `pulumi:"units"`
}

func (BudgetAmountSpecifiedAmountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAmountSpecifiedAmount)(nil)).Elem()
}

func (i BudgetAmountSpecifiedAmountArgs) ToBudgetAmountSpecifiedAmountOutput() BudgetAmountSpecifiedAmountOutput {
	return i.ToBudgetAmountSpecifiedAmountOutputWithContext(context.Background())
}

func (i BudgetAmountSpecifiedAmountArgs) ToBudgetAmountSpecifiedAmountOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountSpecifiedAmountOutput)
}

func (i BudgetAmountSpecifiedAmountArgs) ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput {
	return i.ToBudgetAmountSpecifiedAmountPtrOutputWithContext(context.Background())
}

func (i BudgetAmountSpecifiedAmountArgs) ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountSpecifiedAmountOutput).ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx)
}

// BudgetAmountSpecifiedAmountPtrInput is an input type that accepts BudgetAmountSpecifiedAmountArgs, BudgetAmountSpecifiedAmountPtr and BudgetAmountSpecifiedAmountPtrOutput values.
// You can construct a concrete instance of `BudgetAmountSpecifiedAmountPtrInput` via:
//
//          BudgetAmountSpecifiedAmountArgs{...}
//
//  or:
//
//          nil
type BudgetAmountSpecifiedAmountPtrInput interface {
	pulumi.Input

	ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput
	ToBudgetAmountSpecifiedAmountPtrOutputWithContext(context.Context) BudgetAmountSpecifiedAmountPtrOutput
}

type budgetAmountSpecifiedAmountPtrType BudgetAmountSpecifiedAmountArgs

func BudgetAmountSpecifiedAmountPtr(v *BudgetAmountSpecifiedAmountArgs) BudgetAmountSpecifiedAmountPtrInput {
	return (*budgetAmountSpecifiedAmountPtrType)(v)
}

func (*budgetAmountSpecifiedAmountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAmountSpecifiedAmount)(nil)).Elem()
}

func (i *budgetAmountSpecifiedAmountPtrType) ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput {
	return i.ToBudgetAmountSpecifiedAmountPtrOutputWithContext(context.Background())
}

func (i *budgetAmountSpecifiedAmountPtrType) ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAmountSpecifiedAmountPtrOutput)
}

type BudgetAmountSpecifiedAmountOutput struct{ *pulumi.OutputState }

func (BudgetAmountSpecifiedAmountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAmountSpecifiedAmount)(nil)).Elem()
}

func (o BudgetAmountSpecifiedAmountOutput) ToBudgetAmountSpecifiedAmountOutput() BudgetAmountSpecifiedAmountOutput {
	return o
}

func (o BudgetAmountSpecifiedAmountOutput) ToBudgetAmountSpecifiedAmountOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountOutput {
	return o
}

func (o BudgetAmountSpecifiedAmountOutput) ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput {
	return o.ToBudgetAmountSpecifiedAmountPtrOutputWithContext(context.Background())
}

func (o BudgetAmountSpecifiedAmountOutput) ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetAmountSpecifiedAmount) *BudgetAmountSpecifiedAmount {
		return &v
	}).(BudgetAmountSpecifiedAmountPtrOutput)
}

// The 3-letter currency code defined in ISO 4217.
func (o BudgetAmountSpecifiedAmountOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetAmountSpecifiedAmount) *string { return v.CurrencyCode }).(pulumi.StringPtrOutput)
}

// Number of nano (10^-9) units of the amount.
// The value must be between -999,999,999 and +999,999,999
// inclusive. If units is positive, nanos must be positive or
// zero. If units is zero, nanos can be positive, zero, or
// negative. If units is negative, nanos must be negative or
// zero. For example $-1.75 is represented as units=-1 and
// nanos=-750,000,000.
func (o BudgetAmountSpecifiedAmountOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BudgetAmountSpecifiedAmount) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// The whole units of the amount. For example if currencyCode
// is "USD", then 1 unit is one US dollar.
func (o BudgetAmountSpecifiedAmountOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetAmountSpecifiedAmount) *string { return v.Units }).(pulumi.StringPtrOutput)
}

type BudgetAmountSpecifiedAmountPtrOutput struct{ *pulumi.OutputState }

func (BudgetAmountSpecifiedAmountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAmountSpecifiedAmount)(nil)).Elem()
}

func (o BudgetAmountSpecifiedAmountPtrOutput) ToBudgetAmountSpecifiedAmountPtrOutput() BudgetAmountSpecifiedAmountPtrOutput {
	return o
}

func (o BudgetAmountSpecifiedAmountPtrOutput) ToBudgetAmountSpecifiedAmountPtrOutputWithContext(ctx context.Context) BudgetAmountSpecifiedAmountPtrOutput {
	return o
}

func (o BudgetAmountSpecifiedAmountPtrOutput) Elem() BudgetAmountSpecifiedAmountOutput {
	return o.ApplyT(func(v *BudgetAmountSpecifiedAmount) BudgetAmountSpecifiedAmount {
		if v != nil {
			return *v
		}
		var ret BudgetAmountSpecifiedAmount
		return ret
	}).(BudgetAmountSpecifiedAmountOutput)
}

// The 3-letter currency code defined in ISO 4217.
func (o BudgetAmountSpecifiedAmountPtrOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAmountSpecifiedAmount) *string {
		if v == nil {
			return nil
		}
		return v.CurrencyCode
	}).(pulumi.StringPtrOutput)
}

// Number of nano (10^-9) units of the amount.
// The value must be between -999,999,999 and +999,999,999
// inclusive. If units is positive, nanos must be positive or
// zero. If units is zero, nanos can be positive, zero, or
// negative. If units is negative, nanos must be negative or
// zero. For example $-1.75 is represented as units=-1 and
// nanos=-750,000,000.
func (o BudgetAmountSpecifiedAmountPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetAmountSpecifiedAmount) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// The whole units of the amount. For example if currencyCode
// is "USD", then 1 unit is one US dollar.
func (o BudgetAmountSpecifiedAmountPtrOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAmountSpecifiedAmount) *string {
		if v == nil {
			return nil
		}
		return v.Units
	}).(pulumi.StringPtrOutput)
}

type BudgetBudgetFilter struct {
	// A CalendarPeriod represents the abstract concept of a recurring time period that has a
	// canonical start. Grammatically, "the start of the current CalendarPeriod".
	// All calendar times begin at 12 AM US and Canadian Pacific Time (UTC-8).
	// Exactly one of `calendarPeriod`, `customPeriod` must be provided.
	// Possible values are `MONTH`, `QUARTER`, `YEAR`, and `CALENDAR_PERIOD_UNSPECIFIED`.
	CalendarPeriod *string `pulumi:"calendarPeriod"`
	// Optional. If creditTypesTreatment is INCLUDE_SPECIFIED_CREDITS,
	// this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See a list of acceptable credit type values.
	// If creditTypesTreatment is not INCLUDE_SPECIFIED_CREDITS, this field must be empty.
	CreditTypes []string `pulumi:"creditTypes"`
	// Specifies how credits should be treated when determining spend
	// for threshold calculations.
	// Default value is `INCLUDE_ALL_CREDITS`.
	// Possible values are `INCLUDE_ALL_CREDITS`, `EXCLUDE_ALL_CREDITS`, and `INCLUDE_SPECIFIED_CREDITS`.
	CreditTypesTreatment *string `pulumi:"creditTypesTreatment"`
	// Specifies to track usage from any start date (required) to any end date (optional).
	// This time period is static, it does not recur.
	// Exactly one of `calendarPeriod`, `customPeriod` must be provided.
	// Structure is documented below.
	CustomPeriod *BudgetBudgetFilterCustomPeriod `pulumi:"customPeriod"`
	// A single label and value pair specifying that usage from only
	// this set of labeled resources should be included in the budget.
	Labels map[string]string `pulumi:"labels"`
	// A set of projects of the form projects/{project_number},
	// specifying that usage from only this set of projects should be
	// included in the budget. If omitted, the report will include
	// all usage for the billing account, regardless of which project
	// the usage occurred on.
	Projects []string `pulumi:"projects"`
	// A set of services of the form services/{service_id},
	// specifying that usage from only this set of services should be
	// included in the budget. If omitted, the report will include
	// usage for all the services. The service names are available
	// through the Catalog API:
	// https://cloud.google.com/billing/v1/how-tos/catalog-api.
	Services []string `pulumi:"services"`
	// A set of subaccounts of the form billingAccounts/{account_id},
	// specifying that usage from only this set of subaccounts should
	// be included in the budget. If a subaccount is set to the name of
	// the parent account, usage from the parent account will be included.
	// If the field is omitted, the report will include usage from the parent
	// account and all subaccounts, if they exist.
	Subaccounts []string `pulumi:"subaccounts"`
}

// BudgetBudgetFilterInput is an input type that accepts BudgetBudgetFilterArgs and BudgetBudgetFilterOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterInput` via:
//
//          BudgetBudgetFilterArgs{...}
type BudgetBudgetFilterInput interface {
	pulumi.Input

	ToBudgetBudgetFilterOutput() BudgetBudgetFilterOutput
	ToBudgetBudgetFilterOutputWithContext(context.Context) BudgetBudgetFilterOutput
}

type BudgetBudgetFilterArgs struct {
	// A CalendarPeriod represents the abstract concept of a recurring time period that has a
	// canonical start. Grammatically, "the start of the current CalendarPeriod".
	// All calendar times begin at 12 AM US and Canadian Pacific Time (UTC-8).
	// Exactly one of `calendarPeriod`, `customPeriod` must be provided.
	// Possible values are `MONTH`, `QUARTER`, `YEAR`, and `CALENDAR_PERIOD_UNSPECIFIED`.
	CalendarPeriod pulumi.StringPtrInput `pulumi:"calendarPeriod"`
	// Optional. If creditTypesTreatment is INCLUDE_SPECIFIED_CREDITS,
	// this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See a list of acceptable credit type values.
	// If creditTypesTreatment is not INCLUDE_SPECIFIED_CREDITS, this field must be empty.
	CreditTypes pulumi.StringArrayInput `pulumi:"creditTypes"`
	// Specifies how credits should be treated when determining spend
	// for threshold calculations.
	// Default value is `INCLUDE_ALL_CREDITS`.
	// Possible values are `INCLUDE_ALL_CREDITS`, `EXCLUDE_ALL_CREDITS`, and `INCLUDE_SPECIFIED_CREDITS`.
	CreditTypesTreatment pulumi.StringPtrInput `pulumi:"creditTypesTreatment"`
	// Specifies to track usage from any start date (required) to any end date (optional).
	// This time period is static, it does not recur.
	// Exactly one of `calendarPeriod`, `customPeriod` must be provided.
	// Structure is documented below.
	CustomPeriod BudgetBudgetFilterCustomPeriodPtrInput `pulumi:"customPeriod"`
	// A single label and value pair specifying that usage from only
	// this set of labeled resources should be included in the budget.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// A set of projects of the form projects/{project_number},
	// specifying that usage from only this set of projects should be
	// included in the budget. If omitted, the report will include
	// all usage for the billing account, regardless of which project
	// the usage occurred on.
	Projects pulumi.StringArrayInput `pulumi:"projects"`
	// A set of services of the form services/{service_id},
	// specifying that usage from only this set of services should be
	// included in the budget. If omitted, the report will include
	// usage for all the services. The service names are available
	// through the Catalog API:
	// https://cloud.google.com/billing/v1/how-tos/catalog-api.
	Services pulumi.StringArrayInput `pulumi:"services"`
	// A set of subaccounts of the form billingAccounts/{account_id},
	// specifying that usage from only this set of subaccounts should
	// be included in the budget. If a subaccount is set to the name of
	// the parent account, usage from the parent account will be included.
	// If the field is omitted, the report will include usage from the parent
	// account and all subaccounts, if they exist.
	Subaccounts pulumi.StringArrayInput `pulumi:"subaccounts"`
}

func (BudgetBudgetFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilter)(nil)).Elem()
}

func (i BudgetBudgetFilterArgs) ToBudgetBudgetFilterOutput() BudgetBudgetFilterOutput {
	return i.ToBudgetBudgetFilterOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterArgs) ToBudgetBudgetFilterOutputWithContext(ctx context.Context) BudgetBudgetFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterOutput)
}

func (i BudgetBudgetFilterArgs) ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput {
	return i.ToBudgetBudgetFilterPtrOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterArgs) ToBudgetBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterOutput).ToBudgetBudgetFilterPtrOutputWithContext(ctx)
}

// BudgetBudgetFilterPtrInput is an input type that accepts BudgetBudgetFilterArgs, BudgetBudgetFilterPtr and BudgetBudgetFilterPtrOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterPtrInput` via:
//
//          BudgetBudgetFilterArgs{...}
//
//  or:
//
//          nil
type BudgetBudgetFilterPtrInput interface {
	pulumi.Input

	ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput
	ToBudgetBudgetFilterPtrOutputWithContext(context.Context) BudgetBudgetFilterPtrOutput
}

type budgetBudgetFilterPtrType BudgetBudgetFilterArgs

func BudgetBudgetFilterPtr(v *BudgetBudgetFilterArgs) BudgetBudgetFilterPtrInput {
	return (*budgetBudgetFilterPtrType)(v)
}

func (*budgetBudgetFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilter)(nil)).Elem()
}

func (i *budgetBudgetFilterPtrType) ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput {
	return i.ToBudgetBudgetFilterPtrOutputWithContext(context.Background())
}

func (i *budgetBudgetFilterPtrType) ToBudgetBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterPtrOutput)
}

type BudgetBudgetFilterOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilter)(nil)).Elem()
}

func (o BudgetBudgetFilterOutput) ToBudgetBudgetFilterOutput() BudgetBudgetFilterOutput {
	return o
}

func (o BudgetBudgetFilterOutput) ToBudgetBudgetFilterOutputWithContext(ctx context.Context) BudgetBudgetFilterOutput {
	return o
}

func (o BudgetBudgetFilterOutput) ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput {
	return o.ToBudgetBudgetFilterPtrOutputWithContext(context.Background())
}

func (o BudgetBudgetFilterOutput) ToBudgetBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetBudgetFilter) *BudgetBudgetFilter {
		return &v
	}).(BudgetBudgetFilterPtrOutput)
}

// A CalendarPeriod represents the abstract concept of a recurring time period that has a
// canonical start. Grammatically, "the start of the current CalendarPeriod".
// All calendar times begin at 12 AM US and Canadian Pacific Time (UTC-8).
// Exactly one of `calendarPeriod`, `customPeriod` must be provided.
// Possible values are `MONTH`, `QUARTER`, `YEAR`, and `CALENDAR_PERIOD_UNSPECIFIED`.
func (o BudgetBudgetFilterOutput) CalendarPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) *string { return v.CalendarPeriod }).(pulumi.StringPtrOutput)
}

// Optional. If creditTypesTreatment is INCLUDE_SPECIFIED_CREDITS,
// this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See a list of acceptable credit type values.
// If creditTypesTreatment is not INCLUDE_SPECIFIED_CREDITS, this field must be empty.
func (o BudgetBudgetFilterOutput) CreditTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) []string { return v.CreditTypes }).(pulumi.StringArrayOutput)
}

// Specifies how credits should be treated when determining spend
// for threshold calculations.
// Default value is `INCLUDE_ALL_CREDITS`.
// Possible values are `INCLUDE_ALL_CREDITS`, `EXCLUDE_ALL_CREDITS`, and `INCLUDE_SPECIFIED_CREDITS`.
func (o BudgetBudgetFilterOutput) CreditTypesTreatment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) *string { return v.CreditTypesTreatment }).(pulumi.StringPtrOutput)
}

// Specifies to track usage from any start date (required) to any end date (optional).
// This time period is static, it does not recur.
// Exactly one of `calendarPeriod`, `customPeriod` must be provided.
// Structure is documented below.
func (o BudgetBudgetFilterOutput) CustomPeriod() BudgetBudgetFilterCustomPeriodPtrOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) *BudgetBudgetFilterCustomPeriod { return v.CustomPeriod }).(BudgetBudgetFilterCustomPeriodPtrOutput)
}

// A single label and value pair specifying that usage from only
// this set of labeled resources should be included in the budget.
func (o BudgetBudgetFilterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// A set of projects of the form projects/{project_number},
// specifying that usage from only this set of projects should be
// included in the budget. If omitted, the report will include
// all usage for the billing account, regardless of which project
// the usage occurred on.
func (o BudgetBudgetFilterOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) []string { return v.Projects }).(pulumi.StringArrayOutput)
}

// A set of services of the form services/{service_id},
// specifying that usage from only this set of services should be
// included in the budget. If omitted, the report will include
// usage for all the services. The service names are available
// through the Catalog API:
// https://cloud.google.com/billing/v1/how-tos/catalog-api.
func (o BudgetBudgetFilterOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) []string { return v.Services }).(pulumi.StringArrayOutput)
}

// A set of subaccounts of the form billingAccounts/{account_id},
// specifying that usage from only this set of subaccounts should
// be included in the budget. If a subaccount is set to the name of
// the parent account, usage from the parent account will be included.
// If the field is omitted, the report will include usage from the parent
// account and all subaccounts, if they exist.
func (o BudgetBudgetFilterOutput) Subaccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetBudgetFilter) []string { return v.Subaccounts }).(pulumi.StringArrayOutput)
}

type BudgetBudgetFilterPtrOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilter)(nil)).Elem()
}

func (o BudgetBudgetFilterPtrOutput) ToBudgetBudgetFilterPtrOutput() BudgetBudgetFilterPtrOutput {
	return o
}

func (o BudgetBudgetFilterPtrOutput) ToBudgetBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterPtrOutput {
	return o
}

func (o BudgetBudgetFilterPtrOutput) Elem() BudgetBudgetFilterOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) BudgetBudgetFilter {
		if v != nil {
			return *v
		}
		var ret BudgetBudgetFilter
		return ret
	}).(BudgetBudgetFilterOutput)
}

// A CalendarPeriod represents the abstract concept of a recurring time period that has a
// canonical start. Grammatically, "the start of the current CalendarPeriod".
// All calendar times begin at 12 AM US and Canadian Pacific Time (UTC-8).
// Exactly one of `calendarPeriod`, `customPeriod` must be provided.
// Possible values are `MONTH`, `QUARTER`, `YEAR`, and `CALENDAR_PERIOD_UNSPECIFIED`.
func (o BudgetBudgetFilterPtrOutput) CalendarPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) *string {
		if v == nil {
			return nil
		}
		return v.CalendarPeriod
	}).(pulumi.StringPtrOutput)
}

// Optional. If creditTypesTreatment is INCLUDE_SPECIFIED_CREDITS,
// this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See a list of acceptable credit type values.
// If creditTypesTreatment is not INCLUDE_SPECIFIED_CREDITS, this field must be empty.
func (o BudgetBudgetFilterPtrOutput) CreditTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) []string {
		if v == nil {
			return nil
		}
		return v.CreditTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies how credits should be treated when determining spend
// for threshold calculations.
// Default value is `INCLUDE_ALL_CREDITS`.
// Possible values are `INCLUDE_ALL_CREDITS`, `EXCLUDE_ALL_CREDITS`, and `INCLUDE_SPECIFIED_CREDITS`.
func (o BudgetBudgetFilterPtrOutput) CreditTypesTreatment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) *string {
		if v == nil {
			return nil
		}
		return v.CreditTypesTreatment
	}).(pulumi.StringPtrOutput)
}

// Specifies to track usage from any start date (required) to any end date (optional).
// This time period is static, it does not recur.
// Exactly one of `calendarPeriod`, `customPeriod` must be provided.
// Structure is documented below.
func (o BudgetBudgetFilterPtrOutput) CustomPeriod() BudgetBudgetFilterCustomPeriodPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) *BudgetBudgetFilterCustomPeriod {
		if v == nil {
			return nil
		}
		return v.CustomPeriod
	}).(BudgetBudgetFilterCustomPeriodPtrOutput)
}

// A single label and value pair specifying that usage from only
// this set of labeled resources should be included in the budget.
func (o BudgetBudgetFilterPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// A set of projects of the form projects/{project_number},
// specifying that usage from only this set of projects should be
// included in the budget. If omitted, the report will include
// all usage for the billing account, regardless of which project
// the usage occurred on.
func (o BudgetBudgetFilterPtrOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) []string {
		if v == nil {
			return nil
		}
		return v.Projects
	}).(pulumi.StringArrayOutput)
}

// A set of services of the form services/{service_id},
// specifying that usage from only this set of services should be
// included in the budget. If omitted, the report will include
// usage for all the services. The service names are available
// through the Catalog API:
// https://cloud.google.com/billing/v1/how-tos/catalog-api.
func (o BudgetBudgetFilterPtrOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) []string {
		if v == nil {
			return nil
		}
		return v.Services
	}).(pulumi.StringArrayOutput)
}

// A set of subaccounts of the form billingAccounts/{account_id},
// specifying that usage from only this set of subaccounts should
// be included in the budget. If a subaccount is set to the name of
// the parent account, usage from the parent account will be included.
// If the field is omitted, the report will include usage from the parent
// account and all subaccounts, if they exist.
func (o BudgetBudgetFilterPtrOutput) Subaccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetBudgetFilter) []string {
		if v == nil {
			return nil
		}
		return v.Subaccounts
	}).(pulumi.StringArrayOutput)
}

type BudgetBudgetFilterCustomPeriod struct {
	// Optional. The end date of the time period. Budgets with elapsed end date won't be processed.
	// If unset, specifies to track all usage incurred since the startDate.
	// Structure is documented below.
	EndDate *BudgetBudgetFilterCustomPeriodEndDate `pulumi:"endDate"`
	// A start date is required. The start date must be after January 1, 2017.
	// Structure is documented below.
	StartDate BudgetBudgetFilterCustomPeriodStartDate `pulumi:"startDate"`
}

// BudgetBudgetFilterCustomPeriodInput is an input type that accepts BudgetBudgetFilterCustomPeriodArgs and BudgetBudgetFilterCustomPeriodOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterCustomPeriodInput` via:
//
//          BudgetBudgetFilterCustomPeriodArgs{...}
type BudgetBudgetFilterCustomPeriodInput interface {
	pulumi.Input

	ToBudgetBudgetFilterCustomPeriodOutput() BudgetBudgetFilterCustomPeriodOutput
	ToBudgetBudgetFilterCustomPeriodOutputWithContext(context.Context) BudgetBudgetFilterCustomPeriodOutput
}

type BudgetBudgetFilterCustomPeriodArgs struct {
	// Optional. The end date of the time period. Budgets with elapsed end date won't be processed.
	// If unset, specifies to track all usage incurred since the startDate.
	// Structure is documented below.
	EndDate BudgetBudgetFilterCustomPeriodEndDatePtrInput `pulumi:"endDate"`
	// A start date is required. The start date must be after January 1, 2017.
	// Structure is documented below.
	StartDate BudgetBudgetFilterCustomPeriodStartDateInput `pulumi:"startDate"`
}

func (BudgetBudgetFilterCustomPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilterCustomPeriod)(nil)).Elem()
}

func (i BudgetBudgetFilterCustomPeriodArgs) ToBudgetBudgetFilterCustomPeriodOutput() BudgetBudgetFilterCustomPeriodOutput {
	return i.ToBudgetBudgetFilterCustomPeriodOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterCustomPeriodArgs) ToBudgetBudgetFilterCustomPeriodOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodOutput)
}

func (i BudgetBudgetFilterCustomPeriodArgs) ToBudgetBudgetFilterCustomPeriodPtrOutput() BudgetBudgetFilterCustomPeriodPtrOutput {
	return i.ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterCustomPeriodArgs) ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodOutput).ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(ctx)
}

// BudgetBudgetFilterCustomPeriodPtrInput is an input type that accepts BudgetBudgetFilterCustomPeriodArgs, BudgetBudgetFilterCustomPeriodPtr and BudgetBudgetFilterCustomPeriodPtrOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterCustomPeriodPtrInput` via:
//
//          BudgetBudgetFilterCustomPeriodArgs{...}
//
//  or:
//
//          nil
type BudgetBudgetFilterCustomPeriodPtrInput interface {
	pulumi.Input

	ToBudgetBudgetFilterCustomPeriodPtrOutput() BudgetBudgetFilterCustomPeriodPtrOutput
	ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(context.Context) BudgetBudgetFilterCustomPeriodPtrOutput
}

type budgetBudgetFilterCustomPeriodPtrType BudgetBudgetFilterCustomPeriodArgs

func BudgetBudgetFilterCustomPeriodPtr(v *BudgetBudgetFilterCustomPeriodArgs) BudgetBudgetFilterCustomPeriodPtrInput {
	return (*budgetBudgetFilterCustomPeriodPtrType)(v)
}

func (*budgetBudgetFilterCustomPeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilterCustomPeriod)(nil)).Elem()
}

func (i *budgetBudgetFilterCustomPeriodPtrType) ToBudgetBudgetFilterCustomPeriodPtrOutput() BudgetBudgetFilterCustomPeriodPtrOutput {
	return i.ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(context.Background())
}

func (i *budgetBudgetFilterCustomPeriodPtrType) ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodPtrOutput)
}

type BudgetBudgetFilterCustomPeriodOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterCustomPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilterCustomPeriod)(nil)).Elem()
}

func (o BudgetBudgetFilterCustomPeriodOutput) ToBudgetBudgetFilterCustomPeriodOutput() BudgetBudgetFilterCustomPeriodOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodOutput) ToBudgetBudgetFilterCustomPeriodOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodOutput) ToBudgetBudgetFilterCustomPeriodPtrOutput() BudgetBudgetFilterCustomPeriodPtrOutput {
	return o.ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(context.Background())
}

func (o BudgetBudgetFilterCustomPeriodOutput) ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetBudgetFilterCustomPeriod) *BudgetBudgetFilterCustomPeriod {
		return &v
	}).(BudgetBudgetFilterCustomPeriodPtrOutput)
}

// Optional. The end date of the time period. Budgets with elapsed end date won't be processed.
// If unset, specifies to track all usage incurred since the startDate.
// Structure is documented below.
func (o BudgetBudgetFilterCustomPeriodOutput) EndDate() BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return o.ApplyT(func(v BudgetBudgetFilterCustomPeriod) *BudgetBudgetFilterCustomPeriodEndDate { return v.EndDate }).(BudgetBudgetFilterCustomPeriodEndDatePtrOutput)
}

// A start date is required. The start date must be after January 1, 2017.
// Structure is documented below.
func (o BudgetBudgetFilterCustomPeriodOutput) StartDate() BudgetBudgetFilterCustomPeriodStartDateOutput {
	return o.ApplyT(func(v BudgetBudgetFilterCustomPeriod) BudgetBudgetFilterCustomPeriodStartDate { return v.StartDate }).(BudgetBudgetFilterCustomPeriodStartDateOutput)
}

type BudgetBudgetFilterCustomPeriodPtrOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterCustomPeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilterCustomPeriod)(nil)).Elem()
}

func (o BudgetBudgetFilterCustomPeriodPtrOutput) ToBudgetBudgetFilterCustomPeriodPtrOutput() BudgetBudgetFilterCustomPeriodPtrOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodPtrOutput) ToBudgetBudgetFilterCustomPeriodPtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodPtrOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodPtrOutput) Elem() BudgetBudgetFilterCustomPeriodOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriod) BudgetBudgetFilterCustomPeriod {
		if v != nil {
			return *v
		}
		var ret BudgetBudgetFilterCustomPeriod
		return ret
	}).(BudgetBudgetFilterCustomPeriodOutput)
}

// Optional. The end date of the time period. Budgets with elapsed end date won't be processed.
// If unset, specifies to track all usage incurred since the startDate.
// Structure is documented below.
func (o BudgetBudgetFilterCustomPeriodPtrOutput) EndDate() BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriod) *BudgetBudgetFilterCustomPeriodEndDate {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(BudgetBudgetFilterCustomPeriodEndDatePtrOutput)
}

// A start date is required. The start date must be after January 1, 2017.
// Structure is documented below.
func (o BudgetBudgetFilterCustomPeriodPtrOutput) StartDate() BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriod) *BudgetBudgetFilterCustomPeriodStartDate {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(BudgetBudgetFilterCustomPeriodStartDatePtrOutput)
}

type BudgetBudgetFilterCustomPeriodEndDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month.
	Day int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12.
	Month int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999.
	Year int `pulumi:"year"`
}

// BudgetBudgetFilterCustomPeriodEndDateInput is an input type that accepts BudgetBudgetFilterCustomPeriodEndDateArgs and BudgetBudgetFilterCustomPeriodEndDateOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterCustomPeriodEndDateInput` via:
//
//          BudgetBudgetFilterCustomPeriodEndDateArgs{...}
type BudgetBudgetFilterCustomPeriodEndDateInput interface {
	pulumi.Input

	ToBudgetBudgetFilterCustomPeriodEndDateOutput() BudgetBudgetFilterCustomPeriodEndDateOutput
	ToBudgetBudgetFilterCustomPeriodEndDateOutputWithContext(context.Context) BudgetBudgetFilterCustomPeriodEndDateOutput
}

type BudgetBudgetFilterCustomPeriodEndDateArgs struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month.
	Day pulumi.IntInput `pulumi:"day"`
	// Month of a year. Must be from 1 to 12.
	Month pulumi.IntInput `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999.
	Year pulumi.IntInput `pulumi:"year"`
}

func (BudgetBudgetFilterCustomPeriodEndDateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilterCustomPeriodEndDate)(nil)).Elem()
}

func (i BudgetBudgetFilterCustomPeriodEndDateArgs) ToBudgetBudgetFilterCustomPeriodEndDateOutput() BudgetBudgetFilterCustomPeriodEndDateOutput {
	return i.ToBudgetBudgetFilterCustomPeriodEndDateOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterCustomPeriodEndDateArgs) ToBudgetBudgetFilterCustomPeriodEndDateOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodEndDateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodEndDateOutput)
}

func (i BudgetBudgetFilterCustomPeriodEndDateArgs) ToBudgetBudgetFilterCustomPeriodEndDatePtrOutput() BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return i.ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterCustomPeriodEndDateArgs) ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodEndDateOutput).ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(ctx)
}

// BudgetBudgetFilterCustomPeriodEndDatePtrInput is an input type that accepts BudgetBudgetFilterCustomPeriodEndDateArgs, BudgetBudgetFilterCustomPeriodEndDatePtr and BudgetBudgetFilterCustomPeriodEndDatePtrOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterCustomPeriodEndDatePtrInput` via:
//
//          BudgetBudgetFilterCustomPeriodEndDateArgs{...}
//
//  or:
//
//          nil
type BudgetBudgetFilterCustomPeriodEndDatePtrInput interface {
	pulumi.Input

	ToBudgetBudgetFilterCustomPeriodEndDatePtrOutput() BudgetBudgetFilterCustomPeriodEndDatePtrOutput
	ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(context.Context) BudgetBudgetFilterCustomPeriodEndDatePtrOutput
}

type budgetBudgetFilterCustomPeriodEndDatePtrType BudgetBudgetFilterCustomPeriodEndDateArgs

func BudgetBudgetFilterCustomPeriodEndDatePtr(v *BudgetBudgetFilterCustomPeriodEndDateArgs) BudgetBudgetFilterCustomPeriodEndDatePtrInput {
	return (*budgetBudgetFilterCustomPeriodEndDatePtrType)(v)
}

func (*budgetBudgetFilterCustomPeriodEndDatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilterCustomPeriodEndDate)(nil)).Elem()
}

func (i *budgetBudgetFilterCustomPeriodEndDatePtrType) ToBudgetBudgetFilterCustomPeriodEndDatePtrOutput() BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return i.ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(context.Background())
}

func (i *budgetBudgetFilterCustomPeriodEndDatePtrType) ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodEndDatePtrOutput)
}

type BudgetBudgetFilterCustomPeriodEndDateOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterCustomPeriodEndDateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilterCustomPeriodEndDate)(nil)).Elem()
}

func (o BudgetBudgetFilterCustomPeriodEndDateOutput) ToBudgetBudgetFilterCustomPeriodEndDateOutput() BudgetBudgetFilterCustomPeriodEndDateOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodEndDateOutput) ToBudgetBudgetFilterCustomPeriodEndDateOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodEndDateOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodEndDateOutput) ToBudgetBudgetFilterCustomPeriodEndDatePtrOutput() BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return o.ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(context.Background())
}

func (o BudgetBudgetFilterCustomPeriodEndDateOutput) ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetBudgetFilterCustomPeriodEndDate) *BudgetBudgetFilterCustomPeriodEndDate {
		return &v
	}).(BudgetBudgetFilterCustomPeriodEndDatePtrOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month.
func (o BudgetBudgetFilterCustomPeriodEndDateOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v BudgetBudgetFilterCustomPeriodEndDate) int { return v.Day }).(pulumi.IntOutput)
}

// Month of a year. Must be from 1 to 12.
func (o BudgetBudgetFilterCustomPeriodEndDateOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v BudgetBudgetFilterCustomPeriodEndDate) int { return v.Month }).(pulumi.IntOutput)
}

// Year of the date. Must be from 1 to 9999.
func (o BudgetBudgetFilterCustomPeriodEndDateOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v BudgetBudgetFilterCustomPeriodEndDate) int { return v.Year }).(pulumi.IntOutput)
}

type BudgetBudgetFilterCustomPeriodEndDatePtrOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterCustomPeriodEndDatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilterCustomPeriodEndDate)(nil)).Elem()
}

func (o BudgetBudgetFilterCustomPeriodEndDatePtrOutput) ToBudgetBudgetFilterCustomPeriodEndDatePtrOutput() BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodEndDatePtrOutput) ToBudgetBudgetFilterCustomPeriodEndDatePtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodEndDatePtrOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodEndDatePtrOutput) Elem() BudgetBudgetFilterCustomPeriodEndDateOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriodEndDate) BudgetBudgetFilterCustomPeriodEndDate {
		if v != nil {
			return *v
		}
		var ret BudgetBudgetFilterCustomPeriodEndDate
		return ret
	}).(BudgetBudgetFilterCustomPeriodEndDateOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month.
func (o BudgetBudgetFilterCustomPeriodEndDatePtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriodEndDate) *int {
		if v == nil {
			return nil
		}
		return &v.Day
	}).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12.
func (o BudgetBudgetFilterCustomPeriodEndDatePtrOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriodEndDate) *int {
		if v == nil {
			return nil
		}
		return &v.Month
	}).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999.
func (o BudgetBudgetFilterCustomPeriodEndDatePtrOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriodEndDate) *int {
		if v == nil {
			return nil
		}
		return &v.Year
	}).(pulumi.IntPtrOutput)
}

type BudgetBudgetFilterCustomPeriodStartDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month.
	Day int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12.
	Month int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999.
	Year int `pulumi:"year"`
}

// BudgetBudgetFilterCustomPeriodStartDateInput is an input type that accepts BudgetBudgetFilterCustomPeriodStartDateArgs and BudgetBudgetFilterCustomPeriodStartDateOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterCustomPeriodStartDateInput` via:
//
//          BudgetBudgetFilterCustomPeriodStartDateArgs{...}
type BudgetBudgetFilterCustomPeriodStartDateInput interface {
	pulumi.Input

	ToBudgetBudgetFilterCustomPeriodStartDateOutput() BudgetBudgetFilterCustomPeriodStartDateOutput
	ToBudgetBudgetFilterCustomPeriodStartDateOutputWithContext(context.Context) BudgetBudgetFilterCustomPeriodStartDateOutput
}

type BudgetBudgetFilterCustomPeriodStartDateArgs struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month.
	Day pulumi.IntInput `pulumi:"day"`
	// Month of a year. Must be from 1 to 12.
	Month pulumi.IntInput `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999.
	Year pulumi.IntInput `pulumi:"year"`
}

func (BudgetBudgetFilterCustomPeriodStartDateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilterCustomPeriodStartDate)(nil)).Elem()
}

func (i BudgetBudgetFilterCustomPeriodStartDateArgs) ToBudgetBudgetFilterCustomPeriodStartDateOutput() BudgetBudgetFilterCustomPeriodStartDateOutput {
	return i.ToBudgetBudgetFilterCustomPeriodStartDateOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterCustomPeriodStartDateArgs) ToBudgetBudgetFilterCustomPeriodStartDateOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodStartDateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodStartDateOutput)
}

func (i BudgetBudgetFilterCustomPeriodStartDateArgs) ToBudgetBudgetFilterCustomPeriodStartDatePtrOutput() BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return i.ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(context.Background())
}

func (i BudgetBudgetFilterCustomPeriodStartDateArgs) ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodStartDateOutput).ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(ctx)
}

// BudgetBudgetFilterCustomPeriodStartDatePtrInput is an input type that accepts BudgetBudgetFilterCustomPeriodStartDateArgs, BudgetBudgetFilterCustomPeriodStartDatePtr and BudgetBudgetFilterCustomPeriodStartDatePtrOutput values.
// You can construct a concrete instance of `BudgetBudgetFilterCustomPeriodStartDatePtrInput` via:
//
//          BudgetBudgetFilterCustomPeriodStartDateArgs{...}
//
//  or:
//
//          nil
type BudgetBudgetFilterCustomPeriodStartDatePtrInput interface {
	pulumi.Input

	ToBudgetBudgetFilterCustomPeriodStartDatePtrOutput() BudgetBudgetFilterCustomPeriodStartDatePtrOutput
	ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(context.Context) BudgetBudgetFilterCustomPeriodStartDatePtrOutput
}

type budgetBudgetFilterCustomPeriodStartDatePtrType BudgetBudgetFilterCustomPeriodStartDateArgs

func BudgetBudgetFilterCustomPeriodStartDatePtr(v *BudgetBudgetFilterCustomPeriodStartDateArgs) BudgetBudgetFilterCustomPeriodStartDatePtrInput {
	return (*budgetBudgetFilterCustomPeriodStartDatePtrType)(v)
}

func (*budgetBudgetFilterCustomPeriodStartDatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilterCustomPeriodStartDate)(nil)).Elem()
}

func (i *budgetBudgetFilterCustomPeriodStartDatePtrType) ToBudgetBudgetFilterCustomPeriodStartDatePtrOutput() BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return i.ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(context.Background())
}

func (i *budgetBudgetFilterCustomPeriodStartDatePtrType) ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetBudgetFilterCustomPeriodStartDatePtrOutput)
}

type BudgetBudgetFilterCustomPeriodStartDateOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterCustomPeriodStartDateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetBudgetFilterCustomPeriodStartDate)(nil)).Elem()
}

func (o BudgetBudgetFilterCustomPeriodStartDateOutput) ToBudgetBudgetFilterCustomPeriodStartDateOutput() BudgetBudgetFilterCustomPeriodStartDateOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodStartDateOutput) ToBudgetBudgetFilterCustomPeriodStartDateOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodStartDateOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodStartDateOutput) ToBudgetBudgetFilterCustomPeriodStartDatePtrOutput() BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return o.ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(context.Background())
}

func (o BudgetBudgetFilterCustomPeriodStartDateOutput) ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetBudgetFilterCustomPeriodStartDate) *BudgetBudgetFilterCustomPeriodStartDate {
		return &v
	}).(BudgetBudgetFilterCustomPeriodStartDatePtrOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month.
func (o BudgetBudgetFilterCustomPeriodStartDateOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v BudgetBudgetFilterCustomPeriodStartDate) int { return v.Day }).(pulumi.IntOutput)
}

// Month of a year. Must be from 1 to 12.
func (o BudgetBudgetFilterCustomPeriodStartDateOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v BudgetBudgetFilterCustomPeriodStartDate) int { return v.Month }).(pulumi.IntOutput)
}

// Year of the date. Must be from 1 to 9999.
func (o BudgetBudgetFilterCustomPeriodStartDateOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v BudgetBudgetFilterCustomPeriodStartDate) int { return v.Year }).(pulumi.IntOutput)
}

type BudgetBudgetFilterCustomPeriodStartDatePtrOutput struct{ *pulumi.OutputState }

func (BudgetBudgetFilterCustomPeriodStartDatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetBudgetFilterCustomPeriodStartDate)(nil)).Elem()
}

func (o BudgetBudgetFilterCustomPeriodStartDatePtrOutput) ToBudgetBudgetFilterCustomPeriodStartDatePtrOutput() BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodStartDatePtrOutput) ToBudgetBudgetFilterCustomPeriodStartDatePtrOutputWithContext(ctx context.Context) BudgetBudgetFilterCustomPeriodStartDatePtrOutput {
	return o
}

func (o BudgetBudgetFilterCustomPeriodStartDatePtrOutput) Elem() BudgetBudgetFilterCustomPeriodStartDateOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriodStartDate) BudgetBudgetFilterCustomPeriodStartDate {
		if v != nil {
			return *v
		}
		var ret BudgetBudgetFilterCustomPeriodStartDate
		return ret
	}).(BudgetBudgetFilterCustomPeriodStartDateOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month.
func (o BudgetBudgetFilterCustomPeriodStartDatePtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriodStartDate) *int {
		if v == nil {
			return nil
		}
		return &v.Day
	}).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12.
func (o BudgetBudgetFilterCustomPeriodStartDatePtrOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriodStartDate) *int {
		if v == nil {
			return nil
		}
		return &v.Month
	}).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999.
func (o BudgetBudgetFilterCustomPeriodStartDatePtrOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetBudgetFilterCustomPeriodStartDate) *int {
		if v == nil {
			return nil
		}
		return &v.Year
	}).(pulumi.IntPtrOutput)
}

type BudgetThresholdRule struct {
	// The type of basis used to determine if spend has passed
	// the threshold.
	// Default value is `CURRENT_SPEND`.
	// Possible values are `CURRENT_SPEND` and `FORECASTED_SPEND`.
	SpendBasis *string `pulumi:"spendBasis"`
	// Send an alert when this threshold is exceeded. This is a
	// 1.0-based percentage, so 0.5 = 50%. Must be >= 0.
	ThresholdPercent float64 `pulumi:"thresholdPercent"`
}

// BudgetThresholdRuleInput is an input type that accepts BudgetThresholdRuleArgs and BudgetThresholdRuleOutput values.
// You can construct a concrete instance of `BudgetThresholdRuleInput` via:
//
//          BudgetThresholdRuleArgs{...}
type BudgetThresholdRuleInput interface {
	pulumi.Input

	ToBudgetThresholdRuleOutput() BudgetThresholdRuleOutput
	ToBudgetThresholdRuleOutputWithContext(context.Context) BudgetThresholdRuleOutput
}

type BudgetThresholdRuleArgs struct {
	// The type of basis used to determine if spend has passed
	// the threshold.
	// Default value is `CURRENT_SPEND`.
	// Possible values are `CURRENT_SPEND` and `FORECASTED_SPEND`.
	SpendBasis pulumi.StringPtrInput `pulumi:"spendBasis"`
	// Send an alert when this threshold is exceeded. This is a
	// 1.0-based percentage, so 0.5 = 50%. Must be >= 0.
	ThresholdPercent pulumi.Float64Input `pulumi:"thresholdPercent"`
}

func (BudgetThresholdRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetThresholdRule)(nil)).Elem()
}

func (i BudgetThresholdRuleArgs) ToBudgetThresholdRuleOutput() BudgetThresholdRuleOutput {
	return i.ToBudgetThresholdRuleOutputWithContext(context.Background())
}

func (i BudgetThresholdRuleArgs) ToBudgetThresholdRuleOutputWithContext(ctx context.Context) BudgetThresholdRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetThresholdRuleOutput)
}

// BudgetThresholdRuleArrayInput is an input type that accepts BudgetThresholdRuleArray and BudgetThresholdRuleArrayOutput values.
// You can construct a concrete instance of `BudgetThresholdRuleArrayInput` via:
//
//          BudgetThresholdRuleArray{ BudgetThresholdRuleArgs{...} }
type BudgetThresholdRuleArrayInput interface {
	pulumi.Input

	ToBudgetThresholdRuleArrayOutput() BudgetThresholdRuleArrayOutput
	ToBudgetThresholdRuleArrayOutputWithContext(context.Context) BudgetThresholdRuleArrayOutput
}

type BudgetThresholdRuleArray []BudgetThresholdRuleInput

func (BudgetThresholdRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetThresholdRule)(nil)).Elem()
}

func (i BudgetThresholdRuleArray) ToBudgetThresholdRuleArrayOutput() BudgetThresholdRuleArrayOutput {
	return i.ToBudgetThresholdRuleArrayOutputWithContext(context.Background())
}

func (i BudgetThresholdRuleArray) ToBudgetThresholdRuleArrayOutputWithContext(ctx context.Context) BudgetThresholdRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetThresholdRuleArrayOutput)
}

type BudgetThresholdRuleOutput struct{ *pulumi.OutputState }

func (BudgetThresholdRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetThresholdRule)(nil)).Elem()
}

func (o BudgetThresholdRuleOutput) ToBudgetThresholdRuleOutput() BudgetThresholdRuleOutput {
	return o
}

func (o BudgetThresholdRuleOutput) ToBudgetThresholdRuleOutputWithContext(ctx context.Context) BudgetThresholdRuleOutput {
	return o
}

// The type of basis used to determine if spend has passed
// the threshold.
// Default value is `CURRENT_SPEND`.
// Possible values are `CURRENT_SPEND` and `FORECASTED_SPEND`.
func (o BudgetThresholdRuleOutput) SpendBasis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetThresholdRule) *string { return v.SpendBasis }).(pulumi.StringPtrOutput)
}

// Send an alert when this threshold is exceeded. This is a
// 1.0-based percentage, so 0.5 = 50%. Must be >= 0.
func (o BudgetThresholdRuleOutput) ThresholdPercent() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetThresholdRule) float64 { return v.ThresholdPercent }).(pulumi.Float64Output)
}

type BudgetThresholdRuleArrayOutput struct{ *pulumi.OutputState }

func (BudgetThresholdRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetThresholdRule)(nil)).Elem()
}

func (o BudgetThresholdRuleArrayOutput) ToBudgetThresholdRuleArrayOutput() BudgetThresholdRuleArrayOutput {
	return o
}

func (o BudgetThresholdRuleArrayOutput) ToBudgetThresholdRuleArrayOutputWithContext(ctx context.Context) BudgetThresholdRuleArrayOutput {
	return o
}

func (o BudgetThresholdRuleArrayOutput) Index(i pulumi.IntInput) BudgetThresholdRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetThresholdRule {
		return vs[0].([]BudgetThresholdRule)[vs[1].(int)]
	}).(BudgetThresholdRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountIamBindingConditionInput)(nil)).Elem(), AccountIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountIamBindingConditionPtrInput)(nil)).Elem(), AccountIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountIamMemberConditionInput)(nil)).Elem(), AccountIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountIamMemberConditionPtrInput)(nil)).Elem(), AccountIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAllUpdatesRuleInput)(nil)).Elem(), BudgetAllUpdatesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAllUpdatesRulePtrInput)(nil)).Elem(), BudgetAllUpdatesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAmountInput)(nil)).Elem(), BudgetAmountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAmountPtrInput)(nil)).Elem(), BudgetAmountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAmountSpecifiedAmountInput)(nil)).Elem(), BudgetAmountSpecifiedAmountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAmountSpecifiedAmountPtrInput)(nil)).Elem(), BudgetAmountSpecifiedAmountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetBudgetFilterInput)(nil)).Elem(), BudgetBudgetFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetBudgetFilterPtrInput)(nil)).Elem(), BudgetBudgetFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetBudgetFilterCustomPeriodInput)(nil)).Elem(), BudgetBudgetFilterCustomPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetBudgetFilterCustomPeriodPtrInput)(nil)).Elem(), BudgetBudgetFilterCustomPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetBudgetFilterCustomPeriodEndDateInput)(nil)).Elem(), BudgetBudgetFilterCustomPeriodEndDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetBudgetFilterCustomPeriodEndDatePtrInput)(nil)).Elem(), BudgetBudgetFilterCustomPeriodEndDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetBudgetFilterCustomPeriodStartDateInput)(nil)).Elem(), BudgetBudgetFilterCustomPeriodStartDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetBudgetFilterCustomPeriodStartDatePtrInput)(nil)).Elem(), BudgetBudgetFilterCustomPeriodStartDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetThresholdRuleInput)(nil)).Elem(), BudgetThresholdRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetThresholdRuleArrayInput)(nil)).Elem(), BudgetThresholdRuleArray{})
	pulumi.RegisterOutputType(AccountIamBindingConditionOutput{})
	pulumi.RegisterOutputType(AccountIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(AccountIamMemberConditionOutput{})
	pulumi.RegisterOutputType(AccountIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(BudgetAllUpdatesRuleOutput{})
	pulumi.RegisterOutputType(BudgetAllUpdatesRulePtrOutput{})
	pulumi.RegisterOutputType(BudgetAmountOutput{})
	pulumi.RegisterOutputType(BudgetAmountPtrOutput{})
	pulumi.RegisterOutputType(BudgetAmountSpecifiedAmountOutput{})
	pulumi.RegisterOutputType(BudgetAmountSpecifiedAmountPtrOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterPtrOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterCustomPeriodOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterCustomPeriodPtrOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterCustomPeriodEndDateOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterCustomPeriodEndDatePtrOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterCustomPeriodStartDateOutput{})
	pulumi.RegisterOutputType(BudgetBudgetFilterCustomPeriodStartDatePtrOutput{})
	pulumi.RegisterOutputType(BudgetThresholdRuleOutput{})
	pulumi.RegisterOutputType(BudgetThresholdRuleArrayOutput{})
}
