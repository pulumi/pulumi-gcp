// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `Ekm Connections` are used to control the connection settings for an `EXTERNAL_VPC` CryptoKey.
// It is used to connect customer's external key manager to Google Cloud EKM.
//
// > **Note:** Ekm Connections cannot be deleted from Google Cloud Platform.
//
// To get more information about EkmConnection, see:
//
// * [API documentation](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.ekmConnections)
// * How-to Guides
//   - [Creating a Ekm Connection](https://cloud.google.com/kms/docs/create-ekm-connection)
//
// ## Example Usage
//
// ### Kms Ekm Connection Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnection(ctx, "example-ekmconnection", &kms.EkmConnectionArgs{
//				Name:              pulumi.String("ekmconnection_example"),
//				Location:          pulumi.String("us-central1"),
//				KeyManagementMode: pulumi.String("MANUAL"),
//				ServiceResolvers: kms.EkmConnectionServiceResolverArray{
//					&kms.EkmConnectionServiceResolverArgs{
//						ServiceDirectoryService: pulumi.String("projects/project_id/locations/us-central1/namespaces/namespace_name/services/service_name"),
//						Hostname:                pulumi.String("example-ekm.goog"),
//						ServerCertificates: kms.EkmConnectionServiceResolverServerCertificateArray{
//							&kms.EkmConnectionServiceResolverServerCertificateArgs{
//								RawDer: pulumi.String("==HAwIBCCAr6gAwIBAgIUWR+EV4lqiV7Ql12VY=="),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EkmConnection can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/ekmConnections/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, EkmConnection can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:kms/ekmConnection:EkmConnection default projects/{{project}}/locations/{{location}}/ekmConnections/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:kms/ekmConnection:EkmConnection default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:kms/ekmConnection:EkmConnection default {{location}}/{{name}}
// ```
type EkmConnection struct {
	pulumi.CustomResourceState

	// Output only. The time at which the EkmConnection was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath pulumi.StringOutput `pulumi:"cryptoSpacePath"`
	// Optional. Etag of the currently stored EkmConnection.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
	// Default value is `MANUAL`.
	// Possible values are: `MANUAL`, `CLOUD_KMS`.
	KeyManagementMode pulumi.StringPtrOutput `pulumi:"keyManagementMode"`
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for the EkmConnection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
	// Structure is documented below.
	ServiceResolvers EkmConnectionServiceResolverArrayOutput `pulumi:"serviceResolvers"`
}

// NewEkmConnection registers a new resource with the given unique name, arguments, and options.
func NewEkmConnection(ctx *pulumi.Context,
	name string, args *EkmConnectionArgs, opts ...pulumi.ResourceOption) (*EkmConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ServiceResolvers == nil {
		return nil, errors.New("invalid value for required argument 'ServiceResolvers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EkmConnection
	err := ctx.RegisterResource("gcp:kms/ekmConnection:EkmConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEkmConnection gets an existing EkmConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEkmConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EkmConnectionState, opts ...pulumi.ResourceOption) (*EkmConnection, error) {
	var resource EkmConnection
	err := ctx.ReadResource("gcp:kms/ekmConnection:EkmConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EkmConnection resources.
type ekmConnectionState struct {
	// Output only. The time at which the EkmConnection was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath *string `pulumi:"cryptoSpacePath"`
	// Optional. Etag of the currently stored EkmConnection.
	Etag *string `pulumi:"etag"`
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
	// Default value is `MANUAL`.
	// Possible values are: `MANUAL`, `CLOUD_KMS`.
	KeyManagementMode *string `pulumi:"keyManagementMode"`
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	Location *string `pulumi:"location"`
	// The resource name for the EkmConnection.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
	// Structure is documented below.
	ServiceResolvers []EkmConnectionServiceResolver `pulumi:"serviceResolvers"`
}

type EkmConnectionState struct {
	// Output only. The time at which the EkmConnection was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath pulumi.StringPtrInput
	// Optional. Etag of the currently stored EkmConnection.
	Etag pulumi.StringPtrInput
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
	// Default value is `MANUAL`.
	// Possible values are: `MANUAL`, `CLOUD_KMS`.
	KeyManagementMode pulumi.StringPtrInput
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	Location pulumi.StringPtrInput
	// The resource name for the EkmConnection.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
	// Structure is documented below.
	ServiceResolvers EkmConnectionServiceResolverArrayInput
}

func (EkmConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ekmConnectionState)(nil)).Elem()
}

type ekmConnectionArgs struct {
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath *string `pulumi:"cryptoSpacePath"`
	// Optional. Etag of the currently stored EkmConnection.
	Etag *string `pulumi:"etag"`
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
	// Default value is `MANUAL`.
	// Possible values are: `MANUAL`, `CLOUD_KMS`.
	KeyManagementMode *string `pulumi:"keyManagementMode"`
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	Location string `pulumi:"location"`
	// The resource name for the EkmConnection.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
	// Structure is documented below.
	ServiceResolvers []EkmConnectionServiceResolver `pulumi:"serviceResolvers"`
}

// The set of arguments for constructing a EkmConnection resource.
type EkmConnectionArgs struct {
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath pulumi.StringPtrInput
	// Optional. Etag of the currently stored EkmConnection.
	Etag pulumi.StringPtrInput
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
	// Default value is `MANUAL`.
	// Possible values are: `MANUAL`, `CLOUD_KMS`.
	KeyManagementMode pulumi.StringPtrInput
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	Location pulumi.StringInput
	// The resource name for the EkmConnection.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
	// Structure is documented below.
	ServiceResolvers EkmConnectionServiceResolverArrayInput
}

func (EkmConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ekmConnectionArgs)(nil)).Elem()
}

type EkmConnectionInput interface {
	pulumi.Input

	ToEkmConnectionOutput() EkmConnectionOutput
	ToEkmConnectionOutputWithContext(ctx context.Context) EkmConnectionOutput
}

func (*EkmConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnection)(nil)).Elem()
}

func (i *EkmConnection) ToEkmConnectionOutput() EkmConnectionOutput {
	return i.ToEkmConnectionOutputWithContext(context.Background())
}

func (i *EkmConnection) ToEkmConnectionOutputWithContext(ctx context.Context) EkmConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionOutput)
}

// EkmConnectionArrayInput is an input type that accepts EkmConnectionArray and EkmConnectionArrayOutput values.
// You can construct a concrete instance of `EkmConnectionArrayInput` via:
//
//	EkmConnectionArray{ EkmConnectionArgs{...} }
type EkmConnectionArrayInput interface {
	pulumi.Input

	ToEkmConnectionArrayOutput() EkmConnectionArrayOutput
	ToEkmConnectionArrayOutputWithContext(context.Context) EkmConnectionArrayOutput
}

type EkmConnectionArray []EkmConnectionInput

func (EkmConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EkmConnection)(nil)).Elem()
}

func (i EkmConnectionArray) ToEkmConnectionArrayOutput() EkmConnectionArrayOutput {
	return i.ToEkmConnectionArrayOutputWithContext(context.Background())
}

func (i EkmConnectionArray) ToEkmConnectionArrayOutputWithContext(ctx context.Context) EkmConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionArrayOutput)
}

// EkmConnectionMapInput is an input type that accepts EkmConnectionMap and EkmConnectionMapOutput values.
// You can construct a concrete instance of `EkmConnectionMapInput` via:
//
//	EkmConnectionMap{ "key": EkmConnectionArgs{...} }
type EkmConnectionMapInput interface {
	pulumi.Input

	ToEkmConnectionMapOutput() EkmConnectionMapOutput
	ToEkmConnectionMapOutputWithContext(context.Context) EkmConnectionMapOutput
}

type EkmConnectionMap map[string]EkmConnectionInput

func (EkmConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EkmConnection)(nil)).Elem()
}

func (i EkmConnectionMap) ToEkmConnectionMapOutput() EkmConnectionMapOutput {
	return i.ToEkmConnectionMapOutputWithContext(context.Background())
}

func (i EkmConnectionMap) ToEkmConnectionMapOutputWithContext(ctx context.Context) EkmConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionMapOutput)
}

type EkmConnectionOutput struct{ *pulumi.OutputState }

func (EkmConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnection)(nil)).Elem()
}

func (o EkmConnectionOutput) ToEkmConnectionOutput() EkmConnectionOutput {
	return o
}

func (o EkmConnectionOutput) ToEkmConnectionOutputWithContext(ctx context.Context) EkmConnectionOutput {
	return o
}

// Output only. The time at which the EkmConnection was created.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o EkmConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
func (o EkmConnectionOutput) CryptoSpacePath() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.CryptoSpacePath }).(pulumi.StringOutput)
}

// Optional. Etag of the currently stored EkmConnection.
func (o EkmConnectionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
// Default value is `MANUAL`.
// Possible values are: `MANUAL`, `CLOUD_KMS`.
func (o EkmConnectionOutput) KeyManagementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringPtrOutput { return v.KeyManagementMode }).(pulumi.StringPtrOutput)
}

// The location for the EkmConnection.
// A full list of valid locations can be found by running `gcloud kms locations list`.
func (o EkmConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the EkmConnection.
func (o EkmConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o EkmConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
// Structure is documented below.
func (o EkmConnectionOutput) ServiceResolvers() EkmConnectionServiceResolverArrayOutput {
	return o.ApplyT(func(v *EkmConnection) EkmConnectionServiceResolverArrayOutput { return v.ServiceResolvers }).(EkmConnectionServiceResolverArrayOutput)
}

type EkmConnectionArrayOutput struct{ *pulumi.OutputState }

func (EkmConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EkmConnection)(nil)).Elem()
}

func (o EkmConnectionArrayOutput) ToEkmConnectionArrayOutput() EkmConnectionArrayOutput {
	return o
}

func (o EkmConnectionArrayOutput) ToEkmConnectionArrayOutputWithContext(ctx context.Context) EkmConnectionArrayOutput {
	return o
}

func (o EkmConnectionArrayOutput) Index(i pulumi.IntInput) EkmConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EkmConnection {
		return vs[0].([]*EkmConnection)[vs[1].(int)]
	}).(EkmConnectionOutput)
}

type EkmConnectionMapOutput struct{ *pulumi.OutputState }

func (EkmConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EkmConnection)(nil)).Elem()
}

func (o EkmConnectionMapOutput) ToEkmConnectionMapOutput() EkmConnectionMapOutput {
	return o
}

func (o EkmConnectionMapOutput) ToEkmConnectionMapOutputWithContext(ctx context.Context) EkmConnectionMapOutput {
	return o
}

func (o EkmConnectionMapOutput) MapIndex(k pulumi.StringInput) EkmConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EkmConnection {
		return vs[0].(map[string]*EkmConnection)[vs[1].(string)]
	}).(EkmConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionInput)(nil)).Elem(), &EkmConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionArrayInput)(nil)).Elem(), EkmConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionMapInput)(nil)).Elem(), EkmConnectionMap{})
	pulumi.RegisterOutputType(EkmConnectionOutput{})
	pulumi.RegisterOutputType(EkmConnectionArrayOutput{})
	pulumi.RegisterOutputType(EkmConnectionMapOutput{})
}
