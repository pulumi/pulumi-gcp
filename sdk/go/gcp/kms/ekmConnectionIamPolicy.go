// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Key Management Service EkmConnection. Each of these resources serves a different use case:
//
// * `kms.EkmConnectionIamPolicy`: Authoritative. Sets the IAM policy for the ekmconnection and replaces any existing policy already attached.
// * `kms.EkmConnectionIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the ekmconnection are preserved.
// * `kms.EkmConnectionIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the ekmconnection are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `kms.EkmConnectionIamPolicy`: Retrieves the IAM policy for the ekmconnection
//
// > **Note:** `kms.EkmConnectionIamPolicy` **cannot** be used in conjunction with `kms.EkmConnectionIamBinding` and `kms.EkmConnectionIamMember` or they will fight over what your policy should be.
//
// > **Note:** `kms.EkmConnectionIamBinding` resources **can be** used in conjunction with `kms.EkmConnectionIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## kms.EkmConnectionIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewEkmConnectionIamPolicy(ctx, "policy", &kms.EkmConnectionIamPolicyArgs{
//				Project:    pulumi.Any(example_ekmconnection.Project),
//				Location:   pulumi.Any(example_ekmconnection.Location),
//				Name:       pulumi.Any(example_ekmconnection.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewEkmConnectionIamPolicy(ctx, "policy", &kms.EkmConnectionIamPolicyArgs{
//				Project:    pulumi.Any(example_ekmconnection.Project),
//				Location:   pulumi.Any(example_ekmconnection.Location),
//				Name:       pulumi.Any(example_ekmconnection.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## kms.EkmConnectionIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnectionIamBinding(ctx, "binding", &kms.EkmConnectionIamBindingArgs{
//				Project:  pulumi.Any(example_ekmconnection.Project),
//				Location: pulumi.Any(example_ekmconnection.Location),
//				Name:     pulumi.Any(example_ekmconnection.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnectionIamBinding(ctx, "binding", &kms.EkmConnectionIamBindingArgs{
//				Project:  pulumi.Any(example_ekmconnection.Project),
//				Location: pulumi.Any(example_ekmconnection.Location),
//				Name:     pulumi.Any(example_ekmconnection.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &kms.EkmConnectionIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## kms.EkmConnectionIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnectionIamMember(ctx, "member", &kms.EkmConnectionIamMemberArgs{
//				Project:  pulumi.Any(example_ekmconnection.Project),
//				Location: pulumi.Any(example_ekmconnection.Location),
//				Name:     pulumi.Any(example_ekmconnection.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnectionIamMember(ctx, "member", &kms.EkmConnectionIamMemberArgs{
//				Project:  pulumi.Any(example_ekmconnection.Project),
//				Location: pulumi.Any(example_ekmconnection.Location),
//				Name:     pulumi.Any(example_ekmconnection.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &kms.EkmConnectionIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Cloud Key Management Service EkmConnection
//
// Three different resources help you manage your IAM policy for Cloud Key Management Service EkmConnection. Each of these resources serves a different use case:
//
// * `kms.EkmConnectionIamPolicy`: Authoritative. Sets the IAM policy for the ekmconnection and replaces any existing policy already attached.
// * `kms.EkmConnectionIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the ekmconnection are preserved.
// * `kms.EkmConnectionIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the ekmconnection are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `kms.EkmConnectionIamPolicy`: Retrieves the IAM policy for the ekmconnection
//
// > **Note:** `kms.EkmConnectionIamPolicy` **cannot** be used in conjunction with `kms.EkmConnectionIamBinding` and `kms.EkmConnectionIamMember` or they will fight over what your policy should be.
//
// > **Note:** `kms.EkmConnectionIamBinding` resources **can be** used in conjunction with `kms.EkmConnectionIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## kms.EkmConnectionIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewEkmConnectionIamPolicy(ctx, "policy", &kms.EkmConnectionIamPolicyArgs{
//				Project:    pulumi.Any(example_ekmconnection.Project),
//				Location:   pulumi.Any(example_ekmconnection.Location),
//				Name:       pulumi.Any(example_ekmconnection.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewEkmConnectionIamPolicy(ctx, "policy", &kms.EkmConnectionIamPolicyArgs{
//				Project:    pulumi.Any(example_ekmconnection.Project),
//				Location:   pulumi.Any(example_ekmconnection.Location),
//				Name:       pulumi.Any(example_ekmconnection.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## kms.EkmConnectionIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnectionIamBinding(ctx, "binding", &kms.EkmConnectionIamBindingArgs{
//				Project:  pulumi.Any(example_ekmconnection.Project),
//				Location: pulumi.Any(example_ekmconnection.Location),
//				Name:     pulumi.Any(example_ekmconnection.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnectionIamBinding(ctx, "binding", &kms.EkmConnectionIamBindingArgs{
//				Project:  pulumi.Any(example_ekmconnection.Project),
//				Location: pulumi.Any(example_ekmconnection.Location),
//				Name:     pulumi.Any(example_ekmconnection.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &kms.EkmConnectionIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## kms.EkmConnectionIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnectionIamMember(ctx, "member", &kms.EkmConnectionIamMemberArgs{
//				Project:  pulumi.Any(example_ekmconnection.Project),
//				Location: pulumi.Any(example_ekmconnection.Location),
//				Name:     pulumi.Any(example_ekmconnection.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmConnectionIamMember(ctx, "member", &kms.EkmConnectionIamMemberArgs{
//				Project:  pulumi.Any(example_ekmconnection.Project),
//				Location: pulumi.Any(example_ekmconnection.Location),
//				Name:     pulumi.Any(example_ekmconnection.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &kms.EkmConnectionIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/ekmConnections/{{name}}
//
// * {{project}}/{{location}}/{{name}}
//
// * {{location}}/{{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Cloud Key Management Service ekmconnection IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:kms/ekmConnectionIamPolicy:EkmConnectionIamPolicy editor "projects/{{project}}/locations/{{location}}/ekmConnections/{{ekm_connection}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:kms/ekmConnectionIamPolicy:EkmConnectionIamPolicy editor "projects/{{project}}/locations/{{location}}/ekmConnections/{{ekm_connection}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:kms/ekmConnectionIamPolicy:EkmConnectionIamPolicy editor projects/{{project}}/locations/{{location}}/ekmConnections/{{ekm_connection}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type EkmConnectionIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewEkmConnectionIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewEkmConnectionIamPolicy(ctx *pulumi.Context,
	name string, args *EkmConnectionIamPolicyArgs, opts ...pulumi.ResourceOption) (*EkmConnectionIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EkmConnectionIamPolicy
	err := ctx.RegisterResource("gcp:kms/ekmConnectionIamPolicy:EkmConnectionIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEkmConnectionIamPolicy gets an existing EkmConnectionIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEkmConnectionIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EkmConnectionIamPolicyState, opts ...pulumi.ResourceOption) (*EkmConnectionIamPolicy, error) {
	var resource EkmConnectionIamPolicy
	err := ctx.ReadResource("gcp:kms/ekmConnectionIamPolicy:EkmConnectionIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EkmConnectionIamPolicy resources.
type ekmConnectionIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type EkmConnectionIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (EkmConnectionIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ekmConnectionIamPolicyState)(nil)).Elem()
}

type ekmConnectionIamPolicyArgs struct {
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a EkmConnectionIamPolicy resource.
type EkmConnectionIamPolicyArgs struct {
	// The location for the EkmConnection.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (EkmConnectionIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ekmConnectionIamPolicyArgs)(nil)).Elem()
}

type EkmConnectionIamPolicyInput interface {
	pulumi.Input

	ToEkmConnectionIamPolicyOutput() EkmConnectionIamPolicyOutput
	ToEkmConnectionIamPolicyOutputWithContext(ctx context.Context) EkmConnectionIamPolicyOutput
}

func (*EkmConnectionIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnectionIamPolicy)(nil)).Elem()
}

func (i *EkmConnectionIamPolicy) ToEkmConnectionIamPolicyOutput() EkmConnectionIamPolicyOutput {
	return i.ToEkmConnectionIamPolicyOutputWithContext(context.Background())
}

func (i *EkmConnectionIamPolicy) ToEkmConnectionIamPolicyOutputWithContext(ctx context.Context) EkmConnectionIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamPolicyOutput)
}

// EkmConnectionIamPolicyArrayInput is an input type that accepts EkmConnectionIamPolicyArray and EkmConnectionIamPolicyArrayOutput values.
// You can construct a concrete instance of `EkmConnectionIamPolicyArrayInput` via:
//
//	EkmConnectionIamPolicyArray{ EkmConnectionIamPolicyArgs{...} }
type EkmConnectionIamPolicyArrayInput interface {
	pulumi.Input

	ToEkmConnectionIamPolicyArrayOutput() EkmConnectionIamPolicyArrayOutput
	ToEkmConnectionIamPolicyArrayOutputWithContext(context.Context) EkmConnectionIamPolicyArrayOutput
}

type EkmConnectionIamPolicyArray []EkmConnectionIamPolicyInput

func (EkmConnectionIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EkmConnectionIamPolicy)(nil)).Elem()
}

func (i EkmConnectionIamPolicyArray) ToEkmConnectionIamPolicyArrayOutput() EkmConnectionIamPolicyArrayOutput {
	return i.ToEkmConnectionIamPolicyArrayOutputWithContext(context.Background())
}

func (i EkmConnectionIamPolicyArray) ToEkmConnectionIamPolicyArrayOutputWithContext(ctx context.Context) EkmConnectionIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamPolicyArrayOutput)
}

// EkmConnectionIamPolicyMapInput is an input type that accepts EkmConnectionIamPolicyMap and EkmConnectionIamPolicyMapOutput values.
// You can construct a concrete instance of `EkmConnectionIamPolicyMapInput` via:
//
//	EkmConnectionIamPolicyMap{ "key": EkmConnectionIamPolicyArgs{...} }
type EkmConnectionIamPolicyMapInput interface {
	pulumi.Input

	ToEkmConnectionIamPolicyMapOutput() EkmConnectionIamPolicyMapOutput
	ToEkmConnectionIamPolicyMapOutputWithContext(context.Context) EkmConnectionIamPolicyMapOutput
}

type EkmConnectionIamPolicyMap map[string]EkmConnectionIamPolicyInput

func (EkmConnectionIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EkmConnectionIamPolicy)(nil)).Elem()
}

func (i EkmConnectionIamPolicyMap) ToEkmConnectionIamPolicyMapOutput() EkmConnectionIamPolicyMapOutput {
	return i.ToEkmConnectionIamPolicyMapOutputWithContext(context.Background())
}

func (i EkmConnectionIamPolicyMap) ToEkmConnectionIamPolicyMapOutputWithContext(ctx context.Context) EkmConnectionIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamPolicyMapOutput)
}

type EkmConnectionIamPolicyOutput struct{ *pulumi.OutputState }

func (EkmConnectionIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnectionIamPolicy)(nil)).Elem()
}

func (o EkmConnectionIamPolicyOutput) ToEkmConnectionIamPolicyOutput() EkmConnectionIamPolicyOutput {
	return o
}

func (o EkmConnectionIamPolicyOutput) ToEkmConnectionIamPolicyOutputWithContext(ctx context.Context) EkmConnectionIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o EkmConnectionIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnectionIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location for the EkmConnection.
// A full list of valid locations can be found by running `gcloud kms locations list`.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o EkmConnectionIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnectionIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o EkmConnectionIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnectionIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o EkmConnectionIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnectionIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o EkmConnectionIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnectionIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type EkmConnectionIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (EkmConnectionIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EkmConnectionIamPolicy)(nil)).Elem()
}

func (o EkmConnectionIamPolicyArrayOutput) ToEkmConnectionIamPolicyArrayOutput() EkmConnectionIamPolicyArrayOutput {
	return o
}

func (o EkmConnectionIamPolicyArrayOutput) ToEkmConnectionIamPolicyArrayOutputWithContext(ctx context.Context) EkmConnectionIamPolicyArrayOutput {
	return o
}

func (o EkmConnectionIamPolicyArrayOutput) Index(i pulumi.IntInput) EkmConnectionIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EkmConnectionIamPolicy {
		return vs[0].([]*EkmConnectionIamPolicy)[vs[1].(int)]
	}).(EkmConnectionIamPolicyOutput)
}

type EkmConnectionIamPolicyMapOutput struct{ *pulumi.OutputState }

func (EkmConnectionIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EkmConnectionIamPolicy)(nil)).Elem()
}

func (o EkmConnectionIamPolicyMapOutput) ToEkmConnectionIamPolicyMapOutput() EkmConnectionIamPolicyMapOutput {
	return o
}

func (o EkmConnectionIamPolicyMapOutput) ToEkmConnectionIamPolicyMapOutputWithContext(ctx context.Context) EkmConnectionIamPolicyMapOutput {
	return o
}

func (o EkmConnectionIamPolicyMapOutput) MapIndex(k pulumi.StringInput) EkmConnectionIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EkmConnectionIamPolicy {
		return vs[0].(map[string]*EkmConnectionIamPolicy)[vs[1].(string)]
	}).(EkmConnectionIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionIamPolicyInput)(nil)).Elem(), &EkmConnectionIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionIamPolicyArrayInput)(nil)).Elem(), EkmConnectionIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionIamPolicyMapInput)(nil)).Elem(), EkmConnectionIamPolicyMap{})
	pulumi.RegisterOutputType(EkmConnectionIamPolicyOutput{})
	pulumi.RegisterOutputType(EkmConnectionIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(EkmConnectionIamPolicyMapOutput{})
}
