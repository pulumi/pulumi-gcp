// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.LookupKeyHandle(ctx, &kms.LookupKeyHandleArgs{
//				Name:     "eed58b7b-20ad-4da8-ad85-ba78a0d5ab87",
//				Location: "us-central1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupKeyHandle(ctx *pulumi.Context, args *LookupKeyHandleArgs, opts ...pulumi.InvokeOption) (*LookupKeyHandleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyHandleResult
	err := ctx.Invoke("gcp:kms/getKeyHandle:getKeyHandle", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeyHandle.
type LookupKeyHandleArgs struct {
	// The Google Cloud Platform location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	//
	// ***
	Location string `pulumi:"location"`
	// The KeyHandle's name.
	// A KeyHandle name must exist within the provided location and must be valid UUID.
	Name string `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getKeyHandle.
type LookupKeyHandleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The identifier of the KMS Key created for the KeyHandle. Its format is `projects/{projectId}/locations/{location}/keyRings/{keyRingName}/cryptoKeys/{cryptoKeyName}`.
	KmsKey string `pulumi:"kmsKey"`
	// The location of the KMS Key and KeyHandle.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// The identifier of the project where KMS KeyHandle is created.
	Project *string `pulumi:"project"`
	// Indicates the resource type that the resulting CryptoKey is meant to protect, e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
	ResourceTypeSelector string `pulumi:"resourceTypeSelector"`
}

func LookupKeyHandleOutput(ctx *pulumi.Context, args LookupKeyHandleOutputArgs, opts ...pulumi.InvokeOption) LookupKeyHandleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupKeyHandleResultOutput, error) {
			args := v.(LookupKeyHandleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:kms/getKeyHandle:getKeyHandle", args, LookupKeyHandleResultOutput{}, options).(LookupKeyHandleResultOutput), nil
		}).(LookupKeyHandleResultOutput)
}

// A collection of arguments for invoking getKeyHandle.
type LookupKeyHandleOutputArgs struct {
	// The Google Cloud Platform location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	//
	// ***
	Location pulumi.StringInput `pulumi:"location"`
	// The KeyHandle's name.
	// A KeyHandle name must exist within the provided location and must be valid UUID.
	Name pulumi.StringInput `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupKeyHandleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyHandleArgs)(nil)).Elem()
}

// A collection of values returned by getKeyHandle.
type LookupKeyHandleResultOutput struct{ *pulumi.OutputState }

func (LookupKeyHandleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyHandleResult)(nil)).Elem()
}

func (o LookupKeyHandleResultOutput) ToLookupKeyHandleResultOutput() LookupKeyHandleResultOutput {
	return o
}

func (o LookupKeyHandleResultOutput) ToLookupKeyHandleResultOutputWithContext(ctx context.Context) LookupKeyHandleResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKeyHandleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyHandleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identifier of the KMS Key created for the KeyHandle. Its format is `projects/{projectId}/locations/{location}/keyRings/{keyRingName}/cryptoKeys/{cryptoKeyName}`.
func (o LookupKeyHandleResultOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyHandleResult) string { return v.KmsKey }).(pulumi.StringOutput)
}

// The location of the KMS Key and KeyHandle.
func (o LookupKeyHandleResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyHandleResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupKeyHandleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyHandleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier of the project where KMS KeyHandle is created.
func (o LookupKeyHandleResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyHandleResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Indicates the resource type that the resulting CryptoKey is meant to protect, e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
func (o LookupKeyHandleResultOutput) ResourceTypeSelector() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyHandleResult) string { return v.ResourceTypeSelector }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyHandleResultOutput{})
}
