// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A `CryptoKey` represents a logical key that can be used for cryptographic operations.
//
// > **Note:** CryptoKeys cannot be deleted from Google Cloud Platform.
// Destroying a provider-managed CryptoKey will remove it from state
// and delete all CryptoKeyVersions, rendering the key unusable, but *will
// not delete the resource from the project.* When the provider destroys these keys,
// any data previously encrypted with these keys will be irrecoverable.
// For this reason, it is strongly recommended that you use Pulumi's [protect resource option](https://www.pulumi.com/docs/concepts/options/protect/).
//
// To get more information about CryptoKey, see:
//
// * [API documentation](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys)
// * How-to Guides
//   - [Creating a key](https://cloud.google.com/kms/docs/creating-keys#create_a_key)
//
// ## Example Usage
//
// ### Kms Crypto Key Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Name:     pulumi.String("keyring-example"),
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewCryptoKey(ctx, "example-key", &kms.CryptoKeyArgs{
//				Name:           pulumi.String("crypto-key-example"),
//				KeyRing:        keyring.ID(),
//				RotationPeriod: pulumi.String("7776000s"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Kms Crypto Key Asymmetric Sign
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Name:     pulumi.String("keyring-example"),
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewCryptoKey(ctx, "example-asymmetric-sign-key", &kms.CryptoKeyArgs{
//				Name:    pulumi.String("crypto-key-example"),
//				KeyRing: keyring.ID(),
//				Purpose: pulumi.String("ASYMMETRIC_SIGN"),
//				VersionTemplate: &kms.CryptoKeyVersionTemplateArgs{
//					Algorithm: pulumi.String("EC_SIGN_P384_SHA384"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CryptoKey can be imported using any of these accepted formats:
//
// * `{{key_ring}}/cryptoKeys/{{name}}`
//
// * `{{key_ring}}/{{name}}`
//
// When using the `pulumi import` command, CryptoKey can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:kms/cryptoKey:CryptoKey default {{key_ring}}/cryptoKeys/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:kms/cryptoKey:CryptoKey default {{key_ring}}/{{name}}
// ```
type CryptoKey struct {
	pulumi.CustomResourceState

	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
	// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend pulumi.StringOutput `pulumi:"cryptoKeyBackend"`
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration pulumi.StringOutput `pulumi:"destroyScheduledDuration"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolOutput `pulumi:"importOnly"`
	// The policy used for Key Access Justifications Policy Enforcement. If this
	// field is present and this key is enrolled in Key Access Justifications
	// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
	// sign operations, and the operation will fail if rejected by the policy. The
	// policy is defined by specifying zero or more allowed justification codes.
	// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
	// By default, this field is absent, and all justification codes are allowed.
	// This field is currently in beta and is subject to change.
	// Structure is documented below.
	KeyAccessJustificationsPolicy CryptoKeyKeyAccessJustificationsPolicyOutput `pulumi:"keyAccessJustificationsPolicy"`
	// The KeyRing that this key belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing pulumi.StringOutput `pulumi:"keyRing"`
	// Labels with user-defined metadata to apply to this resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name for the CryptoKey.
	Name pulumi.StringOutput `pulumi:"name"`
	// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
	// Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
	// Structure is documented below.
	Primaries CryptoKeyPrimaryArrayOutput `pulumi:"primaries"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The immutable purpose of this CryptoKey. See the
	// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	Purpose pulumi.StringPtrOutput `pulumi:"purpose"`
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter `s` (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod pulumi.StringPtrOutput `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the `kms.CryptoKeyVersion` resource to create a new CryptoKeyVersion
	// or `kms.KeyRingImportJob` resource to import the CryptoKeyVersion.
	// This field is only applicable during initial CryptoKey creation.
	SkipInitialVersionCreation pulumi.BoolPtrOutput `pulumi:"skipInitialVersionCreation"`
	// A template describing settings for new crypto key versions.
	// Structure is documented below.
	VersionTemplate CryptoKeyVersionTemplateOutput `pulumi:"versionTemplate"`
}

// NewCryptoKey registers a new resource with the given unique name, arguments, and options.
func NewCryptoKey(ctx *pulumi.Context,
	name string, args *CryptoKeyArgs, opts ...pulumi.ResourceOption) (*CryptoKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyRing == nil {
		return nil, errors.New("invalid value for required argument 'KeyRing'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CryptoKey
	err := ctx.RegisterResource("gcp:kms/cryptoKey:CryptoKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCryptoKey gets an existing CryptoKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CryptoKeyState, opts ...pulumi.ResourceOption) (*CryptoKey, error) {
	var resource CryptoKey
	err := ctx.ReadResource("gcp:kms/cryptoKey:CryptoKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CryptoKey resources.
type cryptoKeyState struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
	// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend *string `pulumi:"cryptoKeyBackend"`
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration *string `pulumi:"destroyScheduledDuration"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Whether this key may contain imported versions only.
	ImportOnly *bool `pulumi:"importOnly"`
	// The policy used for Key Access Justifications Policy Enforcement. If this
	// field is present and this key is enrolled in Key Access Justifications
	// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
	// sign operations, and the operation will fail if rejected by the policy. The
	// policy is defined by specifying zero or more allowed justification codes.
	// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
	// By default, this field is absent, and all justification codes are allowed.
	// This field is currently in beta and is subject to change.
	// Structure is documented below.
	KeyAccessJustificationsPolicy *CryptoKeyKeyAccessJustificationsPolicy `pulumi:"keyAccessJustificationsPolicy"`
	// The KeyRing that this key belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing *string `pulumi:"keyRing"`
	// Labels with user-defined metadata to apply to this resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the CryptoKey.
	Name *string `pulumi:"name"`
	// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
	// Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
	// Structure is documented below.
	Primaries []CryptoKeyPrimary `pulumi:"primaries"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The immutable purpose of this CryptoKey. See the
	// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	Purpose *string `pulumi:"purpose"`
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter `s` (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod *string `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the `kms.CryptoKeyVersion` resource to create a new CryptoKeyVersion
	// or `kms.KeyRingImportJob` resource to import the CryptoKeyVersion.
	// This field is only applicable during initial CryptoKey creation.
	SkipInitialVersionCreation *bool `pulumi:"skipInitialVersionCreation"`
	// A template describing settings for new crypto key versions.
	// Structure is documented below.
	VersionTemplate *CryptoKeyVersionTemplate `pulumi:"versionTemplate"`
}

type CryptoKeyState struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
	// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend pulumi.StringPtrInput
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolPtrInput
	// The policy used for Key Access Justifications Policy Enforcement. If this
	// field is present and this key is enrolled in Key Access Justifications
	// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
	// sign operations, and the operation will fail if rejected by the policy. The
	// policy is defined by specifying zero or more allowed justification codes.
	// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
	// By default, this field is absent, and all justification codes are allowed.
	// This field is currently in beta and is subject to change.
	// Structure is documented below.
	KeyAccessJustificationsPolicy CryptoKeyKeyAccessJustificationsPolicyPtrInput
	// The KeyRing that this key belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing pulumi.StringPtrInput
	// Labels with user-defined metadata to apply to this resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name for the CryptoKey.
	Name pulumi.StringPtrInput
	// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
	// Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
	// Structure is documented below.
	Primaries CryptoKeyPrimaryArrayInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The immutable purpose of this CryptoKey. See the
	// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	Purpose pulumi.StringPtrInput
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter `s` (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod pulumi.StringPtrInput
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the `kms.CryptoKeyVersion` resource to create a new CryptoKeyVersion
	// or `kms.KeyRingImportJob` resource to import the CryptoKeyVersion.
	// This field is only applicable during initial CryptoKey creation.
	SkipInitialVersionCreation pulumi.BoolPtrInput
	// A template describing settings for new crypto key versions.
	// Structure is documented below.
	VersionTemplate CryptoKeyVersionTemplatePtrInput
}

func (CryptoKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoKeyState)(nil)).Elem()
}

type cryptoKeyArgs struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
	// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend *string `pulumi:"cryptoKeyBackend"`
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration *string `pulumi:"destroyScheduledDuration"`
	// Whether this key may contain imported versions only.
	ImportOnly *bool `pulumi:"importOnly"`
	// The policy used for Key Access Justifications Policy Enforcement. If this
	// field is present and this key is enrolled in Key Access Justifications
	// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
	// sign operations, and the operation will fail if rejected by the policy. The
	// policy is defined by specifying zero or more allowed justification codes.
	// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
	// By default, this field is absent, and all justification codes are allowed.
	// This field is currently in beta and is subject to change.
	// Structure is documented below.
	KeyAccessJustificationsPolicy *CryptoKeyKeyAccessJustificationsPolicy `pulumi:"keyAccessJustificationsPolicy"`
	// The KeyRing that this key belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing string `pulumi:"keyRing"`
	// Labels with user-defined metadata to apply to this resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the CryptoKey.
	Name *string `pulumi:"name"`
	// The immutable purpose of this CryptoKey. See the
	// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	Purpose *string `pulumi:"purpose"`
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter `s` (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod *string `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the `kms.CryptoKeyVersion` resource to create a new CryptoKeyVersion
	// or `kms.KeyRingImportJob` resource to import the CryptoKeyVersion.
	// This field is only applicable during initial CryptoKey creation.
	SkipInitialVersionCreation *bool `pulumi:"skipInitialVersionCreation"`
	// A template describing settings for new crypto key versions.
	// Structure is documented below.
	VersionTemplate *CryptoKeyVersionTemplate `pulumi:"versionTemplate"`
}

// The set of arguments for constructing a CryptoKey resource.
type CryptoKeyArgs struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
	// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend pulumi.StringPtrInput
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration pulumi.StringPtrInput
	// Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolPtrInput
	// The policy used for Key Access Justifications Policy Enforcement. If this
	// field is present and this key is enrolled in Key Access Justifications
	// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
	// sign operations, and the operation will fail if rejected by the policy. The
	// policy is defined by specifying zero or more allowed justification codes.
	// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
	// By default, this field is absent, and all justification codes are allowed.
	// This field is currently in beta and is subject to change.
	// Structure is documented below.
	KeyAccessJustificationsPolicy CryptoKeyKeyAccessJustificationsPolicyPtrInput
	// The KeyRing that this key belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing pulumi.StringInput
	// Labels with user-defined metadata to apply to this resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name for the CryptoKey.
	Name pulumi.StringPtrInput
	// The immutable purpose of this CryptoKey. See the
	// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	Purpose pulumi.StringPtrInput
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter `s` (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod pulumi.StringPtrInput
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the `kms.CryptoKeyVersion` resource to create a new CryptoKeyVersion
	// or `kms.KeyRingImportJob` resource to import the CryptoKeyVersion.
	// This field is only applicable during initial CryptoKey creation.
	SkipInitialVersionCreation pulumi.BoolPtrInput
	// A template describing settings for new crypto key versions.
	// Structure is documented below.
	VersionTemplate CryptoKeyVersionTemplatePtrInput
}

func (CryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoKeyArgs)(nil)).Elem()
}

type CryptoKeyInput interface {
	pulumi.Input

	ToCryptoKeyOutput() CryptoKeyOutput
	ToCryptoKeyOutputWithContext(ctx context.Context) CryptoKeyOutput
}

func (*CryptoKey) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKey)(nil)).Elem()
}

func (i *CryptoKey) ToCryptoKeyOutput() CryptoKeyOutput {
	return i.ToCryptoKeyOutputWithContext(context.Background())
}

func (i *CryptoKey) ToCryptoKeyOutputWithContext(ctx context.Context) CryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyOutput)
}

// CryptoKeyArrayInput is an input type that accepts CryptoKeyArray and CryptoKeyArrayOutput values.
// You can construct a concrete instance of `CryptoKeyArrayInput` via:
//
//	CryptoKeyArray{ CryptoKeyArgs{...} }
type CryptoKeyArrayInput interface {
	pulumi.Input

	ToCryptoKeyArrayOutput() CryptoKeyArrayOutput
	ToCryptoKeyArrayOutputWithContext(context.Context) CryptoKeyArrayOutput
}

type CryptoKeyArray []CryptoKeyInput

func (CryptoKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoKey)(nil)).Elem()
}

func (i CryptoKeyArray) ToCryptoKeyArrayOutput() CryptoKeyArrayOutput {
	return i.ToCryptoKeyArrayOutputWithContext(context.Background())
}

func (i CryptoKeyArray) ToCryptoKeyArrayOutputWithContext(ctx context.Context) CryptoKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyArrayOutput)
}

// CryptoKeyMapInput is an input type that accepts CryptoKeyMap and CryptoKeyMapOutput values.
// You can construct a concrete instance of `CryptoKeyMapInput` via:
//
//	CryptoKeyMap{ "key": CryptoKeyArgs{...} }
type CryptoKeyMapInput interface {
	pulumi.Input

	ToCryptoKeyMapOutput() CryptoKeyMapOutput
	ToCryptoKeyMapOutputWithContext(context.Context) CryptoKeyMapOutput
}

type CryptoKeyMap map[string]CryptoKeyInput

func (CryptoKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoKey)(nil)).Elem()
}

func (i CryptoKeyMap) ToCryptoKeyMapOutput() CryptoKeyMapOutput {
	return i.ToCryptoKeyMapOutputWithContext(context.Background())
}

func (i CryptoKeyMap) ToCryptoKeyMapOutputWithContext(ctx context.Context) CryptoKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyMapOutput)
}

type CryptoKeyOutput struct{ *pulumi.OutputState }

func (CryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKey)(nil)).Elem()
}

func (o CryptoKeyOutput) ToCryptoKeyOutput() CryptoKeyOutput {
	return o
}

func (o CryptoKeyOutput) ToCryptoKeyOutputWithContext(ctx context.Context) CryptoKeyOutput {
	return o
}

// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
func (o CryptoKeyOutput) CryptoKeyBackend() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.CryptoKeyBackend }).(pulumi.StringOutput)
}

// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
// If not specified at creation time, the default duration is 30 days.
func (o CryptoKeyOutput) DestroyScheduledDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.DestroyScheduledDuration }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o CryptoKeyOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Whether this key may contain imported versions only.
func (o CryptoKeyOutput) ImportOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.BoolOutput { return v.ImportOnly }).(pulumi.BoolOutput)
}

// The policy used for Key Access Justifications Policy Enforcement. If this
// field is present and this key is enrolled in Key Access Justifications
// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
// sign operations, and the operation will fail if rejected by the policy. The
// policy is defined by specifying zero or more allowed justification codes.
// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
// By default, this field is absent, and all justification codes are allowed.
// This field is currently in beta and is subject to change.
// Structure is documented below.
func (o CryptoKeyOutput) KeyAccessJustificationsPolicy() CryptoKeyKeyAccessJustificationsPolicyOutput {
	return o.ApplyT(func(v *CryptoKey) CryptoKeyKeyAccessJustificationsPolicyOutput {
		return v.KeyAccessJustificationsPolicy
	}).(CryptoKeyKeyAccessJustificationsPolicyOutput)
}

// The KeyRing that this key belongs to.
// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
func (o CryptoKeyOutput) KeyRing() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.KeyRing }).(pulumi.StringOutput)
}

// Labels with user-defined metadata to apply to this resource.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o CryptoKeyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for the CryptoKey.
func (o CryptoKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
// Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
// Structure is documented below.
func (o CryptoKeyOutput) Primaries() CryptoKeyPrimaryArrayOutput {
	return o.ApplyT(func(v *CryptoKey) CryptoKeyPrimaryArrayOutput { return v.Primaries }).(CryptoKeyPrimaryArrayOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o CryptoKeyOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The immutable purpose of this CryptoKey. See the
// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
// for possible inputs.
// Default value is "ENCRYPT_DECRYPT".
func (o CryptoKeyOutput) Purpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringPtrOutput { return v.Purpose }).(pulumi.StringPtrOutput)
}

// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
// The first rotation will take place after the specified period. The rotation period has
// the format of a decimal number with up to 9 fractional digits, followed by the
// letter `s` (seconds). It must be greater than a day (ie, 86400).
func (o CryptoKeyOutput) RotationPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringPtrOutput { return v.RotationPeriod }).(pulumi.StringPtrOutput)
}

// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
// You must use the `kms.CryptoKeyVersion` resource to create a new CryptoKeyVersion
// or `kms.KeyRingImportJob` resource to import the CryptoKeyVersion.
// This field is only applicable during initial CryptoKey creation.
func (o CryptoKeyOutput) SkipInitialVersionCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.BoolPtrOutput { return v.SkipInitialVersionCreation }).(pulumi.BoolPtrOutput)
}

// A template describing settings for new crypto key versions.
// Structure is documented below.
func (o CryptoKeyOutput) VersionTemplate() CryptoKeyVersionTemplateOutput {
	return o.ApplyT(func(v *CryptoKey) CryptoKeyVersionTemplateOutput { return v.VersionTemplate }).(CryptoKeyVersionTemplateOutput)
}

type CryptoKeyArrayOutput struct{ *pulumi.OutputState }

func (CryptoKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoKey)(nil)).Elem()
}

func (o CryptoKeyArrayOutput) ToCryptoKeyArrayOutput() CryptoKeyArrayOutput {
	return o
}

func (o CryptoKeyArrayOutput) ToCryptoKeyArrayOutputWithContext(ctx context.Context) CryptoKeyArrayOutput {
	return o
}

func (o CryptoKeyArrayOutput) Index(i pulumi.IntInput) CryptoKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CryptoKey {
		return vs[0].([]*CryptoKey)[vs[1].(int)]
	}).(CryptoKeyOutput)
}

type CryptoKeyMapOutput struct{ *pulumi.OutputState }

func (CryptoKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoKey)(nil)).Elem()
}

func (o CryptoKeyMapOutput) ToCryptoKeyMapOutput() CryptoKeyMapOutput {
	return o
}

func (o CryptoKeyMapOutput) ToCryptoKeyMapOutputWithContext(ctx context.Context) CryptoKeyMapOutput {
	return o
}

func (o CryptoKeyMapOutput) MapIndex(k pulumi.StringInput) CryptoKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CryptoKey {
		return vs[0].(map[string]*CryptoKey)[vs[1].(string)]
	}).(CryptoKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyInput)(nil)).Elem(), &CryptoKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyArrayInput)(nil)).Elem(), CryptoKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyMapInput)(nil)).Elem(), CryptoKeyMap{})
	pulumi.RegisterOutputType(CryptoKeyOutput{})
	pulumi.RegisterOutputType(CryptoKeyArrayOutput{})
	pulumi.RegisterOutputType(CryptoKeyMapOutput{})
}
