// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the current IAM policy data for a Google Cloud KMS crypto key.
//
// ## example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.GetCryptoKeyIamPolicy(ctx, &kms.GetCryptoKeyIamPolicyArgs{
//				CryptoKeyId: google_kms_crypto_key.Crypto_key.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCryptoKeyIamPolicy(ctx *pulumi.Context, args *GetCryptoKeyIamPolicyArgs, opts ...pulumi.InvokeOption) (*GetCryptoKeyIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCryptoKeyIamPolicyResult
	err := ctx.Invoke("gcp:kms/getCryptoKeyIamPolicy:getCryptoKeyIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCryptoKeyIamPolicy.
type GetCryptoKeyIamPolicyArgs struct {
	// The crypto key ID, in the form
	CryptoKeyId string `pulumi:"cryptoKeyId"`
}

// A collection of values returned by getCryptoKeyIamPolicy.
type GetCryptoKeyIamPolicyResult struct {
	CryptoKeyId string `pulumi:"cryptoKeyId"`
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Computed) The policy data
	PolicyData string `pulumi:"policyData"`
}

func GetCryptoKeyIamPolicyOutput(ctx *pulumi.Context, args GetCryptoKeyIamPolicyOutputArgs, opts ...pulumi.InvokeOption) GetCryptoKeyIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCryptoKeyIamPolicyResult, error) {
			args := v.(GetCryptoKeyIamPolicyArgs)
			r, err := GetCryptoKeyIamPolicy(ctx, &args, opts...)
			var s GetCryptoKeyIamPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCryptoKeyIamPolicyResultOutput)
}

// A collection of arguments for invoking getCryptoKeyIamPolicy.
type GetCryptoKeyIamPolicyOutputArgs struct {
	// The crypto key ID, in the form
	CryptoKeyId pulumi.StringInput `pulumi:"cryptoKeyId"`
}

func (GetCryptoKeyIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getCryptoKeyIamPolicy.
type GetCryptoKeyIamPolicyResultOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyIamPolicyResult)(nil)).Elem()
}

func (o GetCryptoKeyIamPolicyResultOutput) ToGetCryptoKeyIamPolicyResultOutput() GetCryptoKeyIamPolicyResultOutput {
	return o
}

func (o GetCryptoKeyIamPolicyResultOutput) ToGetCryptoKeyIamPolicyResultOutputWithContext(ctx context.Context) GetCryptoKeyIamPolicyResultOutput {
	return o
}

func (o GetCryptoKeyIamPolicyResultOutput) CryptoKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyIamPolicyResult) string { return v.CryptoKeyId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o GetCryptoKeyIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCryptoKeyIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Computed) The policy data
func (o GetCryptoKeyIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCryptoKeyIamPolicyResultOutput{})
}
