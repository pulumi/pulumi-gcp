// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.GetKeyHandles(ctx, &kms.GetKeyHandlesArgs{
//				Project:              pulumi.StringRef("resource-project-id"),
//				Location:             "us-central1",
//				ResourceTypeSelector: "storage.googleapis.com/Bucket",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetKeyHandles(ctx *pulumi.Context, args *GetKeyHandlesArgs, opts ...pulumi.InvokeOption) (*GetKeyHandlesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKeyHandlesResult
	err := ctx.Invoke("gcp:kms/getKeyHandles:getKeyHandles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeyHandles.
type GetKeyHandlesArgs struct {
	// The Google Cloud Platform location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	Location string `pulumi:"location"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The resource type by which to filter KeyHandle e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
	//
	// ***
	ResourceTypeSelector string `pulumi:"resourceTypeSelector"`
}

// A collection of values returned by getKeyHandles.
type GetKeyHandlesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string                   `pulumi:"id"`
	KeyHandles []GetKeyHandlesKeyHandle `pulumi:"keyHandles"`
	// The location of the KMS Key and KeyHandle.
	Location string `pulumi:"location"`
	// The identifier of the project where KMS KeyHandle is created.
	Project *string `pulumi:"project"`
	// Indicates the resource type that the resulting CryptoKey is meant to protect, e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
	ResourceTypeSelector string `pulumi:"resourceTypeSelector"`
}

func GetKeyHandlesOutput(ctx *pulumi.Context, args GetKeyHandlesOutputArgs, opts ...pulumi.InvokeOption) GetKeyHandlesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetKeyHandlesResultOutput, error) {
			args := v.(GetKeyHandlesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:kms/getKeyHandles:getKeyHandles", args, GetKeyHandlesResultOutput{}, options).(GetKeyHandlesResultOutput), nil
		}).(GetKeyHandlesResultOutput)
}

// A collection of arguments for invoking getKeyHandles.
type GetKeyHandlesOutputArgs struct {
	// The Google Cloud Platform location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	Location pulumi.StringInput `pulumi:"location"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The resource type by which to filter KeyHandle e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
	//
	// ***
	ResourceTypeSelector pulumi.StringInput `pulumi:"resourceTypeSelector"`
}

func (GetKeyHandlesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyHandlesArgs)(nil)).Elem()
}

// A collection of values returned by getKeyHandles.
type GetKeyHandlesResultOutput struct{ *pulumi.OutputState }

func (GetKeyHandlesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyHandlesResult)(nil)).Elem()
}

func (o GetKeyHandlesResultOutput) ToGetKeyHandlesResultOutput() GetKeyHandlesResultOutput {
	return o
}

func (o GetKeyHandlesResultOutput) ToGetKeyHandlesResultOutputWithContext(ctx context.Context) GetKeyHandlesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetKeyHandlesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyHandlesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetKeyHandlesResultOutput) KeyHandles() GetKeyHandlesKeyHandleArrayOutput {
	return o.ApplyT(func(v GetKeyHandlesResult) []GetKeyHandlesKeyHandle { return v.KeyHandles }).(GetKeyHandlesKeyHandleArrayOutput)
}

// The location of the KMS Key and KeyHandle.
func (o GetKeyHandlesResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyHandlesResult) string { return v.Location }).(pulumi.StringOutput)
}

// The identifier of the project where KMS KeyHandle is created.
func (o GetKeyHandlesResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeyHandlesResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Indicates the resource type that the resulting CryptoKey is meant to protect, e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
func (o GetKeyHandlesResultOutput) ResourceTypeSelector() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyHandlesResult) string { return v.ResourceTypeSelector }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKeyHandlesResultOutput{})
}
