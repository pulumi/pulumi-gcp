// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Kms Key Handle Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/projects"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create Folder in GCP Organization
//			autokmsFolder, err := organizations.NewFolder(ctx, "autokms_folder", &organizations.FolderArgs{
//				DisplayName: pulumi.String("folder-example"),
//				Parent:      pulumi.String("organizations/123456789"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create the key project
//			keyProject, err := organizations.NewProject(ctx, "key_project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("key-proj"),
//				Name:           pulumi.String("key-proj"),
//				FolderId:       autokmsFolder.FolderId,
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				autokmsFolder,
//			}))
//			if err != nil {
//				return err
//			}
//			// Create the resource project
//			resourceProject, err := organizations.NewProject(ctx, "resource_project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("resources"),
//				Name:           pulumi.String("resources"),
//				FolderId:       autokmsFolder.FolderId,
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				autokmsFolder,
//			}))
//			if err != nil {
//				return err
//			}
//			// Enable the Cloud KMS API
//			kmsApiService, err := projects.NewService(ctx, "kms_api_service", &projects.ServiceArgs{
//				Service:                  pulumi.String("cloudkms.googleapis.com"),
//				Project:                  keyProject.ProjectId,
//				DisableOnDestroy:         pulumi.Bool(false),
//				DisableDependentServices: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				keyProject,
//			}))
//			if err != nil {
//				return err
//			}
//			// Wait delay after enabling APIs
//			waitEnableServiceApi, err := time.NewSleep(ctx, "wait_enable_service_api", &time.SleepArgs{
//				CreateDuration: "30s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				kmsApiService,
//			}))
//			if err != nil {
//				return err
//			}
//			// Create KMS Service Agent
//			kmsServiceAgent, err := projects.NewServiceIdentity(ctx, "kms_service_agent", &projects.ServiceIdentityArgs{
//				Service: pulumi.String("cloudkms.googleapis.com"),
//				Project: keyProject.Number,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitEnableServiceApi,
//			}))
//			if err != nil {
//				return err
//			}
//			// Wait delay after creating service agent.
//			waitServiceAgent, err := time.NewSleep(ctx, "wait_service_agent", &time.SleepArgs{
//				CreateDuration: "10s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				kmsServiceAgent,
//			}))
//			if err != nil {
//				return err
//			}
//			// Grant the KMS Service Agent the Cloud KMS Admin role
//			autokeyProjectAdmin, err := projects.NewIAMMember(ctx, "autokey_project_admin", &projects.IAMMemberArgs{
//				Project: keyProject.ProjectId,
//				Role:    pulumi.String("roles/cloudkms.admin"),
//				Member: keyProject.Number.ApplyT(func(number string) (string, error) {
//					return fmt.Sprintf("serviceAccount:service-%v@gcp-sa-cloudkms.iam.gserviceaccount.com", number), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitServiceAgent,
//			}))
//			if err != nil {
//				return err
//			}
//			// Wait delay after granting IAM permissions
//			waitSrvAccPermissions, err := time.NewSleep(ctx, "wait_srv_acc_permissions", &time.SleepArgs{
//				CreateDuration: "10s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				autokeyProjectAdmin,
//			}))
//			if err != nil {
//				return err
//			}
//			autokeyConfig, err := kms.NewAutokeyConfig(ctx, "autokey_config", &kms.AutokeyConfigArgs{
//				Folder: autokmsFolder.FolderId,
//				KeyProject: keyProject.ProjectId.ApplyT(func(projectId string) (string, error) {
//					return fmt.Sprintf("projects/%v", projectId), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitSrvAccPermissions,
//			}))
//			if err != nil {
//				return err
//			}
//			// Wait delay for autokey config to take effect
//			waitAutokeyConfig, err := time.NewSleep(ctx, "wait_autokey_config", &time.SleepArgs{
//				CreateDuration: "10s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				autokeyConfig,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewKeyHandle(ctx, "example-keyhandle", &kms.KeyHandleArgs{
//				Project:              resourceProject.ProjectId,
//				Name:                 pulumi.String("example-key-handle"),
//				Location:             pulumi.String("global"),
//				ResourceTypeSelector: pulumi.String("storage.googleapis.com/Bucket"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitAutokeyConfig,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// KeyHandle can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/keyHandles/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, KeyHandle can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:kms/keyHandle:KeyHandle default projects/{{project}}/locations/{{location}}/keyHandles/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:kms/keyHandle:KeyHandle default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:kms/keyHandle:KeyHandle default {{location}}/{{name}}
// ```
type KeyHandle struct {
	pulumi.CustomResourceState

	// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
	// product/project/location, for example
	// `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
	KmsKey pulumi.StringOutput `pulumi:"kmsKey"`
	// The location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for the KeyHandle.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Selector of the resource type where we want to protect resources.
	// For example, `storage.googleapis.com/Bucket`.
	ResourceTypeSelector pulumi.StringOutput `pulumi:"resourceTypeSelector"`
}

// NewKeyHandle registers a new resource with the given unique name, arguments, and options.
func NewKeyHandle(ctx *pulumi.Context,
	name string, args *KeyHandleArgs, opts ...pulumi.ResourceOption) (*KeyHandle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ResourceTypeSelector == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTypeSelector'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyHandle
	err := ctx.RegisterResource("gcp:kms/keyHandle:KeyHandle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyHandle gets an existing KeyHandle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyHandle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyHandleState, opts ...pulumi.ResourceOption) (*KeyHandle, error) {
	var resource KeyHandle
	err := ctx.ReadResource("gcp:kms/keyHandle:KeyHandle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyHandle resources.
type keyHandleState struct {
	// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
	// product/project/location, for example
	// `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
	KmsKey *string `pulumi:"kmsKey"`
	// The location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	//
	// ***
	Location *string `pulumi:"location"`
	// The resource name for the KeyHandle.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Selector of the resource type where we want to protect resources.
	// For example, `storage.googleapis.com/Bucket`.
	ResourceTypeSelector *string `pulumi:"resourceTypeSelector"`
}

type KeyHandleState struct {
	// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
	// product/project/location, for example
	// `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
	KmsKey pulumi.StringPtrInput
	// The location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	//
	// ***
	Location pulumi.StringPtrInput
	// The resource name for the KeyHandle.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Selector of the resource type where we want to protect resources.
	// For example, `storage.googleapis.com/Bucket`.
	ResourceTypeSelector pulumi.StringPtrInput
}

func (KeyHandleState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyHandleState)(nil)).Elem()
}

type keyHandleArgs struct {
	// The location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	//
	// ***
	Location string `pulumi:"location"`
	// The resource name for the KeyHandle.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Selector of the resource type where we want to protect resources.
	// For example, `storage.googleapis.com/Bucket`.
	ResourceTypeSelector string `pulumi:"resourceTypeSelector"`
}

// The set of arguments for constructing a KeyHandle resource.
type KeyHandleArgs struct {
	// The location for the KeyHandle.
	// A full list of valid locations can be found by running `gcloud kms locations list`.
	//
	// ***
	Location pulumi.StringInput
	// The resource name for the KeyHandle.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Selector of the resource type where we want to protect resources.
	// For example, `storage.googleapis.com/Bucket`.
	ResourceTypeSelector pulumi.StringInput
}

func (KeyHandleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyHandleArgs)(nil)).Elem()
}

type KeyHandleInput interface {
	pulumi.Input

	ToKeyHandleOutput() KeyHandleOutput
	ToKeyHandleOutputWithContext(ctx context.Context) KeyHandleOutput
}

func (*KeyHandle) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyHandle)(nil)).Elem()
}

func (i *KeyHandle) ToKeyHandleOutput() KeyHandleOutput {
	return i.ToKeyHandleOutputWithContext(context.Background())
}

func (i *KeyHandle) ToKeyHandleOutputWithContext(ctx context.Context) KeyHandleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyHandleOutput)
}

// KeyHandleArrayInput is an input type that accepts KeyHandleArray and KeyHandleArrayOutput values.
// You can construct a concrete instance of `KeyHandleArrayInput` via:
//
//	KeyHandleArray{ KeyHandleArgs{...} }
type KeyHandleArrayInput interface {
	pulumi.Input

	ToKeyHandleArrayOutput() KeyHandleArrayOutput
	ToKeyHandleArrayOutputWithContext(context.Context) KeyHandleArrayOutput
}

type KeyHandleArray []KeyHandleInput

func (KeyHandleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyHandle)(nil)).Elem()
}

func (i KeyHandleArray) ToKeyHandleArrayOutput() KeyHandleArrayOutput {
	return i.ToKeyHandleArrayOutputWithContext(context.Background())
}

func (i KeyHandleArray) ToKeyHandleArrayOutputWithContext(ctx context.Context) KeyHandleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyHandleArrayOutput)
}

// KeyHandleMapInput is an input type that accepts KeyHandleMap and KeyHandleMapOutput values.
// You can construct a concrete instance of `KeyHandleMapInput` via:
//
//	KeyHandleMap{ "key": KeyHandleArgs{...} }
type KeyHandleMapInput interface {
	pulumi.Input

	ToKeyHandleMapOutput() KeyHandleMapOutput
	ToKeyHandleMapOutputWithContext(context.Context) KeyHandleMapOutput
}

type KeyHandleMap map[string]KeyHandleInput

func (KeyHandleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyHandle)(nil)).Elem()
}

func (i KeyHandleMap) ToKeyHandleMapOutput() KeyHandleMapOutput {
	return i.ToKeyHandleMapOutputWithContext(context.Background())
}

func (i KeyHandleMap) ToKeyHandleMapOutputWithContext(ctx context.Context) KeyHandleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyHandleMapOutput)
}

type KeyHandleOutput struct{ *pulumi.OutputState }

func (KeyHandleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyHandle)(nil)).Elem()
}

func (o KeyHandleOutput) ToKeyHandleOutput() KeyHandleOutput {
	return o
}

func (o KeyHandleOutput) ToKeyHandleOutputWithContext(ctx context.Context) KeyHandleOutput {
	return o
}

// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
// product/project/location, for example
// `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
func (o KeyHandleOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyHandle) pulumi.StringOutput { return v.KmsKey }).(pulumi.StringOutput)
}

// The location for the KeyHandle.
// A full list of valid locations can be found by running `gcloud kms locations list`.
//
// ***
func (o KeyHandleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyHandle) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the KeyHandle.
func (o KeyHandleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyHandle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o KeyHandleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyHandle) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Selector of the resource type where we want to protect resources.
// For example, `storage.googleapis.com/Bucket`.
func (o KeyHandleOutput) ResourceTypeSelector() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyHandle) pulumi.StringOutput { return v.ResourceTypeSelector }).(pulumi.StringOutput)
}

type KeyHandleArrayOutput struct{ *pulumi.OutputState }

func (KeyHandleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyHandle)(nil)).Elem()
}

func (o KeyHandleArrayOutput) ToKeyHandleArrayOutput() KeyHandleArrayOutput {
	return o
}

func (o KeyHandleArrayOutput) ToKeyHandleArrayOutputWithContext(ctx context.Context) KeyHandleArrayOutput {
	return o
}

func (o KeyHandleArrayOutput) Index(i pulumi.IntInput) KeyHandleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyHandle {
		return vs[0].([]*KeyHandle)[vs[1].(int)]
	}).(KeyHandleOutput)
}

type KeyHandleMapOutput struct{ *pulumi.OutputState }

func (KeyHandleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyHandle)(nil)).Elem()
}

func (o KeyHandleMapOutput) ToKeyHandleMapOutput() KeyHandleMapOutput {
	return o
}

func (o KeyHandleMapOutput) ToKeyHandleMapOutputWithContext(ctx context.Context) KeyHandleMapOutput {
	return o
}

func (o KeyHandleMapOutput) MapIndex(k pulumi.StringInput) KeyHandleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyHandle {
		return vs[0].(map[string]*KeyHandle)[vs[1].(string)]
	}).(KeyHandleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyHandleInput)(nil)).Elem(), &KeyHandle{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyHandleArrayInput)(nil)).Elem(), KeyHandleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyHandleMapInput)(nil)).Elem(), KeyHandleMap{})
	pulumi.RegisterOutputType(KeyHandleOutput{})
	pulumi.RegisterOutputType(KeyHandleArrayOutput{})
	pulumi.RegisterOutputType(KeyHandleMapOutput{})
}
