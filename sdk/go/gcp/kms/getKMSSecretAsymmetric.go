// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// First, create a KMS KeyRing and CryptoKey using the resource definitions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myKeyRing, err := kms.NewKeyRing(ctx, "my_key_ring", &kms.KeyRingArgs{
//				Project:  pulumi.String("my-project"),
//				Name:     pulumi.String("my-key-ring"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			myCryptoKeyCryptoKey, err := kms.NewCryptoKey(ctx, "my_crypto_key", &kms.CryptoKeyArgs{
//				Name:    pulumi.String("my-crypto-key"),
//				KeyRing: myKeyRing.ID(),
//				Purpose: pulumi.String("ASYMMETRIC_DECRYPT"),
//				VersionTemplate: &kms.CryptoKeyVersionTemplateArgs{
//					Algorithm: pulumi.String("RSA_DECRYPT_OAEP_4096_SHA256"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = kms.GetKMSCryptoKeyVersionOutput(ctx, kms.GetKMSCryptoKeyVersionOutputArgs{
//				CryptoKey: myCryptoKeyCryptoKey.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Next, use the [Cloud SDK](https://cloud.google.com/kms/docs/encrypt-decrypt-rsa#kms-encrypt-asymmetric-cli) to encrypt
// some sensitive information:
//
// Finally, reference the encrypted ciphertext in your resource definitions:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/sql"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.GetKMSSecretAsymmetric(ctx, &kms.GetKMSSecretAsymmetricArgs{
//				CryptoKeyVersion: myCryptoKey.Id,
//				Crc32:            pulumi.StringRef("12c59e54"),
//				Ciphertext: `    M7nUoba9EGVTu2LjNjBKGdGVBYjyS/i/AY+4yQMQF0Qf/RfUfX31Jw6+VO9OuThq
//	    ylu/7ihX9XD4bM7yYdXnMv9p1OHQUlorSBSbb/J6n1W9UJhcp6um8Tw8/Isx4f75
//	    4PskYS6f8Y2ItliGt1/A9iR5BTgGtJBwOxMlgoX2Ggq+Nh4E5SbdoaE5o6CO1nBx
//	    eIPsPEebQ6qC4JehQM3IGuV/lrm58+hZhaXAqNzX1cEYyAt5GYqJIVCiI585SUYs
//	    wRToGyTgaN+zthF0HP9IWlR4Am4LmJ/1OcePTnYw11CkU8wNRbDzVAzogwNH+rXr
//	    LTmf7hxVjBm6bBSVSNFcBKAXFlllubSfIeZ5hgzGqn54OmSf6odO12L5JxllddHc
//	    yAd54vWKs2kJtnsKV2V4ZdkI0w6y1TeI67baFZDNGo6qsCpFMPnvv7d46Pg2VOp1
//	    J6Ivner0NnNHE4MzNmpZRk8WXMwqq4P/gTiT7F/aCX6oFCUQ4AWPQhJYh2dkcOmL
//	    IP+47Veb10aFn61F1CJwpmOOiGNXKdDT1vK8CMnnwhm825K0q/q9Zqpzc1+1ae1z
//	    mSqol1zCoa88CuSN6nTLQlVnN/dzfrGbc0boJPaM0iGhHtSzHk4SWg84LhiJB1q9
//	    A9XFJmOVdkvRY9nnz/iVLAdd0Q3vFtLqCdUYsNN2yh4=
//
// `,
//
//			}, nil)
//			if err != nil {
//				return err
//			}
//			dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
//				ByteLength: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			main, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
//				Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
//					return fmt.Sprintf("main-instance-%v", hex), nil
//				}).(pulumi.StringOutput),
//				DatabaseVersion: pulumi.String("MYSQL_5_7"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier: pulumi.String("db-f1-micro"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sql.NewUser(ctx, "users", &sql.UserArgs{
//				Name:     pulumi.String("me"),
//				Instance: main.Name,
//				Host:     pulumi.String("me.com"),
//				Password: pulumi.Any(sqlUserPasswordGoogleKmsSecret.Plaintext),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This will result in a Cloud SQL user being created with password `my-secret-password`.
func GetKMSSecretAsymmetric(ctx *pulumi.Context, args *GetKMSSecretAsymmetricArgs, opts ...pulumi.InvokeOption) (*GetKMSSecretAsymmetricResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKMSSecretAsymmetricResult
	err := ctx.Invoke("gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKMSSecretAsymmetric.
type GetKMSSecretAsymmetricArgs struct {
	// The ciphertext to be decrypted, encoded in base64
	Ciphertext string `pulumi:"ciphertext"`
	// The crc32 checksum of the `ciphertext` in hexadecimal notation. If not specified, it will be computed.
	Crc32 *string `pulumi:"crc32"`
	// The id of the CryptoKey version that will be used to
	// decrypt the provided ciphertext. This is represented by the format
	// `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
	CryptoKeyVersion string `pulumi:"cryptoKeyVersion"`
}

// A collection of values returned by getKMSSecretAsymmetric.
type GetKMSSecretAsymmetricResult struct {
	Ciphertext string `pulumi:"ciphertext"`
	// Contains the crc32 checksum of the provided ciphertext.
	Crc32            *string `pulumi:"crc32"`
	CryptoKeyVersion string  `pulumi:"cryptoKeyVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Contains the result of decrypting the provided ciphertext.
	Plaintext string `pulumi:"plaintext"`
}

func GetKMSSecretAsymmetricOutput(ctx *pulumi.Context, args GetKMSSecretAsymmetricOutputArgs, opts ...pulumi.InvokeOption) GetKMSSecretAsymmetricResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetKMSSecretAsymmetricResultOutput, error) {
			args := v.(GetKMSSecretAsymmetricArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric", args, GetKMSSecretAsymmetricResultOutput{}, options).(GetKMSSecretAsymmetricResultOutput), nil
		}).(GetKMSSecretAsymmetricResultOutput)
}

// A collection of arguments for invoking getKMSSecretAsymmetric.
type GetKMSSecretAsymmetricOutputArgs struct {
	// The ciphertext to be decrypted, encoded in base64
	Ciphertext pulumi.StringInput `pulumi:"ciphertext"`
	// The crc32 checksum of the `ciphertext` in hexadecimal notation. If not specified, it will be computed.
	Crc32 pulumi.StringPtrInput `pulumi:"crc32"`
	// The id of the CryptoKey version that will be used to
	// decrypt the provided ciphertext. This is represented by the format
	// `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
	CryptoKeyVersion pulumi.StringInput `pulumi:"cryptoKeyVersion"`
}

func (GetKMSSecretAsymmetricOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSSecretAsymmetricArgs)(nil)).Elem()
}

// A collection of values returned by getKMSSecretAsymmetric.
type GetKMSSecretAsymmetricResultOutput struct{ *pulumi.OutputState }

func (GetKMSSecretAsymmetricResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSSecretAsymmetricResult)(nil)).Elem()
}

func (o GetKMSSecretAsymmetricResultOutput) ToGetKMSSecretAsymmetricResultOutput() GetKMSSecretAsymmetricResultOutput {
	return o
}

func (o GetKMSSecretAsymmetricResultOutput) ToGetKMSSecretAsymmetricResultOutputWithContext(ctx context.Context) GetKMSSecretAsymmetricResultOutput {
	return o
}

func (o GetKMSSecretAsymmetricResultOutput) Ciphertext() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSSecretAsymmetricResult) string { return v.Ciphertext }).(pulumi.StringOutput)
}

// Contains the crc32 checksum of the provided ciphertext.
func (o GetKMSSecretAsymmetricResultOutput) Crc32() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKMSSecretAsymmetricResult) *string { return v.Crc32 }).(pulumi.StringPtrOutput)
}

func (o GetKMSSecretAsymmetricResultOutput) CryptoKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSSecretAsymmetricResult) string { return v.CryptoKeyVersion }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetKMSSecretAsymmetricResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSSecretAsymmetricResult) string { return v.Id }).(pulumi.StringOutput)
}

// Contains the result of decrypting the provided ciphertext.
func (o GetKMSSecretAsymmetricResultOutput) Plaintext() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSSecretAsymmetricResult) string { return v.Plaintext }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKMSSecretAsymmetricResultOutput{})
}
