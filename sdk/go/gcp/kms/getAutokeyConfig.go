// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.LookupAutokeyConfig(ctx, &kms.LookupAutokeyConfigArgs{
//				Folder: "folders/123",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAutokeyConfig(ctx *pulumi.Context, args *LookupAutokeyConfigArgs, opts ...pulumi.InvokeOption) (*LookupAutokeyConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAutokeyConfigResult
	err := ctx.Invoke("gcp:kms/getAutokeyConfig:getAutokeyConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAutokeyConfig.
type LookupAutokeyConfigArgs struct {
	// The folder in which the AutokeyConfig is configured. If it
	// is not provided, the provider folder is used.
	Folder string `pulumi:"folder"`
}

// A collection of values returned by getAutokeyConfig.
type LookupAutokeyConfigResult struct {
	Etag   string `pulumi:"etag"`
	Folder string `pulumi:"folder"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The identifier of the project hosting KMS KeyRings and Keys generated by Autokey. Its format is `projects/{projectId}`.
	KeyProject string `pulumi:"keyProject"`
}

func LookupAutokeyConfigOutput(ctx *pulumi.Context, args LookupAutokeyConfigOutputArgs, opts ...pulumi.InvokeOption) LookupAutokeyConfigResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAutokeyConfigResultOutput, error) {
			args := v.(LookupAutokeyConfigArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:kms/getAutokeyConfig:getAutokeyConfig", args, LookupAutokeyConfigResultOutput{}, options).(LookupAutokeyConfigResultOutput), nil
		}).(LookupAutokeyConfigResultOutput)
}

// A collection of arguments for invoking getAutokeyConfig.
type LookupAutokeyConfigOutputArgs struct {
	// The folder in which the AutokeyConfig is configured. If it
	// is not provided, the provider folder is used.
	Folder pulumi.StringInput `pulumi:"folder"`
}

func (LookupAutokeyConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAutokeyConfigArgs)(nil)).Elem()
}

// A collection of values returned by getAutokeyConfig.
type LookupAutokeyConfigResultOutput struct{ *pulumi.OutputState }

func (LookupAutokeyConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAutokeyConfigResult)(nil)).Elem()
}

func (o LookupAutokeyConfigResultOutput) ToLookupAutokeyConfigResultOutput() LookupAutokeyConfigResultOutput {
	return o
}

func (o LookupAutokeyConfigResultOutput) ToLookupAutokeyConfigResultOutputWithContext(ctx context.Context) LookupAutokeyConfigResultOutput {
	return o
}

func (o LookupAutokeyConfigResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutokeyConfigResult) string { return v.Etag }).(pulumi.StringOutput)
}

func (o LookupAutokeyConfigResultOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutokeyConfigResult) string { return v.Folder }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAutokeyConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutokeyConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identifier of the project hosting KMS KeyRings and Keys generated by Autokey. Its format is `projects/{projectId}`.
func (o LookupAutokeyConfigResultOutput) KeyProject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutokeyConfigResult) string { return v.KeyProject }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAutokeyConfigResultOutput{})
}
