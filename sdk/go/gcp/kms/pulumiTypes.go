// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CryptoKeyIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// CryptoKeyIAMBindingConditionInput is an input type that accepts CryptoKeyIAMBindingConditionArgs and CryptoKeyIAMBindingConditionOutput values.
// You can construct a concrete instance of `CryptoKeyIAMBindingConditionInput` via:
//
//	CryptoKeyIAMBindingConditionArgs{...}
type CryptoKeyIAMBindingConditionInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput
	ToCryptoKeyIAMBindingConditionOutputWithContext(context.Context) CryptoKeyIAMBindingConditionOutput
}

type CryptoKeyIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput {
	return i.ToCryptoKeyIAMBindingConditionOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionOutput)
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return i.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionOutput).ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx)
}

// CryptoKeyIAMBindingConditionPtrInput is an input type that accepts CryptoKeyIAMBindingConditionArgs, CryptoKeyIAMBindingConditionPtr and CryptoKeyIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `CryptoKeyIAMBindingConditionPtrInput` via:
//
//	        CryptoKeyIAMBindingConditionArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput
	ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Context) CryptoKeyIAMBindingConditionPtrOutput
}

type cryptoKeyIAMBindingConditionPtrType CryptoKeyIAMBindingConditionArgs

func CryptoKeyIAMBindingConditionPtr(v *CryptoKeyIAMBindingConditionArgs) CryptoKeyIAMBindingConditionPtrInput {
	return (*cryptoKeyIAMBindingConditionPtrType)(v)
}

func (*cryptoKeyIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (i *cryptoKeyIAMBindingConditionPtrType) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return i.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIAMBindingConditionPtrType) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionPtrOutput)
}

type CryptoKeyIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return o.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyIAMBindingCondition) *CryptoKeyIAMBindingCondition {
		return &v
	}).(CryptoKeyIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o CryptoKeyIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionPtrOutput) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionPtrOutput) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionPtrOutput) Elem() CryptoKeyIAMBindingConditionOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) CryptoKeyIAMBindingCondition {
		if v != nil {
			return *v
		}
		var ret CryptoKeyIAMBindingCondition
		return ret
	}).(CryptoKeyIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o CryptoKeyIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// CryptoKeyIAMMemberConditionInput is an input type that accepts CryptoKeyIAMMemberConditionArgs and CryptoKeyIAMMemberConditionOutput values.
// You can construct a concrete instance of `CryptoKeyIAMMemberConditionInput` via:
//
//	CryptoKeyIAMMemberConditionArgs{...}
type CryptoKeyIAMMemberConditionInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput
	ToCryptoKeyIAMMemberConditionOutputWithContext(context.Context) CryptoKeyIAMMemberConditionOutput
}

type CryptoKeyIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput {
	return i.ToCryptoKeyIAMMemberConditionOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionOutput)
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return i.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionOutput).ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx)
}

// CryptoKeyIAMMemberConditionPtrInput is an input type that accepts CryptoKeyIAMMemberConditionArgs, CryptoKeyIAMMemberConditionPtr and CryptoKeyIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `CryptoKeyIAMMemberConditionPtrInput` via:
//
//	        CryptoKeyIAMMemberConditionArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput
	ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Context) CryptoKeyIAMMemberConditionPtrOutput
}

type cryptoKeyIAMMemberConditionPtrType CryptoKeyIAMMemberConditionArgs

func CryptoKeyIAMMemberConditionPtr(v *CryptoKeyIAMMemberConditionArgs) CryptoKeyIAMMemberConditionPtrInput {
	return (*cryptoKeyIAMMemberConditionPtrType)(v)
}

func (*cryptoKeyIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (i *cryptoKeyIAMMemberConditionPtrType) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return i.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIAMMemberConditionPtrType) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionPtrOutput)
}

type CryptoKeyIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return o.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyIAMMemberCondition) *CryptoKeyIAMMemberCondition {
		return &v
	}).(CryptoKeyIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o CryptoKeyIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionPtrOutput) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionPtrOutput) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionPtrOutput) Elem() CryptoKeyIAMMemberConditionOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) CryptoKeyIAMMemberCondition {
		if v != nil {
			return *v
		}
		var ret CryptoKeyIAMMemberCondition
		return ret
	}).(CryptoKeyIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o CryptoKeyIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyKeyAccessJustificationsPolicy struct {
	// The list of allowed reasons for access to this CryptoKey. Zero allowed
	// access reasons means all encrypt, decrypt, and sign operations for
	// this CryptoKey will fail.
	AllowedAccessReasons []string `pulumi:"allowedAccessReasons"`
}

// CryptoKeyKeyAccessJustificationsPolicyInput is an input type that accepts CryptoKeyKeyAccessJustificationsPolicyArgs and CryptoKeyKeyAccessJustificationsPolicyOutput values.
// You can construct a concrete instance of `CryptoKeyKeyAccessJustificationsPolicyInput` via:
//
//	CryptoKeyKeyAccessJustificationsPolicyArgs{...}
type CryptoKeyKeyAccessJustificationsPolicyInput interface {
	pulumi.Input

	ToCryptoKeyKeyAccessJustificationsPolicyOutput() CryptoKeyKeyAccessJustificationsPolicyOutput
	ToCryptoKeyKeyAccessJustificationsPolicyOutputWithContext(context.Context) CryptoKeyKeyAccessJustificationsPolicyOutput
}

type CryptoKeyKeyAccessJustificationsPolicyArgs struct {
	// The list of allowed reasons for access to this CryptoKey. Zero allowed
	// access reasons means all encrypt, decrypt, and sign operations for
	// this CryptoKey will fail.
	AllowedAccessReasons pulumi.StringArrayInput `pulumi:"allowedAccessReasons"`
}

func (CryptoKeyKeyAccessJustificationsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (i CryptoKeyKeyAccessJustificationsPolicyArgs) ToCryptoKeyKeyAccessJustificationsPolicyOutput() CryptoKeyKeyAccessJustificationsPolicyOutput {
	return i.ToCryptoKeyKeyAccessJustificationsPolicyOutputWithContext(context.Background())
}

func (i CryptoKeyKeyAccessJustificationsPolicyArgs) ToCryptoKeyKeyAccessJustificationsPolicyOutputWithContext(ctx context.Context) CryptoKeyKeyAccessJustificationsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyKeyAccessJustificationsPolicyOutput)
}

func (i CryptoKeyKeyAccessJustificationsPolicyArgs) ToCryptoKeyKeyAccessJustificationsPolicyPtrOutput() CryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return i.ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(context.Background())
}

func (i CryptoKeyKeyAccessJustificationsPolicyArgs) ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(ctx context.Context) CryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyKeyAccessJustificationsPolicyOutput).ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(ctx)
}

// CryptoKeyKeyAccessJustificationsPolicyPtrInput is an input type that accepts CryptoKeyKeyAccessJustificationsPolicyArgs, CryptoKeyKeyAccessJustificationsPolicyPtr and CryptoKeyKeyAccessJustificationsPolicyPtrOutput values.
// You can construct a concrete instance of `CryptoKeyKeyAccessJustificationsPolicyPtrInput` via:
//
//	        CryptoKeyKeyAccessJustificationsPolicyArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyKeyAccessJustificationsPolicyPtrInput interface {
	pulumi.Input

	ToCryptoKeyKeyAccessJustificationsPolicyPtrOutput() CryptoKeyKeyAccessJustificationsPolicyPtrOutput
	ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(context.Context) CryptoKeyKeyAccessJustificationsPolicyPtrOutput
}

type cryptoKeyKeyAccessJustificationsPolicyPtrType CryptoKeyKeyAccessJustificationsPolicyArgs

func CryptoKeyKeyAccessJustificationsPolicyPtr(v *CryptoKeyKeyAccessJustificationsPolicyArgs) CryptoKeyKeyAccessJustificationsPolicyPtrInput {
	return (*cryptoKeyKeyAccessJustificationsPolicyPtrType)(v)
}

func (*cryptoKeyKeyAccessJustificationsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (i *cryptoKeyKeyAccessJustificationsPolicyPtrType) ToCryptoKeyKeyAccessJustificationsPolicyPtrOutput() CryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return i.ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyKeyAccessJustificationsPolicyPtrType) ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(ctx context.Context) CryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyKeyAccessJustificationsPolicyPtrOutput)
}

type CryptoKeyKeyAccessJustificationsPolicyOutput struct{ *pulumi.OutputState }

func (CryptoKeyKeyAccessJustificationsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (o CryptoKeyKeyAccessJustificationsPolicyOutput) ToCryptoKeyKeyAccessJustificationsPolicyOutput() CryptoKeyKeyAccessJustificationsPolicyOutput {
	return o
}

func (o CryptoKeyKeyAccessJustificationsPolicyOutput) ToCryptoKeyKeyAccessJustificationsPolicyOutputWithContext(ctx context.Context) CryptoKeyKeyAccessJustificationsPolicyOutput {
	return o
}

func (o CryptoKeyKeyAccessJustificationsPolicyOutput) ToCryptoKeyKeyAccessJustificationsPolicyPtrOutput() CryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return o.ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(context.Background())
}

func (o CryptoKeyKeyAccessJustificationsPolicyOutput) ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(ctx context.Context) CryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyKeyAccessJustificationsPolicy) *CryptoKeyKeyAccessJustificationsPolicy {
		return &v
	}).(CryptoKeyKeyAccessJustificationsPolicyPtrOutput)
}

// The list of allowed reasons for access to this CryptoKey. Zero allowed
// access reasons means all encrypt, decrypt, and sign operations for
// this CryptoKey will fail.
func (o CryptoKeyKeyAccessJustificationsPolicyOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CryptoKeyKeyAccessJustificationsPolicy) []string { return v.AllowedAccessReasons }).(pulumi.StringArrayOutput)
}

type CryptoKeyKeyAccessJustificationsPolicyPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyKeyAccessJustificationsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (o CryptoKeyKeyAccessJustificationsPolicyPtrOutput) ToCryptoKeyKeyAccessJustificationsPolicyPtrOutput() CryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return o
}

func (o CryptoKeyKeyAccessJustificationsPolicyPtrOutput) ToCryptoKeyKeyAccessJustificationsPolicyPtrOutputWithContext(ctx context.Context) CryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return o
}

func (o CryptoKeyKeyAccessJustificationsPolicyPtrOutput) Elem() CryptoKeyKeyAccessJustificationsPolicyOutput {
	return o.ApplyT(func(v *CryptoKeyKeyAccessJustificationsPolicy) CryptoKeyKeyAccessJustificationsPolicy {
		if v != nil {
			return *v
		}
		var ret CryptoKeyKeyAccessJustificationsPolicy
		return ret
	}).(CryptoKeyKeyAccessJustificationsPolicyOutput)
}

// The list of allowed reasons for access to this CryptoKey. Zero allowed
// access reasons means all encrypt, decrypt, and sign operations for
// this CryptoKey will fail.
func (o CryptoKeyKeyAccessJustificationsPolicyPtrOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CryptoKeyKeyAccessJustificationsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAccessReasons
	}).(pulumi.StringArrayOutput)
}

type CryptoKeyPrimary struct {
	// The resource name for the CryptoKey.
	Name *string `pulumi:"name"`
	// (Output)
	// The current state of the CryptoKeyVersion.
	State *string `pulumi:"state"`
}

// CryptoKeyPrimaryInput is an input type that accepts CryptoKeyPrimaryArgs and CryptoKeyPrimaryOutput values.
// You can construct a concrete instance of `CryptoKeyPrimaryInput` via:
//
//	CryptoKeyPrimaryArgs{...}
type CryptoKeyPrimaryInput interface {
	pulumi.Input

	ToCryptoKeyPrimaryOutput() CryptoKeyPrimaryOutput
	ToCryptoKeyPrimaryOutputWithContext(context.Context) CryptoKeyPrimaryOutput
}

type CryptoKeyPrimaryArgs struct {
	// The resource name for the CryptoKey.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Output)
	// The current state of the CryptoKeyVersion.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CryptoKeyPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyPrimary)(nil)).Elem()
}

func (i CryptoKeyPrimaryArgs) ToCryptoKeyPrimaryOutput() CryptoKeyPrimaryOutput {
	return i.ToCryptoKeyPrimaryOutputWithContext(context.Background())
}

func (i CryptoKeyPrimaryArgs) ToCryptoKeyPrimaryOutputWithContext(ctx context.Context) CryptoKeyPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyPrimaryOutput)
}

// CryptoKeyPrimaryArrayInput is an input type that accepts CryptoKeyPrimaryArray and CryptoKeyPrimaryArrayOutput values.
// You can construct a concrete instance of `CryptoKeyPrimaryArrayInput` via:
//
//	CryptoKeyPrimaryArray{ CryptoKeyPrimaryArgs{...} }
type CryptoKeyPrimaryArrayInput interface {
	pulumi.Input

	ToCryptoKeyPrimaryArrayOutput() CryptoKeyPrimaryArrayOutput
	ToCryptoKeyPrimaryArrayOutputWithContext(context.Context) CryptoKeyPrimaryArrayOutput
}

type CryptoKeyPrimaryArray []CryptoKeyPrimaryInput

func (CryptoKeyPrimaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoKeyPrimary)(nil)).Elem()
}

func (i CryptoKeyPrimaryArray) ToCryptoKeyPrimaryArrayOutput() CryptoKeyPrimaryArrayOutput {
	return i.ToCryptoKeyPrimaryArrayOutputWithContext(context.Background())
}

func (i CryptoKeyPrimaryArray) ToCryptoKeyPrimaryArrayOutputWithContext(ctx context.Context) CryptoKeyPrimaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyPrimaryArrayOutput)
}

type CryptoKeyPrimaryOutput struct{ *pulumi.OutputState }

func (CryptoKeyPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyPrimary)(nil)).Elem()
}

func (o CryptoKeyPrimaryOutput) ToCryptoKeyPrimaryOutput() CryptoKeyPrimaryOutput {
	return o
}

func (o CryptoKeyPrimaryOutput) ToCryptoKeyPrimaryOutputWithContext(ctx context.Context) CryptoKeyPrimaryOutput {
	return o
}

// The resource name for the CryptoKey.
func (o CryptoKeyPrimaryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyPrimary) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Output)
// The current state of the CryptoKeyVersion.
func (o CryptoKeyPrimaryOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyPrimary) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CryptoKeyPrimaryArrayOutput struct{ *pulumi.OutputState }

func (CryptoKeyPrimaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoKeyPrimary)(nil)).Elem()
}

func (o CryptoKeyPrimaryArrayOutput) ToCryptoKeyPrimaryArrayOutput() CryptoKeyPrimaryArrayOutput {
	return o
}

func (o CryptoKeyPrimaryArrayOutput) ToCryptoKeyPrimaryArrayOutputWithContext(ctx context.Context) CryptoKeyPrimaryArrayOutput {
	return o
}

func (o CryptoKeyPrimaryArrayOutput) Index(i pulumi.IntInput) CryptoKeyPrimaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CryptoKeyPrimary {
		return vs[0].([]CryptoKeyPrimary)[vs[1].(int)]
	}).(CryptoKeyPrimaryOutput)
}

type CryptoKeyVersionAttestation struct {
	// The certificate chains needed to validate the attestation
	// Structure is documented below.
	CertChains *CryptoKeyVersionAttestationCertChains `pulumi:"certChains"`
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	Content *string `pulumi:"content"`
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	// Structure is documented below.
	//
	// Deprecated: `externalProtectionLevelOptions` is being un-nested from the `attestation` field. Please use the top level `externalProtectionLevelOptions` field instead.
	ExternalProtectionLevelOptions *CryptoKeyVersionAttestationExternalProtectionLevelOptions `pulumi:"externalProtectionLevelOptions"`
	// (Output)
	// The format of the attestation data.
	Format *string `pulumi:"format"`
}

// CryptoKeyVersionAttestationInput is an input type that accepts CryptoKeyVersionAttestationArgs and CryptoKeyVersionAttestationOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationInput` via:
//
//	CryptoKeyVersionAttestationArgs{...}
type CryptoKeyVersionAttestationInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationOutput() CryptoKeyVersionAttestationOutput
	ToCryptoKeyVersionAttestationOutputWithContext(context.Context) CryptoKeyVersionAttestationOutput
}

type CryptoKeyVersionAttestationArgs struct {
	// The certificate chains needed to validate the attestation
	// Structure is documented below.
	CertChains CryptoKeyVersionAttestationCertChainsPtrInput `pulumi:"certChains"`
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	// Structure is documented below.
	//
	// Deprecated: `externalProtectionLevelOptions` is being un-nested from the `attestation` field. Please use the top level `externalProtectionLevelOptions` field instead.
	ExternalProtectionLevelOptions CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput `pulumi:"externalProtectionLevelOptions"`
	// (Output)
	// The format of the attestation data.
	Format pulumi.StringPtrInput `pulumi:"format"`
}

func (CryptoKeyVersionAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestation)(nil)).Elem()
}

func (i CryptoKeyVersionAttestationArgs) ToCryptoKeyVersionAttestationOutput() CryptoKeyVersionAttestationOutput {
	return i.ToCryptoKeyVersionAttestationOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationArgs) ToCryptoKeyVersionAttestationOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationOutput)
}

// CryptoKeyVersionAttestationArrayInput is an input type that accepts CryptoKeyVersionAttestationArray and CryptoKeyVersionAttestationArrayOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationArrayInput` via:
//
//	CryptoKeyVersionAttestationArray{ CryptoKeyVersionAttestationArgs{...} }
type CryptoKeyVersionAttestationArrayInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationArrayOutput() CryptoKeyVersionAttestationArrayOutput
	ToCryptoKeyVersionAttestationArrayOutputWithContext(context.Context) CryptoKeyVersionAttestationArrayOutput
}

type CryptoKeyVersionAttestationArray []CryptoKeyVersionAttestationInput

func (CryptoKeyVersionAttestationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoKeyVersionAttestation)(nil)).Elem()
}

func (i CryptoKeyVersionAttestationArray) ToCryptoKeyVersionAttestationArrayOutput() CryptoKeyVersionAttestationArrayOutput {
	return i.ToCryptoKeyVersionAttestationArrayOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationArray) ToCryptoKeyVersionAttestationArrayOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationArrayOutput)
}

type CryptoKeyVersionAttestationOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestation)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationOutput) ToCryptoKeyVersionAttestationOutput() CryptoKeyVersionAttestationOutput {
	return o
}

func (o CryptoKeyVersionAttestationOutput) ToCryptoKeyVersionAttestationOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationOutput {
	return o
}

// The certificate chains needed to validate the attestation
// Structure is documented below.
func (o CryptoKeyVersionAttestationOutput) CertChains() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestation) *CryptoKeyVersionAttestationCertChains { return v.CertChains }).(CryptoKeyVersionAttestationCertChainsPtrOutput)
}

// (Output)
// The attestation data provided by the HSM when the key operation was performed.
func (o CryptoKeyVersionAttestationOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestation) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
// Structure is documented below.
//
// Deprecated: `externalProtectionLevelOptions` is being un-nested from the `attestation` field. Please use the top level `externalProtectionLevelOptions` field instead.
func (o CryptoKeyVersionAttestationOutput) ExternalProtectionLevelOptions() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestation) *CryptoKeyVersionAttestationExternalProtectionLevelOptions {
		return v.ExternalProtectionLevelOptions
	}).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput)
}

// (Output)
// The format of the attestation data.
func (o CryptoKeyVersionAttestationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestation) *string { return v.Format }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionAttestationArrayOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoKeyVersionAttestation)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationArrayOutput) ToCryptoKeyVersionAttestationArrayOutput() CryptoKeyVersionAttestationArrayOutput {
	return o
}

func (o CryptoKeyVersionAttestationArrayOutput) ToCryptoKeyVersionAttestationArrayOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationArrayOutput {
	return o
}

func (o CryptoKeyVersionAttestationArrayOutput) Index(i pulumi.IntInput) CryptoKeyVersionAttestationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CryptoKeyVersionAttestation {
		return vs[0].([]CryptoKeyVersionAttestation)[vs[1].(int)]
	}).(CryptoKeyVersionAttestationOutput)
}

type CryptoKeyVersionAttestationCertChains struct {
	// Cavium certificate chain corresponding to the attestation.
	CaviumCerts []string `pulumi:"caviumCerts"`
	// Google card certificate chain corresponding to the attestation.
	GoogleCardCerts []string `pulumi:"googleCardCerts"`
	// Google partition certificate chain corresponding to the attestation.
	GooglePartitionCerts []string `pulumi:"googlePartitionCerts"`
}

// CryptoKeyVersionAttestationCertChainsInput is an input type that accepts CryptoKeyVersionAttestationCertChainsArgs and CryptoKeyVersionAttestationCertChainsOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationCertChainsInput` via:
//
//	CryptoKeyVersionAttestationCertChainsArgs{...}
type CryptoKeyVersionAttestationCertChainsInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationCertChainsOutput() CryptoKeyVersionAttestationCertChainsOutput
	ToCryptoKeyVersionAttestationCertChainsOutputWithContext(context.Context) CryptoKeyVersionAttestationCertChainsOutput
}

type CryptoKeyVersionAttestationCertChainsArgs struct {
	// Cavium certificate chain corresponding to the attestation.
	CaviumCerts pulumi.StringArrayInput `pulumi:"caviumCerts"`
	// Google card certificate chain corresponding to the attestation.
	GoogleCardCerts pulumi.StringArrayInput `pulumi:"googleCardCerts"`
	// Google partition certificate chain corresponding to the attestation.
	GooglePartitionCerts pulumi.StringArrayInput `pulumi:"googlePartitionCerts"`
}

func (CryptoKeyVersionAttestationCertChainsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestationCertChains)(nil)).Elem()
}

func (i CryptoKeyVersionAttestationCertChainsArgs) ToCryptoKeyVersionAttestationCertChainsOutput() CryptoKeyVersionAttestationCertChainsOutput {
	return i.ToCryptoKeyVersionAttestationCertChainsOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationCertChainsArgs) ToCryptoKeyVersionAttestationCertChainsOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationCertChainsOutput)
}

func (i CryptoKeyVersionAttestationCertChainsArgs) ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return i.ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationCertChainsArgs) ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationCertChainsOutput).ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx)
}

// CryptoKeyVersionAttestationCertChainsPtrInput is an input type that accepts CryptoKeyVersionAttestationCertChainsArgs, CryptoKeyVersionAttestationCertChainsPtr and CryptoKeyVersionAttestationCertChainsPtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationCertChainsPtrInput` via:
//
//	        CryptoKeyVersionAttestationCertChainsArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyVersionAttestationCertChainsPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput
	ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput
}

type cryptoKeyVersionAttestationCertChainsPtrType CryptoKeyVersionAttestationCertChainsArgs

func CryptoKeyVersionAttestationCertChainsPtr(v *CryptoKeyVersionAttestationCertChainsArgs) CryptoKeyVersionAttestationCertChainsPtrInput {
	return (*cryptoKeyVersionAttestationCertChainsPtrType)(v)
}

func (*cryptoKeyVersionAttestationCertChainsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionAttestationCertChains)(nil)).Elem()
}

func (i *cryptoKeyVersionAttestationCertChainsPtrType) ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return i.ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionAttestationCertChainsPtrType) ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationCertChainsPtrOutput)
}

type CryptoKeyVersionAttestationCertChainsOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationCertChainsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestationCertChains)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationCertChainsOutput) ToCryptoKeyVersionAttestationCertChainsOutput() CryptoKeyVersionAttestationCertChainsOutput {
	return o
}

func (o CryptoKeyVersionAttestationCertChainsOutput) ToCryptoKeyVersionAttestationCertChainsOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsOutput {
	return o
}

func (o CryptoKeyVersionAttestationCertChainsOutput) ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o.ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionAttestationCertChainsOutput) ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionAttestationCertChains) *CryptoKeyVersionAttestationCertChains {
		return &v
	}).(CryptoKeyVersionAttestationCertChainsPtrOutput)
}

// Cavium certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsOutput) CaviumCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationCertChains) []string { return v.CaviumCerts }).(pulumi.StringArrayOutput)
}

// Google card certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsOutput) GoogleCardCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationCertChains) []string { return v.GoogleCardCerts }).(pulumi.StringArrayOutput)
}

// Google partition certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsOutput) GooglePartitionCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationCertChains) []string { return v.GooglePartitionCerts }).(pulumi.StringArrayOutput)
}

type CryptoKeyVersionAttestationCertChainsPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationCertChainsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionAttestationCertChains)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationCertChainsPtrOutput) ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o
}

func (o CryptoKeyVersionAttestationCertChainsPtrOutput) ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o
}

func (o CryptoKeyVersionAttestationCertChainsPtrOutput) Elem() CryptoKeyVersionAttestationCertChainsOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationCertChains) CryptoKeyVersionAttestationCertChains {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionAttestationCertChains
		return ret
	}).(CryptoKeyVersionAttestationCertChainsOutput)
}

// Cavium certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsPtrOutput) CaviumCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationCertChains) []string {
		if v == nil {
			return nil
		}
		return v.CaviumCerts
	}).(pulumi.StringArrayOutput)
}

// Google card certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsPtrOutput) GoogleCardCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationCertChains) []string {
		if v == nil {
			return nil
		}
		return v.GoogleCardCerts
	}).(pulumi.StringArrayOutput)
}

// Google partition certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsPtrOutput) GooglePartitionCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationCertChains) []string {
		if v == nil {
			return nil
		}
		return v.GooglePartitionCerts
	}).(pulumi.StringArrayOutput)
}

type CryptoKeyVersionAttestationExternalProtectionLevelOptions struct {
	// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
	EkmConnectionKeyPath *string `pulumi:"ekmConnectionKeyPath"`
	// The URI for an external resource that this CryptoKeyVersion represents.
	ExternalKeyUri *string `pulumi:"externalKeyUri"`
}

// CryptoKeyVersionAttestationExternalProtectionLevelOptionsInput is an input type that accepts CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs and CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationExternalProtectionLevelOptionsInput` via:
//
//	CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs{...}
type CryptoKeyVersionAttestationExternalProtectionLevelOptionsInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput
	ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutputWithContext(context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput
}

type CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs struct {
	// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
	EkmConnectionKeyPath pulumi.StringPtrInput `pulumi:"ekmConnectionKeyPath"`
	// The URI for an external resource that this CryptoKeyVersion represents.
	ExternalKeyUri pulumi.StringPtrInput `pulumi:"externalKeyUri"`
}

func (CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestationExternalProtectionLevelOptions)(nil)).Elem()
}

func (i CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return i.ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput)
}

func (i CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return i.ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput).ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx)
}

// CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput is an input type that accepts CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs, CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtr and CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput` via:
//
//	        CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput
	ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput
}

type cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs

func CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtr(v *CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput {
	return (*cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType)(v)
}

func (*cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionAttestationExternalProtectionLevelOptions)(nil)).Elem()
}

func (i *cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return i.ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput)
}

type CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestationExternalProtectionLevelOptions)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return o
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return o
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o.ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionAttestationExternalProtectionLevelOptions) *CryptoKeyVersionAttestationExternalProtectionLevelOptions {
		return &v
	}).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput)
}

// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) EkmConnectionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationExternalProtectionLevelOptions) *string {
		return v.EkmConnectionKeyPath
	}).(pulumi.StringPtrOutput)
}

// The URI for an external resource that this CryptoKeyVersion represents.
func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ExternalKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationExternalProtectionLevelOptions) *string { return v.ExternalKeyUri }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionAttestationExternalProtectionLevelOptions)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) Elem() CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationExternalProtectionLevelOptions) CryptoKeyVersionAttestationExternalProtectionLevelOptions {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionAttestationExternalProtectionLevelOptions
		return ret
	}).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput)
}

// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) EkmConnectionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationExternalProtectionLevelOptions) *string {
		if v == nil {
			return nil
		}
		return v.EkmConnectionKeyPath
	}).(pulumi.StringPtrOutput)
}

// The URI for an external resource that this CryptoKeyVersion represents.
func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) ExternalKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationExternalProtectionLevelOptions) *string {
		if v == nil {
			return nil
		}
		return v.ExternalKeyUri
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionExternalProtectionLevelOptions struct {
	// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
	EkmConnectionKeyPath *string `pulumi:"ekmConnectionKeyPath"`
	// The URI for an external resource that this CryptoKeyVersion represents.
	ExternalKeyUri *string `pulumi:"externalKeyUri"`
}

// CryptoKeyVersionExternalProtectionLevelOptionsInput is an input type that accepts CryptoKeyVersionExternalProtectionLevelOptionsArgs and CryptoKeyVersionExternalProtectionLevelOptionsOutput values.
// You can construct a concrete instance of `CryptoKeyVersionExternalProtectionLevelOptionsInput` via:
//
//	CryptoKeyVersionExternalProtectionLevelOptionsArgs{...}
type CryptoKeyVersionExternalProtectionLevelOptionsInput interface {
	pulumi.Input

	ToCryptoKeyVersionExternalProtectionLevelOptionsOutput() CryptoKeyVersionExternalProtectionLevelOptionsOutput
	ToCryptoKeyVersionExternalProtectionLevelOptionsOutputWithContext(context.Context) CryptoKeyVersionExternalProtectionLevelOptionsOutput
}

type CryptoKeyVersionExternalProtectionLevelOptionsArgs struct {
	// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
	EkmConnectionKeyPath pulumi.StringPtrInput `pulumi:"ekmConnectionKeyPath"`
	// The URI for an external resource that this CryptoKeyVersion represents.
	ExternalKeyUri pulumi.StringPtrInput `pulumi:"externalKeyUri"`
}

func (CryptoKeyVersionExternalProtectionLevelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionExternalProtectionLevelOptions)(nil)).Elem()
}

func (i CryptoKeyVersionExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionExternalProtectionLevelOptionsOutput() CryptoKeyVersionExternalProtectionLevelOptionsOutput {
	return i.ToCryptoKeyVersionExternalProtectionLevelOptionsOutputWithContext(context.Background())
}

func (i CryptoKeyVersionExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionExternalProtectionLevelOptionsOutputWithContext(ctx context.Context) CryptoKeyVersionExternalProtectionLevelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionExternalProtectionLevelOptionsOutput)
}

func (i CryptoKeyVersionExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput {
	return i.ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionExternalProtectionLevelOptionsOutput).ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(ctx)
}

// CryptoKeyVersionExternalProtectionLevelOptionsPtrInput is an input type that accepts CryptoKeyVersionExternalProtectionLevelOptionsArgs, CryptoKeyVersionExternalProtectionLevelOptionsPtr and CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionExternalProtectionLevelOptionsPtrInput` via:
//
//	        CryptoKeyVersionExternalProtectionLevelOptionsArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyVersionExternalProtectionLevelOptionsPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput
	ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(context.Context) CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput
}

type cryptoKeyVersionExternalProtectionLevelOptionsPtrType CryptoKeyVersionExternalProtectionLevelOptionsArgs

func CryptoKeyVersionExternalProtectionLevelOptionsPtr(v *CryptoKeyVersionExternalProtectionLevelOptionsArgs) CryptoKeyVersionExternalProtectionLevelOptionsPtrInput {
	return (*cryptoKeyVersionExternalProtectionLevelOptionsPtrType)(v)
}

func (*cryptoKeyVersionExternalProtectionLevelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionExternalProtectionLevelOptions)(nil)).Elem()
}

func (i *cryptoKeyVersionExternalProtectionLevelOptionsPtrType) ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput {
	return i.ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionExternalProtectionLevelOptionsPtrType) ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput)
}

type CryptoKeyVersionExternalProtectionLevelOptionsOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionExternalProtectionLevelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionExternalProtectionLevelOptions)(nil)).Elem()
}

func (o CryptoKeyVersionExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionExternalProtectionLevelOptionsOutput() CryptoKeyVersionExternalProtectionLevelOptionsOutput {
	return o
}

func (o CryptoKeyVersionExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionExternalProtectionLevelOptionsOutputWithContext(ctx context.Context) CryptoKeyVersionExternalProtectionLevelOptionsOutput {
	return o
}

func (o CryptoKeyVersionExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput {
	return o.ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionExternalProtectionLevelOptions) *CryptoKeyVersionExternalProtectionLevelOptions {
		return &v
	}).(CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput)
}

// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
func (o CryptoKeyVersionExternalProtectionLevelOptionsOutput) EkmConnectionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionExternalProtectionLevelOptions) *string { return v.EkmConnectionKeyPath }).(pulumi.StringPtrOutput)
}

// The URI for an external resource that this CryptoKeyVersion represents.
func (o CryptoKeyVersionExternalProtectionLevelOptionsOutput) ExternalKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionExternalProtectionLevelOptions) *string { return v.ExternalKeyUri }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionExternalProtectionLevelOptions)(nil)).Elem()
}

func (o CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput) ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput {
	return o
}

func (o CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput) ToCryptoKeyVersionExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput {
	return o
}

func (o CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput) Elem() CryptoKeyVersionExternalProtectionLevelOptionsOutput {
	return o.ApplyT(func(v *CryptoKeyVersionExternalProtectionLevelOptions) CryptoKeyVersionExternalProtectionLevelOptions {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionExternalProtectionLevelOptions
		return ret
	}).(CryptoKeyVersionExternalProtectionLevelOptionsOutput)
}

// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
func (o CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput) EkmConnectionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionExternalProtectionLevelOptions) *string {
		if v == nil {
			return nil
		}
		return v.EkmConnectionKeyPath
	}).(pulumi.StringPtrOutput)
}

// The URI for an external resource that this CryptoKeyVersion represents.
func (o CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput) ExternalKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionExternalProtectionLevelOptions) *string {
		if v == nil {
			return nil
		}
		return v.ExternalKeyUri
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplate struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm string `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	ProtectionLevel *string `pulumi:"protectionLevel"`
}

// CryptoKeyVersionTemplateInput is an input type that accepts CryptoKeyVersionTemplateArgs and CryptoKeyVersionTemplateOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplateInput` via:
//
//	CryptoKeyVersionTemplateArgs{...}
type CryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput
	ToCryptoKeyVersionTemplateOutputWithContext(context.Context) CryptoKeyVersionTemplateOutput
}

type CryptoKeyVersionTemplateArgs struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
}

func (CryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return i.ToCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput)
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput).ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx)
}

// CryptoKeyVersionTemplatePtrInput is an input type that accepts CryptoKeyVersionTemplateArgs, CryptoKeyVersionTemplatePtr and CryptoKeyVersionTemplatePtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplatePtrInput` via:
//
//	        CryptoKeyVersionTemplateArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyVersionTemplatePtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput
	ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Context) CryptoKeyVersionTemplatePtrOutput
}

type cryptoKeyVersionTemplatePtrType CryptoKeyVersionTemplateArgs

func CryptoKeyVersionTemplatePtr(v *CryptoKeyVersionTemplateArgs) CryptoKeyVersionTemplatePtrInput {
	return (*cryptoKeyVersionTemplatePtrType)(v)
}

func (*cryptoKeyVersionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplatePtrOutput)
}

type CryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionTemplate) *CryptoKeyVersionTemplate {
		return &v
	}).(CryptoKeyVersionTemplatePtrOutput)
}

// The algorithm to use when creating a version based on this template.
// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
func (o CryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
func (o CryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplatePtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) Elem() CryptoKeyVersionTemplateOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) CryptoKeyVersionTemplate {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionTemplate
		return ret
	}).(CryptoKeyVersionTemplateOutput)
}

// The algorithm to use when creating a version based on this template.
// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
func (o CryptoKeyVersionTemplatePtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
func (o CryptoKeyVersionTemplatePtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionLevel
	}).(pulumi.StringPtrOutput)
}

type EkmConnectionIamBindingCondition struct {
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// EkmConnectionIamBindingConditionInput is an input type that accepts EkmConnectionIamBindingConditionArgs and EkmConnectionIamBindingConditionOutput values.
// You can construct a concrete instance of `EkmConnectionIamBindingConditionInput` via:
//
//	EkmConnectionIamBindingConditionArgs{...}
type EkmConnectionIamBindingConditionInput interface {
	pulumi.Input

	ToEkmConnectionIamBindingConditionOutput() EkmConnectionIamBindingConditionOutput
	ToEkmConnectionIamBindingConditionOutputWithContext(context.Context) EkmConnectionIamBindingConditionOutput
}

type EkmConnectionIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (EkmConnectionIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EkmConnectionIamBindingCondition)(nil)).Elem()
}

func (i EkmConnectionIamBindingConditionArgs) ToEkmConnectionIamBindingConditionOutput() EkmConnectionIamBindingConditionOutput {
	return i.ToEkmConnectionIamBindingConditionOutputWithContext(context.Background())
}

func (i EkmConnectionIamBindingConditionArgs) ToEkmConnectionIamBindingConditionOutputWithContext(ctx context.Context) EkmConnectionIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamBindingConditionOutput)
}

func (i EkmConnectionIamBindingConditionArgs) ToEkmConnectionIamBindingConditionPtrOutput() EkmConnectionIamBindingConditionPtrOutput {
	return i.ToEkmConnectionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i EkmConnectionIamBindingConditionArgs) ToEkmConnectionIamBindingConditionPtrOutputWithContext(ctx context.Context) EkmConnectionIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamBindingConditionOutput).ToEkmConnectionIamBindingConditionPtrOutputWithContext(ctx)
}

// EkmConnectionIamBindingConditionPtrInput is an input type that accepts EkmConnectionIamBindingConditionArgs, EkmConnectionIamBindingConditionPtr and EkmConnectionIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `EkmConnectionIamBindingConditionPtrInput` via:
//
//	        EkmConnectionIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type EkmConnectionIamBindingConditionPtrInput interface {
	pulumi.Input

	ToEkmConnectionIamBindingConditionPtrOutput() EkmConnectionIamBindingConditionPtrOutput
	ToEkmConnectionIamBindingConditionPtrOutputWithContext(context.Context) EkmConnectionIamBindingConditionPtrOutput
}

type ekmConnectionIamBindingConditionPtrType EkmConnectionIamBindingConditionArgs

func EkmConnectionIamBindingConditionPtr(v *EkmConnectionIamBindingConditionArgs) EkmConnectionIamBindingConditionPtrInput {
	return (*ekmConnectionIamBindingConditionPtrType)(v)
}

func (*ekmConnectionIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnectionIamBindingCondition)(nil)).Elem()
}

func (i *ekmConnectionIamBindingConditionPtrType) ToEkmConnectionIamBindingConditionPtrOutput() EkmConnectionIamBindingConditionPtrOutput {
	return i.ToEkmConnectionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *ekmConnectionIamBindingConditionPtrType) ToEkmConnectionIamBindingConditionPtrOutputWithContext(ctx context.Context) EkmConnectionIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamBindingConditionPtrOutput)
}

type EkmConnectionIamBindingConditionOutput struct{ *pulumi.OutputState }

func (EkmConnectionIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EkmConnectionIamBindingCondition)(nil)).Elem()
}

func (o EkmConnectionIamBindingConditionOutput) ToEkmConnectionIamBindingConditionOutput() EkmConnectionIamBindingConditionOutput {
	return o
}

func (o EkmConnectionIamBindingConditionOutput) ToEkmConnectionIamBindingConditionOutputWithContext(ctx context.Context) EkmConnectionIamBindingConditionOutput {
	return o
}

func (o EkmConnectionIamBindingConditionOutput) ToEkmConnectionIamBindingConditionPtrOutput() EkmConnectionIamBindingConditionPtrOutput {
	return o.ToEkmConnectionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o EkmConnectionIamBindingConditionOutput) ToEkmConnectionIamBindingConditionPtrOutputWithContext(ctx context.Context) EkmConnectionIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EkmConnectionIamBindingCondition) *EkmConnectionIamBindingCondition {
		return &v
	}).(EkmConnectionIamBindingConditionPtrOutput)
}

func (o EkmConnectionIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o EkmConnectionIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v EkmConnectionIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o EkmConnectionIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v EkmConnectionIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type EkmConnectionIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (EkmConnectionIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnectionIamBindingCondition)(nil)).Elem()
}

func (o EkmConnectionIamBindingConditionPtrOutput) ToEkmConnectionIamBindingConditionPtrOutput() EkmConnectionIamBindingConditionPtrOutput {
	return o
}

func (o EkmConnectionIamBindingConditionPtrOutput) ToEkmConnectionIamBindingConditionPtrOutputWithContext(ctx context.Context) EkmConnectionIamBindingConditionPtrOutput {
	return o
}

func (o EkmConnectionIamBindingConditionPtrOutput) Elem() EkmConnectionIamBindingConditionOutput {
	return o.ApplyT(func(v *EkmConnectionIamBindingCondition) EkmConnectionIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret EkmConnectionIamBindingCondition
		return ret
	}).(EkmConnectionIamBindingConditionOutput)
}

func (o EkmConnectionIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EkmConnectionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o EkmConnectionIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EkmConnectionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o EkmConnectionIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EkmConnectionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type EkmConnectionIamMemberCondition struct {
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// EkmConnectionIamMemberConditionInput is an input type that accepts EkmConnectionIamMemberConditionArgs and EkmConnectionIamMemberConditionOutput values.
// You can construct a concrete instance of `EkmConnectionIamMemberConditionInput` via:
//
//	EkmConnectionIamMemberConditionArgs{...}
type EkmConnectionIamMemberConditionInput interface {
	pulumi.Input

	ToEkmConnectionIamMemberConditionOutput() EkmConnectionIamMemberConditionOutput
	ToEkmConnectionIamMemberConditionOutputWithContext(context.Context) EkmConnectionIamMemberConditionOutput
}

type EkmConnectionIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (EkmConnectionIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EkmConnectionIamMemberCondition)(nil)).Elem()
}

func (i EkmConnectionIamMemberConditionArgs) ToEkmConnectionIamMemberConditionOutput() EkmConnectionIamMemberConditionOutput {
	return i.ToEkmConnectionIamMemberConditionOutputWithContext(context.Background())
}

func (i EkmConnectionIamMemberConditionArgs) ToEkmConnectionIamMemberConditionOutputWithContext(ctx context.Context) EkmConnectionIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamMemberConditionOutput)
}

func (i EkmConnectionIamMemberConditionArgs) ToEkmConnectionIamMemberConditionPtrOutput() EkmConnectionIamMemberConditionPtrOutput {
	return i.ToEkmConnectionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i EkmConnectionIamMemberConditionArgs) ToEkmConnectionIamMemberConditionPtrOutputWithContext(ctx context.Context) EkmConnectionIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamMemberConditionOutput).ToEkmConnectionIamMemberConditionPtrOutputWithContext(ctx)
}

// EkmConnectionIamMemberConditionPtrInput is an input type that accepts EkmConnectionIamMemberConditionArgs, EkmConnectionIamMemberConditionPtr and EkmConnectionIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `EkmConnectionIamMemberConditionPtrInput` via:
//
//	        EkmConnectionIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type EkmConnectionIamMemberConditionPtrInput interface {
	pulumi.Input

	ToEkmConnectionIamMemberConditionPtrOutput() EkmConnectionIamMemberConditionPtrOutput
	ToEkmConnectionIamMemberConditionPtrOutputWithContext(context.Context) EkmConnectionIamMemberConditionPtrOutput
}

type ekmConnectionIamMemberConditionPtrType EkmConnectionIamMemberConditionArgs

func EkmConnectionIamMemberConditionPtr(v *EkmConnectionIamMemberConditionArgs) EkmConnectionIamMemberConditionPtrInput {
	return (*ekmConnectionIamMemberConditionPtrType)(v)
}

func (*ekmConnectionIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnectionIamMemberCondition)(nil)).Elem()
}

func (i *ekmConnectionIamMemberConditionPtrType) ToEkmConnectionIamMemberConditionPtrOutput() EkmConnectionIamMemberConditionPtrOutput {
	return i.ToEkmConnectionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *ekmConnectionIamMemberConditionPtrType) ToEkmConnectionIamMemberConditionPtrOutputWithContext(ctx context.Context) EkmConnectionIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionIamMemberConditionPtrOutput)
}

type EkmConnectionIamMemberConditionOutput struct{ *pulumi.OutputState }

func (EkmConnectionIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EkmConnectionIamMemberCondition)(nil)).Elem()
}

func (o EkmConnectionIamMemberConditionOutput) ToEkmConnectionIamMemberConditionOutput() EkmConnectionIamMemberConditionOutput {
	return o
}

func (o EkmConnectionIamMemberConditionOutput) ToEkmConnectionIamMemberConditionOutputWithContext(ctx context.Context) EkmConnectionIamMemberConditionOutput {
	return o
}

func (o EkmConnectionIamMemberConditionOutput) ToEkmConnectionIamMemberConditionPtrOutput() EkmConnectionIamMemberConditionPtrOutput {
	return o.ToEkmConnectionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o EkmConnectionIamMemberConditionOutput) ToEkmConnectionIamMemberConditionPtrOutputWithContext(ctx context.Context) EkmConnectionIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EkmConnectionIamMemberCondition) *EkmConnectionIamMemberCondition {
		return &v
	}).(EkmConnectionIamMemberConditionPtrOutput)
}

func (o EkmConnectionIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o EkmConnectionIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v EkmConnectionIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o EkmConnectionIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v EkmConnectionIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type EkmConnectionIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (EkmConnectionIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnectionIamMemberCondition)(nil)).Elem()
}

func (o EkmConnectionIamMemberConditionPtrOutput) ToEkmConnectionIamMemberConditionPtrOutput() EkmConnectionIamMemberConditionPtrOutput {
	return o
}

func (o EkmConnectionIamMemberConditionPtrOutput) ToEkmConnectionIamMemberConditionPtrOutputWithContext(ctx context.Context) EkmConnectionIamMemberConditionPtrOutput {
	return o
}

func (o EkmConnectionIamMemberConditionPtrOutput) Elem() EkmConnectionIamMemberConditionOutput {
	return o.ApplyT(func(v *EkmConnectionIamMemberCondition) EkmConnectionIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret EkmConnectionIamMemberCondition
		return ret
	}).(EkmConnectionIamMemberConditionOutput)
}

func (o EkmConnectionIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EkmConnectionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o EkmConnectionIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EkmConnectionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o EkmConnectionIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EkmConnectionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type EkmConnectionServiceResolver struct {
	// Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
	EndpointFilter *string `pulumi:"endpointFilter"`
	// Required. The hostname of the EKM replica used at TLS and HTTP layers.
	Hostname string `pulumi:"hostname"`
	// Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
	// Structure is documented below.
	ServerCertificates []EkmConnectionServiceResolverServerCertificate `pulumi:"serverCertificates"`
	// Required. The resource name of the Service Directory service pointing to an EKM replica, in the format projects/*/locations/*/namespaces/*/services/*
	ServiceDirectoryService string `pulumi:"serviceDirectoryService"`
}

// EkmConnectionServiceResolverInput is an input type that accepts EkmConnectionServiceResolverArgs and EkmConnectionServiceResolverOutput values.
// You can construct a concrete instance of `EkmConnectionServiceResolverInput` via:
//
//	EkmConnectionServiceResolverArgs{...}
type EkmConnectionServiceResolverInput interface {
	pulumi.Input

	ToEkmConnectionServiceResolverOutput() EkmConnectionServiceResolverOutput
	ToEkmConnectionServiceResolverOutputWithContext(context.Context) EkmConnectionServiceResolverOutput
}

type EkmConnectionServiceResolverArgs struct {
	// Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
	EndpointFilter pulumi.StringPtrInput `pulumi:"endpointFilter"`
	// Required. The hostname of the EKM replica used at TLS and HTTP layers.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
	// Structure is documented below.
	ServerCertificates EkmConnectionServiceResolverServerCertificateArrayInput `pulumi:"serverCertificates"`
	// Required. The resource name of the Service Directory service pointing to an EKM replica, in the format projects/*/locations/*/namespaces/*/services/*
	ServiceDirectoryService pulumi.StringInput `pulumi:"serviceDirectoryService"`
}

func (EkmConnectionServiceResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EkmConnectionServiceResolver)(nil)).Elem()
}

func (i EkmConnectionServiceResolverArgs) ToEkmConnectionServiceResolverOutput() EkmConnectionServiceResolverOutput {
	return i.ToEkmConnectionServiceResolverOutputWithContext(context.Background())
}

func (i EkmConnectionServiceResolverArgs) ToEkmConnectionServiceResolverOutputWithContext(ctx context.Context) EkmConnectionServiceResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionServiceResolverOutput)
}

// EkmConnectionServiceResolverArrayInput is an input type that accepts EkmConnectionServiceResolverArray and EkmConnectionServiceResolverArrayOutput values.
// You can construct a concrete instance of `EkmConnectionServiceResolverArrayInput` via:
//
//	EkmConnectionServiceResolverArray{ EkmConnectionServiceResolverArgs{...} }
type EkmConnectionServiceResolverArrayInput interface {
	pulumi.Input

	ToEkmConnectionServiceResolverArrayOutput() EkmConnectionServiceResolverArrayOutput
	ToEkmConnectionServiceResolverArrayOutputWithContext(context.Context) EkmConnectionServiceResolverArrayOutput
}

type EkmConnectionServiceResolverArray []EkmConnectionServiceResolverInput

func (EkmConnectionServiceResolverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EkmConnectionServiceResolver)(nil)).Elem()
}

func (i EkmConnectionServiceResolverArray) ToEkmConnectionServiceResolverArrayOutput() EkmConnectionServiceResolverArrayOutput {
	return i.ToEkmConnectionServiceResolverArrayOutputWithContext(context.Background())
}

func (i EkmConnectionServiceResolverArray) ToEkmConnectionServiceResolverArrayOutputWithContext(ctx context.Context) EkmConnectionServiceResolverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionServiceResolverArrayOutput)
}

type EkmConnectionServiceResolverOutput struct{ *pulumi.OutputState }

func (EkmConnectionServiceResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EkmConnectionServiceResolver)(nil)).Elem()
}

func (o EkmConnectionServiceResolverOutput) ToEkmConnectionServiceResolverOutput() EkmConnectionServiceResolverOutput {
	return o
}

func (o EkmConnectionServiceResolverOutput) ToEkmConnectionServiceResolverOutputWithContext(ctx context.Context) EkmConnectionServiceResolverOutput {
	return o
}

// Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
func (o EkmConnectionServiceResolverOutput) EndpointFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolver) *string { return v.EndpointFilter }).(pulumi.StringPtrOutput)
}

// Required. The hostname of the EKM replica used at TLS and HTTP layers.
func (o EkmConnectionServiceResolverOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolver) string { return v.Hostname }).(pulumi.StringOutput)
}

// Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
// Structure is documented below.
func (o EkmConnectionServiceResolverOutput) ServerCertificates() EkmConnectionServiceResolverServerCertificateArrayOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolver) []EkmConnectionServiceResolverServerCertificate {
		return v.ServerCertificates
	}).(EkmConnectionServiceResolverServerCertificateArrayOutput)
}

// Required. The resource name of the Service Directory service pointing to an EKM replica, in the format projects/*/locations/*/namespaces/*/services/*
func (o EkmConnectionServiceResolverOutput) ServiceDirectoryService() pulumi.StringOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolver) string { return v.ServiceDirectoryService }).(pulumi.StringOutput)
}

type EkmConnectionServiceResolverArrayOutput struct{ *pulumi.OutputState }

func (EkmConnectionServiceResolverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EkmConnectionServiceResolver)(nil)).Elem()
}

func (o EkmConnectionServiceResolverArrayOutput) ToEkmConnectionServiceResolverArrayOutput() EkmConnectionServiceResolverArrayOutput {
	return o
}

func (o EkmConnectionServiceResolverArrayOutput) ToEkmConnectionServiceResolverArrayOutputWithContext(ctx context.Context) EkmConnectionServiceResolverArrayOutput {
	return o
}

func (o EkmConnectionServiceResolverArrayOutput) Index(i pulumi.IntInput) EkmConnectionServiceResolverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EkmConnectionServiceResolver {
		return vs[0].([]EkmConnectionServiceResolver)[vs[1].(int)]
	}).(EkmConnectionServiceResolverOutput)
}

type EkmConnectionServiceResolverServerCertificate struct {
	// (Output)
	// Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
	Issuer *string `pulumi:"issuer"`
	// (Output)
	// Output only. The certificate is not valid after this time. Only present if parsed is true.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	NotAfterTime *string `pulumi:"notAfterTime"`
	// (Output)
	// Output only. The certificate is not valid before this time. Only present if parsed is true.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	NotBeforeTime *string `pulumi:"notBeforeTime"`
	// (Output)
	// Output only. True if the certificate was parsed successfully.
	Parsed *bool `pulumi:"parsed"`
	// Required. The raw certificate bytes in DER format. A base64-encoded string.
	RawDer string `pulumi:"rawDer"`
	// (Output)
	// Output only. The certificate serial number as a hex string. Only present if parsed is true.
	SerialNumber *string `pulumi:"serialNumber"`
	// (Output)
	// Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
	Sha256Fingerprint *string `pulumi:"sha256Fingerprint"`
	// (Output)
	// Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
	Subject *string `pulumi:"subject"`
	// (Output)
	// Output only. The subject Alternative DNS names. Only present if parsed is true.
	SubjectAlternativeDnsNames []string `pulumi:"subjectAlternativeDnsNames"`
}

// EkmConnectionServiceResolverServerCertificateInput is an input type that accepts EkmConnectionServiceResolverServerCertificateArgs and EkmConnectionServiceResolverServerCertificateOutput values.
// You can construct a concrete instance of `EkmConnectionServiceResolverServerCertificateInput` via:
//
//	EkmConnectionServiceResolverServerCertificateArgs{...}
type EkmConnectionServiceResolverServerCertificateInput interface {
	pulumi.Input

	ToEkmConnectionServiceResolverServerCertificateOutput() EkmConnectionServiceResolverServerCertificateOutput
	ToEkmConnectionServiceResolverServerCertificateOutputWithContext(context.Context) EkmConnectionServiceResolverServerCertificateOutput
}

type EkmConnectionServiceResolverServerCertificateArgs struct {
	// (Output)
	// Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// (Output)
	// Output only. The certificate is not valid after this time. Only present if parsed is true.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	NotAfterTime pulumi.StringPtrInput `pulumi:"notAfterTime"`
	// (Output)
	// Output only. The certificate is not valid before this time. Only present if parsed is true.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	NotBeforeTime pulumi.StringPtrInput `pulumi:"notBeforeTime"`
	// (Output)
	// Output only. True if the certificate was parsed successfully.
	Parsed pulumi.BoolPtrInput `pulumi:"parsed"`
	// Required. The raw certificate bytes in DER format. A base64-encoded string.
	RawDer pulumi.StringInput `pulumi:"rawDer"`
	// (Output)
	// Output only. The certificate serial number as a hex string. Only present if parsed is true.
	SerialNumber pulumi.StringPtrInput `pulumi:"serialNumber"`
	// (Output)
	// Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
	Sha256Fingerprint pulumi.StringPtrInput `pulumi:"sha256Fingerprint"`
	// (Output)
	// Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// (Output)
	// Output only. The subject Alternative DNS names. Only present if parsed is true.
	SubjectAlternativeDnsNames pulumi.StringArrayInput `pulumi:"subjectAlternativeDnsNames"`
}

func (EkmConnectionServiceResolverServerCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EkmConnectionServiceResolverServerCertificate)(nil)).Elem()
}

func (i EkmConnectionServiceResolverServerCertificateArgs) ToEkmConnectionServiceResolverServerCertificateOutput() EkmConnectionServiceResolverServerCertificateOutput {
	return i.ToEkmConnectionServiceResolverServerCertificateOutputWithContext(context.Background())
}

func (i EkmConnectionServiceResolverServerCertificateArgs) ToEkmConnectionServiceResolverServerCertificateOutputWithContext(ctx context.Context) EkmConnectionServiceResolverServerCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionServiceResolverServerCertificateOutput)
}

// EkmConnectionServiceResolverServerCertificateArrayInput is an input type that accepts EkmConnectionServiceResolverServerCertificateArray and EkmConnectionServiceResolverServerCertificateArrayOutput values.
// You can construct a concrete instance of `EkmConnectionServiceResolverServerCertificateArrayInput` via:
//
//	EkmConnectionServiceResolverServerCertificateArray{ EkmConnectionServiceResolverServerCertificateArgs{...} }
type EkmConnectionServiceResolverServerCertificateArrayInput interface {
	pulumi.Input

	ToEkmConnectionServiceResolverServerCertificateArrayOutput() EkmConnectionServiceResolverServerCertificateArrayOutput
	ToEkmConnectionServiceResolverServerCertificateArrayOutputWithContext(context.Context) EkmConnectionServiceResolverServerCertificateArrayOutput
}

type EkmConnectionServiceResolverServerCertificateArray []EkmConnectionServiceResolverServerCertificateInput

func (EkmConnectionServiceResolverServerCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EkmConnectionServiceResolverServerCertificate)(nil)).Elem()
}

func (i EkmConnectionServiceResolverServerCertificateArray) ToEkmConnectionServiceResolverServerCertificateArrayOutput() EkmConnectionServiceResolverServerCertificateArrayOutput {
	return i.ToEkmConnectionServiceResolverServerCertificateArrayOutputWithContext(context.Background())
}

func (i EkmConnectionServiceResolverServerCertificateArray) ToEkmConnectionServiceResolverServerCertificateArrayOutputWithContext(ctx context.Context) EkmConnectionServiceResolverServerCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionServiceResolverServerCertificateArrayOutput)
}

type EkmConnectionServiceResolverServerCertificateOutput struct{ *pulumi.OutputState }

func (EkmConnectionServiceResolverServerCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EkmConnectionServiceResolverServerCertificate)(nil)).Elem()
}

func (o EkmConnectionServiceResolverServerCertificateOutput) ToEkmConnectionServiceResolverServerCertificateOutput() EkmConnectionServiceResolverServerCertificateOutput {
	return o
}

func (o EkmConnectionServiceResolverServerCertificateOutput) ToEkmConnectionServiceResolverServerCertificateOutputWithContext(ctx context.Context) EkmConnectionServiceResolverServerCertificateOutput {
	return o
}

// (Output)
// Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
func (o EkmConnectionServiceResolverServerCertificateOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The certificate is not valid after this time. Only present if parsed is true.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o EkmConnectionServiceResolverServerCertificateOutput) NotAfterTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) *string { return v.NotAfterTime }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The certificate is not valid before this time. Only present if parsed is true.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o EkmConnectionServiceResolverServerCertificateOutput) NotBeforeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) *string { return v.NotBeforeTime }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. True if the certificate was parsed successfully.
func (o EkmConnectionServiceResolverServerCertificateOutput) Parsed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) *bool { return v.Parsed }).(pulumi.BoolPtrOutput)
}

// Required. The raw certificate bytes in DER format. A base64-encoded string.
func (o EkmConnectionServiceResolverServerCertificateOutput) RawDer() pulumi.StringOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) string { return v.RawDer }).(pulumi.StringOutput)
}

// (Output)
// Output only. The certificate serial number as a hex string. Only present if parsed is true.
func (o EkmConnectionServiceResolverServerCertificateOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
func (o EkmConnectionServiceResolverServerCertificateOutput) Sha256Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) *string { return v.Sha256Fingerprint }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
func (o EkmConnectionServiceResolverServerCertificateOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The subject Alternative DNS names. Only present if parsed is true.
func (o EkmConnectionServiceResolverServerCertificateOutput) SubjectAlternativeDnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EkmConnectionServiceResolverServerCertificate) []string { return v.SubjectAlternativeDnsNames }).(pulumi.StringArrayOutput)
}

type EkmConnectionServiceResolverServerCertificateArrayOutput struct{ *pulumi.OutputState }

func (EkmConnectionServiceResolverServerCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EkmConnectionServiceResolverServerCertificate)(nil)).Elem()
}

func (o EkmConnectionServiceResolverServerCertificateArrayOutput) ToEkmConnectionServiceResolverServerCertificateArrayOutput() EkmConnectionServiceResolverServerCertificateArrayOutput {
	return o
}

func (o EkmConnectionServiceResolverServerCertificateArrayOutput) ToEkmConnectionServiceResolverServerCertificateArrayOutputWithContext(ctx context.Context) EkmConnectionServiceResolverServerCertificateArrayOutput {
	return o
}

func (o EkmConnectionServiceResolverServerCertificateArrayOutput) Index(i pulumi.IntInput) EkmConnectionServiceResolverServerCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EkmConnectionServiceResolverServerCertificate {
		return vs[0].([]EkmConnectionServiceResolverServerCertificate)[vs[1].(int)]
	}).(EkmConnectionServiceResolverServerCertificateOutput)
}

type FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy struct {
	// A KeyAccessJustificationsPolicy specifies zero or more allowed
	// AccessReason values for encrypt, decrypt, and sign operations on a
	// CryptoKey.
	// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
	AllowedAccessReasons []string `pulumi:"allowedAccessReasons"`
}

// FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyInput is an input type that accepts FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs and FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput values.
// You can construct a concrete instance of `FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyInput` via:
//
//	FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{...}
type FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyInput interface {
	pulumi.Input

	ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput
	ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(context.Context) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput
}

type FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs struct {
	// A KeyAccessJustificationsPolicy specifies zero or more allowed
	// AccessReason values for encrypt, decrypt, and sign operations on a
	// CryptoKey.
	// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
	AllowedAccessReasons pulumi.StringArrayInput `pulumi:"allowedAccessReasons"`
}

func (FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (i FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return i.ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(context.Background())
}

func (i FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(ctx context.Context) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput)
}

func (i FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return i.ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (i FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput).ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx)
}

// FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput is an input type that accepts FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs, FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtr and FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput values.
// You can construct a concrete instance of `FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput` via:
//
//	        FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{...}
//
//	or:
//
//	        nil
type FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput interface {
	pulumi.Input

	ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput
	ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Context) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput
}

type folderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs

func FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtr(v *FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput {
	return (*folderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType)(v)
}

func (*folderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (i *folderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return i.ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (i *folderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput)
}

type FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput struct{ *pulumi.OutputState }

func (FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o
}

func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(ctx context.Context) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o
}

func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o.ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy) *FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy {
		return &v
	}).(FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput)
}

// A KeyAccessJustificationsPolicy specifies zero or more allowed
// AccessReason values for encrypt, decrypt, and sign operations on a
// CryptoKey.
// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy) []string {
		return v.AllowedAccessReasons
	}).(pulumi.StringArrayOutput)
}

type FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput struct{ *pulumi.OutputState }

func (FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o
}

func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ToFolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o
}

func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) Elem() FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o.ApplyT(func(v *FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy) FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy {
		if v != nil {
			return *v
		}
		var ret FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy
		return ret
	}).(FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput)
}

// A KeyAccessJustificationsPolicy specifies zero or more allowed
// AccessReason values for encrypt, decrypt, and sign operations on a
// CryptoKey.
// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
func (o FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAccessReasons
	}).(pulumi.StringArrayOutput)
}

type KeyRingIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// KeyRingIAMBindingConditionInput is an input type that accepts KeyRingIAMBindingConditionArgs and KeyRingIAMBindingConditionOutput values.
// You can construct a concrete instance of `KeyRingIAMBindingConditionInput` via:
//
//	KeyRingIAMBindingConditionArgs{...}
type KeyRingIAMBindingConditionInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput
	ToKeyRingIAMBindingConditionOutputWithContext(context.Context) KeyRingIAMBindingConditionOutput
}

type KeyRingIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingCondition)(nil)).Elem()
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput {
	return i.ToKeyRingIAMBindingConditionOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionOutput)
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return i.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionOutput).ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx)
}

// KeyRingIAMBindingConditionPtrInput is an input type that accepts KeyRingIAMBindingConditionArgs, KeyRingIAMBindingConditionPtr and KeyRingIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `KeyRingIAMBindingConditionPtrInput` via:
//
//	        KeyRingIAMBindingConditionArgs{...}
//
//	or:
//
//	        nil
type KeyRingIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput
	ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Context) KeyRingIAMBindingConditionPtrOutput
}

type keyRingIAMBindingConditionPtrType KeyRingIAMBindingConditionArgs

func KeyRingIAMBindingConditionPtr(v *KeyRingIAMBindingConditionArgs) KeyRingIAMBindingConditionPtrInput {
	return (*keyRingIAMBindingConditionPtrType)(v)
}

func (*keyRingIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMBindingCondition)(nil)).Elem()
}

func (i *keyRingIAMBindingConditionPtrType) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return i.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *keyRingIAMBindingConditionPtrType) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionPtrOutput)
}

type KeyRingIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingCondition)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput {
	return o
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionOutput {
	return o
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return o.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyRingIAMBindingCondition) *KeyRingIAMBindingCondition {
		return &v
	}).(KeyRingIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o KeyRingIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMBindingCondition)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionPtrOutput) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return o
}

func (o KeyRingIAMBindingConditionPtrOutput) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return o
}

func (o KeyRingIAMBindingConditionPtrOutput) Elem() KeyRingIAMBindingConditionOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) KeyRingIAMBindingCondition {
		if v != nil {
			return *v
		}
		var ret KeyRingIAMBindingCondition
		return ret
	}).(KeyRingIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o KeyRingIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type KeyRingIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// KeyRingIAMMemberConditionInput is an input type that accepts KeyRingIAMMemberConditionArgs and KeyRingIAMMemberConditionOutput values.
// You can construct a concrete instance of `KeyRingIAMMemberConditionInput` via:
//
//	KeyRingIAMMemberConditionArgs{...}
type KeyRingIAMMemberConditionInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput
	ToKeyRingIAMMemberConditionOutputWithContext(context.Context) KeyRingIAMMemberConditionOutput
}

type KeyRingIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberCondition)(nil)).Elem()
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput {
	return i.ToKeyRingIAMMemberConditionOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionOutput)
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return i.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionOutput).ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx)
}

// KeyRingIAMMemberConditionPtrInput is an input type that accepts KeyRingIAMMemberConditionArgs, KeyRingIAMMemberConditionPtr and KeyRingIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `KeyRingIAMMemberConditionPtrInput` via:
//
//	        KeyRingIAMMemberConditionArgs{...}
//
//	or:
//
//	        nil
type KeyRingIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput
	ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Context) KeyRingIAMMemberConditionPtrOutput
}

type keyRingIAMMemberConditionPtrType KeyRingIAMMemberConditionArgs

func KeyRingIAMMemberConditionPtr(v *KeyRingIAMMemberConditionArgs) KeyRingIAMMemberConditionPtrInput {
	return (*keyRingIAMMemberConditionPtrType)(v)
}

func (*keyRingIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMMemberCondition)(nil)).Elem()
}

func (i *keyRingIAMMemberConditionPtrType) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return i.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *keyRingIAMMemberConditionPtrType) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionPtrOutput)
}

type KeyRingIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberCondition)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput {
	return o
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionOutput {
	return o
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return o.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyRingIAMMemberCondition) *KeyRingIAMMemberCondition {
		return &v
	}).(KeyRingIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o KeyRingIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMMemberCondition)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionPtrOutput) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return o
}

func (o KeyRingIAMMemberConditionPtrOutput) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return o
}

func (o KeyRingIAMMemberConditionPtrOutput) Elem() KeyRingIAMMemberConditionOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) KeyRingIAMMemberCondition {
		if v != nil {
			return *v
		}
		var ret KeyRingIAMMemberCondition
		return ret
	}).(KeyRingIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o KeyRingIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type KeyRingImportJobAttestation struct {
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	// A base64-encoded string.
	Content *string `pulumi:"content"`
	// (Output)
	// The format of the attestation data.
	Format *string `pulumi:"format"`
}

// KeyRingImportJobAttestationInput is an input type that accepts KeyRingImportJobAttestationArgs and KeyRingImportJobAttestationOutput values.
// You can construct a concrete instance of `KeyRingImportJobAttestationInput` via:
//
//	KeyRingImportJobAttestationArgs{...}
type KeyRingImportJobAttestationInput interface {
	pulumi.Input

	ToKeyRingImportJobAttestationOutput() KeyRingImportJobAttestationOutput
	ToKeyRingImportJobAttestationOutputWithContext(context.Context) KeyRingImportJobAttestationOutput
}

type KeyRingImportJobAttestationArgs struct {
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	// A base64-encoded string.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// (Output)
	// The format of the attestation data.
	Format pulumi.StringPtrInput `pulumi:"format"`
}

func (KeyRingImportJobAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobAttestation)(nil)).Elem()
}

func (i KeyRingImportJobAttestationArgs) ToKeyRingImportJobAttestationOutput() KeyRingImportJobAttestationOutput {
	return i.ToKeyRingImportJobAttestationOutputWithContext(context.Background())
}

func (i KeyRingImportJobAttestationArgs) ToKeyRingImportJobAttestationOutputWithContext(ctx context.Context) KeyRingImportJobAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobAttestationOutput)
}

// KeyRingImportJobAttestationArrayInput is an input type that accepts KeyRingImportJobAttestationArray and KeyRingImportJobAttestationArrayOutput values.
// You can construct a concrete instance of `KeyRingImportJobAttestationArrayInput` via:
//
//	KeyRingImportJobAttestationArray{ KeyRingImportJobAttestationArgs{...} }
type KeyRingImportJobAttestationArrayInput interface {
	pulumi.Input

	ToKeyRingImportJobAttestationArrayOutput() KeyRingImportJobAttestationArrayOutput
	ToKeyRingImportJobAttestationArrayOutputWithContext(context.Context) KeyRingImportJobAttestationArrayOutput
}

type KeyRingImportJobAttestationArray []KeyRingImportJobAttestationInput

func (KeyRingImportJobAttestationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyRingImportJobAttestation)(nil)).Elem()
}

func (i KeyRingImportJobAttestationArray) ToKeyRingImportJobAttestationArrayOutput() KeyRingImportJobAttestationArrayOutput {
	return i.ToKeyRingImportJobAttestationArrayOutputWithContext(context.Background())
}

func (i KeyRingImportJobAttestationArray) ToKeyRingImportJobAttestationArrayOutputWithContext(ctx context.Context) KeyRingImportJobAttestationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobAttestationArrayOutput)
}

type KeyRingImportJobAttestationOutput struct{ *pulumi.OutputState }

func (KeyRingImportJobAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobAttestation)(nil)).Elem()
}

func (o KeyRingImportJobAttestationOutput) ToKeyRingImportJobAttestationOutput() KeyRingImportJobAttestationOutput {
	return o
}

func (o KeyRingImportJobAttestationOutput) ToKeyRingImportJobAttestationOutputWithContext(ctx context.Context) KeyRingImportJobAttestationOutput {
	return o
}

// (Output)
// The attestation data provided by the HSM when the key operation was performed.
// A base64-encoded string.
func (o KeyRingImportJobAttestationOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingImportJobAttestation) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// (Output)
// The format of the attestation data.
func (o KeyRingImportJobAttestationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingImportJobAttestation) *string { return v.Format }).(pulumi.StringPtrOutput)
}

type KeyRingImportJobAttestationArrayOutput struct{ *pulumi.OutputState }

func (KeyRingImportJobAttestationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyRingImportJobAttestation)(nil)).Elem()
}

func (o KeyRingImportJobAttestationArrayOutput) ToKeyRingImportJobAttestationArrayOutput() KeyRingImportJobAttestationArrayOutput {
	return o
}

func (o KeyRingImportJobAttestationArrayOutput) ToKeyRingImportJobAttestationArrayOutputWithContext(ctx context.Context) KeyRingImportJobAttestationArrayOutput {
	return o
}

func (o KeyRingImportJobAttestationArrayOutput) Index(i pulumi.IntInput) KeyRingImportJobAttestationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyRingImportJobAttestation {
		return vs[0].([]KeyRingImportJobAttestation)[vs[1].(int)]
	}).(KeyRingImportJobAttestationOutput)
}

type KeyRingImportJobPublicKey struct {
	// (Output)
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
	// for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem *string `pulumi:"pem"`
}

// KeyRingImportJobPublicKeyInput is an input type that accepts KeyRingImportJobPublicKeyArgs and KeyRingImportJobPublicKeyOutput values.
// You can construct a concrete instance of `KeyRingImportJobPublicKeyInput` via:
//
//	KeyRingImportJobPublicKeyArgs{...}
type KeyRingImportJobPublicKeyInput interface {
	pulumi.Input

	ToKeyRingImportJobPublicKeyOutput() KeyRingImportJobPublicKeyOutput
	ToKeyRingImportJobPublicKeyOutputWithContext(context.Context) KeyRingImportJobPublicKeyOutput
}

type KeyRingImportJobPublicKeyArgs struct {
	// (Output)
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
	// for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringPtrInput `pulumi:"pem"`
}

func (KeyRingImportJobPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobPublicKey)(nil)).Elem()
}

func (i KeyRingImportJobPublicKeyArgs) ToKeyRingImportJobPublicKeyOutput() KeyRingImportJobPublicKeyOutput {
	return i.ToKeyRingImportJobPublicKeyOutputWithContext(context.Background())
}

func (i KeyRingImportJobPublicKeyArgs) ToKeyRingImportJobPublicKeyOutputWithContext(ctx context.Context) KeyRingImportJobPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobPublicKeyOutput)
}

// KeyRingImportJobPublicKeyArrayInput is an input type that accepts KeyRingImportJobPublicKeyArray and KeyRingImportJobPublicKeyArrayOutput values.
// You can construct a concrete instance of `KeyRingImportJobPublicKeyArrayInput` via:
//
//	KeyRingImportJobPublicKeyArray{ KeyRingImportJobPublicKeyArgs{...} }
type KeyRingImportJobPublicKeyArrayInput interface {
	pulumi.Input

	ToKeyRingImportJobPublicKeyArrayOutput() KeyRingImportJobPublicKeyArrayOutput
	ToKeyRingImportJobPublicKeyArrayOutputWithContext(context.Context) KeyRingImportJobPublicKeyArrayOutput
}

type KeyRingImportJobPublicKeyArray []KeyRingImportJobPublicKeyInput

func (KeyRingImportJobPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyRingImportJobPublicKey)(nil)).Elem()
}

func (i KeyRingImportJobPublicKeyArray) ToKeyRingImportJobPublicKeyArrayOutput() KeyRingImportJobPublicKeyArrayOutput {
	return i.ToKeyRingImportJobPublicKeyArrayOutputWithContext(context.Background())
}

func (i KeyRingImportJobPublicKeyArray) ToKeyRingImportJobPublicKeyArrayOutputWithContext(ctx context.Context) KeyRingImportJobPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobPublicKeyArrayOutput)
}

type KeyRingImportJobPublicKeyOutput struct{ *pulumi.OutputState }

func (KeyRingImportJobPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobPublicKey)(nil)).Elem()
}

func (o KeyRingImportJobPublicKeyOutput) ToKeyRingImportJobPublicKeyOutput() KeyRingImportJobPublicKeyOutput {
	return o
}

func (o KeyRingImportJobPublicKeyOutput) ToKeyRingImportJobPublicKeyOutputWithContext(ctx context.Context) KeyRingImportJobPublicKeyOutput {
	return o
}

// (Output)
// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
// for General Considerations and Textual Encoding of Subject Public Key Info.
func (o KeyRingImportJobPublicKeyOutput) Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingImportJobPublicKey) *string { return v.Pem }).(pulumi.StringPtrOutput)
}

type KeyRingImportJobPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (KeyRingImportJobPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyRingImportJobPublicKey)(nil)).Elem()
}

func (o KeyRingImportJobPublicKeyArrayOutput) ToKeyRingImportJobPublicKeyArrayOutput() KeyRingImportJobPublicKeyArrayOutput {
	return o
}

func (o KeyRingImportJobPublicKeyArrayOutput) ToKeyRingImportJobPublicKeyArrayOutputWithContext(ctx context.Context) KeyRingImportJobPublicKeyArrayOutput {
	return o
}

func (o KeyRingImportJobPublicKeyArrayOutput) Index(i pulumi.IntInput) KeyRingImportJobPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyRingImportJobPublicKey {
		return vs[0].([]KeyRingImportJobPublicKey)[vs[1].(int)]
	}).(KeyRingImportJobPublicKeyOutput)
}

type OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy struct {
	// A KeyAccessJustificationsPolicy specifies zero or more allowed
	// AccessReason values for encrypt, decrypt, and sign operations on a
	// CryptoKey.
	// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
	AllowedAccessReasons []string `pulumi:"allowedAccessReasons"`
}

// OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyInput is an input type that accepts OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs and OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput values.
// You can construct a concrete instance of `OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyInput` via:
//
//	OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{...}
type OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyInput interface {
	pulumi.Input

	ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput
	ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(context.Context) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput
}

type OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs struct {
	// A KeyAccessJustificationsPolicy specifies zero or more allowed
	// AccessReason values for encrypt, decrypt, and sign operations on a
	// CryptoKey.
	// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
	AllowedAccessReasons pulumi.StringArrayInput `pulumi:"allowedAccessReasons"`
}

func (OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (i OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return i.ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(context.Background())
}

func (i OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(ctx context.Context) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput)
}

func (i OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return i.ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (i OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput).ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx)
}

// OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput is an input type that accepts OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs, OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtr and OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput values.
// You can construct a concrete instance of `OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput` via:
//
//	        OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{...}
//
//	or:
//
//	        nil
type OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput interface {
	pulumi.Input

	ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput
	ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Context) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput
}

type organizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs

func OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtr(v *OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput {
	return (*organizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType)(v)
}

func (*organizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (i *organizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return i.ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (i *organizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput)
}

type OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput struct{ *pulumi.OutputState }

func (OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o
}

func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(ctx context.Context) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o
}

func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o.ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy) *OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy {
		return &v
	}).(OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput)
}

// A KeyAccessJustificationsPolicy specifies zero or more allowed
// AccessReason values for encrypt, decrypt, and sign operations on a
// CryptoKey.
// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy) []string {
		return v.AllowedAccessReasons
	}).(pulumi.StringArrayOutput)
}

type OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput struct{ *pulumi.OutputState }

func (OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o
}

func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ToOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o
}

func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) Elem() OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o.ApplyT(func(v *OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy) OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy {
		if v != nil {
			return *v
		}
		var ret OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy
		return ret
	}).(OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput)
}

// A KeyAccessJustificationsPolicy specifies zero or more allowed
// AccessReason values for encrypt, decrypt, and sign operations on a
// CryptoKey.
// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
func (o OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAccessReasons
	}).(pulumi.StringArrayOutput)
}

type ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy struct {
	// A KeyAccessJustificationsPolicy specifies zero or more allowed
	// AccessReason values for encrypt, decrypt, and sign operations on a
	// CryptoKey.
	// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
	AllowedAccessReasons []string `pulumi:"allowedAccessReasons"`
}

// ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyInput is an input type that accepts ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs and ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput values.
// You can construct a concrete instance of `ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyInput` via:
//
//	ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{...}
type ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyInput interface {
	pulumi.Input

	ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput
	ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(context.Context) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput
}

type ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs struct {
	// A KeyAccessJustificationsPolicy specifies zero or more allowed
	// AccessReason values for encrypt, decrypt, and sign operations on a
	// CryptoKey.
	// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
	AllowedAccessReasons pulumi.StringArrayInput `pulumi:"allowedAccessReasons"`
}

func (ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (i ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return i.ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(context.Background())
}

func (i ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(ctx context.Context) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput)
}

func (i ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return i.ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (i ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput).ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx)
}

// ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput is an input type that accepts ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs, ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtr and ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput values.
// You can construct a concrete instance of `ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput` via:
//
//	        ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{...}
//
//	or:
//
//	        nil
type ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput interface {
	pulumi.Input

	ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput
	ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Context) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput
}

type projectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs

func ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtr(v *ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput {
	return (*projectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType)(v)
}

func (*projectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (i *projectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return i.ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (i *projectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrType) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput)
}

type ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput struct{ *pulumi.OutputState }

func (ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o
}

func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutputWithContext(ctx context.Context) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o
}

func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o.ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(context.Background())
}

func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy) *ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy {
		return &v
	}).(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput)
}

// A KeyAccessJustificationsPolicy specifies zero or more allowed
// AccessReason values for encrypt, decrypt, and sign operations on a
// CryptoKey.
// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy) []string {
		return v.AllowedAccessReasons
	}).(pulumi.StringArrayOutput)
}

type ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput struct{ *pulumi.OutputState }

func (ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy)(nil)).Elem()
}

func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o
}

func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) ToProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutputWithContext(ctx context.Context) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o
}

func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) Elem() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput {
	return o.ApplyT(func(v *ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy {
		if v != nil {
			return *v
		}
		var ret ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy
		return ret
	}).(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput)
}

// A KeyAccessJustificationsPolicy specifies zero or more allowed
// AccessReason values for encrypt, decrypt, and sign operations on a
// CryptoKey.
// Each value may be one of: `CUSTOMER_INITIATED_SUPPORT`, `GOOGLE_INITIATED_SERVICE`, `THIRD_PARTY_DATA_REQUEST`, `GOOGLE_INITIATED_REVIEW`, `CUSTOMER_INITIATED_ACCESS`, `GOOGLE_INITIATED_SYSTEM_OPERATION`, `REASON_NOT_EXPECTED`, `MODIFIED_CUSTOMER_INITIATED_ACCESS`, `MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION`, `GOOGLE_RESPONSE_TO_PRODUCTION_ALERT`, `CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING`.
func (o ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAccessReasons
	}).(pulumi.StringArrayOutput)
}

type GetCryptoKeyLatestVersionPublicKey struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm string `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem string `pulumi:"pem"`
}

// GetCryptoKeyLatestVersionPublicKeyInput is an input type that accepts GetCryptoKeyLatestVersionPublicKeyArgs and GetCryptoKeyLatestVersionPublicKeyOutput values.
// You can construct a concrete instance of `GetCryptoKeyLatestVersionPublicKeyInput` via:
//
//	GetCryptoKeyLatestVersionPublicKeyArgs{...}
type GetCryptoKeyLatestVersionPublicKeyInput interface {
	pulumi.Input

	ToGetCryptoKeyLatestVersionPublicKeyOutput() GetCryptoKeyLatestVersionPublicKeyOutput
	ToGetCryptoKeyLatestVersionPublicKeyOutputWithContext(context.Context) GetCryptoKeyLatestVersionPublicKeyOutput
}

type GetCryptoKeyLatestVersionPublicKeyArgs struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringInput `pulumi:"pem"`
}

func (GetCryptoKeyLatestVersionPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyLatestVersionPublicKey)(nil)).Elem()
}

func (i GetCryptoKeyLatestVersionPublicKeyArgs) ToGetCryptoKeyLatestVersionPublicKeyOutput() GetCryptoKeyLatestVersionPublicKeyOutput {
	return i.ToGetCryptoKeyLatestVersionPublicKeyOutputWithContext(context.Background())
}

func (i GetCryptoKeyLatestVersionPublicKeyArgs) ToGetCryptoKeyLatestVersionPublicKeyOutputWithContext(ctx context.Context) GetCryptoKeyLatestVersionPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeyLatestVersionPublicKeyOutput)
}

// GetCryptoKeyLatestVersionPublicKeyArrayInput is an input type that accepts GetCryptoKeyLatestVersionPublicKeyArray and GetCryptoKeyLatestVersionPublicKeyArrayOutput values.
// You can construct a concrete instance of `GetCryptoKeyLatestVersionPublicKeyArrayInput` via:
//
//	GetCryptoKeyLatestVersionPublicKeyArray{ GetCryptoKeyLatestVersionPublicKeyArgs{...} }
type GetCryptoKeyLatestVersionPublicKeyArrayInput interface {
	pulumi.Input

	ToGetCryptoKeyLatestVersionPublicKeyArrayOutput() GetCryptoKeyLatestVersionPublicKeyArrayOutput
	ToGetCryptoKeyLatestVersionPublicKeyArrayOutputWithContext(context.Context) GetCryptoKeyLatestVersionPublicKeyArrayOutput
}

type GetCryptoKeyLatestVersionPublicKeyArray []GetCryptoKeyLatestVersionPublicKeyInput

func (GetCryptoKeyLatestVersionPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeyLatestVersionPublicKey)(nil)).Elem()
}

func (i GetCryptoKeyLatestVersionPublicKeyArray) ToGetCryptoKeyLatestVersionPublicKeyArrayOutput() GetCryptoKeyLatestVersionPublicKeyArrayOutput {
	return i.ToGetCryptoKeyLatestVersionPublicKeyArrayOutputWithContext(context.Background())
}

func (i GetCryptoKeyLatestVersionPublicKeyArray) ToGetCryptoKeyLatestVersionPublicKeyArrayOutputWithContext(ctx context.Context) GetCryptoKeyLatestVersionPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeyLatestVersionPublicKeyArrayOutput)
}

type GetCryptoKeyLatestVersionPublicKeyOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyLatestVersionPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyLatestVersionPublicKey)(nil)).Elem()
}

func (o GetCryptoKeyLatestVersionPublicKeyOutput) ToGetCryptoKeyLatestVersionPublicKeyOutput() GetCryptoKeyLatestVersionPublicKeyOutput {
	return o
}

func (o GetCryptoKeyLatestVersionPublicKeyOutput) ToGetCryptoKeyLatestVersionPublicKeyOutputWithContext(ctx context.Context) GetCryptoKeyLatestVersionPublicKeyOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o GetCryptoKeyLatestVersionPublicKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyLatestVersionPublicKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
func (o GetCryptoKeyLatestVersionPublicKeyOutput) Pem() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyLatestVersionPublicKey) string { return v.Pem }).(pulumi.StringOutput)
}

type GetCryptoKeyLatestVersionPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyLatestVersionPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeyLatestVersionPublicKey)(nil)).Elem()
}

func (o GetCryptoKeyLatestVersionPublicKeyArrayOutput) ToGetCryptoKeyLatestVersionPublicKeyArrayOutput() GetCryptoKeyLatestVersionPublicKeyArrayOutput {
	return o
}

func (o GetCryptoKeyLatestVersionPublicKeyArrayOutput) ToGetCryptoKeyLatestVersionPublicKeyArrayOutputWithContext(ctx context.Context) GetCryptoKeyLatestVersionPublicKeyArrayOutput {
	return o
}

func (o GetCryptoKeyLatestVersionPublicKeyArrayOutput) Index(i pulumi.IntInput) GetCryptoKeyLatestVersionPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoKeyLatestVersionPublicKey {
		return vs[0].([]GetCryptoKeyLatestVersionPublicKey)[vs[1].(int)]
	}).(GetCryptoKeyLatestVersionPublicKeyOutput)
}

type GetCryptoKeyVersionsPublicKey struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm string `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem string `pulumi:"pem"`
}

// GetCryptoKeyVersionsPublicKeyInput is an input type that accepts GetCryptoKeyVersionsPublicKeyArgs and GetCryptoKeyVersionsPublicKeyOutput values.
// You can construct a concrete instance of `GetCryptoKeyVersionsPublicKeyInput` via:
//
//	GetCryptoKeyVersionsPublicKeyArgs{...}
type GetCryptoKeyVersionsPublicKeyInput interface {
	pulumi.Input

	ToGetCryptoKeyVersionsPublicKeyOutput() GetCryptoKeyVersionsPublicKeyOutput
	ToGetCryptoKeyVersionsPublicKeyOutputWithContext(context.Context) GetCryptoKeyVersionsPublicKeyOutput
}

type GetCryptoKeyVersionsPublicKeyArgs struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringInput `pulumi:"pem"`
}

func (GetCryptoKeyVersionsPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyVersionsPublicKey)(nil)).Elem()
}

func (i GetCryptoKeyVersionsPublicKeyArgs) ToGetCryptoKeyVersionsPublicKeyOutput() GetCryptoKeyVersionsPublicKeyOutput {
	return i.ToGetCryptoKeyVersionsPublicKeyOutputWithContext(context.Background())
}

func (i GetCryptoKeyVersionsPublicKeyArgs) ToGetCryptoKeyVersionsPublicKeyOutputWithContext(ctx context.Context) GetCryptoKeyVersionsPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeyVersionsPublicKeyOutput)
}

// GetCryptoKeyVersionsPublicKeyArrayInput is an input type that accepts GetCryptoKeyVersionsPublicKeyArray and GetCryptoKeyVersionsPublicKeyArrayOutput values.
// You can construct a concrete instance of `GetCryptoKeyVersionsPublicKeyArrayInput` via:
//
//	GetCryptoKeyVersionsPublicKeyArray{ GetCryptoKeyVersionsPublicKeyArgs{...} }
type GetCryptoKeyVersionsPublicKeyArrayInput interface {
	pulumi.Input

	ToGetCryptoKeyVersionsPublicKeyArrayOutput() GetCryptoKeyVersionsPublicKeyArrayOutput
	ToGetCryptoKeyVersionsPublicKeyArrayOutputWithContext(context.Context) GetCryptoKeyVersionsPublicKeyArrayOutput
}

type GetCryptoKeyVersionsPublicKeyArray []GetCryptoKeyVersionsPublicKeyInput

func (GetCryptoKeyVersionsPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeyVersionsPublicKey)(nil)).Elem()
}

func (i GetCryptoKeyVersionsPublicKeyArray) ToGetCryptoKeyVersionsPublicKeyArrayOutput() GetCryptoKeyVersionsPublicKeyArrayOutput {
	return i.ToGetCryptoKeyVersionsPublicKeyArrayOutputWithContext(context.Background())
}

func (i GetCryptoKeyVersionsPublicKeyArray) ToGetCryptoKeyVersionsPublicKeyArrayOutputWithContext(ctx context.Context) GetCryptoKeyVersionsPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeyVersionsPublicKeyArrayOutput)
}

type GetCryptoKeyVersionsPublicKeyOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyVersionsPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyVersionsPublicKey)(nil)).Elem()
}

func (o GetCryptoKeyVersionsPublicKeyOutput) ToGetCryptoKeyVersionsPublicKeyOutput() GetCryptoKeyVersionsPublicKeyOutput {
	return o
}

func (o GetCryptoKeyVersionsPublicKeyOutput) ToGetCryptoKeyVersionsPublicKeyOutputWithContext(ctx context.Context) GetCryptoKeyVersionsPublicKeyOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o GetCryptoKeyVersionsPublicKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsPublicKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
func (o GetCryptoKeyVersionsPublicKeyOutput) Pem() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsPublicKey) string { return v.Pem }).(pulumi.StringOutput)
}

type GetCryptoKeyVersionsPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyVersionsPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeyVersionsPublicKey)(nil)).Elem()
}

func (o GetCryptoKeyVersionsPublicKeyArrayOutput) ToGetCryptoKeyVersionsPublicKeyArrayOutput() GetCryptoKeyVersionsPublicKeyArrayOutput {
	return o
}

func (o GetCryptoKeyVersionsPublicKeyArrayOutput) ToGetCryptoKeyVersionsPublicKeyArrayOutputWithContext(ctx context.Context) GetCryptoKeyVersionsPublicKeyArrayOutput {
	return o
}

func (o GetCryptoKeyVersionsPublicKeyArrayOutput) Index(i pulumi.IntInput) GetCryptoKeyVersionsPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoKeyVersionsPublicKey {
		return vs[0].([]GetCryptoKeyVersionsPublicKey)[vs[1].(int)]
	}).(GetCryptoKeyVersionsPublicKeyOutput)
}

type GetCryptoKeyVersionsVersion struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm string `pulumi:"algorithm"`
	// The `id` of the Google Cloud Platform CryptoKey to which the key version belongs. This is also the `id` field of the
	// `kms.CryptoKey` resource/datasource.
	CryptoKey       string                                 `pulumi:"cryptoKey"`
	Id              string                                 `pulumi:"id"`
	Name            string                                 `pulumi:"name"`
	ProtectionLevel string                                 `pulumi:"protectionLevel"`
	PublicKeys      []GetCryptoKeyVersionsVersionPublicKey `pulumi:"publicKeys"`
	State           string                                 `pulumi:"state"`
	Version         int                                    `pulumi:"version"`
}

// GetCryptoKeyVersionsVersionInput is an input type that accepts GetCryptoKeyVersionsVersionArgs and GetCryptoKeyVersionsVersionOutput values.
// You can construct a concrete instance of `GetCryptoKeyVersionsVersionInput` via:
//
//	GetCryptoKeyVersionsVersionArgs{...}
type GetCryptoKeyVersionsVersionInput interface {
	pulumi.Input

	ToGetCryptoKeyVersionsVersionOutput() GetCryptoKeyVersionsVersionOutput
	ToGetCryptoKeyVersionsVersionOutputWithContext(context.Context) GetCryptoKeyVersionsVersionOutput
}

type GetCryptoKeyVersionsVersionArgs struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The `id` of the Google Cloud Platform CryptoKey to which the key version belongs. This is also the `id` field of the
	// `kms.CryptoKey` resource/datasource.
	CryptoKey       pulumi.StringInput                             `pulumi:"cryptoKey"`
	Id              pulumi.StringInput                             `pulumi:"id"`
	Name            pulumi.StringInput                             `pulumi:"name"`
	ProtectionLevel pulumi.StringInput                             `pulumi:"protectionLevel"`
	PublicKeys      GetCryptoKeyVersionsVersionPublicKeyArrayInput `pulumi:"publicKeys"`
	State           pulumi.StringInput                             `pulumi:"state"`
	Version         pulumi.IntInput                                `pulumi:"version"`
}

func (GetCryptoKeyVersionsVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyVersionsVersion)(nil)).Elem()
}

func (i GetCryptoKeyVersionsVersionArgs) ToGetCryptoKeyVersionsVersionOutput() GetCryptoKeyVersionsVersionOutput {
	return i.ToGetCryptoKeyVersionsVersionOutputWithContext(context.Background())
}

func (i GetCryptoKeyVersionsVersionArgs) ToGetCryptoKeyVersionsVersionOutputWithContext(ctx context.Context) GetCryptoKeyVersionsVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeyVersionsVersionOutput)
}

// GetCryptoKeyVersionsVersionArrayInput is an input type that accepts GetCryptoKeyVersionsVersionArray and GetCryptoKeyVersionsVersionArrayOutput values.
// You can construct a concrete instance of `GetCryptoKeyVersionsVersionArrayInput` via:
//
//	GetCryptoKeyVersionsVersionArray{ GetCryptoKeyVersionsVersionArgs{...} }
type GetCryptoKeyVersionsVersionArrayInput interface {
	pulumi.Input

	ToGetCryptoKeyVersionsVersionArrayOutput() GetCryptoKeyVersionsVersionArrayOutput
	ToGetCryptoKeyVersionsVersionArrayOutputWithContext(context.Context) GetCryptoKeyVersionsVersionArrayOutput
}

type GetCryptoKeyVersionsVersionArray []GetCryptoKeyVersionsVersionInput

func (GetCryptoKeyVersionsVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeyVersionsVersion)(nil)).Elem()
}

func (i GetCryptoKeyVersionsVersionArray) ToGetCryptoKeyVersionsVersionArrayOutput() GetCryptoKeyVersionsVersionArrayOutput {
	return i.ToGetCryptoKeyVersionsVersionArrayOutputWithContext(context.Background())
}

func (i GetCryptoKeyVersionsVersionArray) ToGetCryptoKeyVersionsVersionArrayOutputWithContext(ctx context.Context) GetCryptoKeyVersionsVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeyVersionsVersionArrayOutput)
}

type GetCryptoKeyVersionsVersionOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyVersionsVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyVersionsVersion)(nil)).Elem()
}

func (o GetCryptoKeyVersionsVersionOutput) ToGetCryptoKeyVersionsVersionOutput() GetCryptoKeyVersionsVersionOutput {
	return o
}

func (o GetCryptoKeyVersionsVersionOutput) ToGetCryptoKeyVersionsVersionOutputWithContext(ctx context.Context) GetCryptoKeyVersionsVersionOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o GetCryptoKeyVersionsVersionOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersion) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The `id` of the Google Cloud Platform CryptoKey to which the key version belongs. This is also the `id` field of the
// `kms.CryptoKey` resource/datasource.
func (o GetCryptoKeyVersionsVersionOutput) CryptoKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersion) string { return v.CryptoKey }).(pulumi.StringOutput)
}

func (o GetCryptoKeyVersionsVersionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersion) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCryptoKeyVersionsVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersion) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetCryptoKeyVersionsVersionOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersion) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

func (o GetCryptoKeyVersionsVersionOutput) PublicKeys() GetCryptoKeyVersionsVersionPublicKeyArrayOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersion) []GetCryptoKeyVersionsVersionPublicKey { return v.PublicKeys }).(GetCryptoKeyVersionsVersionPublicKeyArrayOutput)
}

func (o GetCryptoKeyVersionsVersionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersion) string { return v.State }).(pulumi.StringOutput)
}

func (o GetCryptoKeyVersionsVersionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersion) int { return v.Version }).(pulumi.IntOutput)
}

type GetCryptoKeyVersionsVersionArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyVersionsVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeyVersionsVersion)(nil)).Elem()
}

func (o GetCryptoKeyVersionsVersionArrayOutput) ToGetCryptoKeyVersionsVersionArrayOutput() GetCryptoKeyVersionsVersionArrayOutput {
	return o
}

func (o GetCryptoKeyVersionsVersionArrayOutput) ToGetCryptoKeyVersionsVersionArrayOutputWithContext(ctx context.Context) GetCryptoKeyVersionsVersionArrayOutput {
	return o
}

func (o GetCryptoKeyVersionsVersionArrayOutput) Index(i pulumi.IntInput) GetCryptoKeyVersionsVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoKeyVersionsVersion {
		return vs[0].([]GetCryptoKeyVersionsVersion)[vs[1].(int)]
	}).(GetCryptoKeyVersionsVersionOutput)
}

type GetCryptoKeyVersionsVersionPublicKey struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm string `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem string `pulumi:"pem"`
}

// GetCryptoKeyVersionsVersionPublicKeyInput is an input type that accepts GetCryptoKeyVersionsVersionPublicKeyArgs and GetCryptoKeyVersionsVersionPublicKeyOutput values.
// You can construct a concrete instance of `GetCryptoKeyVersionsVersionPublicKeyInput` via:
//
//	GetCryptoKeyVersionsVersionPublicKeyArgs{...}
type GetCryptoKeyVersionsVersionPublicKeyInput interface {
	pulumi.Input

	ToGetCryptoKeyVersionsVersionPublicKeyOutput() GetCryptoKeyVersionsVersionPublicKeyOutput
	ToGetCryptoKeyVersionsVersionPublicKeyOutputWithContext(context.Context) GetCryptoKeyVersionsVersionPublicKeyOutput
}

type GetCryptoKeyVersionsVersionPublicKeyArgs struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringInput `pulumi:"pem"`
}

func (GetCryptoKeyVersionsVersionPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyVersionsVersionPublicKey)(nil)).Elem()
}

func (i GetCryptoKeyVersionsVersionPublicKeyArgs) ToGetCryptoKeyVersionsVersionPublicKeyOutput() GetCryptoKeyVersionsVersionPublicKeyOutput {
	return i.ToGetCryptoKeyVersionsVersionPublicKeyOutputWithContext(context.Background())
}

func (i GetCryptoKeyVersionsVersionPublicKeyArgs) ToGetCryptoKeyVersionsVersionPublicKeyOutputWithContext(ctx context.Context) GetCryptoKeyVersionsVersionPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeyVersionsVersionPublicKeyOutput)
}

// GetCryptoKeyVersionsVersionPublicKeyArrayInput is an input type that accepts GetCryptoKeyVersionsVersionPublicKeyArray and GetCryptoKeyVersionsVersionPublicKeyArrayOutput values.
// You can construct a concrete instance of `GetCryptoKeyVersionsVersionPublicKeyArrayInput` via:
//
//	GetCryptoKeyVersionsVersionPublicKeyArray{ GetCryptoKeyVersionsVersionPublicKeyArgs{...} }
type GetCryptoKeyVersionsVersionPublicKeyArrayInput interface {
	pulumi.Input

	ToGetCryptoKeyVersionsVersionPublicKeyArrayOutput() GetCryptoKeyVersionsVersionPublicKeyArrayOutput
	ToGetCryptoKeyVersionsVersionPublicKeyArrayOutputWithContext(context.Context) GetCryptoKeyVersionsVersionPublicKeyArrayOutput
}

type GetCryptoKeyVersionsVersionPublicKeyArray []GetCryptoKeyVersionsVersionPublicKeyInput

func (GetCryptoKeyVersionsVersionPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeyVersionsVersionPublicKey)(nil)).Elem()
}

func (i GetCryptoKeyVersionsVersionPublicKeyArray) ToGetCryptoKeyVersionsVersionPublicKeyArrayOutput() GetCryptoKeyVersionsVersionPublicKeyArrayOutput {
	return i.ToGetCryptoKeyVersionsVersionPublicKeyArrayOutputWithContext(context.Background())
}

func (i GetCryptoKeyVersionsVersionPublicKeyArray) ToGetCryptoKeyVersionsVersionPublicKeyArrayOutputWithContext(ctx context.Context) GetCryptoKeyVersionsVersionPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeyVersionsVersionPublicKeyArrayOutput)
}

type GetCryptoKeyVersionsVersionPublicKeyOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyVersionsVersionPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeyVersionsVersionPublicKey)(nil)).Elem()
}

func (o GetCryptoKeyVersionsVersionPublicKeyOutput) ToGetCryptoKeyVersionsVersionPublicKeyOutput() GetCryptoKeyVersionsVersionPublicKeyOutput {
	return o
}

func (o GetCryptoKeyVersionsVersionPublicKeyOutput) ToGetCryptoKeyVersionsVersionPublicKeyOutputWithContext(ctx context.Context) GetCryptoKeyVersionsVersionPublicKeyOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o GetCryptoKeyVersionsVersionPublicKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersionPublicKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
func (o GetCryptoKeyVersionsVersionPublicKeyOutput) Pem() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeyVersionsVersionPublicKey) string { return v.Pem }).(pulumi.StringOutput)
}

type GetCryptoKeyVersionsVersionPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoKeyVersionsVersionPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeyVersionsVersionPublicKey)(nil)).Elem()
}

func (o GetCryptoKeyVersionsVersionPublicKeyArrayOutput) ToGetCryptoKeyVersionsVersionPublicKeyArrayOutput() GetCryptoKeyVersionsVersionPublicKeyArrayOutput {
	return o
}

func (o GetCryptoKeyVersionsVersionPublicKeyArrayOutput) ToGetCryptoKeyVersionsVersionPublicKeyArrayOutputWithContext(ctx context.Context) GetCryptoKeyVersionsVersionPublicKeyArrayOutput {
	return o
}

func (o GetCryptoKeyVersionsVersionPublicKeyArrayOutput) Index(i pulumi.IntInput) GetCryptoKeyVersionsVersionPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoKeyVersionsVersionPublicKey {
		return vs[0].([]GetCryptoKeyVersionsVersionPublicKey)[vs[1].(int)]
	}).(GetCryptoKeyVersionsVersionPublicKeyOutput)
}

type GetCryptoKeysKey struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
	// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend string `pulumi:"cryptoKeyBackend"`
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration string            `pulumi:"destroyScheduledDuration"`
	EffectiveLabels          map[string]string `pulumi:"effectiveLabels"`
	Id                       string            `pulumi:"id"`
	// Whether this key may contain imported versions only.
	ImportOnly bool `pulumi:"importOnly"`
	// The policy used for Key Access Justifications Policy Enforcement. If this
	// field is present and this key is enrolled in Key Access Justifications
	// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
	// sign operations, and the operation will fail if rejected by the policy. The
	// policy is defined by specifying zero or more allowed justification codes.
	// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
	// By default, this field is absent, and all justification codes are allowed.
	// This field is currently in beta and is subject to change.
	KeyAccessJustificationsPolicies []GetCryptoKeysKeyKeyAccessJustificationsPolicy `pulumi:"keyAccessJustificationsPolicies"`
	// The key ring that the keys belongs to. Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.,
	KeyRing *string `pulumi:"keyRing"`
	// Labels with user-defined metadata to apply to this resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the CryptoKey.
	Name *string `pulumi:"name"`
	// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
	// Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
	Primaries []GetCryptoKeysKeyPrimary `pulumi:"primaries"`
	// The combination of labels configured directly on the resource
	//  and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The immutable purpose of this CryptoKey. See the
	// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	Purpose string `pulumi:"purpose"`
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter 's' (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod string `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion
	// or 'google_kms_key_ring_import_job' resource to import the CryptoKeyVersion.
	// This field is only applicable during initial CryptoKey creation.
	SkipInitialVersionCreation bool `pulumi:"skipInitialVersionCreation"`
	// A template describing settings for new crypto key versions.
	VersionTemplates []GetCryptoKeysKeyVersionTemplate `pulumi:"versionTemplates"`
}

// GetCryptoKeysKeyInput is an input type that accepts GetCryptoKeysKeyArgs and GetCryptoKeysKeyOutput values.
// You can construct a concrete instance of `GetCryptoKeysKeyInput` via:
//
//	GetCryptoKeysKeyArgs{...}
type GetCryptoKeysKeyInput interface {
	pulumi.Input

	ToGetCryptoKeysKeyOutput() GetCryptoKeysKeyOutput
	ToGetCryptoKeysKeyOutputWithContext(context.Context) GetCryptoKeysKeyOutput
}

type GetCryptoKeysKeyArgs struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
	// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend pulumi.StringInput `pulumi:"cryptoKeyBackend"`
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration pulumi.StringInput    `pulumi:"destroyScheduledDuration"`
	EffectiveLabels          pulumi.StringMapInput `pulumi:"effectiveLabels"`
	Id                       pulumi.StringInput    `pulumi:"id"`
	// Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolInput `pulumi:"importOnly"`
	// The policy used for Key Access Justifications Policy Enforcement. If this
	// field is present and this key is enrolled in Key Access Justifications
	// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
	// sign operations, and the operation will fail if rejected by the policy. The
	// policy is defined by specifying zero or more allowed justification codes.
	// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
	// By default, this field is absent, and all justification codes are allowed.
	// This field is currently in beta and is subject to change.
	KeyAccessJustificationsPolicies GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayInput `pulumi:"keyAccessJustificationsPolicies"`
	// The key ring that the keys belongs to. Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.,
	KeyRing pulumi.StringPtrInput `pulumi:"keyRing"`
	// Labels with user-defined metadata to apply to this resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The resource name for the CryptoKey.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
	// Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
	Primaries GetCryptoKeysKeyPrimaryArrayInput `pulumi:"primaries"`
	// The combination of labels configured directly on the resource
	//  and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput `pulumi:"pulumiLabels"`
	// The immutable purpose of this CryptoKey. See the
	// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	Purpose pulumi.StringInput `pulumi:"purpose"`
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter 's' (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod pulumi.StringInput `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion
	// or 'google_kms_key_ring_import_job' resource to import the CryptoKeyVersion.
	// This field is only applicable during initial CryptoKey creation.
	SkipInitialVersionCreation pulumi.BoolInput `pulumi:"skipInitialVersionCreation"`
	// A template describing settings for new crypto key versions.
	VersionTemplates GetCryptoKeysKeyVersionTemplateArrayInput `pulumi:"versionTemplates"`
}

func (GetCryptoKeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysKey)(nil)).Elem()
}

func (i GetCryptoKeysKeyArgs) ToGetCryptoKeysKeyOutput() GetCryptoKeysKeyOutput {
	return i.ToGetCryptoKeysKeyOutputWithContext(context.Background())
}

func (i GetCryptoKeysKeyArgs) ToGetCryptoKeysKeyOutputWithContext(ctx context.Context) GetCryptoKeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeysKeyOutput)
}

// GetCryptoKeysKeyArrayInput is an input type that accepts GetCryptoKeysKeyArray and GetCryptoKeysKeyArrayOutput values.
// You can construct a concrete instance of `GetCryptoKeysKeyArrayInput` via:
//
//	GetCryptoKeysKeyArray{ GetCryptoKeysKeyArgs{...} }
type GetCryptoKeysKeyArrayInput interface {
	pulumi.Input

	ToGetCryptoKeysKeyArrayOutput() GetCryptoKeysKeyArrayOutput
	ToGetCryptoKeysKeyArrayOutputWithContext(context.Context) GetCryptoKeysKeyArrayOutput
}

type GetCryptoKeysKeyArray []GetCryptoKeysKeyInput

func (GetCryptoKeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeysKey)(nil)).Elem()
}

func (i GetCryptoKeysKeyArray) ToGetCryptoKeysKeyArrayOutput() GetCryptoKeysKeyArrayOutput {
	return i.ToGetCryptoKeysKeyArrayOutputWithContext(context.Background())
}

func (i GetCryptoKeysKeyArray) ToGetCryptoKeysKeyArrayOutputWithContext(ctx context.Context) GetCryptoKeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeysKeyArrayOutput)
}

type GetCryptoKeysKeyOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysKey)(nil)).Elem()
}

func (o GetCryptoKeysKeyOutput) ToGetCryptoKeysKeyOutput() GetCryptoKeysKeyOutput {
	return o
}

func (o GetCryptoKeysKeyOutput) ToGetCryptoKeysKeyOutputWithContext(ctx context.Context) GetCryptoKeysKeyOutput {
	return o
}

// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
// The resource name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
func (o GetCryptoKeysKeyOutput) CryptoKeyBackend() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) string { return v.CryptoKeyBackend }).(pulumi.StringOutput)
}

// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
// If not specified at creation time, the default duration is 30 days.
func (o GetCryptoKeysKeyOutput) DestroyScheduledDuration() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) string { return v.DestroyScheduledDuration }).(pulumi.StringOutput)
}

func (o GetCryptoKeysKeyOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) map[string]string { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o GetCryptoKeysKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) string { return v.Id }).(pulumi.StringOutput)
}

// Whether this key may contain imported versions only.
func (o GetCryptoKeysKeyOutput) ImportOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) bool { return v.ImportOnly }).(pulumi.BoolOutput)
}

// The policy used for Key Access Justifications Policy Enforcement. If this
// field is present and this key is enrolled in Key Access Justifications
// Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
// sign operations, and the operation will fail if rejected by the policy. The
// policy is defined by specifying zero or more allowed justification codes.
// https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
// By default, this field is absent, and all justification codes are allowed.
// This field is currently in beta and is subject to change.
func (o GetCryptoKeysKeyOutput) KeyAccessJustificationsPolicies() GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) []GetCryptoKeysKeyKeyAccessJustificationsPolicy {
		return v.KeyAccessJustificationsPolicies
	}).(GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput)
}

// The key ring that the keys belongs to. Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.,
func (o GetCryptoKeysKeyOutput) KeyRing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) *string { return v.KeyRing }).(pulumi.StringPtrOutput)
}

// Labels with user-defined metadata to apply to this resource.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o GetCryptoKeysKeyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for the CryptoKey.
func (o GetCryptoKeysKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
// Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
func (o GetCryptoKeysKeyOutput) Primaries() GetCryptoKeysKeyPrimaryArrayOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) []GetCryptoKeysKeyPrimary { return v.Primaries }).(GetCryptoKeysKeyPrimaryArrayOutput)
}

// The combination of labels configured directly on the resource
//
//	and default labels configured on the provider.
func (o GetCryptoKeysKeyOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) map[string]string { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The immutable purpose of this CryptoKey. See the
// [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
// for possible inputs.
// Default value is "ENCRYPT_DECRYPT".
func (o GetCryptoKeysKeyOutput) Purpose() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) string { return v.Purpose }).(pulumi.StringOutput)
}

// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
// The first rotation will take place after the specified period. The rotation period has
// the format of a decimal number with up to 9 fractional digits, followed by the
// letter 's' (seconds). It must be greater than a day (ie, 86400).
func (o GetCryptoKeysKeyOutput) RotationPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) string { return v.RotationPeriod }).(pulumi.StringOutput)
}

// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
// You must use the 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion
// or 'google_kms_key_ring_import_job' resource to import the CryptoKeyVersion.
// This field is only applicable during initial CryptoKey creation.
func (o GetCryptoKeysKeyOutput) SkipInitialVersionCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) bool { return v.SkipInitialVersionCreation }).(pulumi.BoolOutput)
}

// A template describing settings for new crypto key versions.
func (o GetCryptoKeysKeyOutput) VersionTemplates() GetCryptoKeysKeyVersionTemplateArrayOutput {
	return o.ApplyT(func(v GetCryptoKeysKey) []GetCryptoKeysKeyVersionTemplate { return v.VersionTemplates }).(GetCryptoKeysKeyVersionTemplateArrayOutput)
}

type GetCryptoKeysKeyArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeysKey)(nil)).Elem()
}

func (o GetCryptoKeysKeyArrayOutput) ToGetCryptoKeysKeyArrayOutput() GetCryptoKeysKeyArrayOutput {
	return o
}

func (o GetCryptoKeysKeyArrayOutput) ToGetCryptoKeysKeyArrayOutputWithContext(ctx context.Context) GetCryptoKeysKeyArrayOutput {
	return o
}

func (o GetCryptoKeysKeyArrayOutput) Index(i pulumi.IntInput) GetCryptoKeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoKeysKey {
		return vs[0].([]GetCryptoKeysKey)[vs[1].(int)]
	}).(GetCryptoKeysKeyOutput)
}

type GetCryptoKeysKeyKeyAccessJustificationsPolicy struct {
	// The list of allowed reasons for access to this CryptoKey. Zero allowed
	// access reasons means all encrypt, decrypt, and sign operations for
	// this CryptoKey will fail.
	AllowedAccessReasons []string `pulumi:"allowedAccessReasons"`
}

// GetCryptoKeysKeyKeyAccessJustificationsPolicyInput is an input type that accepts GetCryptoKeysKeyKeyAccessJustificationsPolicyArgs and GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput values.
// You can construct a concrete instance of `GetCryptoKeysKeyKeyAccessJustificationsPolicyInput` via:
//
//	GetCryptoKeysKeyKeyAccessJustificationsPolicyArgs{...}
type GetCryptoKeysKeyKeyAccessJustificationsPolicyInput interface {
	pulumi.Input

	ToGetCryptoKeysKeyKeyAccessJustificationsPolicyOutput() GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput
	ToGetCryptoKeysKeyKeyAccessJustificationsPolicyOutputWithContext(context.Context) GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput
}

type GetCryptoKeysKeyKeyAccessJustificationsPolicyArgs struct {
	// The list of allowed reasons for access to this CryptoKey. Zero allowed
	// access reasons means all encrypt, decrypt, and sign operations for
	// this CryptoKey will fail.
	AllowedAccessReasons pulumi.StringArrayInput `pulumi:"allowedAccessReasons"`
}

func (GetCryptoKeysKeyKeyAccessJustificationsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (i GetCryptoKeysKeyKeyAccessJustificationsPolicyArgs) ToGetCryptoKeysKeyKeyAccessJustificationsPolicyOutput() GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput {
	return i.ToGetCryptoKeysKeyKeyAccessJustificationsPolicyOutputWithContext(context.Background())
}

func (i GetCryptoKeysKeyKeyAccessJustificationsPolicyArgs) ToGetCryptoKeysKeyKeyAccessJustificationsPolicyOutputWithContext(ctx context.Context) GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput)
}

// GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayInput is an input type that accepts GetCryptoKeysKeyKeyAccessJustificationsPolicyArray and GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput values.
// You can construct a concrete instance of `GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayInput` via:
//
//	GetCryptoKeysKeyKeyAccessJustificationsPolicyArray{ GetCryptoKeysKeyKeyAccessJustificationsPolicyArgs{...} }
type GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayInput interface {
	pulumi.Input

	ToGetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput() GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput
	ToGetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutputWithContext(context.Context) GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput
}

type GetCryptoKeysKeyKeyAccessJustificationsPolicyArray []GetCryptoKeysKeyKeyAccessJustificationsPolicyInput

func (GetCryptoKeysKeyKeyAccessJustificationsPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeysKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (i GetCryptoKeysKeyKeyAccessJustificationsPolicyArray) ToGetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput() GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput {
	return i.ToGetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutputWithContext(context.Background())
}

func (i GetCryptoKeysKeyKeyAccessJustificationsPolicyArray) ToGetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutputWithContext(ctx context.Context) GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput)
}

type GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (o GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput) ToGetCryptoKeysKeyKeyAccessJustificationsPolicyOutput() GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput {
	return o
}

func (o GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput) ToGetCryptoKeysKeyKeyAccessJustificationsPolicyOutputWithContext(ctx context.Context) GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput {
	return o
}

// The list of allowed reasons for access to this CryptoKey. Zero allowed
// access reasons means all encrypt, decrypt, and sign operations for
// this CryptoKey will fail.
func (o GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCryptoKeysKeyKeyAccessJustificationsPolicy) []string { return v.AllowedAccessReasons }).(pulumi.StringArrayOutput)
}

type GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeysKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (o GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput) ToGetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput() GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput {
	return o
}

func (o GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput) ToGetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutputWithContext(ctx context.Context) GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput {
	return o
}

func (o GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput) Index(i pulumi.IntInput) GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoKeysKeyKeyAccessJustificationsPolicy {
		return vs[0].([]GetCryptoKeysKeyKeyAccessJustificationsPolicy)[vs[1].(int)]
	}).(GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput)
}

type GetCryptoKeysKeyPrimary struct {
	// The resource name for this CryptoKeyVersion.
	Name string `pulumi:"name"`
	// The current state of the CryptoKeyVersion.
	State string `pulumi:"state"`
}

// GetCryptoKeysKeyPrimaryInput is an input type that accepts GetCryptoKeysKeyPrimaryArgs and GetCryptoKeysKeyPrimaryOutput values.
// You can construct a concrete instance of `GetCryptoKeysKeyPrimaryInput` via:
//
//	GetCryptoKeysKeyPrimaryArgs{...}
type GetCryptoKeysKeyPrimaryInput interface {
	pulumi.Input

	ToGetCryptoKeysKeyPrimaryOutput() GetCryptoKeysKeyPrimaryOutput
	ToGetCryptoKeysKeyPrimaryOutputWithContext(context.Context) GetCryptoKeysKeyPrimaryOutput
}

type GetCryptoKeysKeyPrimaryArgs struct {
	// The resource name for this CryptoKeyVersion.
	Name pulumi.StringInput `pulumi:"name"`
	// The current state of the CryptoKeyVersion.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetCryptoKeysKeyPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysKeyPrimary)(nil)).Elem()
}

func (i GetCryptoKeysKeyPrimaryArgs) ToGetCryptoKeysKeyPrimaryOutput() GetCryptoKeysKeyPrimaryOutput {
	return i.ToGetCryptoKeysKeyPrimaryOutputWithContext(context.Background())
}

func (i GetCryptoKeysKeyPrimaryArgs) ToGetCryptoKeysKeyPrimaryOutputWithContext(ctx context.Context) GetCryptoKeysKeyPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeysKeyPrimaryOutput)
}

// GetCryptoKeysKeyPrimaryArrayInput is an input type that accepts GetCryptoKeysKeyPrimaryArray and GetCryptoKeysKeyPrimaryArrayOutput values.
// You can construct a concrete instance of `GetCryptoKeysKeyPrimaryArrayInput` via:
//
//	GetCryptoKeysKeyPrimaryArray{ GetCryptoKeysKeyPrimaryArgs{...} }
type GetCryptoKeysKeyPrimaryArrayInput interface {
	pulumi.Input

	ToGetCryptoKeysKeyPrimaryArrayOutput() GetCryptoKeysKeyPrimaryArrayOutput
	ToGetCryptoKeysKeyPrimaryArrayOutputWithContext(context.Context) GetCryptoKeysKeyPrimaryArrayOutput
}

type GetCryptoKeysKeyPrimaryArray []GetCryptoKeysKeyPrimaryInput

func (GetCryptoKeysKeyPrimaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeysKeyPrimary)(nil)).Elem()
}

func (i GetCryptoKeysKeyPrimaryArray) ToGetCryptoKeysKeyPrimaryArrayOutput() GetCryptoKeysKeyPrimaryArrayOutput {
	return i.ToGetCryptoKeysKeyPrimaryArrayOutputWithContext(context.Background())
}

func (i GetCryptoKeysKeyPrimaryArray) ToGetCryptoKeysKeyPrimaryArrayOutputWithContext(ctx context.Context) GetCryptoKeysKeyPrimaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeysKeyPrimaryArrayOutput)
}

type GetCryptoKeysKeyPrimaryOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysKeyPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysKeyPrimary)(nil)).Elem()
}

func (o GetCryptoKeysKeyPrimaryOutput) ToGetCryptoKeysKeyPrimaryOutput() GetCryptoKeysKeyPrimaryOutput {
	return o
}

func (o GetCryptoKeysKeyPrimaryOutput) ToGetCryptoKeysKeyPrimaryOutputWithContext(ctx context.Context) GetCryptoKeysKeyPrimaryOutput {
	return o
}

// The resource name for this CryptoKeyVersion.
func (o GetCryptoKeysKeyPrimaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKeyPrimary) string { return v.Name }).(pulumi.StringOutput)
}

// The current state of the CryptoKeyVersion.
func (o GetCryptoKeysKeyPrimaryOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKeyPrimary) string { return v.State }).(pulumi.StringOutput)
}

type GetCryptoKeysKeyPrimaryArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysKeyPrimaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeysKeyPrimary)(nil)).Elem()
}

func (o GetCryptoKeysKeyPrimaryArrayOutput) ToGetCryptoKeysKeyPrimaryArrayOutput() GetCryptoKeysKeyPrimaryArrayOutput {
	return o
}

func (o GetCryptoKeysKeyPrimaryArrayOutput) ToGetCryptoKeysKeyPrimaryArrayOutputWithContext(ctx context.Context) GetCryptoKeysKeyPrimaryArrayOutput {
	return o
}

func (o GetCryptoKeysKeyPrimaryArrayOutput) Index(i pulumi.IntInput) GetCryptoKeysKeyPrimaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoKeysKeyPrimary {
		return vs[0].([]GetCryptoKeysKeyPrimary)[vs[1].(int)]
	}).(GetCryptoKeysKeyPrimaryOutput)
}

type GetCryptoKeysKeyVersionTemplate struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm string `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	ProtectionLevel string `pulumi:"protectionLevel"`
}

// GetCryptoKeysKeyVersionTemplateInput is an input type that accepts GetCryptoKeysKeyVersionTemplateArgs and GetCryptoKeysKeyVersionTemplateOutput values.
// You can construct a concrete instance of `GetCryptoKeysKeyVersionTemplateInput` via:
//
//	GetCryptoKeysKeyVersionTemplateArgs{...}
type GetCryptoKeysKeyVersionTemplateInput interface {
	pulumi.Input

	ToGetCryptoKeysKeyVersionTemplateOutput() GetCryptoKeysKeyVersionTemplateOutput
	ToGetCryptoKeysKeyVersionTemplateOutputWithContext(context.Context) GetCryptoKeysKeyVersionTemplateOutput
}

type GetCryptoKeysKeyVersionTemplateArgs struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
}

func (GetCryptoKeysKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysKeyVersionTemplate)(nil)).Elem()
}

func (i GetCryptoKeysKeyVersionTemplateArgs) ToGetCryptoKeysKeyVersionTemplateOutput() GetCryptoKeysKeyVersionTemplateOutput {
	return i.ToGetCryptoKeysKeyVersionTemplateOutputWithContext(context.Background())
}

func (i GetCryptoKeysKeyVersionTemplateArgs) ToGetCryptoKeysKeyVersionTemplateOutputWithContext(ctx context.Context) GetCryptoKeysKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeysKeyVersionTemplateOutput)
}

// GetCryptoKeysKeyVersionTemplateArrayInput is an input type that accepts GetCryptoKeysKeyVersionTemplateArray and GetCryptoKeysKeyVersionTemplateArrayOutput values.
// You can construct a concrete instance of `GetCryptoKeysKeyVersionTemplateArrayInput` via:
//
//	GetCryptoKeysKeyVersionTemplateArray{ GetCryptoKeysKeyVersionTemplateArgs{...} }
type GetCryptoKeysKeyVersionTemplateArrayInput interface {
	pulumi.Input

	ToGetCryptoKeysKeyVersionTemplateArrayOutput() GetCryptoKeysKeyVersionTemplateArrayOutput
	ToGetCryptoKeysKeyVersionTemplateArrayOutputWithContext(context.Context) GetCryptoKeysKeyVersionTemplateArrayOutput
}

type GetCryptoKeysKeyVersionTemplateArray []GetCryptoKeysKeyVersionTemplateInput

func (GetCryptoKeysKeyVersionTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeysKeyVersionTemplate)(nil)).Elem()
}

func (i GetCryptoKeysKeyVersionTemplateArray) ToGetCryptoKeysKeyVersionTemplateArrayOutput() GetCryptoKeysKeyVersionTemplateArrayOutput {
	return i.ToGetCryptoKeysKeyVersionTemplateArrayOutputWithContext(context.Background())
}

func (i GetCryptoKeysKeyVersionTemplateArray) ToGetCryptoKeysKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetCryptoKeysKeyVersionTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoKeysKeyVersionTemplateArrayOutput)
}

type GetCryptoKeysKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysKeyVersionTemplate)(nil)).Elem()
}

func (o GetCryptoKeysKeyVersionTemplateOutput) ToGetCryptoKeysKeyVersionTemplateOutput() GetCryptoKeysKeyVersionTemplateOutput {
	return o
}

func (o GetCryptoKeysKeyVersionTemplateOutput) ToGetCryptoKeysKeyVersionTemplateOutputWithContext(ctx context.Context) GetCryptoKeysKeyVersionTemplateOutput {
	return o
}

// The algorithm to use when creating a version based on this template.
// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
func (o GetCryptoKeysKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
func (o GetCryptoKeysKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysKeyVersionTemplate) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

type GetCryptoKeysKeyVersionTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysKeyVersionTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoKeysKeyVersionTemplate)(nil)).Elem()
}

func (o GetCryptoKeysKeyVersionTemplateArrayOutput) ToGetCryptoKeysKeyVersionTemplateArrayOutput() GetCryptoKeysKeyVersionTemplateArrayOutput {
	return o
}

func (o GetCryptoKeysKeyVersionTemplateArrayOutput) ToGetCryptoKeysKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetCryptoKeysKeyVersionTemplateArrayOutput {
	return o
}

func (o GetCryptoKeysKeyVersionTemplateArrayOutput) Index(i pulumi.IntInput) GetCryptoKeysKeyVersionTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoKeysKeyVersionTemplate {
		return vs[0].([]GetCryptoKeysKeyVersionTemplate)[vs[1].(int)]
	}).(GetCryptoKeysKeyVersionTemplateOutput)
}

type GetKMSCryptoKeyKeyAccessJustificationsPolicy struct {
	// The list of allowed reasons for access to this CryptoKey. Zero allowed
	// access reasons means all encrypt, decrypt, and sign operations for
	// this CryptoKey will fail.
	AllowedAccessReasons []string `pulumi:"allowedAccessReasons"`
}

// GetKMSCryptoKeyKeyAccessJustificationsPolicyInput is an input type that accepts GetKMSCryptoKeyKeyAccessJustificationsPolicyArgs and GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyKeyAccessJustificationsPolicyInput` via:
//
//	GetKMSCryptoKeyKeyAccessJustificationsPolicyArgs{...}
type GetKMSCryptoKeyKeyAccessJustificationsPolicyInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyKeyAccessJustificationsPolicyOutput() GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput
	ToGetKMSCryptoKeyKeyAccessJustificationsPolicyOutputWithContext(context.Context) GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput
}

type GetKMSCryptoKeyKeyAccessJustificationsPolicyArgs struct {
	// The list of allowed reasons for access to this CryptoKey. Zero allowed
	// access reasons means all encrypt, decrypt, and sign operations for
	// this CryptoKey will fail.
	AllowedAccessReasons pulumi.StringArrayInput `pulumi:"allowedAccessReasons"`
}

func (GetKMSCryptoKeyKeyAccessJustificationsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (i GetKMSCryptoKeyKeyAccessJustificationsPolicyArgs) ToGetKMSCryptoKeyKeyAccessJustificationsPolicyOutput() GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput {
	return i.ToGetKMSCryptoKeyKeyAccessJustificationsPolicyOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyKeyAccessJustificationsPolicyArgs) ToGetKMSCryptoKeyKeyAccessJustificationsPolicyOutputWithContext(ctx context.Context) GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput)
}

// GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayInput is an input type that accepts GetKMSCryptoKeyKeyAccessJustificationsPolicyArray and GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayInput` via:
//
//	GetKMSCryptoKeyKeyAccessJustificationsPolicyArray{ GetKMSCryptoKeyKeyAccessJustificationsPolicyArgs{...} }
type GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput() GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput
	ToGetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutputWithContext(context.Context) GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput
}

type GetKMSCryptoKeyKeyAccessJustificationsPolicyArray []GetKMSCryptoKeyKeyAccessJustificationsPolicyInput

func (GetKMSCryptoKeyKeyAccessJustificationsPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (i GetKMSCryptoKeyKeyAccessJustificationsPolicyArray) ToGetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput() GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput {
	return i.ToGetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyKeyAccessJustificationsPolicyArray) ToGetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput)
}

type GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (o GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput) ToGetKMSCryptoKeyKeyAccessJustificationsPolicyOutput() GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput {
	return o
}

func (o GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput) ToGetKMSCryptoKeyKeyAccessJustificationsPolicyOutputWithContext(ctx context.Context) GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput {
	return o
}

// The list of allowed reasons for access to this CryptoKey. Zero allowed
// access reasons means all encrypt, decrypt, and sign operations for
// this CryptoKey will fail.
func (o GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput) AllowedAccessReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyKeyAccessJustificationsPolicy) []string { return v.AllowedAccessReasons }).(pulumi.StringArrayOutput)
}

type GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyKeyAccessJustificationsPolicy)(nil)).Elem()
}

func (o GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput) ToGetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput() GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput {
	return o
}

func (o GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput) ToGetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput {
	return o
}

func (o GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput) Index(i pulumi.IntInput) GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKMSCryptoKeyKeyAccessJustificationsPolicy {
		return vs[0].([]GetKMSCryptoKeyKeyAccessJustificationsPolicy)[vs[1].(int)]
	}).(GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput)
}

type GetKMSCryptoKeyPrimary struct {
	// The CryptoKey's name.
	// A CryptoKey’s name belonging to the specified Google Cloud Platform KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
	Name string `pulumi:"name"`
	// The current state of the CryptoKeyVersion.
	State string `pulumi:"state"`
}

// GetKMSCryptoKeyPrimaryInput is an input type that accepts GetKMSCryptoKeyPrimaryArgs and GetKMSCryptoKeyPrimaryOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyPrimaryInput` via:
//
//	GetKMSCryptoKeyPrimaryArgs{...}
type GetKMSCryptoKeyPrimaryInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyPrimaryOutput() GetKMSCryptoKeyPrimaryOutput
	ToGetKMSCryptoKeyPrimaryOutputWithContext(context.Context) GetKMSCryptoKeyPrimaryOutput
}

type GetKMSCryptoKeyPrimaryArgs struct {
	// The CryptoKey's name.
	// A CryptoKey’s name belonging to the specified Google Cloud Platform KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
	Name pulumi.StringInput `pulumi:"name"`
	// The current state of the CryptoKeyVersion.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetKMSCryptoKeyPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyPrimary)(nil)).Elem()
}

func (i GetKMSCryptoKeyPrimaryArgs) ToGetKMSCryptoKeyPrimaryOutput() GetKMSCryptoKeyPrimaryOutput {
	return i.ToGetKMSCryptoKeyPrimaryOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyPrimaryArgs) ToGetKMSCryptoKeyPrimaryOutputWithContext(ctx context.Context) GetKMSCryptoKeyPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyPrimaryOutput)
}

// GetKMSCryptoKeyPrimaryArrayInput is an input type that accepts GetKMSCryptoKeyPrimaryArray and GetKMSCryptoKeyPrimaryArrayOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyPrimaryArrayInput` via:
//
//	GetKMSCryptoKeyPrimaryArray{ GetKMSCryptoKeyPrimaryArgs{...} }
type GetKMSCryptoKeyPrimaryArrayInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyPrimaryArrayOutput() GetKMSCryptoKeyPrimaryArrayOutput
	ToGetKMSCryptoKeyPrimaryArrayOutputWithContext(context.Context) GetKMSCryptoKeyPrimaryArrayOutput
}

type GetKMSCryptoKeyPrimaryArray []GetKMSCryptoKeyPrimaryInput

func (GetKMSCryptoKeyPrimaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyPrimary)(nil)).Elem()
}

func (i GetKMSCryptoKeyPrimaryArray) ToGetKMSCryptoKeyPrimaryArrayOutput() GetKMSCryptoKeyPrimaryArrayOutput {
	return i.ToGetKMSCryptoKeyPrimaryArrayOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyPrimaryArray) ToGetKMSCryptoKeyPrimaryArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyPrimaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyPrimaryArrayOutput)
}

type GetKMSCryptoKeyPrimaryOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyPrimary)(nil)).Elem()
}

func (o GetKMSCryptoKeyPrimaryOutput) ToGetKMSCryptoKeyPrimaryOutput() GetKMSCryptoKeyPrimaryOutput {
	return o
}

func (o GetKMSCryptoKeyPrimaryOutput) ToGetKMSCryptoKeyPrimaryOutputWithContext(ctx context.Context) GetKMSCryptoKeyPrimaryOutput {
	return o
}

// The CryptoKey's name.
// A CryptoKey’s name belonging to the specified Google Cloud Platform KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
func (o GetKMSCryptoKeyPrimaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyPrimary) string { return v.Name }).(pulumi.StringOutput)
}

// The current state of the CryptoKeyVersion.
func (o GetKMSCryptoKeyPrimaryOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyPrimary) string { return v.State }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyPrimaryArrayOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyPrimaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyPrimary)(nil)).Elem()
}

func (o GetKMSCryptoKeyPrimaryArrayOutput) ToGetKMSCryptoKeyPrimaryArrayOutput() GetKMSCryptoKeyPrimaryArrayOutput {
	return o
}

func (o GetKMSCryptoKeyPrimaryArrayOutput) ToGetKMSCryptoKeyPrimaryArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyPrimaryArrayOutput {
	return o
}

func (o GetKMSCryptoKeyPrimaryArrayOutput) Index(i pulumi.IntInput) GetKMSCryptoKeyPrimaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKMSCryptoKeyPrimary {
		return vs[0].([]GetKMSCryptoKeyPrimary)[vs[1].(int)]
	}).(GetKMSCryptoKeyPrimaryOutput)
}

type GetKMSCryptoKeyVersionPublicKey struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm string `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem string `pulumi:"pem"`
}

// GetKMSCryptoKeyVersionPublicKeyInput is an input type that accepts GetKMSCryptoKeyVersionPublicKeyArgs and GetKMSCryptoKeyVersionPublicKeyOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionPublicKeyInput` via:
//
//	GetKMSCryptoKeyVersionPublicKeyArgs{...}
type GetKMSCryptoKeyVersionPublicKeyInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput
	ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(context.Context) GetKMSCryptoKeyVersionPublicKeyOutput
}

type GetKMSCryptoKeyVersionPublicKeyArgs struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringInput `pulumi:"pem"`
}

func (GetKMSCryptoKeyVersionPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionPublicKeyArgs) ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput {
	return i.ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionPublicKeyArgs) ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionPublicKeyOutput)
}

// GetKMSCryptoKeyVersionPublicKeyArrayInput is an input type that accepts GetKMSCryptoKeyVersionPublicKeyArray and GetKMSCryptoKeyVersionPublicKeyArrayOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionPublicKeyArrayInput` via:
//
//	GetKMSCryptoKeyVersionPublicKeyArray{ GetKMSCryptoKeyVersionPublicKeyArgs{...} }
type GetKMSCryptoKeyVersionPublicKeyArrayInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionPublicKeyArrayOutput() GetKMSCryptoKeyVersionPublicKeyArrayOutput
	ToGetKMSCryptoKeyVersionPublicKeyArrayOutputWithContext(context.Context) GetKMSCryptoKeyVersionPublicKeyArrayOutput
}

type GetKMSCryptoKeyVersionPublicKeyArray []GetKMSCryptoKeyVersionPublicKeyInput

func (GetKMSCryptoKeyVersionPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionPublicKeyArray) ToGetKMSCryptoKeyVersionPublicKeyArrayOutput() GetKMSCryptoKeyVersionPublicKeyArrayOutput {
	return i.ToGetKMSCryptoKeyVersionPublicKeyArrayOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionPublicKeyArray) ToGetKMSCryptoKeyVersionPublicKeyArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionPublicKeyArrayOutput)
}

type GetKMSCryptoKeyVersionPublicKeyOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionPublicKeyOutput) ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput {
	return o
}

func (o GetKMSCryptoKeyVersionPublicKeyOutput) ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o GetKMSCryptoKeyVersionPublicKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionPublicKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
func (o GetKMSCryptoKeyVersionPublicKeyOutput) Pem() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionPublicKey) string { return v.Pem }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionPublicKeyArrayOutput) ToGetKMSCryptoKeyVersionPublicKeyArrayOutput() GetKMSCryptoKeyVersionPublicKeyArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionPublicKeyArrayOutput) ToGetKMSCryptoKeyVersionPublicKeyArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionPublicKeyArrayOutput) Index(i pulumi.IntInput) GetKMSCryptoKeyVersionPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKMSCryptoKeyVersionPublicKey {
		return vs[0].([]GetKMSCryptoKeyVersionPublicKey)[vs[1].(int)]
	}).(GetKMSCryptoKeyVersionPublicKeyOutput)
}

type GetKMSCryptoKeyVersionTemplate struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm string `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	ProtectionLevel string `pulumi:"protectionLevel"`
}

// GetKMSCryptoKeyVersionTemplateInput is an input type that accepts GetKMSCryptoKeyVersionTemplateArgs and GetKMSCryptoKeyVersionTemplateOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionTemplateInput` via:
//
//	GetKMSCryptoKeyVersionTemplateArgs{...}
type GetKMSCryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput
	ToGetKMSCryptoKeyVersionTemplateOutputWithContext(context.Context) GetKMSCryptoKeyVersionTemplateOutput
}

type GetKMSCryptoKeyVersionTemplateArgs struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
}

func (GetKMSCryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionTemplateArgs) ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput {
	return i.ToGetKMSCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionTemplateArgs) ToGetKMSCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionTemplateOutput)
}

// GetKMSCryptoKeyVersionTemplateArrayInput is an input type that accepts GetKMSCryptoKeyVersionTemplateArray and GetKMSCryptoKeyVersionTemplateArrayOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionTemplateArrayInput` via:
//
//	GetKMSCryptoKeyVersionTemplateArray{ GetKMSCryptoKeyVersionTemplateArgs{...} }
type GetKMSCryptoKeyVersionTemplateArrayInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput
	ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput
}

type GetKMSCryptoKeyVersionTemplateArray []GetKMSCryptoKeyVersionTemplateInput

func (GetKMSCryptoKeyVersionTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionTemplateArray) ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput {
	return i.ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionTemplateArray) ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionTemplateArrayOutput)
}

type GetKMSCryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ToGetKMSCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateOutput {
	return o
}

// The algorithm to use when creating a version based on this template.
// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
func (o GetKMSCryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
func (o GetKMSCryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionTemplate) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) Index(i pulumi.IntInput) GetKMSCryptoKeyVersionTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKMSCryptoKeyVersionTemplate {
		return vs[0].([]GetKMSCryptoKeyVersionTemplate)[vs[1].(int)]
	}).(GetKMSCryptoKeyVersionTemplateOutput)
}

type GetKeyHandlesKeyHandle struct {
	// The identifier of the KMS Key created for the KeyHandle. Its format is `projects/{projectId}/locations/{location}/keyRings/{keyRingName}/cryptoKeys/{cryptoKeyName}`.
	KmsKey string `pulumi:"kmsKey"`
	// The name of the KeyHandle. Its format is `projects/{projectId}/locations/{location}/keyHandles/{keyHandleName}`.
	Name string `pulumi:"name"`
	// The resource type by which to filter KeyHandle e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
	//
	// ***
	ResourceTypeSelector string `pulumi:"resourceTypeSelector"`
}

// GetKeyHandlesKeyHandleInput is an input type that accepts GetKeyHandlesKeyHandleArgs and GetKeyHandlesKeyHandleOutput values.
// You can construct a concrete instance of `GetKeyHandlesKeyHandleInput` via:
//
//	GetKeyHandlesKeyHandleArgs{...}
type GetKeyHandlesKeyHandleInput interface {
	pulumi.Input

	ToGetKeyHandlesKeyHandleOutput() GetKeyHandlesKeyHandleOutput
	ToGetKeyHandlesKeyHandleOutputWithContext(context.Context) GetKeyHandlesKeyHandleOutput
}

type GetKeyHandlesKeyHandleArgs struct {
	// The identifier of the KMS Key created for the KeyHandle. Its format is `projects/{projectId}/locations/{location}/keyRings/{keyRingName}/cryptoKeys/{cryptoKeyName}`.
	KmsKey pulumi.StringInput `pulumi:"kmsKey"`
	// The name of the KeyHandle. Its format is `projects/{projectId}/locations/{location}/keyHandles/{keyHandleName}`.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource type by which to filter KeyHandle e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
	//
	// ***
	ResourceTypeSelector pulumi.StringInput `pulumi:"resourceTypeSelector"`
}

func (GetKeyHandlesKeyHandleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyHandlesKeyHandle)(nil)).Elem()
}

func (i GetKeyHandlesKeyHandleArgs) ToGetKeyHandlesKeyHandleOutput() GetKeyHandlesKeyHandleOutput {
	return i.ToGetKeyHandlesKeyHandleOutputWithContext(context.Background())
}

func (i GetKeyHandlesKeyHandleArgs) ToGetKeyHandlesKeyHandleOutputWithContext(ctx context.Context) GetKeyHandlesKeyHandleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyHandlesKeyHandleOutput)
}

// GetKeyHandlesKeyHandleArrayInput is an input type that accepts GetKeyHandlesKeyHandleArray and GetKeyHandlesKeyHandleArrayOutput values.
// You can construct a concrete instance of `GetKeyHandlesKeyHandleArrayInput` via:
//
//	GetKeyHandlesKeyHandleArray{ GetKeyHandlesKeyHandleArgs{...} }
type GetKeyHandlesKeyHandleArrayInput interface {
	pulumi.Input

	ToGetKeyHandlesKeyHandleArrayOutput() GetKeyHandlesKeyHandleArrayOutput
	ToGetKeyHandlesKeyHandleArrayOutputWithContext(context.Context) GetKeyHandlesKeyHandleArrayOutput
}

type GetKeyHandlesKeyHandleArray []GetKeyHandlesKeyHandleInput

func (GetKeyHandlesKeyHandleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyHandlesKeyHandle)(nil)).Elem()
}

func (i GetKeyHandlesKeyHandleArray) ToGetKeyHandlesKeyHandleArrayOutput() GetKeyHandlesKeyHandleArrayOutput {
	return i.ToGetKeyHandlesKeyHandleArrayOutputWithContext(context.Background())
}

func (i GetKeyHandlesKeyHandleArray) ToGetKeyHandlesKeyHandleArrayOutputWithContext(ctx context.Context) GetKeyHandlesKeyHandleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyHandlesKeyHandleArrayOutput)
}

type GetKeyHandlesKeyHandleOutput struct{ *pulumi.OutputState }

func (GetKeyHandlesKeyHandleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyHandlesKeyHandle)(nil)).Elem()
}

func (o GetKeyHandlesKeyHandleOutput) ToGetKeyHandlesKeyHandleOutput() GetKeyHandlesKeyHandleOutput {
	return o
}

func (o GetKeyHandlesKeyHandleOutput) ToGetKeyHandlesKeyHandleOutputWithContext(ctx context.Context) GetKeyHandlesKeyHandleOutput {
	return o
}

// The identifier of the KMS Key created for the KeyHandle. Its format is `projects/{projectId}/locations/{location}/keyRings/{keyRingName}/cryptoKeys/{cryptoKeyName}`.
func (o GetKeyHandlesKeyHandleOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyHandlesKeyHandle) string { return v.KmsKey }).(pulumi.StringOutput)
}

// The name of the KeyHandle. Its format is `projects/{projectId}/locations/{location}/keyHandles/{keyHandleName}`.
func (o GetKeyHandlesKeyHandleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyHandlesKeyHandle) string { return v.Name }).(pulumi.StringOutput)
}

// The resource type by which to filter KeyHandle e.g. {SERVICE}.googleapis.com/{TYPE}. See documentation for supported resource types.
//
// ***
func (o GetKeyHandlesKeyHandleOutput) ResourceTypeSelector() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyHandlesKeyHandle) string { return v.ResourceTypeSelector }).(pulumi.StringOutput)
}

type GetKeyHandlesKeyHandleArrayOutput struct{ *pulumi.OutputState }

func (GetKeyHandlesKeyHandleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyHandlesKeyHandle)(nil)).Elem()
}

func (o GetKeyHandlesKeyHandleArrayOutput) ToGetKeyHandlesKeyHandleArrayOutput() GetKeyHandlesKeyHandleArrayOutput {
	return o
}

func (o GetKeyHandlesKeyHandleArrayOutput) ToGetKeyHandlesKeyHandleArrayOutputWithContext(ctx context.Context) GetKeyHandlesKeyHandleArrayOutput {
	return o
}

func (o GetKeyHandlesKeyHandleArrayOutput) Index(i pulumi.IntInput) GetKeyHandlesKeyHandleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeyHandlesKeyHandle {
		return vs[0].([]GetKeyHandlesKeyHandle)[vs[1].(int)]
	}).(GetKeyHandlesKeyHandleOutput)
}

type GetKeyRingsKeyRing struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetKeyRingsKeyRingInput is an input type that accepts GetKeyRingsKeyRingArgs and GetKeyRingsKeyRingOutput values.
// You can construct a concrete instance of `GetKeyRingsKeyRingInput` via:
//
//	GetKeyRingsKeyRingArgs{...}
type GetKeyRingsKeyRingInput interface {
	pulumi.Input

	ToGetKeyRingsKeyRingOutput() GetKeyRingsKeyRingOutput
	ToGetKeyRingsKeyRingOutputWithContext(context.Context) GetKeyRingsKeyRingOutput
}

type GetKeyRingsKeyRingArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetKeyRingsKeyRingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyRingsKeyRing)(nil)).Elem()
}

func (i GetKeyRingsKeyRingArgs) ToGetKeyRingsKeyRingOutput() GetKeyRingsKeyRingOutput {
	return i.ToGetKeyRingsKeyRingOutputWithContext(context.Background())
}

func (i GetKeyRingsKeyRingArgs) ToGetKeyRingsKeyRingOutputWithContext(ctx context.Context) GetKeyRingsKeyRingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyRingsKeyRingOutput)
}

// GetKeyRingsKeyRingArrayInput is an input type that accepts GetKeyRingsKeyRingArray and GetKeyRingsKeyRingArrayOutput values.
// You can construct a concrete instance of `GetKeyRingsKeyRingArrayInput` via:
//
//	GetKeyRingsKeyRingArray{ GetKeyRingsKeyRingArgs{...} }
type GetKeyRingsKeyRingArrayInput interface {
	pulumi.Input

	ToGetKeyRingsKeyRingArrayOutput() GetKeyRingsKeyRingArrayOutput
	ToGetKeyRingsKeyRingArrayOutputWithContext(context.Context) GetKeyRingsKeyRingArrayOutput
}

type GetKeyRingsKeyRingArray []GetKeyRingsKeyRingInput

func (GetKeyRingsKeyRingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyRingsKeyRing)(nil)).Elem()
}

func (i GetKeyRingsKeyRingArray) ToGetKeyRingsKeyRingArrayOutput() GetKeyRingsKeyRingArrayOutput {
	return i.ToGetKeyRingsKeyRingArrayOutputWithContext(context.Background())
}

func (i GetKeyRingsKeyRingArray) ToGetKeyRingsKeyRingArrayOutputWithContext(ctx context.Context) GetKeyRingsKeyRingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyRingsKeyRingArrayOutput)
}

type GetKeyRingsKeyRingOutput struct{ *pulumi.OutputState }

func (GetKeyRingsKeyRingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyRingsKeyRing)(nil)).Elem()
}

func (o GetKeyRingsKeyRingOutput) ToGetKeyRingsKeyRingOutput() GetKeyRingsKeyRingOutput {
	return o
}

func (o GetKeyRingsKeyRingOutput) ToGetKeyRingsKeyRingOutputWithContext(ctx context.Context) GetKeyRingsKeyRingOutput {
	return o
}

func (o GetKeyRingsKeyRingOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyRingsKeyRing) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetKeyRingsKeyRingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyRingsKeyRing) string { return v.Name }).(pulumi.StringOutput)
}

type GetKeyRingsKeyRingArrayOutput struct{ *pulumi.OutputState }

func (GetKeyRingsKeyRingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyRingsKeyRing)(nil)).Elem()
}

func (o GetKeyRingsKeyRingArrayOutput) ToGetKeyRingsKeyRingArrayOutput() GetKeyRingsKeyRingArrayOutput {
	return o
}

func (o GetKeyRingsKeyRingArrayOutput) ToGetKeyRingsKeyRingArrayOutputWithContext(ctx context.Context) GetKeyRingsKeyRingArrayOutput {
	return o
}

func (o GetKeyRingsKeyRingArrayOutput) Index(i pulumi.IntInput) GetKeyRingsKeyRingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeyRingsKeyRing {
		return vs[0].([]GetKeyRingsKeyRing)[vs[1].(int)]
	}).(GetKeyRingsKeyRingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIAMBindingConditionInput)(nil)).Elem(), CryptoKeyIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIAMBindingConditionPtrInput)(nil)).Elem(), CryptoKeyIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIAMMemberConditionInput)(nil)).Elem(), CryptoKeyIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIAMMemberConditionPtrInput)(nil)).Elem(), CryptoKeyIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyKeyAccessJustificationsPolicyInput)(nil)).Elem(), CryptoKeyKeyAccessJustificationsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyKeyAccessJustificationsPolicyPtrInput)(nil)).Elem(), CryptoKeyKeyAccessJustificationsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyPrimaryInput)(nil)).Elem(), CryptoKeyPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyPrimaryArrayInput)(nil)).Elem(), CryptoKeyPrimaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationInput)(nil)).Elem(), CryptoKeyVersionAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationArrayInput)(nil)).Elem(), CryptoKeyVersionAttestationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationCertChainsInput)(nil)).Elem(), CryptoKeyVersionAttestationCertChainsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationCertChainsPtrInput)(nil)).Elem(), CryptoKeyVersionAttestationCertChainsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationExternalProtectionLevelOptionsInput)(nil)).Elem(), CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput)(nil)).Elem(), CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionExternalProtectionLevelOptionsInput)(nil)).Elem(), CryptoKeyVersionExternalProtectionLevelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionExternalProtectionLevelOptionsPtrInput)(nil)).Elem(), CryptoKeyVersionExternalProtectionLevelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionTemplateInput)(nil)).Elem(), CryptoKeyVersionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionTemplatePtrInput)(nil)).Elem(), CryptoKeyVersionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionIamBindingConditionInput)(nil)).Elem(), EkmConnectionIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionIamBindingConditionPtrInput)(nil)).Elem(), EkmConnectionIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionIamMemberConditionInput)(nil)).Elem(), EkmConnectionIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionIamMemberConditionPtrInput)(nil)).Elem(), EkmConnectionIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionServiceResolverInput)(nil)).Elem(), EkmConnectionServiceResolverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionServiceResolverArrayInput)(nil)).Elem(), EkmConnectionServiceResolverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionServiceResolverServerCertificateInput)(nil)).Elem(), EkmConnectionServiceResolverServerCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionServiceResolverServerCertificateArrayInput)(nil)).Elem(), EkmConnectionServiceResolverServerCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyInput)(nil)).Elem(), FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput)(nil)).Elem(), FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIAMBindingConditionInput)(nil)).Elem(), KeyRingIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIAMBindingConditionPtrInput)(nil)).Elem(), KeyRingIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIAMMemberConditionInput)(nil)).Elem(), KeyRingIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIAMMemberConditionPtrInput)(nil)).Elem(), KeyRingIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingImportJobAttestationInput)(nil)).Elem(), KeyRingImportJobAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingImportJobAttestationArrayInput)(nil)).Elem(), KeyRingImportJobAttestationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingImportJobPublicKeyInput)(nil)).Elem(), KeyRingImportJobPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingImportJobPublicKeyArrayInput)(nil)).Elem(), KeyRingImportJobPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyInput)(nil)).Elem(), OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput)(nil)).Elem(), OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyInput)(nil)).Elem(), ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput)(nil)).Elem(), ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeyLatestVersionPublicKeyInput)(nil)).Elem(), GetCryptoKeyLatestVersionPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeyLatestVersionPublicKeyArrayInput)(nil)).Elem(), GetCryptoKeyLatestVersionPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeyVersionsPublicKeyInput)(nil)).Elem(), GetCryptoKeyVersionsPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeyVersionsPublicKeyArrayInput)(nil)).Elem(), GetCryptoKeyVersionsPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeyVersionsVersionInput)(nil)).Elem(), GetCryptoKeyVersionsVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeyVersionsVersionArrayInput)(nil)).Elem(), GetCryptoKeyVersionsVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeyVersionsVersionPublicKeyInput)(nil)).Elem(), GetCryptoKeyVersionsVersionPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeyVersionsVersionPublicKeyArrayInput)(nil)).Elem(), GetCryptoKeyVersionsVersionPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeysKeyInput)(nil)).Elem(), GetCryptoKeysKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeysKeyArrayInput)(nil)).Elem(), GetCryptoKeysKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeysKeyKeyAccessJustificationsPolicyInput)(nil)).Elem(), GetCryptoKeysKeyKeyAccessJustificationsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayInput)(nil)).Elem(), GetCryptoKeysKeyKeyAccessJustificationsPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeysKeyPrimaryInput)(nil)).Elem(), GetCryptoKeysKeyPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeysKeyPrimaryArrayInput)(nil)).Elem(), GetCryptoKeysKeyPrimaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeysKeyVersionTemplateInput)(nil)).Elem(), GetCryptoKeysKeyVersionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoKeysKeyVersionTemplateArrayInput)(nil)).Elem(), GetCryptoKeysKeyVersionTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyKeyAccessJustificationsPolicyInput)(nil)).Elem(), GetKMSCryptoKeyKeyAccessJustificationsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayInput)(nil)).Elem(), GetKMSCryptoKeyKeyAccessJustificationsPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyPrimaryInput)(nil)).Elem(), GetKMSCryptoKeyPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyPrimaryArrayInput)(nil)).Elem(), GetKMSCryptoKeyPrimaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKeyInput)(nil)).Elem(), GetKMSCryptoKeyVersionPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKeyArrayInput)(nil)).Elem(), GetKMSCryptoKeyVersionPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyVersionTemplateInput)(nil)).Elem(), GetKMSCryptoKeyVersionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyVersionTemplateArrayInput)(nil)).Elem(), GetKMSCryptoKeyVersionTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyHandlesKeyHandleInput)(nil)).Elem(), GetKeyHandlesKeyHandleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyHandlesKeyHandleArrayInput)(nil)).Elem(), GetKeyHandlesKeyHandleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyRingsKeyRingInput)(nil)).Elem(), GetKeyRingsKeyRingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyRingsKeyRingArrayInput)(nil)).Elem(), GetKeyRingsKeyRingArray{})
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyKeyAccessJustificationsPolicyOutput{})
	pulumi.RegisterOutputType(CryptoKeyKeyAccessJustificationsPolicyPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyPrimaryOutput{})
	pulumi.RegisterOutputType(CryptoKeyPrimaryArrayOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationArrayOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationCertChainsOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationCertChainsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionExternalProtectionLevelOptionsOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionExternalProtectionLevelOptionsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplatePtrOutput{})
	pulumi.RegisterOutputType(EkmConnectionIamBindingConditionOutput{})
	pulumi.RegisterOutputType(EkmConnectionIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(EkmConnectionIamMemberConditionOutput{})
	pulumi.RegisterOutputType(EkmConnectionIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(EkmConnectionServiceResolverOutput{})
	pulumi.RegisterOutputType(EkmConnectionServiceResolverArrayOutput{})
	pulumi.RegisterOutputType(EkmConnectionServiceResolverServerCertificateOutput{})
	pulumi.RegisterOutputType(EkmConnectionServiceResolverServerCertificateArrayOutput{})
	pulumi.RegisterOutputType(FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput{})
	pulumi.RegisterOutputType(FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(KeyRingImportJobAttestationOutput{})
	pulumi.RegisterOutputType(KeyRingImportJobAttestationArrayOutput{})
	pulumi.RegisterOutputType(KeyRingImportJobPublicKeyOutput{})
	pulumi.RegisterOutputType(KeyRingImportJobPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput{})
	pulumi.RegisterOutputType(OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput{})
	pulumi.RegisterOutputType(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyOutput{})
	pulumi.RegisterOutputType(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput{})
	pulumi.RegisterOutputType(GetCryptoKeyLatestVersionPublicKeyOutput{})
	pulumi.RegisterOutputType(GetCryptoKeyLatestVersionPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoKeyVersionsPublicKeyOutput{})
	pulumi.RegisterOutputType(GetCryptoKeyVersionsPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoKeyVersionsVersionOutput{})
	pulumi.RegisterOutputType(GetCryptoKeyVersionsVersionArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoKeyVersionsVersionPublicKeyOutput{})
	pulumi.RegisterOutputType(GetCryptoKeyVersionsVersionPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoKeysKeyOutput{})
	pulumi.RegisterOutputType(GetCryptoKeysKeyArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoKeysKeyKeyAccessJustificationsPolicyOutput{})
	pulumi.RegisterOutputType(GetCryptoKeysKeyKeyAccessJustificationsPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoKeysKeyPrimaryOutput{})
	pulumi.RegisterOutputType(GetCryptoKeysKeyPrimaryArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoKeysKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(GetCryptoKeysKeyVersionTemplateArrayOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyKeyAccessJustificationsPolicyOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyKeyAccessJustificationsPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyPrimaryOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyPrimaryArrayOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionPublicKeyOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionTemplateArrayOutput{})
	pulumi.RegisterOutputType(GetKeyHandlesKeyHandleOutput{})
	pulumi.RegisterOutputType(GetKeyHandlesKeyHandleArrayOutput{})
	pulumi.RegisterOutputType(GetKeyRingsKeyRingOutput{})
	pulumi.RegisterOutputType(GetKeyRingsKeyRingArrayOutput{})
}
