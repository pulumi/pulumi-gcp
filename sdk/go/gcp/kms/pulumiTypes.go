// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type CryptoKeyIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// CryptoKeyIAMBindingConditionInput is an input type that accepts CryptoKeyIAMBindingConditionArgs and CryptoKeyIAMBindingConditionOutput values.
// You can construct a concrete instance of `CryptoKeyIAMBindingConditionInput` via:
//
// 		 CryptoKeyIAMBindingConditionArgs{...}
//
type CryptoKeyIAMBindingConditionInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput
	ToCryptoKeyIAMBindingConditionOutputWithContext(context.Context) CryptoKeyIAMBindingConditionOutput
}

type CryptoKeyIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput {
	return i.ToCryptoKeyIAMBindingConditionOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionOutput)
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return i.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionOutput).ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx)
}

// CryptoKeyIAMBindingConditionPtrInput is an input type that accepts CryptoKeyIAMBindingConditionArgs, CryptoKeyIAMBindingConditionPtr and CryptoKeyIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `CryptoKeyIAMBindingConditionPtrInput` via:
//
// 		 CryptoKeyIAMBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type CryptoKeyIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput
	ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Context) CryptoKeyIAMBindingConditionPtrOutput
}

type cryptoKeyIAMBindingConditionPtrType CryptoKeyIAMBindingConditionArgs

func CryptoKeyIAMBindingConditionPtr(v *CryptoKeyIAMBindingConditionArgs) CryptoKeyIAMBindingConditionPtrInput {
	return (*cryptoKeyIAMBindingConditionPtrType)(v)
}

func (*cryptoKeyIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (i *cryptoKeyIAMBindingConditionPtrType) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return i.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIAMBindingConditionPtrType) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionPtrOutput)
}

type CryptoKeyIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return o.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) *CryptoKeyIAMBindingCondition {
		return &v
	}).(CryptoKeyIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionPtrOutput) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionPtrOutput) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionPtrOutput) Elem() CryptoKeyIAMBindingConditionOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) CryptoKeyIAMBindingCondition { return *v }).(CryptoKeyIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// CryptoKeyIAMMemberConditionInput is an input type that accepts CryptoKeyIAMMemberConditionArgs and CryptoKeyIAMMemberConditionOutput values.
// You can construct a concrete instance of `CryptoKeyIAMMemberConditionInput` via:
//
// 		 CryptoKeyIAMMemberConditionArgs{...}
//
type CryptoKeyIAMMemberConditionInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput
	ToCryptoKeyIAMMemberConditionOutputWithContext(context.Context) CryptoKeyIAMMemberConditionOutput
}

type CryptoKeyIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput {
	return i.ToCryptoKeyIAMMemberConditionOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionOutput)
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return i.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionOutput).ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx)
}

// CryptoKeyIAMMemberConditionPtrInput is an input type that accepts CryptoKeyIAMMemberConditionArgs, CryptoKeyIAMMemberConditionPtr and CryptoKeyIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `CryptoKeyIAMMemberConditionPtrInput` via:
//
// 		 CryptoKeyIAMMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type CryptoKeyIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput
	ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Context) CryptoKeyIAMMemberConditionPtrOutput
}

type cryptoKeyIAMMemberConditionPtrType CryptoKeyIAMMemberConditionArgs

func CryptoKeyIAMMemberConditionPtr(v *CryptoKeyIAMMemberConditionArgs) CryptoKeyIAMMemberConditionPtrInput {
	return (*cryptoKeyIAMMemberConditionPtrType)(v)
}

func (*cryptoKeyIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (i *cryptoKeyIAMMemberConditionPtrType) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return i.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIAMMemberConditionPtrType) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionPtrOutput)
}

type CryptoKeyIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return o.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) *CryptoKeyIAMMemberCondition {
		return &v
	}).(CryptoKeyIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionPtrOutput) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionPtrOutput) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionPtrOutput) Elem() CryptoKeyIAMMemberConditionOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) CryptoKeyIAMMemberCondition { return *v }).(CryptoKeyIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplate struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm string `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template.
	ProtectionLevel *string `pulumi:"protectionLevel"`
}

// CryptoKeyVersionTemplateInput is an input type that accepts CryptoKeyVersionTemplateArgs and CryptoKeyVersionTemplateOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplateInput` via:
//
// 		 CryptoKeyVersionTemplateArgs{...}
//
type CryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput
	ToCryptoKeyVersionTemplateOutputWithContext(context.Context) CryptoKeyVersionTemplateOutput
}

type CryptoKeyVersionTemplateArgs struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template.
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
}

func (CryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return i.ToCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput)
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput).ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx)
}

// CryptoKeyVersionTemplatePtrInput is an input type that accepts CryptoKeyVersionTemplateArgs, CryptoKeyVersionTemplatePtr and CryptoKeyVersionTemplatePtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplatePtrInput` via:
//
// 		 CryptoKeyVersionTemplateArgs{...}
//
//  or:
//
// 		 nil
//
type CryptoKeyVersionTemplatePtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput
	ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Context) CryptoKeyVersionTemplatePtrOutput
}

type cryptoKeyVersionTemplatePtrType CryptoKeyVersionTemplateArgs

func CryptoKeyVersionTemplatePtr(v *CryptoKeyVersionTemplateArgs) CryptoKeyVersionTemplatePtrInput {
	return (*cryptoKeyVersionTemplatePtrType)(v)
}

func (*cryptoKeyVersionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplatePtrOutput)
}

type CryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *CryptoKeyVersionTemplate {
		return &v
	}).(CryptoKeyVersionTemplatePtrOutput)
}

// The algorithm to use when creating a version based on this template.
// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
func (o CryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The protection level to use when creating a version based on this template.
func (o CryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplatePtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) Elem() CryptoKeyVersionTemplateOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) CryptoKeyVersionTemplate { return *v }).(CryptoKeyVersionTemplateOutput)
}

// The algorithm to use when creating a version based on this template.
// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
func (o CryptoKeyVersionTemplatePtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// The protection level to use when creating a version based on this template.
func (o CryptoKeyVersionTemplatePtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionLevel
	}).(pulumi.StringPtrOutput)
}

type KeyRingIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// KeyRingIAMBindingConditionInput is an input type that accepts KeyRingIAMBindingConditionArgs and KeyRingIAMBindingConditionOutput values.
// You can construct a concrete instance of `KeyRingIAMBindingConditionInput` via:
//
// 		 KeyRingIAMBindingConditionArgs{...}
//
type KeyRingIAMBindingConditionInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput
	ToKeyRingIAMBindingConditionOutputWithContext(context.Context) KeyRingIAMBindingConditionOutput
}

type KeyRingIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingCondition)(nil)).Elem()
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput {
	return i.ToKeyRingIAMBindingConditionOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionOutput)
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return i.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionOutput).ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx)
}

// KeyRingIAMBindingConditionPtrInput is an input type that accepts KeyRingIAMBindingConditionArgs, KeyRingIAMBindingConditionPtr and KeyRingIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `KeyRingIAMBindingConditionPtrInput` via:
//
// 		 KeyRingIAMBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type KeyRingIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput
	ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Context) KeyRingIAMBindingConditionPtrOutput
}

type keyRingIAMBindingConditionPtrType KeyRingIAMBindingConditionArgs

func KeyRingIAMBindingConditionPtr(v *KeyRingIAMBindingConditionArgs) KeyRingIAMBindingConditionPtrInput {
	return (*keyRingIAMBindingConditionPtrType)(v)
}

func (*keyRingIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMBindingCondition)(nil)).Elem()
}

func (i *keyRingIAMBindingConditionPtrType) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return i.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *keyRingIAMBindingConditionPtrType) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionPtrOutput)
}

type KeyRingIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingCondition)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput {
	return o
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionOutput {
	return o
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return o.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) *KeyRingIAMBindingCondition {
		return &v
	}).(KeyRingIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMBindingCondition)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionPtrOutput) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return o
}

func (o KeyRingIAMBindingConditionPtrOutput) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return o
}

func (o KeyRingIAMBindingConditionPtrOutput) Elem() KeyRingIAMBindingConditionOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) KeyRingIAMBindingCondition { return *v }).(KeyRingIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type KeyRingIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// KeyRingIAMMemberConditionInput is an input type that accepts KeyRingIAMMemberConditionArgs and KeyRingIAMMemberConditionOutput values.
// You can construct a concrete instance of `KeyRingIAMMemberConditionInput` via:
//
// 		 KeyRingIAMMemberConditionArgs{...}
//
type KeyRingIAMMemberConditionInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput
	ToKeyRingIAMMemberConditionOutputWithContext(context.Context) KeyRingIAMMemberConditionOutput
}

type KeyRingIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberCondition)(nil)).Elem()
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput {
	return i.ToKeyRingIAMMemberConditionOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionOutput)
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return i.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionOutput).ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx)
}

// KeyRingIAMMemberConditionPtrInput is an input type that accepts KeyRingIAMMemberConditionArgs, KeyRingIAMMemberConditionPtr and KeyRingIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `KeyRingIAMMemberConditionPtrInput` via:
//
// 		 KeyRingIAMMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type KeyRingIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput
	ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Context) KeyRingIAMMemberConditionPtrOutput
}

type keyRingIAMMemberConditionPtrType KeyRingIAMMemberConditionArgs

func KeyRingIAMMemberConditionPtr(v *KeyRingIAMMemberConditionArgs) KeyRingIAMMemberConditionPtrInput {
	return (*keyRingIAMMemberConditionPtrType)(v)
}

func (*keyRingIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMMemberCondition)(nil)).Elem()
}

func (i *keyRingIAMMemberConditionPtrType) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return i.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *keyRingIAMMemberConditionPtrType) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionPtrOutput)
}

type KeyRingIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberCondition)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput {
	return o
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionOutput {
	return o
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return o.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) *KeyRingIAMMemberCondition {
		return &v
	}).(KeyRingIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMMemberCondition)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionPtrOutput) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return o
}

func (o KeyRingIAMMemberConditionPtrOutput) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return o
}

func (o KeyRingIAMMemberConditionPtrOutput) Elem() KeyRingIAMMemberConditionOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) KeyRingIAMMemberCondition { return *v }).(KeyRingIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RegistryCredential struct {
	PublicKeyCertificate RegistryCredentialPublicKeyCertificate `pulumi:"publicKeyCertificate"`
}

// RegistryCredentialInput is an input type that accepts RegistryCredentialArgs and RegistryCredentialOutput values.
// You can construct a concrete instance of `RegistryCredentialInput` via:
//
// 		 RegistryCredentialArgs{...}
//
type RegistryCredentialInput interface {
	pulumi.Input

	ToRegistryCredentialOutput() RegistryCredentialOutput
	ToRegistryCredentialOutputWithContext(context.Context) RegistryCredentialOutput
}

type RegistryCredentialArgs struct {
	PublicKeyCertificate RegistryCredentialPublicKeyCertificateInput `pulumi:"publicKeyCertificate"`
}

func (RegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return i.ToRegistryCredentialOutputWithContext(context.Background())
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialOutput)
}

// RegistryCredentialArrayInput is an input type that accepts RegistryCredentialArray and RegistryCredentialArrayOutput values.
// You can construct a concrete instance of `RegistryCredentialArrayInput` via:
//
// 		 RegistryCredentialArray{ RegistryCredentialArgs{...} }
//
type RegistryCredentialArrayInput interface {
	pulumi.Input

	ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput
	ToRegistryCredentialArrayOutputWithContext(context.Context) RegistryCredentialArrayOutput
}

type RegistryCredentialArray []RegistryCredentialInput

func (RegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return i.ToRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialArrayOutput)
}

type RegistryCredentialOutput struct{ *pulumi.OutputState }

func (RegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) PublicKeyCertificate() RegistryCredentialPublicKeyCertificateOutput {
	return o.ApplyT(func(v RegistryCredential) RegistryCredentialPublicKeyCertificate { return v.PublicKeyCertificate }).(RegistryCredentialPublicKeyCertificateOutput)
}

type RegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) Index(i pulumi.IntInput) RegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredential {
		return vs[0].([]RegistryCredential)[vs[1].(int)]
	}).(RegistryCredentialOutput)
}

type RegistryCredentialPublicKeyCertificate struct {
	Certificate string `pulumi:"certificate"`
	Format      string `pulumi:"format"`
}

// RegistryCredentialPublicKeyCertificateInput is an input type that accepts RegistryCredentialPublicKeyCertificateArgs and RegistryCredentialPublicKeyCertificateOutput values.
// You can construct a concrete instance of `RegistryCredentialPublicKeyCertificateInput` via:
//
// 		 RegistryCredentialPublicKeyCertificateArgs{...}
//
type RegistryCredentialPublicKeyCertificateInput interface {
	pulumi.Input

	ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput
	ToRegistryCredentialPublicKeyCertificateOutputWithContext(context.Context) RegistryCredentialPublicKeyCertificateOutput
}

type RegistryCredentialPublicKeyCertificateArgs struct {
	Certificate pulumi.StringInput `pulumi:"certificate"`
	Format      pulumi.StringInput `pulumi:"format"`
}

func (RegistryCredentialPublicKeyCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificate)(nil)).Elem()
}

func (i RegistryCredentialPublicKeyCertificateArgs) ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput {
	return i.ToRegistryCredentialPublicKeyCertificateOutputWithContext(context.Background())
}

func (i RegistryCredentialPublicKeyCertificateArgs) ToRegistryCredentialPublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialPublicKeyCertificateOutput)
}

type RegistryCredentialPublicKeyCertificateOutput struct{ *pulumi.OutputState }

func (RegistryCredentialPublicKeyCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificate)(nil)).Elem()
}

func (o RegistryCredentialPublicKeyCertificateOutput) ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput {
	return o
}

func (o RegistryCredentialPublicKeyCertificateOutput) ToRegistryCredentialPublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateOutput {
	return o
}

func (o RegistryCredentialPublicKeyCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificate) string { return v.Certificate }).(pulumi.StringOutput)
}

func (o RegistryCredentialPublicKeyCertificateOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificate) string { return v.Format }).(pulumi.StringOutput)
}

type RegistryEventNotificationConfigItem struct {
	PubsubTopicName  string  `pulumi:"pubsubTopicName"`
	SubfolderMatches *string `pulumi:"subfolderMatches"`
}

// RegistryEventNotificationConfigItemInput is an input type that accepts RegistryEventNotificationConfigItemArgs and RegistryEventNotificationConfigItemOutput values.
// You can construct a concrete instance of `RegistryEventNotificationConfigItemInput` via:
//
// 		 RegistryEventNotificationConfigItemArgs{...}
//
type RegistryEventNotificationConfigItemInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput
	ToRegistryEventNotificationConfigItemOutputWithContext(context.Context) RegistryEventNotificationConfigItemOutput
}

type RegistryEventNotificationConfigItemArgs struct {
	PubsubTopicName  pulumi.StringInput    `pulumi:"pubsubTopicName"`
	SubfolderMatches pulumi.StringPtrInput `pulumi:"subfolderMatches"`
}

func (RegistryEventNotificationConfigItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return i.ToRegistryEventNotificationConfigItemOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemOutput)
}

// RegistryEventNotificationConfigItemArrayInput is an input type that accepts RegistryEventNotificationConfigItemArray and RegistryEventNotificationConfigItemArrayOutput values.
// You can construct a concrete instance of `RegistryEventNotificationConfigItemArrayInput` via:
//
// 		 RegistryEventNotificationConfigItemArray{ RegistryEventNotificationConfigItemArgs{...} }
//
type RegistryEventNotificationConfigItemArrayInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput
	ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Context) RegistryEventNotificationConfigItemArrayOutput
}

type RegistryEventNotificationConfigItemArray []RegistryEventNotificationConfigItemInput

func (RegistryEventNotificationConfigItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return i.ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemArrayOutput)
}

type RegistryEventNotificationConfigItemOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return o
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return o
}

func (o RegistryEventNotificationConfigItemOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

func (o RegistryEventNotificationConfigItemOutput) SubfolderMatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) *string { return v.SubfolderMatches }).(pulumi.StringPtrOutput)
}

type RegistryEventNotificationConfigItemArrayOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) Index(i pulumi.IntInput) RegistryEventNotificationConfigItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryEventNotificationConfigItem {
		return vs[0].([]RegistryEventNotificationConfigItem)[vs[1].(int)]
	}).(RegistryEventNotificationConfigItemOutput)
}

type RegistryHttpConfig struct {
	HttpEnabledState string `pulumi:"httpEnabledState"`
}

// RegistryHttpConfigInput is an input type that accepts RegistryHttpConfigArgs and RegistryHttpConfigOutput values.
// You can construct a concrete instance of `RegistryHttpConfigInput` via:
//
// 		 RegistryHttpConfigArgs{...}
//
type RegistryHttpConfigInput interface {
	pulumi.Input

	ToRegistryHttpConfigOutput() RegistryHttpConfigOutput
	ToRegistryHttpConfigOutputWithContext(context.Context) RegistryHttpConfigOutput
}

type RegistryHttpConfigArgs struct {
	HttpEnabledState pulumi.StringInput `pulumi:"httpEnabledState"`
}

func (RegistryHttpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfig)(nil)).Elem()
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigOutput() RegistryHttpConfigOutput {
	return i.ToRegistryHttpConfigOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigOutputWithContext(ctx context.Context) RegistryHttpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigOutput)
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return i.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigOutput).ToRegistryHttpConfigPtrOutputWithContext(ctx)
}

// RegistryHttpConfigPtrInput is an input type that accepts RegistryHttpConfigArgs, RegistryHttpConfigPtr and RegistryHttpConfigPtrOutput values.
// You can construct a concrete instance of `RegistryHttpConfigPtrInput` via:
//
// 		 RegistryHttpConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryHttpConfigPtrInput interface {
	pulumi.Input

	ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput
	ToRegistryHttpConfigPtrOutputWithContext(context.Context) RegistryHttpConfigPtrOutput
}

type registryHttpConfigPtrType RegistryHttpConfigArgs

func RegistryHttpConfigPtr(v *RegistryHttpConfigArgs) RegistryHttpConfigPtrInput {
	return (*registryHttpConfigPtrType)(v)
}

func (*registryHttpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfig)(nil)).Elem()
}

func (i *registryHttpConfigPtrType) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return i.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (i *registryHttpConfigPtrType) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigPtrOutput)
}

type RegistryHttpConfigOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfig)(nil)).Elem()
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigOutput() RegistryHttpConfigOutput {
	return o
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigOutputWithContext(ctx context.Context) RegistryHttpConfigOutput {
	return o
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return o.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return o.ApplyT(func(v RegistryHttpConfig) *RegistryHttpConfig {
		return &v
	}).(RegistryHttpConfigPtrOutput)
}
func (o RegistryHttpConfigOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryHttpConfig) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

type RegistryHttpConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfig)(nil)).Elem()
}

func (o RegistryHttpConfigPtrOutput) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return o
}

func (o RegistryHttpConfigPtrOutput) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return o
}

func (o RegistryHttpConfigPtrOutput) Elem() RegistryHttpConfigOutput {
	return o.ApplyT(func(v *RegistryHttpConfig) RegistryHttpConfig { return *v }).(RegistryHttpConfigOutput)
}

func (o RegistryHttpConfigPtrOutput) HttpEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryHttpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HttpEnabledState
	}).(pulumi.StringPtrOutput)
}

type RegistryMqttConfig struct {
	MqttEnabledState string `pulumi:"mqttEnabledState"`
}

// RegistryMqttConfigInput is an input type that accepts RegistryMqttConfigArgs and RegistryMqttConfigOutput values.
// You can construct a concrete instance of `RegistryMqttConfigInput` via:
//
// 		 RegistryMqttConfigArgs{...}
//
type RegistryMqttConfigInput interface {
	pulumi.Input

	ToRegistryMqttConfigOutput() RegistryMqttConfigOutput
	ToRegistryMqttConfigOutputWithContext(context.Context) RegistryMqttConfigOutput
}

type RegistryMqttConfigArgs struct {
	MqttEnabledState pulumi.StringInput `pulumi:"mqttEnabledState"`
}

func (RegistryMqttConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfig)(nil)).Elem()
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigOutput() RegistryMqttConfigOutput {
	return i.ToRegistryMqttConfigOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigOutputWithContext(ctx context.Context) RegistryMqttConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigOutput)
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return i.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigOutput).ToRegistryMqttConfigPtrOutputWithContext(ctx)
}

// RegistryMqttConfigPtrInput is an input type that accepts RegistryMqttConfigArgs, RegistryMqttConfigPtr and RegistryMqttConfigPtrOutput values.
// You can construct a concrete instance of `RegistryMqttConfigPtrInput` via:
//
// 		 RegistryMqttConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryMqttConfigPtrInput interface {
	pulumi.Input

	ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput
	ToRegistryMqttConfigPtrOutputWithContext(context.Context) RegistryMqttConfigPtrOutput
}

type registryMqttConfigPtrType RegistryMqttConfigArgs

func RegistryMqttConfigPtr(v *RegistryMqttConfigArgs) RegistryMqttConfigPtrInput {
	return (*registryMqttConfigPtrType)(v)
}

func (*registryMqttConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfig)(nil)).Elem()
}

func (i *registryMqttConfigPtrType) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return i.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (i *registryMqttConfigPtrType) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigPtrOutput)
}

type RegistryMqttConfigOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfig)(nil)).Elem()
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigOutput() RegistryMqttConfigOutput {
	return o
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigOutputWithContext(ctx context.Context) RegistryMqttConfigOutput {
	return o
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return o.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return o.ApplyT(func(v RegistryMqttConfig) *RegistryMqttConfig {
		return &v
	}).(RegistryMqttConfigPtrOutput)
}
func (o RegistryMqttConfigOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryMqttConfig) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

type RegistryMqttConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfig)(nil)).Elem()
}

func (o RegistryMqttConfigPtrOutput) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return o
}

func (o RegistryMqttConfigPtrOutput) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return o
}

func (o RegistryMqttConfigPtrOutput) Elem() RegistryMqttConfigOutput {
	return o.ApplyT(func(v *RegistryMqttConfig) RegistryMqttConfig { return *v }).(RegistryMqttConfigOutput)
}

func (o RegistryMqttConfigPtrOutput) MqttEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryMqttConfig) *string {
		if v == nil {
			return nil
		}
		return &v.MqttEnabledState
	}).(pulumi.StringPtrOutput)
}

type RegistryStateNotificationConfig struct {
	PubsubTopicName string `pulumi:"pubsubTopicName"`
}

// RegistryStateNotificationConfigInput is an input type that accepts RegistryStateNotificationConfigArgs and RegistryStateNotificationConfigOutput values.
// You can construct a concrete instance of `RegistryStateNotificationConfigInput` via:
//
// 		 RegistryStateNotificationConfigArgs{...}
//
type RegistryStateNotificationConfigInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput
	ToRegistryStateNotificationConfigOutputWithContext(context.Context) RegistryStateNotificationConfigOutput
}

type RegistryStateNotificationConfigArgs struct {
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
}

func (RegistryStateNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfig)(nil)).Elem()
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput {
	return i.ToRegistryStateNotificationConfigOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigOutputWithContext(ctx context.Context) RegistryStateNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigOutput)
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return i.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigOutput).ToRegistryStateNotificationConfigPtrOutputWithContext(ctx)
}

// RegistryStateNotificationConfigPtrInput is an input type that accepts RegistryStateNotificationConfigArgs, RegistryStateNotificationConfigPtr and RegistryStateNotificationConfigPtrOutput values.
// You can construct a concrete instance of `RegistryStateNotificationConfigPtrInput` via:
//
// 		 RegistryStateNotificationConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryStateNotificationConfigPtrInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput
	ToRegistryStateNotificationConfigPtrOutputWithContext(context.Context) RegistryStateNotificationConfigPtrOutput
}

type registryStateNotificationConfigPtrType RegistryStateNotificationConfigArgs

func RegistryStateNotificationConfigPtr(v *RegistryStateNotificationConfigArgs) RegistryStateNotificationConfigPtrInput {
	return (*registryStateNotificationConfigPtrType)(v)
}

func (*registryStateNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfig)(nil)).Elem()
}

func (i *registryStateNotificationConfigPtrType) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return i.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *registryStateNotificationConfigPtrType) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigPtrOutput)
}

type RegistryStateNotificationConfigOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfig)(nil)).Elem()
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput {
	return o
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigOutputWithContext(ctx context.Context) RegistryStateNotificationConfigOutput {
	return o
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return o.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) *RegistryStateNotificationConfig {
		return &v
	}).(RegistryStateNotificationConfigPtrOutput)
}
func (o RegistryStateNotificationConfigOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

type RegistryStateNotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfig)(nil)).Elem()
}

func (o RegistryStateNotificationConfigPtrOutput) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigPtrOutput) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigPtrOutput) Elem() RegistryStateNotificationConfigOutput {
	return o.ApplyT(func(v *RegistryStateNotificationConfig) RegistryStateNotificationConfig { return *v }).(RegistryStateNotificationConfigOutput)
}

func (o RegistryStateNotificationConfigPtrOutput) PubsubTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryStateNotificationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PubsubTopicName
	}).(pulumi.StringPtrOutput)
}

type GetKMSCryptoKeyVersionPublicKey struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm string `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem string `pulumi:"pem"`
}

// GetKMSCryptoKeyVersionPublicKeyInput is an input type that accepts GetKMSCryptoKeyVersionPublicKeyArgs and GetKMSCryptoKeyVersionPublicKeyOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionPublicKeyInput` via:
//
// 		 GetKMSCryptoKeyVersionPublicKeyArgs{...}
//
type GetKMSCryptoKeyVersionPublicKeyInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput
	ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(context.Context) GetKMSCryptoKeyVersionPublicKeyOutput
}

type GetKMSCryptoKeyVersionPublicKeyArgs struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringInput `pulumi:"pem"`
}

func (GetKMSCryptoKeyVersionPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionPublicKeyArgs) ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput {
	return i.ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionPublicKeyArgs) ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionPublicKeyOutput)
}

type GetKMSCryptoKeyVersionPublicKeyOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionPublicKeyOutput) ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput {
	return o
}

func (o GetKMSCryptoKeyVersionPublicKeyOutput) ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o GetKMSCryptoKeyVersionPublicKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionPublicKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
func (o GetKMSCryptoKeyVersionPublicKeyOutput) Pem() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionPublicKey) string { return v.Pem }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionTemplate struct {
	Algorithm       string `pulumi:"algorithm"`
	ProtectionLevel string `pulumi:"protectionLevel"`
}

// GetKMSCryptoKeyVersionTemplateInput is an input type that accepts GetKMSCryptoKeyVersionTemplateArgs and GetKMSCryptoKeyVersionTemplateOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionTemplateInput` via:
//
// 		 GetKMSCryptoKeyVersionTemplateArgs{...}
//
type GetKMSCryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput
	ToGetKMSCryptoKeyVersionTemplateOutputWithContext(context.Context) GetKMSCryptoKeyVersionTemplateOutput
}

type GetKMSCryptoKeyVersionTemplateArgs struct {
	Algorithm       pulumi.StringInput `pulumi:"algorithm"`
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
}

func (GetKMSCryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionTemplateArgs) ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput {
	return i.ToGetKMSCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionTemplateArgs) ToGetKMSCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionTemplateOutput)
}

// GetKMSCryptoKeyVersionTemplateArrayInput is an input type that accepts GetKMSCryptoKeyVersionTemplateArray and GetKMSCryptoKeyVersionTemplateArrayOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionTemplateArrayInput` via:
//
// 		 GetKMSCryptoKeyVersionTemplateArray{ GetKMSCryptoKeyVersionTemplateArgs{...} }
//
type GetKMSCryptoKeyVersionTemplateArrayInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput
	ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput
}

type GetKMSCryptoKeyVersionTemplateArray []GetKMSCryptoKeyVersionTemplateInput

func (GetKMSCryptoKeyVersionTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionTemplateArray) ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput {
	return i.ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionTemplateArray) ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionTemplateArrayOutput)
}

type GetKMSCryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ToGetKMSCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionTemplate) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) Index(i pulumi.IntInput) GetKMSCryptoKeyVersionTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKMSCryptoKeyVersionTemplate {
		return vs[0].([]GetKMSCryptoKeyVersionTemplate)[vs[1].(int)]
	}).(GetKMSCryptoKeyVersionTemplateOutput)
}

func init() {
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplatePtrOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(RegistryCredentialOutput{})
	pulumi.RegisterOutputType(RegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialPublicKeyCertificateOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemArrayOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionPublicKeyOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionTemplateArrayOutput{})
}
