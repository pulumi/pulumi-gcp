// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Kms Project Kaj Policy Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/projects"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a project
//			kmsProject, err := organizations.NewProject(ctx, "kms_project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("my-project"),
//				Name:           pulumi.String("my-project"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			// Enable the Cloud KMS API.
//			kmsApiService, err := projects.NewService(ctx, "kms_api_service", &projects.ServiceArgs{
//				Service:                  pulumi.String("cloudkms.googleapis.com"),
//				Project:                  kmsProject.ProjectId,
//				DisableDependentServices: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				kmsProject,
//			}))
//			if err != nil {
//				return err
//			}
//			waitEnableServiceApi, err := time.NewSleep(ctx, "wait_enable_service_api", &time.SleepArgs{
//				CreateDuration: "30s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				kmsApiService,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewProjectKajPolicyConfig(ctx, "example", &kms.ProjectKajPolicyConfigArgs{
//				Project: kmsProject.ProjectId,
//				DefaultKeyAccessJustificationPolicy: &kms.ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs{
//					AllowedAccessReasons: pulumi.StringArray{
//						pulumi.String("CUSTOMER_INITIATED_ACCESS"),
//						pulumi.String("GOOGLE_INITIATED_SYSTEM_OPERATION"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitEnableServiceApi,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProjectKajPolicyConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/kajPolicyConfig`
//
// * `{{project}}`
//
// When using the `pulumi import` command, ProjectKajPolicyConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig default projects/{{project}}/kajPolicyConfig
// ```
//
// ```sh
// $ pulumi import gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig default {{project}}
// ```
type ProjectKajPolicyConfig struct {
	pulumi.CustomResourceState

	// The default key access justification policy used when a CryptoKey is
	// created in this project. This is only used when a Key Access Justifications
	// policy is not provided in the CreateCryptoKeyRequest.
	// Structure is documented below.
	DefaultKeyAccessJustificationPolicy ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput `pulumi:"defaultKeyAccessJustificationPolicy"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewProjectKajPolicyConfig registers a new resource with the given unique name, arguments, and options.
func NewProjectKajPolicyConfig(ctx *pulumi.Context,
	name string, args *ProjectKajPolicyConfigArgs, opts ...pulumi.ResourceOption) (*ProjectKajPolicyConfig, error) {
	if args == nil {
		args = &ProjectKajPolicyConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectKajPolicyConfig
	err := ctx.RegisterResource("gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectKajPolicyConfig gets an existing ProjectKajPolicyConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectKajPolicyConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectKajPolicyConfigState, opts ...pulumi.ResourceOption) (*ProjectKajPolicyConfig, error) {
	var resource ProjectKajPolicyConfig
	err := ctx.ReadResource("gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectKajPolicyConfig resources.
type projectKajPolicyConfigState struct {
	// The default key access justification policy used when a CryptoKey is
	// created in this project. This is only used when a Key Access Justifications
	// policy is not provided in the CreateCryptoKeyRequest.
	// Structure is documented below.
	DefaultKeyAccessJustificationPolicy *ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy `pulumi:"defaultKeyAccessJustificationPolicy"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type ProjectKajPolicyConfigState struct {
	// The default key access justification policy used when a CryptoKey is
	// created in this project. This is only used when a Key Access Justifications
	// policy is not provided in the CreateCryptoKeyRequest.
	// Structure is documented below.
	DefaultKeyAccessJustificationPolicy ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ProjectKajPolicyConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectKajPolicyConfigState)(nil)).Elem()
}

type projectKajPolicyConfigArgs struct {
	// The default key access justification policy used when a CryptoKey is
	// created in this project. This is only used when a Key Access Justifications
	// policy is not provided in the CreateCryptoKeyRequest.
	// Structure is documented below.
	DefaultKeyAccessJustificationPolicy *ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy `pulumi:"defaultKeyAccessJustificationPolicy"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectKajPolicyConfig resource.
type ProjectKajPolicyConfigArgs struct {
	// The default key access justification policy used when a CryptoKey is
	// created in this project. This is only used when a Key Access Justifications
	// policy is not provided in the CreateCryptoKeyRequest.
	// Structure is documented below.
	DefaultKeyAccessJustificationPolicy ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ProjectKajPolicyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectKajPolicyConfigArgs)(nil)).Elem()
}

type ProjectKajPolicyConfigInput interface {
	pulumi.Input

	ToProjectKajPolicyConfigOutput() ProjectKajPolicyConfigOutput
	ToProjectKajPolicyConfigOutputWithContext(ctx context.Context) ProjectKajPolicyConfigOutput
}

func (*ProjectKajPolicyConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectKajPolicyConfig)(nil)).Elem()
}

func (i *ProjectKajPolicyConfig) ToProjectKajPolicyConfigOutput() ProjectKajPolicyConfigOutput {
	return i.ToProjectKajPolicyConfigOutputWithContext(context.Background())
}

func (i *ProjectKajPolicyConfig) ToProjectKajPolicyConfigOutputWithContext(ctx context.Context) ProjectKajPolicyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectKajPolicyConfigOutput)
}

// ProjectKajPolicyConfigArrayInput is an input type that accepts ProjectKajPolicyConfigArray and ProjectKajPolicyConfigArrayOutput values.
// You can construct a concrete instance of `ProjectKajPolicyConfigArrayInput` via:
//
//	ProjectKajPolicyConfigArray{ ProjectKajPolicyConfigArgs{...} }
type ProjectKajPolicyConfigArrayInput interface {
	pulumi.Input

	ToProjectKajPolicyConfigArrayOutput() ProjectKajPolicyConfigArrayOutput
	ToProjectKajPolicyConfigArrayOutputWithContext(context.Context) ProjectKajPolicyConfigArrayOutput
}

type ProjectKajPolicyConfigArray []ProjectKajPolicyConfigInput

func (ProjectKajPolicyConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectKajPolicyConfig)(nil)).Elem()
}

func (i ProjectKajPolicyConfigArray) ToProjectKajPolicyConfigArrayOutput() ProjectKajPolicyConfigArrayOutput {
	return i.ToProjectKajPolicyConfigArrayOutputWithContext(context.Background())
}

func (i ProjectKajPolicyConfigArray) ToProjectKajPolicyConfigArrayOutputWithContext(ctx context.Context) ProjectKajPolicyConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectKajPolicyConfigArrayOutput)
}

// ProjectKajPolicyConfigMapInput is an input type that accepts ProjectKajPolicyConfigMap and ProjectKajPolicyConfigMapOutput values.
// You can construct a concrete instance of `ProjectKajPolicyConfigMapInput` via:
//
//	ProjectKajPolicyConfigMap{ "key": ProjectKajPolicyConfigArgs{...} }
type ProjectKajPolicyConfigMapInput interface {
	pulumi.Input

	ToProjectKajPolicyConfigMapOutput() ProjectKajPolicyConfigMapOutput
	ToProjectKajPolicyConfigMapOutputWithContext(context.Context) ProjectKajPolicyConfigMapOutput
}

type ProjectKajPolicyConfigMap map[string]ProjectKajPolicyConfigInput

func (ProjectKajPolicyConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectKajPolicyConfig)(nil)).Elem()
}

func (i ProjectKajPolicyConfigMap) ToProjectKajPolicyConfigMapOutput() ProjectKajPolicyConfigMapOutput {
	return i.ToProjectKajPolicyConfigMapOutputWithContext(context.Background())
}

func (i ProjectKajPolicyConfigMap) ToProjectKajPolicyConfigMapOutputWithContext(ctx context.Context) ProjectKajPolicyConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectKajPolicyConfigMapOutput)
}

type ProjectKajPolicyConfigOutput struct{ *pulumi.OutputState }

func (ProjectKajPolicyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectKajPolicyConfig)(nil)).Elem()
}

func (o ProjectKajPolicyConfigOutput) ToProjectKajPolicyConfigOutput() ProjectKajPolicyConfigOutput {
	return o
}

func (o ProjectKajPolicyConfigOutput) ToProjectKajPolicyConfigOutputWithContext(ctx context.Context) ProjectKajPolicyConfigOutput {
	return o
}

// The default key access justification policy used when a CryptoKey is
// created in this project. This is only used when a Key Access Justifications
// policy is not provided in the CreateCryptoKeyRequest.
// Structure is documented below.
func (o ProjectKajPolicyConfigOutput) DefaultKeyAccessJustificationPolicy() ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
	return o.ApplyT(func(v *ProjectKajPolicyConfig) ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput {
		return v.DefaultKeyAccessJustificationPolicy
	}).(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ProjectKajPolicyConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectKajPolicyConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ProjectKajPolicyConfigArrayOutput struct{ *pulumi.OutputState }

func (ProjectKajPolicyConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectKajPolicyConfig)(nil)).Elem()
}

func (o ProjectKajPolicyConfigArrayOutput) ToProjectKajPolicyConfigArrayOutput() ProjectKajPolicyConfigArrayOutput {
	return o
}

func (o ProjectKajPolicyConfigArrayOutput) ToProjectKajPolicyConfigArrayOutputWithContext(ctx context.Context) ProjectKajPolicyConfigArrayOutput {
	return o
}

func (o ProjectKajPolicyConfigArrayOutput) Index(i pulumi.IntInput) ProjectKajPolicyConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectKajPolicyConfig {
		return vs[0].([]*ProjectKajPolicyConfig)[vs[1].(int)]
	}).(ProjectKajPolicyConfigOutput)
}

type ProjectKajPolicyConfigMapOutput struct{ *pulumi.OutputState }

func (ProjectKajPolicyConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectKajPolicyConfig)(nil)).Elem()
}

func (o ProjectKajPolicyConfigMapOutput) ToProjectKajPolicyConfigMapOutput() ProjectKajPolicyConfigMapOutput {
	return o
}

func (o ProjectKajPolicyConfigMapOutput) ToProjectKajPolicyConfigMapOutputWithContext(ctx context.Context) ProjectKajPolicyConfigMapOutput {
	return o
}

func (o ProjectKajPolicyConfigMapOutput) MapIndex(k pulumi.StringInput) ProjectKajPolicyConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectKajPolicyConfig {
		return vs[0].(map[string]*ProjectKajPolicyConfig)[vs[1].(string)]
	}).(ProjectKajPolicyConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectKajPolicyConfigInput)(nil)).Elem(), &ProjectKajPolicyConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectKajPolicyConfigArrayInput)(nil)).Elem(), ProjectKajPolicyConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectKajPolicyConfigMapInput)(nil)).Elem(), ProjectKajPolicyConfigMap{})
	pulumi.RegisterOutputType(ProjectKajPolicyConfigOutput{})
	pulumi.RegisterOutputType(ProjectKajPolicyConfigArrayOutput{})
	pulumi.RegisterOutputType(ProjectKajPolicyConfigMapOutput{})
}
