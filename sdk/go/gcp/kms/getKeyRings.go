// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides access to all Google Cloud Platform KMS CryptoKeyRings in a set location. For more information see
// [the official documentation](https://cloud.google.com/kms/docs/resource-hierarchy#key_rings)
// and
// [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings).
//
// A key ring organizes keys in a specific Google Cloud location and lets you manage access control on groups of keys. A key ring's name does not need to be unique across a Google Cloud project, but must be unique within a given location. After creation, a key ring cannot be deleted. Key rings don't incur any costs.
func GetKeyRings(ctx *pulumi.Context, args *GetKeyRingsArgs, opts ...pulumi.InvokeOption) (*GetKeyRingsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKeyRingsResult
	err := ctx.Invoke("gcp:kms/getKeyRings:getKeyRings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeyRings.
type GetKeyRingsArgs struct {
	// The filter argument is used to add a filter query parameter that limits which key rings are retrieved by the data source: ?filter={{filter}}. When no value is provided there is no filtering.
	//
	// Example filter values if filtering on name. Note: names take the form projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}.
	//
	// * `"name:my-key-"` will retrieve key rings that contain "my-key-" anywhere in their name.
	// * `"name=projects/my-project/locations/global/keyRings/my-key-ring"` will only retrieve a key with that exact name.
	//
	// [See the documentation about using filters](https://cloud.google.com/kms/docs/sorting-and-filtering)
	Filter *string `pulumi:"filter"`
	// The location that the underlying key ring resides in. e.g us-west1
	Location string `pulumi:"location"`
	// The Project ID of the project.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getKeyRings.
type GetKeyRingsResult struct {
	Filter *string `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of all the retrieved key rings from the provided location. This list is influenced by the provided filter argument.
	KeyRings []GetKeyRingsKeyRing `pulumi:"keyRings"`
	Location string               `pulumi:"location"`
	Project  *string              `pulumi:"project"`
}

func GetKeyRingsOutput(ctx *pulumi.Context, args GetKeyRingsOutputArgs, opts ...pulumi.InvokeOption) GetKeyRingsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetKeyRingsResultOutput, error) {
			args := v.(GetKeyRingsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:kms/getKeyRings:getKeyRings", args, GetKeyRingsResultOutput{}, options).(GetKeyRingsResultOutput), nil
		}).(GetKeyRingsResultOutput)
}

// A collection of arguments for invoking getKeyRings.
type GetKeyRingsOutputArgs struct {
	// The filter argument is used to add a filter query parameter that limits which key rings are retrieved by the data source: ?filter={{filter}}. When no value is provided there is no filtering.
	//
	// Example filter values if filtering on name. Note: names take the form projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}.
	//
	// * `"name:my-key-"` will retrieve key rings that contain "my-key-" anywhere in their name.
	// * `"name=projects/my-project/locations/global/keyRings/my-key-ring"` will only retrieve a key with that exact name.
	//
	// [See the documentation about using filters](https://cloud.google.com/kms/docs/sorting-and-filtering)
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The location that the underlying key ring resides in. e.g us-west1
	Location pulumi.StringInput `pulumi:"location"`
	// The Project ID of the project.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetKeyRingsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyRingsArgs)(nil)).Elem()
}

// A collection of values returned by getKeyRings.
type GetKeyRingsResultOutput struct{ *pulumi.OutputState }

func (GetKeyRingsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyRingsResult)(nil)).Elem()
}

func (o GetKeyRingsResultOutput) ToGetKeyRingsResultOutput() GetKeyRingsResultOutput {
	return o
}

func (o GetKeyRingsResultOutput) ToGetKeyRingsResultOutputWithContext(ctx context.Context) GetKeyRingsResultOutput {
	return o
}

func (o GetKeyRingsResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeyRingsResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetKeyRingsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyRingsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of all the retrieved key rings from the provided location. This list is influenced by the provided filter argument.
func (o GetKeyRingsResultOutput) KeyRings() GetKeyRingsKeyRingArrayOutput {
	return o.ApplyT(func(v GetKeyRingsResult) []GetKeyRingsKeyRing { return v.KeyRings }).(GetKeyRingsKeyRingArrayOutput)
}

func (o GetKeyRingsResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyRingsResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetKeyRingsResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeyRingsResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKeyRingsResultOutput{})
}
