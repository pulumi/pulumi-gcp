// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows creation and management of a single binding within IAM policy for
// an existing Google Cloud KMS crypto key.
// 
// > **Note:** On create, this resource will overwrite members of any existing roles.
//     Use `import` and inspect the preview output to ensure
//     your existing members are preserved.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/kms_crypto_key_iam_binding.html.markdown.
type CryptoKeyIAMBinding struct {
	s *pulumi.ResourceState
}

// NewCryptoKeyIAMBinding registers a new resource with the given unique name, arguments, and options.
func NewCryptoKeyIAMBinding(ctx *pulumi.Context,
	name string, args *CryptoKeyIAMBindingArgs, opts ...pulumi.ResourceOpt) (*CryptoKeyIAMBinding, error) {
	if args == nil || args.CryptoKeyId == nil {
		return nil, errors.New("missing required argument 'CryptoKeyId'")
	}
	if args == nil || args.Members == nil {
		return nil, errors.New("missing required argument 'Members'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cryptoKeyId"] = nil
		inputs["members"] = nil
		inputs["role"] = nil
	} else {
		inputs["cryptoKeyId"] = args.CryptoKeyId
		inputs["members"] = args.Members
		inputs["role"] = args.Role
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CryptoKeyIAMBinding{s: s}, nil
}

// GetCryptoKeyIAMBinding gets an existing CryptoKeyIAMBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoKeyIAMBinding(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CryptoKeyIAMBindingState, opts ...pulumi.ResourceOpt) (*CryptoKeyIAMBinding, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cryptoKeyId"] = state.CryptoKeyId
		inputs["etag"] = state.Etag
		inputs["members"] = state.Members
		inputs["role"] = state.Role
	}
	s, err := ctx.ReadResource("gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CryptoKeyIAMBinding{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CryptoKeyIAMBinding) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CryptoKeyIAMBinding) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The crypto key ID, in the form
// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
// `{location_name}/{key_ring_name}/{crypto_key_name}`.
// In the second form, the provider's project setting will be used as a fallback.
func (r *CryptoKeyIAMBinding) CryptoKeyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cryptoKeyId"])
}

// (Computed) The etag of the crypto key's IAM policy.
func (r *CryptoKeyIAMBinding) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// A list of users that the role should apply to. For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
func (r *CryptoKeyIAMBinding) Members() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["members"])
}

// The role that should be applied. Only one
// `google_kms_crypto_key_iam_binding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (r *CryptoKeyIAMBinding) Role() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["role"])
}

// Input properties used for looking up and filtering CryptoKeyIAMBinding resources.
type CryptoKeyIAMBindingState struct {
	// The crypto key ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
	// `{location_name}/{key_ring_name}/{crypto_key_name}`.
	// In the second form, the provider's project setting will be used as a fallback.
	CryptoKeyId interface{}
	// (Computed) The etag of the crypto key's IAM policy.
	Etag interface{}
	// A list of users that the role should apply to. For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
	Members interface{}
	// The role that should be applied. Only one
	// `google_kms_crypto_key_iam_binding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role interface{}
}

// The set of arguments for constructing a CryptoKeyIAMBinding resource.
type CryptoKeyIAMBindingArgs struct {
	// The crypto key ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
	// `{location_name}/{key_ring_name}/{crypto_key_name}`.
	// In the second form, the provider's project setting will be used as a fallback.
	CryptoKeyId interface{}
	// A list of users that the role should apply to. For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
	Members interface{}
	// The role that should be applied. Only one
	// `google_kms_crypto_key_iam_binding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role interface{}
}
