// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Kms Autokey Config All
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/projects"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create Folder in GCP Organization
//			autokmsFolder, err := organizations.NewFolder(ctx, "autokms_folder", &organizations.FolderArgs{
//				DisplayName: pulumi.String("my-folder"),
//				Parent:      pulumi.String("organizations/123456789"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create the key project
//			keyProject, err := organizations.NewProject(ctx, "key_project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("key-proj"),
//				Name:           pulumi.String("key-proj"),
//				FolderId:       autokmsFolder.FolderId,
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				autokmsFolder,
//			}))
//			if err != nil {
//				return err
//			}
//			// Enable the Cloud KMS API
//			kmsApiService, err := projects.NewService(ctx, "kms_api_service", &projects.ServiceArgs{
//				Service:                  pulumi.String("cloudkms.googleapis.com"),
//				Project:                  keyProject.ProjectId,
//				DisableOnDestroy:         pulumi.Bool(false),
//				DisableDependentServices: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				keyProject,
//			}))
//			if err != nil {
//				return err
//			}
//			// Wait delay after enabling APIs
//			waitEnableServiceApi, err := time.NewSleep(ctx, "wait_enable_service_api", &time.SleepArgs{
//				CreateDuration: "30s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				kmsApiService,
//			}))
//			if err != nil {
//				return err
//			}
//			// Create KMS Service Agent
//			kmsServiceAgent, err := projects.NewServiceIdentity(ctx, "kms_service_agent", &projects.ServiceIdentityArgs{
//				Service: pulumi.String("cloudkms.googleapis.com"),
//				Project: keyProject.Number,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitEnableServiceApi,
//			}))
//			if err != nil {
//				return err
//			}
//			// Wait delay after creating service agent.
//			waitServiceAgent, err := time.NewSleep(ctx, "wait_service_agent", &time.SleepArgs{
//				CreateDuration: "10s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				kmsServiceAgent,
//			}))
//			if err != nil {
//				return err
//			}
//			// Grant the KMS Service Agent the Cloud KMS Admin role
//			autokeyProjectAdmin, err := projects.NewIAMMember(ctx, "autokey_project_admin", &projects.IAMMemberArgs{
//				Project: keyProject.ProjectId,
//				Role:    pulumi.String("roles/cloudkms.admin"),
//				Member: keyProject.Number.ApplyT(func(number string) (string, error) {
//					return fmt.Sprintf("serviceAccount:service-%v@gcp-sa-cloudkms.iam.gserviceaccount.com", number), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitServiceAgent,
//			}))
//			if err != nil {
//				return err
//			}
//			// Wait delay after granting IAM permissions
//			waitSrvAccPermissions, err := time.NewSleep(ctx, "wait_srv_acc_permissions", &time.SleepArgs{
//				CreateDuration: "10s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				autokeyProjectAdmin,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewAutokeyConfig(ctx, "example-autokeyconfig", &kms.AutokeyConfigArgs{
//				Folder: autokmsFolder.FolderId,
//				KeyProject: keyProject.ProjectId.ApplyT(func(projectId string) (string, error) {
//					return fmt.Sprintf("projects/%v", projectId), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				waitSrvAccPermissions,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AutokeyConfig can be imported using any of these accepted formats:
//
// * `folders/{{folder}}/autokeyConfig`
//
// * `{{folder}}`
//
// When using the `pulumi import` command, AutokeyConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:kms/autokeyConfig:AutokeyConfig default folders/{{folder}}/autokeyConfig
// ```
//
// ```sh
// $ pulumi import gcp:kms/autokeyConfig:AutokeyConfig default {{folder}}
// ```
type AutokeyConfig struct {
	pulumi.CustomResourceState

	// The folder for which to retrieve config.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// The target key project for a given folder where KMS Autokey will provision a
	// CryptoKey for any new KeyHandle the Developer creates. Should have the form
	// `projects/<project_id_or_number>`.
	KeyProject pulumi.StringPtrOutput `pulumi:"keyProject"`
}

// NewAutokeyConfig registers a new resource with the given unique name, arguments, and options.
func NewAutokeyConfig(ctx *pulumi.Context,
	name string, args *AutokeyConfigArgs, opts ...pulumi.ResourceOption) (*AutokeyConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutokeyConfig
	err := ctx.RegisterResource("gcp:kms/autokeyConfig:AutokeyConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutokeyConfig gets an existing AutokeyConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutokeyConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutokeyConfigState, opts ...pulumi.ResourceOption) (*AutokeyConfig, error) {
	var resource AutokeyConfig
	err := ctx.ReadResource("gcp:kms/autokeyConfig:AutokeyConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutokeyConfig resources.
type autokeyConfigState struct {
	// The folder for which to retrieve config.
	Folder *string `pulumi:"folder"`
	// The target key project for a given folder where KMS Autokey will provision a
	// CryptoKey for any new KeyHandle the Developer creates. Should have the form
	// `projects/<project_id_or_number>`.
	KeyProject *string `pulumi:"keyProject"`
}

type AutokeyConfigState struct {
	// The folder for which to retrieve config.
	Folder pulumi.StringPtrInput
	// The target key project for a given folder where KMS Autokey will provision a
	// CryptoKey for any new KeyHandle the Developer creates. Should have the form
	// `projects/<project_id_or_number>`.
	KeyProject pulumi.StringPtrInput
}

func (AutokeyConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*autokeyConfigState)(nil)).Elem()
}

type autokeyConfigArgs struct {
	// The folder for which to retrieve config.
	Folder string `pulumi:"folder"`
	// The target key project for a given folder where KMS Autokey will provision a
	// CryptoKey for any new KeyHandle the Developer creates. Should have the form
	// `projects/<project_id_or_number>`.
	KeyProject *string `pulumi:"keyProject"`
}

// The set of arguments for constructing a AutokeyConfig resource.
type AutokeyConfigArgs struct {
	// The folder for which to retrieve config.
	Folder pulumi.StringInput
	// The target key project for a given folder where KMS Autokey will provision a
	// CryptoKey for any new KeyHandle the Developer creates. Should have the form
	// `projects/<project_id_or_number>`.
	KeyProject pulumi.StringPtrInput
}

func (AutokeyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autokeyConfigArgs)(nil)).Elem()
}

type AutokeyConfigInput interface {
	pulumi.Input

	ToAutokeyConfigOutput() AutokeyConfigOutput
	ToAutokeyConfigOutputWithContext(ctx context.Context) AutokeyConfigOutput
}

func (*AutokeyConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AutokeyConfig)(nil)).Elem()
}

func (i *AutokeyConfig) ToAutokeyConfigOutput() AutokeyConfigOutput {
	return i.ToAutokeyConfigOutputWithContext(context.Background())
}

func (i *AutokeyConfig) ToAutokeyConfigOutputWithContext(ctx context.Context) AutokeyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutokeyConfigOutput)
}

// AutokeyConfigArrayInput is an input type that accepts AutokeyConfigArray and AutokeyConfigArrayOutput values.
// You can construct a concrete instance of `AutokeyConfigArrayInput` via:
//
//	AutokeyConfigArray{ AutokeyConfigArgs{...} }
type AutokeyConfigArrayInput interface {
	pulumi.Input

	ToAutokeyConfigArrayOutput() AutokeyConfigArrayOutput
	ToAutokeyConfigArrayOutputWithContext(context.Context) AutokeyConfigArrayOutput
}

type AutokeyConfigArray []AutokeyConfigInput

func (AutokeyConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutokeyConfig)(nil)).Elem()
}

func (i AutokeyConfigArray) ToAutokeyConfigArrayOutput() AutokeyConfigArrayOutput {
	return i.ToAutokeyConfigArrayOutputWithContext(context.Background())
}

func (i AutokeyConfigArray) ToAutokeyConfigArrayOutputWithContext(ctx context.Context) AutokeyConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutokeyConfigArrayOutput)
}

// AutokeyConfigMapInput is an input type that accepts AutokeyConfigMap and AutokeyConfigMapOutput values.
// You can construct a concrete instance of `AutokeyConfigMapInput` via:
//
//	AutokeyConfigMap{ "key": AutokeyConfigArgs{...} }
type AutokeyConfigMapInput interface {
	pulumi.Input

	ToAutokeyConfigMapOutput() AutokeyConfigMapOutput
	ToAutokeyConfigMapOutputWithContext(context.Context) AutokeyConfigMapOutput
}

type AutokeyConfigMap map[string]AutokeyConfigInput

func (AutokeyConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutokeyConfig)(nil)).Elem()
}

func (i AutokeyConfigMap) ToAutokeyConfigMapOutput() AutokeyConfigMapOutput {
	return i.ToAutokeyConfigMapOutputWithContext(context.Background())
}

func (i AutokeyConfigMap) ToAutokeyConfigMapOutputWithContext(ctx context.Context) AutokeyConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutokeyConfigMapOutput)
}

type AutokeyConfigOutput struct{ *pulumi.OutputState }

func (AutokeyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutokeyConfig)(nil)).Elem()
}

func (o AutokeyConfigOutput) ToAutokeyConfigOutput() AutokeyConfigOutput {
	return o
}

func (o AutokeyConfigOutput) ToAutokeyConfigOutputWithContext(ctx context.Context) AutokeyConfigOutput {
	return o
}

// The folder for which to retrieve config.
func (o AutokeyConfigOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *AutokeyConfig) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// The target key project for a given folder where KMS Autokey will provision a
// CryptoKey for any new KeyHandle the Developer creates. Should have the form
// `projects/<project_id_or_number>`.
func (o AutokeyConfigOutput) KeyProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutokeyConfig) pulumi.StringPtrOutput { return v.KeyProject }).(pulumi.StringPtrOutput)
}

type AutokeyConfigArrayOutput struct{ *pulumi.OutputState }

func (AutokeyConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutokeyConfig)(nil)).Elem()
}

func (o AutokeyConfigArrayOutput) ToAutokeyConfigArrayOutput() AutokeyConfigArrayOutput {
	return o
}

func (o AutokeyConfigArrayOutput) ToAutokeyConfigArrayOutputWithContext(ctx context.Context) AutokeyConfigArrayOutput {
	return o
}

func (o AutokeyConfigArrayOutput) Index(i pulumi.IntInput) AutokeyConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutokeyConfig {
		return vs[0].([]*AutokeyConfig)[vs[1].(int)]
	}).(AutokeyConfigOutput)
}

type AutokeyConfigMapOutput struct{ *pulumi.OutputState }

func (AutokeyConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutokeyConfig)(nil)).Elem()
}

func (o AutokeyConfigMapOutput) ToAutokeyConfigMapOutput() AutokeyConfigMapOutput {
	return o
}

func (o AutokeyConfigMapOutput) ToAutokeyConfigMapOutputWithContext(ctx context.Context) AutokeyConfigMapOutput {
	return o
}

func (o AutokeyConfigMapOutput) MapIndex(k pulumi.StringInput) AutokeyConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutokeyConfig {
		return vs[0].(map[string]*AutokeyConfig)[vs[1].(string)]
	}).(AutokeyConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutokeyConfigInput)(nil)).Elem(), &AutokeyConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutokeyConfigArrayInput)(nil)).Elem(), AutokeyConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutokeyConfigMapInput)(nil)).Elem(), AutokeyConfigMap{})
	pulumi.RegisterOutputType(AutokeyConfigOutput{})
	pulumi.RegisterOutputType(AutokeyConfigArrayOutput{})
	pulumi.RegisterOutputType(AutokeyConfigMapOutput{})
}
