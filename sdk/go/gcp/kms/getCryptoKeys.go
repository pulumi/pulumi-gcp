// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides access to all Google Cloud Platform KMS CryptoKeys in a given KeyRing. For more information see
// [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
// and
// [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
//
// A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
// Google Cloud KMS KeyRing.
func GetCryptoKeys(ctx *pulumi.Context, args *GetCryptoKeysArgs, opts ...pulumi.InvokeOption) (*GetCryptoKeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &GetCryptoKeysResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &GetCryptoKeysResult{}, errors.New("DependsOn is not supported for direct form invoke GetCryptoKeys, use GetCryptoKeysOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &GetCryptoKeysResult{}, errors.New("DependsOnInputs is not supported for direct form invoke GetCryptoKeys, use GetCryptoKeysOutput instead")
	}
	var rv GetCryptoKeysResult
	err := ctx.Invoke("gcp:kms/getCryptoKeys:getCryptoKeys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCryptoKeys.
type GetCryptoKeysArgs struct {
	// The filter argument is used to add a filter query parameter that limits which keys are retrieved by the data source: ?filter={{filter}}. When no value is provided there is no filtering.
	//
	// Example filter values if filtering on name. Note: names take the form projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}.
	//
	// * `"name:my-key-"` will retrieve keys that contain "my-key-" anywhere in their name.
	// * `"name=projects/my-project/locations/global/keyRings/my-key-ring/cryptoKeys/my-key-1"` will only retrieve a key with that exact name.
	//
	// [See the documentation about using filters](https://cloud.google.com/kms/docs/sorting-and-filtering)
	Filter *string `pulumi:"filter"`
	// The key ring that the keys belongs to. Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.,
	KeyRing string `pulumi:"keyRing"`
}

// A collection of values returned by getCryptoKeys.
type GetCryptoKeysResult struct {
	Filter *string `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	KeyRing string `pulumi:"keyRing"`
	// A list of all the retrieved keys from the provided key ring. This list is influenced by the provided filter argument.
	Keys []GetCryptoKeysKey `pulumi:"keys"`
}

func GetCryptoKeysOutput(ctx *pulumi.Context, args GetCryptoKeysOutputArgs, opts ...pulumi.InvokeOption) GetCryptoKeysResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCryptoKeysResultOutput, error) {
			args := v.(GetCryptoKeysArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetCryptoKeysResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:kms/getCryptoKeys:getCryptoKeys", args, &rv, "", opts...)
			if err != nil {
				return GetCryptoKeysResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetCryptoKeysResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(GetCryptoKeysResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetCryptoKeysResultOutput), nil
			}
			return output, nil
		}).(GetCryptoKeysResultOutput)
}

// A collection of arguments for invoking getCryptoKeys.
type GetCryptoKeysOutputArgs struct {
	// The filter argument is used to add a filter query parameter that limits which keys are retrieved by the data source: ?filter={{filter}}. When no value is provided there is no filtering.
	//
	// Example filter values if filtering on name. Note: names take the form projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}.
	//
	// * `"name:my-key-"` will retrieve keys that contain "my-key-" anywhere in their name.
	// * `"name=projects/my-project/locations/global/keyRings/my-key-ring/cryptoKeys/my-key-1"` will only retrieve a key with that exact name.
	//
	// [See the documentation about using filters](https://cloud.google.com/kms/docs/sorting-and-filtering)
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The key ring that the keys belongs to. Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.,
	KeyRing pulumi.StringInput `pulumi:"keyRing"`
}

func (GetCryptoKeysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysArgs)(nil)).Elem()
}

// A collection of values returned by getCryptoKeys.
type GetCryptoKeysResultOutput struct{ *pulumi.OutputState }

func (GetCryptoKeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoKeysResult)(nil)).Elem()
}

func (o GetCryptoKeysResultOutput) ToGetCryptoKeysResultOutput() GetCryptoKeysResultOutput {
	return o
}

func (o GetCryptoKeysResultOutput) ToGetCryptoKeysResultOutputWithContext(ctx context.Context) GetCryptoKeysResultOutput {
	return o
}

func (o GetCryptoKeysResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCryptoKeysResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCryptoKeysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCryptoKeysResultOutput) KeyRing() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoKeysResult) string { return v.KeyRing }).(pulumi.StringOutput)
}

// A list of all the retrieved keys from the provided key ring. This list is influenced by the provided filter argument.
func (o GetCryptoKeysResultOutput) Keys() GetCryptoKeysKeyArrayOutput {
	return o.ApplyT(func(v GetCryptoKeysResult) []GetCryptoKeysKey { return v.Keys }).(GetCryptoKeysKeyArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCryptoKeysResultOutput{})
}
