// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

//
// Deprecated: gcp.kms.Registry has been deprecated in favour of gcp.iot.Registry
type Registry struct {
	pulumi.CustomResourceState

	Credentials              RegistryCredentialArrayOutput                  `pulumi:"credentials"`
	EventNotificationConfigs RegistryEventNotificationConfigItemArrayOutput `pulumi:"eventNotificationConfigs"`
	HttpConfig               RegistryHttpConfigOutput                       `pulumi:"httpConfig"`
	LogLevel                 pulumi.StringPtrOutput                         `pulumi:"logLevel"`
	MqttConfig               RegistryMqttConfigOutput                       `pulumi:"mqttConfig"`
	Name                     pulumi.StringOutput                            `pulumi:"name"`
	Project                  pulumi.StringOutput                            `pulumi:"project"`
	Region                   pulumi.StringOutput                            `pulumi:"region"`
	StateNotificationConfig  RegistryStateNotificationConfigPtrOutput       `pulumi:"stateNotificationConfig"`
}

// NewRegistry registers a new resource with the given unique name, arguments, and options.
func NewRegistry(ctx *pulumi.Context,
	name string, args *RegistryArgs, opts ...pulumi.ResourceOption) (*Registry, error) {
	if args == nil {
		args = &RegistryArgs{}
	}
	var resource Registry
	err := ctx.RegisterResource("gcp:kms/registry:Registry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistry gets an existing Registry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryState, opts ...pulumi.ResourceOption) (*Registry, error) {
	var resource Registry
	err := ctx.ReadResource("gcp:kms/registry:Registry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Registry resources.
type registryState struct {
	Credentials              []RegistryCredential                  `pulumi:"credentials"`
	EventNotificationConfigs []RegistryEventNotificationConfigItem `pulumi:"eventNotificationConfigs"`
	HttpConfig               *RegistryHttpConfig                   `pulumi:"httpConfig"`
	LogLevel                 *string                               `pulumi:"logLevel"`
	MqttConfig               *RegistryMqttConfig                   `pulumi:"mqttConfig"`
	Name                     *string                               `pulumi:"name"`
	Project                  *string                               `pulumi:"project"`
	Region                   *string                               `pulumi:"region"`
	StateNotificationConfig  *RegistryStateNotificationConfig      `pulumi:"stateNotificationConfig"`
}

type RegistryState struct {
	Credentials              RegistryCredentialArrayInput
	EventNotificationConfigs RegistryEventNotificationConfigItemArrayInput
	HttpConfig               RegistryHttpConfigPtrInput
	LogLevel                 pulumi.StringPtrInput
	MqttConfig               RegistryMqttConfigPtrInput
	Name                     pulumi.StringPtrInput
	Project                  pulumi.StringPtrInput
	Region                   pulumi.StringPtrInput
	StateNotificationConfig  RegistryStateNotificationConfigPtrInput
}

func (RegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryState)(nil)).Elem()
}

type registryArgs struct {
	Credentials              []RegistryCredential                  `pulumi:"credentials"`
	EventNotificationConfigs []RegistryEventNotificationConfigItem `pulumi:"eventNotificationConfigs"`
	HttpConfig               *RegistryHttpConfig                   `pulumi:"httpConfig"`
	LogLevel                 *string                               `pulumi:"logLevel"`
	MqttConfig               *RegistryMqttConfig                   `pulumi:"mqttConfig"`
	Name                     *string                               `pulumi:"name"`
	Project                  *string                               `pulumi:"project"`
	Region                   *string                               `pulumi:"region"`
	StateNotificationConfig  *RegistryStateNotificationConfig      `pulumi:"stateNotificationConfig"`
}

// The set of arguments for constructing a Registry resource.
type RegistryArgs struct {
	Credentials              RegistryCredentialArrayInput
	EventNotificationConfigs RegistryEventNotificationConfigItemArrayInput
	HttpConfig               RegistryHttpConfigPtrInput
	LogLevel                 pulumi.StringPtrInput
	MqttConfig               RegistryMqttConfigPtrInput
	Name                     pulumi.StringPtrInput
	Project                  pulumi.StringPtrInput
	Region                   pulumi.StringPtrInput
	StateNotificationConfig  RegistryStateNotificationConfigPtrInput
}

func (RegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryArgs)(nil)).Elem()
}
