// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containeranalysis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Container Registry Note. Each of these resources serves a different use case:
//
// * `containeranalysis.NoteIamPolicy`: Authoritative. Sets the IAM policy for the note and replaces any existing policy already attached.
// * `containeranalysis.NoteIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the note are preserved.
// * `containeranalysis.NoteIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the note are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `containeranalysis.NoteIamPolicy`: Retrieves the IAM policy for the note
//
// > **Note:** `containeranalysis.NoteIamPolicy` **cannot** be used in conjunction with `containeranalysis.NoteIamBinding` and `containeranalysis.NoteIamMember` or they will fight over what your policy should be.
//
// > **Note:** `containeranalysis.NoteIamBinding` resources **can be** used in conjunction with `containeranalysis.NoteIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_container\_analysis\_note\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/containeranalysis"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/containeranalysis.notes.occurrences.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = containeranalysis.NewNoteIamPolicy(ctx, "policy", &containeranalysis.NoteIamPolicyArgs{
//				Project:    pulumi.Any(google_container_analysis_note.Note.Project),
//				Note:       pulumi.Any(google_container_analysis_note.Note.Name),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_container\_analysis\_note\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/containeranalysis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := containeranalysis.NewNoteIamBinding(ctx, "binding", &containeranalysis.NoteIamBindingArgs{
//				Project: pulumi.Any(google_container_analysis_note.Note.Project),
//				Note:    pulumi.Any(google_container_analysis_note.Note.Name),
//				Role:    pulumi.String("roles/containeranalysis.notes.occurrences.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_container\_analysis\_note\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/containeranalysis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := containeranalysis.NewNoteIamMember(ctx, "member", &containeranalysis.NoteIamMemberArgs{
//				Project: pulumi.Any(google_container_analysis_note.Note.Project),
//				Note:    pulumi.Any(google_container_analysis_note.Note.Name),
//				Role:    pulumi.String("roles/containeranalysis.notes.occurrences.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/notes/{{name}} * {{project}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Container Registry note IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:containeranalysis/noteIamPolicy:NoteIamPolicy editor "projects/{{project}}/notes/{{note}} roles/containeranalysis.notes.occurrences.viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:containeranalysis/noteIamPolicy:NoteIamPolicy editor "projects/{{project}}/notes/{{note}} roles/containeranalysis.notes.occurrences.viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:containeranalysis/noteIamPolicy:NoteIamPolicy editor projects/{{project}}/notes/{{note}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type NoteIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Note pulumi.StringOutput `pulumi:"note"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewNoteIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewNoteIamPolicy(ctx *pulumi.Context,
	name string, args *NoteIamPolicyArgs, opts ...pulumi.ResourceOption) (*NoteIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Note == nil {
		return nil, errors.New("invalid value for required argument 'Note'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NoteIamPolicy
	err := ctx.RegisterResource("gcp:containeranalysis/noteIamPolicy:NoteIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNoteIamPolicy gets an existing NoteIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNoteIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NoteIamPolicyState, opts ...pulumi.ResourceOption) (*NoteIamPolicy, error) {
	var resource NoteIamPolicy
	err := ctx.ReadResource("gcp:containeranalysis/noteIamPolicy:NoteIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NoteIamPolicy resources.
type noteIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Note *string `pulumi:"note"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

type NoteIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Note pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (NoteIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*noteIamPolicyState)(nil)).Elem()
}

type noteIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Note string `pulumi:"note"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a NoteIamPolicy resource.
type NoteIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Note pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (NoteIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*noteIamPolicyArgs)(nil)).Elem()
}

type NoteIamPolicyInput interface {
	pulumi.Input

	ToNoteIamPolicyOutput() NoteIamPolicyOutput
	ToNoteIamPolicyOutputWithContext(ctx context.Context) NoteIamPolicyOutput
}

func (*NoteIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NoteIamPolicy)(nil)).Elem()
}

func (i *NoteIamPolicy) ToNoteIamPolicyOutput() NoteIamPolicyOutput {
	return i.ToNoteIamPolicyOutputWithContext(context.Background())
}

func (i *NoteIamPolicy) ToNoteIamPolicyOutputWithContext(ctx context.Context) NoteIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoteIamPolicyOutput)
}

// NoteIamPolicyArrayInput is an input type that accepts NoteIamPolicyArray and NoteIamPolicyArrayOutput values.
// You can construct a concrete instance of `NoteIamPolicyArrayInput` via:
//
//	NoteIamPolicyArray{ NoteIamPolicyArgs{...} }
type NoteIamPolicyArrayInput interface {
	pulumi.Input

	ToNoteIamPolicyArrayOutput() NoteIamPolicyArrayOutput
	ToNoteIamPolicyArrayOutputWithContext(context.Context) NoteIamPolicyArrayOutput
}

type NoteIamPolicyArray []NoteIamPolicyInput

func (NoteIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NoteIamPolicy)(nil)).Elem()
}

func (i NoteIamPolicyArray) ToNoteIamPolicyArrayOutput() NoteIamPolicyArrayOutput {
	return i.ToNoteIamPolicyArrayOutputWithContext(context.Background())
}

func (i NoteIamPolicyArray) ToNoteIamPolicyArrayOutputWithContext(ctx context.Context) NoteIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoteIamPolicyArrayOutput)
}

// NoteIamPolicyMapInput is an input type that accepts NoteIamPolicyMap and NoteIamPolicyMapOutput values.
// You can construct a concrete instance of `NoteIamPolicyMapInput` via:
//
//	NoteIamPolicyMap{ "key": NoteIamPolicyArgs{...} }
type NoteIamPolicyMapInput interface {
	pulumi.Input

	ToNoteIamPolicyMapOutput() NoteIamPolicyMapOutput
	ToNoteIamPolicyMapOutputWithContext(context.Context) NoteIamPolicyMapOutput
}

type NoteIamPolicyMap map[string]NoteIamPolicyInput

func (NoteIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NoteIamPolicy)(nil)).Elem()
}

func (i NoteIamPolicyMap) ToNoteIamPolicyMapOutput() NoteIamPolicyMapOutput {
	return i.ToNoteIamPolicyMapOutputWithContext(context.Background())
}

func (i NoteIamPolicyMap) ToNoteIamPolicyMapOutputWithContext(ctx context.Context) NoteIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoteIamPolicyMapOutput)
}

type NoteIamPolicyOutput struct{ *pulumi.OutputState }

func (NoteIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoteIamPolicy)(nil)).Elem()
}

func (o NoteIamPolicyOutput) ToNoteIamPolicyOutput() NoteIamPolicyOutput {
	return o
}

func (o NoteIamPolicyOutput) ToNoteIamPolicyOutputWithContext(ctx context.Context) NoteIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o NoteIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *NoteIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o NoteIamPolicyOutput) Note() pulumi.StringOutput {
	return o.ApplyT(func(v *NoteIamPolicy) pulumi.StringOutput { return v.Note }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o NoteIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *NoteIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o NoteIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NoteIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type NoteIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (NoteIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NoteIamPolicy)(nil)).Elem()
}

func (o NoteIamPolicyArrayOutput) ToNoteIamPolicyArrayOutput() NoteIamPolicyArrayOutput {
	return o
}

func (o NoteIamPolicyArrayOutput) ToNoteIamPolicyArrayOutputWithContext(ctx context.Context) NoteIamPolicyArrayOutput {
	return o
}

func (o NoteIamPolicyArrayOutput) Index(i pulumi.IntInput) NoteIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NoteIamPolicy {
		return vs[0].([]*NoteIamPolicy)[vs[1].(int)]
	}).(NoteIamPolicyOutput)
}

type NoteIamPolicyMapOutput struct{ *pulumi.OutputState }

func (NoteIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NoteIamPolicy)(nil)).Elem()
}

func (o NoteIamPolicyMapOutput) ToNoteIamPolicyMapOutput() NoteIamPolicyMapOutput {
	return o
}

func (o NoteIamPolicyMapOutput) ToNoteIamPolicyMapOutputWithContext(ctx context.Context) NoteIamPolicyMapOutput {
	return o
}

func (o NoteIamPolicyMapOutput) MapIndex(k pulumi.StringInput) NoteIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NoteIamPolicy {
		return vs[0].(map[string]*NoteIamPolicy)[vs[1].(string)]
	}).(NoteIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NoteIamPolicyInput)(nil)).Elem(), &NoteIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NoteIamPolicyArrayInput)(nil)).Elem(), NoteIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NoteIamPolicyMapInput)(nil)).Elem(), NoteIamPolicyMap{})
	pulumi.RegisterOutputType(NoteIamPolicyOutput{})
	pulumi.RegisterOutputType(NoteIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(NoteIamPolicyMapOutput{})
}
