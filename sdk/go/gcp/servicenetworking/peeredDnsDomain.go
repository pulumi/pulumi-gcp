// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicenetworking

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows management of a single peered DNS domain for an existing Google Cloud Platform project.
//
// When using Google Cloud DNS to manage internal DNS, create peered DNS domains to make your DNS available to services like Google Cloud Build.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := servicenetworking.NewPeeredDnsDomain(ctx, "name", &servicenetworking.PeeredDnsDomainArgs{
// 			DnsSuffix: pulumi.String("example.com."),
// 			Network:   pulumi.String("default"),
// 			Project:   pulumi.String("10000000"),
// 			Service:   pulumi.String("peering-service"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Project peered DNS domains can be imported using the `service`, `project`, `network` and `name`, e.g.
//
// ```sh
//  $ pulumi import gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain my_domain services/{service}/projects/{project}/global/networks/{network}/peeredDnsDomains/{name}
// ```
//
//  Where- `service` is the service connection, defaults to `servicenetworking.googleapis.com`. - `project` is the producer project name. - `network` is the consumer network name. - `name` is the name of your peered DNS domain.
type PeeredDnsDomain struct {
	pulumi.CustomResourceState

	// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
	DnsSuffix pulumi.StringOutput `pulumi:"dnsSuffix"`
	// Internal name used for the peered DNS domain.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network in the consumer project.
	Network pulumi.StringOutput `pulumi:"network"`
	// an identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
	Parent pulumi.StringOutput `pulumi:"parent"`
	// The producer project number. If not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
	Service pulumi.StringPtrOutput `pulumi:"service"`
}

// NewPeeredDnsDomain registers a new resource with the given unique name, arguments, and options.
func NewPeeredDnsDomain(ctx *pulumi.Context,
	name string, args *PeeredDnsDomainArgs, opts ...pulumi.ResourceOption) (*PeeredDnsDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsSuffix == nil {
		return nil, errors.New("invalid value for required argument 'DnsSuffix'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	var resource PeeredDnsDomain
	err := ctx.RegisterResource("gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeredDnsDomain gets an existing PeeredDnsDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeredDnsDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeredDnsDomainState, opts ...pulumi.ResourceOption) (*PeeredDnsDomain, error) {
	var resource PeeredDnsDomain
	err := ctx.ReadResource("gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeredDnsDomain resources.
type peeredDnsDomainState struct {
	// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// Internal name used for the peered DNS domain.
	Name *string `pulumi:"name"`
	// The network in the consumer project.
	Network *string `pulumi:"network"`
	// an identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
	Parent *string `pulumi:"parent"`
	// The producer project number. If not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
	Service *string `pulumi:"service"`
}

type PeeredDnsDomainState struct {
	// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
	DnsSuffix pulumi.StringPtrInput
	// Internal name used for the peered DNS domain.
	Name pulumi.StringPtrInput
	// The network in the consumer project.
	Network pulumi.StringPtrInput
	// an identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
	Parent pulumi.StringPtrInput
	// The producer project number. If not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
	Service pulumi.StringPtrInput
}

func (PeeredDnsDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeredDnsDomainState)(nil)).Elem()
}

type peeredDnsDomainArgs struct {
	// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
	DnsSuffix string `pulumi:"dnsSuffix"`
	// Internal name used for the peered DNS domain.
	Name *string `pulumi:"name"`
	// The network in the consumer project.
	Network string `pulumi:"network"`
	// The producer project number. If not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
	Service *string `pulumi:"service"`
}

// The set of arguments for constructing a PeeredDnsDomain resource.
type PeeredDnsDomainArgs struct {
	// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
	DnsSuffix pulumi.StringInput
	// Internal name used for the peered DNS domain.
	Name pulumi.StringPtrInput
	// The network in the consumer project.
	Network pulumi.StringInput
	// The producer project number. If not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
	Service pulumi.StringPtrInput
}

func (PeeredDnsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeredDnsDomainArgs)(nil)).Elem()
}

type PeeredDnsDomainInput interface {
	pulumi.Input

	ToPeeredDnsDomainOutput() PeeredDnsDomainOutput
	ToPeeredDnsDomainOutputWithContext(ctx context.Context) PeeredDnsDomainOutput
}

func (*PeeredDnsDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeredDnsDomain)(nil)).Elem()
}

func (i *PeeredDnsDomain) ToPeeredDnsDomainOutput() PeeredDnsDomainOutput {
	return i.ToPeeredDnsDomainOutputWithContext(context.Background())
}

func (i *PeeredDnsDomain) ToPeeredDnsDomainOutputWithContext(ctx context.Context) PeeredDnsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeredDnsDomainOutput)
}

// PeeredDnsDomainArrayInput is an input type that accepts PeeredDnsDomainArray and PeeredDnsDomainArrayOutput values.
// You can construct a concrete instance of `PeeredDnsDomainArrayInput` via:
//
//          PeeredDnsDomainArray{ PeeredDnsDomainArgs{...} }
type PeeredDnsDomainArrayInput interface {
	pulumi.Input

	ToPeeredDnsDomainArrayOutput() PeeredDnsDomainArrayOutput
	ToPeeredDnsDomainArrayOutputWithContext(context.Context) PeeredDnsDomainArrayOutput
}

type PeeredDnsDomainArray []PeeredDnsDomainInput

func (PeeredDnsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeredDnsDomain)(nil)).Elem()
}

func (i PeeredDnsDomainArray) ToPeeredDnsDomainArrayOutput() PeeredDnsDomainArrayOutput {
	return i.ToPeeredDnsDomainArrayOutputWithContext(context.Background())
}

func (i PeeredDnsDomainArray) ToPeeredDnsDomainArrayOutputWithContext(ctx context.Context) PeeredDnsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeredDnsDomainArrayOutput)
}

// PeeredDnsDomainMapInput is an input type that accepts PeeredDnsDomainMap and PeeredDnsDomainMapOutput values.
// You can construct a concrete instance of `PeeredDnsDomainMapInput` via:
//
//          PeeredDnsDomainMap{ "key": PeeredDnsDomainArgs{...} }
type PeeredDnsDomainMapInput interface {
	pulumi.Input

	ToPeeredDnsDomainMapOutput() PeeredDnsDomainMapOutput
	ToPeeredDnsDomainMapOutputWithContext(context.Context) PeeredDnsDomainMapOutput
}

type PeeredDnsDomainMap map[string]PeeredDnsDomainInput

func (PeeredDnsDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeredDnsDomain)(nil)).Elem()
}

func (i PeeredDnsDomainMap) ToPeeredDnsDomainMapOutput() PeeredDnsDomainMapOutput {
	return i.ToPeeredDnsDomainMapOutputWithContext(context.Background())
}

func (i PeeredDnsDomainMap) ToPeeredDnsDomainMapOutputWithContext(ctx context.Context) PeeredDnsDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeredDnsDomainMapOutput)
}

type PeeredDnsDomainOutput struct{ *pulumi.OutputState }

func (PeeredDnsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeredDnsDomain)(nil)).Elem()
}

func (o PeeredDnsDomainOutput) ToPeeredDnsDomainOutput() PeeredDnsDomainOutput {
	return o
}

func (o PeeredDnsDomainOutput) ToPeeredDnsDomainOutputWithContext(ctx context.Context) PeeredDnsDomainOutput {
	return o
}

// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
func (o PeeredDnsDomainOutput) DnsSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeredDnsDomain) pulumi.StringOutput { return v.DnsSuffix }).(pulumi.StringOutput)
}

// Internal name used for the peered DNS domain.
func (o PeeredDnsDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeredDnsDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network in the consumer project.
func (o PeeredDnsDomainOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeredDnsDomain) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// an identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
func (o PeeredDnsDomainOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeredDnsDomain) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// The producer project number. If not provided, the provider project is used.
func (o PeeredDnsDomainOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeredDnsDomain) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
func (o PeeredDnsDomainOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeredDnsDomain) pulumi.StringPtrOutput { return v.Service }).(pulumi.StringPtrOutput)
}

type PeeredDnsDomainArrayOutput struct{ *pulumi.OutputState }

func (PeeredDnsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeredDnsDomain)(nil)).Elem()
}

func (o PeeredDnsDomainArrayOutput) ToPeeredDnsDomainArrayOutput() PeeredDnsDomainArrayOutput {
	return o
}

func (o PeeredDnsDomainArrayOutput) ToPeeredDnsDomainArrayOutputWithContext(ctx context.Context) PeeredDnsDomainArrayOutput {
	return o
}

func (o PeeredDnsDomainArrayOutput) Index(i pulumi.IntInput) PeeredDnsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PeeredDnsDomain {
		return vs[0].([]*PeeredDnsDomain)[vs[1].(int)]
	}).(PeeredDnsDomainOutput)
}

type PeeredDnsDomainMapOutput struct{ *pulumi.OutputState }

func (PeeredDnsDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeredDnsDomain)(nil)).Elem()
}

func (o PeeredDnsDomainMapOutput) ToPeeredDnsDomainMapOutput() PeeredDnsDomainMapOutput {
	return o
}

func (o PeeredDnsDomainMapOutput) ToPeeredDnsDomainMapOutputWithContext(ctx context.Context) PeeredDnsDomainMapOutput {
	return o
}

func (o PeeredDnsDomainMapOutput) MapIndex(k pulumi.StringInput) PeeredDnsDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PeeredDnsDomain {
		return vs[0].(map[string]*PeeredDnsDomain)[vs[1].(string)]
	}).(PeeredDnsDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeeredDnsDomainInput)(nil)).Elem(), &PeeredDnsDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeredDnsDomainArrayInput)(nil)).Elem(), PeeredDnsDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeredDnsDomainMapInput)(nil)).Elem(), PeeredDnsDomainMap{})
	pulumi.RegisterOutputType(PeeredDnsDomainOutput{})
	pulumi.RegisterOutputType(PeeredDnsDomainArrayOutput{})
	pulumi.RegisterOutputType(PeeredDnsDomainMapOutput{})
}
