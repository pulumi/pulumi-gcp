// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accessapproval

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the email address of a folder's Access Approval service account.
//
// Each Google Cloud folder has a unique service account used by Access Approval.
// When using Access Approval with a
// [custom signing key](https://cloud.google.com/cloud-provider-access-management/access-approval/docs/review-approve-access-requests-custom-keys),
// this account needs to be granted the `cloudkms.signerVerifier` IAM role on the
// Cloud KMS key used to sign approvals.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accessapproval"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceAccount, err := accessapproval.GetFolderServiceAccount(ctx, &accessapproval.GetFolderServiceAccountArgs{
//				FolderId: "my-folder",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewCryptoKeyIAMMember(ctx, "iam", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.Any(cryptoKey.Id),
//				Role:        pulumi.String("roles/cloudkms.signerVerifier"),
//				Member:      pulumi.Sprintf("serviceAccount:%v", serviceAccount.AccountEmail),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFolderServiceAccount(ctx *pulumi.Context, args *GetFolderServiceAccountArgs, opts ...pulumi.InvokeOption) (*GetFolderServiceAccountResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &GetFolderServiceAccountResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &GetFolderServiceAccountResult{}, errors.New("DependsOn is not supported for direct form invoke GetFolderServiceAccount, use GetFolderServiceAccountOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &GetFolderServiceAccountResult{}, errors.New("DependsOnInputs is not supported for direct form invoke GetFolderServiceAccount, use GetFolderServiceAccountOutput instead")
	}
	var rv GetFolderServiceAccountResult
	err := ctx.Invoke("gcp:accessapproval/getFolderServiceAccount:getFolderServiceAccount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFolderServiceAccount.
type GetFolderServiceAccountArgs struct {
	// The folder ID the service account was created for.
	FolderId string `pulumi:"folderId"`
}

// A collection of values returned by getFolderServiceAccount.
type GetFolderServiceAccountResult struct {
	// The email address of the service account. This value is
	// often used to refer to the service account in order to grant IAM permissions.
	AccountEmail string `pulumi:"accountEmail"`
	FolderId     string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Access Approval service account resource name. Format is "folders/{folder_id}/serviceAccount".
	Name string `pulumi:"name"`
}

func GetFolderServiceAccountOutput(ctx *pulumi.Context, args GetFolderServiceAccountOutputArgs, opts ...pulumi.InvokeOption) GetFolderServiceAccountResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetFolderServiceAccountResultOutput, error) {
			args := v.(GetFolderServiceAccountArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetFolderServiceAccountResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:accessapproval/getFolderServiceAccount:getFolderServiceAccount", args, &rv, "", opts...)
			if err != nil {
				return GetFolderServiceAccountResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetFolderServiceAccountResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(GetFolderServiceAccountResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetFolderServiceAccountResultOutput), nil
			}
			return output, nil
		}).(GetFolderServiceAccountResultOutput)
}

// A collection of arguments for invoking getFolderServiceAccount.
type GetFolderServiceAccountOutputArgs struct {
	// The folder ID the service account was created for.
	FolderId pulumi.StringInput `pulumi:"folderId"`
}

func (GetFolderServiceAccountOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFolderServiceAccountArgs)(nil)).Elem()
}

// A collection of values returned by getFolderServiceAccount.
type GetFolderServiceAccountResultOutput struct{ *pulumi.OutputState }

func (GetFolderServiceAccountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFolderServiceAccountResult)(nil)).Elem()
}

func (o GetFolderServiceAccountResultOutput) ToGetFolderServiceAccountResultOutput() GetFolderServiceAccountResultOutput {
	return o
}

func (o GetFolderServiceAccountResultOutput) ToGetFolderServiceAccountResultOutputWithContext(ctx context.Context) GetFolderServiceAccountResultOutput {
	return o
}

// The email address of the service account. This value is
// often used to refer to the service account in order to grant IAM permissions.
func (o GetFolderServiceAccountResultOutput) AccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetFolderServiceAccountResult) string { return v.AccountEmail }).(pulumi.StringOutput)
}

func (o GetFolderServiceAccountResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFolderServiceAccountResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFolderServiceAccountResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFolderServiceAccountResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Access Approval service account resource name. Format is "folders/{folder_id}/serviceAccount".
func (o GetFolderServiceAccountResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFolderServiceAccountResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFolderServiceAccountResultOutput{})
}
