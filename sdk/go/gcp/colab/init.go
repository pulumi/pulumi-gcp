// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package colab

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gcp:colab/notebookExecution:NotebookExecution":
		r = &NotebookExecution{}
	case "gcp:colab/runtime:Runtime":
		r = &Runtime{}
	case "gcp:colab/runtimeTemplate:RuntimeTemplate":
		r = &RuntimeTemplate{}
	case "gcp:colab/runtimeTemplateIamBinding:RuntimeTemplateIamBinding":
		r = &RuntimeTemplateIamBinding{}
	case "gcp:colab/runtimeTemplateIamMember:RuntimeTemplateIamMember":
		r = &RuntimeTemplateIamMember{}
	case "gcp:colab/runtimeTemplateIamPolicy:RuntimeTemplateIamPolicy":
		r = &RuntimeTemplateIamPolicy{}
	case "gcp:colab/schedule:Schedule":
		r = &Schedule{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"gcp",
		"colab/notebookExecution",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"colab/runtime",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"colab/runtimeTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"colab/runtimeTemplateIamBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"colab/runtimeTemplateIamMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"colab/runtimeTemplateIamPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"colab/schedule",
		&module{version},
	)
}
