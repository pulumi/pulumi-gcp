// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package colab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// 'A runtime template is a VM configuration that specifies a machine type and other characteristics of the VM,
//
//	as well as common settings such as the network and whether public internet access is enabled. When you create
//	a runtime, its VM is created according to the specifications of a runtime template.'
//
// To get more information about RuntimeTemplate, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookRuntimeTemplates)
// * How-to Guides
//   - [Create a runtime template](https://cloud.google.com/colab/docs/create-runtime-template)
//
// ## Example Usage
//
// ### Colab Runtime Template Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := colab.NewRuntimeTemplate(ctx, "runtime-template", &colab.RuntimeTemplateArgs{
//				Name:        pulumi.String("colab-runtime-template"),
//				DisplayName: pulumi.String("Runtime template basic"),
//				Location:    pulumi.String("us-central1"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType: pulumi.String("e2-standard-4"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Colab Runtime Template No Name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := colab.NewRuntimeTemplate(ctx, "runtime-template", &colab.RuntimeTemplateArgs{
//				DisplayName: pulumi.String("Runtime template no name"),
//				Location:    pulumi.String("us-central1"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType: pulumi.String("e2-standard-4"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Colab Runtime Template Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myNetwork, err := compute.NewNetwork(ctx, "my_network", &compute.NetworkArgs{
//				Name:                  pulumi.String("colab-test-default"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			mySubnetwork, err := compute.NewSubnetwork(ctx, "my_subnetwork", &compute.SubnetworkArgs{
//				Name:        pulumi.String("colab-test-default"),
//				Network:     myNetwork.ID(),
//				Region:      pulumi.String("us-central1"),
//				IpCidrRange: pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewRuntimeTemplate(ctx, "runtime-template", &colab.RuntimeTemplateArgs{
//				Name:        pulumi.String("colab-runtime-template"),
//				DisplayName: pulumi.String("Runtime template full"),
//				Location:    pulumi.String("us-central1"),
//				Description: pulumi.String("Full runtime template"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType:      pulumi.String("n1-standard-2"),
//					AcceleratorType:  pulumi.String("NVIDIA_TESLA_T4"),
//					AcceleratorCount: pulumi.Int(1),
//				},
//				DataPersistentDiskSpec: &colab.RuntimeTemplateDataPersistentDiskSpecArgs{
//					DiskType:   pulumi.String("pd-standard"),
//					DiskSizeGb: pulumi.String("200"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//					Network:              myNetwork.ID(),
//					Subnetwork:           mySubnetwork.ID(),
//				},
//				Labels: pulumi.StringMap{
//					"k": pulumi.String("val"),
//				},
//				IdleShutdownConfig: &colab.RuntimeTemplateIdleShutdownConfigArgs{
//					IdleTimeout: pulumi.String("3600s"),
//				},
//				EucConfig: &colab.RuntimeTemplateEucConfigArgs{
//					EucDisabled: pulumi.Bool(true),
//				},
//				ShieldedVmConfig: &colab.RuntimeTemplateShieldedVmConfigArgs{
//					EnableSecureBoot: pulumi.Bool(true),
//				},
//				NetworkTags: pulumi.StringArray{
//					pulumi.String("abc"),
//					pulumi.String("def"),
//				},
//				EncryptionSpec: &colab.RuntimeTemplateEncryptionSpecArgs{
//					KmsKeyName: pulumi.String("my-crypto-key"),
//				},
//				SoftwareConfig: &colab.RuntimeTemplateSoftwareConfigArgs{
//					Envs: colab.RuntimeTemplateSoftwareConfigEnvArray{
//						&colab.RuntimeTemplateSoftwareConfigEnvArgs{
//							Name:  pulumi.String("TEST"),
//							Value: pulumi.String("1"),
//						},
//					},
//					PostStartupScriptConfig: &colab.RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgs{
//						PostStartupScript:         pulumi.String("echo 'hello world'"),
//						PostStartupScriptUrl:      pulumi.String("gs://colab-enterprise-pss-secure/secure_pss.sh"),
//						PostStartupScriptBehavior: pulumi.String("RUN_ONCE"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RuntimeTemplate can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, RuntimeTemplate can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default {{location}}/{{name}}
// ```
type RuntimeTemplate struct {
	pulumi.CustomResourceState

	// The configuration for the data disk of the runtime.
	// Structure is documented below.
	DataPersistentDiskSpec RuntimeTemplateDataPersistentDiskSpecOutput `pulumi:"dataPersistentDiskSpec"`
	// The description of the Runtime Template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Required. The display name of the Runtime Template.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Customer-managed encryption key spec for the notebook runtime.
	// Structure is documented below.
	EncryptionSpec RuntimeTemplateEncryptionSpecPtrOutput `pulumi:"encryptionSpec"`
	// EUC configuration of the NotebookRuntimeTemplate.
	// Structure is documented below.
	EucConfig RuntimeTemplateEucConfigOutput `pulumi:"eucConfig"`
	// Notebook Idle Shutdown configuration for the runtime.
	// Structure is documented below.
	IdleShutdownConfig RuntimeTemplateIdleShutdownConfigOutput `pulumi:"idleShutdownConfig"`
	// Labels to identify and group the runtime template.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// 'The machine configuration of the runtime.'
	// Structure is documented below.
	MachineSpec RuntimeTemplateMachineSpecOutput `pulumi:"machineSpec"`
	// The resource name of the Runtime Template
	Name pulumi.StringOutput `pulumi:"name"`
	// The network configuration for the runtime.
	// Structure is documented below.
	NetworkSpec RuntimeTemplateNetworkSpecOutput `pulumi:"networkSpec"`
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags pulumi.StringArrayOutput `pulumi:"networkTags"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Runtime Shielded VM spec.
	// Structure is documented below.
	ShieldedVmConfig RuntimeTemplateShieldedVmConfigOutput `pulumi:"shieldedVmConfig"`
	// The notebook software configuration of the notebook runtime.
	// Structure is documented below.
	SoftwareConfig RuntimeTemplateSoftwareConfigPtrOutput `pulumi:"softwareConfig"`
}

// NewRuntimeTemplate registers a new resource with the given unique name, arguments, and options.
func NewRuntimeTemplate(ctx *pulumi.Context,
	name string, args *RuntimeTemplateArgs, opts ...pulumi.ResourceOption) (*RuntimeTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuntimeTemplate
	err := ctx.RegisterResource("gcp:colab/runtimeTemplate:RuntimeTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuntimeTemplate gets an existing RuntimeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuntimeTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuntimeTemplateState, opts ...pulumi.ResourceOption) (*RuntimeTemplate, error) {
	var resource RuntimeTemplate
	err := ctx.ReadResource("gcp:colab/runtimeTemplate:RuntimeTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuntimeTemplate resources.
type runtimeTemplateState struct {
	// The configuration for the data disk of the runtime.
	// Structure is documented below.
	DataPersistentDiskSpec *RuntimeTemplateDataPersistentDiskSpec `pulumi:"dataPersistentDiskSpec"`
	// The description of the Runtime Template.
	Description *string `pulumi:"description"`
	// Required. The display name of the Runtime Template.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Customer-managed encryption key spec for the notebook runtime.
	// Structure is documented below.
	EncryptionSpec *RuntimeTemplateEncryptionSpec `pulumi:"encryptionSpec"`
	// EUC configuration of the NotebookRuntimeTemplate.
	// Structure is documented below.
	EucConfig *RuntimeTemplateEucConfig `pulumi:"eucConfig"`
	// Notebook Idle Shutdown configuration for the runtime.
	// Structure is documented below.
	IdleShutdownConfig *RuntimeTemplateIdleShutdownConfig `pulumi:"idleShutdownConfig"`
	// Labels to identify and group the runtime template.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location *string `pulumi:"location"`
	// 'The machine configuration of the runtime.'
	// Structure is documented below.
	MachineSpec *RuntimeTemplateMachineSpec `pulumi:"machineSpec"`
	// The resource name of the Runtime Template
	Name *string `pulumi:"name"`
	// The network configuration for the runtime.
	// Structure is documented below.
	NetworkSpec *RuntimeTemplateNetworkSpec `pulumi:"networkSpec"`
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags []string `pulumi:"networkTags"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Runtime Shielded VM spec.
	// Structure is documented below.
	ShieldedVmConfig *RuntimeTemplateShieldedVmConfig `pulumi:"shieldedVmConfig"`
	// The notebook software configuration of the notebook runtime.
	// Structure is documented below.
	SoftwareConfig *RuntimeTemplateSoftwareConfig `pulumi:"softwareConfig"`
}

type RuntimeTemplateState struct {
	// The configuration for the data disk of the runtime.
	// Structure is documented below.
	DataPersistentDiskSpec RuntimeTemplateDataPersistentDiskSpecPtrInput
	// The description of the Runtime Template.
	Description pulumi.StringPtrInput
	// Required. The display name of the Runtime Template.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Customer-managed encryption key spec for the notebook runtime.
	// Structure is documented below.
	EncryptionSpec RuntimeTemplateEncryptionSpecPtrInput
	// EUC configuration of the NotebookRuntimeTemplate.
	// Structure is documented below.
	EucConfig RuntimeTemplateEucConfigPtrInput
	// Notebook Idle Shutdown configuration for the runtime.
	// Structure is documented below.
	IdleShutdownConfig RuntimeTemplateIdleShutdownConfigPtrInput
	// Labels to identify and group the runtime template.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location pulumi.StringPtrInput
	// 'The machine configuration of the runtime.'
	// Structure is documented below.
	MachineSpec RuntimeTemplateMachineSpecPtrInput
	// The resource name of the Runtime Template
	Name pulumi.StringPtrInput
	// The network configuration for the runtime.
	// Structure is documented below.
	NetworkSpec RuntimeTemplateNetworkSpecPtrInput
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Runtime Shielded VM spec.
	// Structure is documented below.
	ShieldedVmConfig RuntimeTemplateShieldedVmConfigPtrInput
	// The notebook software configuration of the notebook runtime.
	// Structure is documented below.
	SoftwareConfig RuntimeTemplateSoftwareConfigPtrInput
}

func (RuntimeTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeTemplateState)(nil)).Elem()
}

type runtimeTemplateArgs struct {
	// The configuration for the data disk of the runtime.
	// Structure is documented below.
	DataPersistentDiskSpec *RuntimeTemplateDataPersistentDiskSpec `pulumi:"dataPersistentDiskSpec"`
	// The description of the Runtime Template.
	Description *string `pulumi:"description"`
	// Required. The display name of the Runtime Template.
	DisplayName string `pulumi:"displayName"`
	// Customer-managed encryption key spec for the notebook runtime.
	// Structure is documented below.
	EncryptionSpec *RuntimeTemplateEncryptionSpec `pulumi:"encryptionSpec"`
	// EUC configuration of the NotebookRuntimeTemplate.
	// Structure is documented below.
	EucConfig *RuntimeTemplateEucConfig `pulumi:"eucConfig"`
	// Notebook Idle Shutdown configuration for the runtime.
	// Structure is documented below.
	IdleShutdownConfig *RuntimeTemplateIdleShutdownConfig `pulumi:"idleShutdownConfig"`
	// Labels to identify and group the runtime template.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location string `pulumi:"location"`
	// 'The machine configuration of the runtime.'
	// Structure is documented below.
	MachineSpec *RuntimeTemplateMachineSpec `pulumi:"machineSpec"`
	// The resource name of the Runtime Template
	Name *string `pulumi:"name"`
	// The network configuration for the runtime.
	// Structure is documented below.
	NetworkSpec *RuntimeTemplateNetworkSpec `pulumi:"networkSpec"`
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags []string `pulumi:"networkTags"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Runtime Shielded VM spec.
	// Structure is documented below.
	ShieldedVmConfig *RuntimeTemplateShieldedVmConfig `pulumi:"shieldedVmConfig"`
	// The notebook software configuration of the notebook runtime.
	// Structure is documented below.
	SoftwareConfig *RuntimeTemplateSoftwareConfig `pulumi:"softwareConfig"`
}

// The set of arguments for constructing a RuntimeTemplate resource.
type RuntimeTemplateArgs struct {
	// The configuration for the data disk of the runtime.
	// Structure is documented below.
	DataPersistentDiskSpec RuntimeTemplateDataPersistentDiskSpecPtrInput
	// The description of the Runtime Template.
	Description pulumi.StringPtrInput
	// Required. The display name of the Runtime Template.
	DisplayName pulumi.StringInput
	// Customer-managed encryption key spec for the notebook runtime.
	// Structure is documented below.
	EncryptionSpec RuntimeTemplateEncryptionSpecPtrInput
	// EUC configuration of the NotebookRuntimeTemplate.
	// Structure is documented below.
	EucConfig RuntimeTemplateEucConfigPtrInput
	// Notebook Idle Shutdown configuration for the runtime.
	// Structure is documented below.
	IdleShutdownConfig RuntimeTemplateIdleShutdownConfigPtrInput
	// Labels to identify and group the runtime template.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location pulumi.StringInput
	// 'The machine configuration of the runtime.'
	// Structure is documented below.
	MachineSpec RuntimeTemplateMachineSpecPtrInput
	// The resource name of the Runtime Template
	Name pulumi.StringPtrInput
	// The network configuration for the runtime.
	// Structure is documented below.
	NetworkSpec RuntimeTemplateNetworkSpecPtrInput
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Runtime Shielded VM spec.
	// Structure is documented below.
	ShieldedVmConfig RuntimeTemplateShieldedVmConfigPtrInput
	// The notebook software configuration of the notebook runtime.
	// Structure is documented below.
	SoftwareConfig RuntimeTemplateSoftwareConfigPtrInput
}

func (RuntimeTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeTemplateArgs)(nil)).Elem()
}

type RuntimeTemplateInput interface {
	pulumi.Input

	ToRuntimeTemplateOutput() RuntimeTemplateOutput
	ToRuntimeTemplateOutputWithContext(ctx context.Context) RuntimeTemplateOutput
}

func (*RuntimeTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeTemplate)(nil)).Elem()
}

func (i *RuntimeTemplate) ToRuntimeTemplateOutput() RuntimeTemplateOutput {
	return i.ToRuntimeTemplateOutputWithContext(context.Background())
}

func (i *RuntimeTemplate) ToRuntimeTemplateOutputWithContext(ctx context.Context) RuntimeTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeTemplateOutput)
}

// RuntimeTemplateArrayInput is an input type that accepts RuntimeTemplateArray and RuntimeTemplateArrayOutput values.
// You can construct a concrete instance of `RuntimeTemplateArrayInput` via:
//
//	RuntimeTemplateArray{ RuntimeTemplateArgs{...} }
type RuntimeTemplateArrayInput interface {
	pulumi.Input

	ToRuntimeTemplateArrayOutput() RuntimeTemplateArrayOutput
	ToRuntimeTemplateArrayOutputWithContext(context.Context) RuntimeTemplateArrayOutput
}

type RuntimeTemplateArray []RuntimeTemplateInput

func (RuntimeTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuntimeTemplate)(nil)).Elem()
}

func (i RuntimeTemplateArray) ToRuntimeTemplateArrayOutput() RuntimeTemplateArrayOutput {
	return i.ToRuntimeTemplateArrayOutputWithContext(context.Background())
}

func (i RuntimeTemplateArray) ToRuntimeTemplateArrayOutputWithContext(ctx context.Context) RuntimeTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeTemplateArrayOutput)
}

// RuntimeTemplateMapInput is an input type that accepts RuntimeTemplateMap and RuntimeTemplateMapOutput values.
// You can construct a concrete instance of `RuntimeTemplateMapInput` via:
//
//	RuntimeTemplateMap{ "key": RuntimeTemplateArgs{...} }
type RuntimeTemplateMapInput interface {
	pulumi.Input

	ToRuntimeTemplateMapOutput() RuntimeTemplateMapOutput
	ToRuntimeTemplateMapOutputWithContext(context.Context) RuntimeTemplateMapOutput
}

type RuntimeTemplateMap map[string]RuntimeTemplateInput

func (RuntimeTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuntimeTemplate)(nil)).Elem()
}

func (i RuntimeTemplateMap) ToRuntimeTemplateMapOutput() RuntimeTemplateMapOutput {
	return i.ToRuntimeTemplateMapOutputWithContext(context.Background())
}

func (i RuntimeTemplateMap) ToRuntimeTemplateMapOutputWithContext(ctx context.Context) RuntimeTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeTemplateMapOutput)
}

type RuntimeTemplateOutput struct{ *pulumi.OutputState }

func (RuntimeTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeTemplate)(nil)).Elem()
}

func (o RuntimeTemplateOutput) ToRuntimeTemplateOutput() RuntimeTemplateOutput {
	return o
}

func (o RuntimeTemplateOutput) ToRuntimeTemplateOutputWithContext(ctx context.Context) RuntimeTemplateOutput {
	return o
}

// The configuration for the data disk of the runtime.
// Structure is documented below.
func (o RuntimeTemplateOutput) DataPersistentDiskSpec() RuntimeTemplateDataPersistentDiskSpecOutput {
	return o.ApplyT(func(v *RuntimeTemplate) RuntimeTemplateDataPersistentDiskSpecOutput { return v.DataPersistentDiskSpec }).(RuntimeTemplateDataPersistentDiskSpecOutput)
}

// The description of the Runtime Template.
func (o RuntimeTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Required. The display name of the Runtime Template.
func (o RuntimeTemplateOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o RuntimeTemplateOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Customer-managed encryption key spec for the notebook runtime.
// Structure is documented below.
func (o RuntimeTemplateOutput) EncryptionSpec() RuntimeTemplateEncryptionSpecPtrOutput {
	return o.ApplyT(func(v *RuntimeTemplate) RuntimeTemplateEncryptionSpecPtrOutput { return v.EncryptionSpec }).(RuntimeTemplateEncryptionSpecPtrOutput)
}

// EUC configuration of the NotebookRuntimeTemplate.
// Structure is documented below.
func (o RuntimeTemplateOutput) EucConfig() RuntimeTemplateEucConfigOutput {
	return o.ApplyT(func(v *RuntimeTemplate) RuntimeTemplateEucConfigOutput { return v.EucConfig }).(RuntimeTemplateEucConfigOutput)
}

// Notebook Idle Shutdown configuration for the runtime.
// Structure is documented below.
func (o RuntimeTemplateOutput) IdleShutdownConfig() RuntimeTemplateIdleShutdownConfigOutput {
	return o.ApplyT(func(v *RuntimeTemplate) RuntimeTemplateIdleShutdownConfigOutput { return v.IdleShutdownConfig }).(RuntimeTemplateIdleShutdownConfigOutput)
}

// Labels to identify and group the runtime template.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o RuntimeTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location for the resource: https://cloud.google.com/colab/docs/locations
//
// ***
func (o RuntimeTemplateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// 'The machine configuration of the runtime.'
// Structure is documented below.
func (o RuntimeTemplateOutput) MachineSpec() RuntimeTemplateMachineSpecOutput {
	return o.ApplyT(func(v *RuntimeTemplate) RuntimeTemplateMachineSpecOutput { return v.MachineSpec }).(RuntimeTemplateMachineSpecOutput)
}

// The resource name of the Runtime Template
func (o RuntimeTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network configuration for the runtime.
// Structure is documented below.
func (o RuntimeTemplateOutput) NetworkSpec() RuntimeTemplateNetworkSpecOutput {
	return o.ApplyT(func(v *RuntimeTemplate) RuntimeTemplateNetworkSpecOutput { return v.NetworkSpec }).(RuntimeTemplateNetworkSpecOutput)
}

// Applies the given Compute Engine tags to the runtime.
func (o RuntimeTemplateOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringArrayOutput { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RuntimeTemplateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o RuntimeTemplateOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RuntimeTemplate) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Runtime Shielded VM spec.
// Structure is documented below.
func (o RuntimeTemplateOutput) ShieldedVmConfig() RuntimeTemplateShieldedVmConfigOutput {
	return o.ApplyT(func(v *RuntimeTemplate) RuntimeTemplateShieldedVmConfigOutput { return v.ShieldedVmConfig }).(RuntimeTemplateShieldedVmConfigOutput)
}

// The notebook software configuration of the notebook runtime.
// Structure is documented below.
func (o RuntimeTemplateOutput) SoftwareConfig() RuntimeTemplateSoftwareConfigPtrOutput {
	return o.ApplyT(func(v *RuntimeTemplate) RuntimeTemplateSoftwareConfigPtrOutput { return v.SoftwareConfig }).(RuntimeTemplateSoftwareConfigPtrOutput)
}

type RuntimeTemplateArrayOutput struct{ *pulumi.OutputState }

func (RuntimeTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuntimeTemplate)(nil)).Elem()
}

func (o RuntimeTemplateArrayOutput) ToRuntimeTemplateArrayOutput() RuntimeTemplateArrayOutput {
	return o
}

func (o RuntimeTemplateArrayOutput) ToRuntimeTemplateArrayOutputWithContext(ctx context.Context) RuntimeTemplateArrayOutput {
	return o
}

func (o RuntimeTemplateArrayOutput) Index(i pulumi.IntInput) RuntimeTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuntimeTemplate {
		return vs[0].([]*RuntimeTemplate)[vs[1].(int)]
	}).(RuntimeTemplateOutput)
}

type RuntimeTemplateMapOutput struct{ *pulumi.OutputState }

func (RuntimeTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuntimeTemplate)(nil)).Elem()
}

func (o RuntimeTemplateMapOutput) ToRuntimeTemplateMapOutput() RuntimeTemplateMapOutput {
	return o
}

func (o RuntimeTemplateMapOutput) ToRuntimeTemplateMapOutputWithContext(ctx context.Context) RuntimeTemplateMapOutput {
	return o
}

func (o RuntimeTemplateMapOutput) MapIndex(k pulumi.StringInput) RuntimeTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuntimeTemplate {
		return vs[0].(map[string]*RuntimeTemplate)[vs[1].(string)]
	}).(RuntimeTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeTemplateInput)(nil)).Elem(), &RuntimeTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeTemplateArrayInput)(nil)).Elem(), RuntimeTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeTemplateMapInput)(nil)).Elem(), RuntimeTemplateMap{})
	pulumi.RegisterOutputType(RuntimeTemplateOutput{})
	pulumi.RegisterOutputType(RuntimeTemplateArrayOutput{})
	pulumi.RegisterOutputType(RuntimeTemplateMapOutput{})
}
