// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package colab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// 'An instance of a notebook Execution'
//
// To get more information about NotebookExecution, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookExecutionJobs)
// * How-to Guides
//   - [Schedule a notebook run](https://cloud.google.com/colab/docs/schedule-notebook-run)
//
// ## Example Usage
//
// ### Colab Notebook Execution Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myRuntimeTemplate, err := colab.NewRuntimeTemplate(ctx, "my_runtime_template", &colab.RuntimeTemplateArgs{
//				Name:        pulumi.String("runtime-template-name"),
//				DisplayName: pulumi.String("Runtime template"),
//				Location:    pulumi.String("us-central1"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType: pulumi.String("e2-standard-4"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			outputBucket, err := storage.NewBucket(ctx, "output_bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("my_bucket"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			invokeBase64encode, err := std.Base64encode(ctx, &std.Base64encodeArgs{
//				Input: `    {
//	      "cells": [
//	        {
//	          "cell_type": "code",
//	          "execution_count": null,
//	          "metadata": {},
//	          "outputs": [],
//	          "source": [
//	            "print(\"Hello, World!\")"
//	          ]
//	        }
//	      ],
//	      "metadata": {
//	        "kernelspec": {
//	          "display_name": "Python 3",
//	          "language": "python",
//	          "name": "python3"
//	        },
//	        "language_info": {
//	          "codemirror_mode": {
//	            "name": "ipython",
//	            "version": 3
//	          },
//	          "file_extension": ".py",
//	          "mimetype": "text/x-python",
//	          "name": "python",
//	          "nbconvert_exporter": "python",
//	          "pygments_lexer": "ipython3",
//	          "version": "3.8.5"
//	        }
//	      },
//	      "nbformat": 4,
//	      "nbformat_minor": 4
//	    }
//
// `,
//
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewNotebookExecution(ctx, "notebook-execution", &colab.NotebookExecutionArgs{
//				DisplayName: pulumi.String("Notebook execution basic"),
//				Location:    pulumi.String("us-central1"),
//				DirectNotebookSource: &colab.NotebookExecutionDirectNotebookSourceArgs{
//					Content: pulumi.String(invokeBase64encode.Result),
//				},
//				NotebookRuntimeTemplateResourceName: pulumi.All(myRuntimeTemplate.Project, myRuntimeTemplate.Location, myRuntimeTemplate.Name).ApplyT(func(_args []interface{}) (string, error) {
//					project := _args[0].(string)
//					location := _args[1].(string)
//					name := _args[2].(string)
//					return fmt.Sprintf("projects/%v/locations/%v/notebookRuntimeTemplates/%v", project, location, name), nil
//				}).(pulumi.StringOutput),
//				GcsOutputUri: outputBucket.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("gs://%v", name), nil
//				}).(pulumi.StringOutput),
//				ServiceAccount: pulumi.String("my@service-account.com"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myRuntimeTemplate,
//				outputBucket,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Colab Notebook Execution Full
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myRuntimeTemplate, err := colab.NewRuntimeTemplate(ctx, "my_runtime_template", &colab.RuntimeTemplateArgs{
//				Name:        pulumi.String("runtime-template-name"),
//				DisplayName: pulumi.String("Runtime template"),
//				Location:    pulumi.String("us-central1"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType: pulumi.String("e2-standard-4"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			outputBucket, err := storage.NewBucket(ctx, "output_bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("my_bucket"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			notebook, err := storage.NewBucketObject(ctx, "notebook", &storage.BucketObjectArgs{
//				Name:   pulumi.String("hello_world.ipynb"),
//				Bucket: outputBucket.Name,
//				Content: pulumi.String(`    {
//	      "cells": [
//	        {
//	          "cell_type": "code",
//	          "execution_count": null,
//	          "metadata": {},
//	          "outputs": [],
//	          "source": [
//	            "print(\"Hello, World!\")"
//	          ]
//	        }
//	      ],
//	      "metadata": {
//	        "kernelspec": {
//	          "display_name": "Python 3",
//	          "language": "python",
//	          "name": "python3"
//	        },
//	        "language_info": {
//	          "codemirror_mode": {
//	            "name": "ipython",
//	            "version": 3
//	          },
//	          "file_extension": ".py",
//	          "mimetype": "text/x-python",
//	          "name": "python",
//	          "nbconvert_exporter": "python",
//	          "pygments_lexer": "ipython3",
//	          "version": "3.8.5"
//	        }
//	      },
//	      "nbformat": 4,
//	      "nbformat_minor": 4
//	    }
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewNotebookExecution(ctx, "notebook-execution", &colab.NotebookExecutionArgs{
//				NotebookExecutionJobId: pulumi.String("colab-notebook-execution"),
//				DisplayName:            pulumi.String("Notebook execution full"),
//				Location:               pulumi.String("us-central1"),
//				ExecutionTimeout:       pulumi.String("86400s"),
//				GcsNotebookSource: &colab.NotebookExecutionGcsNotebookSourceArgs{
//					Uri: pulumi.All(notebook.Bucket, notebook.Name).ApplyT(func(_args []interface{}) (string, error) {
//						bucket := _args[0].(string)
//						name := _args[1].(string)
//						return fmt.Sprintf("gs://%v/%v", bucket, name), nil
//					}).(pulumi.StringOutput),
//					Generation: notebook.Generation,
//				},
//				ServiceAccount: pulumi.String("my@service-account.com"),
//				GcsOutputUri: outputBucket.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("gs://%v", name), nil
//				}).(pulumi.StringOutput),
//				NotebookRuntimeTemplateResourceName: pulumi.All(myRuntimeTemplate.Project, myRuntimeTemplate.Location, myRuntimeTemplate.Name).ApplyT(func(_args []interface{}) (string, error) {
//					project := _args[0].(string)
//					location := _args[1].(string)
//					name := _args[2].(string)
//					return fmt.Sprintf("projects/%v/locations/%v/notebookRuntimeTemplates/%v", project, location, name), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				notebook,
//				outputBucket,
//				myRuntimeTemplate,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Colab Notebook Execution Dataform
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataform"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myRuntimeTemplate, err := colab.NewRuntimeTemplate(ctx, "my_runtime_template", &colab.RuntimeTemplateArgs{
//				Name:        pulumi.String("runtime-template-name"),
//				DisplayName: pulumi.String("Runtime template"),
//				Location:    pulumi.String("us-central1"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType: pulumi.String("e2-standard-4"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			outputBucket, err := storage.NewBucket(ctx, "output_bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("my_bucket"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			secret, err := secretmanager.NewSecret(ctx, "secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			secretVersion, err := secretmanager.NewSecretVersion(ctx, "secret_version", &secretmanager.SecretVersionArgs{
//				Secret:     secret.ID(),
//				SecretData: pulumi.String("secret-data"),
//			})
//			if err != nil {
//				return err
//			}
//			dataformRepository, err := dataform.NewRepository(ctx, "dataform_repository", &dataform.RepositoryArgs{
//				Name:                                   pulumi.String("dataform-repository"),
//				DisplayName:                            pulumi.String("dataform_repository"),
//				NpmrcEnvironmentVariablesSecretVersion: secretVersion.ID(),
//				KmsKeyName:                             pulumi.String("my-crypto-key"),
//				Labels: pulumi.StringMap{
//					"label_foo1": pulumi.String("label-bar1"),
//				},
//				GitRemoteSettings: &dataform.RepositoryGitRemoteSettingsArgs{
//					Url:                              pulumi.String("https://github.com/OWNER/REPOSITORY.git"),
//					DefaultBranch:                    pulumi.String("main"),
//					AuthenticationTokenSecretVersion: secretVersion.ID(),
//				},
//				WorkspaceCompilationOverrides: &dataform.RepositoryWorkspaceCompilationOverridesArgs{
//					DefaultDatabase: pulumi.String("database"),
//					SchemaSuffix:    pulumi.String("_suffix"),
//					TablePrefix:     pulumi.String("prefix_"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewNotebookExecution(ctx, "notebook-execution", &colab.NotebookExecutionArgs{
//				DisplayName: pulumi.String("Notebook execution Dataform"),
//				Location:    pulumi.String("us-central1"),
//				DataformRepositorySource: &colab.NotebookExecutionDataformRepositorySourceArgs{
//					CommitSha: pulumi.String("randomsha123"),
//					DataformRepositoryResourceName: pulumi.All(myRuntimeTemplate.Project, myRuntimeTemplate.Location, dataformRepository.Name).ApplyT(func(_args []interface{}) (string, error) {
//						project := _args[0].(string)
//						location := _args[1].(string)
//						name := _args[2].(string)
//						return fmt.Sprintf("projects/%v/locations/%v/repositories/%v", project, location, name), nil
//					}).(pulumi.StringOutput),
//				},
//				NotebookRuntimeTemplateResourceName: pulumi.All(myRuntimeTemplate.Project, myRuntimeTemplate.Location, myRuntimeTemplate.Name).ApplyT(func(_args []interface{}) (string, error) {
//					project := _args[0].(string)
//					location := _args[1].(string)
//					name := _args[2].(string)
//					return fmt.Sprintf("projects/%v/locations/%v/notebookRuntimeTemplates/%v", project, location, name), nil
//				}).(pulumi.StringOutput),
//				GcsOutputUri: outputBucket.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("gs://%v", name), nil
//				}).(pulumi.StringOutput),
//				ServiceAccount: pulumi.String("my@service-account.com"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myRuntimeTemplate,
//				outputBucket,
//				secretVersion,
//				dataformRepository,
//				secret,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NotebookExecution can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}`
//
// * `{{project}}/{{location}}/{{notebook_execution_job_id}}`
//
// * `{{location}}/{{notebook_execution_job_id}}`
//
// When using the `pulumi import` command, NotebookExecution can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:colab/notebookExecution:NotebookExecution default projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}
// ```
//
// ```sh
// $ pulumi import gcp:colab/notebookExecution:NotebookExecution default {{project}}/{{location}}/{{notebook_execution_job_id}}
// ```
//
// ```sh
// $ pulumi import gcp:colab/notebookExecution:NotebookExecution default {{location}}/{{notebook_execution_job_id}}
// ```
type NotebookExecution struct {
	pulumi.CustomResourceState

	// The Dataform Repository containing the input notebook.
	// Structure is documented below.
	DataformRepositorySource NotebookExecutionDataformRepositorySourcePtrOutput `pulumi:"dataformRepositorySource"`
	// The content of the input notebook in ipynb format.
	// Structure is documented below.
	DirectNotebookSource NotebookExecutionDirectNotebookSourcePtrOutput `pulumi:"directNotebookSource"`
	// Required. The display name of the Notebook Execution.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout pulumi.StringPtrOutput `pulumi:"executionTimeout"`
	// The user email to run the execution as.
	ExecutionUser pulumi.StringPtrOutput `pulumi:"executionUser"`
	// The Cloud Storage uri for the input notebook.
	// Structure is documented below.
	GcsNotebookSource NotebookExecutionGcsNotebookSourcePtrOutput `pulumi:"gcsNotebookSource"`
	// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
	GcsOutputUri pulumi.StringOutput `pulumi:"gcsOutputUri"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId pulumi.StringOutput `pulumi:"notebookExecutionJobId"`
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName pulumi.StringPtrOutput `pulumi:"notebookRuntimeTemplateResourceName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The service account to run the execution as.
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
}

// NewNotebookExecution registers a new resource with the given unique name, arguments, and options.
func NewNotebookExecution(ctx *pulumi.Context,
	name string, args *NotebookExecutionArgs, opts ...pulumi.ResourceOption) (*NotebookExecution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.GcsOutputUri == nil {
		return nil, errors.New("invalid value for required argument 'GcsOutputUri'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotebookExecution
	err := ctx.RegisterResource("gcp:colab/notebookExecution:NotebookExecution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotebookExecution gets an existing NotebookExecution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotebookExecution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotebookExecutionState, opts ...pulumi.ResourceOption) (*NotebookExecution, error) {
	var resource NotebookExecution
	err := ctx.ReadResource("gcp:colab/notebookExecution:NotebookExecution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotebookExecution resources.
type notebookExecutionState struct {
	// The Dataform Repository containing the input notebook.
	// Structure is documented below.
	DataformRepositorySource *NotebookExecutionDataformRepositorySource `pulumi:"dataformRepositorySource"`
	// The content of the input notebook in ipynb format.
	// Structure is documented below.
	DirectNotebookSource *NotebookExecutionDirectNotebookSource `pulumi:"directNotebookSource"`
	// Required. The display name of the Notebook Execution.
	DisplayName *string `pulumi:"displayName"`
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout *string `pulumi:"executionTimeout"`
	// The user email to run the execution as.
	ExecutionUser *string `pulumi:"executionUser"`
	// The Cloud Storage uri for the input notebook.
	// Structure is documented below.
	GcsNotebookSource *NotebookExecutionGcsNotebookSource `pulumi:"gcsNotebookSource"`
	// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
	GcsOutputUri *string `pulumi:"gcsOutputUri"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location *string `pulumi:"location"`
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId *string `pulumi:"notebookExecutionJobId"`
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName *string `pulumi:"notebookRuntimeTemplateResourceName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The service account to run the execution as.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

type NotebookExecutionState struct {
	// The Dataform Repository containing the input notebook.
	// Structure is documented below.
	DataformRepositorySource NotebookExecutionDataformRepositorySourcePtrInput
	// The content of the input notebook in ipynb format.
	// Structure is documented below.
	DirectNotebookSource NotebookExecutionDirectNotebookSourcePtrInput
	// Required. The display name of the Notebook Execution.
	DisplayName pulumi.StringPtrInput
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout pulumi.StringPtrInput
	// The user email to run the execution as.
	ExecutionUser pulumi.StringPtrInput
	// The Cloud Storage uri for the input notebook.
	// Structure is documented below.
	GcsNotebookSource NotebookExecutionGcsNotebookSourcePtrInput
	// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
	GcsOutputUri pulumi.StringPtrInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location pulumi.StringPtrInput
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId pulumi.StringPtrInput
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The service account to run the execution as.
	ServiceAccount pulumi.StringPtrInput
}

func (NotebookExecutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*notebookExecutionState)(nil)).Elem()
}

type notebookExecutionArgs struct {
	// The Dataform Repository containing the input notebook.
	// Structure is documented below.
	DataformRepositorySource *NotebookExecutionDataformRepositorySource `pulumi:"dataformRepositorySource"`
	// The content of the input notebook in ipynb format.
	// Structure is documented below.
	DirectNotebookSource *NotebookExecutionDirectNotebookSource `pulumi:"directNotebookSource"`
	// Required. The display name of the Notebook Execution.
	DisplayName string `pulumi:"displayName"`
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout *string `pulumi:"executionTimeout"`
	// The user email to run the execution as.
	ExecutionUser *string `pulumi:"executionUser"`
	// The Cloud Storage uri for the input notebook.
	// Structure is documented below.
	GcsNotebookSource *NotebookExecutionGcsNotebookSource `pulumi:"gcsNotebookSource"`
	// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
	GcsOutputUri string `pulumi:"gcsOutputUri"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location string `pulumi:"location"`
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId *string `pulumi:"notebookExecutionJobId"`
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName *string `pulumi:"notebookRuntimeTemplateResourceName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The service account to run the execution as.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

// The set of arguments for constructing a NotebookExecution resource.
type NotebookExecutionArgs struct {
	// The Dataform Repository containing the input notebook.
	// Structure is documented below.
	DataformRepositorySource NotebookExecutionDataformRepositorySourcePtrInput
	// The content of the input notebook in ipynb format.
	// Structure is documented below.
	DirectNotebookSource NotebookExecutionDirectNotebookSourcePtrInput
	// Required. The display name of the Notebook Execution.
	DisplayName pulumi.StringInput
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout pulumi.StringPtrInput
	// The user email to run the execution as.
	ExecutionUser pulumi.StringPtrInput
	// The Cloud Storage uri for the input notebook.
	// Structure is documented below.
	GcsNotebookSource NotebookExecutionGcsNotebookSourcePtrInput
	// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
	GcsOutputUri pulumi.StringInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	//
	// ***
	Location pulumi.StringInput
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId pulumi.StringPtrInput
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The service account to run the execution as.
	ServiceAccount pulumi.StringPtrInput
}

func (NotebookExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notebookExecutionArgs)(nil)).Elem()
}

type NotebookExecutionInput interface {
	pulumi.Input

	ToNotebookExecutionOutput() NotebookExecutionOutput
	ToNotebookExecutionOutputWithContext(ctx context.Context) NotebookExecutionOutput
}

func (*NotebookExecution) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookExecution)(nil)).Elem()
}

func (i *NotebookExecution) ToNotebookExecutionOutput() NotebookExecutionOutput {
	return i.ToNotebookExecutionOutputWithContext(context.Background())
}

func (i *NotebookExecution) ToNotebookExecutionOutputWithContext(ctx context.Context) NotebookExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookExecutionOutput)
}

// NotebookExecutionArrayInput is an input type that accepts NotebookExecutionArray and NotebookExecutionArrayOutput values.
// You can construct a concrete instance of `NotebookExecutionArrayInput` via:
//
//	NotebookExecutionArray{ NotebookExecutionArgs{...} }
type NotebookExecutionArrayInput interface {
	pulumi.Input

	ToNotebookExecutionArrayOutput() NotebookExecutionArrayOutput
	ToNotebookExecutionArrayOutputWithContext(context.Context) NotebookExecutionArrayOutput
}

type NotebookExecutionArray []NotebookExecutionInput

func (NotebookExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotebookExecution)(nil)).Elem()
}

func (i NotebookExecutionArray) ToNotebookExecutionArrayOutput() NotebookExecutionArrayOutput {
	return i.ToNotebookExecutionArrayOutputWithContext(context.Background())
}

func (i NotebookExecutionArray) ToNotebookExecutionArrayOutputWithContext(ctx context.Context) NotebookExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookExecutionArrayOutput)
}

// NotebookExecutionMapInput is an input type that accepts NotebookExecutionMap and NotebookExecutionMapOutput values.
// You can construct a concrete instance of `NotebookExecutionMapInput` via:
//
//	NotebookExecutionMap{ "key": NotebookExecutionArgs{...} }
type NotebookExecutionMapInput interface {
	pulumi.Input

	ToNotebookExecutionMapOutput() NotebookExecutionMapOutput
	ToNotebookExecutionMapOutputWithContext(context.Context) NotebookExecutionMapOutput
}

type NotebookExecutionMap map[string]NotebookExecutionInput

func (NotebookExecutionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotebookExecution)(nil)).Elem()
}

func (i NotebookExecutionMap) ToNotebookExecutionMapOutput() NotebookExecutionMapOutput {
	return i.ToNotebookExecutionMapOutputWithContext(context.Background())
}

func (i NotebookExecutionMap) ToNotebookExecutionMapOutputWithContext(ctx context.Context) NotebookExecutionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookExecutionMapOutput)
}

type NotebookExecutionOutput struct{ *pulumi.OutputState }

func (NotebookExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookExecution)(nil)).Elem()
}

func (o NotebookExecutionOutput) ToNotebookExecutionOutput() NotebookExecutionOutput {
	return o
}

func (o NotebookExecutionOutput) ToNotebookExecutionOutputWithContext(ctx context.Context) NotebookExecutionOutput {
	return o
}

// The Dataform Repository containing the input notebook.
// Structure is documented below.
func (o NotebookExecutionOutput) DataformRepositorySource() NotebookExecutionDataformRepositorySourcePtrOutput {
	return o.ApplyT(func(v *NotebookExecution) NotebookExecutionDataformRepositorySourcePtrOutput {
		return v.DataformRepositorySource
	}).(NotebookExecutionDataformRepositorySourcePtrOutput)
}

// The content of the input notebook in ipynb format.
// Structure is documented below.
func (o NotebookExecutionOutput) DirectNotebookSource() NotebookExecutionDirectNotebookSourcePtrOutput {
	return o.ApplyT(func(v *NotebookExecution) NotebookExecutionDirectNotebookSourcePtrOutput {
		return v.DirectNotebookSource
	}).(NotebookExecutionDirectNotebookSourcePtrOutput)
}

// Required. The display name of the Notebook Execution.
func (o NotebookExecutionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Max running time of the execution job in seconds (default 86400s / 24 hrs).
func (o NotebookExecutionOutput) ExecutionTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringPtrOutput { return v.ExecutionTimeout }).(pulumi.StringPtrOutput)
}

// The user email to run the execution as.
func (o NotebookExecutionOutput) ExecutionUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringPtrOutput { return v.ExecutionUser }).(pulumi.StringPtrOutput)
}

// The Cloud Storage uri for the input notebook.
// Structure is documented below.
func (o NotebookExecutionOutput) GcsNotebookSource() NotebookExecutionGcsNotebookSourcePtrOutput {
	return o.ApplyT(func(v *NotebookExecution) NotebookExecutionGcsNotebookSourcePtrOutput { return v.GcsNotebookSource }).(NotebookExecutionGcsNotebookSourcePtrOutput)
}

// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
func (o NotebookExecutionOutput) GcsOutputUri() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringOutput { return v.GcsOutputUri }).(pulumi.StringOutput)
}

// The location for the resource: https://cloud.google.com/colab/docs/locations
//
// ***
func (o NotebookExecutionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// User specified ID for the Notebook Execution Job
func (o NotebookExecutionOutput) NotebookExecutionJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringOutput { return v.NotebookExecutionJobId }).(pulumi.StringOutput)
}

// The NotebookRuntimeTemplate to source compute configuration from.
func (o NotebookExecutionOutput) NotebookRuntimeTemplateResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringPtrOutput { return v.NotebookRuntimeTemplateResourceName }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o NotebookExecutionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The service account to run the execution as.
func (o NotebookExecutionOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookExecution) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

type NotebookExecutionArrayOutput struct{ *pulumi.OutputState }

func (NotebookExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotebookExecution)(nil)).Elem()
}

func (o NotebookExecutionArrayOutput) ToNotebookExecutionArrayOutput() NotebookExecutionArrayOutput {
	return o
}

func (o NotebookExecutionArrayOutput) ToNotebookExecutionArrayOutputWithContext(ctx context.Context) NotebookExecutionArrayOutput {
	return o
}

func (o NotebookExecutionArrayOutput) Index(i pulumi.IntInput) NotebookExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotebookExecution {
		return vs[0].([]*NotebookExecution)[vs[1].(int)]
	}).(NotebookExecutionOutput)
}

type NotebookExecutionMapOutput struct{ *pulumi.OutputState }

func (NotebookExecutionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotebookExecution)(nil)).Elem()
}

func (o NotebookExecutionMapOutput) ToNotebookExecutionMapOutput() NotebookExecutionMapOutput {
	return o
}

func (o NotebookExecutionMapOutput) ToNotebookExecutionMapOutputWithContext(ctx context.Context) NotebookExecutionMapOutput {
	return o
}

func (o NotebookExecutionMapOutput) MapIndex(k pulumi.StringInput) NotebookExecutionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotebookExecution {
		return vs[0].(map[string]*NotebookExecution)[vs[1].(string)]
	}).(NotebookExecutionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookExecutionInput)(nil)).Elem(), &NotebookExecution{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookExecutionArrayInput)(nil)).Elem(), NotebookExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookExecutionMapInput)(nil)).Elem(), NotebookExecutionMap{})
	pulumi.RegisterOutputType(NotebookExecutionOutput{})
	pulumi.RegisterOutputType(NotebookExecutionArrayOutput{})
	pulumi.RegisterOutputType(NotebookExecutionMapOutput{})
}
