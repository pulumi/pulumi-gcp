// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package colab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Colab Enterprise RuntimeTemplate. Each of these resources serves a different use case:
//
// * `colab.RuntimeTemplateIamPolicy`: Authoritative. Sets the IAM policy for the runtimetemplate and replaces any existing policy already attached.
// * `colab.RuntimeTemplateIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the runtimetemplate are preserved.
// * `colab.RuntimeTemplateIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the runtimetemplate are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `colab.RuntimeTemplateIamPolicy`: Retrieves the IAM policy for the runtimetemplate
//
// > **Note:** `colab.RuntimeTemplateIamPolicy` **cannot** be used in conjunction with `colab.RuntimeTemplateIamBinding` and `colab.RuntimeTemplateIamMember` or they will fight over what your policy should be.
//
// > **Note:** `colab.RuntimeTemplateIamBinding` resources **can be** used in conjunction with `colab.RuntimeTemplateIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## colab.RuntimeTemplateIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewRuntimeTemplateIamPolicy(ctx, "policy", &colab.RuntimeTemplateIamPolicyArgs{
//				Project:         pulumi.Any(runtime_template.Project),
//				Location:        pulumi.Any(runtime_template.Location),
//				RuntimeTemplate: pulumi.Any(runtime_template.Name),
//				PolicyData:      pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## colab.RuntimeTemplateIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := colab.NewRuntimeTemplateIamBinding(ctx, "binding", &colab.RuntimeTemplateIamBindingArgs{
//				Project:         pulumi.Any(runtime_template.Project),
//				Location:        pulumi.Any(runtime_template.Location),
//				RuntimeTemplate: pulumi.Any(runtime_template.Name),
//				Role:            pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## colab.RuntimeTemplateIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := colab.NewRuntimeTemplateIamMember(ctx, "member", &colab.RuntimeTemplateIamMemberArgs{
//				Project:         pulumi.Any(runtime_template.Project),
//				Location:        pulumi.Any(runtime_template.Location),
//				RuntimeTemplate: pulumi.Any(runtime_template.Name),
//				Role:            pulumi.String("roles/viewer"),
//				Member:          pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Colab Enterprise RuntimeTemplate
// Three different resources help you manage your IAM policy for Colab Enterprise RuntimeTemplate. Each of these resources serves a different use case:
//
// * `colab.RuntimeTemplateIamPolicy`: Authoritative. Sets the IAM policy for the runtimetemplate and replaces any existing policy already attached.
// * `colab.RuntimeTemplateIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the runtimetemplate are preserved.
// * `colab.RuntimeTemplateIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the runtimetemplate are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `colab.RuntimeTemplateIamPolicy`: Retrieves the IAM policy for the runtimetemplate
//
// > **Note:** `colab.RuntimeTemplateIamPolicy` **cannot** be used in conjunction with `colab.RuntimeTemplateIamBinding` and `colab.RuntimeTemplateIamMember` or they will fight over what your policy should be.
//
// > **Note:** `colab.RuntimeTemplateIamBinding` resources **can be** used in conjunction with `colab.RuntimeTemplateIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## colab.RuntimeTemplateIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewRuntimeTemplateIamPolicy(ctx, "policy", &colab.RuntimeTemplateIamPolicyArgs{
//				Project:         pulumi.Any(runtime_template.Project),
//				Location:        pulumi.Any(runtime_template.Location),
//				RuntimeTemplate: pulumi.Any(runtime_template.Name),
//				PolicyData:      pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## colab.RuntimeTemplateIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := colab.NewRuntimeTemplateIamBinding(ctx, "binding", &colab.RuntimeTemplateIamBindingArgs{
//				Project:         pulumi.Any(runtime_template.Project),
//				Location:        pulumi.Any(runtime_template.Location),
//				RuntimeTemplate: pulumi.Any(runtime_template.Name),
//				Role:            pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## colab.RuntimeTemplateIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := colab.NewRuntimeTemplateIamMember(ctx, "member", &colab.RuntimeTemplateIamMemberArgs{
//				Project:         pulumi.Any(runtime_template.Project),
//				Location:        pulumi.Any(runtime_template.Location),
//				RuntimeTemplate: pulumi.Any(runtime_template.Name),
//				Role:            pulumi.String("roles/viewer"),
//				Member:          pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{runtime_template}}
//
// * {{project}}/{{location}}/{{runtime_template}}
//
// * {{location}}/{{runtime_template}}
//
// * {{runtime_template}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Colab Enterprise runtimetemplate IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:colab/runtimeTemplateIamPolicy:RuntimeTemplateIamPolicy editor "projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{runtime_template}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:colab/runtimeTemplateIamPolicy:RuntimeTemplateIamPolicy editor "projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{runtime_template}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:colab/runtimeTemplateIamPolicy:RuntimeTemplateIamPolicy editor projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{runtime_template}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RuntimeTemplateIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	RuntimeTemplate pulumi.StringOutput `pulumi:"runtimeTemplate"`
}

// NewRuntimeTemplateIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRuntimeTemplateIamPolicy(ctx *pulumi.Context,
	name string, args *RuntimeTemplateIamPolicyArgs, opts ...pulumi.ResourceOption) (*RuntimeTemplateIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.RuntimeTemplate == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeTemplate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuntimeTemplateIamPolicy
	err := ctx.RegisterResource("gcp:colab/runtimeTemplateIamPolicy:RuntimeTemplateIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuntimeTemplateIamPolicy gets an existing RuntimeTemplateIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuntimeTemplateIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuntimeTemplateIamPolicyState, opts ...pulumi.ResourceOption) (*RuntimeTemplateIamPolicy, error) {
	var resource RuntimeTemplateIamPolicy
	err := ctx.ReadResource("gcp:colab/runtimeTemplateIamPolicy:RuntimeTemplateIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuntimeTemplateIamPolicy resources.
type runtimeTemplateIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	RuntimeTemplate *string `pulumi:"runtimeTemplate"`
}

type RuntimeTemplateIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	RuntimeTemplate pulumi.StringPtrInput
}

func (RuntimeTemplateIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeTemplateIamPolicyState)(nil)).Elem()
}

type runtimeTemplateIamPolicyArgs struct {
	// The location for the resource: https://cloud.google.com/colab/docs/locations Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	RuntimeTemplate string `pulumi:"runtimeTemplate"`
}

// The set of arguments for constructing a RuntimeTemplateIamPolicy resource.
type RuntimeTemplateIamPolicyArgs struct {
	// The location for the resource: https://cloud.google.com/colab/docs/locations Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	RuntimeTemplate pulumi.StringInput
}

func (RuntimeTemplateIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeTemplateIamPolicyArgs)(nil)).Elem()
}

type RuntimeTemplateIamPolicyInput interface {
	pulumi.Input

	ToRuntimeTemplateIamPolicyOutput() RuntimeTemplateIamPolicyOutput
	ToRuntimeTemplateIamPolicyOutputWithContext(ctx context.Context) RuntimeTemplateIamPolicyOutput
}

func (*RuntimeTemplateIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeTemplateIamPolicy)(nil)).Elem()
}

func (i *RuntimeTemplateIamPolicy) ToRuntimeTemplateIamPolicyOutput() RuntimeTemplateIamPolicyOutput {
	return i.ToRuntimeTemplateIamPolicyOutputWithContext(context.Background())
}

func (i *RuntimeTemplateIamPolicy) ToRuntimeTemplateIamPolicyOutputWithContext(ctx context.Context) RuntimeTemplateIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeTemplateIamPolicyOutput)
}

// RuntimeTemplateIamPolicyArrayInput is an input type that accepts RuntimeTemplateIamPolicyArray and RuntimeTemplateIamPolicyArrayOutput values.
// You can construct a concrete instance of `RuntimeTemplateIamPolicyArrayInput` via:
//
//	RuntimeTemplateIamPolicyArray{ RuntimeTemplateIamPolicyArgs{...} }
type RuntimeTemplateIamPolicyArrayInput interface {
	pulumi.Input

	ToRuntimeTemplateIamPolicyArrayOutput() RuntimeTemplateIamPolicyArrayOutput
	ToRuntimeTemplateIamPolicyArrayOutputWithContext(context.Context) RuntimeTemplateIamPolicyArrayOutput
}

type RuntimeTemplateIamPolicyArray []RuntimeTemplateIamPolicyInput

func (RuntimeTemplateIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuntimeTemplateIamPolicy)(nil)).Elem()
}

func (i RuntimeTemplateIamPolicyArray) ToRuntimeTemplateIamPolicyArrayOutput() RuntimeTemplateIamPolicyArrayOutput {
	return i.ToRuntimeTemplateIamPolicyArrayOutputWithContext(context.Background())
}

func (i RuntimeTemplateIamPolicyArray) ToRuntimeTemplateIamPolicyArrayOutputWithContext(ctx context.Context) RuntimeTemplateIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeTemplateIamPolicyArrayOutput)
}

// RuntimeTemplateIamPolicyMapInput is an input type that accepts RuntimeTemplateIamPolicyMap and RuntimeTemplateIamPolicyMapOutput values.
// You can construct a concrete instance of `RuntimeTemplateIamPolicyMapInput` via:
//
//	RuntimeTemplateIamPolicyMap{ "key": RuntimeTemplateIamPolicyArgs{...} }
type RuntimeTemplateIamPolicyMapInput interface {
	pulumi.Input

	ToRuntimeTemplateIamPolicyMapOutput() RuntimeTemplateIamPolicyMapOutput
	ToRuntimeTemplateIamPolicyMapOutputWithContext(context.Context) RuntimeTemplateIamPolicyMapOutput
}

type RuntimeTemplateIamPolicyMap map[string]RuntimeTemplateIamPolicyInput

func (RuntimeTemplateIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuntimeTemplateIamPolicy)(nil)).Elem()
}

func (i RuntimeTemplateIamPolicyMap) ToRuntimeTemplateIamPolicyMapOutput() RuntimeTemplateIamPolicyMapOutput {
	return i.ToRuntimeTemplateIamPolicyMapOutputWithContext(context.Background())
}

func (i RuntimeTemplateIamPolicyMap) ToRuntimeTemplateIamPolicyMapOutputWithContext(ctx context.Context) RuntimeTemplateIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeTemplateIamPolicyMapOutput)
}

type RuntimeTemplateIamPolicyOutput struct{ *pulumi.OutputState }

func (RuntimeTemplateIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeTemplateIamPolicy)(nil)).Elem()
}

func (o RuntimeTemplateIamPolicyOutput) ToRuntimeTemplateIamPolicyOutput() RuntimeTemplateIamPolicyOutput {
	return o
}

func (o RuntimeTemplateIamPolicyOutput) ToRuntimeTemplateIamPolicyOutputWithContext(ctx context.Context) RuntimeTemplateIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o RuntimeTemplateIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplateIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location for the resource: https://cloud.google.com/colab/docs/locations Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o RuntimeTemplateIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplateIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o RuntimeTemplateIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplateIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RuntimeTemplateIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplateIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o RuntimeTemplateIamPolicyOutput) RuntimeTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeTemplateIamPolicy) pulumi.StringOutput { return v.RuntimeTemplate }).(pulumi.StringOutput)
}

type RuntimeTemplateIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RuntimeTemplateIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuntimeTemplateIamPolicy)(nil)).Elem()
}

func (o RuntimeTemplateIamPolicyArrayOutput) ToRuntimeTemplateIamPolicyArrayOutput() RuntimeTemplateIamPolicyArrayOutput {
	return o
}

func (o RuntimeTemplateIamPolicyArrayOutput) ToRuntimeTemplateIamPolicyArrayOutputWithContext(ctx context.Context) RuntimeTemplateIamPolicyArrayOutput {
	return o
}

func (o RuntimeTemplateIamPolicyArrayOutput) Index(i pulumi.IntInput) RuntimeTemplateIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuntimeTemplateIamPolicy {
		return vs[0].([]*RuntimeTemplateIamPolicy)[vs[1].(int)]
	}).(RuntimeTemplateIamPolicyOutput)
}

type RuntimeTemplateIamPolicyMapOutput struct{ *pulumi.OutputState }

func (RuntimeTemplateIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuntimeTemplateIamPolicy)(nil)).Elem()
}

func (o RuntimeTemplateIamPolicyMapOutput) ToRuntimeTemplateIamPolicyMapOutput() RuntimeTemplateIamPolicyMapOutput {
	return o
}

func (o RuntimeTemplateIamPolicyMapOutput) ToRuntimeTemplateIamPolicyMapOutputWithContext(ctx context.Context) RuntimeTemplateIamPolicyMapOutput {
	return o
}

func (o RuntimeTemplateIamPolicyMapOutput) MapIndex(k pulumi.StringInput) RuntimeTemplateIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuntimeTemplateIamPolicy {
		return vs[0].(map[string]*RuntimeTemplateIamPolicy)[vs[1].(string)]
	}).(RuntimeTemplateIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeTemplateIamPolicyInput)(nil)).Elem(), &RuntimeTemplateIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeTemplateIamPolicyArrayInput)(nil)).Elem(), RuntimeTemplateIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeTemplateIamPolicyMapInput)(nil)).Elem(), RuntimeTemplateIamPolicyMap{})
	pulumi.RegisterOutputType(RuntimeTemplateIamPolicyOutput{})
	pulumi.RegisterOutputType(RuntimeTemplateIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(RuntimeTemplateIamPolicyMapOutput{})
}
