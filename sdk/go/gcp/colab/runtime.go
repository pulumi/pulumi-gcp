// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package colab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// 'A runtime is a Google-provisioned virtual machine (VM) that can run the code in your notebook (IPYNB file).'
//
// To get more information about Runtime, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookRuntimes)
// * How-to Guides
//   - [Create a runtime](https://cloud.google.com/colab/docs/create-runtime)
//
// ## Example Usage
//
// ### Colab Runtime Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myTemplate, err := colab.NewRuntimeTemplate(ctx, "my_template", &colab.RuntimeTemplateArgs{
//				Name:        pulumi.String("colab-runtime"),
//				DisplayName: pulumi.String("Runtime template basic"),
//				Location:    pulumi.String("us-central1"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType: pulumi.String("e2-standard-4"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewRuntime(ctx, "runtime", &colab.RuntimeArgs{
//				Name:     pulumi.String("colab-runtime"),
//				Location: pulumi.String("us-central1"),
//				NotebookRuntimeTemplateRef: &colab.RuntimeNotebookRuntimeTemplateRefArgs{
//					NotebookRuntimeTemplate: myTemplate.ID(),
//				},
//				DisplayName: pulumi.String("Runtime basic"),
//				RuntimeUser: pulumi.String("gterraformtestuser@gmail.com"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myTemplate,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Colab Runtime Stopped
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myTemplate, err := colab.NewRuntimeTemplate(ctx, "my_template", &colab.RuntimeTemplateArgs{
//				Name:        pulumi.String("colab-runtime"),
//				DisplayName: pulumi.String("Runtime template basic"),
//				Location:    pulumi.String("us-central1"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType: pulumi.String("e2-standard-4"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewRuntime(ctx, "runtime", &colab.RuntimeArgs{
//				Name:     pulumi.String("colab-runtime"),
//				Location: pulumi.String("us-central1"),
//				NotebookRuntimeTemplateRef: &colab.RuntimeNotebookRuntimeTemplateRefArgs{
//					NotebookRuntimeTemplate: myTemplate.ID(),
//				},
//				DesiredState: pulumi.String("STOPPED"),
//				DisplayName:  pulumi.String("Runtime stopped"),
//				RuntimeUser:  pulumi.String("gterraformtestuser@gmail.com"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myTemplate,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Colab Runtime Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/colab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myTemplate, err := colab.NewRuntimeTemplate(ctx, "my_template", &colab.RuntimeTemplateArgs{
//				Name:        pulumi.String("colab-runtime"),
//				DisplayName: pulumi.String("Runtime template full"),
//				Location:    pulumi.String("us-central1"),
//				Description: pulumi.String("Full runtime template"),
//				MachineSpec: &colab.RuntimeTemplateMachineSpecArgs{
//					MachineType:      pulumi.String("n1-standard-2"),
//					AcceleratorType:  pulumi.String("NVIDIA_TESLA_T4"),
//					AcceleratorCount: pulumi.Int(1),
//				},
//				DataPersistentDiskSpec: &colab.RuntimeTemplateDataPersistentDiskSpecArgs{
//					DiskType:   pulumi.String("pd-standard"),
//					DiskSizeGb: pulumi.String("200"),
//				},
//				NetworkSpec: &colab.RuntimeTemplateNetworkSpecArgs{
//					EnableInternetAccess: pulumi.Bool(true),
//				},
//				Labels: pulumi.StringMap{
//					"k": pulumi.String("val"),
//				},
//				IdleShutdownConfig: &colab.RuntimeTemplateIdleShutdownConfigArgs{
//					IdleTimeout: pulumi.String("3600s"),
//				},
//				EucConfig: &colab.RuntimeTemplateEucConfigArgs{
//					EucDisabled: pulumi.Bool(true),
//				},
//				ShieldedVmConfig: &colab.RuntimeTemplateShieldedVmConfigArgs{
//					EnableSecureBoot: pulumi.Bool(true),
//				},
//				NetworkTags: pulumi.StringArray{
//					pulumi.String("abc"),
//					pulumi.String("def"),
//				},
//				EncryptionSpec: &colab.RuntimeTemplateEncryptionSpecArgs{
//					KmsKeyName: pulumi.String("my-crypto-key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = colab.NewRuntime(ctx, "runtime", &colab.RuntimeArgs{
//				Name:     pulumi.String("colab-runtime"),
//				Location: pulumi.String("us-central1"),
//				NotebookRuntimeTemplateRef: &colab.RuntimeNotebookRuntimeTemplateRefArgs{
//					NotebookRuntimeTemplate: myTemplate.ID(),
//				},
//				DisplayName:  pulumi.String("Runtime full"),
//				RuntimeUser:  pulumi.String("gterraformtestuser@gmail.com"),
//				Description:  pulumi.String("Full runtime"),
//				DesiredState: pulumi.String("ACTIVE"),
//				AutoUpgrade:  pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myTemplate,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Runtime can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/notebookRuntimes/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, Runtime can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:colab/runtime:Runtime default projects/{{project}}/locations/{{location}}/notebookRuntimes/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:colab/runtime:Runtime default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:colab/runtime:Runtime default {{location}}/{{name}}
// ```
type Runtime struct {
	pulumi.CustomResourceState

	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade pulumi.BoolPtrOutput `pulumi:"autoUpgrade"`
	// The description of the Runtime.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Desired state of the Colab Runtime. Set this field to `RUNNING` to start the runtime, and `STOPPED` to stop it.
	DesiredState pulumi.StringPtrOutput `pulumi:"desiredState"`
	// Required. The display name of the Runtime.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Output only. Timestamp when this NotebookRuntime will be expired.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// Output only. Checks if the NotebookRuntime is upgradable.
	IsUpgradable pulumi.BoolOutput `pulumi:"isUpgradable"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the Runtime
	Name pulumi.StringOutput `pulumi:"name"`
	// 'Runtime specific information used for NotebookRuntime creation.'
	// Structure is documented below.
	NotebookRuntimeTemplateRef RuntimeNotebookRuntimeTemplateRefPtrOutput `pulumi:"notebookRuntimeTemplateRef"`
	// Output only. The type of the notebook runtime.
	NotebookRuntimeType pulumi.StringOutput `pulumi:"notebookRuntimeType"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The user email of the NotebookRuntime.
	RuntimeUser pulumi.StringOutput `pulumi:"runtimeUser"`
	// Output only. The state of the runtime.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewRuntime registers a new resource with the given unique name, arguments, and options.
func NewRuntime(ctx *pulumi.Context,
	name string, args *RuntimeArgs, opts ...pulumi.ResourceOption) (*Runtime, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.RuntimeUser == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeUser'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Runtime
	err := ctx.RegisterResource("gcp:colab/runtime:Runtime", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuntime gets an existing Runtime resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuntime(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuntimeState, opts ...pulumi.ResourceOption) (*Runtime, error) {
	var resource Runtime
	err := ctx.ReadResource("gcp:colab/runtime:Runtime", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Runtime resources.
type runtimeState struct {
	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// The description of the Runtime.
	Description *string `pulumi:"description"`
	// Desired state of the Colab Runtime. Set this field to `RUNNING` to start the runtime, and `STOPPED` to stop it.
	DesiredState *string `pulumi:"desiredState"`
	// Required. The display name of the Runtime.
	DisplayName *string `pulumi:"displayName"`
	// Output only. Timestamp when this NotebookRuntime will be expired.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Output only. Checks if the NotebookRuntime is upgradable.
	IsUpgradable *bool `pulumi:"isUpgradable"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location *string `pulumi:"location"`
	// The resource name of the Runtime
	Name *string `pulumi:"name"`
	// 'Runtime specific information used for NotebookRuntime creation.'
	// Structure is documented below.
	NotebookRuntimeTemplateRef *RuntimeNotebookRuntimeTemplateRef `pulumi:"notebookRuntimeTemplateRef"`
	// Output only. The type of the notebook runtime.
	NotebookRuntimeType *string `pulumi:"notebookRuntimeType"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The user email of the NotebookRuntime.
	RuntimeUser *string `pulumi:"runtimeUser"`
	// Output only. The state of the runtime.
	State *string `pulumi:"state"`
}

type RuntimeState struct {
	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade pulumi.BoolPtrInput
	// The description of the Runtime.
	Description pulumi.StringPtrInput
	// Desired state of the Colab Runtime. Set this field to `RUNNING` to start the runtime, and `STOPPED` to stop it.
	DesiredState pulumi.StringPtrInput
	// Required. The display name of the Runtime.
	DisplayName pulumi.StringPtrInput
	// Output only. Timestamp when this NotebookRuntime will be expired.
	ExpirationTime pulumi.StringPtrInput
	// Output only. Checks if the NotebookRuntime is upgradable.
	IsUpgradable pulumi.BoolPtrInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringPtrInput
	// The resource name of the Runtime
	Name pulumi.StringPtrInput
	// 'Runtime specific information used for NotebookRuntime creation.'
	// Structure is documented below.
	NotebookRuntimeTemplateRef RuntimeNotebookRuntimeTemplateRefPtrInput
	// Output only. The type of the notebook runtime.
	NotebookRuntimeType pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The user email of the NotebookRuntime.
	RuntimeUser pulumi.StringPtrInput
	// Output only. The state of the runtime.
	State pulumi.StringPtrInput
}

func (RuntimeState) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeState)(nil)).Elem()
}

type runtimeArgs struct {
	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// The description of the Runtime.
	Description *string `pulumi:"description"`
	// Desired state of the Colab Runtime. Set this field to `RUNNING` to start the runtime, and `STOPPED` to stop it.
	DesiredState *string `pulumi:"desiredState"`
	// Required. The display name of the Runtime.
	DisplayName string `pulumi:"displayName"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location string `pulumi:"location"`
	// The resource name of the Runtime
	Name *string `pulumi:"name"`
	// 'Runtime specific information used for NotebookRuntime creation.'
	// Structure is documented below.
	NotebookRuntimeTemplateRef *RuntimeNotebookRuntimeTemplateRef `pulumi:"notebookRuntimeTemplateRef"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The user email of the NotebookRuntime.
	RuntimeUser string `pulumi:"runtimeUser"`
}

// The set of arguments for constructing a Runtime resource.
type RuntimeArgs struct {
	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade pulumi.BoolPtrInput
	// The description of the Runtime.
	Description pulumi.StringPtrInput
	// Desired state of the Colab Runtime. Set this field to `RUNNING` to start the runtime, and `STOPPED` to stop it.
	DesiredState pulumi.StringPtrInput
	// Required. The display name of the Runtime.
	DisplayName pulumi.StringInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringInput
	// The resource name of the Runtime
	Name pulumi.StringPtrInput
	// 'Runtime specific information used for NotebookRuntime creation.'
	// Structure is documented below.
	NotebookRuntimeTemplateRef RuntimeNotebookRuntimeTemplateRefPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The user email of the NotebookRuntime.
	RuntimeUser pulumi.StringInput
}

func (RuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeArgs)(nil)).Elem()
}

type RuntimeInput interface {
	pulumi.Input

	ToRuntimeOutput() RuntimeOutput
	ToRuntimeOutputWithContext(ctx context.Context) RuntimeOutput
}

func (*Runtime) ElementType() reflect.Type {
	return reflect.TypeOf((**Runtime)(nil)).Elem()
}

func (i *Runtime) ToRuntimeOutput() RuntimeOutput {
	return i.ToRuntimeOutputWithContext(context.Background())
}

func (i *Runtime) ToRuntimeOutputWithContext(ctx context.Context) RuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeOutput)
}

// RuntimeArrayInput is an input type that accepts RuntimeArray and RuntimeArrayOutput values.
// You can construct a concrete instance of `RuntimeArrayInput` via:
//
//	RuntimeArray{ RuntimeArgs{...} }
type RuntimeArrayInput interface {
	pulumi.Input

	ToRuntimeArrayOutput() RuntimeArrayOutput
	ToRuntimeArrayOutputWithContext(context.Context) RuntimeArrayOutput
}

type RuntimeArray []RuntimeInput

func (RuntimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Runtime)(nil)).Elem()
}

func (i RuntimeArray) ToRuntimeArrayOutput() RuntimeArrayOutput {
	return i.ToRuntimeArrayOutputWithContext(context.Background())
}

func (i RuntimeArray) ToRuntimeArrayOutputWithContext(ctx context.Context) RuntimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeArrayOutput)
}

// RuntimeMapInput is an input type that accepts RuntimeMap and RuntimeMapOutput values.
// You can construct a concrete instance of `RuntimeMapInput` via:
//
//	RuntimeMap{ "key": RuntimeArgs{...} }
type RuntimeMapInput interface {
	pulumi.Input

	ToRuntimeMapOutput() RuntimeMapOutput
	ToRuntimeMapOutputWithContext(context.Context) RuntimeMapOutput
}

type RuntimeMap map[string]RuntimeInput

func (RuntimeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Runtime)(nil)).Elem()
}

func (i RuntimeMap) ToRuntimeMapOutput() RuntimeMapOutput {
	return i.ToRuntimeMapOutputWithContext(context.Background())
}

func (i RuntimeMap) ToRuntimeMapOutputWithContext(ctx context.Context) RuntimeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeMapOutput)
}

type RuntimeOutput struct{ *pulumi.OutputState }

func (RuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Runtime)(nil)).Elem()
}

func (o RuntimeOutput) ToRuntimeOutput() RuntimeOutput {
	return o
}

func (o RuntimeOutput) ToRuntimeOutputWithContext(ctx context.Context) RuntimeOutput {
	return o
}

// Triggers an upgrade anytime the runtime is started if it is upgradable.
func (o RuntimeOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Runtime) pulumi.BoolPtrOutput { return v.AutoUpgrade }).(pulumi.BoolPtrOutput)
}

// The description of the Runtime.
func (o RuntimeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Desired state of the Colab Runtime. Set this field to `RUNNING` to start the runtime, and `STOPPED` to stop it.
func (o RuntimeOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringPtrOutput { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// Required. The display name of the Runtime.
func (o RuntimeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Output only. Timestamp when this NotebookRuntime will be expired.
func (o RuntimeOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Output only. Checks if the NotebookRuntime is upgradable.
func (o RuntimeOutput) IsUpgradable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Runtime) pulumi.BoolOutput { return v.IsUpgradable }).(pulumi.BoolOutput)
}

// The location for the resource: https://cloud.google.com/colab/docs/locations
func (o RuntimeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the Runtime
func (o RuntimeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// 'Runtime specific information used for NotebookRuntime creation.'
// Structure is documented below.
func (o RuntimeOutput) NotebookRuntimeTemplateRef() RuntimeNotebookRuntimeTemplateRefPtrOutput {
	return o.ApplyT(func(v *Runtime) RuntimeNotebookRuntimeTemplateRefPtrOutput { return v.NotebookRuntimeTemplateRef }).(RuntimeNotebookRuntimeTemplateRefPtrOutput)
}

// Output only. The type of the notebook runtime.
func (o RuntimeOutput) NotebookRuntimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.NotebookRuntimeType }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RuntimeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The user email of the NotebookRuntime.
func (o RuntimeOutput) RuntimeUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.RuntimeUser }).(pulumi.StringOutput)
}

// Output only. The state of the runtime.
func (o RuntimeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type RuntimeArrayOutput struct{ *pulumi.OutputState }

func (RuntimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Runtime)(nil)).Elem()
}

func (o RuntimeArrayOutput) ToRuntimeArrayOutput() RuntimeArrayOutput {
	return o
}

func (o RuntimeArrayOutput) ToRuntimeArrayOutputWithContext(ctx context.Context) RuntimeArrayOutput {
	return o
}

func (o RuntimeArrayOutput) Index(i pulumi.IntInput) RuntimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Runtime {
		return vs[0].([]*Runtime)[vs[1].(int)]
	}).(RuntimeOutput)
}

type RuntimeMapOutput struct{ *pulumi.OutputState }

func (RuntimeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Runtime)(nil)).Elem()
}

func (o RuntimeMapOutput) ToRuntimeMapOutput() RuntimeMapOutput {
	return o
}

func (o RuntimeMapOutput) ToRuntimeMapOutputWithContext(ctx context.Context) RuntimeMapOutput {
	return o
}

func (o RuntimeMapOutput) MapIndex(k pulumi.StringInput) RuntimeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Runtime {
		return vs[0].(map[string]*Runtime)[vs[1].(string)]
	}).(RuntimeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeInput)(nil)).Elem(), &Runtime{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeArrayInput)(nil)).Elem(), RuntimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeMapInput)(nil)).Elem(), RuntimeMap{})
	pulumi.RegisterOutputType(RuntimeOutput{})
	pulumi.RegisterOutputType(RuntimeArrayOutput{})
	pulumi.RegisterOutputType(RuntimeMapOutput{})
}
