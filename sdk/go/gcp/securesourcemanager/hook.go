// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securesourcemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Hook is a user-defined HTTP callback triggered by an event.
//
// To get more information about Hook, see:
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
//
// ## Example Usage
//
// ## Import
//
// Hook can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}`
//
// * `{{project}}/{{location}}/{{repository_id}}/{{hook_id}}`
//
// * `{{location}}/{{repository_id}}/{{hook_id}}`
//
// * `{{hook_id}}`
//
// When using the `pulumi import` command, Hook can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securesourcemanager/hook:Hook default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/hook:Hook default {{project}}/{{location}}/{{repository_id}}/{{hook_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/hook:Hook default {{location}}/{{repository_id}}/{{hook_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/hook:Hook default {{hook_id}}
// ```
type Hook struct {
	pulumi.CustomResourceState

	// Create timestamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Determines if the hook disabled or not.
	// Set to true to stop sending traffic.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// The events that trigger hook on.
	// Each value may be one of: `PUSH`, `PULL_REQUEST`.
	Events pulumi.StringArrayOutput `pulumi:"events"`
	// The ID for the Hook.
	HookId pulumi.StringOutput `pulumi:"hookId"`
	// The location for the Repository.
	Location pulumi.StringOutput `pulumi:"location"`
	// A unique identifier for a Hook. The name should be of the format:
	// `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The trigger option for push events.
	// Structure is documented below.
	PushOption HookPushOptionOutput `pulumi:"pushOption"`
	// The ID for the Repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// The sensitive query string to be appended to the target URI.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SensitiveQueryString pulumi.StringPtrOutput `pulumi:"sensitiveQueryString"`
	// The target URI to which the payloads will be delivered.
	TargetUri pulumi.StringOutput `pulumi:"targetUri"`
	// Unique identifier of the hook.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Update timestamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewHook registers a new resource with the given unique name, arguments, and options.
func NewHook(ctx *pulumi.Context,
	name string, args *HookArgs, opts ...pulumi.ResourceOption) (*Hook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HookId == nil {
		return nil, errors.New("invalid value for required argument 'HookId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	if args.TargetUri == nil {
		return nil, errors.New("invalid value for required argument 'TargetUri'")
	}
	if args.SensitiveQueryString != nil {
		args.SensitiveQueryString = pulumi.ToSecret(args.SensitiveQueryString).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sensitiveQueryString",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hook
	err := ctx.RegisterResource("gcp:securesourcemanager/hook:Hook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHook gets an existing Hook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HookState, opts ...pulumi.ResourceOption) (*Hook, error) {
	var resource Hook
	err := ctx.ReadResource("gcp:securesourcemanager/hook:Hook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hook resources.
type hookState struct {
	// Create timestamp.
	CreateTime *string `pulumi:"createTime"`
	// Determines if the hook disabled or not.
	// Set to true to stop sending traffic.
	Disabled *bool `pulumi:"disabled"`
	// The events that trigger hook on.
	// Each value may be one of: `PUSH`, `PULL_REQUEST`.
	Events []string `pulumi:"events"`
	// The ID for the Hook.
	HookId *string `pulumi:"hookId"`
	// The location for the Repository.
	Location *string `pulumi:"location"`
	// A unique identifier for a Hook. The name should be of the format:
	// `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The trigger option for push events.
	// Structure is documented below.
	PushOption *HookPushOption `pulumi:"pushOption"`
	// The ID for the Repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The sensitive query string to be appended to the target URI.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SensitiveQueryString *string `pulumi:"sensitiveQueryString"`
	// The target URI to which the payloads will be delivered.
	TargetUri *string `pulumi:"targetUri"`
	// Unique identifier of the hook.
	Uid *string `pulumi:"uid"`
	// Update timestamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type HookState struct {
	// Create timestamp.
	CreateTime pulumi.StringPtrInput
	// Determines if the hook disabled or not.
	// Set to true to stop sending traffic.
	Disabled pulumi.BoolPtrInput
	// The events that trigger hook on.
	// Each value may be one of: `PUSH`, `PULL_REQUEST`.
	Events pulumi.StringArrayInput
	// The ID for the Hook.
	HookId pulumi.StringPtrInput
	// The location for the Repository.
	Location pulumi.StringPtrInput
	// A unique identifier for a Hook. The name should be of the format:
	// `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The trigger option for push events.
	// Structure is documented below.
	PushOption HookPushOptionPtrInput
	// The ID for the Repository.
	RepositoryId pulumi.StringPtrInput
	// The sensitive query string to be appended to the target URI.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SensitiveQueryString pulumi.StringPtrInput
	// The target URI to which the payloads will be delivered.
	TargetUri pulumi.StringPtrInput
	// Unique identifier of the hook.
	Uid pulumi.StringPtrInput
	// Update timestamp.
	UpdateTime pulumi.StringPtrInput
}

func (HookState) ElementType() reflect.Type {
	return reflect.TypeOf((*hookState)(nil)).Elem()
}

type hookArgs struct {
	// Determines if the hook disabled or not.
	// Set to true to stop sending traffic.
	Disabled *bool `pulumi:"disabled"`
	// The events that trigger hook on.
	// Each value may be one of: `PUSH`, `PULL_REQUEST`.
	Events []string `pulumi:"events"`
	// The ID for the Hook.
	HookId string `pulumi:"hookId"`
	// The location for the Repository.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The trigger option for push events.
	// Structure is documented below.
	PushOption *HookPushOption `pulumi:"pushOption"`
	// The ID for the Repository.
	RepositoryId string `pulumi:"repositoryId"`
	// The sensitive query string to be appended to the target URI.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SensitiveQueryString *string `pulumi:"sensitiveQueryString"`
	// The target URI to which the payloads will be delivered.
	TargetUri string `pulumi:"targetUri"`
}

// The set of arguments for constructing a Hook resource.
type HookArgs struct {
	// Determines if the hook disabled or not.
	// Set to true to stop sending traffic.
	Disabled pulumi.BoolPtrInput
	// The events that trigger hook on.
	// Each value may be one of: `PUSH`, `PULL_REQUEST`.
	Events pulumi.StringArrayInput
	// The ID for the Hook.
	HookId pulumi.StringInput
	// The location for the Repository.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The trigger option for push events.
	// Structure is documented below.
	PushOption HookPushOptionPtrInput
	// The ID for the Repository.
	RepositoryId pulumi.StringInput
	// The sensitive query string to be appended to the target URI.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SensitiveQueryString pulumi.StringPtrInput
	// The target URI to which the payloads will be delivered.
	TargetUri pulumi.StringInput
}

func (HookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hookArgs)(nil)).Elem()
}

type HookInput interface {
	pulumi.Input

	ToHookOutput() HookOutput
	ToHookOutputWithContext(ctx context.Context) HookOutput
}

func (*Hook) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (i *Hook) ToHookOutput() HookOutput {
	return i.ToHookOutputWithContext(context.Background())
}

func (i *Hook) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookOutput)
}

// HookArrayInput is an input type that accepts HookArray and HookArrayOutput values.
// You can construct a concrete instance of `HookArrayInput` via:
//
//	HookArray{ HookArgs{...} }
type HookArrayInput interface {
	pulumi.Input

	ToHookArrayOutput() HookArrayOutput
	ToHookArrayOutputWithContext(context.Context) HookArrayOutput
}

type HookArray []HookInput

func (HookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hook)(nil)).Elem()
}

func (i HookArray) ToHookArrayOutput() HookArrayOutput {
	return i.ToHookArrayOutputWithContext(context.Background())
}

func (i HookArray) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookArrayOutput)
}

// HookMapInput is an input type that accepts HookMap and HookMapOutput values.
// You can construct a concrete instance of `HookMapInput` via:
//
//	HookMap{ "key": HookArgs{...} }
type HookMapInput interface {
	pulumi.Input

	ToHookMapOutput() HookMapOutput
	ToHookMapOutputWithContext(context.Context) HookMapOutput
}

type HookMap map[string]HookInput

func (HookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hook)(nil)).Elem()
}

func (i HookMap) ToHookMapOutput() HookMapOutput {
	return i.ToHookMapOutputWithContext(context.Background())
}

func (i HookMap) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookMapOutput)
}

type HookOutput struct{ *pulumi.OutputState }

func (HookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (o HookOutput) ToHookOutput() HookOutput {
	return o
}

func (o HookOutput) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return o
}

// Create timestamp.
func (o HookOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Determines if the hook disabled or not.
// Set to true to stop sending traffic.
func (o HookOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The events that trigger hook on.
// Each value may be one of: `PUSH`, `PULL_REQUEST`.
func (o HookOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringArrayOutput { return v.Events }).(pulumi.StringArrayOutput)
}

// The ID for the Hook.
func (o HookOutput) HookId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.HookId }).(pulumi.StringOutput)
}

// The location for the Repository.
func (o HookOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A unique identifier for a Hook. The name should be of the format:
// `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
func (o HookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o HookOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The trigger option for push events.
// Structure is documented below.
func (o HookOutput) PushOption() HookPushOptionOutput {
	return o.ApplyT(func(v *Hook) HookPushOptionOutput { return v.PushOption }).(HookPushOptionOutput)
}

// The ID for the Repository.
func (o HookOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// The sensitive query string to be appended to the target URI.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o HookOutput) SensitiveQueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringPtrOutput { return v.SensitiveQueryString }).(pulumi.StringPtrOutput)
}

// The target URI to which the payloads will be delivered.
func (o HookOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.TargetUri }).(pulumi.StringOutput)
}

// Unique identifier of the hook.
func (o HookOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Update timestamp.
func (o HookOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type HookArrayOutput struct{ *pulumi.OutputState }

func (HookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hook)(nil)).Elem()
}

func (o HookArrayOutput) ToHookArrayOutput() HookArrayOutput {
	return o
}

func (o HookArrayOutput) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return o
}

func (o HookArrayOutput) Index(i pulumi.IntInput) HookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hook {
		return vs[0].([]*Hook)[vs[1].(int)]
	}).(HookOutput)
}

type HookMapOutput struct{ *pulumi.OutputState }

func (HookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hook)(nil)).Elem()
}

func (o HookMapOutput) ToHookMapOutput() HookMapOutput {
	return o
}

func (o HookMapOutput) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return o
}

func (o HookMapOutput) MapIndex(k pulumi.StringInput) HookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hook {
		return vs[0].(map[string]*Hook)[vs[1].(string)]
	}).(HookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HookInput)(nil)).Elem(), &Hook{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookArrayInput)(nil)).Elem(), HookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookMapInput)(nil)).Elem(), HookMap{})
	pulumi.RegisterOutputType(HookOutput{})
	pulumi.RegisterOutputType(HookArrayOutput{})
	pulumi.RegisterOutputType(HookMapOutput{})
}
