// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securesourcemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Repositories store source code. It supports all Git SCM client commands and has built-in pull requests and issue tracking. Both HTTPS and SSH authentication are supported.
//
// To get more information about Repository, see:
//
// * [API documentation](https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
//
// ## Example Usage
//
// ### Secure Source Manager Repository Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/securesourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := securesourcemanager.NewInstance(ctx, "instance", &securesourcemanager.InstanceArgs{
//				Location:       pulumi.String("us-central1"),
//				InstanceId:     pulumi.String("my-instance"),
//				DeletionPolicy: pulumi.String("PREVENT"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securesourcemanager.NewRepository(ctx, "default", &securesourcemanager.RepositoryArgs{
//				Location:       pulumi.String("us-central1"),
//				RepositoryId:   pulumi.String("my-repository"),
//				Instance:       instance.Name,
//				DeletionPolicy: pulumi.String("PREVENT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Secure Source Manager Repository Initial Config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/securesourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := securesourcemanager.NewInstance(ctx, "instance", &securesourcemanager.InstanceArgs{
//				Location:       pulumi.String("us-central1"),
//				InstanceId:     pulumi.String("my-instance"),
//				DeletionPolicy: pulumi.String("PREVENT"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securesourcemanager.NewRepository(ctx, "default", &securesourcemanager.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository"),
//				Instance:     instance.Name,
//				Description:  pulumi.String("This is a test repository"),
//				InitialConfig: &securesourcemanager.RepositoryInitialConfigArgs{
//					DefaultBranch: pulumi.String("main"),
//					Gitignores: pulumi.StringArray{
//						pulumi.String("python"),
//					},
//					License: pulumi.String("mit"),
//					Readme:  pulumi.String("default"),
//				},
//				DeletionPolicy: pulumi.String("PREVENT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repository can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}`
//
// * `{{project}}/{{location}}/{{repository_id}}`
//
// * `{{location}}/{{repository_id}}`
//
// * `{{repository_id}}`
//
// When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securesourcemanager/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/repository:Repository default {{project}}/{{location}}/{{repository_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/repository:Repository default {{location}}/{{repository_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/repository:Repository default {{repository_id}}
// ```
type Repository struct {
	pulumi.CustomResourceState

	// Time the repository was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The deletion policy for the repository. Setting `ABANDON` allows the resource
	// to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
	// and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
	// by erroring out during plan.
	// Default is `DELETE`.  Possible values are:
	// * DELETE
	// * PREVENT
	// * ABANDON
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// Description of the repository, which cannot exceed 500 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Initial configurations for the repository.
	// Structure is documented below.
	InitialConfig RepositoryInitialConfigPtrOutput `pulumi:"initialConfig"`
	// The name of the instance in which the repository is hosted.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// The location for the Repository.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for the Repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// Unique identifier of the repository.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the repository was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// URIs for the repository.
	// Structure is documented below.
	Uris RepositoryUriArrayOutput `pulumi:"uris"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("gcp:securesourcemanager/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("gcp:securesourcemanager/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	// Time the repository was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// The deletion policy for the repository. Setting `ABANDON` allows the resource
	// to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
	// and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
	// by erroring out during plan.
	// Default is `DELETE`.  Possible values are:
	// * DELETE
	// * PREVENT
	// * ABANDON
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// Description of the repository, which cannot exceed 500 characters.
	Description *string `pulumi:"description"`
	// Initial configurations for the repository.
	// Structure is documented below.
	InitialConfig *RepositoryInitialConfig `pulumi:"initialConfig"`
	// The name of the instance in which the repository is hosted.
	Instance *string `pulumi:"instance"`
	// The location for the Repository.
	Location *string `pulumi:"location"`
	// The resource name for the Repository.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// Unique identifier of the repository.
	Uid *string `pulumi:"uid"`
	// Time the repository was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
	// URIs for the repository.
	// Structure is documented below.
	Uris []RepositoryUri `pulumi:"uris"`
}

type RepositoryState struct {
	// Time the repository was created in UTC.
	CreateTime pulumi.StringPtrInput
	// The deletion policy for the repository. Setting `ABANDON` allows the resource
	// to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
	// and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
	// by erroring out during plan.
	// Default is `DELETE`.  Possible values are:
	// * DELETE
	// * PREVENT
	// * ABANDON
	DeletionPolicy pulumi.StringPtrInput
	// Description of the repository, which cannot exceed 500 characters.
	Description pulumi.StringPtrInput
	// Initial configurations for the repository.
	// Structure is documented below.
	InitialConfig RepositoryInitialConfigPtrInput
	// The name of the instance in which the repository is hosted.
	Instance pulumi.StringPtrInput
	// The location for the Repository.
	Location pulumi.StringPtrInput
	// The resource name for the Repository.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID for the Repository.
	RepositoryId pulumi.StringPtrInput
	// Unique identifier of the repository.
	Uid pulumi.StringPtrInput
	// Time the repository was updated in UTC.
	UpdateTime pulumi.StringPtrInput
	// URIs for the repository.
	// Structure is documented below.
	Uris RepositoryUriArrayInput
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	// The deletion policy for the repository. Setting `ABANDON` allows the resource
	// to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
	// and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
	// by erroring out during plan.
	// Default is `DELETE`.  Possible values are:
	// * DELETE
	// * PREVENT
	// * ABANDON
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// Description of the repository, which cannot exceed 500 characters.
	Description *string `pulumi:"description"`
	// Initial configurations for the repository.
	// Structure is documented below.
	InitialConfig *RepositoryInitialConfig `pulumi:"initialConfig"`
	// The name of the instance in which the repository is hosted.
	Instance string `pulumi:"instance"`
	// The location for the Repository.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId string `pulumi:"repositoryId"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// The deletion policy for the repository. Setting `ABANDON` allows the resource
	// to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
	// and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
	// by erroring out during plan.
	// Default is `DELETE`.  Possible values are:
	// * DELETE
	// * PREVENT
	// * ABANDON
	DeletionPolicy pulumi.StringPtrInput
	// Description of the repository, which cannot exceed 500 characters.
	Description pulumi.StringPtrInput
	// Initial configurations for the repository.
	// Structure is documented below.
	InitialConfig RepositoryInitialConfigPtrInput
	// The name of the instance in which the repository is hosted.
	Instance pulumi.StringInput
	// The location for the Repository.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID for the Repository.
	RepositoryId pulumi.StringInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryInput interface {
	pulumi.Input

	ToRepositoryOutput() RepositoryOutput
	ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput
}

func (*Repository) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (i *Repository) ToRepositoryOutput() RepositoryOutput {
	return i.ToRepositoryOutputWithContext(context.Background())
}

func (i *Repository) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOutput)
}

// RepositoryArrayInput is an input type that accepts RepositoryArray and RepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoryArrayInput` via:
//
//	RepositoryArray{ RepositoryArgs{...} }
type RepositoryArrayInput interface {
	pulumi.Input

	ToRepositoryArrayOutput() RepositoryArrayOutput
	ToRepositoryArrayOutputWithContext(context.Context) RepositoryArrayOutput
}

type RepositoryArray []RepositoryInput

func (RepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (i RepositoryArray) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return i.ToRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoryArray) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryArrayOutput)
}

// RepositoryMapInput is an input type that accepts RepositoryMap and RepositoryMapOutput values.
// You can construct a concrete instance of `RepositoryMapInput` via:
//
//	RepositoryMap{ "key": RepositoryArgs{...} }
type RepositoryMapInput interface {
	pulumi.Input

	ToRepositoryMapOutput() RepositoryMapOutput
	ToRepositoryMapOutputWithContext(context.Context) RepositoryMapOutput
}

type RepositoryMap map[string]RepositoryInput

func (RepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (i RepositoryMap) ToRepositoryMapOutput() RepositoryMapOutput {
	return i.ToRepositoryMapOutputWithContext(context.Background())
}

func (i RepositoryMap) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMapOutput)
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

// Time the repository was created in UTC.
func (o RepositoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The deletion policy for the repository. Setting `ABANDON` allows the resource
// to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
// and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
// by erroring out during plan.
// Default is `DELETE`.  Possible values are:
// * DELETE
// * PREVENT
// * ABANDON
func (o RepositoryOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// Description of the repository, which cannot exceed 500 characters.
func (o RepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Initial configurations for the repository.
// Structure is documented below.
func (o RepositoryOutput) InitialConfig() RepositoryInitialConfigPtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryInitialConfigPtrOutput { return v.InitialConfig }).(RepositoryInitialConfigPtrOutput)
}

// The name of the instance in which the repository is hosted.
func (o RepositoryOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// The location for the Repository.
func (o RepositoryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the Repository.
func (o RepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RepositoryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The ID for the Repository.
func (o RepositoryOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// Unique identifier of the repository.
func (o RepositoryOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the repository was updated in UTC.
func (o RepositoryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// URIs for the repository.
// Structure is documented below.
func (o RepositoryOutput) Uris() RepositoryUriArrayOutput {
	return o.ApplyT(func(v *Repository) RepositoryUriArrayOutput { return v.Uris }).(RepositoryUriArrayOutput)
}

type RepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].([]*Repository)[vs[1].(int)]
	}).(RepositoryOutput)
}

type RepositoryMapOutput struct{ *pulumi.OutputState }

func (RepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (o RepositoryMapOutput) ToRepositoryMapOutput() RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) MapIndex(k pulumi.StringInput) RepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].(map[string]*Repository)[vs[1].(string)]
	}).(RepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryInput)(nil)).Elem(), &Repository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryArrayInput)(nil)).Elem(), RepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMapInput)(nil)).Elem(), RepositoryMap{})
	pulumi.RegisterOutputType(RepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMapOutput{})
}
