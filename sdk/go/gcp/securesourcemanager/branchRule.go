// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securesourcemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BranchRule is the protection rule to enforce pre-defined rules on designated branches within a repository.
//
// To get more information about BranchRule, see:
//
// * [API documentation](https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories.branchRules)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
//
// ## Example Usage
//
// ### Secure Source Manager Branch Rule Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := securesourcemanager.NewInstance(ctx, "instance", &securesourcemanager.InstanceArgs{
//				Location:       pulumi.String("us-central1"),
//				InstanceId:     pulumi.String("my-basic-instance"),
//				DeletionPolicy: pulumi.String("PREVENT"),
//			})
//			if err != nil {
//				return err
//			}
//			repository, err := securesourcemanager.NewRepository(ctx, "repository", &securesourcemanager.RepositoryArgs{
//				RepositoryId:   pulumi.String("my-basic-repository"),
//				Location:       instance.Location,
//				Instance:       instance.Name,
//				DeletionPolicy: pulumi.String("PREVENT"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securesourcemanager.NewBranchRule(ctx, "basic", &securesourcemanager.BranchRuleArgs{
//				BranchRuleId:   pulumi.String("my-basic-branchrule"),
//				RepositoryId:   repository.RepositoryId,
//				Location:       repository.Location,
//				IncludePattern: pulumi.String("main"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Secure Source Manager Branch Rule With Fields
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := securesourcemanager.NewInstance(ctx, "instance", &securesourcemanager.InstanceArgs{
//				Location:       pulumi.String("us-central1"),
//				InstanceId:     pulumi.String("my-initial-instance"),
//				DeletionPolicy: pulumi.String("PREVENT"),
//			})
//			if err != nil {
//				return err
//			}
//			repository, err := securesourcemanager.NewRepository(ctx, "repository", &securesourcemanager.RepositoryArgs{
//				RepositoryId:   pulumi.String("my-initial-repository"),
//				Instance:       instance.Name,
//				Location:       instance.Location,
//				DeletionPolicy: pulumi.String("PREVENT"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securesourcemanager.NewBranchRule(ctx, "default", &securesourcemanager.BranchRuleArgs{
//				BranchRuleId:            pulumi.String("my-initial-branchrule"),
//				Location:                repository.Location,
//				RepositoryId:            repository.RepositoryId,
//				IncludePattern:          pulumi.String("test"),
//				MinimumApprovalsCount:   pulumi.Int(2),
//				MinimumReviewsCount:     pulumi.Int(2),
//				RequireCommentsResolved: pulumi.Bool(true),
//				RequireLinearHistory:    pulumi.Bool(true),
//				RequirePullRequest:      pulumi.Bool(true),
//				Disabled:                pulumi.Bool(false),
//				AllowStaleReviews:       pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BranchRule can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/branchRules/{{branch_rule_id}}`
//
// * `{{project}}/{{location}}/{{repository_id}}/{{branch_rule_id}}`
//
// * `{{location}}/{{repository_id}}/{{branch_rule_id}}`
//
// * `{{branch_rule_id}}`
//
// When using the `pulumi import` command, BranchRule can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securesourcemanager/branchRule:BranchRule default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/branchRules/{{branch_rule_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{project}}/{{location}}/{{repository_id}}/{{branch_rule_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{location}}/{{repository_id}}/{{branch_rule_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{branch_rule_id}}
// ```
type BranchRule struct {
	pulumi.CustomResourceState

	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews pulumi.BoolPtrOutput `pulumi:"allowStaleReviews"`
	// The ID for the BranchRule.
	BranchRuleId pulumi.StringOutput `pulumi:"branchRuleId"`
	// Time the BranchRule was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Determines if the branch rule is disabled or not.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern pulumi.StringOutput `pulumi:"includePattern"`
	// The location for the Repository.
	Location pulumi.StringOutput `pulumi:"location"`
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount pulumi.IntPtrOutput `pulumi:"minimumApprovalsCount"`
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount pulumi.IntPtrOutput `pulumi:"minimumReviewsCount"`
	// The resource name for the BranchRule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved pulumi.BoolPtrOutput `pulumi:"requireCommentsResolved"`
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory pulumi.BoolPtrOutput `pulumi:"requireLinearHistory"`
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest pulumi.BoolPtrOutput `pulumi:"requirePullRequest"`
	// Unique identifier of the BranchRule.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the BranchRule was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBranchRule registers a new resource with the given unique name, arguments, and options.
func NewBranchRule(ctx *pulumi.Context,
	name string, args *BranchRuleArgs, opts ...pulumi.ResourceOption) (*BranchRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BranchRuleId == nil {
		return nil, errors.New("invalid value for required argument 'BranchRuleId'")
	}
	if args.IncludePattern == nil {
		return nil, errors.New("invalid value for required argument 'IncludePattern'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BranchRule
	err := ctx.RegisterResource("gcp:securesourcemanager/branchRule:BranchRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBranchRule gets an existing BranchRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranchRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BranchRuleState, opts ...pulumi.ResourceOption) (*BranchRule, error) {
	var resource BranchRule
	err := ctx.ReadResource("gcp:securesourcemanager/branchRule:BranchRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BranchRule resources.
type branchRuleState struct {
	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews *bool `pulumi:"allowStaleReviews"`
	// The ID for the BranchRule.
	BranchRuleId *string `pulumi:"branchRuleId"`
	// Time the BranchRule was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Determines if the branch rule is disabled or not.
	Disabled *bool `pulumi:"disabled"`
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern *string `pulumi:"includePattern"`
	// The location for the Repository.
	Location *string `pulumi:"location"`
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount *int `pulumi:"minimumApprovalsCount"`
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount *int `pulumi:"minimumReviewsCount"`
	// The resource name for the BranchRule.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved *bool `pulumi:"requireCommentsResolved"`
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory *bool `pulumi:"requireLinearHistory"`
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest *bool `pulumi:"requirePullRequest"`
	// Unique identifier of the BranchRule.
	Uid *string `pulumi:"uid"`
	// Time the BranchRule was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type BranchRuleState struct {
	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews pulumi.BoolPtrInput
	// The ID for the BranchRule.
	BranchRuleId pulumi.StringPtrInput
	// Time the BranchRule was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Determines if the branch rule is disabled or not.
	Disabled pulumi.BoolPtrInput
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern pulumi.StringPtrInput
	// The location for the Repository.
	Location pulumi.StringPtrInput
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount pulumi.IntPtrInput
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount pulumi.IntPtrInput
	// The resource name for the BranchRule.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID for the Repository.
	RepositoryId pulumi.StringPtrInput
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved pulumi.BoolPtrInput
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory pulumi.BoolPtrInput
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest pulumi.BoolPtrInput
	// Unique identifier of the BranchRule.
	Uid pulumi.StringPtrInput
	// Time the BranchRule was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (BranchRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*branchRuleState)(nil)).Elem()
}

type branchRuleArgs struct {
	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews *bool `pulumi:"allowStaleReviews"`
	// The ID for the BranchRule.
	BranchRuleId string `pulumi:"branchRuleId"`
	// Determines if the branch rule is disabled or not.
	Disabled *bool `pulumi:"disabled"`
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern string `pulumi:"includePattern"`
	// The location for the Repository.
	Location string `pulumi:"location"`
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount *int `pulumi:"minimumApprovalsCount"`
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount *int `pulumi:"minimumReviewsCount"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId string `pulumi:"repositoryId"`
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved *bool `pulumi:"requireCommentsResolved"`
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory *bool `pulumi:"requireLinearHistory"`
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest *bool `pulumi:"requirePullRequest"`
}

// The set of arguments for constructing a BranchRule resource.
type BranchRuleArgs struct {
	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews pulumi.BoolPtrInput
	// The ID for the BranchRule.
	BranchRuleId pulumi.StringInput
	// Determines if the branch rule is disabled or not.
	Disabled pulumi.BoolPtrInput
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern pulumi.StringInput
	// The location for the Repository.
	Location pulumi.StringInput
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount pulumi.IntPtrInput
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID for the Repository.
	RepositoryId pulumi.StringInput
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved pulumi.BoolPtrInput
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory pulumi.BoolPtrInput
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest pulumi.BoolPtrInput
}

func (BranchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*branchRuleArgs)(nil)).Elem()
}

type BranchRuleInput interface {
	pulumi.Input

	ToBranchRuleOutput() BranchRuleOutput
	ToBranchRuleOutputWithContext(ctx context.Context) BranchRuleOutput
}

func (*BranchRule) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRule)(nil)).Elem()
}

func (i *BranchRule) ToBranchRuleOutput() BranchRuleOutput {
	return i.ToBranchRuleOutputWithContext(context.Background())
}

func (i *BranchRule) ToBranchRuleOutputWithContext(ctx context.Context) BranchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRuleOutput)
}

// BranchRuleArrayInput is an input type that accepts BranchRuleArray and BranchRuleArrayOutput values.
// You can construct a concrete instance of `BranchRuleArrayInput` via:
//
//	BranchRuleArray{ BranchRuleArgs{...} }
type BranchRuleArrayInput interface {
	pulumi.Input

	ToBranchRuleArrayOutput() BranchRuleArrayOutput
	ToBranchRuleArrayOutputWithContext(context.Context) BranchRuleArrayOutput
}

type BranchRuleArray []BranchRuleInput

func (BranchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchRule)(nil)).Elem()
}

func (i BranchRuleArray) ToBranchRuleArrayOutput() BranchRuleArrayOutput {
	return i.ToBranchRuleArrayOutputWithContext(context.Background())
}

func (i BranchRuleArray) ToBranchRuleArrayOutputWithContext(ctx context.Context) BranchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRuleArrayOutput)
}

// BranchRuleMapInput is an input type that accepts BranchRuleMap and BranchRuleMapOutput values.
// You can construct a concrete instance of `BranchRuleMapInput` via:
//
//	BranchRuleMap{ "key": BranchRuleArgs{...} }
type BranchRuleMapInput interface {
	pulumi.Input

	ToBranchRuleMapOutput() BranchRuleMapOutput
	ToBranchRuleMapOutputWithContext(context.Context) BranchRuleMapOutput
}

type BranchRuleMap map[string]BranchRuleInput

func (BranchRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchRule)(nil)).Elem()
}

func (i BranchRuleMap) ToBranchRuleMapOutput() BranchRuleMapOutput {
	return i.ToBranchRuleMapOutputWithContext(context.Background())
}

func (i BranchRuleMap) ToBranchRuleMapOutputWithContext(ctx context.Context) BranchRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRuleMapOutput)
}

type BranchRuleOutput struct{ *pulumi.OutputState }

func (BranchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRule)(nil)).Elem()
}

func (o BranchRuleOutput) ToBranchRuleOutput() BranchRuleOutput {
	return o
}

func (o BranchRuleOutput) ToBranchRuleOutputWithContext(ctx context.Context) BranchRuleOutput {
	return o
}

// Determines if allow stale reviews or approvals before merging to the branch.
func (o BranchRuleOutput) AllowStaleReviews() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.BoolPtrOutput { return v.AllowStaleReviews }).(pulumi.BoolPtrOutput)
}

// The ID for the BranchRule.
func (o BranchRuleOutput) BranchRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.BranchRuleId }).(pulumi.StringOutput)
}

// Time the BranchRule was created in UTC.
func (o BranchRuleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Determines if the branch rule is disabled or not.
func (o BranchRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
func (o BranchRuleOutput) IncludePattern() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.IncludePattern }).(pulumi.StringOutput)
}

// The location for the Repository.
func (o BranchRuleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The minimum number of approvals required for the branch rule to be matched.
func (o BranchRuleOutput) MinimumApprovalsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.IntPtrOutput { return v.MinimumApprovalsCount }).(pulumi.IntPtrOutput)
}

// The minimum number of reviews required for the branch rule to be matched.
func (o BranchRuleOutput) MinimumReviewsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.IntPtrOutput { return v.MinimumReviewsCount }).(pulumi.IntPtrOutput)
}

// The resource name for the BranchRule.
func (o BranchRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BranchRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The ID for the Repository.
func (o BranchRuleOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// Determines if require comments resolved before merging to the branch.
func (o BranchRuleOutput) RequireCommentsResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.BoolPtrOutput { return v.RequireCommentsResolved }).(pulumi.BoolPtrOutput)
}

// Determines if require linear history before merging to the branch.
func (o BranchRuleOutput) RequireLinearHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.BoolPtrOutput { return v.RequireLinearHistory }).(pulumi.BoolPtrOutput)
}

// Determines if the branch rule requires a pull request or not.
func (o BranchRuleOutput) RequirePullRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.BoolPtrOutput { return v.RequirePullRequest }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the BranchRule.
func (o BranchRuleOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the BranchRule was updated in UTC.
func (o BranchRuleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRule) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type BranchRuleArrayOutput struct{ *pulumi.OutputState }

func (BranchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchRule)(nil)).Elem()
}

func (o BranchRuleArrayOutput) ToBranchRuleArrayOutput() BranchRuleArrayOutput {
	return o
}

func (o BranchRuleArrayOutput) ToBranchRuleArrayOutputWithContext(ctx context.Context) BranchRuleArrayOutput {
	return o
}

func (o BranchRuleArrayOutput) Index(i pulumi.IntInput) BranchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BranchRule {
		return vs[0].([]*BranchRule)[vs[1].(int)]
	}).(BranchRuleOutput)
}

type BranchRuleMapOutput struct{ *pulumi.OutputState }

func (BranchRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchRule)(nil)).Elem()
}

func (o BranchRuleMapOutput) ToBranchRuleMapOutput() BranchRuleMapOutput {
	return o
}

func (o BranchRuleMapOutput) ToBranchRuleMapOutputWithContext(ctx context.Context) BranchRuleMapOutput {
	return o
}

func (o BranchRuleMapOutput) MapIndex(k pulumi.StringInput) BranchRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BranchRule {
		return vs[0].(map[string]*BranchRule)[vs[1].(string)]
	}).(BranchRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRuleInput)(nil)).Elem(), &BranchRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRuleArrayInput)(nil)).Elem(), BranchRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRuleMapInput)(nil)).Elem(), BranchRuleMap{})
	pulumi.RegisterOutputType(BranchRuleOutput{})
	pulumi.RegisterOutputType(BranchRuleArrayOutput{})
	pulumi.RegisterOutputType(BranchRuleMapOutput{})
}
