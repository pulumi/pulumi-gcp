// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package contactcenterinsights

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AnalysisRuleAnnotatorSelector struct {
	// The issue model to run. If not provided, the most recently deployed topic
	// model will be used. The provided issue model will only be used for
	// inference if the issue model is deployed and if runIssueModelAnnotator
	// is set to true. If more than one issue model is provided, only the first
	// provided issue model will be used for inference.
	IssueModels []string `pulumi:"issueModels"`
	// The list of phrase matchers to run. If not provided, all active phrase
	// matchers will be used. If inactive phrase matchers are provided, they will
	// not be used. Phrase matchers will be run only if
	// runPhraseMatcherAnnotator is set to true. Format:
	// projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
	PhraseMatchers []string `pulumi:"phraseMatchers"`
	// Configuration for the QA feature.
	// Structure is documented below.
	QaConfig *AnalysisRuleAnnotatorSelectorQaConfig `pulumi:"qaConfig"`
	// Whether to run the entity annotator.
	RunEntityAnnotator *bool `pulumi:"runEntityAnnotator"`
	// Whether to run the intent annotator.
	RunIntentAnnotator *bool `pulumi:"runIntentAnnotator"`
	// Whether to run the interruption annotator.
	RunInterruptionAnnotator *bool `pulumi:"runInterruptionAnnotator"`
	// Whether to run the issue model annotator. A model should have already been
	// deployed for this to take effect.
	RunIssueModelAnnotator *bool `pulumi:"runIssueModelAnnotator"`
	// Whether to run the active phrase matcher annotator(s).
	RunPhraseMatcherAnnotator *bool `pulumi:"runPhraseMatcherAnnotator"`
	// Whether to run the QA annotator.
	RunQaAnnotator *bool `pulumi:"runQaAnnotator"`
	// Whether to run the sentiment annotator.
	RunSentimentAnnotator *bool `pulumi:"runSentimentAnnotator"`
	// Whether to run the silence annotator.
	RunSilenceAnnotator *bool `pulumi:"runSilenceAnnotator"`
	// Whether to run the summarization annotator.
	RunSummarizationAnnotator *bool `pulumi:"runSummarizationAnnotator"`
	// Configuration for summarization.
	// Structure is documented below.
	SummarizationConfig *AnalysisRuleAnnotatorSelectorSummarizationConfig `pulumi:"summarizationConfig"`
}

// AnalysisRuleAnnotatorSelectorInput is an input type that accepts AnalysisRuleAnnotatorSelectorArgs and AnalysisRuleAnnotatorSelectorOutput values.
// You can construct a concrete instance of `AnalysisRuleAnnotatorSelectorInput` via:
//
//	AnalysisRuleAnnotatorSelectorArgs{...}
type AnalysisRuleAnnotatorSelectorInput interface {
	pulumi.Input

	ToAnalysisRuleAnnotatorSelectorOutput() AnalysisRuleAnnotatorSelectorOutput
	ToAnalysisRuleAnnotatorSelectorOutputWithContext(context.Context) AnalysisRuleAnnotatorSelectorOutput
}

type AnalysisRuleAnnotatorSelectorArgs struct {
	// The issue model to run. If not provided, the most recently deployed topic
	// model will be used. The provided issue model will only be used for
	// inference if the issue model is deployed and if runIssueModelAnnotator
	// is set to true. If more than one issue model is provided, only the first
	// provided issue model will be used for inference.
	IssueModels pulumi.StringArrayInput `pulumi:"issueModels"`
	// The list of phrase matchers to run. If not provided, all active phrase
	// matchers will be used. If inactive phrase matchers are provided, they will
	// not be used. Phrase matchers will be run only if
	// runPhraseMatcherAnnotator is set to true. Format:
	// projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
	PhraseMatchers pulumi.StringArrayInput `pulumi:"phraseMatchers"`
	// Configuration for the QA feature.
	// Structure is documented below.
	QaConfig AnalysisRuleAnnotatorSelectorQaConfigPtrInput `pulumi:"qaConfig"`
	// Whether to run the entity annotator.
	RunEntityAnnotator pulumi.BoolPtrInput `pulumi:"runEntityAnnotator"`
	// Whether to run the intent annotator.
	RunIntentAnnotator pulumi.BoolPtrInput `pulumi:"runIntentAnnotator"`
	// Whether to run the interruption annotator.
	RunInterruptionAnnotator pulumi.BoolPtrInput `pulumi:"runInterruptionAnnotator"`
	// Whether to run the issue model annotator. A model should have already been
	// deployed for this to take effect.
	RunIssueModelAnnotator pulumi.BoolPtrInput `pulumi:"runIssueModelAnnotator"`
	// Whether to run the active phrase matcher annotator(s).
	RunPhraseMatcherAnnotator pulumi.BoolPtrInput `pulumi:"runPhraseMatcherAnnotator"`
	// Whether to run the QA annotator.
	RunQaAnnotator pulumi.BoolPtrInput `pulumi:"runQaAnnotator"`
	// Whether to run the sentiment annotator.
	RunSentimentAnnotator pulumi.BoolPtrInput `pulumi:"runSentimentAnnotator"`
	// Whether to run the silence annotator.
	RunSilenceAnnotator pulumi.BoolPtrInput `pulumi:"runSilenceAnnotator"`
	// Whether to run the summarization annotator.
	RunSummarizationAnnotator pulumi.BoolPtrInput `pulumi:"runSummarizationAnnotator"`
	// Configuration for summarization.
	// Structure is documented below.
	SummarizationConfig AnalysisRuleAnnotatorSelectorSummarizationConfigPtrInput `pulumi:"summarizationConfig"`
}

func (AnalysisRuleAnnotatorSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisRuleAnnotatorSelector)(nil)).Elem()
}

func (i AnalysisRuleAnnotatorSelectorArgs) ToAnalysisRuleAnnotatorSelectorOutput() AnalysisRuleAnnotatorSelectorOutput {
	return i.ToAnalysisRuleAnnotatorSelectorOutputWithContext(context.Background())
}

func (i AnalysisRuleAnnotatorSelectorArgs) ToAnalysisRuleAnnotatorSelectorOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorOutput)
}

func (i AnalysisRuleAnnotatorSelectorArgs) ToAnalysisRuleAnnotatorSelectorPtrOutput() AnalysisRuleAnnotatorSelectorPtrOutput {
	return i.ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(context.Background())
}

func (i AnalysisRuleAnnotatorSelectorArgs) ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorOutput).ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(ctx)
}

// AnalysisRuleAnnotatorSelectorPtrInput is an input type that accepts AnalysisRuleAnnotatorSelectorArgs, AnalysisRuleAnnotatorSelectorPtr and AnalysisRuleAnnotatorSelectorPtrOutput values.
// You can construct a concrete instance of `AnalysisRuleAnnotatorSelectorPtrInput` via:
//
//	        AnalysisRuleAnnotatorSelectorArgs{...}
//
//	or:
//
//	        nil
type AnalysisRuleAnnotatorSelectorPtrInput interface {
	pulumi.Input

	ToAnalysisRuleAnnotatorSelectorPtrOutput() AnalysisRuleAnnotatorSelectorPtrOutput
	ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(context.Context) AnalysisRuleAnnotatorSelectorPtrOutput
}

type analysisRuleAnnotatorSelectorPtrType AnalysisRuleAnnotatorSelectorArgs

func AnalysisRuleAnnotatorSelectorPtr(v *AnalysisRuleAnnotatorSelectorArgs) AnalysisRuleAnnotatorSelectorPtrInput {
	return (*analysisRuleAnnotatorSelectorPtrType)(v)
}

func (*analysisRuleAnnotatorSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRuleAnnotatorSelector)(nil)).Elem()
}

func (i *analysisRuleAnnotatorSelectorPtrType) ToAnalysisRuleAnnotatorSelectorPtrOutput() AnalysisRuleAnnotatorSelectorPtrOutput {
	return i.ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(context.Background())
}

func (i *analysisRuleAnnotatorSelectorPtrType) ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorPtrOutput)
}

type AnalysisRuleAnnotatorSelectorOutput struct{ *pulumi.OutputState }

func (AnalysisRuleAnnotatorSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisRuleAnnotatorSelector)(nil)).Elem()
}

func (o AnalysisRuleAnnotatorSelectorOutput) ToAnalysisRuleAnnotatorSelectorOutput() AnalysisRuleAnnotatorSelectorOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorOutput) ToAnalysisRuleAnnotatorSelectorOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorOutput) ToAnalysisRuleAnnotatorSelectorPtrOutput() AnalysisRuleAnnotatorSelectorPtrOutput {
	return o.ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(context.Background())
}

func (o AnalysisRuleAnnotatorSelectorOutput) ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisRuleAnnotatorSelector) *AnalysisRuleAnnotatorSelector {
		return &v
	}).(AnalysisRuleAnnotatorSelectorPtrOutput)
}

// The issue model to run. If not provided, the most recently deployed topic
// model will be used. The provided issue model will only be used for
// inference if the issue model is deployed and if runIssueModelAnnotator
// is set to true. If more than one issue model is provided, only the first
// provided issue model will be used for inference.
func (o AnalysisRuleAnnotatorSelectorOutput) IssueModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) []string { return v.IssueModels }).(pulumi.StringArrayOutput)
}

// The list of phrase matchers to run. If not provided, all active phrase
// matchers will be used. If inactive phrase matchers are provided, they will
// not be used. Phrase matchers will be run only if
// runPhraseMatcherAnnotator is set to true. Format:
// projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
func (o AnalysisRuleAnnotatorSelectorOutput) PhraseMatchers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) []string { return v.PhraseMatchers }).(pulumi.StringArrayOutput)
}

// Configuration for the QA feature.
// Structure is documented below.
func (o AnalysisRuleAnnotatorSelectorOutput) QaConfig() AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *AnalysisRuleAnnotatorSelectorQaConfig { return v.QaConfig }).(AnalysisRuleAnnotatorSelectorQaConfigPtrOutput)
}

// Whether to run the entity annotator.
func (o AnalysisRuleAnnotatorSelectorOutput) RunEntityAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunEntityAnnotator }).(pulumi.BoolPtrOutput)
}

// Whether to run the intent annotator.
func (o AnalysisRuleAnnotatorSelectorOutput) RunIntentAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunIntentAnnotator }).(pulumi.BoolPtrOutput)
}

// Whether to run the interruption annotator.
func (o AnalysisRuleAnnotatorSelectorOutput) RunInterruptionAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunInterruptionAnnotator }).(pulumi.BoolPtrOutput)
}

// Whether to run the issue model annotator. A model should have already been
// deployed for this to take effect.
func (o AnalysisRuleAnnotatorSelectorOutput) RunIssueModelAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunIssueModelAnnotator }).(pulumi.BoolPtrOutput)
}

// Whether to run the active phrase matcher annotator(s).
func (o AnalysisRuleAnnotatorSelectorOutput) RunPhraseMatcherAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunPhraseMatcherAnnotator }).(pulumi.BoolPtrOutput)
}

// Whether to run the QA annotator.
func (o AnalysisRuleAnnotatorSelectorOutput) RunQaAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunQaAnnotator }).(pulumi.BoolPtrOutput)
}

// Whether to run the sentiment annotator.
func (o AnalysisRuleAnnotatorSelectorOutput) RunSentimentAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunSentimentAnnotator }).(pulumi.BoolPtrOutput)
}

// Whether to run the silence annotator.
func (o AnalysisRuleAnnotatorSelectorOutput) RunSilenceAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunSilenceAnnotator }).(pulumi.BoolPtrOutput)
}

// Whether to run the summarization annotator.
func (o AnalysisRuleAnnotatorSelectorOutput) RunSummarizationAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *bool { return v.RunSummarizationAnnotator }).(pulumi.BoolPtrOutput)
}

// Configuration for summarization.
// Structure is documented below.
func (o AnalysisRuleAnnotatorSelectorOutput) SummarizationConfig() AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelector) *AnalysisRuleAnnotatorSelectorSummarizationConfig {
		return v.SummarizationConfig
	}).(AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput)
}

type AnalysisRuleAnnotatorSelectorPtrOutput struct{ *pulumi.OutputState }

func (AnalysisRuleAnnotatorSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRuleAnnotatorSelector)(nil)).Elem()
}

func (o AnalysisRuleAnnotatorSelectorPtrOutput) ToAnalysisRuleAnnotatorSelectorPtrOutput() AnalysisRuleAnnotatorSelectorPtrOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorPtrOutput) ToAnalysisRuleAnnotatorSelectorPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorPtrOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorPtrOutput) Elem() AnalysisRuleAnnotatorSelectorOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) AnalysisRuleAnnotatorSelector {
		if v != nil {
			return *v
		}
		var ret AnalysisRuleAnnotatorSelector
		return ret
	}).(AnalysisRuleAnnotatorSelectorOutput)
}

// The issue model to run. If not provided, the most recently deployed topic
// model will be used. The provided issue model will only be used for
// inference if the issue model is deployed and if runIssueModelAnnotator
// is set to true. If more than one issue model is provided, only the first
// provided issue model will be used for inference.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) IssueModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) []string {
		if v == nil {
			return nil
		}
		return v.IssueModels
	}).(pulumi.StringArrayOutput)
}

// The list of phrase matchers to run. If not provided, all active phrase
// matchers will be used. If inactive phrase matchers are provided, they will
// not be used. Phrase matchers will be run only if
// runPhraseMatcherAnnotator is set to true. Format:
// projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
func (o AnalysisRuleAnnotatorSelectorPtrOutput) PhraseMatchers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) []string {
		if v == nil {
			return nil
		}
		return v.PhraseMatchers
	}).(pulumi.StringArrayOutput)
}

// Configuration for the QA feature.
// Structure is documented below.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) QaConfig() AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *AnalysisRuleAnnotatorSelectorQaConfig {
		if v == nil {
			return nil
		}
		return v.QaConfig
	}).(AnalysisRuleAnnotatorSelectorQaConfigPtrOutput)
}

// Whether to run the entity annotator.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunEntityAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunEntityAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Whether to run the intent annotator.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunIntentAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunIntentAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Whether to run the interruption annotator.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunInterruptionAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunInterruptionAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Whether to run the issue model annotator. A model should have already been
// deployed for this to take effect.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunIssueModelAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunIssueModelAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Whether to run the active phrase matcher annotator(s).
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunPhraseMatcherAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunPhraseMatcherAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Whether to run the QA annotator.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunQaAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunQaAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Whether to run the sentiment annotator.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunSentimentAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunSentimentAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Whether to run the silence annotator.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunSilenceAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunSilenceAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Whether to run the summarization annotator.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) RunSummarizationAnnotator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *bool {
		if v == nil {
			return nil
		}
		return v.RunSummarizationAnnotator
	}).(pulumi.BoolPtrOutput)
}

// Configuration for summarization.
// Structure is documented below.
func (o AnalysisRuleAnnotatorSelectorPtrOutput) SummarizationConfig() AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelector) *AnalysisRuleAnnotatorSelectorSummarizationConfig {
		if v == nil {
			return nil
		}
		return v.SummarizationConfig
	}).(AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput)
}

type AnalysisRuleAnnotatorSelectorQaConfig struct {
	// Container for a list of scorecards.
	// Structure is documented below.
	ScorecardList *AnalysisRuleAnnotatorSelectorQaConfigScorecardList `pulumi:"scorecardList"`
}

// AnalysisRuleAnnotatorSelectorQaConfigInput is an input type that accepts AnalysisRuleAnnotatorSelectorQaConfigArgs and AnalysisRuleAnnotatorSelectorQaConfigOutput values.
// You can construct a concrete instance of `AnalysisRuleAnnotatorSelectorQaConfigInput` via:
//
//	AnalysisRuleAnnotatorSelectorQaConfigArgs{...}
type AnalysisRuleAnnotatorSelectorQaConfigInput interface {
	pulumi.Input

	ToAnalysisRuleAnnotatorSelectorQaConfigOutput() AnalysisRuleAnnotatorSelectorQaConfigOutput
	ToAnalysisRuleAnnotatorSelectorQaConfigOutputWithContext(context.Context) AnalysisRuleAnnotatorSelectorQaConfigOutput
}

type AnalysisRuleAnnotatorSelectorQaConfigArgs struct {
	// Container for a list of scorecards.
	// Structure is documented below.
	ScorecardList AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrInput `pulumi:"scorecardList"`
}

func (AnalysisRuleAnnotatorSelectorQaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisRuleAnnotatorSelectorQaConfig)(nil)).Elem()
}

func (i AnalysisRuleAnnotatorSelectorQaConfigArgs) ToAnalysisRuleAnnotatorSelectorQaConfigOutput() AnalysisRuleAnnotatorSelectorQaConfigOutput {
	return i.ToAnalysisRuleAnnotatorSelectorQaConfigOutputWithContext(context.Background())
}

func (i AnalysisRuleAnnotatorSelectorQaConfigArgs) ToAnalysisRuleAnnotatorSelectorQaConfigOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorQaConfigOutput)
}

func (i AnalysisRuleAnnotatorSelectorQaConfigArgs) ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return i.ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(context.Background())
}

func (i AnalysisRuleAnnotatorSelectorQaConfigArgs) ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorQaConfigOutput).ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(ctx)
}

// AnalysisRuleAnnotatorSelectorQaConfigPtrInput is an input type that accepts AnalysisRuleAnnotatorSelectorQaConfigArgs, AnalysisRuleAnnotatorSelectorQaConfigPtr and AnalysisRuleAnnotatorSelectorQaConfigPtrOutput values.
// You can construct a concrete instance of `AnalysisRuleAnnotatorSelectorQaConfigPtrInput` via:
//
//	        AnalysisRuleAnnotatorSelectorQaConfigArgs{...}
//
//	or:
//
//	        nil
type AnalysisRuleAnnotatorSelectorQaConfigPtrInput interface {
	pulumi.Input

	ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigPtrOutput
	ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(context.Context) AnalysisRuleAnnotatorSelectorQaConfigPtrOutput
}

type analysisRuleAnnotatorSelectorQaConfigPtrType AnalysisRuleAnnotatorSelectorQaConfigArgs

func AnalysisRuleAnnotatorSelectorQaConfigPtr(v *AnalysisRuleAnnotatorSelectorQaConfigArgs) AnalysisRuleAnnotatorSelectorQaConfigPtrInput {
	return (*analysisRuleAnnotatorSelectorQaConfigPtrType)(v)
}

func (*analysisRuleAnnotatorSelectorQaConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRuleAnnotatorSelectorQaConfig)(nil)).Elem()
}

func (i *analysisRuleAnnotatorSelectorQaConfigPtrType) ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return i.ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(context.Background())
}

func (i *analysisRuleAnnotatorSelectorQaConfigPtrType) ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorQaConfigPtrOutput)
}

type AnalysisRuleAnnotatorSelectorQaConfigOutput struct{ *pulumi.OutputState }

func (AnalysisRuleAnnotatorSelectorQaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisRuleAnnotatorSelectorQaConfig)(nil)).Elem()
}

func (o AnalysisRuleAnnotatorSelectorQaConfigOutput) ToAnalysisRuleAnnotatorSelectorQaConfigOutput() AnalysisRuleAnnotatorSelectorQaConfigOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorQaConfigOutput) ToAnalysisRuleAnnotatorSelectorQaConfigOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorQaConfigOutput) ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return o.ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(context.Background())
}

func (o AnalysisRuleAnnotatorSelectorQaConfigOutput) ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisRuleAnnotatorSelectorQaConfig) *AnalysisRuleAnnotatorSelectorQaConfig {
		return &v
	}).(AnalysisRuleAnnotatorSelectorQaConfigPtrOutput)
}

// Container for a list of scorecards.
// Structure is documented below.
func (o AnalysisRuleAnnotatorSelectorQaConfigOutput) ScorecardList() AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelectorQaConfig) *AnalysisRuleAnnotatorSelectorQaConfigScorecardList {
		return v.ScorecardList
	}).(AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput)
}

type AnalysisRuleAnnotatorSelectorQaConfigPtrOutput struct{ *pulumi.OutputState }

func (AnalysisRuleAnnotatorSelectorQaConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRuleAnnotatorSelectorQaConfig)(nil)).Elem()
}

func (o AnalysisRuleAnnotatorSelectorQaConfigPtrOutput) ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorQaConfigPtrOutput) ToAnalysisRuleAnnotatorSelectorQaConfigPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigPtrOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorQaConfigPtrOutput) Elem() AnalysisRuleAnnotatorSelectorQaConfigOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelectorQaConfig) AnalysisRuleAnnotatorSelectorQaConfig {
		if v != nil {
			return *v
		}
		var ret AnalysisRuleAnnotatorSelectorQaConfig
		return ret
	}).(AnalysisRuleAnnotatorSelectorQaConfigOutput)
}

// Container for a list of scorecards.
// Structure is documented below.
func (o AnalysisRuleAnnotatorSelectorQaConfigPtrOutput) ScorecardList() AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelectorQaConfig) *AnalysisRuleAnnotatorSelectorQaConfigScorecardList {
		if v == nil {
			return nil
		}
		return v.ScorecardList
	}).(AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput)
}

type AnalysisRuleAnnotatorSelectorQaConfigScorecardList struct {
	// List of QaScorecardRevisions.
	QaScorecardRevisions []string `pulumi:"qaScorecardRevisions"`
}

// AnalysisRuleAnnotatorSelectorQaConfigScorecardListInput is an input type that accepts AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs and AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput values.
// You can construct a concrete instance of `AnalysisRuleAnnotatorSelectorQaConfigScorecardListInput` via:
//
//	AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs{...}
type AnalysisRuleAnnotatorSelectorQaConfigScorecardListInput interface {
	pulumi.Input

	ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput() AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput
	ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListOutputWithContext(context.Context) AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput
}

type AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs struct {
	// List of QaScorecardRevisions.
	QaScorecardRevisions pulumi.StringArrayInput `pulumi:"qaScorecardRevisions"`
}

func (AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisRuleAnnotatorSelectorQaConfigScorecardList)(nil)).Elem()
}

func (i AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput() AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput {
	return i.ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListOutputWithContext(context.Background())
}

func (i AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput)
}

func (i AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return i.ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(context.Background())
}

func (i AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput).ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(ctx)
}

// AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrInput is an input type that accepts AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs, AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtr and AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput values.
// You can construct a concrete instance of `AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrInput` via:
//
//	        AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs{...}
//
//	or:
//
//	        nil
type AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrInput interface {
	pulumi.Input

	ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput
	ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(context.Context) AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput
}

type analysisRuleAnnotatorSelectorQaConfigScorecardListPtrType AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs

func AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtr(v *AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs) AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrInput {
	return (*analysisRuleAnnotatorSelectorQaConfigScorecardListPtrType)(v)
}

func (*analysisRuleAnnotatorSelectorQaConfigScorecardListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRuleAnnotatorSelectorQaConfigScorecardList)(nil)).Elem()
}

func (i *analysisRuleAnnotatorSelectorQaConfigScorecardListPtrType) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return i.ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(context.Background())
}

func (i *analysisRuleAnnotatorSelectorQaConfigScorecardListPtrType) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput)
}

type AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput struct{ *pulumi.OutputState }

func (AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisRuleAnnotatorSelectorQaConfigScorecardList)(nil)).Elem()
}

func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput() AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return o.ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(context.Background())
}

func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisRuleAnnotatorSelectorQaConfigScorecardList) *AnalysisRuleAnnotatorSelectorQaConfigScorecardList {
		return &v
	}).(AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput)
}

// List of QaScorecardRevisions.
func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput) QaScorecardRevisions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelectorQaConfigScorecardList) []string { return v.QaScorecardRevisions }).(pulumi.StringArrayOutput)
}

type AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput struct{ *pulumi.OutputState }

func (AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRuleAnnotatorSelectorQaConfigScorecardList)(nil)).Elem()
}

func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput() AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput) ToAnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput) Elem() AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelectorQaConfigScorecardList) AnalysisRuleAnnotatorSelectorQaConfigScorecardList {
		if v != nil {
			return *v
		}
		var ret AnalysisRuleAnnotatorSelectorQaConfigScorecardList
		return ret
	}).(AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput)
}

// List of QaScorecardRevisions.
func (o AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput) QaScorecardRevisions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelectorQaConfigScorecardList) []string {
		if v == nil {
			return nil
		}
		return v.QaScorecardRevisions
	}).(pulumi.StringArrayOutput)
}

type AnalysisRuleAnnotatorSelectorSummarizationConfig struct {
	// Resource name of the Dialogflow conversation profile.
	// Format:
	// projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
	ConversationProfile *string `pulumi:"conversationProfile"`
	// Default summarization model to be used.
	// Possible values:
	// SUMMARIZATION_MODEL_UNSPECIFIED
	// BASELINE_MODEL
	// BASELINE_MODEL_V2_0
	// Possible values are: `BASELINE_MODEL`, `BASELINE_MODEL_V2_0`.
	SummarizationModel *string `pulumi:"summarizationModel"`
}

// AnalysisRuleAnnotatorSelectorSummarizationConfigInput is an input type that accepts AnalysisRuleAnnotatorSelectorSummarizationConfigArgs and AnalysisRuleAnnotatorSelectorSummarizationConfigOutput values.
// You can construct a concrete instance of `AnalysisRuleAnnotatorSelectorSummarizationConfigInput` via:
//
//	AnalysisRuleAnnotatorSelectorSummarizationConfigArgs{...}
type AnalysisRuleAnnotatorSelectorSummarizationConfigInput interface {
	pulumi.Input

	ToAnalysisRuleAnnotatorSelectorSummarizationConfigOutput() AnalysisRuleAnnotatorSelectorSummarizationConfigOutput
	ToAnalysisRuleAnnotatorSelectorSummarizationConfigOutputWithContext(context.Context) AnalysisRuleAnnotatorSelectorSummarizationConfigOutput
}

type AnalysisRuleAnnotatorSelectorSummarizationConfigArgs struct {
	// Resource name of the Dialogflow conversation profile.
	// Format:
	// projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
	ConversationProfile pulumi.StringPtrInput `pulumi:"conversationProfile"`
	// Default summarization model to be used.
	// Possible values:
	// SUMMARIZATION_MODEL_UNSPECIFIED
	// BASELINE_MODEL
	// BASELINE_MODEL_V2_0
	// Possible values are: `BASELINE_MODEL`, `BASELINE_MODEL_V2_0`.
	SummarizationModel pulumi.StringPtrInput `pulumi:"summarizationModel"`
}

func (AnalysisRuleAnnotatorSelectorSummarizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisRuleAnnotatorSelectorSummarizationConfig)(nil)).Elem()
}

func (i AnalysisRuleAnnotatorSelectorSummarizationConfigArgs) ToAnalysisRuleAnnotatorSelectorSummarizationConfigOutput() AnalysisRuleAnnotatorSelectorSummarizationConfigOutput {
	return i.ToAnalysisRuleAnnotatorSelectorSummarizationConfigOutputWithContext(context.Background())
}

func (i AnalysisRuleAnnotatorSelectorSummarizationConfigArgs) ToAnalysisRuleAnnotatorSelectorSummarizationConfigOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorSummarizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorSummarizationConfigOutput)
}

func (i AnalysisRuleAnnotatorSelectorSummarizationConfigArgs) ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput() AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return i.ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(context.Background())
}

func (i AnalysisRuleAnnotatorSelectorSummarizationConfigArgs) ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorSummarizationConfigOutput).ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(ctx)
}

// AnalysisRuleAnnotatorSelectorSummarizationConfigPtrInput is an input type that accepts AnalysisRuleAnnotatorSelectorSummarizationConfigArgs, AnalysisRuleAnnotatorSelectorSummarizationConfigPtr and AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput values.
// You can construct a concrete instance of `AnalysisRuleAnnotatorSelectorSummarizationConfigPtrInput` via:
//
//	        AnalysisRuleAnnotatorSelectorSummarizationConfigArgs{...}
//
//	or:
//
//	        nil
type AnalysisRuleAnnotatorSelectorSummarizationConfigPtrInput interface {
	pulumi.Input

	ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput() AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput
	ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(context.Context) AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput
}

type analysisRuleAnnotatorSelectorSummarizationConfigPtrType AnalysisRuleAnnotatorSelectorSummarizationConfigArgs

func AnalysisRuleAnnotatorSelectorSummarizationConfigPtr(v *AnalysisRuleAnnotatorSelectorSummarizationConfigArgs) AnalysisRuleAnnotatorSelectorSummarizationConfigPtrInput {
	return (*analysisRuleAnnotatorSelectorSummarizationConfigPtrType)(v)
}

func (*analysisRuleAnnotatorSelectorSummarizationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRuleAnnotatorSelectorSummarizationConfig)(nil)).Elem()
}

func (i *analysisRuleAnnotatorSelectorSummarizationConfigPtrType) ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput() AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return i.ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(context.Background())
}

func (i *analysisRuleAnnotatorSelectorSummarizationConfigPtrType) ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput)
}

type AnalysisRuleAnnotatorSelectorSummarizationConfigOutput struct{ *pulumi.OutputState }

func (AnalysisRuleAnnotatorSelectorSummarizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisRuleAnnotatorSelectorSummarizationConfig)(nil)).Elem()
}

func (o AnalysisRuleAnnotatorSelectorSummarizationConfigOutput) ToAnalysisRuleAnnotatorSelectorSummarizationConfigOutput() AnalysisRuleAnnotatorSelectorSummarizationConfigOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorSummarizationConfigOutput) ToAnalysisRuleAnnotatorSelectorSummarizationConfigOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorSummarizationConfigOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorSummarizationConfigOutput) ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput() AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return o.ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(context.Background())
}

func (o AnalysisRuleAnnotatorSelectorSummarizationConfigOutput) ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisRuleAnnotatorSelectorSummarizationConfig) *AnalysisRuleAnnotatorSelectorSummarizationConfig {
		return &v
	}).(AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput)
}

// Resource name of the Dialogflow conversation profile.
// Format:
// projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
func (o AnalysisRuleAnnotatorSelectorSummarizationConfigOutput) ConversationProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelectorSummarizationConfig) *string { return v.ConversationProfile }).(pulumi.StringPtrOutput)
}

// Default summarization model to be used.
// Possible values:
// SUMMARIZATION_MODEL_UNSPECIFIED
// BASELINE_MODEL
// BASELINE_MODEL_V2_0
// Possible values are: `BASELINE_MODEL`, `BASELINE_MODEL_V2_0`.
func (o AnalysisRuleAnnotatorSelectorSummarizationConfigOutput) SummarizationModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalysisRuleAnnotatorSelectorSummarizationConfig) *string { return v.SummarizationModel }).(pulumi.StringPtrOutput)
}

type AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput struct{ *pulumi.OutputState }

func (AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRuleAnnotatorSelectorSummarizationConfig)(nil)).Elem()
}

func (o AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput) ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput() AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput) ToAnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutputWithContext(ctx context.Context) AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput {
	return o
}

func (o AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput) Elem() AnalysisRuleAnnotatorSelectorSummarizationConfigOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelectorSummarizationConfig) AnalysisRuleAnnotatorSelectorSummarizationConfig {
		if v != nil {
			return *v
		}
		var ret AnalysisRuleAnnotatorSelectorSummarizationConfig
		return ret
	}).(AnalysisRuleAnnotatorSelectorSummarizationConfigOutput)
}

// Resource name of the Dialogflow conversation profile.
// Format:
// projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
func (o AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput) ConversationProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelectorSummarizationConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConversationProfile
	}).(pulumi.StringPtrOutput)
}

// Default summarization model to be used.
// Possible values:
// SUMMARIZATION_MODEL_UNSPECIFIED
// BASELINE_MODEL
// BASELINE_MODEL_V2_0
// Possible values are: `BASELINE_MODEL`, `BASELINE_MODEL_V2_0`.
func (o AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput) SummarizationModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalysisRuleAnnotatorSelectorSummarizationConfig) *string {
		if v == nil {
			return nil
		}
		return v.SummarizationModel
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleAnnotatorSelectorInput)(nil)).Elem(), AnalysisRuleAnnotatorSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleAnnotatorSelectorPtrInput)(nil)).Elem(), AnalysisRuleAnnotatorSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleAnnotatorSelectorQaConfigInput)(nil)).Elem(), AnalysisRuleAnnotatorSelectorQaConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleAnnotatorSelectorQaConfigPtrInput)(nil)).Elem(), AnalysisRuleAnnotatorSelectorQaConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleAnnotatorSelectorQaConfigScorecardListInput)(nil)).Elem(), AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrInput)(nil)).Elem(), AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleAnnotatorSelectorSummarizationConfigInput)(nil)).Elem(), AnalysisRuleAnnotatorSelectorSummarizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleAnnotatorSelectorSummarizationConfigPtrInput)(nil)).Elem(), AnalysisRuleAnnotatorSelectorSummarizationConfigArgs{})
	pulumi.RegisterOutputType(AnalysisRuleAnnotatorSelectorOutput{})
	pulumi.RegisterOutputType(AnalysisRuleAnnotatorSelectorPtrOutput{})
	pulumi.RegisterOutputType(AnalysisRuleAnnotatorSelectorQaConfigOutput{})
	pulumi.RegisterOutputType(AnalysisRuleAnnotatorSelectorQaConfigPtrOutput{})
	pulumi.RegisterOutputType(AnalysisRuleAnnotatorSelectorQaConfigScorecardListOutput{})
	pulumi.RegisterOutputType(AnalysisRuleAnnotatorSelectorQaConfigScorecardListPtrOutput{})
	pulumi.RegisterOutputType(AnalysisRuleAnnotatorSelectorSummarizationConfigOutput{})
	pulumi.RegisterOutputType(AnalysisRuleAnnotatorSelectorSummarizationConfigPtrOutput{})
}
