// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package contactcenterinsights

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The CCAI Insights project wide analysis rule.
// This rule will be applied to all conversations that match the filter defined in the rule.
// For a conversation matches the filter, the annotators specified in the rule will be run.
// If a conversation matches multiple rules, a union of all the annotators will be run.
// One project can have multiple analysis rules.
//
// To get more information about AnalysisRule, see:
//
// * [API documentation](https://cloud.google.com/contact-center/insights/docs/reference/rest/v1/projects.locations.analysisRules)
// * How-to Guides
//   - [Configure analysis rules using the API](https://cloud.google.com/contact-center/insights/docs/analysis-rule)
//
// ## Example Usage
//
// ### Contact Center Insights Analysis Rule Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/contactcenterinsights"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := contactcenterinsights.NewAnalysisRule(ctx, "analysis_rule_basic", &contactcenterinsights.AnalysisRuleArgs{
//				Location:    pulumi.String("us-central1"),
//				DisplayName: pulumi.String("analysis-rule-display-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Contact Center Insights Analysis Rule Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/contactcenterinsights"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := contactcenterinsights.NewAnalysisRule(ctx, "analysis_rule_full", &contactcenterinsights.AnalysisRuleArgs{
//				Location:           pulumi.String("us-central1"),
//				DisplayName:        pulumi.String("analysis-rule-display-name"),
//				ConversationFilter: pulumi.String("agent_id = \"1\""),
//				AnnotatorSelector: &contactcenterinsights.AnalysisRuleAnnotatorSelectorArgs{
//					RunInterruptionAnnotator: pulumi.Bool(false),
//					IssueModels: pulumi.StringArray{
//						pulumi.String("projects/1111111111111/locations/us-central1/issueModels/some_issue_model_id"),
//					},
//					PhraseMatchers: pulumi.StringArray{
//						pulumi.String("projects/1111111111111/locations/us-central1/phraseMatchers/123"),
//					},
//					QaConfig: &contactcenterinsights.AnalysisRuleAnnotatorSelectorQaConfigArgs{
//						ScorecardList: &contactcenterinsights.AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs{
//							QaScorecardRevisions: pulumi.StringArray{
//								pulumi.String("projects/1111111111111/locations/us-central1/qaScorecards/*/revisions/some_scorecard_revision_id"),
//							},
//						},
//					},
//					RunEntityAnnotator:        pulumi.Bool(false),
//					RunIntentAnnotator:        pulumi.Bool(false),
//					RunIssueModelAnnotator:    pulumi.Bool(false),
//					RunPhraseMatcherAnnotator: pulumi.Bool(false),
//					RunQaAnnotator:            pulumi.Bool(false),
//					RunSentimentAnnotator:     pulumi.Bool(false),
//					RunSilenceAnnotator:       pulumi.Bool(true),
//					RunSummarizationAnnotator: pulumi.Bool(false),
//					SummarizationConfig: &contactcenterinsights.AnalysisRuleAnnotatorSelectorSummarizationConfigArgs{
//						SummarizationModel: pulumi.String("BASELINE_MODEL"),
//					},
//				},
//				AnalysisPercentage: pulumi.Float64(0.5),
//				Active:             pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Contact Center Insights Analysis Rule Profile
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/contactcenterinsights"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := contactcenterinsights.NewAnalysisRule(ctx, "analysis_rule_profile", &contactcenterinsights.AnalysisRuleArgs{
//				Location:           pulumi.String("us-central1"),
//				DisplayName:        pulumi.String("analysis-rule-display-name"),
//				ConversationFilter: pulumi.String("agent_id = \"1\""),
//				AnnotatorSelector: &contactcenterinsights.AnalysisRuleAnnotatorSelectorArgs{
//					RunInterruptionAnnotator: pulumi.Bool(false),
//					IssueModels: pulumi.StringArray{
//						pulumi.String("projects/1111111111111/locations/us-central1/issueModels/some_issue_model_id"),
//					},
//					PhraseMatchers: pulumi.StringArray{
//						pulumi.String("projects/1111111111111/locations/us-central1/phraseMatchers/123"),
//					},
//					QaConfig: &contactcenterinsights.AnalysisRuleAnnotatorSelectorQaConfigArgs{
//						ScorecardList: &contactcenterinsights.AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs{
//							QaScorecardRevisions: pulumi.StringArray{
//								pulumi.String("projects/1111111111111/locations/us-central1/qaScorecards/*/revisions/some_scorecard_revision_id"),
//							},
//						},
//					},
//					RunEntityAnnotator:        pulumi.Bool(false),
//					RunIntentAnnotator:        pulumi.Bool(false),
//					RunIssueModelAnnotator:    pulumi.Bool(false),
//					RunPhraseMatcherAnnotator: pulumi.Bool(false),
//					RunQaAnnotator:            pulumi.Bool(false),
//					RunSentimentAnnotator:     pulumi.Bool(false),
//					RunSilenceAnnotator:       pulumi.Bool(true),
//					RunSummarizationAnnotator: pulumi.Bool(false),
//					SummarizationConfig: &contactcenterinsights.AnalysisRuleAnnotatorSelectorSummarizationConfigArgs{
//						ConversationProfile: pulumi.String("projects/1111111111111/locations/us-central1/conversationProfiles/some_conversation_profile"),
//					},
//				},
//				AnalysisPercentage: pulumi.Float64(0.5),
//				Active:             pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AnalysisRule can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/analysisRules/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, AnalysisRule can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default projects/{{project}}/locations/{{location}}/analysisRules/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default {{location}}/{{name}}
// ```
type AnalysisRule struct {
	pulumi.CustomResourceState

	// If true, apply this rule to conversations. Otherwise, this rule is
	// inactive and saved as a draft.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// Percentage of conversations that we should apply this analysis setting
	// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
	// are sampled in a determenestic way. The original runtimePercentage &
	// upload percentage will be replaced by defining filters on the conversation.
	AnalysisPercentage pulumi.Float64PtrOutput `pulumi:"analysisPercentage"`
	// Selector of all available annotators and phrase matchers to run.
	// Structure is documented below.
	AnnotatorSelector AnalysisRuleAnnotatorSelectorPtrOutput `pulumi:"annotatorSelector"`
	// Filter for the conversations that should apply this analysis
	// rule. An empty filter means this analysis rule applies to all
	// conversations.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	ConversationFilter pulumi.StringPtrOutput `pulumi:"conversationFilter"`
	// Output only. The time at which this analysis rule was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Display Name of the analysis rule.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the analysis rule. Randomly generated by Insights.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. The most recent time at which this analysis rule was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAnalysisRule registers a new resource with the given unique name, arguments, and options.
func NewAnalysisRule(ctx *pulumi.Context,
	name string, args *AnalysisRuleArgs, opts ...pulumi.ResourceOption) (*AnalysisRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnalysisRule
	err := ctx.RegisterResource("gcp:contactcenterinsights/analysisRule:AnalysisRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalysisRule gets an existing AnalysisRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalysisRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalysisRuleState, opts ...pulumi.ResourceOption) (*AnalysisRule, error) {
	var resource AnalysisRule
	err := ctx.ReadResource("gcp:contactcenterinsights/analysisRule:AnalysisRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalysisRule resources.
type analysisRuleState struct {
	// If true, apply this rule to conversations. Otherwise, this rule is
	// inactive and saved as a draft.
	Active *bool `pulumi:"active"`
	// Percentage of conversations that we should apply this analysis setting
	// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
	// are sampled in a determenestic way. The original runtimePercentage &
	// upload percentage will be replaced by defining filters on the conversation.
	AnalysisPercentage *float64 `pulumi:"analysisPercentage"`
	// Selector of all available annotators and phrase matchers to run.
	// Structure is documented below.
	AnnotatorSelector *AnalysisRuleAnnotatorSelector `pulumi:"annotatorSelector"`
	// Filter for the conversations that should apply this analysis
	// rule. An empty filter means this analysis rule applies to all
	// conversations.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	ConversationFilter *string `pulumi:"conversationFilter"`
	// Output only. The time at which this analysis rule was created.
	CreateTime *string `pulumi:"createTime"`
	// Display Name of the analysis rule.
	DisplayName *string `pulumi:"displayName"`
	// Location of the resource.
	Location *string `pulumi:"location"`
	// The resource name of the analysis rule. Randomly generated by Insights.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. The most recent time at which this analysis rule was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AnalysisRuleState struct {
	// If true, apply this rule to conversations. Otherwise, this rule is
	// inactive and saved as a draft.
	Active pulumi.BoolPtrInput
	// Percentage of conversations that we should apply this analysis setting
	// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
	// are sampled in a determenestic way. The original runtimePercentage &
	// upload percentage will be replaced by defining filters on the conversation.
	AnalysisPercentage pulumi.Float64PtrInput
	// Selector of all available annotators and phrase matchers to run.
	// Structure is documented below.
	AnnotatorSelector AnalysisRuleAnnotatorSelectorPtrInput
	// Filter for the conversations that should apply this analysis
	// rule. An empty filter means this analysis rule applies to all
	// conversations.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	ConversationFilter pulumi.StringPtrInput
	// Output only. The time at which this analysis rule was created.
	CreateTime pulumi.StringPtrInput
	// Display Name of the analysis rule.
	DisplayName pulumi.StringPtrInput
	// Location of the resource.
	Location pulumi.StringPtrInput
	// The resource name of the analysis rule. Randomly generated by Insights.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. The most recent time at which this analysis rule was updated.
	UpdateTime pulumi.StringPtrInput
}

func (AnalysisRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisRuleState)(nil)).Elem()
}

type analysisRuleArgs struct {
	// If true, apply this rule to conversations. Otherwise, this rule is
	// inactive and saved as a draft.
	Active *bool `pulumi:"active"`
	// Percentage of conversations that we should apply this analysis setting
	// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
	// are sampled in a determenestic way. The original runtimePercentage &
	// upload percentage will be replaced by defining filters on the conversation.
	AnalysisPercentage *float64 `pulumi:"analysisPercentage"`
	// Selector of all available annotators and phrase matchers to run.
	// Structure is documented below.
	AnnotatorSelector *AnalysisRuleAnnotatorSelector `pulumi:"annotatorSelector"`
	// Filter for the conversations that should apply this analysis
	// rule. An empty filter means this analysis rule applies to all
	// conversations.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	ConversationFilter *string `pulumi:"conversationFilter"`
	// Display Name of the analysis rule.
	DisplayName *string `pulumi:"displayName"`
	// Location of the resource.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a AnalysisRule resource.
type AnalysisRuleArgs struct {
	// If true, apply this rule to conversations. Otherwise, this rule is
	// inactive and saved as a draft.
	Active pulumi.BoolPtrInput
	// Percentage of conversations that we should apply this analysis setting
	// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
	// are sampled in a determenestic way. The original runtimePercentage &
	// upload percentage will be replaced by defining filters on the conversation.
	AnalysisPercentage pulumi.Float64PtrInput
	// Selector of all available annotators and phrase matchers to run.
	// Structure is documented below.
	AnnotatorSelector AnalysisRuleAnnotatorSelectorPtrInput
	// Filter for the conversations that should apply this analysis
	// rule. An empty filter means this analysis rule applies to all
	// conversations.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	ConversationFilter pulumi.StringPtrInput
	// Display Name of the analysis rule.
	DisplayName pulumi.StringPtrInput
	// Location of the resource.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AnalysisRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisRuleArgs)(nil)).Elem()
}

type AnalysisRuleInput interface {
	pulumi.Input

	ToAnalysisRuleOutput() AnalysisRuleOutput
	ToAnalysisRuleOutputWithContext(ctx context.Context) AnalysisRuleOutput
}

func (*AnalysisRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRule)(nil)).Elem()
}

func (i *AnalysisRule) ToAnalysisRuleOutput() AnalysisRuleOutput {
	return i.ToAnalysisRuleOutputWithContext(context.Background())
}

func (i *AnalysisRule) ToAnalysisRuleOutputWithContext(ctx context.Context) AnalysisRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleOutput)
}

// AnalysisRuleArrayInput is an input type that accepts AnalysisRuleArray and AnalysisRuleArrayOutput values.
// You can construct a concrete instance of `AnalysisRuleArrayInput` via:
//
//	AnalysisRuleArray{ AnalysisRuleArgs{...} }
type AnalysisRuleArrayInput interface {
	pulumi.Input

	ToAnalysisRuleArrayOutput() AnalysisRuleArrayOutput
	ToAnalysisRuleArrayOutputWithContext(context.Context) AnalysisRuleArrayOutput
}

type AnalysisRuleArray []AnalysisRuleInput

func (AnalysisRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalysisRule)(nil)).Elem()
}

func (i AnalysisRuleArray) ToAnalysisRuleArrayOutput() AnalysisRuleArrayOutput {
	return i.ToAnalysisRuleArrayOutputWithContext(context.Background())
}

func (i AnalysisRuleArray) ToAnalysisRuleArrayOutputWithContext(ctx context.Context) AnalysisRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleArrayOutput)
}

// AnalysisRuleMapInput is an input type that accepts AnalysisRuleMap and AnalysisRuleMapOutput values.
// You can construct a concrete instance of `AnalysisRuleMapInput` via:
//
//	AnalysisRuleMap{ "key": AnalysisRuleArgs{...} }
type AnalysisRuleMapInput interface {
	pulumi.Input

	ToAnalysisRuleMapOutput() AnalysisRuleMapOutput
	ToAnalysisRuleMapOutputWithContext(context.Context) AnalysisRuleMapOutput
}

type AnalysisRuleMap map[string]AnalysisRuleInput

func (AnalysisRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalysisRule)(nil)).Elem()
}

func (i AnalysisRuleMap) ToAnalysisRuleMapOutput() AnalysisRuleMapOutput {
	return i.ToAnalysisRuleMapOutputWithContext(context.Background())
}

func (i AnalysisRuleMap) ToAnalysisRuleMapOutputWithContext(ctx context.Context) AnalysisRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRuleMapOutput)
}

type AnalysisRuleOutput struct{ *pulumi.OutputState }

func (AnalysisRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRule)(nil)).Elem()
}

func (o AnalysisRuleOutput) ToAnalysisRuleOutput() AnalysisRuleOutput {
	return o
}

func (o AnalysisRuleOutput) ToAnalysisRuleOutputWithContext(ctx context.Context) AnalysisRuleOutput {
	return o
}

// If true, apply this rule to conversations. Otherwise, this rule is
// inactive and saved as a draft.
func (o AnalysisRuleOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// Percentage of conversations that we should apply this analysis setting
// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
// are sampled in a determenestic way. The original runtimePercentage &
// upload percentage will be replaced by defining filters on the conversation.
func (o AnalysisRuleOutput) AnalysisPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.Float64PtrOutput { return v.AnalysisPercentage }).(pulumi.Float64PtrOutput)
}

// Selector of all available annotators and phrase matchers to run.
// Structure is documented below.
func (o AnalysisRuleOutput) AnnotatorSelector() AnalysisRuleAnnotatorSelectorPtrOutput {
	return o.ApplyT(func(v *AnalysisRule) AnalysisRuleAnnotatorSelectorPtrOutput { return v.AnnotatorSelector }).(AnalysisRuleAnnotatorSelectorPtrOutput)
}

// Filter for the conversations that should apply this analysis
// rule. An empty filter means this analysis rule applies to all
// conversations.
// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
// for details.
func (o AnalysisRuleOutput) ConversationFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.StringPtrOutput { return v.ConversationFilter }).(pulumi.StringPtrOutput)
}

// Output only. The time at which this analysis rule was created.
func (o AnalysisRuleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Display Name of the analysis rule.
func (o AnalysisRuleOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Location of the resource.
func (o AnalysisRuleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the analysis rule. Randomly generated by Insights.
func (o AnalysisRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AnalysisRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. The most recent time at which this analysis rule was updated.
func (o AnalysisRuleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalysisRule) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AnalysisRuleArrayOutput struct{ *pulumi.OutputState }

func (AnalysisRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalysisRule)(nil)).Elem()
}

func (o AnalysisRuleArrayOutput) ToAnalysisRuleArrayOutput() AnalysisRuleArrayOutput {
	return o
}

func (o AnalysisRuleArrayOutput) ToAnalysisRuleArrayOutputWithContext(ctx context.Context) AnalysisRuleArrayOutput {
	return o
}

func (o AnalysisRuleArrayOutput) Index(i pulumi.IntInput) AnalysisRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnalysisRule {
		return vs[0].([]*AnalysisRule)[vs[1].(int)]
	}).(AnalysisRuleOutput)
}

type AnalysisRuleMapOutput struct{ *pulumi.OutputState }

func (AnalysisRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalysisRule)(nil)).Elem()
}

func (o AnalysisRuleMapOutput) ToAnalysisRuleMapOutput() AnalysisRuleMapOutput {
	return o
}

func (o AnalysisRuleMapOutput) ToAnalysisRuleMapOutputWithContext(ctx context.Context) AnalysisRuleMapOutput {
	return o
}

func (o AnalysisRuleMapOutput) MapIndex(k pulumi.StringInput) AnalysisRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnalysisRule {
		return vs[0].(map[string]*AnalysisRule)[vs[1].(string)]
	}).(AnalysisRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleInput)(nil)).Elem(), &AnalysisRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleArrayInput)(nil)).Elem(), AnalysisRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRuleMapInput)(nil)).Elem(), AnalysisRuleMap{})
	pulumi.RegisterOutputType(AnalysisRuleOutput{})
	pulumi.RegisterOutputType(AnalysisRuleArrayOutput{})
	pulumi.RegisterOutputType(AnalysisRuleMapOutput{})
}
