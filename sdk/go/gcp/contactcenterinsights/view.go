// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package contactcenterinsights

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Insights View resource for filtering conversations
//
// To get more information about View, see:
//
// * [API documentation](https://cloud.google.com/contact-center/insights/docs/reference/rest/v1/projects.locations.views)
//
// ## Example Usage
//
// ### Contact Center Insights View Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/contactcenterinsights"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := contactcenterinsights.NewView(ctx, "basic_view", &contactcenterinsights.ViewArgs{
//				Location:    pulumi.String("us-central1"),
//				DisplayName: pulumi.String("view-display-name"),
//				Value:       pulumi.String("medium=\"CHAT\""),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Contact Center Insights View Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/contactcenterinsights"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := contactcenterinsights.NewView(ctx, "full_view", &contactcenterinsights.ViewArgs{
//				Location:    pulumi.String("us-central1"),
//				DisplayName: pulumi.String("view-display-name"),
//				Value:       pulumi.String("medium=\"PHONE_CALL\""),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// View can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/views/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, View can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:contactcenterinsights/view:View default projects/{{project}}/locations/{{location}}/views/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:contactcenterinsights/view:View default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:contactcenterinsights/view:View default {{location}}/{{name}}
// ```
type View struct {
	pulumi.CustomResourceState

	// Output only. The time at which this view was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The human-readable display name of the view.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the view. Randomly generated by Insights.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. The most recent time at which the view was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// A filter to reduce conversation results to a specific subset.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	Value pulumi.StringPtrOutput `pulumi:"value"`
}

// NewView registers a new resource with the given unique name, arguments, and options.
func NewView(ctx *pulumi.Context,
	name string, args *ViewArgs, opts ...pulumi.ResourceOption) (*View, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource View
	err := ctx.RegisterResource("gcp:contactcenterinsights/view:View", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetView gets an existing View resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewState, opts ...pulumi.ResourceOption) (*View, error) {
	var resource View
	err := ctx.ReadResource("gcp:contactcenterinsights/view:View", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering View resources.
type viewState struct {
	// Output only. The time at which this view was created.
	CreateTime *string `pulumi:"createTime"`
	// The human-readable display name of the view.
	DisplayName *string `pulumi:"displayName"`
	// Location of the resource.
	Location *string `pulumi:"location"`
	// The resource name of the view. Randomly generated by Insights.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. The most recent time at which the view was updated.
	UpdateTime *string `pulumi:"updateTime"`
	// A filter to reduce conversation results to a specific subset.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	Value *string `pulumi:"value"`
}

type ViewState struct {
	// Output only. The time at which this view was created.
	CreateTime pulumi.StringPtrInput
	// The human-readable display name of the view.
	DisplayName pulumi.StringPtrInput
	// Location of the resource.
	Location pulumi.StringPtrInput
	// The resource name of the view. Randomly generated by Insights.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. The most recent time at which the view was updated.
	UpdateTime pulumi.StringPtrInput
	// A filter to reduce conversation results to a specific subset.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	Value pulumi.StringPtrInput
}

func (ViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewState)(nil)).Elem()
}

type viewArgs struct {
	// The human-readable display name of the view.
	DisplayName *string `pulumi:"displayName"`
	// Location of the resource.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A filter to reduce conversation results to a specific subset.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a View resource.
type ViewArgs struct {
	// The human-readable display name of the view.
	DisplayName pulumi.StringPtrInput
	// Location of the resource.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A filter to reduce conversation results to a specific subset.
	// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
	// for details.
	Value pulumi.StringPtrInput
}

func (ViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewArgs)(nil)).Elem()
}

type ViewInput interface {
	pulumi.Input

	ToViewOutput() ViewOutput
	ToViewOutputWithContext(ctx context.Context) ViewOutput
}

func (*View) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (i *View) ToViewOutput() ViewOutput {
	return i.ToViewOutputWithContext(context.Background())
}

func (i *View) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewOutput)
}

// ViewArrayInput is an input type that accepts ViewArray and ViewArrayOutput values.
// You can construct a concrete instance of `ViewArrayInput` via:
//
//	ViewArray{ ViewArgs{...} }
type ViewArrayInput interface {
	pulumi.Input

	ToViewArrayOutput() ViewArrayOutput
	ToViewArrayOutputWithContext(context.Context) ViewArrayOutput
}

type ViewArray []ViewInput

func (ViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (i ViewArray) ToViewArrayOutput() ViewArrayOutput {
	return i.ToViewArrayOutputWithContext(context.Background())
}

func (i ViewArray) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewArrayOutput)
}

// ViewMapInput is an input type that accepts ViewMap and ViewMapOutput values.
// You can construct a concrete instance of `ViewMapInput` via:
//
//	ViewMap{ "key": ViewArgs{...} }
type ViewMapInput interface {
	pulumi.Input

	ToViewMapOutput() ViewMapOutput
	ToViewMapOutputWithContext(context.Context) ViewMapOutput
}

type ViewMap map[string]ViewInput

func (ViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (i ViewMap) ToViewMapOutput() ViewMapOutput {
	return i.ToViewMapOutputWithContext(context.Background())
}

func (i ViewMap) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewMapOutput)
}

type ViewOutput struct{ *pulumi.OutputState }

func (ViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (o ViewOutput) ToViewOutput() ViewOutput {
	return o
}

func (o ViewOutput) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return o
}

// Output only. The time at which this view was created.
func (o ViewOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The human-readable display name of the view.
func (o ViewOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Location of the resource.
func (o ViewOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the view. Randomly generated by Insights.
func (o ViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ViewOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. The most recent time at which the view was updated.
func (o ViewOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// A filter to reduce conversation results to a specific subset.
// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
// for details.
func (o ViewOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.Value }).(pulumi.StringPtrOutput)
}

type ViewArrayOutput struct{ *pulumi.OutputState }

func (ViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (o ViewArrayOutput) ToViewArrayOutput() ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) Index(i pulumi.IntInput) ViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *View {
		return vs[0].([]*View)[vs[1].(int)]
	}).(ViewOutput)
}

type ViewMapOutput struct{ *pulumi.OutputState }

func (ViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (o ViewMapOutput) ToViewMapOutput() ViewMapOutput {
	return o
}

func (o ViewMapOutput) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return o
}

func (o ViewMapOutput) MapIndex(k pulumi.StringInput) ViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *View {
		return vs[0].(map[string]*View)[vs[1].(string)]
	}).(ViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewInput)(nil)).Elem(), &View{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewArrayInput)(nil)).Elem(), ViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewMapInput)(nil)).Elem(), ViewMap{})
	pulumi.RegisterOutputType(ViewOutput{})
	pulumi.RegisterOutputType(ViewArrayOutput{})
	pulumi.RegisterOutputType(ViewMapOutput{})
}
