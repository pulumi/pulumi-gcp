// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package folder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allows management of Organization Policies for a Google Cloud Folder.
//
// > **Warning:** This resource has been superseded by `orgpolicy.Policy`. `orgpolicy.Policy` uses Organization Policy API V2 instead of Cloud Resource Manager API V1 and it supports additional features such as tags and conditions.
//
// To get more information about Organization Policies, see:
//
// * [API documentation](https://cloud.google.com/resource-manager/reference/rest/v1/folders/setOrgPolicy)
// * How-to Guides
//   - [Introduction to the Organization Policy Service](https://cloud.google.com/resource-manager/docs/organization-policy/overview)
//
// ## Import
//
// # Folder organization policies can be imported using any of the follow formats
//
// ```sh
//
//	$ pulumi import gcp:folder/organizationPolicy:OrganizationPolicy policy folders/folder-1234/constraints/serviceuser.services
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:folder/organizationPolicy:OrganizationPolicy policy folder-1234/serviceuser.services
//
// ```
type OrganizationPolicy struct {
	pulumi.CustomResourceState

	// A boolean policy is a constraint that is either enforced or not. Structure is documented below.
	BooleanPolicy OrganizationPolicyBooleanPolicyPtrOutput `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
	//
	// ***
	Constraint pulumi.StringOutput `pulumi:"constraint"`
	// (Computed) The etag of the organization policy. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It
	// can also be used to allow or deny all values. Structure is documented below.
	ListPolicy OrganizationPolicyListPolicyPtrOutput `pulumi:"listPolicy"`
	// A restore policy is a constraint to restore the default policy. Structure is documented below.
	//
	// > **Note:** If none of [`booleanPolicy`, `listPolicy`, `restorePolicy`] are defined the policy for a given constraint will
	// effectively be unset. This is represented in the UI as the constraint being 'Inherited'.
	//
	// ***
	RestorePolicy OrganizationPolicyRestorePolicyPtrOutput `pulumi:"restorePolicy"`
	// (Computed) The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated. Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Version of the Policy. Default version is 0.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewOrganizationPolicy registers a new resource with the given unique name, arguments, and options.
func NewOrganizationPolicy(ctx *pulumi.Context,
	name string, args *OrganizationPolicyArgs, opts ...pulumi.ResourceOption) (*OrganizationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Constraint == nil {
		return nil, errors.New("invalid value for required argument 'Constraint'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationPolicy
	err := ctx.RegisterResource("gcp:folder/organizationPolicy:OrganizationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationPolicy gets an existing OrganizationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationPolicyState, opts ...pulumi.ResourceOption) (*OrganizationPolicy, error) {
	var resource OrganizationPolicy
	err := ctx.ReadResource("gcp:folder/organizationPolicy:OrganizationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationPolicy resources.
type organizationPolicyState struct {
	// A boolean policy is a constraint that is either enforced or not. Structure is documented below.
	BooleanPolicy *OrganizationPolicyBooleanPolicy `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
	//
	// ***
	Constraint *string `pulumi:"constraint"`
	// (Computed) The etag of the organization policy. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other.
	Etag *string `pulumi:"etag"`
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder *string `pulumi:"folder"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It
	// can also be used to allow or deny all values. Structure is documented below.
	ListPolicy *OrganizationPolicyListPolicy `pulumi:"listPolicy"`
	// A restore policy is a constraint to restore the default policy. Structure is documented below.
	//
	// > **Note:** If none of [`booleanPolicy`, `listPolicy`, `restorePolicy`] are defined the policy for a given constraint will
	// effectively be unset. This is represented in the UI as the constraint being 'Inherited'.
	//
	// ***
	RestorePolicy *OrganizationPolicyRestorePolicy `pulumi:"restorePolicy"`
	// (Computed) The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated. Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime *string `pulumi:"updateTime"`
	// Version of the Policy. Default version is 0.
	Version *int `pulumi:"version"`
}

type OrganizationPolicyState struct {
	// A boolean policy is a constraint that is either enforced or not. Structure is documented below.
	BooleanPolicy OrganizationPolicyBooleanPolicyPtrInput
	// The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
	//
	// ***
	Constraint pulumi.StringPtrInput
	// (Computed) The etag of the organization policy. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other.
	Etag pulumi.StringPtrInput
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder pulumi.StringPtrInput
	// A policy that can define specific values that are allowed or denied for the given constraint. It
	// can also be used to allow or deny all values. Structure is documented below.
	ListPolicy OrganizationPolicyListPolicyPtrInput
	// A restore policy is a constraint to restore the default policy. Structure is documented below.
	//
	// > **Note:** If none of [`booleanPolicy`, `listPolicy`, `restorePolicy`] are defined the policy for a given constraint will
	// effectively be unset. This is represented in the UI as the constraint being 'Inherited'.
	//
	// ***
	RestorePolicy OrganizationPolicyRestorePolicyPtrInput
	// (Computed) The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated. Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime pulumi.StringPtrInput
	// Version of the Policy. Default version is 0.
	Version pulumi.IntPtrInput
}

func (OrganizationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationPolicyState)(nil)).Elem()
}

type organizationPolicyArgs struct {
	// A boolean policy is a constraint that is either enforced or not. Structure is documented below.
	BooleanPolicy *OrganizationPolicyBooleanPolicy `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
	//
	// ***
	Constraint string `pulumi:"constraint"`
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder string `pulumi:"folder"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It
	// can also be used to allow or deny all values. Structure is documented below.
	ListPolicy *OrganizationPolicyListPolicy `pulumi:"listPolicy"`
	// A restore policy is a constraint to restore the default policy. Structure is documented below.
	//
	// > **Note:** If none of [`booleanPolicy`, `listPolicy`, `restorePolicy`] are defined the policy for a given constraint will
	// effectively be unset. This is represented in the UI as the constraint being 'Inherited'.
	//
	// ***
	RestorePolicy *OrganizationPolicyRestorePolicy `pulumi:"restorePolicy"`
	// Version of the Policy. Default version is 0.
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a OrganizationPolicy resource.
type OrganizationPolicyArgs struct {
	// A boolean policy is a constraint that is either enforced or not. Structure is documented below.
	BooleanPolicy OrganizationPolicyBooleanPolicyPtrInput
	// The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
	//
	// ***
	Constraint pulumi.StringInput
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder pulumi.StringInput
	// A policy that can define specific values that are allowed or denied for the given constraint. It
	// can also be used to allow or deny all values. Structure is documented below.
	ListPolicy OrganizationPolicyListPolicyPtrInput
	// A restore policy is a constraint to restore the default policy. Structure is documented below.
	//
	// > **Note:** If none of [`booleanPolicy`, `listPolicy`, `restorePolicy`] are defined the policy for a given constraint will
	// effectively be unset. This is represented in the UI as the constraint being 'Inherited'.
	//
	// ***
	RestorePolicy OrganizationPolicyRestorePolicyPtrInput
	// Version of the Policy. Default version is 0.
	Version pulumi.IntPtrInput
}

func (OrganizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationPolicyArgs)(nil)).Elem()
}

type OrganizationPolicyInput interface {
	pulumi.Input

	ToOrganizationPolicyOutput() OrganizationPolicyOutput
	ToOrganizationPolicyOutputWithContext(ctx context.Context) OrganizationPolicyOutput
}

func (*OrganizationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationPolicy)(nil)).Elem()
}

func (i *OrganizationPolicy) ToOrganizationPolicyOutput() OrganizationPolicyOutput {
	return i.ToOrganizationPolicyOutputWithContext(context.Background())
}

func (i *OrganizationPolicy) ToOrganizationPolicyOutputWithContext(ctx context.Context) OrganizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPolicyOutput)
}

func (i *OrganizationPolicy) ToOutput(ctx context.Context) pulumix.Output[*OrganizationPolicy] {
	return pulumix.Output[*OrganizationPolicy]{
		OutputState: i.ToOrganizationPolicyOutputWithContext(ctx).OutputState,
	}
}

// OrganizationPolicyArrayInput is an input type that accepts OrganizationPolicyArray and OrganizationPolicyArrayOutput values.
// You can construct a concrete instance of `OrganizationPolicyArrayInput` via:
//
//	OrganizationPolicyArray{ OrganizationPolicyArgs{...} }
type OrganizationPolicyArrayInput interface {
	pulumi.Input

	ToOrganizationPolicyArrayOutput() OrganizationPolicyArrayOutput
	ToOrganizationPolicyArrayOutputWithContext(context.Context) OrganizationPolicyArrayOutput
}

type OrganizationPolicyArray []OrganizationPolicyInput

func (OrganizationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationPolicy)(nil)).Elem()
}

func (i OrganizationPolicyArray) ToOrganizationPolicyArrayOutput() OrganizationPolicyArrayOutput {
	return i.ToOrganizationPolicyArrayOutputWithContext(context.Background())
}

func (i OrganizationPolicyArray) ToOrganizationPolicyArrayOutputWithContext(ctx context.Context) OrganizationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPolicyArrayOutput)
}

func (i OrganizationPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*OrganizationPolicy] {
	return pulumix.Output[[]*OrganizationPolicy]{
		OutputState: i.ToOrganizationPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// OrganizationPolicyMapInput is an input type that accepts OrganizationPolicyMap and OrganizationPolicyMapOutput values.
// You can construct a concrete instance of `OrganizationPolicyMapInput` via:
//
//	OrganizationPolicyMap{ "key": OrganizationPolicyArgs{...} }
type OrganizationPolicyMapInput interface {
	pulumi.Input

	ToOrganizationPolicyMapOutput() OrganizationPolicyMapOutput
	ToOrganizationPolicyMapOutputWithContext(context.Context) OrganizationPolicyMapOutput
}

type OrganizationPolicyMap map[string]OrganizationPolicyInput

func (OrganizationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationPolicy)(nil)).Elem()
}

func (i OrganizationPolicyMap) ToOrganizationPolicyMapOutput() OrganizationPolicyMapOutput {
	return i.ToOrganizationPolicyMapOutputWithContext(context.Background())
}

func (i OrganizationPolicyMap) ToOrganizationPolicyMapOutputWithContext(ctx context.Context) OrganizationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPolicyMapOutput)
}

func (i OrganizationPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrganizationPolicy] {
	return pulumix.Output[map[string]*OrganizationPolicy]{
		OutputState: i.ToOrganizationPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type OrganizationPolicyOutput struct{ *pulumi.OutputState }

func (OrganizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationPolicy)(nil)).Elem()
}

func (o OrganizationPolicyOutput) ToOrganizationPolicyOutput() OrganizationPolicyOutput {
	return o
}

func (o OrganizationPolicyOutput) ToOrganizationPolicyOutputWithContext(ctx context.Context) OrganizationPolicyOutput {
	return o
}

func (o OrganizationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*OrganizationPolicy] {
	return pulumix.Output[*OrganizationPolicy]{
		OutputState: o.OutputState,
	}
}

// A boolean policy is a constraint that is either enforced or not. Structure is documented below.
func (o OrganizationPolicyOutput) BooleanPolicy() OrganizationPolicyBooleanPolicyPtrOutput {
	return o.ApplyT(func(v *OrganizationPolicy) OrganizationPolicyBooleanPolicyPtrOutput { return v.BooleanPolicy }).(OrganizationPolicyBooleanPolicyPtrOutput)
}

// The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
//
// ***
func (o OrganizationPolicyOutput) Constraint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPolicy) pulumi.StringOutput { return v.Constraint }).(pulumi.StringOutput)
}

// (Computed) The etag of the organization policy. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other.
func (o OrganizationPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
func (o OrganizationPolicyOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPolicy) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// A policy that can define specific values that are allowed or denied for the given constraint. It
// can also be used to allow or deny all values. Structure is documented below.
func (o OrganizationPolicyOutput) ListPolicy() OrganizationPolicyListPolicyPtrOutput {
	return o.ApplyT(func(v *OrganizationPolicy) OrganizationPolicyListPolicyPtrOutput { return v.ListPolicy }).(OrganizationPolicyListPolicyPtrOutput)
}

// A restore policy is a constraint to restore the default policy. Structure is documented below.
//
// > **Note:** If none of [`booleanPolicy`, `listPolicy`, `restorePolicy`] are defined the policy for a given constraint will
// effectively be unset. This is represented in the UI as the constraint being 'Inherited'.
//
// ***
func (o OrganizationPolicyOutput) RestorePolicy() OrganizationPolicyRestorePolicyPtrOutput {
	return o.ApplyT(func(v *OrganizationPolicy) OrganizationPolicyRestorePolicyPtrOutput { return v.RestorePolicy }).(OrganizationPolicyRestorePolicyPtrOutput)
}

// (Computed) The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated. Example: "2016-10-09T12:33:37.578138407Z".
func (o OrganizationPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Version of the Policy. Default version is 0.
func (o OrganizationPolicyOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *OrganizationPolicy) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type OrganizationPolicyArrayOutput struct{ *pulumi.OutputState }

func (OrganizationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationPolicy)(nil)).Elem()
}

func (o OrganizationPolicyArrayOutput) ToOrganizationPolicyArrayOutput() OrganizationPolicyArrayOutput {
	return o
}

func (o OrganizationPolicyArrayOutput) ToOrganizationPolicyArrayOutputWithContext(ctx context.Context) OrganizationPolicyArrayOutput {
	return o
}

func (o OrganizationPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OrganizationPolicy] {
	return pulumix.Output[[]*OrganizationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o OrganizationPolicyArrayOutput) Index(i pulumi.IntInput) OrganizationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationPolicy {
		return vs[0].([]*OrganizationPolicy)[vs[1].(int)]
	}).(OrganizationPolicyOutput)
}

type OrganizationPolicyMapOutput struct{ *pulumi.OutputState }

func (OrganizationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationPolicy)(nil)).Elem()
}

func (o OrganizationPolicyMapOutput) ToOrganizationPolicyMapOutput() OrganizationPolicyMapOutput {
	return o
}

func (o OrganizationPolicyMapOutput) ToOrganizationPolicyMapOutputWithContext(ctx context.Context) OrganizationPolicyMapOutput {
	return o
}

func (o OrganizationPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrganizationPolicy] {
	return pulumix.Output[map[string]*OrganizationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o OrganizationPolicyMapOutput) MapIndex(k pulumi.StringInput) OrganizationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationPolicy {
		return vs[0].(map[string]*OrganizationPolicy)[vs[1].(string)]
	}).(OrganizationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPolicyInput)(nil)).Elem(), &OrganizationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPolicyArrayInput)(nil)).Elem(), OrganizationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPolicyMapInput)(nil)).Elem(), OrganizationPolicyMap{})
	pulumi.RegisterOutputType(OrganizationPolicyOutput{})
	pulumi.RegisterOutputType(OrganizationPolicyArrayOutput{})
	pulumi.RegisterOutputType(OrganizationPolicyMapOutput{})
}
