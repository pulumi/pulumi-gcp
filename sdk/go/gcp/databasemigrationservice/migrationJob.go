// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemigrationservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A migration job definition.
//
// To get more information about MigrationJob, see:
//
// * [API documentation](https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/create)
// * How-to Guides
//   - [Database Migration](https://cloud.google.com/database-migration/docs/)
//
// ## Example Usage
//
// ### Database Migration Service Migration Job Mysql To Mysql
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/databasemigrationservice"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			sourceCsql, err := sql.NewDatabaseInstance(ctx, "source_csql", &sql.DatabaseInstanceArgs{
//				Name:            pulumi.String("source-csql"),
//				DatabaseVersion: pulumi.String("MYSQL_5_7"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier:                      pulumi.String("db-n1-standard-1"),
//					DeletionProtectionEnabled: pulumi.Bool(false),
//				},
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			sourceSqlClientCert, err := sql.NewSslCert(ctx, "source_sql_client_cert", &sql.SslCertArgs{
//				CommonName: pulumi.String("cert"),
//				Instance:   sourceCsql.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceCsql,
//			}))
//			if err != nil {
//				return err
//			}
//			sourceSqldbUser, err := sql.NewUser(ctx, "source_sqldb_user", &sql.UserArgs{
//				Name:     pulumi.String("username"),
//				Instance: sourceCsql.Name,
//				Password: pulumi.String("password"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceSqlClientCert,
//			}))
//			if err != nil {
//				return err
//			}
//			sourceCp, err := databasemigrationservice.NewConnectionProfile(ctx, "source_cp", &databasemigrationservice.ConnectionProfileArgs{
//				Location:            pulumi.String("us-central1"),
//				ConnectionProfileId: pulumi.String("source-cp"),
//				DisplayName:         pulumi.String("source-cp_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Mysql: &databasemigrationservice.ConnectionProfileMysqlArgs{
//					Host: sourceCsql.IpAddresses.ApplyT(func(ipAddresses []sql.DatabaseInstanceIpAddress) (*string, error) {
//						return &ipAddresses[0].IpAddress, nil
//					}).(pulumi.StringPtrOutput),
//					Port:     pulumi.Int(3306),
//					Username: sourceSqldbUser.Name,
//					Password: sourceSqldbUser.Password,
//					Ssl: &databasemigrationservice.ConnectionProfileMysqlSslArgs{
//						ClientKey:         sourceSqlClientCert.PrivateKey,
//						ClientCertificate: sourceSqlClientCert.Cert,
//						CaCertificate:     sourceSqlClientCert.ServerCaCert,
//					},
//					CloudSqlId: pulumi.String("source-csql"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceSqldbUser,
//			}))
//			if err != nil {
//				return err
//			}
//			destinationCsql, err := sql.NewDatabaseInstance(ctx, "destination_csql", &sql.DatabaseInstanceArgs{
//				Name:            pulumi.String("destination-csql"),
//				DatabaseVersion: pulumi.String("MYSQL_5_7"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier:                      pulumi.String("db-n1-standard-1"),
//					DeletionProtectionEnabled: pulumi.Bool(false),
//				},
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			destinationCp, err := databasemigrationservice.NewConnectionProfile(ctx, "destination_cp", &databasemigrationservice.ConnectionProfileArgs{
//				Location:            pulumi.String("us-central1"),
//				ConnectionProfileId: pulumi.String("destination-cp"),
//				DisplayName:         pulumi.String("destination-cp_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Mysql: &databasemigrationservice.ConnectionProfileMysqlArgs{
//					CloudSqlId: pulumi.String("destination-csql"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				destinationCsql,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name: pulumi.String("destination-csql"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databasemigrationservice.NewMigrationJob(ctx, "mysqltomysql", &databasemigrationservice.MigrationJobArgs{
//				Location:       pulumi.String("us-central1"),
//				MigrationJobId: pulumi.String("my-migrationid"),
//				DisplayName:    pulumi.String("my-migrationid_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				PerformanceConfig: &databasemigrationservice.MigrationJobPerformanceConfigArgs{
//					DumpParallelLevel: pulumi.String("MAX"),
//				},
//				VpcPeeringConnectivity: &databasemigrationservice.MigrationJobVpcPeeringConnectivityArgs{
//					Vpc: _default.ID(),
//				},
//				DumpType: pulumi.String("LOGICAL"),
//				DumpFlags: &databasemigrationservice.MigrationJobDumpFlagsArgs{
//					DumpFlags: databasemigrationservice.MigrationJobDumpFlagsDumpFlagArray{
//						&databasemigrationservice.MigrationJobDumpFlagsDumpFlagArgs{
//							Name:  pulumi.String("max-allowed-packet"),
//							Value: pulumi.String("1073741824"),
//						},
//					},
//				},
//				Source:      sourceCp.Name,
//				Destination: destinationCp.Name,
//				Type:        pulumi.String("CONTINUOUS"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Database Migration Service Migration Job Postgres To Postgres
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/databasemigrationservice"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			sourceCsql, err := sql.NewDatabaseInstance(ctx, "source_csql", &sql.DatabaseInstanceArgs{
//				Name:            pulumi.String("source-csql"),
//				DatabaseVersion: pulumi.String("POSTGRES_15"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier:                      pulumi.String("db-custom-2-13312"),
//					DeletionProtectionEnabled: pulumi.Bool(false),
//				},
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			sourceSqlClientCert, err := sql.NewSslCert(ctx, "source_sql_client_cert", &sql.SslCertArgs{
//				CommonName: pulumi.String("cert"),
//				Instance:   sourceCsql.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceCsql,
//			}))
//			if err != nil {
//				return err
//			}
//			sourceSqldbUser, err := sql.NewUser(ctx, "source_sqldb_user", &sql.UserArgs{
//				Name:     pulumi.String("username"),
//				Instance: sourceCsql.Name,
//				Password: pulumi.String("password"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceSqlClientCert,
//			}))
//			if err != nil {
//				return err
//			}
//			sourceCp, err := databasemigrationservice.NewConnectionProfile(ctx, "source_cp", &databasemigrationservice.ConnectionProfileArgs{
//				Location:            pulumi.String("us-central1"),
//				ConnectionProfileId: pulumi.String("source-cp"),
//				DisplayName:         pulumi.String("source-cp_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Postgresql: &databasemigrationservice.ConnectionProfilePostgresqlArgs{
//					Host: sourceCsql.IpAddresses.ApplyT(func(ipAddresses []sql.DatabaseInstanceIpAddress) (*string, error) {
//						return &ipAddresses[0].IpAddress, nil
//					}).(pulumi.StringPtrOutput),
//					Port:     pulumi.Int(3306),
//					Username: sourceSqldbUser.Name,
//					Password: sourceSqldbUser.Password,
//					Ssl: &databasemigrationservice.ConnectionProfilePostgresqlSslArgs{
//						ClientKey:         sourceSqlClientCert.PrivateKey,
//						ClientCertificate: sourceSqlClientCert.Cert,
//						CaCertificate:     sourceSqlClientCert.ServerCaCert,
//					},
//					CloudSqlId: pulumi.String("source-csql"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceSqldbUser,
//			}))
//			if err != nil {
//				return err
//			}
//			destinationCsql, err := sql.NewDatabaseInstance(ctx, "destination_csql", &sql.DatabaseInstanceArgs{
//				Name:            pulumi.String("destination-csql"),
//				DatabaseVersion: pulumi.String("POSTGRES_15"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier:                      pulumi.String("db-custom-2-13312"),
//					DeletionProtectionEnabled: pulumi.Bool(false),
//				},
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			destinationCp, err := databasemigrationservice.NewConnectionProfile(ctx, "destination_cp", &databasemigrationservice.ConnectionProfileArgs{
//				Location:            pulumi.String("us-central1"),
//				ConnectionProfileId: pulumi.String("destination-cp"),
//				DisplayName:         pulumi.String("destination-cp_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Postgresql: &databasemigrationservice.ConnectionProfilePostgresqlArgs{
//					CloudSqlId: pulumi.String("destination-csql"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				destinationCsql,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = databasemigrationservice.NewMigrationJob(ctx, "psqltopsql", &databasemigrationservice.MigrationJobArgs{
//				Location:       pulumi.String("us-central1"),
//				MigrationJobId: pulumi.String("my-migrationid"),
//				DisplayName:    pulumi.String("my-migrationid_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				StaticIpConnectivity: nil,
//				Source:               sourceCp.Name,
//				Destination:          destinationCp.Name,
//				Type:                 pulumi.String("CONTINUOUS"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Database Migration Service Migration Job Postgres To Alloydb
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/databasemigrationservice"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			sourceCsql, err := sql.NewDatabaseInstance(ctx, "source_csql", &sql.DatabaseInstanceArgs{
//				Name:            pulumi.String("source-csql"),
//				DatabaseVersion: pulumi.String("POSTGRES_15"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier:                      pulumi.String("db-custom-2-13312"),
//					DeletionProtectionEnabled: pulumi.Bool(false),
//				},
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			sourceSqlClientCert, err := sql.NewSslCert(ctx, "source_sql_client_cert", &sql.SslCertArgs{
//				CommonName: pulumi.String("cert"),
//				Instance:   sourceCsql.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceCsql,
//			}))
//			if err != nil {
//				return err
//			}
//			sourceSqldbUser, err := sql.NewUser(ctx, "source_sqldb_user", &sql.UserArgs{
//				Name:     pulumi.String("username"),
//				Instance: sourceCsql.Name,
//				Password: pulumi.String("password"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceSqlClientCert,
//			}))
//			if err != nil {
//				return err
//			}
//			sourceCp, err := databasemigrationservice.NewConnectionProfile(ctx, "source_cp", &databasemigrationservice.ConnectionProfileArgs{
//				Location:            pulumi.String("us-central1"),
//				ConnectionProfileId: pulumi.String("source-cp"),
//				DisplayName:         pulumi.String("source-cp_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Postgresql: &databasemigrationservice.ConnectionProfilePostgresqlArgs{
//					Host: sourceCsql.IpAddresses.ApplyT(func(ipAddresses []sql.DatabaseInstanceIpAddress) (*string, error) {
//						return &ipAddresses[0].IpAddress, nil
//					}).(pulumi.StringPtrOutput),
//					Port:     pulumi.Int(3306),
//					Username: sourceSqldbUser.Name,
//					Password: sourceSqldbUser.Password,
//					Ssl: &databasemigrationservice.ConnectionProfilePostgresqlSslArgs{
//						ClientKey:         sourceSqlClientCert.PrivateKey,
//						ClientCertificate: sourceSqlClientCert.Cert,
//						CaCertificate:     sourceSqlClientCert.ServerCaCert,
//					},
//					CloudSqlId: pulumi.String("source-csql"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceSqldbUser,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name: pulumi.String("destination-alloydb"),
//			})
//			if err != nil {
//				return err
//			}
//			destinationAlloydb, err := alloydb.NewCluster(ctx, "destination_alloydb", &alloydb.ClusterArgs{
//				ClusterId: pulumi.String("destination-alloydb"),
//				Location:  pulumi.String("us-central1"),
//				NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
//					Network: _default.ID(),
//				},
//				DatabaseVersion: pulumi.String("POSTGRES_15"),
//				InitialUser: &alloydb.ClusterInitialUserArgs{
//					User:     pulumi.String("destination-alloydb"),
//					Password: pulumi.String("destination-alloydb"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("destination-alloydb"),
//				AddressType:  pulumi.String("INTERNAL"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				PrefixLength: pulumi.Int(16),
//				Network:      _default.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: _default.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					privateIpAlloc.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			destinationAlloydbPrimary, err := alloydb.NewInstance(ctx, "destination_alloydb_primary", &alloydb.InstanceArgs{
//				Cluster:      destinationAlloydb.Name,
//				InstanceId:   pulumi.String("destination-alloydb-primary"),
//				InstanceType: pulumi.String("PRIMARY"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				vpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			destinationCp, err := databasemigrationservice.NewConnectionProfile(ctx, "destination_cp", &databasemigrationservice.ConnectionProfileArgs{
//				Location:            pulumi.String("us-central1"),
//				ConnectionProfileId: pulumi.String("destination-cp"),
//				DisplayName:         pulumi.String("destination-cp_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Postgresql: &databasemigrationservice.ConnectionProfilePostgresqlArgs{
//					AlloydbClusterId: pulumi.String("destination-alloydb"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				destinationAlloydb,
//				destinationAlloydbPrimary,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = databasemigrationservice.NewMigrationJob(ctx, "psqltoalloydb", &databasemigrationservice.MigrationJobArgs{
//				Location:       pulumi.String("us-central1"),
//				MigrationJobId: pulumi.String("my-migrationid"),
//				DisplayName:    pulumi.String("my-migrationid_display"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				StaticIpConnectivity: nil,
//				Source:               sourceCp.Name,
//				Destination:          destinationCp.Name,
//				Type:                 pulumi.String("CONTINUOUS"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MigrationJob can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/migrationJobs/{{migration_job_id}}`
//
// * `{{project}}/{{location}}/{{migration_job_id}}`
//
// * `{{location}}/{{migration_job_id}}`
//
// When using the `pulumi import` command, MigrationJob can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default projects/{{project}}/locations/{{location}}/migrationJobs/{{migration_job_id}}
// ```
//
// ```sh
// $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default {{project}}/{{location}}/{{migration_job_id}}
// ```
//
// ```sh
// $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default {{location}}/{{migration_job_id}}
// ```
type MigrationJob struct {
	pulumi.CustomResourceState

	// Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// The migration job display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The initial dump flags.
	// Structure is documented below.
	DumpFlags MigrationJobDumpFlagsPtrOutput `pulumi:"dumpFlags"`
	// The path to the dump file in Google Cloud Storage,
	// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
	// This field and the "dumpFlags" field are mutually exclusive.
	DumpPath pulumi.StringPtrOutput `pulumi:"dumpPath"`
	// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
	// migrations only.
	// Possible values are: `LOGICAL`, `PHYSICAL`.
	DumpType pulumi.StringPtrOutput `pulumi:"dumpType"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Output only. The error details in case of state FAILED.
	// Structure is documented below.
	Errors MigrationJobErrorArrayOutput `pulumi:"errors"`
	// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where the migration job should reside.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The ID of the migration job.
	//
	// ***
	MigrationJobId pulumi.StringOutput `pulumi:"migrationJobId"`
	// The name of this migration job resource in the form of projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
	Name pulumi.StringOutput `pulumi:"name"`
	// Data dump parallelism settings used by the migration.
	// Structure is documented below.
	PerformanceConfig MigrationJobPerformanceConfigPtrOutput `pulumi:"performanceConfig"`
	// The current migration job phase.
	Phase pulumi.StringOutput `pulumi:"phase"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	ReverseSshConnectivity MigrationJobReverseSshConnectivityPtrOutput `pulumi:"reverseSshConnectivity"`
	// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
	Source pulumi.StringOutput `pulumi:"source"`
	// The current migration job state.
	State pulumi.StringOutput `pulumi:"state"`
	// If set to an empty object (`{}`), the source database will allow incoming
	// connections from the public IP of the destination database.
	// You can retrieve the public IP of the Cloud SQL instance from the
	// Cloud SQL console or using Cloud SQL APIs.
	StaticIpConnectivity MigrationJobStaticIpConnectivityPtrOutput `pulumi:"staticIpConnectivity"`
	// The type of the migration job.
	// Possible values are: `ONE_TIME`, `CONTINUOUS`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	VpcPeeringConnectivity MigrationJobVpcPeeringConnectivityPtrOutput `pulumi:"vpcPeeringConnectivity"`
}

// NewMigrationJob registers a new resource with the given unique name, arguments, and options.
func NewMigrationJob(ctx *pulumi.Context,
	name string, args *MigrationJobArgs, opts ...pulumi.ResourceOption) (*MigrationJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.MigrationJobId == nil {
		return nil, errors.New("invalid value for required argument 'MigrationJobId'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MigrationJob
	err := ctx.RegisterResource("gcp:databasemigrationservice/migrationJob:MigrationJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMigrationJob gets an existing MigrationJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMigrationJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MigrationJobState, opts ...pulumi.ResourceOption) (*MigrationJob, error) {
	var resource MigrationJob
	err := ctx.ReadResource("gcp:databasemigrationservice/migrationJob:MigrationJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MigrationJob resources.
type migrationJobState struct {
	// Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.
	CreateTime *string `pulumi:"createTime"`
	// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
	Destination *string `pulumi:"destination"`
	// The migration job display name.
	DisplayName *string `pulumi:"displayName"`
	// The initial dump flags.
	// Structure is documented below.
	DumpFlags *MigrationJobDumpFlags `pulumi:"dumpFlags"`
	// The path to the dump file in Google Cloud Storage,
	// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
	// This field and the "dumpFlags" field are mutually exclusive.
	DumpPath *string `pulumi:"dumpPath"`
	// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
	// migrations only.
	// Possible values are: `LOGICAL`, `PHYSICAL`.
	DumpType *string `pulumi:"dumpType"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Output only. The error details in case of state FAILED.
	// Structure is documented below.
	Errors []MigrationJobError `pulumi:"errors"`
	// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where the migration job should reside.
	Location *string `pulumi:"location"`
	// The ID of the migration job.
	//
	// ***
	MigrationJobId *string `pulumi:"migrationJobId"`
	// The name of this migration job resource in the form of projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
	Name *string `pulumi:"name"`
	// Data dump parallelism settings used by the migration.
	// Structure is documented below.
	PerformanceConfig *MigrationJobPerformanceConfig `pulumi:"performanceConfig"`
	// The current migration job phase.
	Phase *string `pulumi:"phase"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	ReverseSshConnectivity *MigrationJobReverseSshConnectivity `pulumi:"reverseSshConnectivity"`
	// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
	Source *string `pulumi:"source"`
	// The current migration job state.
	State *string `pulumi:"state"`
	// If set to an empty object (`{}`), the source database will allow incoming
	// connections from the public IP of the destination database.
	// You can retrieve the public IP of the Cloud SQL instance from the
	// Cloud SQL console or using Cloud SQL APIs.
	StaticIpConnectivity *MigrationJobStaticIpConnectivity `pulumi:"staticIpConnectivity"`
	// The type of the migration job.
	// Possible values are: `ONE_TIME`, `CONTINUOUS`.
	Type *string `pulumi:"type"`
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	VpcPeeringConnectivity *MigrationJobVpcPeeringConnectivity `pulumi:"vpcPeeringConnectivity"`
}

type MigrationJobState struct {
	// Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.
	CreateTime pulumi.StringPtrInput
	// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
	Destination pulumi.StringPtrInput
	// The migration job display name.
	DisplayName pulumi.StringPtrInput
	// The initial dump flags.
	// Structure is documented below.
	DumpFlags MigrationJobDumpFlagsPtrInput
	// The path to the dump file in Google Cloud Storage,
	// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
	// This field and the "dumpFlags" field are mutually exclusive.
	DumpPath pulumi.StringPtrInput
	// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
	// migrations only.
	// Possible values are: `LOGICAL`, `PHYSICAL`.
	DumpType pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Output only. The error details in case of state FAILED.
	// Structure is documented below.
	Errors MigrationJobErrorArrayInput
	// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where the migration job should reside.
	Location pulumi.StringPtrInput
	// The ID of the migration job.
	//
	// ***
	MigrationJobId pulumi.StringPtrInput
	// The name of this migration job resource in the form of projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
	Name pulumi.StringPtrInput
	// Data dump parallelism settings used by the migration.
	// Structure is documented below.
	PerformanceConfig MigrationJobPerformanceConfigPtrInput
	// The current migration job phase.
	Phase pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	ReverseSshConnectivity MigrationJobReverseSshConnectivityPtrInput
	// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
	Source pulumi.StringPtrInput
	// The current migration job state.
	State pulumi.StringPtrInput
	// If set to an empty object (`{}`), the source database will allow incoming
	// connections from the public IP of the destination database.
	// You can retrieve the public IP of the Cloud SQL instance from the
	// Cloud SQL console or using Cloud SQL APIs.
	StaticIpConnectivity MigrationJobStaticIpConnectivityPtrInput
	// The type of the migration job.
	// Possible values are: `ONE_TIME`, `CONTINUOUS`.
	Type pulumi.StringPtrInput
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	VpcPeeringConnectivity MigrationJobVpcPeeringConnectivityPtrInput
}

func (MigrationJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationJobState)(nil)).Elem()
}

type migrationJobArgs struct {
	// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
	Destination string `pulumi:"destination"`
	// The migration job display name.
	DisplayName *string `pulumi:"displayName"`
	// The initial dump flags.
	// Structure is documented below.
	DumpFlags *MigrationJobDumpFlags `pulumi:"dumpFlags"`
	// The path to the dump file in Google Cloud Storage,
	// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
	// This field and the "dumpFlags" field are mutually exclusive.
	DumpPath *string `pulumi:"dumpPath"`
	// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
	// migrations only.
	// Possible values are: `LOGICAL`, `PHYSICAL`.
	DumpType *string `pulumi:"dumpType"`
	// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where the migration job should reside.
	Location *string `pulumi:"location"`
	// The ID of the migration job.
	//
	// ***
	MigrationJobId string `pulumi:"migrationJobId"`
	// Data dump parallelism settings used by the migration.
	// Structure is documented below.
	PerformanceConfig *MigrationJobPerformanceConfig `pulumi:"performanceConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	ReverseSshConnectivity *MigrationJobReverseSshConnectivity `pulumi:"reverseSshConnectivity"`
	// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
	Source string `pulumi:"source"`
	// If set to an empty object (`{}`), the source database will allow incoming
	// connections from the public IP of the destination database.
	// You can retrieve the public IP of the Cloud SQL instance from the
	// Cloud SQL console or using Cloud SQL APIs.
	StaticIpConnectivity *MigrationJobStaticIpConnectivity `pulumi:"staticIpConnectivity"`
	// The type of the migration job.
	// Possible values are: `ONE_TIME`, `CONTINUOUS`.
	Type string `pulumi:"type"`
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	VpcPeeringConnectivity *MigrationJobVpcPeeringConnectivity `pulumi:"vpcPeeringConnectivity"`
}

// The set of arguments for constructing a MigrationJob resource.
type MigrationJobArgs struct {
	// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
	Destination pulumi.StringInput
	// The migration job display name.
	DisplayName pulumi.StringPtrInput
	// The initial dump flags.
	// Structure is documented below.
	DumpFlags MigrationJobDumpFlagsPtrInput
	// The path to the dump file in Google Cloud Storage,
	// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
	// This field and the "dumpFlags" field are mutually exclusive.
	DumpPath pulumi.StringPtrInput
	// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
	// migrations only.
	// Possible values are: `LOGICAL`, `PHYSICAL`.
	DumpType pulumi.StringPtrInput
	// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where the migration job should reside.
	Location pulumi.StringPtrInput
	// The ID of the migration job.
	//
	// ***
	MigrationJobId pulumi.StringInput
	// Data dump parallelism settings used by the migration.
	// Structure is documented below.
	PerformanceConfig MigrationJobPerformanceConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	ReverseSshConnectivity MigrationJobReverseSshConnectivityPtrInput
	// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
	Source pulumi.StringInput
	// If set to an empty object (`{}`), the source database will allow incoming
	// connections from the public IP of the destination database.
	// You can retrieve the public IP of the Cloud SQL instance from the
	// Cloud SQL console or using Cloud SQL APIs.
	StaticIpConnectivity MigrationJobStaticIpConnectivityPtrInput
	// The type of the migration job.
	// Possible values are: `ONE_TIME`, `CONTINUOUS`.
	Type pulumi.StringInput
	// The details of the VPC network that the source database is located in.
	// Structure is documented below.
	VpcPeeringConnectivity MigrationJobVpcPeeringConnectivityPtrInput
}

func (MigrationJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationJobArgs)(nil)).Elem()
}

type MigrationJobInput interface {
	pulumi.Input

	ToMigrationJobOutput() MigrationJobOutput
	ToMigrationJobOutputWithContext(ctx context.Context) MigrationJobOutput
}

func (*MigrationJob) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationJob)(nil)).Elem()
}

func (i *MigrationJob) ToMigrationJobOutput() MigrationJobOutput {
	return i.ToMigrationJobOutputWithContext(context.Background())
}

func (i *MigrationJob) ToMigrationJobOutputWithContext(ctx context.Context) MigrationJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationJobOutput)
}

// MigrationJobArrayInput is an input type that accepts MigrationJobArray and MigrationJobArrayOutput values.
// You can construct a concrete instance of `MigrationJobArrayInput` via:
//
//	MigrationJobArray{ MigrationJobArgs{...} }
type MigrationJobArrayInput interface {
	pulumi.Input

	ToMigrationJobArrayOutput() MigrationJobArrayOutput
	ToMigrationJobArrayOutputWithContext(context.Context) MigrationJobArrayOutput
}

type MigrationJobArray []MigrationJobInput

func (MigrationJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MigrationJob)(nil)).Elem()
}

func (i MigrationJobArray) ToMigrationJobArrayOutput() MigrationJobArrayOutput {
	return i.ToMigrationJobArrayOutputWithContext(context.Background())
}

func (i MigrationJobArray) ToMigrationJobArrayOutputWithContext(ctx context.Context) MigrationJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationJobArrayOutput)
}

// MigrationJobMapInput is an input type that accepts MigrationJobMap and MigrationJobMapOutput values.
// You can construct a concrete instance of `MigrationJobMapInput` via:
//
//	MigrationJobMap{ "key": MigrationJobArgs{...} }
type MigrationJobMapInput interface {
	pulumi.Input

	ToMigrationJobMapOutput() MigrationJobMapOutput
	ToMigrationJobMapOutputWithContext(context.Context) MigrationJobMapOutput
}

type MigrationJobMap map[string]MigrationJobInput

func (MigrationJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MigrationJob)(nil)).Elem()
}

func (i MigrationJobMap) ToMigrationJobMapOutput() MigrationJobMapOutput {
	return i.ToMigrationJobMapOutputWithContext(context.Background())
}

func (i MigrationJobMap) ToMigrationJobMapOutputWithContext(ctx context.Context) MigrationJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationJobMapOutput)
}

type MigrationJobOutput struct{ *pulumi.OutputState }

func (MigrationJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationJob)(nil)).Elem()
}

func (o MigrationJobOutput) ToMigrationJobOutput() MigrationJobOutput {
	return o
}

func (o MigrationJobOutput) ToMigrationJobOutputWithContext(ctx context.Context) MigrationJobOutput {
	return o
}

// Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.
func (o MigrationJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
func (o MigrationJobOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// The migration job display name.
func (o MigrationJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The initial dump flags.
// Structure is documented below.
func (o MigrationJobOutput) DumpFlags() MigrationJobDumpFlagsPtrOutput {
	return o.ApplyT(func(v *MigrationJob) MigrationJobDumpFlagsPtrOutput { return v.DumpFlags }).(MigrationJobDumpFlagsPtrOutput)
}

// The path to the dump file in Google Cloud Storage,
// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
// This field and the "dumpFlags" field are mutually exclusive.
func (o MigrationJobOutput) DumpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DumpPath }).(pulumi.StringPtrOutput)
}

// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
// migrations only.
// Possible values are: `LOGICAL`, `PHYSICAL`.
func (o MigrationJobOutput) DumpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DumpType }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o MigrationJobOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Output only. The error details in case of state FAILED.
// Structure is documented below.
func (o MigrationJobOutput) Errors() MigrationJobErrorArrayOutput {
	return o.ApplyT(func(v *MigrationJob) MigrationJobErrorArrayOutput { return v.Errors }).(MigrationJobErrorArrayOutput)
}

// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o MigrationJobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the migration job should reside.
func (o MigrationJobOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The ID of the migration job.
//
// ***
func (o MigrationJobOutput) MigrationJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.MigrationJobId }).(pulumi.StringOutput)
}

// The name of this migration job resource in the form of projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
func (o MigrationJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Data dump parallelism settings used by the migration.
// Structure is documented below.
func (o MigrationJobOutput) PerformanceConfig() MigrationJobPerformanceConfigPtrOutput {
	return o.ApplyT(func(v *MigrationJob) MigrationJobPerformanceConfigPtrOutput { return v.PerformanceConfig }).(MigrationJobPerformanceConfigPtrOutput)
}

// The current migration job phase.
func (o MigrationJobOutput) Phase() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.Phase }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o MigrationJobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o MigrationJobOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The details of the VPC network that the source database is located in.
// Structure is documented below.
func (o MigrationJobOutput) ReverseSshConnectivity() MigrationJobReverseSshConnectivityPtrOutput {
	return o.ApplyT(func(v *MigrationJob) MigrationJobReverseSshConnectivityPtrOutput { return v.ReverseSshConnectivity }).(MigrationJobReverseSshConnectivityPtrOutput)
}

// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
func (o MigrationJobOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The current migration job state.
func (o MigrationJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// If set to an empty object (`{}`), the source database will allow incoming
// connections from the public IP of the destination database.
// You can retrieve the public IP of the Cloud SQL instance from the
// Cloud SQL console or using Cloud SQL APIs.
func (o MigrationJobOutput) StaticIpConnectivity() MigrationJobStaticIpConnectivityPtrOutput {
	return o.ApplyT(func(v *MigrationJob) MigrationJobStaticIpConnectivityPtrOutput { return v.StaticIpConnectivity }).(MigrationJobStaticIpConnectivityPtrOutput)
}

// The type of the migration job.
// Possible values are: `ONE_TIME`, `CONTINUOUS`.
func (o MigrationJobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The details of the VPC network that the source database is located in.
// Structure is documented below.
func (o MigrationJobOutput) VpcPeeringConnectivity() MigrationJobVpcPeeringConnectivityPtrOutput {
	return o.ApplyT(func(v *MigrationJob) MigrationJobVpcPeeringConnectivityPtrOutput { return v.VpcPeeringConnectivity }).(MigrationJobVpcPeeringConnectivityPtrOutput)
}

type MigrationJobArrayOutput struct{ *pulumi.OutputState }

func (MigrationJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MigrationJob)(nil)).Elem()
}

func (o MigrationJobArrayOutput) ToMigrationJobArrayOutput() MigrationJobArrayOutput {
	return o
}

func (o MigrationJobArrayOutput) ToMigrationJobArrayOutputWithContext(ctx context.Context) MigrationJobArrayOutput {
	return o
}

func (o MigrationJobArrayOutput) Index(i pulumi.IntInput) MigrationJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MigrationJob {
		return vs[0].([]*MigrationJob)[vs[1].(int)]
	}).(MigrationJobOutput)
}

type MigrationJobMapOutput struct{ *pulumi.OutputState }

func (MigrationJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MigrationJob)(nil)).Elem()
}

func (o MigrationJobMapOutput) ToMigrationJobMapOutput() MigrationJobMapOutput {
	return o
}

func (o MigrationJobMapOutput) ToMigrationJobMapOutputWithContext(ctx context.Context) MigrationJobMapOutput {
	return o
}

func (o MigrationJobMapOutput) MapIndex(k pulumi.StringInput) MigrationJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MigrationJob {
		return vs[0].(map[string]*MigrationJob)[vs[1].(string)]
	}).(MigrationJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationJobInput)(nil)).Elem(), &MigrationJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationJobArrayInput)(nil)).Elem(), MigrationJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationJobMapInput)(nil)).Elem(), MigrationJobMap{})
	pulumi.RegisterOutputType(MigrationJobOutput{})
	pulumi.RegisterOutputType(MigrationJobArrayOutput{})
	pulumi.RegisterOutputType(MigrationJobMapOutput{})
}
