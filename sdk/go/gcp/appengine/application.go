// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appengine

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/appengine"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myProject, err := organizations.NewProject(ctx, "myProject", &organizations.ProjectArgs{
//				ProjectId: pulumi.String("your-project-id"),
//				OrgId:     pulumi.String("1234567"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appengine.NewApplication(ctx, "app", &appengine.ApplicationArgs{
//				Project:    myProject.ProjectId,
//				LocationId: pulumi.String("us-central"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Applications can be imported using the ID of the project the application belongs to, e.g.
//
// ```sh
//
//	$ pulumi import gcp:appengine/application:Application app your-project-id
//
// ```
type Application struct {
	pulumi.CustomResourceState

	// Identifier of the app, usually `{PROJECT_ID}`
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain pulumi.StringOutput `pulumi:"authDomain"`
	// The GCS bucket code is being stored in for this app.
	CodeBucket pulumi.StringOutput `pulumi:"codeBucket"`
	// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
	// Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
	// instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted
	// by the provider, but will be rejected by the API.
	DatabaseType pulumi.StringOutput `pulumi:"databaseType"`
	// The GCS bucket content is being stored in for this app.
	DefaultBucket pulumi.StringOutput `pulumi:"defaultBucket"`
	// The default hostname for this app.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings ApplicationFeatureSettingsOutput `pulumi:"featureSettings"`
	// The GCR domain used for storing managed Docker images for this app.
	GcrDomain pulumi.StringOutput `pulumi:"gcrDomain"`
	// Settings for enabling Cloud Identity Aware Proxy
	Iap ApplicationIapOutput `pulumi:"iap"`
	// The [location](https://cloud.google.com/appengine/docs/locations)
	// to serve the app from.
	LocationId pulumi.StringOutput `pulumi:"locationId"`
	// Unique name of the app, usually `apps/{PROJECT_ID}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The project ID to create the application under.
	// ~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
	// you may get a "Permission denied" error.
	Project pulumi.StringOutput `pulumi:"project"`
	// The serving status of the app.
	ServingStatus pulumi.StringOutput `pulumi:"servingStatus"`
	// A list of dispatch rule blocks. Each block has a `domain`, `path`, and `service` field.
	UrlDispatchRules ApplicationUrlDispatchRuleArrayOutput `pulumi:"urlDispatchRules"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationId == nil {
		return nil, errors.New("invalid value for required argument 'LocationId'")
	}
	var resource Application
	err := ctx.RegisterResource("gcp:appengine/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("gcp:appengine/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// Identifier of the app, usually `{PROJECT_ID}`
	AppId *string `pulumi:"appId"`
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain *string `pulumi:"authDomain"`
	// The GCS bucket code is being stored in for this app.
	CodeBucket *string `pulumi:"codeBucket"`
	// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
	// Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
	// instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted
	// by the provider, but will be rejected by the API.
	DatabaseType *string `pulumi:"databaseType"`
	// The GCS bucket content is being stored in for this app.
	DefaultBucket *string `pulumi:"defaultBucket"`
	// The default hostname for this app.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings *ApplicationFeatureSettings `pulumi:"featureSettings"`
	// The GCR domain used for storing managed Docker images for this app.
	GcrDomain *string `pulumi:"gcrDomain"`
	// Settings for enabling Cloud Identity Aware Proxy
	Iap *ApplicationIap `pulumi:"iap"`
	// The [location](https://cloud.google.com/appengine/docs/locations)
	// to serve the app from.
	LocationId *string `pulumi:"locationId"`
	// Unique name of the app, usually `apps/{PROJECT_ID}`
	Name *string `pulumi:"name"`
	// The project ID to create the application under.
	// ~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
	// you may get a "Permission denied" error.
	Project *string `pulumi:"project"`
	// The serving status of the app.
	ServingStatus *string `pulumi:"servingStatus"`
	// A list of dispatch rule blocks. Each block has a `domain`, `path`, and `service` field.
	UrlDispatchRules []ApplicationUrlDispatchRule `pulumi:"urlDispatchRules"`
}

type ApplicationState struct {
	// Identifier of the app, usually `{PROJECT_ID}`
	AppId pulumi.StringPtrInput
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain pulumi.StringPtrInput
	// The GCS bucket code is being stored in for this app.
	CodeBucket pulumi.StringPtrInput
	// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
	// Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
	// instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted
	// by the provider, but will be rejected by the API.
	DatabaseType pulumi.StringPtrInput
	// The GCS bucket content is being stored in for this app.
	DefaultBucket pulumi.StringPtrInput
	// The default hostname for this app.
	DefaultHostname pulumi.StringPtrInput
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings ApplicationFeatureSettingsPtrInput
	// The GCR domain used for storing managed Docker images for this app.
	GcrDomain pulumi.StringPtrInput
	// Settings for enabling Cloud Identity Aware Proxy
	Iap ApplicationIapPtrInput
	// The [location](https://cloud.google.com/appengine/docs/locations)
	// to serve the app from.
	LocationId pulumi.StringPtrInput
	// Unique name of the app, usually `apps/{PROJECT_ID}`
	Name pulumi.StringPtrInput
	// The project ID to create the application under.
	// ~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
	// you may get a "Permission denied" error.
	Project pulumi.StringPtrInput
	// The serving status of the app.
	ServingStatus pulumi.StringPtrInput
	// A list of dispatch rule blocks. Each block has a `domain`, `path`, and `service` field.
	UrlDispatchRules ApplicationUrlDispatchRuleArrayInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain *string `pulumi:"authDomain"`
	// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
	// Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
	// instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted
	// by the provider, but will be rejected by the API.
	DatabaseType *string `pulumi:"databaseType"`
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings *ApplicationFeatureSettings `pulumi:"featureSettings"`
	// Settings for enabling Cloud Identity Aware Proxy
	Iap *ApplicationIap `pulumi:"iap"`
	// The [location](https://cloud.google.com/appengine/docs/locations)
	// to serve the app from.
	LocationId string `pulumi:"locationId"`
	// The project ID to create the application under.
	// ~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
	// you may get a "Permission denied" error.
	Project *string `pulumi:"project"`
	// The serving status of the app.
	ServingStatus *string `pulumi:"servingStatus"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain pulumi.StringPtrInput
	// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
	// Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
	// instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted
	// by the provider, but will be rejected by the API.
	DatabaseType pulumi.StringPtrInput
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings ApplicationFeatureSettingsPtrInput
	// Settings for enabling Cloud Identity Aware Proxy
	Iap ApplicationIapPtrInput
	// The [location](https://cloud.google.com/appengine/docs/locations)
	// to serve the app from.
	LocationId pulumi.StringInput
	// The project ID to create the application under.
	// ~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
	// you may get a "Permission denied" error.
	Project pulumi.StringPtrInput
	// The serving status of the app.
	ServingStatus pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// Identifier of the app, usually `{PROJECT_ID}`
func (o ApplicationOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The domain to authenticate users with when using App Engine's User API.
func (o ApplicationOutput) AuthDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.AuthDomain }).(pulumi.StringOutput)
}

// The GCS bucket code is being stored in for this app.
func (o ApplicationOutput) CodeBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.CodeBucket }).(pulumi.StringOutput)
}

// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
// Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
// instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted
// by the provider, but will be rejected by the API.
func (o ApplicationOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.DatabaseType }).(pulumi.StringOutput)
}

// The GCS bucket content is being stored in for this app.
func (o ApplicationOutput) DefaultBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.DefaultBucket }).(pulumi.StringOutput)
}

// The default hostname for this app.
func (o ApplicationOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.DefaultHostname }).(pulumi.StringOutput)
}

// A block of optional settings to configure specific App Engine features:
func (o ApplicationOutput) FeatureSettings() ApplicationFeatureSettingsOutput {
	return o.ApplyT(func(v *Application) ApplicationFeatureSettingsOutput { return v.FeatureSettings }).(ApplicationFeatureSettingsOutput)
}

// The GCR domain used for storing managed Docker images for this app.
func (o ApplicationOutput) GcrDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.GcrDomain }).(pulumi.StringOutput)
}

// Settings for enabling Cloud Identity Aware Proxy
func (o ApplicationOutput) Iap() ApplicationIapOutput {
	return o.ApplyT(func(v *Application) ApplicationIapOutput { return v.Iap }).(ApplicationIapOutput)
}

// The [location](https://cloud.google.com/appengine/docs/locations)
// to serve the app from.
func (o ApplicationOutput) LocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.LocationId }).(pulumi.StringOutput)
}

// Unique name of the app, usually `apps/{PROJECT_ID}`
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project ID to create the application under.
// ~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
// you may get a "Permission denied" error.
func (o ApplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The serving status of the app.
func (o ApplicationOutput) ServingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ServingStatus }).(pulumi.StringOutput)
}

// A list of dispatch rule blocks. Each block has a `domain`, `path`, and `service` field.
func (o ApplicationOutput) UrlDispatchRules() ApplicationUrlDispatchRuleArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationUrlDispatchRuleArrayOutput { return v.UrlDispatchRules }).(ApplicationUrlDispatchRuleArrayOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
