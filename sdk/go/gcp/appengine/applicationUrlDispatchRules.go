// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Rules to match an HTTP request and dispatch that request to a service.
//
// To get more information about ApplicationUrlDispatchRules, see:
//
// * [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps#UrlDispatchRule)
//
// ## Example Usage
//
// ## Import
//
// ApplicationUrlDispatchRules can be imported using any of these accepted formats:
//
// ```sh
//
//	$ pulumi import gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules default {{project}}
//
// ```
type ApplicationUrlDispatchRules struct {
	pulumi.CustomResourceState

	// Rules to match an HTTP request and dispatch that request to a service.
	// Structure is documented below.
	DispatchRules ApplicationUrlDispatchRulesDispatchRuleArrayOutput `pulumi:"dispatchRules"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewApplicationUrlDispatchRules registers a new resource with the given unique name, arguments, and options.
func NewApplicationUrlDispatchRules(ctx *pulumi.Context,
	name string, args *ApplicationUrlDispatchRulesArgs, opts ...pulumi.ResourceOption) (*ApplicationUrlDispatchRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DispatchRules == nil {
		return nil, errors.New("invalid value for required argument 'DispatchRules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationUrlDispatchRules
	err := ctx.RegisterResource("gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationUrlDispatchRules gets an existing ApplicationUrlDispatchRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationUrlDispatchRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationUrlDispatchRulesState, opts ...pulumi.ResourceOption) (*ApplicationUrlDispatchRules, error) {
	var resource ApplicationUrlDispatchRules
	err := ctx.ReadResource("gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationUrlDispatchRules resources.
type applicationUrlDispatchRulesState struct {
	// Rules to match an HTTP request and dispatch that request to a service.
	// Structure is documented below.
	DispatchRules []ApplicationUrlDispatchRulesDispatchRule `pulumi:"dispatchRules"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type ApplicationUrlDispatchRulesState struct {
	// Rules to match an HTTP request and dispatch that request to a service.
	// Structure is documented below.
	DispatchRules ApplicationUrlDispatchRulesDispatchRuleArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ApplicationUrlDispatchRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationUrlDispatchRulesState)(nil)).Elem()
}

type applicationUrlDispatchRulesArgs struct {
	// Rules to match an HTTP request and dispatch that request to a service.
	// Structure is documented below.
	DispatchRules []ApplicationUrlDispatchRulesDispatchRule `pulumi:"dispatchRules"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ApplicationUrlDispatchRules resource.
type ApplicationUrlDispatchRulesArgs struct {
	// Rules to match an HTTP request and dispatch that request to a service.
	// Structure is documented below.
	DispatchRules ApplicationUrlDispatchRulesDispatchRuleArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ApplicationUrlDispatchRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationUrlDispatchRulesArgs)(nil)).Elem()
}

type ApplicationUrlDispatchRulesInput interface {
	pulumi.Input

	ToApplicationUrlDispatchRulesOutput() ApplicationUrlDispatchRulesOutput
	ToApplicationUrlDispatchRulesOutputWithContext(ctx context.Context) ApplicationUrlDispatchRulesOutput
}

func (*ApplicationUrlDispatchRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUrlDispatchRules)(nil)).Elem()
}

func (i *ApplicationUrlDispatchRules) ToApplicationUrlDispatchRulesOutput() ApplicationUrlDispatchRulesOutput {
	return i.ToApplicationUrlDispatchRulesOutputWithContext(context.Background())
}

func (i *ApplicationUrlDispatchRules) ToApplicationUrlDispatchRulesOutputWithContext(ctx context.Context) ApplicationUrlDispatchRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUrlDispatchRulesOutput)
}

func (i *ApplicationUrlDispatchRules) ToOutput(ctx context.Context) pulumix.Output[*ApplicationUrlDispatchRules] {
	return pulumix.Output[*ApplicationUrlDispatchRules]{
		OutputState: i.ToApplicationUrlDispatchRulesOutputWithContext(ctx).OutputState,
	}
}

// ApplicationUrlDispatchRulesArrayInput is an input type that accepts ApplicationUrlDispatchRulesArray and ApplicationUrlDispatchRulesArrayOutput values.
// You can construct a concrete instance of `ApplicationUrlDispatchRulesArrayInput` via:
//
//	ApplicationUrlDispatchRulesArray{ ApplicationUrlDispatchRulesArgs{...} }
type ApplicationUrlDispatchRulesArrayInput interface {
	pulumi.Input

	ToApplicationUrlDispatchRulesArrayOutput() ApplicationUrlDispatchRulesArrayOutput
	ToApplicationUrlDispatchRulesArrayOutputWithContext(context.Context) ApplicationUrlDispatchRulesArrayOutput
}

type ApplicationUrlDispatchRulesArray []ApplicationUrlDispatchRulesInput

func (ApplicationUrlDispatchRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationUrlDispatchRules)(nil)).Elem()
}

func (i ApplicationUrlDispatchRulesArray) ToApplicationUrlDispatchRulesArrayOutput() ApplicationUrlDispatchRulesArrayOutput {
	return i.ToApplicationUrlDispatchRulesArrayOutputWithContext(context.Background())
}

func (i ApplicationUrlDispatchRulesArray) ToApplicationUrlDispatchRulesArrayOutputWithContext(ctx context.Context) ApplicationUrlDispatchRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUrlDispatchRulesArrayOutput)
}

func (i ApplicationUrlDispatchRulesArray) ToOutput(ctx context.Context) pulumix.Output[[]*ApplicationUrlDispatchRules] {
	return pulumix.Output[[]*ApplicationUrlDispatchRules]{
		OutputState: i.ToApplicationUrlDispatchRulesArrayOutputWithContext(ctx).OutputState,
	}
}

// ApplicationUrlDispatchRulesMapInput is an input type that accepts ApplicationUrlDispatchRulesMap and ApplicationUrlDispatchRulesMapOutput values.
// You can construct a concrete instance of `ApplicationUrlDispatchRulesMapInput` via:
//
//	ApplicationUrlDispatchRulesMap{ "key": ApplicationUrlDispatchRulesArgs{...} }
type ApplicationUrlDispatchRulesMapInput interface {
	pulumi.Input

	ToApplicationUrlDispatchRulesMapOutput() ApplicationUrlDispatchRulesMapOutput
	ToApplicationUrlDispatchRulesMapOutputWithContext(context.Context) ApplicationUrlDispatchRulesMapOutput
}

type ApplicationUrlDispatchRulesMap map[string]ApplicationUrlDispatchRulesInput

func (ApplicationUrlDispatchRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationUrlDispatchRules)(nil)).Elem()
}

func (i ApplicationUrlDispatchRulesMap) ToApplicationUrlDispatchRulesMapOutput() ApplicationUrlDispatchRulesMapOutput {
	return i.ToApplicationUrlDispatchRulesMapOutputWithContext(context.Background())
}

func (i ApplicationUrlDispatchRulesMap) ToApplicationUrlDispatchRulesMapOutputWithContext(ctx context.Context) ApplicationUrlDispatchRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUrlDispatchRulesMapOutput)
}

func (i ApplicationUrlDispatchRulesMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ApplicationUrlDispatchRules] {
	return pulumix.Output[map[string]*ApplicationUrlDispatchRules]{
		OutputState: i.ToApplicationUrlDispatchRulesMapOutputWithContext(ctx).OutputState,
	}
}

type ApplicationUrlDispatchRulesOutput struct{ *pulumi.OutputState }

func (ApplicationUrlDispatchRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUrlDispatchRules)(nil)).Elem()
}

func (o ApplicationUrlDispatchRulesOutput) ToApplicationUrlDispatchRulesOutput() ApplicationUrlDispatchRulesOutput {
	return o
}

func (o ApplicationUrlDispatchRulesOutput) ToApplicationUrlDispatchRulesOutputWithContext(ctx context.Context) ApplicationUrlDispatchRulesOutput {
	return o
}

func (o ApplicationUrlDispatchRulesOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationUrlDispatchRules] {
	return pulumix.Output[*ApplicationUrlDispatchRules]{
		OutputState: o.OutputState,
	}
}

// Rules to match an HTTP request and dispatch that request to a service.
// Structure is documented below.
func (o ApplicationUrlDispatchRulesOutput) DispatchRules() ApplicationUrlDispatchRulesDispatchRuleArrayOutput {
	return o.ApplyT(func(v *ApplicationUrlDispatchRules) ApplicationUrlDispatchRulesDispatchRuleArrayOutput {
		return v.DispatchRules
	}).(ApplicationUrlDispatchRulesDispatchRuleArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ApplicationUrlDispatchRulesOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationUrlDispatchRules) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ApplicationUrlDispatchRulesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationUrlDispatchRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationUrlDispatchRules)(nil)).Elem()
}

func (o ApplicationUrlDispatchRulesArrayOutput) ToApplicationUrlDispatchRulesArrayOutput() ApplicationUrlDispatchRulesArrayOutput {
	return o
}

func (o ApplicationUrlDispatchRulesArrayOutput) ToApplicationUrlDispatchRulesArrayOutputWithContext(ctx context.Context) ApplicationUrlDispatchRulesArrayOutput {
	return o
}

func (o ApplicationUrlDispatchRulesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ApplicationUrlDispatchRules] {
	return pulumix.Output[[]*ApplicationUrlDispatchRules]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationUrlDispatchRulesArrayOutput) Index(i pulumi.IntInput) ApplicationUrlDispatchRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationUrlDispatchRules {
		return vs[0].([]*ApplicationUrlDispatchRules)[vs[1].(int)]
	}).(ApplicationUrlDispatchRulesOutput)
}

type ApplicationUrlDispatchRulesMapOutput struct{ *pulumi.OutputState }

func (ApplicationUrlDispatchRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationUrlDispatchRules)(nil)).Elem()
}

func (o ApplicationUrlDispatchRulesMapOutput) ToApplicationUrlDispatchRulesMapOutput() ApplicationUrlDispatchRulesMapOutput {
	return o
}

func (o ApplicationUrlDispatchRulesMapOutput) ToApplicationUrlDispatchRulesMapOutputWithContext(ctx context.Context) ApplicationUrlDispatchRulesMapOutput {
	return o
}

func (o ApplicationUrlDispatchRulesMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ApplicationUrlDispatchRules] {
	return pulumix.Output[map[string]*ApplicationUrlDispatchRules]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationUrlDispatchRulesMapOutput) MapIndex(k pulumi.StringInput) ApplicationUrlDispatchRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationUrlDispatchRules {
		return vs[0].(map[string]*ApplicationUrlDispatchRules)[vs[1].(string)]
	}).(ApplicationUrlDispatchRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationUrlDispatchRulesInput)(nil)).Elem(), &ApplicationUrlDispatchRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationUrlDispatchRulesArrayInput)(nil)).Elem(), ApplicationUrlDispatchRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationUrlDispatchRulesMapInput)(nil)).Elem(), ApplicationUrlDispatchRulesMap{})
	pulumi.RegisterOutputType(ApplicationUrlDispatchRulesOutput{})
	pulumi.RegisterOutputType(ApplicationUrlDispatchRulesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationUrlDispatchRulesMapOutput{})
}
