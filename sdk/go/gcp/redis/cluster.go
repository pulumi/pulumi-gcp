// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
// ### Redis Cluster Ha
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/networkconnectivity"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			producerNet, err := compute.NewNetwork(ctx, "producerNet", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			producerSubnet, err := compute.NewSubnetwork(ctx, "producerSubnet", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.248/29"),
//				Region:      pulumi.String("us-central1"),
//				Network:     producerNet.ID(),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = networkconnectivity.NewServiceConnectionPolicy(ctx, "default", &networkconnectivity.ServiceConnectionPolicyArgs{
//				Location:     pulumi.String("us-central1"),
//				ServiceClass: pulumi.String("gcp-memorystore-redis"),
//				Description:  pulumi.String("my basic service connection policy"),
//				Network:      producerNet.ID(),
//				PscConfig: &networkconnectivity.ServiceConnectionPolicyPscConfigArgs{
//					Subnetworks: pulumi.StringArray{
//						producerSubnet.ID(),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = redis.NewCluster(ctx, "cluster-ha", &redis.ClusterArgs{
//				ShardCount: pulumi.Int(3),
//				PscConfigs: redis.ClusterPscConfigArray{
//					&redis.ClusterPscConfigArgs{
//						Network: producerNet.ID(),
//					},
//				},
//				Region:                pulumi.String("us-central1"),
//				ReplicaCount:          pulumi.Int(1),
//				TransitEncryptionMode: pulumi.String("TRANSIT_ENCRYPTION_MODE_DISABLED"),
//				AuthorizationMode:     pulumi.String("AUTH_MODE_DISABLED"),
//			}, pulumi.Provider(google_beta), pulumi.DependsOn([]pulumi.Resource{
//				_default,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Cluster can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:redis/cluster:Cluster default projects/{{project}}/locations/{{region}}/clusters/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:redis/cluster:Cluster default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:redis/cluster:Cluster default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:redis/cluster:Cluster default {{name}}
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is `AUTH_MODE_DISABLED`.
	// Possible values are: `AUTH_MODE_UNSPECIFIED`, `AUTH_MODE_IAM_AUTH`, `AUTH_MODE_DISABLED`.
	AuthorizationMode pulumi.StringPtrOutput `pulumi:"authorizationMode"`
	// The timestamp associated with the cluster creation request. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Output only. Endpoints created on each given network,
	// for Redis clients to connect to the cluster.
	// Currently only one endpoint is supported.
	// Structure is documented below.
	DiscoveryEndpoints ClusterDiscoveryEndpointArrayOutput `pulumi:"discoveryEndpoints"`
	// Unique name of the resource in this scope including project and location using the form:
	// projects/{projectId}/locations/{locationId}/clusters/{clusterId}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs ClusterPscConfigArrayOutput `pulumi:"pscConfigs"`
	// Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
	// Structure is documented below.
	PscConnections ClusterPscConnectionArrayOutput `pulumi:"pscConnections"`
	// The name of the region of the Redis cluster.
	Region pulumi.StringOutput `pulumi:"region"`
	// Optional. The number of replica nodes per shard.
	ReplicaCount pulumi.IntPtrOutput `pulumi:"replicaCount"`
	// Required. Number of shards for the Redis cluster.
	ShardCount pulumi.IntOutput `pulumi:"shardCount"`
	// Output only. Redis memory size in GB for the entire cluster.
	SizeGb pulumi.IntOutput `pulumi:"sizeGb"`
	// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. Additional information about the current state of the cluster.
	// Structure is documented below.
	StateInfos ClusterStateInfoArrayOutput `pulumi:"stateInfos"`
	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is `TRANSIT_ENCRYPTION_MODE_DISABLED`.
	// Possible values are: `TRANSIT_ENCRYPTION_MODE_UNSPECIFIED`, `TRANSIT_ENCRYPTION_MODE_DISABLED`, `TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION`.
	TransitEncryptionMode pulumi.StringPtrOutput `pulumi:"transitEncryptionMode"`
	// System assigned, unique identifier for the cluster.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PscConfigs == nil {
		return nil, errors.New("invalid value for required argument 'PscConfigs'")
	}
	if args.ShardCount == nil {
		return nil, errors.New("invalid value for required argument 'ShardCount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("gcp:redis/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("gcp:redis/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is `AUTH_MODE_DISABLED`.
	// Possible values are: `AUTH_MODE_UNSPECIFIED`, `AUTH_MODE_IAM_AUTH`, `AUTH_MODE_DISABLED`.
	AuthorizationMode *string `pulumi:"authorizationMode"`
	// The timestamp associated with the cluster creation request. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// Output only. Endpoints created on each given network,
	// for Redis clients to connect to the cluster.
	// Currently only one endpoint is supported.
	// Structure is documented below.
	DiscoveryEndpoints []ClusterDiscoveryEndpoint `pulumi:"discoveryEndpoints"`
	// Unique name of the resource in this scope including project and location using the form:
	// projects/{projectId}/locations/{locationId}/clusters/{clusterId}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs []ClusterPscConfig `pulumi:"pscConfigs"`
	// Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
	// Structure is documented below.
	PscConnections []ClusterPscConnection `pulumi:"pscConnections"`
	// The name of the region of the Redis cluster.
	Region *string `pulumi:"region"`
	// Optional. The number of replica nodes per shard.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Required. Number of shards for the Redis cluster.
	ShardCount *int `pulumi:"shardCount"`
	// Output only. Redis memory size in GB for the entire cluster.
	SizeGb *int `pulumi:"sizeGb"`
	// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
	State *string `pulumi:"state"`
	// Output only. Additional information about the current state of the cluster.
	// Structure is documented below.
	StateInfos []ClusterStateInfo `pulumi:"stateInfos"`
	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is `TRANSIT_ENCRYPTION_MODE_DISABLED`.
	// Possible values are: `TRANSIT_ENCRYPTION_MODE_UNSPECIFIED`, `TRANSIT_ENCRYPTION_MODE_DISABLED`, `TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION`.
	TransitEncryptionMode *string `pulumi:"transitEncryptionMode"`
	// System assigned, unique identifier for the cluster.
	Uid *string `pulumi:"uid"`
}

type ClusterState struct {
	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is `AUTH_MODE_DISABLED`.
	// Possible values are: `AUTH_MODE_UNSPECIFIED`, `AUTH_MODE_IAM_AUTH`, `AUTH_MODE_DISABLED`.
	AuthorizationMode pulumi.StringPtrInput
	// The timestamp associated with the cluster creation request. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// Output only. Endpoints created on each given network,
	// for Redis clients to connect to the cluster.
	// Currently only one endpoint is supported.
	// Structure is documented below.
	DiscoveryEndpoints ClusterDiscoveryEndpointArrayInput
	// Unique name of the resource in this scope including project and location using the form:
	// projects/{projectId}/locations/{locationId}/clusters/{clusterId}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs ClusterPscConfigArrayInput
	// Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
	// Structure is documented below.
	PscConnections ClusterPscConnectionArrayInput
	// The name of the region of the Redis cluster.
	Region pulumi.StringPtrInput
	// Optional. The number of replica nodes per shard.
	ReplicaCount pulumi.IntPtrInput
	// Required. Number of shards for the Redis cluster.
	ShardCount pulumi.IntPtrInput
	// Output only. Redis memory size in GB for the entire cluster.
	SizeGb pulumi.IntPtrInput
	// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
	State pulumi.StringPtrInput
	// Output only. Additional information about the current state of the cluster.
	// Structure is documented below.
	StateInfos ClusterStateInfoArrayInput
	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is `TRANSIT_ENCRYPTION_MODE_DISABLED`.
	// Possible values are: `TRANSIT_ENCRYPTION_MODE_UNSPECIFIED`, `TRANSIT_ENCRYPTION_MODE_DISABLED`, `TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION`.
	TransitEncryptionMode pulumi.StringPtrInput
	// System assigned, unique identifier for the cluster.
	Uid pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is `AUTH_MODE_DISABLED`.
	// Possible values are: `AUTH_MODE_UNSPECIFIED`, `AUTH_MODE_IAM_AUTH`, `AUTH_MODE_DISABLED`.
	AuthorizationMode *string `pulumi:"authorizationMode"`
	// Unique name of the resource in this scope including project and location using the form:
	// projects/{projectId}/locations/{locationId}/clusters/{clusterId}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs []ClusterPscConfig `pulumi:"pscConfigs"`
	// The name of the region of the Redis cluster.
	Region *string `pulumi:"region"`
	// Optional. The number of replica nodes per shard.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Required. Number of shards for the Redis cluster.
	ShardCount int `pulumi:"shardCount"`
	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is `TRANSIT_ENCRYPTION_MODE_DISABLED`.
	// Possible values are: `TRANSIT_ENCRYPTION_MODE_UNSPECIFIED`, `TRANSIT_ENCRYPTION_MODE_DISABLED`, `TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION`.
	TransitEncryptionMode *string `pulumi:"transitEncryptionMode"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is `AUTH_MODE_DISABLED`.
	// Possible values are: `AUTH_MODE_UNSPECIFIED`, `AUTH_MODE_IAM_AUTH`, `AUTH_MODE_DISABLED`.
	AuthorizationMode pulumi.StringPtrInput
	// Unique name of the resource in this scope including project and location using the form:
	// projects/{projectId}/locations/{locationId}/clusters/{clusterId}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs ClusterPscConfigArrayInput
	// The name of the region of the Redis cluster.
	Region pulumi.StringPtrInput
	// Optional. The number of replica nodes per shard.
	ReplicaCount pulumi.IntPtrInput
	// Required. Number of shards for the Redis cluster.
	ShardCount pulumi.IntInput
	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is `TRANSIT_ENCRYPTION_MODE_DISABLED`.
	// Possible values are: `TRANSIT_ENCRYPTION_MODE_UNSPECIFIED`, `TRANSIT_ENCRYPTION_MODE_DISABLED`, `TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION`.
	TransitEncryptionMode pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

func (i *Cluster) ToOutput(ctx context.Context) pulumix.Output[*Cluster] {
	return pulumix.Output[*Cluster]{
		OutputState: i.ToClusterOutputWithContext(ctx).OutputState,
	}
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

func (i ClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]*Cluster] {
	return pulumix.Output[[]*Cluster]{
		OutputState: i.ToClusterArrayOutputWithContext(ctx).OutputState,
	}
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

func (i ClusterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cluster] {
	return pulumix.Output[map[string]*Cluster]{
		OutputState: i.ToClusterMapOutputWithContext(ctx).OutputState,
	}
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[*Cluster] {
	return pulumix.Output[*Cluster]{
		OutputState: o.OutputState,
	}
}

// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
// Default value is `AUTH_MODE_DISABLED`.
// Possible values are: `AUTH_MODE_UNSPECIFIED`, `AUTH_MODE_IAM_AUTH`, `AUTH_MODE_DISABLED`.
func (o ClusterOutput) AuthorizationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.AuthorizationMode }).(pulumi.StringPtrOutput)
}

// The timestamp associated with the cluster creation request. A timestamp in
// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Output only. Endpoints created on each given network,
// for Redis clients to connect to the cluster.
// Currently only one endpoint is supported.
// Structure is documented below.
func (o ClusterOutput) DiscoveryEndpoints() ClusterDiscoveryEndpointArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterDiscoveryEndpointArrayOutput { return v.DiscoveryEndpoints }).(ClusterDiscoveryEndpointArrayOutput)
}

// Unique name of the resource in this scope including project and location using the form:
// projects/{projectId}/locations/{locationId}/clusters/{clusterId}
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. Each PscConfig configures the consumer network where two
// network addresses will be designated to the cluster for client access.
// Currently, only one PscConfig is supported.
// Structure is documented below.
func (o ClusterOutput) PscConfigs() ClusterPscConfigArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterPscConfigArrayOutput { return v.PscConfigs }).(ClusterPscConfigArrayOutput)
}

// Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
// Structure is documented below.
func (o ClusterOutput) PscConnections() ClusterPscConnectionArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterPscConnectionArrayOutput { return v.PscConnections }).(ClusterPscConnectionArrayOutput)
}

// The name of the region of the Redis cluster.
func (o ClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Optional. The number of replica nodes per shard.
func (o ClusterOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// Required. Number of shards for the Redis cluster.
func (o ClusterOutput) ShardCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ShardCount }).(pulumi.IntOutput)
}

// Output only. Redis memory size in GB for the entire cluster.
func (o ClusterOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.SizeGb }).(pulumi.IntOutput)
}

// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
func (o ClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. Additional information about the current state of the cluster.
// Structure is documented below.
func (o ClusterOutput) StateInfos() ClusterStateInfoArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterStateInfoArrayOutput { return v.StateInfos }).(ClusterStateInfoArrayOutput)
}

// Optional. The in-transit encryption for the Redis cluster.
// If not provided, encryption is disabled for the cluster.
// Default value is `TRANSIT_ENCRYPTION_MODE_DISABLED`.
// Possible values are: `TRANSIT_ENCRYPTION_MODE_UNSPECIFIED`, `TRANSIT_ENCRYPTION_MODE_DISABLED`, `TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION`.
func (o ClusterOutput) TransitEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.TransitEncryptionMode }).(pulumi.StringPtrOutput)
}

// System assigned, unique identifier for the cluster.
func (o ClusterOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Cluster] {
	return pulumix.Output[[]*Cluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cluster] {
	return pulumix.Output[map[string]*Cluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
