// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Redis Cluster User Created Connections
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network1, err := compute.NewNetwork(ctx, "network1", &compute.NetworkArgs{
//				Name:                  pulumi.String("net1"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			subnetNetwork1, err := compute.NewSubnetwork(ctx, "subnet_network1", &compute.SubnetworkArgs{
//				Name:        pulumi.String("subnet-net1"),
//				IpCidrRange: pulumi.String("10.0.0.248/29"),
//				Region:      pulumi.String("us-central1"),
//				Network:     network1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ip1Network1, err := compute.NewAddress(ctx, "ip1_network1", &compute.AddressArgs{
//				Name:        pulumi.String("ip1-net1"),
//				Region:      pulumi.String("us-central1"),
//				Subnetwork:  subnetNetwork1.ID(),
//				AddressType: pulumi.String("INTERNAL"),
//				Purpose:     pulumi.String("GCE_ENDPOINT"),
//			})
//			if err != nil {
//				return err
//			}
//			// redis cluster without endpoint
//			cluster_user_connCluster, err := redis.NewCluster(ctx, "cluster-user-conn", &redis.ClusterArgs{
//				Name:                      pulumi.String("cluster-user-conn"),
//				ShardCount:                pulumi.Int(3),
//				Region:                    pulumi.String("us-central1"),
//				ReplicaCount:              pulumi.Int(0),
//				DeletionProtectionEnabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			forwardingRule1Network1, err := compute.NewForwardingRule(ctx, "forwarding_rule1_network1", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("fwd1-net1"),
//				Region:              pulumi.String("us-central1"),
//				IpAddress:           ip1Network1.ID(),
//				LoadBalancingScheme: pulumi.String(""),
//				Network:             network1.ID(),
//				Target: pulumi.String(cluster_user_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//					return &pscServiceAttachments[0].ServiceAttachment, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			ip2Network1, err := compute.NewAddress(ctx, "ip2_network1", &compute.AddressArgs{
//				Name:        pulumi.String("ip2-net1"),
//				Region:      pulumi.String("us-central1"),
//				Subnetwork:  subnetNetwork1.ID(),
//				AddressType: pulumi.String("INTERNAL"),
//				Purpose:     pulumi.String("GCE_ENDPOINT"),
//			})
//			if err != nil {
//				return err
//			}
//			forwardingRule2Network1, err := compute.NewForwardingRule(ctx, "forwarding_rule2_network1", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("fwd2-net1"),
//				Region:              pulumi.String("us-central1"),
//				IpAddress:           ip2Network1.ID(),
//				LoadBalancingScheme: pulumi.String(""),
//				Network:             network1.ID(),
//				Target: pulumi.String(cluster_user_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//					return &pscServiceAttachments[1].ServiceAttachment, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			network2, err := compute.NewNetwork(ctx, "network2", &compute.NetworkArgs{
//				Name:                  pulumi.String("network2"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			subnetNetwork2, err := compute.NewSubnetwork(ctx, "subnet_network2", &compute.SubnetworkArgs{
//				Name:        pulumi.String("subnet-net2"),
//				IpCidrRange: pulumi.String("10.0.0.248/29"),
//				Region:      pulumi.String("us-central1"),
//				Network:     network2.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ip1Network2, err := compute.NewAddress(ctx, "ip1_network2", &compute.AddressArgs{
//				Name:        pulumi.String("ip1-net2"),
//				Region:      pulumi.String("us-central1"),
//				Subnetwork:  subnetNetwork2.ID(),
//				AddressType: pulumi.String("INTERNAL"),
//				Purpose:     pulumi.String("GCE_ENDPOINT"),
//			})
//			if err != nil {
//				return err
//			}
//			forwardingRule1Network2, err := compute.NewForwardingRule(ctx, "forwarding_rule1_network2", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("fwd1-net2"),
//				Region:              pulumi.String("us-central1"),
//				IpAddress:           ip1Network2.ID(),
//				LoadBalancingScheme: pulumi.String(""),
//				Network:             network2.ID(),
//				Target: pulumi.String(cluster_user_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//					return &pscServiceAttachments[0].ServiceAttachment, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			ip2Network2, err := compute.NewAddress(ctx, "ip2_network2", &compute.AddressArgs{
//				Name:        pulumi.String("ip2-net2"),
//				Region:      pulumi.String("us-central1"),
//				Subnetwork:  subnetNetwork2.ID(),
//				AddressType: pulumi.String("INTERNAL"),
//				Purpose:     pulumi.String("GCE_ENDPOINT"),
//			})
//			if err != nil {
//				return err
//			}
//			forwardingRule2Network2, err := compute.NewForwardingRule(ctx, "forwarding_rule2_network2", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("fwd2-net2"),
//				Region:              pulumi.String("us-central1"),
//				IpAddress:           ip2Network2.ID(),
//				LoadBalancingScheme: pulumi.String(""),
//				Network:             network2.ID(),
//				Target: pulumi.String(cluster_user_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//					return &pscServiceAttachments[1].ServiceAttachment, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = redis.NewClusterUserCreatedConnections(ctx, "cluster-user-conn", &redis.ClusterUserCreatedConnectionsArgs{
//				Name:   pulumi.String("cluster-user-conn"),
//				Region: pulumi.String("us-central1"),
//				ClusterEndpoints: redis.ClusterUserCreatedConnectionsClusterEndpointArray{
//					&redis.ClusterUserCreatedConnectionsClusterEndpointArgs{
//						Connections: redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArray{
//							&redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs{
//								PscConnection: &redis.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs{
//									PscConnectionId: forwardingRule1Network1.PscConnectionId,
//									Address:         ip1Network1.Address,
//									ForwardingRule:  forwardingRule1Network1.ID(),
//									Network:         network1.ID(),
//									ProjectId:       pulumi.String(project.ProjectId),
//									ServiceAttachment: cluster_user_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//										return &pscServiceAttachments[0].ServiceAttachment, nil
//									}).(pulumi.StringPtrOutput),
//								},
//							},
//							&redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs{
//								PscConnection: &redis.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs{
//									PscConnectionId: forwardingRule2Network1.PscConnectionId,
//									Address:         ip2Network1.Address,
//									ForwardingRule:  forwardingRule2Network1.ID(),
//									Network:         network1.ID(),
//									ServiceAttachment: cluster_user_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//										return &pscServiceAttachments[1].ServiceAttachment, nil
//									}).(pulumi.StringPtrOutput),
//								},
//							},
//						},
//					},
//					&redis.ClusterUserCreatedConnectionsClusterEndpointArgs{
//						Connections: redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArray{
//							&redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs{
//								PscConnection: &redis.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs{
//									PscConnectionId: forwardingRule1Network2.PscConnectionId,
//									Address:         ip1Network2.Address,
//									ForwardingRule:  forwardingRule1Network2.ID(),
//									Network:         network2.ID(),
//									ServiceAttachment: cluster_user_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//										return &pscServiceAttachments[0].ServiceAttachment, nil
//									}).(pulumi.StringPtrOutput),
//								},
//							},
//							&redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs{
//								PscConnection: &redis.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs{
//									PscConnectionId: forwardingRule2Network2.PscConnectionId,
//									Address:         ip2Network2.Address,
//									ForwardingRule:  forwardingRule2Network2.ID(),
//									Network:         network2.ID(),
//									ServiceAttachment: cluster_user_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//										return &pscServiceAttachments[1].ServiceAttachment, nil
//									}).(pulumi.StringPtrOutput),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Redis Cluster User And Auto Created Connections
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkconnectivity"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network2, err := compute.NewNetwork(ctx, "network2", &compute.NetworkArgs{
//				Name:                  pulumi.String("network2"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			subnetNetwork2, err := compute.NewSubnetwork(ctx, "subnet_network2", &compute.SubnetworkArgs{
//				Name:        pulumi.String("subnet-net2"),
//				IpCidrRange: pulumi.String("10.0.0.248/29"),
//				Region:      pulumi.String("us-central1"),
//				Network:     network2.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ip1Network2, err := compute.NewAddress(ctx, "ip1_network2", &compute.AddressArgs{
//				Name:        pulumi.String("ip1-net2"),
//				Region:      pulumi.String("us-central1"),
//				Subnetwork:  subnetNetwork2.ID(),
//				AddressType: pulumi.String("INTERNAL"),
//				Purpose:     pulumi.String("GCE_ENDPOINT"),
//			})
//			if err != nil {
//				return err
//			}
//			network1, err := compute.NewNetwork(ctx, "network1", &compute.NetworkArgs{
//				Name:                  pulumi.String("net1"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			subnetNetwork1, err := compute.NewSubnetwork(ctx, "subnet_network1", &compute.SubnetworkArgs{
//				Name:        pulumi.String("subnet-net1"),
//				IpCidrRange: pulumi.String("10.0.0.248/29"),
//				Region:      pulumi.String("us-central1"),
//				Network:     network1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := networkconnectivity.NewServiceConnectionPolicy(ctx, "default", &networkconnectivity.ServiceConnectionPolicyArgs{
//				Name:         pulumi.String("scpolicy"),
//				Location:     pulumi.String("us-central1"),
//				ServiceClass: pulumi.String("gcp-memorystore-redis"),
//				Description:  pulumi.String("my basic service connection policy"),
//				Network:      network1.ID(),
//				PscConfig: &networkconnectivity.ServiceConnectionPolicyPscConfigArgs{
//					Subnetworks: pulumi.StringArray{
//						subnetNetwork1.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// redis cluster without endpoint
//			cluster_user_auto_connCluster, err := redis.NewCluster(ctx, "cluster-user-auto-conn", &redis.ClusterArgs{
//				Name:                      pulumi.String("cluster-user-auto-conn"),
//				ShardCount:                pulumi.Int(3),
//				Region:                    pulumi.String("us-central1"),
//				ReplicaCount:              pulumi.Int(0),
//				DeletionProtectionEnabled: pulumi.Bool(false),
//				PscConfigs: redis.ClusterPscConfigArray{
//					&redis.ClusterPscConfigArgs{
//						Network: network1.ID(),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				_default,
//			}))
//			if err != nil {
//				return err
//			}
//			forwardingRule1Network2, err := compute.NewForwardingRule(ctx, "forwarding_rule1_network2", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("fwd1-net2"),
//				Region:              pulumi.String("us-central1"),
//				IpAddress:           ip1Network2.ID(),
//				LoadBalancingScheme: pulumi.String(""),
//				Network:             network2.ID(),
//				Target: pulumi.String(cluster_user_auto_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//					return &pscServiceAttachments[0].ServiceAttachment, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			ip2Network2, err := compute.NewAddress(ctx, "ip2_network2", &compute.AddressArgs{
//				Name:        pulumi.String("ip2-net2"),
//				Region:      pulumi.String("us-central1"),
//				Subnetwork:  subnetNetwork2.ID(),
//				AddressType: pulumi.String("INTERNAL"),
//				Purpose:     pulumi.String("GCE_ENDPOINT"),
//			})
//			if err != nil {
//				return err
//			}
//			forwardingRule2Network2, err := compute.NewForwardingRule(ctx, "forwarding_rule2_network2", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("fwd2-net2"),
//				Region:              pulumi.String("us-central1"),
//				IpAddress:           ip2Network2.ID(),
//				LoadBalancingScheme: pulumi.String(""),
//				Network:             network2.ID(),
//				Target: pulumi.String(cluster_user_auto_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//					return &pscServiceAttachments[1].ServiceAttachment, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redis.NewClusterUserCreatedConnections(ctx, "cluster-user-auto-conn", &redis.ClusterUserCreatedConnectionsArgs{
//				Name:   pulumi.String("cluster-user-auto-conn"),
//				Region: pulumi.String("us-central1"),
//				ClusterEndpoints: redis.ClusterUserCreatedConnectionsClusterEndpointArray{
//					&redis.ClusterUserCreatedConnectionsClusterEndpointArgs{
//						Connections: redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArray{
//							&redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs{
//								PscConnection: &redis.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs{
//									PscConnectionId: forwardingRule1Network2.PscConnectionId,
//									Address:         ip1Network2.Address,
//									ForwardingRule:  forwardingRule1Network2.ID(),
//									Network:         network2.ID(),
//									ServiceAttachment: cluster_user_auto_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//										return &pscServiceAttachments[0].ServiceAttachment, nil
//									}).(pulumi.StringPtrOutput),
//								},
//							},
//							&redis.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs{
//								PscConnection: &redis.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs{
//									PscConnectionId: forwardingRule2Network2.PscConnectionId,
//									Address:         ip2Network2.Address,
//									ForwardingRule:  forwardingRule2Network2.ID(),
//									Network:         network2.ID(),
//									ServiceAttachment: cluster_user_auto_connCluster.PscServiceAttachments.ApplyT(func(pscServiceAttachments []redis.ClusterPscServiceAttachment) (*string, error) {
//										return &pscServiceAttachments[1].ServiceAttachment, nil
//									}).(pulumi.StringPtrOutput),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ClusterUserCreatedConnections can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/clusters/{{name}}`
//
// * `{{project}}/{{region}}/{{name}}`
//
// * `{{region}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, ClusterUserCreatedConnections can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections default projects/{{project}}/locations/{{region}}/clusters/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections default {{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections default {{name}}
// ```
type ClusterUserCreatedConnections struct {
	pulumi.CustomResourceState

	// A list of cluster endpoints
	// Structure is documented below.
	ClusterEndpoints ClusterUserCreatedConnectionsClusterEndpointArrayOutput `pulumi:"clusterEndpoints"`
	// The name of the Redis cluster these endpoints should be added to.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the region of the Redis cluster these endpoints should be added to.
	//
	// ***
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewClusterUserCreatedConnections registers a new resource with the given unique name, arguments, and options.
func NewClusterUserCreatedConnections(ctx *pulumi.Context,
	name string, args *ClusterUserCreatedConnectionsArgs, opts ...pulumi.ResourceOption) (*ClusterUserCreatedConnections, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterUserCreatedConnections
	err := ctx.RegisterResource("gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterUserCreatedConnections gets an existing ClusterUserCreatedConnections resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterUserCreatedConnections(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterUserCreatedConnectionsState, opts ...pulumi.ResourceOption) (*ClusterUserCreatedConnections, error) {
	var resource ClusterUserCreatedConnections
	err := ctx.ReadResource("gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterUserCreatedConnections resources.
type clusterUserCreatedConnectionsState struct {
	// A list of cluster endpoints
	// Structure is documented below.
	ClusterEndpoints []ClusterUserCreatedConnectionsClusterEndpoint `pulumi:"clusterEndpoints"`
	// The name of the Redis cluster these endpoints should be added to.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the region of the Redis cluster these endpoints should be added to.
	//
	// ***
	Region *string `pulumi:"region"`
}

type ClusterUserCreatedConnectionsState struct {
	// A list of cluster endpoints
	// Structure is documented below.
	ClusterEndpoints ClusterUserCreatedConnectionsClusterEndpointArrayInput
	// The name of the Redis cluster these endpoints should be added to.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the region of the Redis cluster these endpoints should be added to.
	//
	// ***
	Region pulumi.StringPtrInput
}

func (ClusterUserCreatedConnectionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterUserCreatedConnectionsState)(nil)).Elem()
}

type clusterUserCreatedConnectionsArgs struct {
	// A list of cluster endpoints
	// Structure is documented below.
	ClusterEndpoints []ClusterUserCreatedConnectionsClusterEndpoint `pulumi:"clusterEndpoints"`
	// The name of the Redis cluster these endpoints should be added to.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the region of the Redis cluster these endpoints should be added to.
	//
	// ***
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a ClusterUserCreatedConnections resource.
type ClusterUserCreatedConnectionsArgs struct {
	// A list of cluster endpoints
	// Structure is documented below.
	ClusterEndpoints ClusterUserCreatedConnectionsClusterEndpointArrayInput
	// The name of the Redis cluster these endpoints should be added to.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the region of the Redis cluster these endpoints should be added to.
	//
	// ***
	Region pulumi.StringInput
}

func (ClusterUserCreatedConnectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterUserCreatedConnectionsArgs)(nil)).Elem()
}

type ClusterUserCreatedConnectionsInput interface {
	pulumi.Input

	ToClusterUserCreatedConnectionsOutput() ClusterUserCreatedConnectionsOutput
	ToClusterUserCreatedConnectionsOutputWithContext(ctx context.Context) ClusterUserCreatedConnectionsOutput
}

func (*ClusterUserCreatedConnections) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUserCreatedConnections)(nil)).Elem()
}

func (i *ClusterUserCreatedConnections) ToClusterUserCreatedConnectionsOutput() ClusterUserCreatedConnectionsOutput {
	return i.ToClusterUserCreatedConnectionsOutputWithContext(context.Background())
}

func (i *ClusterUserCreatedConnections) ToClusterUserCreatedConnectionsOutputWithContext(ctx context.Context) ClusterUserCreatedConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUserCreatedConnectionsOutput)
}

// ClusterUserCreatedConnectionsArrayInput is an input type that accepts ClusterUserCreatedConnectionsArray and ClusterUserCreatedConnectionsArrayOutput values.
// You can construct a concrete instance of `ClusterUserCreatedConnectionsArrayInput` via:
//
//	ClusterUserCreatedConnectionsArray{ ClusterUserCreatedConnectionsArgs{...} }
type ClusterUserCreatedConnectionsArrayInput interface {
	pulumi.Input

	ToClusterUserCreatedConnectionsArrayOutput() ClusterUserCreatedConnectionsArrayOutput
	ToClusterUserCreatedConnectionsArrayOutputWithContext(context.Context) ClusterUserCreatedConnectionsArrayOutput
}

type ClusterUserCreatedConnectionsArray []ClusterUserCreatedConnectionsInput

func (ClusterUserCreatedConnectionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterUserCreatedConnections)(nil)).Elem()
}

func (i ClusterUserCreatedConnectionsArray) ToClusterUserCreatedConnectionsArrayOutput() ClusterUserCreatedConnectionsArrayOutput {
	return i.ToClusterUserCreatedConnectionsArrayOutputWithContext(context.Background())
}

func (i ClusterUserCreatedConnectionsArray) ToClusterUserCreatedConnectionsArrayOutputWithContext(ctx context.Context) ClusterUserCreatedConnectionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUserCreatedConnectionsArrayOutput)
}

// ClusterUserCreatedConnectionsMapInput is an input type that accepts ClusterUserCreatedConnectionsMap and ClusterUserCreatedConnectionsMapOutput values.
// You can construct a concrete instance of `ClusterUserCreatedConnectionsMapInput` via:
//
//	ClusterUserCreatedConnectionsMap{ "key": ClusterUserCreatedConnectionsArgs{...} }
type ClusterUserCreatedConnectionsMapInput interface {
	pulumi.Input

	ToClusterUserCreatedConnectionsMapOutput() ClusterUserCreatedConnectionsMapOutput
	ToClusterUserCreatedConnectionsMapOutputWithContext(context.Context) ClusterUserCreatedConnectionsMapOutput
}

type ClusterUserCreatedConnectionsMap map[string]ClusterUserCreatedConnectionsInput

func (ClusterUserCreatedConnectionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterUserCreatedConnections)(nil)).Elem()
}

func (i ClusterUserCreatedConnectionsMap) ToClusterUserCreatedConnectionsMapOutput() ClusterUserCreatedConnectionsMapOutput {
	return i.ToClusterUserCreatedConnectionsMapOutputWithContext(context.Background())
}

func (i ClusterUserCreatedConnectionsMap) ToClusterUserCreatedConnectionsMapOutputWithContext(ctx context.Context) ClusterUserCreatedConnectionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUserCreatedConnectionsMapOutput)
}

type ClusterUserCreatedConnectionsOutput struct{ *pulumi.OutputState }

func (ClusterUserCreatedConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUserCreatedConnections)(nil)).Elem()
}

func (o ClusterUserCreatedConnectionsOutput) ToClusterUserCreatedConnectionsOutput() ClusterUserCreatedConnectionsOutput {
	return o
}

func (o ClusterUserCreatedConnectionsOutput) ToClusterUserCreatedConnectionsOutputWithContext(ctx context.Context) ClusterUserCreatedConnectionsOutput {
	return o
}

// A list of cluster endpoints
// Structure is documented below.
func (o ClusterUserCreatedConnectionsOutput) ClusterEndpoints() ClusterUserCreatedConnectionsClusterEndpointArrayOutput {
	return o.ApplyT(func(v *ClusterUserCreatedConnections) ClusterUserCreatedConnectionsClusterEndpointArrayOutput {
		return v.ClusterEndpoints
	}).(ClusterUserCreatedConnectionsClusterEndpointArrayOutput)
}

// The name of the Redis cluster these endpoints should be added to.
func (o ClusterUserCreatedConnectionsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterUserCreatedConnections) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ClusterUserCreatedConnectionsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterUserCreatedConnections) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the region of the Redis cluster these endpoints should be added to.
//
// ***
func (o ClusterUserCreatedConnectionsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterUserCreatedConnections) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ClusterUserCreatedConnectionsArrayOutput struct{ *pulumi.OutputState }

func (ClusterUserCreatedConnectionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterUserCreatedConnections)(nil)).Elem()
}

func (o ClusterUserCreatedConnectionsArrayOutput) ToClusterUserCreatedConnectionsArrayOutput() ClusterUserCreatedConnectionsArrayOutput {
	return o
}

func (o ClusterUserCreatedConnectionsArrayOutput) ToClusterUserCreatedConnectionsArrayOutputWithContext(ctx context.Context) ClusterUserCreatedConnectionsArrayOutput {
	return o
}

func (o ClusterUserCreatedConnectionsArrayOutput) Index(i pulumi.IntInput) ClusterUserCreatedConnectionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterUserCreatedConnections {
		return vs[0].([]*ClusterUserCreatedConnections)[vs[1].(int)]
	}).(ClusterUserCreatedConnectionsOutput)
}

type ClusterUserCreatedConnectionsMapOutput struct{ *pulumi.OutputState }

func (ClusterUserCreatedConnectionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterUserCreatedConnections)(nil)).Elem()
}

func (o ClusterUserCreatedConnectionsMapOutput) ToClusterUserCreatedConnectionsMapOutput() ClusterUserCreatedConnectionsMapOutput {
	return o
}

func (o ClusterUserCreatedConnectionsMapOutput) ToClusterUserCreatedConnectionsMapOutputWithContext(ctx context.Context) ClusterUserCreatedConnectionsMapOutput {
	return o
}

func (o ClusterUserCreatedConnectionsMapOutput) MapIndex(k pulumi.StringInput) ClusterUserCreatedConnectionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterUserCreatedConnections {
		return vs[0].(map[string]*ClusterUserCreatedConnections)[vs[1].(string)]
	}).(ClusterUserCreatedConnectionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUserCreatedConnectionsInput)(nil)).Elem(), &ClusterUserCreatedConnections{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUserCreatedConnectionsArrayInput)(nil)).Elem(), ClusterUserCreatedConnectionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUserCreatedConnectionsMapInput)(nil)).Elem(), ClusterUserCreatedConnectionsMap{})
	pulumi.RegisterOutputType(ClusterUserCreatedConnectionsOutput{})
	pulumi.RegisterOutputType(ClusterUserCreatedConnectionsArrayOutput{})
	pulumi.RegisterOutputType(ClusterUserCreatedConnectionsMapOutput{})
}
