// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// RBACRoleBinding represents a rbacrolebinding across the Fleet.
//
// To get more information about ScopeRBACRoleBinding, see:
//
// * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes.rbacrolebindings)
// * How-to Guides
//   - [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
//
// ## Example Usage
//
// ## Import
//
// # ScopeRBACRoleBinding can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default projects/{{project}}/locations/global/scopes/{{scope_id}}/rbacrolebindings/{{scope_rbac_role_binding_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{project}}/{{scope_id}}/{{scope_rbac_role_binding_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{scope_id}}/{{scope_rbac_role_binding_id}}
//
// ```
type ScopeRbacRoleBinding struct {
	pulumi.CustomResourceState

	// Time the RBAC Role Binding was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringPtrOutput `pulumi:"group"`
	// Labels for this ScopeRBACRoleBinding.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name for the RBAC Role Binding
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Role to bind to the principal.
	// Structure is documented below.
	Role ScopeRbacRoleBindingRoleOutput `pulumi:"role"`
	// Id of the scope
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId pulumi.StringOutput `pulumi:"scopeRbacRoleBindingId"`
	// State of the RBAC Role Binding resource.
	// Structure is documented below.
	States ScopeRbacRoleBindingStateTypeArrayOutput `pulumi:"states"`
	// Google-generated UUID for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewScopeRbacRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewScopeRbacRoleBinding(ctx *pulumi.Context,
	name string, args *ScopeRbacRoleBindingArgs, opts ...pulumi.ResourceOption) (*ScopeRbacRoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.ScopeRbacRoleBindingId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeRbacRoleBindingId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScopeRbacRoleBinding
	err := ctx.RegisterResource("gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopeRbacRoleBinding gets an existing ScopeRbacRoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopeRbacRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeRbacRoleBindingState, opts ...pulumi.ResourceOption) (*ScopeRbacRoleBinding, error) {
	var resource ScopeRbacRoleBinding
	err := ctx.ReadResource("gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopeRbacRoleBinding resources.
type scopeRbacRoleBindingState struct {
	// Time the RBAC Role Binding was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime *string `pulumi:"deleteTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// group is the group, as seen by the kubernetes cluster.
	Group *string `pulumi:"group"`
	// Labels for this ScopeRBACRoleBinding.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the RBAC Role Binding
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Role to bind to the principal.
	// Structure is documented below.
	Role *ScopeRbacRoleBindingRole `pulumi:"role"`
	// Id of the scope
	ScopeId *string `pulumi:"scopeId"`
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId *string `pulumi:"scopeRbacRoleBindingId"`
	// State of the RBAC Role Binding resource.
	// Structure is documented below.
	States []ScopeRbacRoleBindingStateType `pulumi:"states"`
	// Google-generated UUID for this resource.
	Uid *string `pulumi:"uid"`
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User *string `pulumi:"user"`
}

type ScopeRbacRoleBindingState struct {
	// Time the RBAC Role Binding was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime pulumi.StringPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringPtrInput
	// Labels for this ScopeRBACRoleBinding.
	Labels pulumi.StringMapInput
	// The resource name for the RBAC Role Binding
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Role to bind to the principal.
	// Structure is documented below.
	Role ScopeRbacRoleBindingRolePtrInput
	// Id of the scope
	ScopeId pulumi.StringPtrInput
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId pulumi.StringPtrInput
	// State of the RBAC Role Binding resource.
	// Structure is documented below.
	States ScopeRbacRoleBindingStateTypeArrayInput
	// Google-generated UUID for this resource.
	Uid pulumi.StringPtrInput
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime pulumi.StringPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User pulumi.StringPtrInput
}

func (ScopeRbacRoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeRbacRoleBindingState)(nil)).Elem()
}

type scopeRbacRoleBindingArgs struct {
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// group is the group, as seen by the kubernetes cluster.
	Group *string `pulumi:"group"`
	// Labels for this ScopeRBACRoleBinding.
	Labels map[string]string `pulumi:"labels"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Role to bind to the principal.
	// Structure is documented below.
	Role ScopeRbacRoleBindingRole `pulumi:"role"`
	// Id of the scope
	ScopeId string `pulumi:"scopeId"`
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId string `pulumi:"scopeRbacRoleBindingId"`
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a ScopeRbacRoleBinding resource.
type ScopeRbacRoleBindingArgs struct {
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringPtrInput
	// Labels for this ScopeRBACRoleBinding.
	Labels pulumi.StringMapInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Role to bind to the principal.
	// Structure is documented below.
	Role ScopeRbacRoleBindingRoleInput
	// Id of the scope
	ScopeId pulumi.StringInput
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId pulumi.StringInput
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User pulumi.StringPtrInput
}

func (ScopeRbacRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeRbacRoleBindingArgs)(nil)).Elem()
}

type ScopeRbacRoleBindingInput interface {
	pulumi.Input

	ToScopeRbacRoleBindingOutput() ScopeRbacRoleBindingOutput
	ToScopeRbacRoleBindingOutputWithContext(ctx context.Context) ScopeRbacRoleBindingOutput
}

func (*ScopeRbacRoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeRbacRoleBinding)(nil)).Elem()
}

func (i *ScopeRbacRoleBinding) ToScopeRbacRoleBindingOutput() ScopeRbacRoleBindingOutput {
	return i.ToScopeRbacRoleBindingOutputWithContext(context.Background())
}

func (i *ScopeRbacRoleBinding) ToScopeRbacRoleBindingOutputWithContext(ctx context.Context) ScopeRbacRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeRbacRoleBindingOutput)
}

func (i *ScopeRbacRoleBinding) ToOutput(ctx context.Context) pulumix.Output[*ScopeRbacRoleBinding] {
	return pulumix.Output[*ScopeRbacRoleBinding]{
		OutputState: i.ToScopeRbacRoleBindingOutputWithContext(ctx).OutputState,
	}
}

// ScopeRbacRoleBindingArrayInput is an input type that accepts ScopeRbacRoleBindingArray and ScopeRbacRoleBindingArrayOutput values.
// You can construct a concrete instance of `ScopeRbacRoleBindingArrayInput` via:
//
//	ScopeRbacRoleBindingArray{ ScopeRbacRoleBindingArgs{...} }
type ScopeRbacRoleBindingArrayInput interface {
	pulumi.Input

	ToScopeRbacRoleBindingArrayOutput() ScopeRbacRoleBindingArrayOutput
	ToScopeRbacRoleBindingArrayOutputWithContext(context.Context) ScopeRbacRoleBindingArrayOutput
}

type ScopeRbacRoleBindingArray []ScopeRbacRoleBindingInput

func (ScopeRbacRoleBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopeRbacRoleBinding)(nil)).Elem()
}

func (i ScopeRbacRoleBindingArray) ToScopeRbacRoleBindingArrayOutput() ScopeRbacRoleBindingArrayOutput {
	return i.ToScopeRbacRoleBindingArrayOutputWithContext(context.Background())
}

func (i ScopeRbacRoleBindingArray) ToScopeRbacRoleBindingArrayOutputWithContext(ctx context.Context) ScopeRbacRoleBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeRbacRoleBindingArrayOutput)
}

func (i ScopeRbacRoleBindingArray) ToOutput(ctx context.Context) pulumix.Output[[]*ScopeRbacRoleBinding] {
	return pulumix.Output[[]*ScopeRbacRoleBinding]{
		OutputState: i.ToScopeRbacRoleBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// ScopeRbacRoleBindingMapInput is an input type that accepts ScopeRbacRoleBindingMap and ScopeRbacRoleBindingMapOutput values.
// You can construct a concrete instance of `ScopeRbacRoleBindingMapInput` via:
//
//	ScopeRbacRoleBindingMap{ "key": ScopeRbacRoleBindingArgs{...} }
type ScopeRbacRoleBindingMapInput interface {
	pulumi.Input

	ToScopeRbacRoleBindingMapOutput() ScopeRbacRoleBindingMapOutput
	ToScopeRbacRoleBindingMapOutputWithContext(context.Context) ScopeRbacRoleBindingMapOutput
}

type ScopeRbacRoleBindingMap map[string]ScopeRbacRoleBindingInput

func (ScopeRbacRoleBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopeRbacRoleBinding)(nil)).Elem()
}

func (i ScopeRbacRoleBindingMap) ToScopeRbacRoleBindingMapOutput() ScopeRbacRoleBindingMapOutput {
	return i.ToScopeRbacRoleBindingMapOutputWithContext(context.Background())
}

func (i ScopeRbacRoleBindingMap) ToScopeRbacRoleBindingMapOutputWithContext(ctx context.Context) ScopeRbacRoleBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeRbacRoleBindingMapOutput)
}

func (i ScopeRbacRoleBindingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScopeRbacRoleBinding] {
	return pulumix.Output[map[string]*ScopeRbacRoleBinding]{
		OutputState: i.ToScopeRbacRoleBindingMapOutputWithContext(ctx).OutputState,
	}
}

type ScopeRbacRoleBindingOutput struct{ *pulumi.OutputState }

func (ScopeRbacRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeRbacRoleBinding)(nil)).Elem()
}

func (o ScopeRbacRoleBindingOutput) ToScopeRbacRoleBindingOutput() ScopeRbacRoleBindingOutput {
	return o
}

func (o ScopeRbacRoleBindingOutput) ToScopeRbacRoleBindingOutputWithContext(ctx context.Context) ScopeRbacRoleBindingOutput {
	return o
}

func (o ScopeRbacRoleBindingOutput) ToOutput(ctx context.Context) pulumix.Output[*ScopeRbacRoleBinding] {
	return pulumix.Output[*ScopeRbacRoleBinding]{
		OutputState: o.OutputState,
	}
}

// Time the RBAC Role Binding was created in UTC.
func (o ScopeRbacRoleBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time the RBAC Role Binding was deleted in UTC.
func (o ScopeRbacRoleBindingOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Principal that is be authorized in the cluster (at least of one the oneof
// is required). Updating one will unset the other automatically.
// group is the group, as seen by the kubernetes cluster.
func (o ScopeRbacRoleBindingOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringPtrOutput { return v.Group }).(pulumi.StringPtrOutput)
}

// Labels for this ScopeRBACRoleBinding.
func (o ScopeRbacRoleBindingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for the RBAC Role Binding
func (o ScopeRbacRoleBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ScopeRbacRoleBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Role to bind to the principal.
// Structure is documented below.
func (o ScopeRbacRoleBindingOutput) Role() ScopeRbacRoleBindingRoleOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) ScopeRbacRoleBindingRoleOutput { return v.Role }).(ScopeRbacRoleBindingRoleOutput)
}

// Id of the scope
func (o ScopeRbacRoleBindingOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// The client-provided identifier of the RBAC Role Binding.
func (o ScopeRbacRoleBindingOutput) ScopeRbacRoleBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.ScopeRbacRoleBindingId }).(pulumi.StringOutput)
}

// State of the RBAC Role Binding resource.
// Structure is documented below.
func (o ScopeRbacRoleBindingOutput) States() ScopeRbacRoleBindingStateTypeArrayOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) ScopeRbacRoleBindingStateTypeArrayOutput { return v.States }).(ScopeRbacRoleBindingStateTypeArrayOutput)
}

// Google-generated UUID for this resource.
func (o ScopeRbacRoleBindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the RBAC Role Binding was updated in UTC.
func (o ScopeRbacRoleBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Principal that is be authorized in the cluster (at least of one the oneof
// is required). Updating one will unset the other automatically.
// user is the name of the user as seen by the kubernetes cluster, example
// "alice" or "alice@domain.tld"
func (o ScopeRbacRoleBindingOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type ScopeRbacRoleBindingArrayOutput struct{ *pulumi.OutputState }

func (ScopeRbacRoleBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopeRbacRoleBinding)(nil)).Elem()
}

func (o ScopeRbacRoleBindingArrayOutput) ToScopeRbacRoleBindingArrayOutput() ScopeRbacRoleBindingArrayOutput {
	return o
}

func (o ScopeRbacRoleBindingArrayOutput) ToScopeRbacRoleBindingArrayOutputWithContext(ctx context.Context) ScopeRbacRoleBindingArrayOutput {
	return o
}

func (o ScopeRbacRoleBindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ScopeRbacRoleBinding] {
	return pulumix.Output[[]*ScopeRbacRoleBinding]{
		OutputState: o.OutputState,
	}
}

func (o ScopeRbacRoleBindingArrayOutput) Index(i pulumi.IntInput) ScopeRbacRoleBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScopeRbacRoleBinding {
		return vs[0].([]*ScopeRbacRoleBinding)[vs[1].(int)]
	}).(ScopeRbacRoleBindingOutput)
}

type ScopeRbacRoleBindingMapOutput struct{ *pulumi.OutputState }

func (ScopeRbacRoleBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopeRbacRoleBinding)(nil)).Elem()
}

func (o ScopeRbacRoleBindingMapOutput) ToScopeRbacRoleBindingMapOutput() ScopeRbacRoleBindingMapOutput {
	return o
}

func (o ScopeRbacRoleBindingMapOutput) ToScopeRbacRoleBindingMapOutputWithContext(ctx context.Context) ScopeRbacRoleBindingMapOutput {
	return o
}

func (o ScopeRbacRoleBindingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScopeRbacRoleBinding] {
	return pulumix.Output[map[string]*ScopeRbacRoleBinding]{
		OutputState: o.OutputState,
	}
}

func (o ScopeRbacRoleBindingMapOutput) MapIndex(k pulumi.StringInput) ScopeRbacRoleBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScopeRbacRoleBinding {
		return vs[0].(map[string]*ScopeRbacRoleBinding)[vs[1].(string)]
	}).(ScopeRbacRoleBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeRbacRoleBindingInput)(nil)).Elem(), &ScopeRbacRoleBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeRbacRoleBindingArrayInput)(nil)).Elem(), ScopeRbacRoleBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeRbacRoleBindingMapInput)(nil)).Elem(), ScopeRbacRoleBindingMap{})
	pulumi.RegisterOutputType(ScopeRbacRoleBindingOutput{})
	pulumi.RegisterOutputType(ScopeRbacRoleBindingArrayOutput{})
	pulumi.RegisterOutputType(ScopeRbacRoleBindingMapOutput{})
}
