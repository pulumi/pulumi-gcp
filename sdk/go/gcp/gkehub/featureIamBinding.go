// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for GKEHub Feature. Each of these resources serves a different use case:
//
// * `gkehub.FeatureIamPolicy`: Authoritative. Sets the IAM policy for the feature and replaces any existing policy already attached.
// * `gkehub.FeatureIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the feature are preserved.
// * `gkehub.FeatureIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the feature are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `gkehub.FeatureIamPolicy`: Retrieves the IAM policy for the feature
//
// > **Note:** `gkehub.FeatureIamPolicy` **cannot** be used in conjunction with `gkehub.FeatureIamBinding` and `gkehub.FeatureIamMember` or they will fight over what your policy should be.
//
// > **Note:** `gkehub.FeatureIamBinding` resources **can be** used in conjunction with `gkehub.FeatureIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_gke\_hub\_feature\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/gkehub"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewFeatureIamPolicy(ctx, "policy", &gkehub.FeatureIamPolicyArgs{
//				Project:    pulumi.Any(google_gke_hub_feature.Feature.Project),
//				Location:   pulumi.Any(google_gke_hub_feature.Feature.Location),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_hub\_feature\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewFeatureIamBinding(ctx, "binding", &gkehub.FeatureIamBindingArgs{
//				Project:  pulumi.Any(google_gke_hub_feature.Feature.Project),
//				Location: pulumi.Any(google_gke_hub_feature.Feature.Location),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_hub\_feature\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewFeatureIamMember(ctx, "member", &gkehub.FeatureIamMemberArgs{
//				Project:  pulumi.Any(google_gke_hub_feature.Feature.Project),
//				Location: pulumi.Any(google_gke_hub_feature.Feature.Location),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/features/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. GKEHub feature IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/featureIamBinding:FeatureIamBinding editor "projects/{{project}}/locations/{{location}}/features/{{feature}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/featureIamBinding:FeatureIamBinding editor "projects/{{project}}/locations/{{location}}/features/{{feature}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/featureIamBinding:FeatureIamBinding editor projects/{{project}}/locations/{{location}}/features/{{feature}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type FeatureIamBinding struct {
	pulumi.CustomResourceState

	Condition FeatureIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location for the resource Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput      `pulumi:"location"`
	Members  pulumi.StringArrayOutput `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.FeatureIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewFeatureIamBinding registers a new resource with the given unique name, arguments, and options.
func NewFeatureIamBinding(ctx *pulumi.Context,
	name string, args *FeatureIamBindingArgs, opts ...pulumi.ResourceOption) (*FeatureIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureIamBinding
	err := ctx.RegisterResource("gcp:gkehub/featureIamBinding:FeatureIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureIamBinding gets an existing FeatureIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureIamBindingState, opts ...pulumi.ResourceOption) (*FeatureIamBinding, error) {
	var resource FeatureIamBinding
	err := ctx.ReadResource("gcp:gkehub/featureIamBinding:FeatureIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureIamBinding resources.
type featureIamBindingState struct {
	Condition *FeatureIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location for the resource Used to find the parent resource to bind the IAM policy to
	Location *string  `pulumi:"location"`
	Members  []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.FeatureIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type FeatureIamBindingState struct {
	Condition FeatureIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location for the resource Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Members  pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkehub.FeatureIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (FeatureIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureIamBindingState)(nil)).Elem()
}

type featureIamBindingArgs struct {
	Condition *FeatureIamBindingCondition `pulumi:"condition"`
	// The location for the resource Used to find the parent resource to bind the IAM policy to
	Location *string  `pulumi:"location"`
	Members  []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.FeatureIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a FeatureIamBinding resource.
type FeatureIamBindingArgs struct {
	Condition FeatureIamBindingConditionPtrInput
	// The location for the resource Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Members  pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkehub.FeatureIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (FeatureIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureIamBindingArgs)(nil)).Elem()
}

type FeatureIamBindingInput interface {
	pulumi.Input

	ToFeatureIamBindingOutput() FeatureIamBindingOutput
	ToFeatureIamBindingOutputWithContext(ctx context.Context) FeatureIamBindingOutput
}

func (*FeatureIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureIamBinding)(nil)).Elem()
}

func (i *FeatureIamBinding) ToFeatureIamBindingOutput() FeatureIamBindingOutput {
	return i.ToFeatureIamBindingOutputWithContext(context.Background())
}

func (i *FeatureIamBinding) ToFeatureIamBindingOutputWithContext(ctx context.Context) FeatureIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureIamBindingOutput)
}

// FeatureIamBindingArrayInput is an input type that accepts FeatureIamBindingArray and FeatureIamBindingArrayOutput values.
// You can construct a concrete instance of `FeatureIamBindingArrayInput` via:
//
//	FeatureIamBindingArray{ FeatureIamBindingArgs{...} }
type FeatureIamBindingArrayInput interface {
	pulumi.Input

	ToFeatureIamBindingArrayOutput() FeatureIamBindingArrayOutput
	ToFeatureIamBindingArrayOutputWithContext(context.Context) FeatureIamBindingArrayOutput
}

type FeatureIamBindingArray []FeatureIamBindingInput

func (FeatureIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureIamBinding)(nil)).Elem()
}

func (i FeatureIamBindingArray) ToFeatureIamBindingArrayOutput() FeatureIamBindingArrayOutput {
	return i.ToFeatureIamBindingArrayOutputWithContext(context.Background())
}

func (i FeatureIamBindingArray) ToFeatureIamBindingArrayOutputWithContext(ctx context.Context) FeatureIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureIamBindingArrayOutput)
}

// FeatureIamBindingMapInput is an input type that accepts FeatureIamBindingMap and FeatureIamBindingMapOutput values.
// You can construct a concrete instance of `FeatureIamBindingMapInput` via:
//
//	FeatureIamBindingMap{ "key": FeatureIamBindingArgs{...} }
type FeatureIamBindingMapInput interface {
	pulumi.Input

	ToFeatureIamBindingMapOutput() FeatureIamBindingMapOutput
	ToFeatureIamBindingMapOutputWithContext(context.Context) FeatureIamBindingMapOutput
}

type FeatureIamBindingMap map[string]FeatureIamBindingInput

func (FeatureIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureIamBinding)(nil)).Elem()
}

func (i FeatureIamBindingMap) ToFeatureIamBindingMapOutput() FeatureIamBindingMapOutput {
	return i.ToFeatureIamBindingMapOutputWithContext(context.Background())
}

func (i FeatureIamBindingMap) ToFeatureIamBindingMapOutputWithContext(ctx context.Context) FeatureIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureIamBindingMapOutput)
}

type FeatureIamBindingOutput struct{ *pulumi.OutputState }

func (FeatureIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureIamBinding)(nil)).Elem()
}

func (o FeatureIamBindingOutput) ToFeatureIamBindingOutput() FeatureIamBindingOutput {
	return o
}

func (o FeatureIamBindingOutput) ToFeatureIamBindingOutputWithContext(ctx context.Context) FeatureIamBindingOutput {
	return o
}

func (o FeatureIamBindingOutput) Condition() FeatureIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *FeatureIamBinding) FeatureIamBindingConditionPtrOutput { return v.Condition }).(FeatureIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o FeatureIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location for the resource Used to find the parent resource to bind the IAM policy to
func (o FeatureIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o FeatureIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FeatureIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o FeatureIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o FeatureIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `gkehub.FeatureIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o FeatureIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type FeatureIamBindingArrayOutput struct{ *pulumi.OutputState }

func (FeatureIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureIamBinding)(nil)).Elem()
}

func (o FeatureIamBindingArrayOutput) ToFeatureIamBindingArrayOutput() FeatureIamBindingArrayOutput {
	return o
}

func (o FeatureIamBindingArrayOutput) ToFeatureIamBindingArrayOutputWithContext(ctx context.Context) FeatureIamBindingArrayOutput {
	return o
}

func (o FeatureIamBindingArrayOutput) Index(i pulumi.IntInput) FeatureIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureIamBinding {
		return vs[0].([]*FeatureIamBinding)[vs[1].(int)]
	}).(FeatureIamBindingOutput)
}

type FeatureIamBindingMapOutput struct{ *pulumi.OutputState }

func (FeatureIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureIamBinding)(nil)).Elem()
}

func (o FeatureIamBindingMapOutput) ToFeatureIamBindingMapOutput() FeatureIamBindingMapOutput {
	return o
}

func (o FeatureIamBindingMapOutput) ToFeatureIamBindingMapOutputWithContext(ctx context.Context) FeatureIamBindingMapOutput {
	return o
}

func (o FeatureIamBindingMapOutput) MapIndex(k pulumi.StringInput) FeatureIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureIamBinding {
		return vs[0].(map[string]*FeatureIamBinding)[vs[1].(string)]
	}).(FeatureIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureIamBindingInput)(nil)).Elem(), &FeatureIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureIamBindingArrayInput)(nil)).Elem(), FeatureIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureIamBindingMapInput)(nil)).Elem(), FeatureIamBindingMap{})
	pulumi.RegisterOutputType(FeatureIamBindingOutput{})
	pulumi.RegisterOutputType(FeatureIamBindingArrayOutput{})
	pulumi.RegisterOutputType(FeatureIamBindingMapOutput{})
}
