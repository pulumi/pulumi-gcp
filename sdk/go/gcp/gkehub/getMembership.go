// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the details of a specific GKE Hub Membership. Use this data source to retrieve the membership's configuration and state.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.LookupMembership(ctx, &gkehub.LookupMembershipArgs{
//				Project:      pulumi.StringRef("my-project-id"),
//				Location:     "global",
//				MembershipId: "my-membership-id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMembership(ctx *pulumi.Context, args *LookupMembershipArgs, opts ...pulumi.InvokeOption) (*LookupMembershipResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMembershipResult
	err := ctx.Invoke("gcp:gkehub/getMembership:getMembership", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMembership.
type LookupMembershipArgs struct {
	// The location for the GKE Hub Membership.
	// Currently only `global` is supported.
	Location string `pulumi:"location"`
	// The GKE Hub Membership id or GKE Cluster's name.
	MembershipId string `pulumi:"membershipId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getMembership.
type LookupMembershipResult struct {
	Authorities     []GetMembershipAuthority `pulumi:"authorities"`
	Description     string                   `pulumi:"description"`
	EffectiveLabels map[string]string        `pulumi:"effectiveLabels"`
	Endpoints       []GetMembershipEndpoint  `pulumi:"endpoints"`
	// The provider-assigned unique ID for this managed resource.
	Id           string            `pulumi:"id"`
	Labels       map[string]string `pulumi:"labels"`
	Location     string            `pulumi:"location"`
	MembershipId string            `pulumi:"membershipId"`
	Name         string            `pulumi:"name"`
	Project      *string           `pulumi:"project"`
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
}

func LookupMembershipOutput(ctx *pulumi.Context, args LookupMembershipOutputArgs, opts ...pulumi.InvokeOption) LookupMembershipResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMembershipResultOutput, error) {
			args := v.(LookupMembershipArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:gkehub/getMembership:getMembership", args, LookupMembershipResultOutput{}, options).(LookupMembershipResultOutput), nil
		}).(LookupMembershipResultOutput)
}

// A collection of arguments for invoking getMembership.
type LookupMembershipOutputArgs struct {
	// The location for the GKE Hub Membership.
	// Currently only `global` is supported.
	Location pulumi.StringInput `pulumi:"location"`
	// The GKE Hub Membership id or GKE Cluster's name.
	MembershipId pulumi.StringInput `pulumi:"membershipId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupMembershipOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMembershipArgs)(nil)).Elem()
}

// A collection of values returned by getMembership.
type LookupMembershipResultOutput struct{ *pulumi.OutputState }

func (LookupMembershipResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMembershipResult)(nil)).Elem()
}

func (o LookupMembershipResultOutput) ToLookupMembershipResultOutput() LookupMembershipResultOutput {
	return o
}

func (o LookupMembershipResultOutput) ToLookupMembershipResultOutputWithContext(ctx context.Context) LookupMembershipResultOutput {
	return o
}

func (o LookupMembershipResultOutput) Authorities() GetMembershipAuthorityArrayOutput {
	return o.ApplyT(func(v LookupMembershipResult) []GetMembershipAuthority { return v.Authorities }).(GetMembershipAuthorityArrayOutput)
}

func (o LookupMembershipResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMembershipResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupMembershipResultOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMembershipResult) map[string]string { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o LookupMembershipResultOutput) Endpoints() GetMembershipEndpointArrayOutput {
	return o.ApplyT(func(v LookupMembershipResult) []GetMembershipEndpoint { return v.Endpoints }).(GetMembershipEndpointArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMembershipResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMembershipResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMembershipResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMembershipResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupMembershipResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMembershipResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupMembershipResultOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMembershipResult) string { return v.MembershipId }).(pulumi.StringOutput)
}

func (o LookupMembershipResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMembershipResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupMembershipResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMembershipResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupMembershipResultOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMembershipResult) map[string]string { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMembershipResultOutput{})
}
