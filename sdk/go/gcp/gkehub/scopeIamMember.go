// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for GKEHub Scope. Each of these resources serves a different use case:
//
// * `gkehub.ScopeIamPolicy`: Authoritative. Sets the IAM policy for the scope and replaces any existing policy already attached.
// * `gkehub.ScopeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the scope are preserved.
// * `gkehub.ScopeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the scope are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `gkehub.ScopeIamPolicy`: Retrieves the IAM policy for the scope
//
// > **Note:** `gkehub.ScopeIamPolicy` **cannot** be used in conjunction with `gkehub.ScopeIamBinding` and `gkehub.ScopeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `gkehub.ScopeIamBinding` resources **can be** used in conjunction with `gkehub.ScopeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_gke\_hub\_scope\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/gkehub"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewScopeIamPolicy(ctx, "policy", &gkehub.ScopeIamPolicyArgs{
//				Project:    pulumi.Any(google_gke_hub_scope.Scope.Project),
//				ScopeId:    pulumi.Any(google_gke_hub_scope.Scope.Scope_id),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_hub\_scope\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewScopeIamBinding(ctx, "binding", &gkehub.ScopeIamBindingArgs{
//				Project: pulumi.Any(google_gke_hub_scope.Scope.Project),
//				ScopeId: pulumi.Any(google_gke_hub_scope.Scope.Scope_id),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_hub\_scope\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewScopeIamMember(ctx, "member", &gkehub.ScopeIamMemberArgs{
//				Project: pulumi.Any(google_gke_hub_scope.Scope.Project),
//				ScopeId: pulumi.Any(google_gke_hub_scope.Scope.Scope_id),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/global/scopes/{{scope_id}} * {{project}}/{{scope_id}} * {{scope_id}} Any variables not passed in the import command will be taken from the provider configuration. GKEHub scope IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamMember:ScopeIamMember editor "projects/{{project}}/locations/global/scopes/{{scope_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamMember:ScopeIamMember editor "projects/{{project}}/locations/global/scopes/{{scope_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamMember:ScopeIamMember editor projects/{{project}}/locations/global/scopes/{{scope_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ScopeIamMember struct {
	pulumi.CustomResourceState

	Condition ScopeIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    pulumi.StringOutput `pulumi:"role"`
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
}

// NewScopeIamMember registers a new resource with the given unique name, arguments, and options.
func NewScopeIamMember(ctx *pulumi.Context,
	name string, args *ScopeIamMemberArgs, opts ...pulumi.ResourceOption) (*ScopeIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScopeIamMember
	err := ctx.RegisterResource("gcp:gkehub/scopeIamMember:ScopeIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopeIamMember gets an existing ScopeIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopeIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeIamMemberState, opts ...pulumi.ResourceOption) (*ScopeIamMember, error) {
	var resource ScopeIamMember
	err := ctx.ReadResource("gcp:gkehub/scopeIamMember:ScopeIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopeIamMember resources.
type scopeIamMemberState struct {
	Condition *ScopeIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    *string `pulumi:"role"`
	ScopeId *string `pulumi:"scopeId"`
}

type ScopeIamMemberState struct {
	Condition ScopeIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    pulumi.StringPtrInput
	ScopeId pulumi.StringPtrInput
}

func (ScopeIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeIamMemberState)(nil)).Elem()
}

type scopeIamMemberArgs struct {
	Condition *ScopeIamMemberCondition `pulumi:"condition"`
	Member    string                   `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    string `pulumi:"role"`
	ScopeId string `pulumi:"scopeId"`
}

// The set of arguments for constructing a ScopeIamMember resource.
type ScopeIamMemberArgs struct {
	Condition ScopeIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    pulumi.StringInput
	ScopeId pulumi.StringInput
}

func (ScopeIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeIamMemberArgs)(nil)).Elem()
}

type ScopeIamMemberInput interface {
	pulumi.Input

	ToScopeIamMemberOutput() ScopeIamMemberOutput
	ToScopeIamMemberOutputWithContext(ctx context.Context) ScopeIamMemberOutput
}

func (*ScopeIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeIamMember)(nil)).Elem()
}

func (i *ScopeIamMember) ToScopeIamMemberOutput() ScopeIamMemberOutput {
	return i.ToScopeIamMemberOutputWithContext(context.Background())
}

func (i *ScopeIamMember) ToScopeIamMemberOutputWithContext(ctx context.Context) ScopeIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamMemberOutput)
}

// ScopeIamMemberArrayInput is an input type that accepts ScopeIamMemberArray and ScopeIamMemberArrayOutput values.
// You can construct a concrete instance of `ScopeIamMemberArrayInput` via:
//
//	ScopeIamMemberArray{ ScopeIamMemberArgs{...} }
type ScopeIamMemberArrayInput interface {
	pulumi.Input

	ToScopeIamMemberArrayOutput() ScopeIamMemberArrayOutput
	ToScopeIamMemberArrayOutputWithContext(context.Context) ScopeIamMemberArrayOutput
}

type ScopeIamMemberArray []ScopeIamMemberInput

func (ScopeIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopeIamMember)(nil)).Elem()
}

func (i ScopeIamMemberArray) ToScopeIamMemberArrayOutput() ScopeIamMemberArrayOutput {
	return i.ToScopeIamMemberArrayOutputWithContext(context.Background())
}

func (i ScopeIamMemberArray) ToScopeIamMemberArrayOutputWithContext(ctx context.Context) ScopeIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamMemberArrayOutput)
}

// ScopeIamMemberMapInput is an input type that accepts ScopeIamMemberMap and ScopeIamMemberMapOutput values.
// You can construct a concrete instance of `ScopeIamMemberMapInput` via:
//
//	ScopeIamMemberMap{ "key": ScopeIamMemberArgs{...} }
type ScopeIamMemberMapInput interface {
	pulumi.Input

	ToScopeIamMemberMapOutput() ScopeIamMemberMapOutput
	ToScopeIamMemberMapOutputWithContext(context.Context) ScopeIamMemberMapOutput
}

type ScopeIamMemberMap map[string]ScopeIamMemberInput

func (ScopeIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopeIamMember)(nil)).Elem()
}

func (i ScopeIamMemberMap) ToScopeIamMemberMapOutput() ScopeIamMemberMapOutput {
	return i.ToScopeIamMemberMapOutputWithContext(context.Background())
}

func (i ScopeIamMemberMap) ToScopeIamMemberMapOutputWithContext(ctx context.Context) ScopeIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamMemberMapOutput)
}

type ScopeIamMemberOutput struct{ *pulumi.OutputState }

func (ScopeIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeIamMember)(nil)).Elem()
}

func (o ScopeIamMemberOutput) ToScopeIamMemberOutput() ScopeIamMemberOutput {
	return o
}

func (o ScopeIamMemberOutput) ToScopeIamMemberOutputWithContext(ctx context.Context) ScopeIamMemberOutput {
	return o
}

func (o ScopeIamMemberOutput) Condition() ScopeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ScopeIamMember) ScopeIamMemberConditionPtrOutput { return v.Condition }).(ScopeIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o ScopeIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ScopeIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o ScopeIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o ScopeIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o ScopeIamMemberOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamMember) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

type ScopeIamMemberArrayOutput struct{ *pulumi.OutputState }

func (ScopeIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopeIamMember)(nil)).Elem()
}

func (o ScopeIamMemberArrayOutput) ToScopeIamMemberArrayOutput() ScopeIamMemberArrayOutput {
	return o
}

func (o ScopeIamMemberArrayOutput) ToScopeIamMemberArrayOutputWithContext(ctx context.Context) ScopeIamMemberArrayOutput {
	return o
}

func (o ScopeIamMemberArrayOutput) Index(i pulumi.IntInput) ScopeIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScopeIamMember {
		return vs[0].([]*ScopeIamMember)[vs[1].(int)]
	}).(ScopeIamMemberOutput)
}

type ScopeIamMemberMapOutput struct{ *pulumi.OutputState }

func (ScopeIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopeIamMember)(nil)).Elem()
}

func (o ScopeIamMemberMapOutput) ToScopeIamMemberMapOutput() ScopeIamMemberMapOutput {
	return o
}

func (o ScopeIamMemberMapOutput) ToScopeIamMemberMapOutputWithContext(ctx context.Context) ScopeIamMemberMapOutput {
	return o
}

func (o ScopeIamMemberMapOutput) MapIndex(k pulumi.StringInput) ScopeIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScopeIamMember {
		return vs[0].(map[string]*ScopeIamMember)[vs[1].(string)]
	}).(ScopeIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamMemberInput)(nil)).Elem(), &ScopeIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamMemberArrayInput)(nil)).Elem(), ScopeIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamMemberMapInput)(nil)).Elem(), ScopeIamMemberMap{})
	pulumi.RegisterOutputType(ScopeIamMemberOutput{})
	pulumi.RegisterOutputType(ScopeIamMemberArrayOutput{})
	pulumi.RegisterOutputType(ScopeIamMemberMapOutput{})
}
