// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Three different resources help you manage your IAM policy for GKEHub Scope. Each of these resources serves a different use case:
//
// * `gkehub.ScopeIamPolicy`: Authoritative. Sets the IAM policy for the scope and replaces any existing policy already attached.
// * `gkehub.ScopeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the scope are preserved.
// * `gkehub.ScopeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the scope are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `gkehub.ScopeIamPolicy`: Retrieves the IAM policy for the scope
//
// > **Note:** `gkehub.ScopeIamPolicy` **cannot** be used in conjunction with `gkehub.ScopeIamBinding` and `gkehub.ScopeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `gkehub.ScopeIamBinding` resources **can be** used in conjunction with `gkehub.ScopeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/global/scopes/{{scope_id}} * {{project}}/{{scope_id}} * {{scope_id}} Any variables not passed in the import command will be taken from the provider configuration. GKEHub scope IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamBinding:ScopeIamBinding editor "projects/{{project}}/locations/global/scopes/{{scope_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamBinding:ScopeIamBinding editor "projects/{{project}}/locations/global/scopes/{{scope_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamBinding:ScopeIamBinding editor projects/{{project}}/locations/global/scopes/{{scope_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ScopeIamBinding struct {
	pulumi.CustomResourceState

	Condition ScopeIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    pulumi.StringOutput `pulumi:"role"`
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
}

// NewScopeIamBinding registers a new resource with the given unique name, arguments, and options.
func NewScopeIamBinding(ctx *pulumi.Context,
	name string, args *ScopeIamBindingArgs, opts ...pulumi.ResourceOption) (*ScopeIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScopeIamBinding
	err := ctx.RegisterResource("gcp:gkehub/scopeIamBinding:ScopeIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopeIamBinding gets an existing ScopeIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopeIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeIamBindingState, opts ...pulumi.ResourceOption) (*ScopeIamBinding, error) {
	var resource ScopeIamBinding
	err := ctx.ReadResource("gcp:gkehub/scopeIamBinding:ScopeIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopeIamBinding resources.
type scopeIamBindingState struct {
	Condition *ScopeIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    *string `pulumi:"role"`
	ScopeId *string `pulumi:"scopeId"`
}

type ScopeIamBindingState struct {
	Condition ScopeIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    pulumi.StringPtrInput
	ScopeId pulumi.StringPtrInput
}

func (ScopeIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeIamBindingState)(nil)).Elem()
}

type scopeIamBindingArgs struct {
	Condition *ScopeIamBindingCondition `pulumi:"condition"`
	Members   []string                  `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    string `pulumi:"role"`
	ScopeId string `pulumi:"scopeId"`
}

// The set of arguments for constructing a ScopeIamBinding resource.
type ScopeIamBindingArgs struct {
	Condition ScopeIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role    pulumi.StringInput
	ScopeId pulumi.StringInput
}

func (ScopeIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeIamBindingArgs)(nil)).Elem()
}

type ScopeIamBindingInput interface {
	pulumi.Input

	ToScopeIamBindingOutput() ScopeIamBindingOutput
	ToScopeIamBindingOutputWithContext(ctx context.Context) ScopeIamBindingOutput
}

func (*ScopeIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeIamBinding)(nil)).Elem()
}

func (i *ScopeIamBinding) ToScopeIamBindingOutput() ScopeIamBindingOutput {
	return i.ToScopeIamBindingOutputWithContext(context.Background())
}

func (i *ScopeIamBinding) ToScopeIamBindingOutputWithContext(ctx context.Context) ScopeIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamBindingOutput)
}

func (i *ScopeIamBinding) ToOutput(ctx context.Context) pulumix.Output[*ScopeIamBinding] {
	return pulumix.Output[*ScopeIamBinding]{
		OutputState: i.ToScopeIamBindingOutputWithContext(ctx).OutputState,
	}
}

// ScopeIamBindingArrayInput is an input type that accepts ScopeIamBindingArray and ScopeIamBindingArrayOutput values.
// You can construct a concrete instance of `ScopeIamBindingArrayInput` via:
//
//	ScopeIamBindingArray{ ScopeIamBindingArgs{...} }
type ScopeIamBindingArrayInput interface {
	pulumi.Input

	ToScopeIamBindingArrayOutput() ScopeIamBindingArrayOutput
	ToScopeIamBindingArrayOutputWithContext(context.Context) ScopeIamBindingArrayOutput
}

type ScopeIamBindingArray []ScopeIamBindingInput

func (ScopeIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopeIamBinding)(nil)).Elem()
}

func (i ScopeIamBindingArray) ToScopeIamBindingArrayOutput() ScopeIamBindingArrayOutput {
	return i.ToScopeIamBindingArrayOutputWithContext(context.Background())
}

func (i ScopeIamBindingArray) ToScopeIamBindingArrayOutputWithContext(ctx context.Context) ScopeIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamBindingArrayOutput)
}

func (i ScopeIamBindingArray) ToOutput(ctx context.Context) pulumix.Output[[]*ScopeIamBinding] {
	return pulumix.Output[[]*ScopeIamBinding]{
		OutputState: i.ToScopeIamBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// ScopeIamBindingMapInput is an input type that accepts ScopeIamBindingMap and ScopeIamBindingMapOutput values.
// You can construct a concrete instance of `ScopeIamBindingMapInput` via:
//
//	ScopeIamBindingMap{ "key": ScopeIamBindingArgs{...} }
type ScopeIamBindingMapInput interface {
	pulumi.Input

	ToScopeIamBindingMapOutput() ScopeIamBindingMapOutput
	ToScopeIamBindingMapOutputWithContext(context.Context) ScopeIamBindingMapOutput
}

type ScopeIamBindingMap map[string]ScopeIamBindingInput

func (ScopeIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopeIamBinding)(nil)).Elem()
}

func (i ScopeIamBindingMap) ToScopeIamBindingMapOutput() ScopeIamBindingMapOutput {
	return i.ToScopeIamBindingMapOutputWithContext(context.Background())
}

func (i ScopeIamBindingMap) ToScopeIamBindingMapOutputWithContext(ctx context.Context) ScopeIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamBindingMapOutput)
}

func (i ScopeIamBindingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScopeIamBinding] {
	return pulumix.Output[map[string]*ScopeIamBinding]{
		OutputState: i.ToScopeIamBindingMapOutputWithContext(ctx).OutputState,
	}
}

type ScopeIamBindingOutput struct{ *pulumi.OutputState }

func (ScopeIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeIamBinding)(nil)).Elem()
}

func (o ScopeIamBindingOutput) ToScopeIamBindingOutput() ScopeIamBindingOutput {
	return o
}

func (o ScopeIamBindingOutput) ToScopeIamBindingOutputWithContext(ctx context.Context) ScopeIamBindingOutput {
	return o
}

func (o ScopeIamBindingOutput) ToOutput(ctx context.Context) pulumix.Output[*ScopeIamBinding] {
	return pulumix.Output[*ScopeIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o ScopeIamBindingOutput) Condition() ScopeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *ScopeIamBinding) ScopeIamBindingConditionPtrOutput { return v.Condition }).(ScopeIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o ScopeIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ScopeIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopeIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o ScopeIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o ScopeIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o ScopeIamBindingOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamBinding) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

type ScopeIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ScopeIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopeIamBinding)(nil)).Elem()
}

func (o ScopeIamBindingArrayOutput) ToScopeIamBindingArrayOutput() ScopeIamBindingArrayOutput {
	return o
}

func (o ScopeIamBindingArrayOutput) ToScopeIamBindingArrayOutputWithContext(ctx context.Context) ScopeIamBindingArrayOutput {
	return o
}

func (o ScopeIamBindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ScopeIamBinding] {
	return pulumix.Output[[]*ScopeIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o ScopeIamBindingArrayOutput) Index(i pulumi.IntInput) ScopeIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScopeIamBinding {
		return vs[0].([]*ScopeIamBinding)[vs[1].(int)]
	}).(ScopeIamBindingOutput)
}

type ScopeIamBindingMapOutput struct{ *pulumi.OutputState }

func (ScopeIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopeIamBinding)(nil)).Elem()
}

func (o ScopeIamBindingMapOutput) ToScopeIamBindingMapOutput() ScopeIamBindingMapOutput {
	return o
}

func (o ScopeIamBindingMapOutput) ToScopeIamBindingMapOutputWithContext(ctx context.Context) ScopeIamBindingMapOutput {
	return o
}

func (o ScopeIamBindingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScopeIamBinding] {
	return pulumix.Output[map[string]*ScopeIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o ScopeIamBindingMapOutput) MapIndex(k pulumi.StringInput) ScopeIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScopeIamBinding {
		return vs[0].(map[string]*ScopeIamBinding)[vs[1].(string)]
	}).(ScopeIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamBindingInput)(nil)).Elem(), &ScopeIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamBindingArrayInput)(nil)).Elem(), ScopeIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamBindingMapInput)(nil)).Elem(), ScopeIamBindingMap{})
	pulumi.RegisterOutputType(ScopeIamBindingOutput{})
	pulumi.RegisterOutputType(ScopeIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ScopeIamBindingMapOutput{})
}
