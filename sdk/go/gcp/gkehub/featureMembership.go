// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// FeatureMembership can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}
// ```
//
// ```sh
//  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{project}}/{{location}}/{{feature}}/{{membership}}
// ```
//
// ```sh
//  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{location}}/{{feature}}/{{membership}}
// ```
type FeatureMembership struct {
	pulumi.CustomResourceState

	// Config Management-specific spec.
	Configmanagement FeatureMembershipConfigmanagementPtrOutput `pulumi:"configmanagement"`
	// The name of the feature
	Feature pulumi.StringPtrOutput `pulumi:"feature"`
	// The location of the feature
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the membership
	Membership pulumi.StringPtrOutput `pulumi:"membership"`
	// The project of the feature
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewFeatureMembership registers a new resource with the given unique name, arguments, and options.
func NewFeatureMembership(ctx *pulumi.Context,
	name string, args *FeatureMembershipArgs, opts ...pulumi.ResourceOption) (*FeatureMembership, error) {
	if args == nil {
		args = &FeatureMembershipArgs{}
	}

	var resource FeatureMembership
	err := ctx.RegisterResource("gcp:gkehub/featureMembership:FeatureMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureMembership gets an existing FeatureMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureMembershipState, opts ...pulumi.ResourceOption) (*FeatureMembership, error) {
	var resource FeatureMembership
	err := ctx.ReadResource("gcp:gkehub/featureMembership:FeatureMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureMembership resources.
type featureMembershipState struct {
	// Config Management-specific spec.
	Configmanagement *FeatureMembershipConfigmanagement `pulumi:"configmanagement"`
	// The name of the feature
	Feature *string `pulumi:"feature"`
	// The location of the feature
	Location *string `pulumi:"location"`
	// The name of the membership
	Membership *string `pulumi:"membership"`
	// The project of the feature
	Project *string `pulumi:"project"`
}

type FeatureMembershipState struct {
	// Config Management-specific spec.
	Configmanagement FeatureMembershipConfigmanagementPtrInput
	// The name of the feature
	Feature pulumi.StringPtrInput
	// The location of the feature
	Location pulumi.StringPtrInput
	// The name of the membership
	Membership pulumi.StringPtrInput
	// The project of the feature
	Project pulumi.StringPtrInput
}

func (FeatureMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureMembershipState)(nil)).Elem()
}

type featureMembershipArgs struct {
	// Config Management-specific spec.
	Configmanagement *FeatureMembershipConfigmanagement `pulumi:"configmanagement"`
	// The name of the feature
	Feature *string `pulumi:"feature"`
	// The location of the feature
	Location *string `pulumi:"location"`
	// The name of the membership
	Membership *string `pulumi:"membership"`
	// The project of the feature
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a FeatureMembership resource.
type FeatureMembershipArgs struct {
	// Config Management-specific spec.
	Configmanagement FeatureMembershipConfigmanagementPtrInput
	// The name of the feature
	Feature pulumi.StringPtrInput
	// The location of the feature
	Location pulumi.StringPtrInput
	// The name of the membership
	Membership pulumi.StringPtrInput
	// The project of the feature
	Project pulumi.StringPtrInput
}

func (FeatureMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureMembershipArgs)(nil)).Elem()
}

type FeatureMembershipInput interface {
	pulumi.Input

	ToFeatureMembershipOutput() FeatureMembershipOutput
	ToFeatureMembershipOutputWithContext(ctx context.Context) FeatureMembershipOutput
}

func (*FeatureMembership) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureMembership)(nil))
}

func (i *FeatureMembership) ToFeatureMembershipOutput() FeatureMembershipOutput {
	return i.ToFeatureMembershipOutputWithContext(context.Background())
}

func (i *FeatureMembership) ToFeatureMembershipOutputWithContext(ctx context.Context) FeatureMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMembershipOutput)
}

func (i *FeatureMembership) ToFeatureMembershipPtrOutput() FeatureMembershipPtrOutput {
	return i.ToFeatureMembershipPtrOutputWithContext(context.Background())
}

func (i *FeatureMembership) ToFeatureMembershipPtrOutputWithContext(ctx context.Context) FeatureMembershipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMembershipPtrOutput)
}

type FeatureMembershipPtrInput interface {
	pulumi.Input

	ToFeatureMembershipPtrOutput() FeatureMembershipPtrOutput
	ToFeatureMembershipPtrOutputWithContext(ctx context.Context) FeatureMembershipPtrOutput
}

type featureMembershipPtrType FeatureMembershipArgs

func (*featureMembershipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureMembership)(nil))
}

func (i *featureMembershipPtrType) ToFeatureMembershipPtrOutput() FeatureMembershipPtrOutput {
	return i.ToFeatureMembershipPtrOutputWithContext(context.Background())
}

func (i *featureMembershipPtrType) ToFeatureMembershipPtrOutputWithContext(ctx context.Context) FeatureMembershipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMembershipPtrOutput)
}

// FeatureMembershipArrayInput is an input type that accepts FeatureMembershipArray and FeatureMembershipArrayOutput values.
// You can construct a concrete instance of `FeatureMembershipArrayInput` via:
//
//          FeatureMembershipArray{ FeatureMembershipArgs{...} }
type FeatureMembershipArrayInput interface {
	pulumi.Input

	ToFeatureMembershipArrayOutput() FeatureMembershipArrayOutput
	ToFeatureMembershipArrayOutputWithContext(context.Context) FeatureMembershipArrayOutput
}

type FeatureMembershipArray []FeatureMembershipInput

func (FeatureMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*FeatureMembership)(nil))
}

func (i FeatureMembershipArray) ToFeatureMembershipArrayOutput() FeatureMembershipArrayOutput {
	return i.ToFeatureMembershipArrayOutputWithContext(context.Background())
}

func (i FeatureMembershipArray) ToFeatureMembershipArrayOutputWithContext(ctx context.Context) FeatureMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMembershipArrayOutput)
}

// FeatureMembershipMapInput is an input type that accepts FeatureMembershipMap and FeatureMembershipMapOutput values.
// You can construct a concrete instance of `FeatureMembershipMapInput` via:
//
//          FeatureMembershipMap{ "key": FeatureMembershipArgs{...} }
type FeatureMembershipMapInput interface {
	pulumi.Input

	ToFeatureMembershipMapOutput() FeatureMembershipMapOutput
	ToFeatureMembershipMapOutputWithContext(context.Context) FeatureMembershipMapOutput
}

type FeatureMembershipMap map[string]FeatureMembershipInput

func (FeatureMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*FeatureMembership)(nil))
}

func (i FeatureMembershipMap) ToFeatureMembershipMapOutput() FeatureMembershipMapOutput {
	return i.ToFeatureMembershipMapOutputWithContext(context.Background())
}

func (i FeatureMembershipMap) ToFeatureMembershipMapOutputWithContext(ctx context.Context) FeatureMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMembershipMapOutput)
}

type FeatureMembershipOutput struct {
	*pulumi.OutputState
}

func (FeatureMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureMembership)(nil))
}

func (o FeatureMembershipOutput) ToFeatureMembershipOutput() FeatureMembershipOutput {
	return o
}

func (o FeatureMembershipOutput) ToFeatureMembershipOutputWithContext(ctx context.Context) FeatureMembershipOutput {
	return o
}

func (o FeatureMembershipOutput) ToFeatureMembershipPtrOutput() FeatureMembershipPtrOutput {
	return o.ToFeatureMembershipPtrOutputWithContext(context.Background())
}

func (o FeatureMembershipOutput) ToFeatureMembershipPtrOutputWithContext(ctx context.Context) FeatureMembershipPtrOutput {
	return o.ApplyT(func(v FeatureMembership) *FeatureMembership {
		return &v
	}).(FeatureMembershipPtrOutput)
}

type FeatureMembershipPtrOutput struct {
	*pulumi.OutputState
}

func (FeatureMembershipPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureMembership)(nil))
}

func (o FeatureMembershipPtrOutput) ToFeatureMembershipPtrOutput() FeatureMembershipPtrOutput {
	return o
}

func (o FeatureMembershipPtrOutput) ToFeatureMembershipPtrOutputWithContext(ctx context.Context) FeatureMembershipPtrOutput {
	return o
}

type FeatureMembershipArrayOutput struct{ *pulumi.OutputState }

func (FeatureMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureMembership)(nil))
}

func (o FeatureMembershipArrayOutput) ToFeatureMembershipArrayOutput() FeatureMembershipArrayOutput {
	return o
}

func (o FeatureMembershipArrayOutput) ToFeatureMembershipArrayOutputWithContext(ctx context.Context) FeatureMembershipArrayOutput {
	return o
}

func (o FeatureMembershipArrayOutput) Index(i pulumi.IntInput) FeatureMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureMembership {
		return vs[0].([]FeatureMembership)[vs[1].(int)]
	}).(FeatureMembershipOutput)
}

type FeatureMembershipMapOutput struct{ *pulumi.OutputState }

func (FeatureMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FeatureMembership)(nil))
}

func (o FeatureMembershipMapOutput) ToFeatureMembershipMapOutput() FeatureMembershipMapOutput {
	return o
}

func (o FeatureMembershipMapOutput) ToFeatureMembershipMapOutputWithContext(ctx context.Context) FeatureMembershipMapOutput {
	return o
}

func (o FeatureMembershipMapOutput) MapIndex(k pulumi.StringInput) FeatureMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FeatureMembership {
		return vs[0].(map[string]FeatureMembership)[vs[1].(string)]
	}).(FeatureMembershipOutput)
}

func init() {
	pulumi.RegisterOutputType(FeatureMembershipOutput{})
	pulumi.RegisterOutputType(FeatureMembershipPtrOutput{})
	pulumi.RegisterOutputType(FeatureMembershipArrayOutput{})
	pulumi.RegisterOutputType(FeatureMembershipMapOutput{})
}
