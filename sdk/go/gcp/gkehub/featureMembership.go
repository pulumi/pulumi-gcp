// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains information about a GKEHub Feature Memberships. Feature Memberships configure GKEHub Features that apply to specific memberships rather than the project as a whole. The googleGkeHub is the Fleet API.
//
// ## Example Usage
//
// ### Config Management
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cluster, err := container.NewCluster(ctx, "cluster", &container.ClusterArgs{
//				Name:             pulumi.String("my-cluster"),
//				Location:         pulumi.String("us-central1-a"),
//				InitialNodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			membership, err := gkehub.NewMembership(ctx, "membership", &gkehub.MembershipArgs{
//				MembershipId: pulumi.String("my-membership"),
//				Endpoint: &gkehub.MembershipEndpointArgs{
//					GkeCluster: &gkehub.MembershipEndpointGkeClusterArgs{
//						ResourceLink: cluster.ID().ApplyT(func(id string) (string, error) {
//							return fmt.Sprintf("//container.googleapis.com/%v", id), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			feature, err := gkehub.NewFeature(ctx, "feature", &gkehub.FeatureArgs{
//				Name:     pulumi.String("configmanagement"),
//				Location: pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewFeatureMembership(ctx, "feature_member", &gkehub.FeatureMembershipArgs{
//				Location:   pulumi.String("global"),
//				Feature:    feature.Name,
//				Membership: membership.MembershipId,
//				Configmanagement: &gkehub.FeatureMembershipConfigmanagementArgs{
//					Version: pulumi.String("1.6.2"),
//					ConfigSync: &gkehub.FeatureMembershipConfigmanagementConfigSyncArgs{
//						Git: &gkehub.FeatureMembershipConfigmanagementConfigSyncGitArgs{
//							SyncRepo: pulumi.String("https://github.com/hashicorp/terraform"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Config Management With OCI
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cluster, err := container.NewCluster(ctx, "cluster", &container.ClusterArgs{
//				Name:             pulumi.String("my-cluster"),
//				Location:         pulumi.String("us-central1-a"),
//				InitialNodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			membership, err := gkehub.NewMembership(ctx, "membership", &gkehub.MembershipArgs{
//				MembershipId: pulumi.String("my-membership"),
//				Endpoint: &gkehub.MembershipEndpointArgs{
//					GkeCluster: &gkehub.MembershipEndpointGkeClusterArgs{
//						ResourceLink: cluster.ID().ApplyT(func(id string) (string, error) {
//							return fmt.Sprintf("//container.googleapis.com/%v", id), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			feature, err := gkehub.NewFeature(ctx, "feature", &gkehub.FeatureArgs{
//				Name:     pulumi.String("configmanagement"),
//				Location: pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewFeatureMembership(ctx, "feature_member", &gkehub.FeatureMembershipArgs{
//				Location:   pulumi.String("global"),
//				Feature:    feature.Name,
//				Membership: membership.MembershipId,
//				Configmanagement: &gkehub.FeatureMembershipConfigmanagementArgs{
//					Version: pulumi.String("1.15.1"),
//					ConfigSync: &gkehub.FeatureMembershipConfigmanagementConfigSyncArgs{
//						Oci: &gkehub.FeatureMembershipConfigmanagementConfigSyncOciArgs{
//							SyncRepo:               pulumi.String("us-central1-docker.pkg.dev/sample-project/config-repo/config-sync-gke:latest"),
//							PolicyDir:              pulumi.String("config-connector"),
//							SyncWaitSecs:           pulumi.String("20"),
//							SecretType:             pulumi.String("gcpserviceaccount"),
//							GcpServiceAccountEmail: pulumi.String("sa@project-id.iam.gserviceaccount.com"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Multi Cluster Service Discovery
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewFeature(ctx, "feature", &gkehub.FeatureArgs{
//				Name:     pulumi.String("multiclusterservicediscovery"),
//				Location: pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Service Mesh
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cluster, err := container.NewCluster(ctx, "cluster", &container.ClusterArgs{
//				Name:             pulumi.String("my-cluster"),
//				Location:         pulumi.String("us-central1-a"),
//				InitialNodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			membership, err := gkehub.NewMembership(ctx, "membership", &gkehub.MembershipArgs{
//				MembershipId: pulumi.String("my-membership"),
//				Endpoint: &gkehub.MembershipEndpointArgs{
//					GkeCluster: &gkehub.MembershipEndpointGkeClusterArgs{
//						ResourceLink: cluster.ID().ApplyT(func(id string) (string, error) {
//							return fmt.Sprintf("//container.googleapis.com/%v", id), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			feature, err := gkehub.NewFeature(ctx, "feature", &gkehub.FeatureArgs{
//				Name:     pulumi.String("servicemesh"),
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewFeatureMembership(ctx, "feature_member", &gkehub.FeatureMembershipArgs{
//				Location:   pulumi.String("global"),
//				Feature:    feature.Name,
//				Membership: membership.MembershipId,
//				Mesh: &gkehub.FeatureMembershipMeshArgs{
//					Management: pulumi.String("MANAGEMENT_AUTOMATIC"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Config Management With Regional Membership
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cluster, err := container.NewCluster(ctx, "cluster", &container.ClusterArgs{
//				Name:             pulumi.String("my-cluster"),
//				Location:         pulumi.String("us-central1-a"),
//				InitialNodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			membership, err := gkehub.NewMembership(ctx, "membership", &gkehub.MembershipArgs{
//				MembershipId: pulumi.String("my-membership"),
//				Location:     pulumi.String("us-central1"),
//				Endpoint: &gkehub.MembershipEndpointArgs{
//					GkeCluster: &gkehub.MembershipEndpointGkeClusterArgs{
//						ResourceLink: cluster.ID().ApplyT(func(id string) (string, error) {
//							return fmt.Sprintf("//container.googleapis.com/%v", id), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			feature, err := gkehub.NewFeature(ctx, "feature", &gkehub.FeatureArgs{
//				Name:     pulumi.String("configmanagement"),
//				Location: pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewFeatureMembership(ctx, "feature_member", &gkehub.FeatureMembershipArgs{
//				Location:           pulumi.String("global"),
//				Feature:            feature.Name,
//				Membership:         membership.MembershipId,
//				MembershipLocation: membership.Location,
//				Configmanagement: &gkehub.FeatureMembershipConfigmanagementArgs{
//					Version: pulumi.String("1.6.2"),
//					ConfigSync: &gkehub.FeatureMembershipConfigmanagementConfigSyncArgs{
//						Git: &gkehub.FeatureMembershipConfigmanagementConfigSyncGitArgs{
//							SyncRepo: pulumi.String("https://github.com/hashicorp/terraform"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Policy Controller With Minimal Configuration
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cluster, err := container.NewCluster(ctx, "cluster", &container.ClusterArgs{
//				Name:             pulumi.String("my-cluster"),
//				Location:         pulumi.String("us-central1-a"),
//				InitialNodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			membership, err := gkehub.NewMembership(ctx, "membership", &gkehub.MembershipArgs{
//				MembershipId: pulumi.String("my-membership"),
//				Endpoint: &gkehub.MembershipEndpointArgs{
//					GkeCluster: &gkehub.MembershipEndpointGkeClusterArgs{
//						ResourceLink: cluster.ID().ApplyT(func(id string) (string, error) {
//							return fmt.Sprintf("//container.googleapis.com/%v", id), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			feature, err := gkehub.NewFeature(ctx, "feature", &gkehub.FeatureArgs{
//				Name:     pulumi.String("policycontroller"),
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewFeatureMembership(ctx, "feature_member", &gkehub.FeatureMembershipArgs{
//				Location:   pulumi.String("global"),
//				Feature:    feature.Name,
//				Membership: membership.MembershipId,
//				Policycontroller: &gkehub.FeatureMembershipPolicycontrollerArgs{
//					PolicyControllerHubConfig: &gkehub.FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs{
//						InstallSpec: pulumi.String("INSTALL_SPEC_ENABLED"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Policy Controller With Custom Configurations
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cluster, err := container.NewCluster(ctx, "cluster", &container.ClusterArgs{
//				Name:             pulumi.String("my-cluster"),
//				Location:         pulumi.String("us-central1-a"),
//				InitialNodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			membership, err := gkehub.NewMembership(ctx, "membership", &gkehub.MembershipArgs{
//				MembershipId: pulumi.String("my-membership"),
//				Endpoint: &gkehub.MembershipEndpointArgs{
//					GkeCluster: &gkehub.MembershipEndpointGkeClusterArgs{
//						ResourceLink: cluster.ID().ApplyT(func(id string) (string, error) {
//							return fmt.Sprintf("//container.googleapis.com/%v", id), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			feature, err := gkehub.NewFeature(ctx, "feature", &gkehub.FeatureArgs{
//				Name:     pulumi.String("policycontroller"),
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewFeatureMembership(ctx, "feature_member", &gkehub.FeatureMembershipArgs{
//				Location:   pulumi.String("global"),
//				Feature:    feature.Name,
//				Membership: membership.MembershipId,
//				Policycontroller: &gkehub.FeatureMembershipPolicycontrollerArgs{
//					PolicyControllerHubConfig: &gkehub.FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs{
//						InstallSpec: pulumi.String("INSTALL_SPEC_SUSPENDED"),
//						PolicyContent: &gkehub.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs{
//							TemplateLibrary: &gkehub.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryArgs{
//								Installation: pulumi.String("NOT_INSTALLED"),
//							},
//						},
//						ConstraintViolationLimit: pulumi.Int(50),
//						AuditIntervalSeconds:     pulumi.Int(120),
//						ReferentialRulesEnabled:  pulumi.Bool(true),
//						LogDeniesEnabled:         pulumi.Bool(true),
//						MutationEnabled:          pulumi.Bool(true),
//					},
//					Version: pulumi.String("1.17.0"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FeatureMembership can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}`
//
// * `{{project}}/{{location}}/{{feature}}/{{membership}}`
//
// * `{{location}}/{{feature}}/{{membership}}`
//
// When using the `pulumi import` command, FeatureMembership can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}
// ```
//
// ```sh
// $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{project}}/{{location}}/{{feature}}/{{membership}}
// ```
//
// ```sh
// $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{location}}/{{feature}}/{{membership}}
// ```
type FeatureMembership struct {
	pulumi.CustomResourceState

	// Config Management-specific spec. Structure is documented below.
	Configmanagement FeatureMembershipConfigmanagementPtrOutput `pulumi:"configmanagement"`
	// The name of the feature
	Feature pulumi.StringOutput `pulumi:"feature"`
	// The location of the feature
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the membership
	Membership pulumi.StringOutput `pulumi:"membership"`
	// The location of the membership, for example, "us-central1". Default is "global".
	MembershipLocation pulumi.StringPtrOutput `pulumi:"membershipLocation"`
	// Service mesh specific spec. Structure is documented below.
	Mesh FeatureMembershipMeshPtrOutput `pulumi:"mesh"`
	// Policy Controller-specific spec. Structure is documented below.
	Policycontroller FeatureMembershipPolicycontrollerPtrOutput `pulumi:"policycontroller"`
	// The project of the feature
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewFeatureMembership registers a new resource with the given unique name, arguments, and options.
func NewFeatureMembership(ctx *pulumi.Context,
	name string, args *FeatureMembershipArgs, opts ...pulumi.ResourceOption) (*FeatureMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Feature == nil {
		return nil, errors.New("invalid value for required argument 'Feature'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Membership == nil {
		return nil, errors.New("invalid value for required argument 'Membership'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureMembership
	err := ctx.RegisterResource("gcp:gkehub/featureMembership:FeatureMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureMembership gets an existing FeatureMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureMembershipState, opts ...pulumi.ResourceOption) (*FeatureMembership, error) {
	var resource FeatureMembership
	err := ctx.ReadResource("gcp:gkehub/featureMembership:FeatureMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureMembership resources.
type featureMembershipState struct {
	// Config Management-specific spec. Structure is documented below.
	Configmanagement *FeatureMembershipConfigmanagement `pulumi:"configmanagement"`
	// The name of the feature
	Feature *string `pulumi:"feature"`
	// The location of the feature
	Location *string `pulumi:"location"`
	// The name of the membership
	Membership *string `pulumi:"membership"`
	// The location of the membership, for example, "us-central1". Default is "global".
	MembershipLocation *string `pulumi:"membershipLocation"`
	// Service mesh specific spec. Structure is documented below.
	Mesh *FeatureMembershipMesh `pulumi:"mesh"`
	// Policy Controller-specific spec. Structure is documented below.
	Policycontroller *FeatureMembershipPolicycontroller `pulumi:"policycontroller"`
	// The project of the feature
	Project *string `pulumi:"project"`
}

type FeatureMembershipState struct {
	// Config Management-specific spec. Structure is documented below.
	Configmanagement FeatureMembershipConfigmanagementPtrInput
	// The name of the feature
	Feature pulumi.StringPtrInput
	// The location of the feature
	Location pulumi.StringPtrInput
	// The name of the membership
	Membership pulumi.StringPtrInput
	// The location of the membership, for example, "us-central1". Default is "global".
	MembershipLocation pulumi.StringPtrInput
	// Service mesh specific spec. Structure is documented below.
	Mesh FeatureMembershipMeshPtrInput
	// Policy Controller-specific spec. Structure is documented below.
	Policycontroller FeatureMembershipPolicycontrollerPtrInput
	// The project of the feature
	Project pulumi.StringPtrInput
}

func (FeatureMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureMembershipState)(nil)).Elem()
}

type featureMembershipArgs struct {
	// Config Management-specific spec. Structure is documented below.
	Configmanagement *FeatureMembershipConfigmanagement `pulumi:"configmanagement"`
	// The name of the feature
	Feature string `pulumi:"feature"`
	// The location of the feature
	Location string `pulumi:"location"`
	// The name of the membership
	Membership string `pulumi:"membership"`
	// The location of the membership, for example, "us-central1". Default is "global".
	MembershipLocation *string `pulumi:"membershipLocation"`
	// Service mesh specific spec. Structure is documented below.
	Mesh *FeatureMembershipMesh `pulumi:"mesh"`
	// Policy Controller-specific spec. Structure is documented below.
	Policycontroller *FeatureMembershipPolicycontroller `pulumi:"policycontroller"`
	// The project of the feature
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a FeatureMembership resource.
type FeatureMembershipArgs struct {
	// Config Management-specific spec. Structure is documented below.
	Configmanagement FeatureMembershipConfigmanagementPtrInput
	// The name of the feature
	Feature pulumi.StringInput
	// The location of the feature
	Location pulumi.StringInput
	// The name of the membership
	Membership pulumi.StringInput
	// The location of the membership, for example, "us-central1". Default is "global".
	MembershipLocation pulumi.StringPtrInput
	// Service mesh specific spec. Structure is documented below.
	Mesh FeatureMembershipMeshPtrInput
	// Policy Controller-specific spec. Structure is documented below.
	Policycontroller FeatureMembershipPolicycontrollerPtrInput
	// The project of the feature
	Project pulumi.StringPtrInput
}

func (FeatureMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureMembershipArgs)(nil)).Elem()
}

type FeatureMembershipInput interface {
	pulumi.Input

	ToFeatureMembershipOutput() FeatureMembershipOutput
	ToFeatureMembershipOutputWithContext(ctx context.Context) FeatureMembershipOutput
}

func (*FeatureMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureMembership)(nil)).Elem()
}

func (i *FeatureMembership) ToFeatureMembershipOutput() FeatureMembershipOutput {
	return i.ToFeatureMembershipOutputWithContext(context.Background())
}

func (i *FeatureMembership) ToFeatureMembershipOutputWithContext(ctx context.Context) FeatureMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMembershipOutput)
}

// FeatureMembershipArrayInput is an input type that accepts FeatureMembershipArray and FeatureMembershipArrayOutput values.
// You can construct a concrete instance of `FeatureMembershipArrayInput` via:
//
//	FeatureMembershipArray{ FeatureMembershipArgs{...} }
type FeatureMembershipArrayInput interface {
	pulumi.Input

	ToFeatureMembershipArrayOutput() FeatureMembershipArrayOutput
	ToFeatureMembershipArrayOutputWithContext(context.Context) FeatureMembershipArrayOutput
}

type FeatureMembershipArray []FeatureMembershipInput

func (FeatureMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureMembership)(nil)).Elem()
}

func (i FeatureMembershipArray) ToFeatureMembershipArrayOutput() FeatureMembershipArrayOutput {
	return i.ToFeatureMembershipArrayOutputWithContext(context.Background())
}

func (i FeatureMembershipArray) ToFeatureMembershipArrayOutputWithContext(ctx context.Context) FeatureMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMembershipArrayOutput)
}

// FeatureMembershipMapInput is an input type that accepts FeatureMembershipMap and FeatureMembershipMapOutput values.
// You can construct a concrete instance of `FeatureMembershipMapInput` via:
//
//	FeatureMembershipMap{ "key": FeatureMembershipArgs{...} }
type FeatureMembershipMapInput interface {
	pulumi.Input

	ToFeatureMembershipMapOutput() FeatureMembershipMapOutput
	ToFeatureMembershipMapOutputWithContext(context.Context) FeatureMembershipMapOutput
}

type FeatureMembershipMap map[string]FeatureMembershipInput

func (FeatureMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureMembership)(nil)).Elem()
}

func (i FeatureMembershipMap) ToFeatureMembershipMapOutput() FeatureMembershipMapOutput {
	return i.ToFeatureMembershipMapOutputWithContext(context.Background())
}

func (i FeatureMembershipMap) ToFeatureMembershipMapOutputWithContext(ctx context.Context) FeatureMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMembershipMapOutput)
}

type FeatureMembershipOutput struct{ *pulumi.OutputState }

func (FeatureMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureMembership)(nil)).Elem()
}

func (o FeatureMembershipOutput) ToFeatureMembershipOutput() FeatureMembershipOutput {
	return o
}

func (o FeatureMembershipOutput) ToFeatureMembershipOutputWithContext(ctx context.Context) FeatureMembershipOutput {
	return o
}

// Config Management-specific spec. Structure is documented below.
func (o FeatureMembershipOutput) Configmanagement() FeatureMembershipConfigmanagementPtrOutput {
	return o.ApplyT(func(v *FeatureMembership) FeatureMembershipConfigmanagementPtrOutput { return v.Configmanagement }).(FeatureMembershipConfigmanagementPtrOutput)
}

// The name of the feature
func (o FeatureMembershipOutput) Feature() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureMembership) pulumi.StringOutput { return v.Feature }).(pulumi.StringOutput)
}

// The location of the feature
func (o FeatureMembershipOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureMembership) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the membership
func (o FeatureMembershipOutput) Membership() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureMembership) pulumi.StringOutput { return v.Membership }).(pulumi.StringOutput)
}

// The location of the membership, for example, "us-central1". Default is "global".
func (o FeatureMembershipOutput) MembershipLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureMembership) pulumi.StringPtrOutput { return v.MembershipLocation }).(pulumi.StringPtrOutput)
}

// Service mesh specific spec. Structure is documented below.
func (o FeatureMembershipOutput) Mesh() FeatureMembershipMeshPtrOutput {
	return o.ApplyT(func(v *FeatureMembership) FeatureMembershipMeshPtrOutput { return v.Mesh }).(FeatureMembershipMeshPtrOutput)
}

// Policy Controller-specific spec. Structure is documented below.
func (o FeatureMembershipOutput) Policycontroller() FeatureMembershipPolicycontrollerPtrOutput {
	return o.ApplyT(func(v *FeatureMembership) FeatureMembershipPolicycontrollerPtrOutput { return v.Policycontroller }).(FeatureMembershipPolicycontrollerPtrOutput)
}

// The project of the feature
func (o FeatureMembershipOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureMembership) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type FeatureMembershipArrayOutput struct{ *pulumi.OutputState }

func (FeatureMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureMembership)(nil)).Elem()
}

func (o FeatureMembershipArrayOutput) ToFeatureMembershipArrayOutput() FeatureMembershipArrayOutput {
	return o
}

func (o FeatureMembershipArrayOutput) ToFeatureMembershipArrayOutputWithContext(ctx context.Context) FeatureMembershipArrayOutput {
	return o
}

func (o FeatureMembershipArrayOutput) Index(i pulumi.IntInput) FeatureMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureMembership {
		return vs[0].([]*FeatureMembership)[vs[1].(int)]
	}).(FeatureMembershipOutput)
}

type FeatureMembershipMapOutput struct{ *pulumi.OutputState }

func (FeatureMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureMembership)(nil)).Elem()
}

func (o FeatureMembershipMapOutput) ToFeatureMembershipMapOutput() FeatureMembershipMapOutput {
	return o
}

func (o FeatureMembershipMapOutput) ToFeatureMembershipMapOutputWithContext(ctx context.Context) FeatureMembershipMapOutput {
	return o
}

func (o FeatureMembershipMapOutput) MapIndex(k pulumi.StringInput) FeatureMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureMembership {
		return vs[0].(map[string]*FeatureMembership)[vs[1].(string)]
	}).(FeatureMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureMembershipInput)(nil)).Elem(), &FeatureMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureMembershipArrayInput)(nil)).Elem(), FeatureMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureMembershipMapInput)(nil)).Elem(), FeatureMembershipMap{})
	pulumi.RegisterOutputType(FeatureMembershipOutput{})
	pulumi.RegisterOutputType(FeatureMembershipArrayOutput{})
	pulumi.RegisterOutputType(FeatureMembershipMapOutput{})
}
