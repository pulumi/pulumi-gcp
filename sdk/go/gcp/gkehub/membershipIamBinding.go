// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for GKEHub Membership. Each of these resources serves a different use case:
//
// * `gkehub.MembershipIamPolicy`: Authoritative. Sets the IAM policy for the membership and replaces any existing policy already attached.
// * `gkehub.MembershipIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the membership are preserved.
// * `gkehub.MembershipIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the membership are preserved.
//
// > **Note:** `gkehub.MembershipIamPolicy` **cannot** be used in conjunction with `gkehub.MembershipIamBinding` and `gkehub.MembershipIamMember` or they will fight over what your policy should be.
//
// > **Note:** `gkehub.MembershipIamBinding` resources **can be** used in conjunction with `gkehub.MembershipIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_gke\_hub\_membership\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkehub"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					organizations.GetIAMPolicyBinding{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewMembershipIamPolicy(ctx, "policy", &gkehub.MembershipIamPolicyArgs{
//				Project:      pulumi.Any(google_gke_hub_membership.Membership.Project),
//				MembershipId: pulumi.Any(google_gke_hub_membership.Membership.Membership_id),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_hub\_membership\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewMembershipIamBinding(ctx, "binding", &gkehub.MembershipIamBindingArgs{
//				Project:      pulumi.Any(google_gke_hub_membership.Membership.Project),
//				MembershipId: pulumi.Any(google_gke_hub_membership.Membership.Membership_id),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_hub\_membership\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewMembershipIamMember(ctx, "member", &gkehub.MembershipIamMemberArgs{
//				Project:      pulumi.Any(google_gke_hub_membership.Membership.Project),
//				MembershipId: pulumi.Any(google_gke_hub_membership.Membership.Membership_id),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/memberships/{{membership_id}} * {{project}}/{{location}}/{{membership_id}} * {{location}}/{{membership_id}} * {{membership_id}} Any variables not passed in the import command will be taken from the provider configuration. GKEHub membership IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/membershipIamBinding:MembershipIamBinding editor "projects/{{project}}/locations/{{location}}/memberships/{{membership_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/membershipIamBinding:MembershipIamBinding editor "projects/{{project}}/locations/{{location}}/memberships/{{membership_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/membershipIamBinding:MembershipIamBinding editor projects/{{project}}/locations/{{location}}/memberships/{{membership_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type MembershipIamBinding struct {
	pulumi.CustomResourceState

	Condition MembershipIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag         pulumi.StringOutput      `pulumi:"etag"`
	Members      pulumi.StringArrayOutput `pulumi:"members"`
	MembershipId pulumi.StringOutput      `pulumi:"membershipId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.MembershipIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewMembershipIamBinding registers a new resource with the given unique name, arguments, and options.
func NewMembershipIamBinding(ctx *pulumi.Context,
	name string, args *MembershipIamBindingArgs, opts ...pulumi.ResourceOption) (*MembershipIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.MembershipId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource MembershipIamBinding
	err := ctx.RegisterResource("gcp:gkehub/membershipIamBinding:MembershipIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMembershipIamBinding gets an existing MembershipIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMembershipIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MembershipIamBindingState, opts ...pulumi.ResourceOption) (*MembershipIamBinding, error) {
	var resource MembershipIamBinding
	err := ctx.ReadResource("gcp:gkehub/membershipIamBinding:MembershipIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MembershipIamBinding resources.
type membershipIamBindingState struct {
	Condition *MembershipIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag         *string  `pulumi:"etag"`
	Members      []string `pulumi:"members"`
	MembershipId *string  `pulumi:"membershipId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.MembershipIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type MembershipIamBindingState struct {
	Condition MembershipIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag         pulumi.StringPtrInput
	Members      pulumi.StringArrayInput
	MembershipId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkehub.MembershipIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (MembershipIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipIamBindingState)(nil)).Elem()
}

type membershipIamBindingArgs struct {
	Condition    *MembershipIamBindingCondition `pulumi:"condition"`
	Members      []string                       `pulumi:"members"`
	MembershipId string                         `pulumi:"membershipId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `gkehub.MembershipIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a MembershipIamBinding resource.
type MembershipIamBindingArgs struct {
	Condition    MembershipIamBindingConditionPtrInput
	Members      pulumi.StringArrayInput
	MembershipId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gkehub.MembershipIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (MembershipIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipIamBindingArgs)(nil)).Elem()
}

type MembershipIamBindingInput interface {
	pulumi.Input

	ToMembershipIamBindingOutput() MembershipIamBindingOutput
	ToMembershipIamBindingOutputWithContext(ctx context.Context) MembershipIamBindingOutput
}

func (*MembershipIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipIamBinding)(nil)).Elem()
}

func (i *MembershipIamBinding) ToMembershipIamBindingOutput() MembershipIamBindingOutput {
	return i.ToMembershipIamBindingOutputWithContext(context.Background())
}

func (i *MembershipIamBinding) ToMembershipIamBindingOutputWithContext(ctx context.Context) MembershipIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipIamBindingOutput)
}

// MembershipIamBindingArrayInput is an input type that accepts MembershipIamBindingArray and MembershipIamBindingArrayOutput values.
// You can construct a concrete instance of `MembershipIamBindingArrayInput` via:
//
//	MembershipIamBindingArray{ MembershipIamBindingArgs{...} }
type MembershipIamBindingArrayInput interface {
	pulumi.Input

	ToMembershipIamBindingArrayOutput() MembershipIamBindingArrayOutput
	ToMembershipIamBindingArrayOutputWithContext(context.Context) MembershipIamBindingArrayOutput
}

type MembershipIamBindingArray []MembershipIamBindingInput

func (MembershipIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MembershipIamBinding)(nil)).Elem()
}

func (i MembershipIamBindingArray) ToMembershipIamBindingArrayOutput() MembershipIamBindingArrayOutput {
	return i.ToMembershipIamBindingArrayOutputWithContext(context.Background())
}

func (i MembershipIamBindingArray) ToMembershipIamBindingArrayOutputWithContext(ctx context.Context) MembershipIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipIamBindingArrayOutput)
}

// MembershipIamBindingMapInput is an input type that accepts MembershipIamBindingMap and MembershipIamBindingMapOutput values.
// You can construct a concrete instance of `MembershipIamBindingMapInput` via:
//
//	MembershipIamBindingMap{ "key": MembershipIamBindingArgs{...} }
type MembershipIamBindingMapInput interface {
	pulumi.Input

	ToMembershipIamBindingMapOutput() MembershipIamBindingMapOutput
	ToMembershipIamBindingMapOutputWithContext(context.Context) MembershipIamBindingMapOutput
}

type MembershipIamBindingMap map[string]MembershipIamBindingInput

func (MembershipIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MembershipIamBinding)(nil)).Elem()
}

func (i MembershipIamBindingMap) ToMembershipIamBindingMapOutput() MembershipIamBindingMapOutput {
	return i.ToMembershipIamBindingMapOutputWithContext(context.Background())
}

func (i MembershipIamBindingMap) ToMembershipIamBindingMapOutputWithContext(ctx context.Context) MembershipIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipIamBindingMapOutput)
}

type MembershipIamBindingOutput struct{ *pulumi.OutputState }

func (MembershipIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipIamBinding)(nil)).Elem()
}

func (o MembershipIamBindingOutput) ToMembershipIamBindingOutput() MembershipIamBindingOutput {
	return o
}

func (o MembershipIamBindingOutput) ToMembershipIamBindingOutputWithContext(ctx context.Context) MembershipIamBindingOutput {
	return o
}

func (o MembershipIamBindingOutput) Condition() MembershipIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *MembershipIamBinding) MembershipIamBindingConditionPtrOutput { return v.Condition }).(MembershipIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o MembershipIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o MembershipIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MembershipIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o MembershipIamBindingOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipIamBinding) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o MembershipIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `gkehub.MembershipIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o MembershipIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type MembershipIamBindingArrayOutput struct{ *pulumi.OutputState }

func (MembershipIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MembershipIamBinding)(nil)).Elem()
}

func (o MembershipIamBindingArrayOutput) ToMembershipIamBindingArrayOutput() MembershipIamBindingArrayOutput {
	return o
}

func (o MembershipIamBindingArrayOutput) ToMembershipIamBindingArrayOutputWithContext(ctx context.Context) MembershipIamBindingArrayOutput {
	return o
}

func (o MembershipIamBindingArrayOutput) Index(i pulumi.IntInput) MembershipIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MembershipIamBinding {
		return vs[0].([]*MembershipIamBinding)[vs[1].(int)]
	}).(MembershipIamBindingOutput)
}

type MembershipIamBindingMapOutput struct{ *pulumi.OutputState }

func (MembershipIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MembershipIamBinding)(nil)).Elem()
}

func (o MembershipIamBindingMapOutput) ToMembershipIamBindingMapOutput() MembershipIamBindingMapOutput {
	return o
}

func (o MembershipIamBindingMapOutput) ToMembershipIamBindingMapOutputWithContext(ctx context.Context) MembershipIamBindingMapOutput {
	return o
}

func (o MembershipIamBindingMapOutput) MapIndex(k pulumi.StringInput) MembershipIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MembershipIamBinding {
		return vs[0].(map[string]*MembershipIamBinding)[vs[1].(string)]
	}).(MembershipIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipIamBindingInput)(nil)).Elem(), &MembershipIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipIamBindingArrayInput)(nil)).Elem(), MembershipIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipIamBindingMapInput)(nil)).Elem(), MembershipIamBindingMap{})
	pulumi.RegisterOutputType(MembershipIamBindingOutput{})
	pulumi.RegisterOutputType(MembershipIamBindingArrayOutput{})
	pulumi.RegisterOutputType(MembershipIamBindingMapOutput{})
}
