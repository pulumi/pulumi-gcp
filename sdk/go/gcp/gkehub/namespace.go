// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Namespace represents a namespace across the Fleet.
//
// To get more information about Namespace, see:
//
// * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes.namespaces)
// * How-to Guides
//   - [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
//
// ## Example Usage
//
// ## Import
//
// # Namespace can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:gkehub/namespace:Namespace default projects/{{project}}/locations/global/scopes/{{scope_id}}/namespaces/{{scope_namespace_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkehub/namespace:Namespace default {{project}}/{{scope_id}}/{{scope_namespace_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkehub/namespace:Namespace default {{scope_id}}/{{scope_namespace_id}}
//
// ```
type Namespace struct {
	pulumi.CustomResourceState

	// Time the Namespace was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time the Namespace was deleted in UTC.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Labels for this Namespace.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name for the namespace
	Name pulumi.StringOutput `pulumi:"name"`
	// Namespace-level cluster namespace labels. These labels are applied
	// to the related namespace of the member clusters bound to the parent
	// Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
	// resource) take precedence over Namespace-level labels if they share
	// a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels pulumi.StringMapOutput `pulumi:"namespaceLabels"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The name of the Scope instance.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Id of the scope
	//
	// ***
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// The client-provided identifier of the namespace.
	ScopeNamespaceId pulumi.StringOutput `pulumi:"scopeNamespaceId"`
	// State of the namespace resource.
	// Structure is documented below.
	States NamespaceStateTypeArrayOutput `pulumi:"states"`
	// Google-generated UUID for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the Namespace was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.ScopeNamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeNamespaceId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Namespace
	err := ctx.RegisterResource("gcp:gkehub/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("gcp:gkehub/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// Time the Namespace was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Time the Namespace was deleted in UTC.
	DeleteTime *string `pulumi:"deleteTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Labels for this Namespace.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the namespace
	Name *string `pulumi:"name"`
	// Namespace-level cluster namespace labels. These labels are applied
	// to the related namespace of the member clusters bound to the parent
	// Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
	// resource) take precedence over Namespace-level labels if they share
	// a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels map[string]string `pulumi:"namespaceLabels"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The name of the Scope instance.
	Scope *string `pulumi:"scope"`
	// Id of the scope
	//
	// ***
	ScopeId *string `pulumi:"scopeId"`
	// The client-provided identifier of the namespace.
	ScopeNamespaceId *string `pulumi:"scopeNamespaceId"`
	// State of the namespace resource.
	// Structure is documented below.
	States []NamespaceStateType `pulumi:"states"`
	// Google-generated UUID for this resource.
	Uid *string `pulumi:"uid"`
	// Time the Namespace was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type NamespaceState struct {
	// Time the Namespace was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Time the Namespace was deleted in UTC.
	DeleteTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Labels for this Namespace.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name for the namespace
	Name pulumi.StringPtrInput
	// Namespace-level cluster namespace labels. These labels are applied
	// to the related namespace of the member clusters bound to the parent
	// Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
	// resource) take precedence over Namespace-level labels if they share
	// a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels pulumi.StringMapInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The name of the Scope instance.
	Scope pulumi.StringPtrInput
	// Id of the scope
	//
	// ***
	ScopeId pulumi.StringPtrInput
	// The client-provided identifier of the namespace.
	ScopeNamespaceId pulumi.StringPtrInput
	// State of the namespace resource.
	// Structure is documented below.
	States NamespaceStateTypeArrayInput
	// Google-generated UUID for this resource.
	Uid pulumi.StringPtrInput
	// Time the Namespace was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// Labels for this Namespace.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Namespace-level cluster namespace labels. These labels are applied
	// to the related namespace of the member clusters bound to the parent
	// Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
	// resource) take precedence over Namespace-level labels if they share
	// a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels map[string]string `pulumi:"namespaceLabels"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the Scope instance.
	Scope string `pulumi:"scope"`
	// Id of the scope
	//
	// ***
	ScopeId string `pulumi:"scopeId"`
	// The client-provided identifier of the namespace.
	ScopeNamespaceId string `pulumi:"scopeNamespaceId"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// Labels for this Namespace.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Namespace-level cluster namespace labels. These labels are applied
	// to the related namespace of the member clusters bound to the parent
	// Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
	// resource) take precedence over Namespace-level labels if they share
	// a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels pulumi.StringMapInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the Scope instance.
	Scope pulumi.StringInput
	// Id of the scope
	//
	// ***
	ScopeId pulumi.StringInput
	// The client-provided identifier of the namespace.
	ScopeNamespaceId pulumi.StringInput
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}

type NamespaceInput interface {
	pulumi.Input

	ToNamespaceOutput() NamespaceOutput
	ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput
}

func (*Namespace) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (i *Namespace) ToNamespaceOutput() NamespaceOutput {
	return i.ToNamespaceOutputWithContext(context.Background())
}

func (i *Namespace) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceOutput)
}

// NamespaceArrayInput is an input type that accepts NamespaceArray and NamespaceArrayOutput values.
// You can construct a concrete instance of `NamespaceArrayInput` via:
//
//	NamespaceArray{ NamespaceArgs{...} }
type NamespaceArrayInput interface {
	pulumi.Input

	ToNamespaceArrayOutput() NamespaceArrayOutput
	ToNamespaceArrayOutputWithContext(context.Context) NamespaceArrayOutput
}

type NamespaceArray []NamespaceInput

func (NamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (i NamespaceArray) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return i.ToNamespaceArrayOutputWithContext(context.Background())
}

func (i NamespaceArray) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceArrayOutput)
}

// NamespaceMapInput is an input type that accepts NamespaceMap and NamespaceMapOutput values.
// You can construct a concrete instance of `NamespaceMapInput` via:
//
//	NamespaceMap{ "key": NamespaceArgs{...} }
type NamespaceMapInput interface {
	pulumi.Input

	ToNamespaceMapOutput() NamespaceMapOutput
	ToNamespaceMapOutputWithContext(context.Context) NamespaceMapOutput
}

type NamespaceMap map[string]NamespaceInput

func (NamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (i NamespaceMap) ToNamespaceMapOutput() NamespaceMapOutput {
	return i.ToNamespaceMapOutputWithContext(context.Background())
}

func (i NamespaceMap) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceMapOutput)
}

type NamespaceOutput struct{ *pulumi.OutputState }

func (NamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (o NamespaceOutput) ToNamespaceOutput() NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return o
}

// Time the Namespace was created in UTC.
func (o NamespaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time the Namespace was deleted in UTC.
func (o NamespaceOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o NamespaceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Labels for this Namespace.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o NamespaceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for the namespace
func (o NamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Namespace-level cluster namespace labels. These labels are applied
// to the related namespace of the member clusters bound to the parent
// Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
// resource) take precedence over Namespace-level labels if they share
// a key. Keys and values must be Kubernetes-conformant.
func (o NamespaceOutput) NamespaceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringMapOutput { return v.NamespaceLabels }).(pulumi.StringMapOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o NamespaceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o NamespaceOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The name of the Scope instance.
func (o NamespaceOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Id of the scope
//
// ***
func (o NamespaceOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// The client-provided identifier of the namespace.
func (o NamespaceOutput) ScopeNamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.ScopeNamespaceId }).(pulumi.StringOutput)
}

// State of the namespace resource.
// Structure is documented below.
func (o NamespaceOutput) States() NamespaceStateTypeArrayOutput {
	return o.ApplyT(func(v *Namespace) NamespaceStateTypeArrayOutput { return v.States }).(NamespaceStateTypeArrayOutput)
}

// Google-generated UUID for this resource.
func (o NamespaceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the Namespace was updated in UTC.
func (o NamespaceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type NamespaceArrayOutput struct{ *pulumi.OutputState }

func (NamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) Index(i pulumi.IntInput) NamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].([]*Namespace)[vs[1].(int)]
	}).(NamespaceOutput)
}

type NamespaceMapOutput struct{ *pulumi.OutputState }

func (NamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (o NamespaceMapOutput) ToNamespaceMapOutput() NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) MapIndex(k pulumi.StringInput) NamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].(map[string]*Namespace)[vs[1].(string)]
	}).(NamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceInput)(nil)).Elem(), &Namespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceArrayInput)(nil)).Elem(), NamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceMapInput)(nil)).Elem(), NamespaceMap{})
	pulumi.RegisterOutputType(NamespaceOutput{})
	pulumi.RegisterOutputType(NamespaceArrayOutput{})
	pulumi.RegisterOutputType(NamespaceMapOutput{})
}
