// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ## Import
//
// # MembershipRBACRoleBinding can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding default projects/{{project}}/locations/{{location}}/memberships/{{membership_id}}/rbacrolebindings/{{membership_rbac_role_binding_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding default {{project}}/{{location}}/{{membership_id}}/{{membership_rbac_role_binding_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding default {{location}}/{{membership_id}}/{{membership_rbac_role_binding_id}}
//
// ```
type MembershipRbacRoleBinding struct {
	pulumi.CustomResourceState

	// Time the RBAC Role Binding was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Location of the Membership
	Location pulumi.StringOutput `pulumi:"location"`
	// Id of the membership
	MembershipId pulumi.StringOutput `pulumi:"membershipId"`
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId pulumi.StringOutput `pulumi:"membershipRbacRoleBindingId"`
	// The resource name for the RBAC Role Binding
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Role to bind to the principal.
	// Structure is documented below.
	Role MembershipRbacRoleBindingRoleOutput `pulumi:"role"`
	// State of the RBAC Role Binding resource.
	// Structure is documented below.
	States MembershipRbacRoleBindingStateTypeArrayOutput `pulumi:"states"`
	// Google-generated UUID for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User pulumi.StringOutput `pulumi:"user"`
}

// NewMembershipRbacRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewMembershipRbacRoleBinding(ctx *pulumi.Context,
	name string, args *MembershipRbacRoleBindingArgs, opts ...pulumi.ResourceOption) (*MembershipRbacRoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MembershipId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipId'")
	}
	if args.MembershipRbacRoleBindingId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipRbacRoleBindingId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MembershipRbacRoleBinding
	err := ctx.RegisterResource("gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMembershipRbacRoleBinding gets an existing MembershipRbacRoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMembershipRbacRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MembershipRbacRoleBindingState, opts ...pulumi.ResourceOption) (*MembershipRbacRoleBinding, error) {
	var resource MembershipRbacRoleBinding
	err := ctx.ReadResource("gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MembershipRbacRoleBinding resources.
type membershipRbacRoleBindingState struct {
	// Time the RBAC Role Binding was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime *string `pulumi:"deleteTime"`
	// Location of the Membership
	Location *string `pulumi:"location"`
	// Id of the membership
	MembershipId *string `pulumi:"membershipId"`
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId *string `pulumi:"membershipRbacRoleBindingId"`
	// The resource name for the RBAC Role Binding
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Role to bind to the principal.
	// Structure is documented below.
	Role *MembershipRbacRoleBindingRole `pulumi:"role"`
	// State of the RBAC Role Binding resource.
	// Structure is documented below.
	States []MembershipRbacRoleBindingStateType `pulumi:"states"`
	// Google-generated UUID for this resource.
	Uid *string `pulumi:"uid"`
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User *string `pulumi:"user"`
}

type MembershipRbacRoleBindingState struct {
	// Time the RBAC Role Binding was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime pulumi.StringPtrInput
	// Location of the Membership
	Location pulumi.StringPtrInput
	// Id of the membership
	MembershipId pulumi.StringPtrInput
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId pulumi.StringPtrInput
	// The resource name for the RBAC Role Binding
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Role to bind to the principal.
	// Structure is documented below.
	Role MembershipRbacRoleBindingRolePtrInput
	// State of the RBAC Role Binding resource.
	// Structure is documented below.
	States MembershipRbacRoleBindingStateTypeArrayInput
	// Google-generated UUID for this resource.
	Uid pulumi.StringPtrInput
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime pulumi.StringPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User pulumi.StringPtrInput
}

func (MembershipRbacRoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipRbacRoleBindingState)(nil)).Elem()
}

type membershipRbacRoleBindingArgs struct {
	// Location of the Membership
	Location string `pulumi:"location"`
	// Id of the membership
	MembershipId string `pulumi:"membershipId"`
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId string `pulumi:"membershipRbacRoleBindingId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Role to bind to the principal.
	// Structure is documented below.
	Role MembershipRbacRoleBindingRole `pulumi:"role"`
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User string `pulumi:"user"`
}

// The set of arguments for constructing a MembershipRbacRoleBinding resource.
type MembershipRbacRoleBindingArgs struct {
	// Location of the Membership
	Location pulumi.StringInput
	// Id of the membership
	MembershipId pulumi.StringInput
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Role to bind to the principal.
	// Structure is documented below.
	Role MembershipRbacRoleBindingRoleInput
	// Principal that is be authorized in the cluster (at least of one the oneof
	// is required). Updating one will unset the other automatically.
	// user is the name of the user as seen by the kubernetes cluster, example
	// "alice" or "alice@domain.tld"
	User pulumi.StringInput
}

func (MembershipRbacRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipRbacRoleBindingArgs)(nil)).Elem()
}

type MembershipRbacRoleBindingInput interface {
	pulumi.Input

	ToMembershipRbacRoleBindingOutput() MembershipRbacRoleBindingOutput
	ToMembershipRbacRoleBindingOutputWithContext(ctx context.Context) MembershipRbacRoleBindingOutput
}

func (*MembershipRbacRoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipRbacRoleBinding)(nil)).Elem()
}

func (i *MembershipRbacRoleBinding) ToMembershipRbacRoleBindingOutput() MembershipRbacRoleBindingOutput {
	return i.ToMembershipRbacRoleBindingOutputWithContext(context.Background())
}

func (i *MembershipRbacRoleBinding) ToMembershipRbacRoleBindingOutputWithContext(ctx context.Context) MembershipRbacRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRbacRoleBindingOutput)
}

func (i *MembershipRbacRoleBinding) ToOutput(ctx context.Context) pulumix.Output[*MembershipRbacRoleBinding] {
	return pulumix.Output[*MembershipRbacRoleBinding]{
		OutputState: i.ToMembershipRbacRoleBindingOutputWithContext(ctx).OutputState,
	}
}

// MembershipRbacRoleBindingArrayInput is an input type that accepts MembershipRbacRoleBindingArray and MembershipRbacRoleBindingArrayOutput values.
// You can construct a concrete instance of `MembershipRbacRoleBindingArrayInput` via:
//
//	MembershipRbacRoleBindingArray{ MembershipRbacRoleBindingArgs{...} }
type MembershipRbacRoleBindingArrayInput interface {
	pulumi.Input

	ToMembershipRbacRoleBindingArrayOutput() MembershipRbacRoleBindingArrayOutput
	ToMembershipRbacRoleBindingArrayOutputWithContext(context.Context) MembershipRbacRoleBindingArrayOutput
}

type MembershipRbacRoleBindingArray []MembershipRbacRoleBindingInput

func (MembershipRbacRoleBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MembershipRbacRoleBinding)(nil)).Elem()
}

func (i MembershipRbacRoleBindingArray) ToMembershipRbacRoleBindingArrayOutput() MembershipRbacRoleBindingArrayOutput {
	return i.ToMembershipRbacRoleBindingArrayOutputWithContext(context.Background())
}

func (i MembershipRbacRoleBindingArray) ToMembershipRbacRoleBindingArrayOutputWithContext(ctx context.Context) MembershipRbacRoleBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRbacRoleBindingArrayOutput)
}

func (i MembershipRbacRoleBindingArray) ToOutput(ctx context.Context) pulumix.Output[[]*MembershipRbacRoleBinding] {
	return pulumix.Output[[]*MembershipRbacRoleBinding]{
		OutputState: i.ToMembershipRbacRoleBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// MembershipRbacRoleBindingMapInput is an input type that accepts MembershipRbacRoleBindingMap and MembershipRbacRoleBindingMapOutput values.
// You can construct a concrete instance of `MembershipRbacRoleBindingMapInput` via:
//
//	MembershipRbacRoleBindingMap{ "key": MembershipRbacRoleBindingArgs{...} }
type MembershipRbacRoleBindingMapInput interface {
	pulumi.Input

	ToMembershipRbacRoleBindingMapOutput() MembershipRbacRoleBindingMapOutput
	ToMembershipRbacRoleBindingMapOutputWithContext(context.Context) MembershipRbacRoleBindingMapOutput
}

type MembershipRbacRoleBindingMap map[string]MembershipRbacRoleBindingInput

func (MembershipRbacRoleBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MembershipRbacRoleBinding)(nil)).Elem()
}

func (i MembershipRbacRoleBindingMap) ToMembershipRbacRoleBindingMapOutput() MembershipRbacRoleBindingMapOutput {
	return i.ToMembershipRbacRoleBindingMapOutputWithContext(context.Background())
}

func (i MembershipRbacRoleBindingMap) ToMembershipRbacRoleBindingMapOutputWithContext(ctx context.Context) MembershipRbacRoleBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRbacRoleBindingMapOutput)
}

func (i MembershipRbacRoleBindingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MembershipRbacRoleBinding] {
	return pulumix.Output[map[string]*MembershipRbacRoleBinding]{
		OutputState: i.ToMembershipRbacRoleBindingMapOutputWithContext(ctx).OutputState,
	}
}

type MembershipRbacRoleBindingOutput struct{ *pulumi.OutputState }

func (MembershipRbacRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipRbacRoleBinding)(nil)).Elem()
}

func (o MembershipRbacRoleBindingOutput) ToMembershipRbacRoleBindingOutput() MembershipRbacRoleBindingOutput {
	return o
}

func (o MembershipRbacRoleBindingOutput) ToMembershipRbacRoleBindingOutputWithContext(ctx context.Context) MembershipRbacRoleBindingOutput {
	return o
}

func (o MembershipRbacRoleBindingOutput) ToOutput(ctx context.Context) pulumix.Output[*MembershipRbacRoleBinding] {
	return pulumix.Output[*MembershipRbacRoleBinding]{
		OutputState: o.OutputState,
	}
}

// Time the RBAC Role Binding was created in UTC.
func (o MembershipRbacRoleBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time the RBAC Role Binding was deleted in UTC.
func (o MembershipRbacRoleBindingOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Location of the Membership
func (o MembershipRbacRoleBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Id of the membership
func (o MembershipRbacRoleBindingOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// The client-provided identifier of the RBAC Role Binding.
func (o MembershipRbacRoleBindingOutput) MembershipRbacRoleBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.MembershipRbacRoleBindingId }).(pulumi.StringOutput)
}

// The resource name for the RBAC Role Binding
func (o MembershipRbacRoleBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o MembershipRbacRoleBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Role to bind to the principal.
// Structure is documented below.
func (o MembershipRbacRoleBindingOutput) Role() MembershipRbacRoleBindingRoleOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) MembershipRbacRoleBindingRoleOutput { return v.Role }).(MembershipRbacRoleBindingRoleOutput)
}

// State of the RBAC Role Binding resource.
// Structure is documented below.
func (o MembershipRbacRoleBindingOutput) States() MembershipRbacRoleBindingStateTypeArrayOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) MembershipRbacRoleBindingStateTypeArrayOutput { return v.States }).(MembershipRbacRoleBindingStateTypeArrayOutput)
}

// Google-generated UUID for this resource.
func (o MembershipRbacRoleBindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the RBAC Role Binding was updated in UTC.
func (o MembershipRbacRoleBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Principal that is be authorized in the cluster (at least of one the oneof
// is required). Updating one will unset the other automatically.
// user is the name of the user as seen by the kubernetes cluster, example
// "alice" or "alice@domain.tld"
func (o MembershipRbacRoleBindingOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type MembershipRbacRoleBindingArrayOutput struct{ *pulumi.OutputState }

func (MembershipRbacRoleBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MembershipRbacRoleBinding)(nil)).Elem()
}

func (o MembershipRbacRoleBindingArrayOutput) ToMembershipRbacRoleBindingArrayOutput() MembershipRbacRoleBindingArrayOutput {
	return o
}

func (o MembershipRbacRoleBindingArrayOutput) ToMembershipRbacRoleBindingArrayOutputWithContext(ctx context.Context) MembershipRbacRoleBindingArrayOutput {
	return o
}

func (o MembershipRbacRoleBindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MembershipRbacRoleBinding] {
	return pulumix.Output[[]*MembershipRbacRoleBinding]{
		OutputState: o.OutputState,
	}
}

func (o MembershipRbacRoleBindingArrayOutput) Index(i pulumi.IntInput) MembershipRbacRoleBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MembershipRbacRoleBinding {
		return vs[0].([]*MembershipRbacRoleBinding)[vs[1].(int)]
	}).(MembershipRbacRoleBindingOutput)
}

type MembershipRbacRoleBindingMapOutput struct{ *pulumi.OutputState }

func (MembershipRbacRoleBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MembershipRbacRoleBinding)(nil)).Elem()
}

func (o MembershipRbacRoleBindingMapOutput) ToMembershipRbacRoleBindingMapOutput() MembershipRbacRoleBindingMapOutput {
	return o
}

func (o MembershipRbacRoleBindingMapOutput) ToMembershipRbacRoleBindingMapOutputWithContext(ctx context.Context) MembershipRbacRoleBindingMapOutput {
	return o
}

func (o MembershipRbacRoleBindingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MembershipRbacRoleBinding] {
	return pulumix.Output[map[string]*MembershipRbacRoleBinding]{
		OutputState: o.OutputState,
	}
}

func (o MembershipRbacRoleBindingMapOutput) MapIndex(k pulumi.StringInput) MembershipRbacRoleBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MembershipRbacRoleBinding {
		return vs[0].(map[string]*MembershipRbacRoleBinding)[vs[1].(string)]
	}).(MembershipRbacRoleBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipRbacRoleBindingInput)(nil)).Elem(), &MembershipRbacRoleBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipRbacRoleBindingArrayInput)(nil)).Elem(), MembershipRbacRoleBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipRbacRoleBindingMapInput)(nil)).Elem(), MembershipRbacRoleBindingMap{})
	pulumi.RegisterOutputType(MembershipRbacRoleBindingOutput{})
	pulumi.RegisterOutputType(MembershipRbacRoleBindingArrayOutput{})
	pulumi.RegisterOutputType(MembershipRbacRoleBindingMapOutput{})
}
