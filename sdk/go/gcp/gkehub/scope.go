// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Scope represents a Scope in a Fleet.
//
// To get more information about Scope, see:
//
// * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes)
// * How-to Guides
//   - [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
//
// ## Example Usage
// ### Gkehub Scope Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewScope(ctx, "scope", &gkehub.ScopeArgs{
//				ScopeId: pulumi.String("tf-test-scope%{random_suffix}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Scope can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scope:Scope default projects/{{project}}/locations/global/scopes/{{scope_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scope:Scope default {{project}}/{{scope_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scope:Scope default {{scope_id}}
//
// ```
type Scope struct {
	pulumi.CustomResourceState

	// Time the Scope was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time the Scope was deleted in UTC.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// The unique identifier of the scope
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The client-provided identifier of the scope.
	//
	// ***
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// State of the scope resource.
	// Structure is documented below.
	States ScopeStateTypeArrayOutput `pulumi:"states"`
	// Google-generated UUID for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the Scope was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewScope registers a new resource with the given unique name, arguments, and options.
func NewScope(ctx *pulumi.Context,
	name string, args *ScopeArgs, opts ...pulumi.ResourceOption) (*Scope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Scope
	err := ctx.RegisterResource("gcp:gkehub/scope:Scope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScope gets an existing Scope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeState, opts ...pulumi.ResourceOption) (*Scope, error) {
	var resource Scope
	err := ctx.ReadResource("gcp:gkehub/scope:Scope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Scope resources.
type scopeState struct {
	// Time the Scope was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Time the Scope was deleted in UTC.
	DeleteTime *string `pulumi:"deleteTime"`
	// The unique identifier of the scope
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The client-provided identifier of the scope.
	//
	// ***
	ScopeId *string `pulumi:"scopeId"`
	// State of the scope resource.
	// Structure is documented below.
	States []ScopeStateType `pulumi:"states"`
	// Google-generated UUID for this resource.
	Uid *string `pulumi:"uid"`
	// Time the Scope was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type ScopeState struct {
	// Time the Scope was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Time the Scope was deleted in UTC.
	DeleteTime pulumi.StringPtrInput
	// The unique identifier of the scope
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The client-provided identifier of the scope.
	//
	// ***
	ScopeId pulumi.StringPtrInput
	// State of the scope resource.
	// Structure is documented below.
	States ScopeStateTypeArrayInput
	// Google-generated UUID for this resource.
	Uid pulumi.StringPtrInput
	// Time the Scope was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (ScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeState)(nil)).Elem()
}

type scopeArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The client-provided identifier of the scope.
	//
	// ***
	ScopeId string `pulumi:"scopeId"`
}

// The set of arguments for constructing a Scope resource.
type ScopeArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The client-provided identifier of the scope.
	//
	// ***
	ScopeId pulumi.StringInput
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeArgs)(nil)).Elem()
}

type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(ctx context.Context) ScopeOutput
}

func (*Scope) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (i *Scope) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i *Scope) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

func (i *Scope) ToOutput(ctx context.Context) pulumix.Output[*Scope] {
	return pulumix.Output[*Scope]{
		OutputState: i.ToScopeOutputWithContext(ctx).OutputState,
	}
}

// ScopeArrayInput is an input type that accepts ScopeArray and ScopeArrayOutput values.
// You can construct a concrete instance of `ScopeArrayInput` via:
//
//	ScopeArray{ ScopeArgs{...} }
type ScopeArrayInput interface {
	pulumi.Input

	ToScopeArrayOutput() ScopeArrayOutput
	ToScopeArrayOutputWithContext(context.Context) ScopeArrayOutput
}

type ScopeArray []ScopeInput

func (ScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Scope)(nil)).Elem()
}

func (i ScopeArray) ToScopeArrayOutput() ScopeArrayOutput {
	return i.ToScopeArrayOutputWithContext(context.Background())
}

func (i ScopeArray) ToScopeArrayOutputWithContext(ctx context.Context) ScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeArrayOutput)
}

func (i ScopeArray) ToOutput(ctx context.Context) pulumix.Output[[]*Scope] {
	return pulumix.Output[[]*Scope]{
		OutputState: i.ToScopeArrayOutputWithContext(ctx).OutputState,
	}
}

// ScopeMapInput is an input type that accepts ScopeMap and ScopeMapOutput values.
// You can construct a concrete instance of `ScopeMapInput` via:
//
//	ScopeMap{ "key": ScopeArgs{...} }
type ScopeMapInput interface {
	pulumi.Input

	ToScopeMapOutput() ScopeMapOutput
	ToScopeMapOutputWithContext(context.Context) ScopeMapOutput
}

type ScopeMap map[string]ScopeInput

func (ScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Scope)(nil)).Elem()
}

func (i ScopeMap) ToScopeMapOutput() ScopeMapOutput {
	return i.ToScopeMapOutputWithContext(context.Background())
}

func (i ScopeMap) ToScopeMapOutputWithContext(ctx context.Context) ScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeMapOutput)
}

func (i ScopeMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Scope] {
	return pulumix.Output[map[string]*Scope]{
		OutputState: i.ToScopeMapOutputWithContext(ctx).OutputState,
	}
}

type ScopeOutput struct{ *pulumi.OutputState }

func (ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (o ScopeOutput) ToScopeOutput() ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return o
}

func (o ScopeOutput) ToOutput(ctx context.Context) pulumix.Output[*Scope] {
	return pulumix.Output[*Scope]{
		OutputState: o.OutputState,
	}
}

// Time the Scope was created in UTC.
func (o ScopeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time the Scope was deleted in UTC.
func (o ScopeOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// The unique identifier of the scope
func (o ScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ScopeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The client-provided identifier of the scope.
//
// ***
func (o ScopeOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// State of the scope resource.
// Structure is documented below.
func (o ScopeOutput) States() ScopeStateTypeArrayOutput {
	return o.ApplyT(func(v *Scope) ScopeStateTypeArrayOutput { return v.States }).(ScopeStateTypeArrayOutput)
}

// Google-generated UUID for this resource.
func (o ScopeOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the Scope was updated in UTC.
func (o ScopeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ScopeArrayOutput struct{ *pulumi.OutputState }

func (ScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Scope)(nil)).Elem()
}

func (o ScopeArrayOutput) ToScopeArrayOutput() ScopeArrayOutput {
	return o
}

func (o ScopeArrayOutput) ToScopeArrayOutputWithContext(ctx context.Context) ScopeArrayOutput {
	return o
}

func (o ScopeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Scope] {
	return pulumix.Output[[]*Scope]{
		OutputState: o.OutputState,
	}
}

func (o ScopeArrayOutput) Index(i pulumi.IntInput) ScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Scope {
		return vs[0].([]*Scope)[vs[1].(int)]
	}).(ScopeOutput)
}

type ScopeMapOutput struct{ *pulumi.OutputState }

func (ScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Scope)(nil)).Elem()
}

func (o ScopeMapOutput) ToScopeMapOutput() ScopeMapOutput {
	return o
}

func (o ScopeMapOutput) ToScopeMapOutputWithContext(ctx context.Context) ScopeMapOutput {
	return o
}

func (o ScopeMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Scope] {
	return pulumix.Output[map[string]*Scope]{
		OutputState: o.OutputState,
	}
}

func (o ScopeMapOutput) MapIndex(k pulumi.StringInput) ScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Scope {
		return vs[0].(map[string]*Scope)[vs[1].(string)]
	}).(ScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeInput)(nil)).Elem(), &Scope{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeArrayInput)(nil)).Elem(), ScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeMapInput)(nil)).Elem(), ScopeMap{})
	pulumi.RegisterOutputType(ScopeOutput{})
	pulumi.RegisterOutputType(ScopeArrayOutput{})
	pulumi.RegisterOutputType(ScopeMapOutput{})
}
