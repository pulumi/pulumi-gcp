// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Three different resources help you manage your IAM policy for GKEHub Scope. Each of these resources serves a different use case:
//
// * `gkehub.ScopeIamPolicy`: Authoritative. Sets the IAM policy for the scope and replaces any existing policy already attached.
// * `gkehub.ScopeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the scope are preserved.
// * `gkehub.ScopeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the scope are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `gkehub.ScopeIamPolicy`: Retrieves the IAM policy for the scope
//
// > **Note:** `gkehub.ScopeIamPolicy` **cannot** be used in conjunction with `gkehub.ScopeIamBinding` and `gkehub.ScopeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `gkehub.ScopeIamBinding` resources **can be** used in conjunction with `gkehub.ScopeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_gke\_hub\_scope\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkehub"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gkehub.NewScopeIamPolicy(ctx, "policy", &gkehub.ScopeIamPolicyArgs{
//				Project:    pulumi.Any(google_gke_hub_scope.Scope.Project),
//				ScopeId:    pulumi.Any(google_gke_hub_scope.Scope.Scope_id),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_hub\_scope\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewScopeIamBinding(ctx, "binding", &gkehub.ScopeIamBindingArgs{
//				Project: pulumi.Any(google_gke_hub_scope.Scope.Project),
//				ScopeId: pulumi.Any(google_gke_hub_scope.Scope.Scope_id),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_gke\_hub\_scope\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkehub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkehub.NewScopeIamMember(ctx, "member", &gkehub.ScopeIamMemberArgs{
//				Project: pulumi.Any(google_gke_hub_scope.Scope.Project),
//				ScopeId: pulumi.Any(google_gke_hub_scope.Scope.Scope_id),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/global/scopes/{{scope_id}} * {{project}}/{{scope_id}} * {{scope_id}} Any variables not passed in the import command will be taken from the provider configuration. GKEHub scope IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamPolicy:ScopeIamPolicy editor "projects/{{project}}/locations/global/scopes/{{scope_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamPolicy:ScopeIamPolicy editor "projects/{{project}}/locations/global/scopes/{{scope_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:gkehub/scopeIamPolicy:ScopeIamPolicy editor projects/{{project}}/locations/global/scopes/{{scope_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ScopeIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
}

// NewScopeIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewScopeIamPolicy(ctx *pulumi.Context,
	name string, args *ScopeIamPolicyArgs, opts ...pulumi.ResourceOption) (*ScopeIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScopeIamPolicy
	err := ctx.RegisterResource("gcp:gkehub/scopeIamPolicy:ScopeIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopeIamPolicy gets an existing ScopeIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopeIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeIamPolicyState, opts ...pulumi.ResourceOption) (*ScopeIamPolicy, error) {
	var resource ScopeIamPolicy
	err := ctx.ReadResource("gcp:gkehub/scopeIamPolicy:ScopeIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopeIamPolicy resources.
type scopeIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	ScopeId *string `pulumi:"scopeId"`
}

type ScopeIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	ScopeId pulumi.StringPtrInput
}

func (ScopeIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeIamPolicyState)(nil)).Elem()
}

type scopeIamPolicyArgs struct {
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	ScopeId string  `pulumi:"scopeId"`
}

// The set of arguments for constructing a ScopeIamPolicy resource.
type ScopeIamPolicyArgs struct {
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	ScopeId pulumi.StringInput
}

func (ScopeIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeIamPolicyArgs)(nil)).Elem()
}

type ScopeIamPolicyInput interface {
	pulumi.Input

	ToScopeIamPolicyOutput() ScopeIamPolicyOutput
	ToScopeIamPolicyOutputWithContext(ctx context.Context) ScopeIamPolicyOutput
}

func (*ScopeIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeIamPolicy)(nil)).Elem()
}

func (i *ScopeIamPolicy) ToScopeIamPolicyOutput() ScopeIamPolicyOutput {
	return i.ToScopeIamPolicyOutputWithContext(context.Background())
}

func (i *ScopeIamPolicy) ToScopeIamPolicyOutputWithContext(ctx context.Context) ScopeIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamPolicyOutput)
}

func (i *ScopeIamPolicy) ToOutput(ctx context.Context) pulumix.Output[*ScopeIamPolicy] {
	return pulumix.Output[*ScopeIamPolicy]{
		OutputState: i.ToScopeIamPolicyOutputWithContext(ctx).OutputState,
	}
}

// ScopeIamPolicyArrayInput is an input type that accepts ScopeIamPolicyArray and ScopeIamPolicyArrayOutput values.
// You can construct a concrete instance of `ScopeIamPolicyArrayInput` via:
//
//	ScopeIamPolicyArray{ ScopeIamPolicyArgs{...} }
type ScopeIamPolicyArrayInput interface {
	pulumi.Input

	ToScopeIamPolicyArrayOutput() ScopeIamPolicyArrayOutput
	ToScopeIamPolicyArrayOutputWithContext(context.Context) ScopeIamPolicyArrayOutput
}

type ScopeIamPolicyArray []ScopeIamPolicyInput

func (ScopeIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopeIamPolicy)(nil)).Elem()
}

func (i ScopeIamPolicyArray) ToScopeIamPolicyArrayOutput() ScopeIamPolicyArrayOutput {
	return i.ToScopeIamPolicyArrayOutputWithContext(context.Background())
}

func (i ScopeIamPolicyArray) ToScopeIamPolicyArrayOutputWithContext(ctx context.Context) ScopeIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamPolicyArrayOutput)
}

func (i ScopeIamPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*ScopeIamPolicy] {
	return pulumix.Output[[]*ScopeIamPolicy]{
		OutputState: i.ToScopeIamPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// ScopeIamPolicyMapInput is an input type that accepts ScopeIamPolicyMap and ScopeIamPolicyMapOutput values.
// You can construct a concrete instance of `ScopeIamPolicyMapInput` via:
//
//	ScopeIamPolicyMap{ "key": ScopeIamPolicyArgs{...} }
type ScopeIamPolicyMapInput interface {
	pulumi.Input

	ToScopeIamPolicyMapOutput() ScopeIamPolicyMapOutput
	ToScopeIamPolicyMapOutputWithContext(context.Context) ScopeIamPolicyMapOutput
}

type ScopeIamPolicyMap map[string]ScopeIamPolicyInput

func (ScopeIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopeIamPolicy)(nil)).Elem()
}

func (i ScopeIamPolicyMap) ToScopeIamPolicyMapOutput() ScopeIamPolicyMapOutput {
	return i.ToScopeIamPolicyMapOutputWithContext(context.Background())
}

func (i ScopeIamPolicyMap) ToScopeIamPolicyMapOutputWithContext(ctx context.Context) ScopeIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeIamPolicyMapOutput)
}

func (i ScopeIamPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScopeIamPolicy] {
	return pulumix.Output[map[string]*ScopeIamPolicy]{
		OutputState: i.ToScopeIamPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type ScopeIamPolicyOutput struct{ *pulumi.OutputState }

func (ScopeIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeIamPolicy)(nil)).Elem()
}

func (o ScopeIamPolicyOutput) ToScopeIamPolicyOutput() ScopeIamPolicyOutput {
	return o
}

func (o ScopeIamPolicyOutput) ToScopeIamPolicyOutputWithContext(ctx context.Context) ScopeIamPolicyOutput {
	return o
}

func (o ScopeIamPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*ScopeIamPolicy] {
	return pulumix.Output[*ScopeIamPolicy]{
		OutputState: o.OutputState,
	}
}

// (Computed) The etag of the IAM policy.
func (o ScopeIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o ScopeIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o ScopeIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ScopeIamPolicyOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeIamPolicy) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

type ScopeIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (ScopeIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopeIamPolicy)(nil)).Elem()
}

func (o ScopeIamPolicyArrayOutput) ToScopeIamPolicyArrayOutput() ScopeIamPolicyArrayOutput {
	return o
}

func (o ScopeIamPolicyArrayOutput) ToScopeIamPolicyArrayOutputWithContext(ctx context.Context) ScopeIamPolicyArrayOutput {
	return o
}

func (o ScopeIamPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ScopeIamPolicy] {
	return pulumix.Output[[]*ScopeIamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ScopeIamPolicyArrayOutput) Index(i pulumi.IntInput) ScopeIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScopeIamPolicy {
		return vs[0].([]*ScopeIamPolicy)[vs[1].(int)]
	}).(ScopeIamPolicyOutput)
}

type ScopeIamPolicyMapOutput struct{ *pulumi.OutputState }

func (ScopeIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopeIamPolicy)(nil)).Elem()
}

func (o ScopeIamPolicyMapOutput) ToScopeIamPolicyMapOutput() ScopeIamPolicyMapOutput {
	return o
}

func (o ScopeIamPolicyMapOutput) ToScopeIamPolicyMapOutputWithContext(ctx context.Context) ScopeIamPolicyMapOutput {
	return o
}

func (o ScopeIamPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScopeIamPolicy] {
	return pulumix.Output[map[string]*ScopeIamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ScopeIamPolicyMapOutput) MapIndex(k pulumi.StringInput) ScopeIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScopeIamPolicy {
		return vs[0].(map[string]*ScopeIamPolicy)[vs[1].(string)]
	}).(ScopeIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamPolicyInput)(nil)).Elem(), &ScopeIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamPolicyArrayInput)(nil)).Elem(), ScopeIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeIamPolicyMapInput)(nil)).Elem(), ScopeIamPolicyMap{})
	pulumi.RegisterOutputType(ScopeIamPolicyOutput{})
	pulumi.RegisterOutputType(ScopeIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(ScopeIamPolicyMapOutput{})
}
