// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkeonprem

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Gkeonprem Bare Metal Node Pool Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkeonprem"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkeonprem.NewBareMetalCluster(ctx, "default-basic", &gkeonprem.BareMetalClusterArgs{
//				Location:               pulumi.String("us-west1"),
//				AdminClusterMembership: pulumi.String("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test"),
//				BareMetalVersion:       pulumi.String("1.12.3"),
//				NetworkConfig: &gkeonprem.BareMetalClusterNetworkConfigArgs{
//					IslandModeCidr: &gkeonprem.BareMetalClusterNetworkConfigIslandModeCidrArgs{
//						ServiceAddressCidrBlocks: pulumi.StringArray{
//							pulumi.String("172.26.0.0/16"),
//						},
//						PodAddressCidrBlocks: pulumi.StringArray{
//							pulumi.String("10.240.0.0/13"),
//						},
//					},
//				},
//				ControlPlane: &gkeonprem.BareMetalClusterControlPlaneArgs{
//					ControlPlaneNodePoolConfig: &gkeonprem.BareMetalClusterControlPlaneControlPlaneNodePoolConfigArgs{
//						NodePoolConfig: &gkeonprem.BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigArgs{
//							Labels:          nil,
//							OperatingSystem: pulumi.String("LINUX"),
//							NodeConfigs: gkeonprem.BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigArray{
//								&gkeonprem.BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigArgs{
//									Labels: nil,
//									NodeIp: pulumi.String("10.200.0.9"),
//								},
//							},
//						},
//					},
//				},
//				LoadBalancer: &gkeonprem.BareMetalClusterLoadBalancerArgs{
//					PortConfig: &gkeonprem.BareMetalClusterLoadBalancerPortConfigArgs{
//						ControlPlaneLoadBalancerPort: pulumi.Int(443),
//					},
//					VipConfig: &gkeonprem.BareMetalClusterLoadBalancerVipConfigArgs{
//						ControlPlaneVip: pulumi.String("10.200.0.13"),
//						IngressVip:      pulumi.String("10.200.0.14"),
//					},
//					MetalLbConfig: &gkeonprem.BareMetalClusterLoadBalancerMetalLbConfigArgs{
//						AddressPools: gkeonprem.BareMetalClusterLoadBalancerMetalLbConfigAddressPoolArray{
//							&gkeonprem.BareMetalClusterLoadBalancerMetalLbConfigAddressPoolArgs{
//								Pool: pulumi.String("pool1"),
//								Addresses: pulumi.StringArray{
//									pulumi.String("10.200.0.14/32"),
//									pulumi.String("10.200.0.15/32"),
//									pulumi.String("10.200.0.16/32"),
//									pulumi.String("10.200.0.17/32"),
//									pulumi.String("10.200.0.18/32"),
//									pulumi.String("fd00:1::f/128"),
//									pulumi.String("fd00:1::10/128"),
//									pulumi.String("fd00:1::11/128"),
//									pulumi.String("fd00:1::12/128"),
//								},
//							},
//						},
//					},
//				},
//				Storage: &gkeonprem.BareMetalClusterStorageArgs{
//					LvpShareConfig: &gkeonprem.BareMetalClusterStorageLvpShareConfigArgs{
//						LvpConfig: &gkeonprem.BareMetalClusterStorageLvpShareConfigLvpConfigArgs{
//							Path:         pulumi.String("/mnt/localpv-share"),
//							StorageClass: pulumi.String("local-shared"),
//						},
//						SharedPathPvCount: pulumi.Int(5),
//					},
//					LvpNodeMountsConfig: &gkeonprem.BareMetalClusterStorageLvpNodeMountsConfigArgs{
//						Path:         pulumi.String("/mnt/localpv-disk"),
//						StorageClass: pulumi.String("local-disks"),
//					},
//				},
//				SecurityConfig: &gkeonprem.BareMetalClusterSecurityConfigArgs{
//					Authorization: &gkeonprem.BareMetalClusterSecurityConfigAuthorizationArgs{
//						AdminUsers: gkeonprem.BareMetalClusterSecurityConfigAuthorizationAdminUserArray{
//							&gkeonprem.BareMetalClusterSecurityConfigAuthorizationAdminUserArgs{
//								Username: pulumi.String("admin@hashicorptest.com"),
//							},
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = gkeonprem.NewBareMetalNodePool(ctx, "nodepool-basic", &gkeonprem.BareMetalNodePoolArgs{
//				BareMetalCluster: default_basic.Name,
//				Location:         pulumi.String("us-west1"),
//				NodePoolConfig: &gkeonprem.BareMetalNodePoolNodePoolConfigArgs{
//					OperatingSystem: pulumi.String("LINUX"),
//					NodeConfigs: gkeonprem.BareMetalNodePoolNodePoolConfigNodeConfigArray{
//						&gkeonprem.BareMetalNodePoolNodePoolConfigNodeConfigArgs{
//							NodeIp: pulumi.String("10.200.0.11"),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Gkeonprem Bare Metal Node Pool Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gkeonprem"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkeonprem.NewBareMetalCluster(ctx, "default-full", &gkeonprem.BareMetalClusterArgs{
//				Location:               pulumi.String("us-west1"),
//				AdminClusterMembership: pulumi.String("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test"),
//				BareMetalVersion:       pulumi.String("1.12.3"),
//				NetworkConfig: &gkeonprem.BareMetalClusterNetworkConfigArgs{
//					IslandModeCidr: &gkeonprem.BareMetalClusterNetworkConfigIslandModeCidrArgs{
//						ServiceAddressCidrBlocks: pulumi.StringArray{
//							pulumi.String("172.26.0.0/16"),
//						},
//						PodAddressCidrBlocks: pulumi.StringArray{
//							pulumi.String("10.240.0.0/13"),
//						},
//					},
//				},
//				ControlPlane: &gkeonprem.BareMetalClusterControlPlaneArgs{
//					ControlPlaneNodePoolConfig: &gkeonprem.BareMetalClusterControlPlaneControlPlaneNodePoolConfigArgs{
//						NodePoolConfig: &gkeonprem.BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigArgs{
//							Labels:          nil,
//							OperatingSystem: pulumi.String("LINUX"),
//							NodeConfigs: gkeonprem.BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigArray{
//								&gkeonprem.BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigArgs{
//									Labels: nil,
//									NodeIp: pulumi.String("10.200.0.9"),
//								},
//							},
//						},
//					},
//				},
//				LoadBalancer: &gkeonprem.BareMetalClusterLoadBalancerArgs{
//					PortConfig: &gkeonprem.BareMetalClusterLoadBalancerPortConfigArgs{
//						ControlPlaneLoadBalancerPort: pulumi.Int(443),
//					},
//					VipConfig: &gkeonprem.BareMetalClusterLoadBalancerVipConfigArgs{
//						ControlPlaneVip: pulumi.String("10.200.0.13"),
//						IngressVip:      pulumi.String("10.200.0.14"),
//					},
//					MetalLbConfig: &gkeonprem.BareMetalClusterLoadBalancerMetalLbConfigArgs{
//						AddressPools: gkeonprem.BareMetalClusterLoadBalancerMetalLbConfigAddressPoolArray{
//							&gkeonprem.BareMetalClusterLoadBalancerMetalLbConfigAddressPoolArgs{
//								Pool: pulumi.String("pool1"),
//								Addresses: pulumi.StringArray{
//									pulumi.String("10.200.0.14/32"),
//									pulumi.String("10.200.0.15/32"),
//									pulumi.String("10.200.0.16/32"),
//									pulumi.String("10.200.0.17/32"),
//									pulumi.String("10.200.0.18/32"),
//									pulumi.String("fd00:1::f/128"),
//									pulumi.String("fd00:1::10/128"),
//									pulumi.String("fd00:1::11/128"),
//									pulumi.String("fd00:1::12/128"),
//								},
//							},
//						},
//					},
//				},
//				Storage: &gkeonprem.BareMetalClusterStorageArgs{
//					LvpShareConfig: &gkeonprem.BareMetalClusterStorageLvpShareConfigArgs{
//						LvpConfig: &gkeonprem.BareMetalClusterStorageLvpShareConfigLvpConfigArgs{
//							Path:         pulumi.String("/mnt/localpv-share"),
//							StorageClass: pulumi.String("local-shared"),
//						},
//						SharedPathPvCount: pulumi.Int(5),
//					},
//					LvpNodeMountsConfig: &gkeonprem.BareMetalClusterStorageLvpNodeMountsConfigArgs{
//						Path:         pulumi.String("/mnt/localpv-disk"),
//						StorageClass: pulumi.String("local-disks"),
//					},
//				},
//				SecurityConfig: &gkeonprem.BareMetalClusterSecurityConfigArgs{
//					Authorization: &gkeonprem.BareMetalClusterSecurityConfigAuthorizationArgs{
//						AdminUsers: gkeonprem.BareMetalClusterSecurityConfigAuthorizationAdminUserArray{
//							&gkeonprem.BareMetalClusterSecurityConfigAuthorizationAdminUserArgs{
//								Username: pulumi.String("admin@hashicorptest.com"),
//							},
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = gkeonprem.NewBareMetalNodePool(ctx, "nodepool-full", &gkeonprem.BareMetalNodePoolArgs{
//				DisplayName:      pulumi.String("test-name"),
//				BareMetalCluster: default_full.Name,
//				Location:         pulumi.String("us-west1"),
//				Annotations:      nil,
//				NodePoolConfig: &gkeonprem.BareMetalNodePoolNodePoolConfigArgs{
//					OperatingSystem: pulumi.String("LINUX"),
//					Labels:          nil,
//					NodeConfigs: gkeonprem.BareMetalNodePoolNodePoolConfigNodeConfigArray{
//						&gkeonprem.BareMetalNodePoolNodePoolConfigNodeConfigArgs{
//							NodeIp: pulumi.String("10.200.0.11"),
//							Labels: nil,
//						},
//					},
//					Taints: gkeonprem.BareMetalNodePoolNodePoolConfigTaintArray{
//						&gkeonprem.BareMetalNodePoolNodePoolConfigTaintArgs{
//							Key:    pulumi.String("test-key"),
//							Value:  pulumi.String("test-value"),
//							Effect: pulumi.String("NO_EXECUTE"),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # BareMetalNodePool can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool default projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bare_metal_cluster}}/bareMetalNodePools/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool default {{project}}/{{location}}/{{bare_metal_cluster}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool default {{location}}/{{bare_metal_cluster}}/{{name}}
//
// ```
type BareMetalNodePool struct {
	pulumi.CustomResourceState

	// Annotations on the Bare Metal Node Pool.
	// This field has the same restrictions as Kubernetes annotations.
	// The total size of all keys and values combined is limited to 256k.
	// Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/).
	// Prefix must be a DNS subdomain.
	// Name must be 63 characters or less, begin and end with alphanumerics,
	// with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The cluster this node pool belongs to.
	BareMetalCluster pulumi.StringOutput `pulumi:"bareMetalCluster"`
	// The time the cluster was created, in RFC3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The time the cluster was deleted, in RFC3339 text format.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// The display name for the Bare Metal Node Pool.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// Allows clients to perform consistent read-modify-writes
	// through optimistic concurrency control.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The bare metal node pool name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Node pool configuration.
	// Structure is documented below.
	NodePoolConfig BareMetalNodePoolNodePoolConfigOutput `pulumi:"nodePoolConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// If set, there are currently changes in flight to the Bare Metal User Cluster.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// (Output)
	// The lifecycle state of the condition.
	State pulumi.StringOutput `pulumi:"state"`
	// Specifies detailed node pool status.
	// Structure is documented below.
	Statuses BareMetalNodePoolStatusArrayOutput `pulumi:"statuses"`
	// The unique identifier of the Bare Metal Node Pool.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBareMetalNodePool registers a new resource with the given unique name, arguments, and options.
func NewBareMetalNodePool(ctx *pulumi.Context,
	name string, args *BareMetalNodePoolArgs, opts ...pulumi.ResourceOption) (*BareMetalNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BareMetalCluster == nil {
		return nil, errors.New("invalid value for required argument 'BareMetalCluster'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.NodePoolConfig == nil {
		return nil, errors.New("invalid value for required argument 'NodePoolConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BareMetalNodePool
	err := ctx.RegisterResource("gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBareMetalNodePool gets an existing BareMetalNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBareMetalNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BareMetalNodePoolState, opts ...pulumi.ResourceOption) (*BareMetalNodePool, error) {
	var resource BareMetalNodePool
	err := ctx.ReadResource("gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BareMetalNodePool resources.
type bareMetalNodePoolState struct {
	// Annotations on the Bare Metal Node Pool.
	// This field has the same restrictions as Kubernetes annotations.
	// The total size of all keys and values combined is limited to 256k.
	// Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/).
	// Prefix must be a DNS subdomain.
	// Name must be 63 characters or less, begin and end with alphanumerics,
	// with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `pulumi:"annotations"`
	// The cluster this node pool belongs to.
	BareMetalCluster *string `pulumi:"bareMetalCluster"`
	// The time the cluster was created, in RFC3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// The time the cluster was deleted, in RFC3339 text format.
	DeleteTime *string `pulumi:"deleteTime"`
	// The display name for the Bare Metal Node Pool.
	DisplayName *string `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// Allows clients to perform consistent read-modify-writes
	// through optimistic concurrency control.
	Etag *string `pulumi:"etag"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The bare metal node pool name.
	Name *string `pulumi:"name"`
	// Node pool configuration.
	// Structure is documented below.
	NodePoolConfig *BareMetalNodePoolNodePoolConfig `pulumi:"nodePoolConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// If set, there are currently changes in flight to the Bare Metal User Cluster.
	Reconciling *bool `pulumi:"reconciling"`
	// (Output)
	// The lifecycle state of the condition.
	State *string `pulumi:"state"`
	// Specifies detailed node pool status.
	// Structure is documented below.
	Statuses []BareMetalNodePoolStatus `pulumi:"statuses"`
	// The unique identifier of the Bare Metal Node Pool.
	Uid *string `pulumi:"uid"`
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime *string `pulumi:"updateTime"`
}

type BareMetalNodePoolState struct {
	// Annotations on the Bare Metal Node Pool.
	// This field has the same restrictions as Kubernetes annotations.
	// The total size of all keys and values combined is limited to 256k.
	// Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/).
	// Prefix must be a DNS subdomain.
	// Name must be 63 characters or less, begin and end with alphanumerics,
	// with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations pulumi.StringMapInput
	// The cluster this node pool belongs to.
	BareMetalCluster pulumi.StringPtrInput
	// The time the cluster was created, in RFC3339 text format.
	CreateTime pulumi.StringPtrInput
	// The time the cluster was deleted, in RFC3339 text format.
	DeleteTime pulumi.StringPtrInput
	// The display name for the Bare Metal Node Pool.
	DisplayName pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// Allows clients to perform consistent read-modify-writes
	// through optimistic concurrency control.
	Etag pulumi.StringPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The bare metal node pool name.
	Name pulumi.StringPtrInput
	// Node pool configuration.
	// Structure is documented below.
	NodePoolConfig BareMetalNodePoolNodePoolConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// If set, there are currently changes in flight to the Bare Metal User Cluster.
	Reconciling pulumi.BoolPtrInput
	// (Output)
	// The lifecycle state of the condition.
	State pulumi.StringPtrInput
	// Specifies detailed node pool status.
	// Structure is documented below.
	Statuses BareMetalNodePoolStatusArrayInput
	// The unique identifier of the Bare Metal Node Pool.
	Uid pulumi.StringPtrInput
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime pulumi.StringPtrInput
}

func (BareMetalNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*bareMetalNodePoolState)(nil)).Elem()
}

type bareMetalNodePoolArgs struct {
	// Annotations on the Bare Metal Node Pool.
	// This field has the same restrictions as Kubernetes annotations.
	// The total size of all keys and values combined is limited to 256k.
	// Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/).
	// Prefix must be a DNS subdomain.
	// Name must be 63 characters or less, begin and end with alphanumerics,
	// with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `pulumi:"annotations"`
	// The cluster this node pool belongs to.
	BareMetalCluster string `pulumi:"bareMetalCluster"`
	// The display name for the Bare Metal Node Pool.
	DisplayName *string `pulumi:"displayName"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The bare metal node pool name.
	Name *string `pulumi:"name"`
	// Node pool configuration.
	// Structure is documented below.
	NodePoolConfig BareMetalNodePoolNodePoolConfig `pulumi:"nodePoolConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a BareMetalNodePool resource.
type BareMetalNodePoolArgs struct {
	// Annotations on the Bare Metal Node Pool.
	// This field has the same restrictions as Kubernetes annotations.
	// The total size of all keys and values combined is limited to 256k.
	// Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/).
	// Prefix must be a DNS subdomain.
	// Name must be 63 characters or less, begin and end with alphanumerics,
	// with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations pulumi.StringMapInput
	// The cluster this node pool belongs to.
	BareMetalCluster pulumi.StringInput
	// The display name for the Bare Metal Node Pool.
	DisplayName pulumi.StringPtrInput
	// The location of the resource.
	Location pulumi.StringInput
	// The bare metal node pool name.
	Name pulumi.StringPtrInput
	// Node pool configuration.
	// Structure is documented below.
	NodePoolConfig BareMetalNodePoolNodePoolConfigInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (BareMetalNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bareMetalNodePoolArgs)(nil)).Elem()
}

type BareMetalNodePoolInput interface {
	pulumi.Input

	ToBareMetalNodePoolOutput() BareMetalNodePoolOutput
	ToBareMetalNodePoolOutputWithContext(ctx context.Context) BareMetalNodePoolOutput
}

func (*BareMetalNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalNodePool)(nil)).Elem()
}

func (i *BareMetalNodePool) ToBareMetalNodePoolOutput() BareMetalNodePoolOutput {
	return i.ToBareMetalNodePoolOutputWithContext(context.Background())
}

func (i *BareMetalNodePool) ToBareMetalNodePoolOutputWithContext(ctx context.Context) BareMetalNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodePoolOutput)
}

// BareMetalNodePoolArrayInput is an input type that accepts BareMetalNodePoolArray and BareMetalNodePoolArrayOutput values.
// You can construct a concrete instance of `BareMetalNodePoolArrayInput` via:
//
//	BareMetalNodePoolArray{ BareMetalNodePoolArgs{...} }
type BareMetalNodePoolArrayInput interface {
	pulumi.Input

	ToBareMetalNodePoolArrayOutput() BareMetalNodePoolArrayOutput
	ToBareMetalNodePoolArrayOutputWithContext(context.Context) BareMetalNodePoolArrayOutput
}

type BareMetalNodePoolArray []BareMetalNodePoolInput

func (BareMetalNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BareMetalNodePool)(nil)).Elem()
}

func (i BareMetalNodePoolArray) ToBareMetalNodePoolArrayOutput() BareMetalNodePoolArrayOutput {
	return i.ToBareMetalNodePoolArrayOutputWithContext(context.Background())
}

func (i BareMetalNodePoolArray) ToBareMetalNodePoolArrayOutputWithContext(ctx context.Context) BareMetalNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodePoolArrayOutput)
}

// BareMetalNodePoolMapInput is an input type that accepts BareMetalNodePoolMap and BareMetalNodePoolMapOutput values.
// You can construct a concrete instance of `BareMetalNodePoolMapInput` via:
//
//	BareMetalNodePoolMap{ "key": BareMetalNodePoolArgs{...} }
type BareMetalNodePoolMapInput interface {
	pulumi.Input

	ToBareMetalNodePoolMapOutput() BareMetalNodePoolMapOutput
	ToBareMetalNodePoolMapOutputWithContext(context.Context) BareMetalNodePoolMapOutput
}

type BareMetalNodePoolMap map[string]BareMetalNodePoolInput

func (BareMetalNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BareMetalNodePool)(nil)).Elem()
}

func (i BareMetalNodePoolMap) ToBareMetalNodePoolMapOutput() BareMetalNodePoolMapOutput {
	return i.ToBareMetalNodePoolMapOutputWithContext(context.Background())
}

func (i BareMetalNodePoolMap) ToBareMetalNodePoolMapOutputWithContext(ctx context.Context) BareMetalNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodePoolMapOutput)
}

type BareMetalNodePoolOutput struct{ *pulumi.OutputState }

func (BareMetalNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalNodePool)(nil)).Elem()
}

func (o BareMetalNodePoolOutput) ToBareMetalNodePoolOutput() BareMetalNodePoolOutput {
	return o
}

func (o BareMetalNodePoolOutput) ToBareMetalNodePoolOutputWithContext(ctx context.Context) BareMetalNodePoolOutput {
	return o
}

// Annotations on the Bare Metal Node Pool.
// This field has the same restrictions as Kubernetes annotations.
// The total size of all keys and values combined is limited to 256k.
// Key can have 2 segments: prefix (optional) and name (required),
// separated by a slash (/).
// Prefix must be a DNS subdomain.
// Name must be 63 characters or less, begin and end with alphanumerics,
// with dashes (-), underscores (_), dots (.), and alphanumerics between.
func (o BareMetalNodePoolOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The cluster this node pool belongs to.
func (o BareMetalNodePoolOutput) BareMetalCluster() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.BareMetalCluster }).(pulumi.StringOutput)
}

// The time the cluster was created, in RFC3339 text format.
func (o BareMetalNodePoolOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The time the cluster was deleted, in RFC3339 text format.
func (o BareMetalNodePoolOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// The display name for the Bare Metal Node Pool.
func (o BareMetalNodePoolOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// This checksum is computed by the server based on the value of other
// fields, and may be sent on update and delete requests to ensure the
// client has an up-to-date value before proceeding.
// Allows clients to perform consistent read-modify-writes
// through optimistic concurrency control.
func (o BareMetalNodePoolOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the resource.
func (o BareMetalNodePoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The bare metal node pool name.
func (o BareMetalNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Node pool configuration.
// Structure is documented below.
func (o BareMetalNodePoolOutput) NodePoolConfig() BareMetalNodePoolNodePoolConfigOutput {
	return o.ApplyT(func(v *BareMetalNodePool) BareMetalNodePoolNodePoolConfigOutput { return v.NodePoolConfig }).(BareMetalNodePoolNodePoolConfigOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BareMetalNodePoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the Bare Metal User Cluster.
func (o BareMetalNodePoolOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// (Output)
// The lifecycle state of the condition.
func (o BareMetalNodePoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Specifies detailed node pool status.
// Structure is documented below.
func (o BareMetalNodePoolOutput) Statuses() BareMetalNodePoolStatusArrayOutput {
	return o.ApplyT(func(v *BareMetalNodePool) BareMetalNodePoolStatusArrayOutput { return v.Statuses }).(BareMetalNodePoolStatusArrayOutput)
}

// The unique identifier of the Bare Metal Node Pool.
func (o BareMetalNodePoolOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time the cluster was last updated, in RFC3339 text format.
func (o BareMetalNodePoolOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalNodePool) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type BareMetalNodePoolArrayOutput struct{ *pulumi.OutputState }

func (BareMetalNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BareMetalNodePool)(nil)).Elem()
}

func (o BareMetalNodePoolArrayOutput) ToBareMetalNodePoolArrayOutput() BareMetalNodePoolArrayOutput {
	return o
}

func (o BareMetalNodePoolArrayOutput) ToBareMetalNodePoolArrayOutputWithContext(ctx context.Context) BareMetalNodePoolArrayOutput {
	return o
}

func (o BareMetalNodePoolArrayOutput) Index(i pulumi.IntInput) BareMetalNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BareMetalNodePool {
		return vs[0].([]*BareMetalNodePool)[vs[1].(int)]
	}).(BareMetalNodePoolOutput)
}

type BareMetalNodePoolMapOutput struct{ *pulumi.OutputState }

func (BareMetalNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BareMetalNodePool)(nil)).Elem()
}

func (o BareMetalNodePoolMapOutput) ToBareMetalNodePoolMapOutput() BareMetalNodePoolMapOutput {
	return o
}

func (o BareMetalNodePoolMapOutput) ToBareMetalNodePoolMapOutputWithContext(ctx context.Context) BareMetalNodePoolMapOutput {
	return o
}

func (o BareMetalNodePoolMapOutput) MapIndex(k pulumi.StringInput) BareMetalNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BareMetalNodePool {
		return vs[0].(map[string]*BareMetalNodePool)[vs[1].(string)]
	}).(BareMetalNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodePoolInput)(nil)).Elem(), &BareMetalNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodePoolArrayInput)(nil)).Elem(), BareMetalNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodePoolMapInput)(nil)).Elem(), BareMetalNodePoolMap{})
	pulumi.RegisterOutputType(BareMetalNodePoolOutput{})
	pulumi.RegisterOutputType(BareMetalNodePoolArrayOutput{})
	pulumi.RegisterOutputType(BareMetalNodePoolMapOutput{})
}
