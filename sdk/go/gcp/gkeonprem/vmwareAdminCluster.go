// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gkeonprem

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Gkeonprem Vmware Admin Cluster Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkeonprem"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkeonprem.NewVmwareAdminCluster(ctx, "admin-cluster-basic", &gkeonprem.VmwareAdminClusterArgs{
//				Name:                       pulumi.String("basic"),
//				Location:                   pulumi.String("us-west1"),
//				Description:                pulumi.String("test admin cluster"),
//				BootstrapClusterMembership: pulumi.String("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test"),
//				OnPremVersion:              pulumi.String("1.31.0-gke.35"),
//				ImageType:                  pulumi.String("ubuntu_containerd"),
//				Vcenter: &gkeonprem.VmwareAdminClusterVcenterArgs{
//					ResourcePool: pulumi.String("test resource pool"),
//					Datastore:    pulumi.String("test data store"),
//					Datacenter:   pulumi.String("test data center"),
//					Cluster:      pulumi.String("test cluster"),
//					Folder:       pulumi.String("test folder"),
//					CaCertData:   pulumi.String("test ca cert data"),
//					Address:      pulumi.String("10.0.0.1"),
//					DataDisk:     pulumi.String("test data disk"),
//				},
//				NetworkConfig: &gkeonprem.VmwareAdminClusterNetworkConfigArgs{
//					ServiceAddressCidrBlocks: pulumi.StringArray{
//						pulumi.String("10.96.0.0/12"),
//					},
//					PodAddressCidrBlocks: pulumi.StringArray{
//						pulumi.String("192.168.0.0/16"),
//					},
//					DhcpIpConfig: &gkeonprem.VmwareAdminClusterNetworkConfigDhcpIpConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//				ControlPlaneNode: &gkeonprem.VmwareAdminClusterControlPlaneNodeArgs{
//					Cpus:   pulumi.Int(4),
//					Memory: pulumi.Int(8192),
//				},
//				LoadBalancer: &gkeonprem.VmwareAdminClusterLoadBalancerArgs{
//					VipConfig: &gkeonprem.VmwareAdminClusterLoadBalancerVipConfigArgs{
//						ControlPlaneVip: pulumi.String("10.251.133.5"),
//						AddonsVip:       pulumi.String("10.251.135.19"),
//					},
//					F5Config: &gkeonprem.VmwareAdminClusterLoadBalancerF5ConfigArgs{
//						Address:   pulumi.String("10.251.135.22"),
//						Partition: pulumi.String("test-parition"),
//						SnatPool:  pulumi.String("test-snat-pool"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Gkeonprem Vmware Admin Cluster Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkeonprem"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkeonprem.NewVmwareAdminCluster(ctx, "admin-cluster-full", &gkeonprem.VmwareAdminClusterArgs{
//				Name:                       pulumi.String("full"),
//				Location:                   pulumi.String("us-west1"),
//				Description:                pulumi.String("test admin cluster"),
//				BootstrapClusterMembership: pulumi.String("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test"),
//				OnPremVersion:              pulumi.String("1.31.0-gke.35"),
//				ImageType:                  pulumi.String("ubuntu_containerd"),
//				Annotations:                pulumi.StringMap{},
//				Vcenter: &gkeonprem.VmwareAdminClusterVcenterArgs{
//					ResourcePool:      pulumi.String("test resource pool"),
//					Datastore:         pulumi.String("test data store"),
//					Datacenter:        pulumi.String("test data center"),
//					Cluster:           pulumi.String("test cluster"),
//					Folder:            pulumi.String("test folder"),
//					CaCertData:        pulumi.String("test ca cert data"),
//					Address:           pulumi.String("10.0.0.1"),
//					DataDisk:          pulumi.String("test data disk"),
//					StoragePolicyName: pulumi.String("storage_policy_name"),
//				},
//				NetworkConfig: &gkeonprem.VmwareAdminClusterNetworkConfigArgs{
//					ServiceAddressCidrBlocks: pulumi.StringArray{
//						pulumi.String("10.96.0.0/12"),
//					},
//					PodAddressCidrBlocks: pulumi.StringArray{
//						pulumi.String("192.168.0.0/16"),
//					},
//					HaControlPlaneConfig: &gkeonprem.VmwareAdminClusterNetworkConfigHaControlPlaneConfigArgs{
//						ControlPlaneIpBlock: &gkeonprem.VmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockArgs{
//							Gateway: pulumi.String("10.0.0.3"),
//							Ips: gkeonprem.VmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIpArray{
//								&gkeonprem.VmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIpArgs{
//									Hostname: pulumi.String("hostname"),
//									Ip:       pulumi.String("10.0.0.4"),
//								},
//							},
//							Netmask: pulumi.String("10.0.0.3/32"),
//						},
//					},
//					HostConfig: &gkeonprem.VmwareAdminClusterNetworkConfigHostConfigArgs{
//						DnsServers: pulumi.StringArray{
//							pulumi.String("10.254.41.1"),
//						},
//						NtpServers: pulumi.StringArray{
//							pulumi.String("216.239.35.8"),
//						},
//						DnsSearchDomains: pulumi.StringArray{
//							pulumi.String("test-domain"),
//						},
//					},
//					StaticIpConfig: &gkeonprem.VmwareAdminClusterNetworkConfigStaticIpConfigArgs{
//						IpBlocks: gkeonprem.VmwareAdminClusterNetworkConfigStaticIpConfigIpBlockArray{
//							&gkeonprem.VmwareAdminClusterNetworkConfigStaticIpConfigIpBlockArgs{
//								Gateway: pulumi.String("10.0.0.1"),
//								Ips: gkeonprem.VmwareAdminClusterNetworkConfigStaticIpConfigIpBlockIpArray{
//									&gkeonprem.VmwareAdminClusterNetworkConfigStaticIpConfigIpBlockIpArgs{
//										Hostname: pulumi.String("hostname"),
//										Ip:       pulumi.String("10.0.0.2"),
//									},
//								},
//								Netmask: pulumi.String("10.0.0.3/32"),
//							},
//						},
//					},
//					VcenterNetwork: pulumi.String("test-vcenter-network"),
//				},
//				ControlPlaneNode: &gkeonprem.VmwareAdminClusterControlPlaneNodeArgs{
//					Cpus:     pulumi.Int(4),
//					Memory:   pulumi.Int(8192),
//					Replicas: pulumi.Int(3),
//				},
//				LoadBalancer: &gkeonprem.VmwareAdminClusterLoadBalancerArgs{
//					VipConfig: &gkeonprem.VmwareAdminClusterLoadBalancerVipConfigArgs{
//						ControlPlaneVip: pulumi.String("10.251.133.5"),
//						AddonsVip:       pulumi.String("10.251.135.19"),
//					},
//					ManualLbConfig: &gkeonprem.VmwareAdminClusterLoadBalancerManualLbConfigArgs{
//						AddonsNodePort:             pulumi.Int(30005),
//						ControlPlaneNodePort:       pulumi.Int(30006),
//						IngressHttpNodePort:        pulumi.Int(30007),
//						IngressHttpsNodePort:       pulumi.Int(30008),
//						KonnectivityServerNodePort: pulumi.Int(30009),
//					},
//				},
//				AddonNode: &gkeonprem.VmwareAdminClusterAddonNodeArgs{
//					AutoResizeConfig: &gkeonprem.VmwareAdminClusterAddonNodeAutoResizeConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//				AntiAffinityGroups: &gkeonprem.VmwareAdminClusterAntiAffinityGroupsArgs{
//					AagConfigDisabled: pulumi.Bool(true),
//				},
//				Authorization: &gkeonprem.VmwareAdminClusterAuthorizationArgs{
//					ViewerUsers: gkeonprem.VmwareAdminClusterAuthorizationViewerUserArray{
//						&gkeonprem.VmwareAdminClusterAuthorizationViewerUserArgs{
//							Username: pulumi.String("user1@gmail.com"),
//						},
//					},
//				},
//				AutoRepairConfig: &gkeonprem.VmwareAdminClusterAutoRepairConfigArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				PlatformConfig: &gkeonprem.VmwareAdminClusterPlatformConfigArgs{
//					RequiredPlatformVersion: pulumi.String("1.31.0"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Gkeonprem Vmware Admin Cluster Metallb
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gkeonprem"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gkeonprem.NewVmwareAdminCluster(ctx, "admin-cluster-metallb", &gkeonprem.VmwareAdminClusterArgs{
//				Name:                       pulumi.String("metallb"),
//				Location:                   pulumi.String("us-west1"),
//				Description:                pulumi.String("test admin cluster"),
//				BootstrapClusterMembership: pulumi.String("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test"),
//				OnPremVersion:              pulumi.String("1.31.0-gke.35"),
//				ImageType:                  pulumi.String("ubuntu_containerd"),
//				Vcenter: &gkeonprem.VmwareAdminClusterVcenterArgs{
//					ResourcePool: pulumi.String("test resource pool"),
//					Datastore:    pulumi.String("test data store"),
//					Datacenter:   pulumi.String("test data center"),
//					Cluster:      pulumi.String("test cluster"),
//					Folder:       pulumi.String("test folder"),
//					CaCertData:   pulumi.String("test ca cert data"),
//					Address:      pulumi.String("10.0.0.1"),
//					DataDisk:     pulumi.String("test data disk"),
//				},
//				NetworkConfig: &gkeonprem.VmwareAdminClusterNetworkConfigArgs{
//					ServiceAddressCidrBlocks: pulumi.StringArray{
//						pulumi.String("10.96.0.0/12"),
//					},
//					PodAddressCidrBlocks: pulumi.StringArray{
//						pulumi.String("192.168.0.0/16"),
//					},
//					DhcpIpConfig: &gkeonprem.VmwareAdminClusterNetworkConfigDhcpIpConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//				ControlPlaneNode: &gkeonprem.VmwareAdminClusterControlPlaneNodeArgs{
//					Cpus:   pulumi.Int(4),
//					Memory: pulumi.Int(8192),
//				},
//				LoadBalancer: &gkeonprem.VmwareAdminClusterLoadBalancerArgs{
//					VipConfig: &gkeonprem.VmwareAdminClusterLoadBalancerVipConfigArgs{
//						ControlPlaneVip: pulumi.String("10.251.133.5"),
//						AddonsVip:       pulumi.String("10.251.135.19"),
//					},
//					MetalLbConfig: &gkeonprem.VmwareAdminClusterLoadBalancerMetalLbConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VmwareAdminCluster can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, VmwareAdminCluster can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default {{location}}/{{name}}
// ```
type VmwareAdminCluster struct {
	pulumi.CustomResourceState

	// The VMware admin cluster addon node configuration.
	AddonNode VmwareAdminClusterAddonNodeOutput `pulumi:"addonNode"`
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups VmwareAdminClusterAntiAffinityGroupsOutput `pulumi:"antiAffinityGroups"`
	// The VMware admin cluster authorization configuration.
	Authorization VmwareAdminClusterAuthorizationPtrOutput `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig VmwareAdminClusterAutoRepairConfigOutput `pulumi:"autoRepairConfig"`
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership pulumi.StringOutput `pulumi:"bootstrapClusterMembership"`
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode VmwareAdminClusterControlPlaneNodePtrOutput `pulumi:"controlPlaneNode"`
	// The time the cluster was created, in RFC3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A human readable description of this VMware admin cluster.
	Description          pulumi.StringOutput    `pulumi:"description"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// If set, the advanced cluster feature is enabled.
	EnableAdvancedCluster pulumi.BoolOutput `pulumi:"enableAdvancedCluster"`
	// The DNS name of VMware admin cluster's API server.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// Allows clients to perform consistent read-modify-writes
	// through optimistic concurrency control.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Fleet configuration for the cluster.
	// Structure is documented below.
	Fleets VmwareAdminClusterFleetArrayOutput `pulumi:"fleets"`
	// The OS image type for the VMware admin cluster.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer VmwareAdminClusterLoadBalancerPtrOutput `pulumi:"loadBalancer"`
	// The object name of the VMwareAdminCluster custom resource on the
	// associated admin cluster. This field is used to support conflicting
	// names when enrolling existing clusters to the API. When used as a part of
	// cluster enrollment, this field will differ from the ID in the resource
	// name. For new clusters, this field will match the user provided cluster ID
	// and be visible in the last component of the resource name. It is not
	// modifiable.
	// All users should use this name to access their cluster using gkectl or
	// kubectl and should expect to see the local name when viewing admin
	// cluster controller logs.
	LocalName pulumi.StringOutput `pulumi:"localName"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The VMware admin cluster resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The VMware admin cluster network configuration.
	// Structure is documented below.
	NetworkConfig VmwareAdminClusterNetworkConfigOutput `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion pulumi.StringPtrOutput `pulumi:"onPremVersion"`
	// The VMware platform configuration.
	PlatformConfig VmwareAdminClusterPlatformConfigPtrOutput `pulumi:"platformConfig"`
	Project        pulumi.StringOutput                       `pulumi:"project"`
	// If set, there are currently changes in flight to the VMware admin cluster.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// (Output)
	// The lifecycle state of the condition.
	State pulumi.StringOutput `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	// Structure is documented below.
	Statuses VmwareAdminClusterStatusArrayOutput `pulumi:"statuses"`
	// The unique identifier of the VMware Admin Cluster.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Specifies vCenter config for the admin cluster.
	Vcenter VmwareAdminClusterVcenterPtrOutput `pulumi:"vcenter"`
}

// NewVmwareAdminCluster registers a new resource with the given unique name, arguments, and options.
func NewVmwareAdminCluster(ctx *pulumi.Context,
	name string, args *VmwareAdminClusterArgs, opts ...pulumi.ResourceOption) (*VmwareAdminCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.NetworkConfig == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmwareAdminCluster
	err := ctx.RegisterResource("gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmwareAdminCluster gets an existing VmwareAdminCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmwareAdminCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmwareAdminClusterState, opts ...pulumi.ResourceOption) (*VmwareAdminCluster, error) {
	var resource VmwareAdminCluster
	err := ctx.ReadResource("gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmwareAdminCluster resources.
type vmwareAdminClusterState struct {
	// The VMware admin cluster addon node configuration.
	AddonNode *VmwareAdminClusterAddonNode `pulumi:"addonNode"`
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups *VmwareAdminClusterAntiAffinityGroups `pulumi:"antiAffinityGroups"`
	// The VMware admin cluster authorization configuration.
	Authorization *VmwareAdminClusterAuthorization `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig *VmwareAdminClusterAutoRepairConfig `pulumi:"autoRepairConfig"`
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership *string `pulumi:"bootstrapClusterMembership"`
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode *VmwareAdminClusterControlPlaneNode `pulumi:"controlPlaneNode"`
	// The time the cluster was created, in RFC3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// A human readable description of this VMware admin cluster.
	Description          *string           `pulumi:"description"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// If set, the advanced cluster feature is enabled.
	EnableAdvancedCluster *bool `pulumi:"enableAdvancedCluster"`
	// The DNS name of VMware admin cluster's API server.
	Endpoint *string `pulumi:"endpoint"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// Allows clients to perform consistent read-modify-writes
	// through optimistic concurrency control.
	Etag *string `pulumi:"etag"`
	// Fleet configuration for the cluster.
	// Structure is documented below.
	Fleets []VmwareAdminClusterFleet `pulumi:"fleets"`
	// The OS image type for the VMware admin cluster.
	ImageType *string `pulumi:"imageType"`
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer *VmwareAdminClusterLoadBalancer `pulumi:"loadBalancer"`
	// The object name of the VMwareAdminCluster custom resource on the
	// associated admin cluster. This field is used to support conflicting
	// names when enrolling existing clusters to the API. When used as a part of
	// cluster enrollment, this field will differ from the ID in the resource
	// name. For new clusters, this field will match the user provided cluster ID
	// and be visible in the last component of the resource name. It is not
	// modifiable.
	// All users should use this name to access their cluster using gkectl or
	// kubectl and should expect to see the local name when viewing admin
	// cluster controller logs.
	LocalName *string `pulumi:"localName"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The VMware admin cluster resource name.
	Name *string `pulumi:"name"`
	// The VMware admin cluster network configuration.
	// Structure is documented below.
	NetworkConfig *VmwareAdminClusterNetworkConfig `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion *string `pulumi:"onPremVersion"`
	// The VMware platform configuration.
	PlatformConfig *VmwareAdminClusterPlatformConfig `pulumi:"platformConfig"`
	Project        *string                           `pulumi:"project"`
	// If set, there are currently changes in flight to the VMware admin cluster.
	Reconciling *bool `pulumi:"reconciling"`
	// (Output)
	// The lifecycle state of the condition.
	State *string `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	// Structure is documented below.
	Statuses []VmwareAdminClusterStatus `pulumi:"statuses"`
	// The unique identifier of the VMware Admin Cluster.
	Uid *string `pulumi:"uid"`
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime *string `pulumi:"updateTime"`
	// Specifies vCenter config for the admin cluster.
	Vcenter *VmwareAdminClusterVcenter `pulumi:"vcenter"`
}

type VmwareAdminClusterState struct {
	// The VMware admin cluster addon node configuration.
	AddonNode VmwareAdminClusterAddonNodePtrInput
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups VmwareAdminClusterAntiAffinityGroupsPtrInput
	// The VMware admin cluster authorization configuration.
	Authorization VmwareAdminClusterAuthorizationPtrInput
	// Configuration for auto repairing.
	AutoRepairConfig VmwareAdminClusterAutoRepairConfigPtrInput
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership pulumi.StringPtrInput
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode VmwareAdminClusterControlPlaneNodePtrInput
	// The time the cluster was created, in RFC3339 text format.
	CreateTime pulumi.StringPtrInput
	// A human readable description of this VMware admin cluster.
	Description          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// If set, the advanced cluster feature is enabled.
	EnableAdvancedCluster pulumi.BoolPtrInput
	// The DNS name of VMware admin cluster's API server.
	Endpoint pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// Allows clients to perform consistent read-modify-writes
	// through optimistic concurrency control.
	Etag pulumi.StringPtrInput
	// Fleet configuration for the cluster.
	// Structure is documented below.
	Fleets VmwareAdminClusterFleetArrayInput
	// The OS image type for the VMware admin cluster.
	ImageType pulumi.StringPtrInput
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer VmwareAdminClusterLoadBalancerPtrInput
	// The object name of the VMwareAdminCluster custom resource on the
	// associated admin cluster. This field is used to support conflicting
	// names when enrolling existing clusters to the API. When used as a part of
	// cluster enrollment, this field will differ from the ID in the resource
	// name. For new clusters, this field will match the user provided cluster ID
	// and be visible in the last component of the resource name. It is not
	// modifiable.
	// All users should use this name to access their cluster using gkectl or
	// kubectl and should expect to see the local name when viewing admin
	// cluster controller logs.
	LocalName pulumi.StringPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The VMware admin cluster resource name.
	Name pulumi.StringPtrInput
	// The VMware admin cluster network configuration.
	// Structure is documented below.
	NetworkConfig VmwareAdminClusterNetworkConfigPtrInput
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion pulumi.StringPtrInput
	// The VMware platform configuration.
	PlatformConfig VmwareAdminClusterPlatformConfigPtrInput
	Project        pulumi.StringPtrInput
	// If set, there are currently changes in flight to the VMware admin cluster.
	Reconciling pulumi.BoolPtrInput
	// (Output)
	// The lifecycle state of the condition.
	State pulumi.StringPtrInput
	// ResourceStatus representing detailed cluster state.
	// Structure is documented below.
	Statuses VmwareAdminClusterStatusArrayInput
	// The unique identifier of the VMware Admin Cluster.
	Uid pulumi.StringPtrInput
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime pulumi.StringPtrInput
	// Specifies vCenter config for the admin cluster.
	Vcenter VmwareAdminClusterVcenterPtrInput
}

func (VmwareAdminClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareAdminClusterState)(nil)).Elem()
}

type vmwareAdminClusterArgs struct {
	// The VMware admin cluster addon node configuration.
	AddonNode *VmwareAdminClusterAddonNode `pulumi:"addonNode"`
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups *VmwareAdminClusterAntiAffinityGroups `pulumi:"antiAffinityGroups"`
	// The VMware admin cluster authorization configuration.
	Authorization *VmwareAdminClusterAuthorization `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig *VmwareAdminClusterAutoRepairConfig `pulumi:"autoRepairConfig"`
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership *string `pulumi:"bootstrapClusterMembership"`
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode *VmwareAdminClusterControlPlaneNode `pulumi:"controlPlaneNode"`
	// A human readable description of this VMware admin cluster.
	Description *string `pulumi:"description"`
	// The OS image type for the VMware admin cluster.
	ImageType *string `pulumi:"imageType"`
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer *VmwareAdminClusterLoadBalancer `pulumi:"loadBalancer"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The VMware admin cluster resource name.
	Name *string `pulumi:"name"`
	// The VMware admin cluster network configuration.
	// Structure is documented below.
	NetworkConfig VmwareAdminClusterNetworkConfig `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion *string `pulumi:"onPremVersion"`
	// The VMware platform configuration.
	PlatformConfig *VmwareAdminClusterPlatformConfig `pulumi:"platformConfig"`
	Project        *string                           `pulumi:"project"`
	// Specifies vCenter config for the admin cluster.
	Vcenter *VmwareAdminClusterVcenter `pulumi:"vcenter"`
}

// The set of arguments for constructing a VmwareAdminCluster resource.
type VmwareAdminClusterArgs struct {
	// The VMware admin cluster addon node configuration.
	AddonNode VmwareAdminClusterAddonNodePtrInput
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups VmwareAdminClusterAntiAffinityGroupsPtrInput
	// The VMware admin cluster authorization configuration.
	Authorization VmwareAdminClusterAuthorizationPtrInput
	// Configuration for auto repairing.
	AutoRepairConfig VmwareAdminClusterAutoRepairConfigPtrInput
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership pulumi.StringPtrInput
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode VmwareAdminClusterControlPlaneNodePtrInput
	// A human readable description of this VMware admin cluster.
	Description pulumi.StringPtrInput
	// The OS image type for the VMware admin cluster.
	ImageType pulumi.StringPtrInput
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer VmwareAdminClusterLoadBalancerPtrInput
	// The location of the resource.
	Location pulumi.StringInput
	// The VMware admin cluster resource name.
	Name pulumi.StringPtrInput
	// The VMware admin cluster network configuration.
	// Structure is documented below.
	NetworkConfig VmwareAdminClusterNetworkConfigInput
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion pulumi.StringPtrInput
	// The VMware platform configuration.
	PlatformConfig VmwareAdminClusterPlatformConfigPtrInput
	Project        pulumi.StringPtrInput
	// Specifies vCenter config for the admin cluster.
	Vcenter VmwareAdminClusterVcenterPtrInput
}

func (VmwareAdminClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareAdminClusterArgs)(nil)).Elem()
}

type VmwareAdminClusterInput interface {
	pulumi.Input

	ToVmwareAdminClusterOutput() VmwareAdminClusterOutput
	ToVmwareAdminClusterOutputWithContext(ctx context.Context) VmwareAdminClusterOutput
}

func (*VmwareAdminCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAdminCluster)(nil)).Elem()
}

func (i *VmwareAdminCluster) ToVmwareAdminClusterOutput() VmwareAdminClusterOutput {
	return i.ToVmwareAdminClusterOutputWithContext(context.Background())
}

func (i *VmwareAdminCluster) ToVmwareAdminClusterOutputWithContext(ctx context.Context) VmwareAdminClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAdminClusterOutput)
}

// VmwareAdminClusterArrayInput is an input type that accepts VmwareAdminClusterArray and VmwareAdminClusterArrayOutput values.
// You can construct a concrete instance of `VmwareAdminClusterArrayInput` via:
//
//	VmwareAdminClusterArray{ VmwareAdminClusterArgs{...} }
type VmwareAdminClusterArrayInput interface {
	pulumi.Input

	ToVmwareAdminClusterArrayOutput() VmwareAdminClusterArrayOutput
	ToVmwareAdminClusterArrayOutputWithContext(context.Context) VmwareAdminClusterArrayOutput
}

type VmwareAdminClusterArray []VmwareAdminClusterInput

func (VmwareAdminClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmwareAdminCluster)(nil)).Elem()
}

func (i VmwareAdminClusterArray) ToVmwareAdminClusterArrayOutput() VmwareAdminClusterArrayOutput {
	return i.ToVmwareAdminClusterArrayOutputWithContext(context.Background())
}

func (i VmwareAdminClusterArray) ToVmwareAdminClusterArrayOutputWithContext(ctx context.Context) VmwareAdminClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAdminClusterArrayOutput)
}

// VmwareAdminClusterMapInput is an input type that accepts VmwareAdminClusterMap and VmwareAdminClusterMapOutput values.
// You can construct a concrete instance of `VmwareAdminClusterMapInput` via:
//
//	VmwareAdminClusterMap{ "key": VmwareAdminClusterArgs{...} }
type VmwareAdminClusterMapInput interface {
	pulumi.Input

	ToVmwareAdminClusterMapOutput() VmwareAdminClusterMapOutput
	ToVmwareAdminClusterMapOutputWithContext(context.Context) VmwareAdminClusterMapOutput
}

type VmwareAdminClusterMap map[string]VmwareAdminClusterInput

func (VmwareAdminClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmwareAdminCluster)(nil)).Elem()
}

func (i VmwareAdminClusterMap) ToVmwareAdminClusterMapOutput() VmwareAdminClusterMapOutput {
	return i.ToVmwareAdminClusterMapOutputWithContext(context.Background())
}

func (i VmwareAdminClusterMap) ToVmwareAdminClusterMapOutputWithContext(ctx context.Context) VmwareAdminClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAdminClusterMapOutput)
}

type VmwareAdminClusterOutput struct{ *pulumi.OutputState }

func (VmwareAdminClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAdminCluster)(nil)).Elem()
}

func (o VmwareAdminClusterOutput) ToVmwareAdminClusterOutput() VmwareAdminClusterOutput {
	return o
}

func (o VmwareAdminClusterOutput) ToVmwareAdminClusterOutputWithContext(ctx context.Context) VmwareAdminClusterOutput {
	return o
}

// The VMware admin cluster addon node configuration.
func (o VmwareAdminClusterOutput) AddonNode() VmwareAdminClusterAddonNodeOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterAddonNodeOutput { return v.AddonNode }).(VmwareAdminClusterAddonNodeOutput)
}

// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
// 'effective_annotations' for all of the annotations present on the resource.
func (o VmwareAdminClusterOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
func (o VmwareAdminClusterOutput) AntiAffinityGroups() VmwareAdminClusterAntiAffinityGroupsOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterAntiAffinityGroupsOutput { return v.AntiAffinityGroups }).(VmwareAdminClusterAntiAffinityGroupsOutput)
}

// The VMware admin cluster authorization configuration.
func (o VmwareAdminClusterOutput) Authorization() VmwareAdminClusterAuthorizationPtrOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterAuthorizationPtrOutput { return v.Authorization }).(VmwareAdminClusterAuthorizationPtrOutput)
}

// Configuration for auto repairing.
func (o VmwareAdminClusterOutput) AutoRepairConfig() VmwareAdminClusterAutoRepairConfigOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterAutoRepairConfigOutput { return v.AutoRepairConfig }).(VmwareAdminClusterAutoRepairConfigOutput)
}

// The bootstrap cluster this VMware admin cluster belongs to.
func (o VmwareAdminClusterOutput) BootstrapClusterMembership() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.BootstrapClusterMembership }).(pulumi.StringOutput)
}

// The VMware admin cluster control plane node configuration.
func (o VmwareAdminClusterOutput) ControlPlaneNode() VmwareAdminClusterControlPlaneNodePtrOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterControlPlaneNodePtrOutput { return v.ControlPlaneNode }).(VmwareAdminClusterControlPlaneNodePtrOutput)
}

// The time the cluster was created, in RFC3339 text format.
func (o VmwareAdminClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A human readable description of this VMware admin cluster.
func (o VmwareAdminClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o VmwareAdminClusterOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// If set, the advanced cluster feature is enabled.
func (o VmwareAdminClusterOutput) EnableAdvancedCluster() pulumi.BoolOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.BoolOutput { return v.EnableAdvancedCluster }).(pulumi.BoolOutput)
}

// The DNS name of VMware admin cluster's API server.
func (o VmwareAdminClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other
// fields, and may be sent on update and delete requests to ensure the
// client has an up-to-date value before proceeding.
// Allows clients to perform consistent read-modify-writes
// through optimistic concurrency control.
func (o VmwareAdminClusterOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Fleet configuration for the cluster.
// Structure is documented below.
func (o VmwareAdminClusterOutput) Fleets() VmwareAdminClusterFleetArrayOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterFleetArrayOutput { return v.Fleets }).(VmwareAdminClusterFleetArrayOutput)
}

// The OS image type for the VMware admin cluster.
func (o VmwareAdminClusterOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

// Specifies the load balancer configuration for VMware admin cluster.
func (o VmwareAdminClusterOutput) LoadBalancer() VmwareAdminClusterLoadBalancerPtrOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterLoadBalancerPtrOutput { return v.LoadBalancer }).(VmwareAdminClusterLoadBalancerPtrOutput)
}

// The object name of the VMwareAdminCluster custom resource on the
// associated admin cluster. This field is used to support conflicting
// names when enrolling existing clusters to the API. When used as a part of
// cluster enrollment, this field will differ from the ID in the resource
// name. For new clusters, this field will match the user provided cluster ID
// and be visible in the last component of the resource name. It is not
// modifiable.
// All users should use this name to access their cluster using gkectl or
// kubectl and should expect to see the local name when viewing admin
// cluster controller logs.
func (o VmwareAdminClusterOutput) LocalName() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.LocalName }).(pulumi.StringOutput)
}

// The location of the resource.
func (o VmwareAdminClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The VMware admin cluster resource name.
func (o VmwareAdminClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The VMware admin cluster network configuration.
// Structure is documented below.
func (o VmwareAdminClusterOutput) NetworkConfig() VmwareAdminClusterNetworkConfigOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterNetworkConfigOutput { return v.NetworkConfig }).(VmwareAdminClusterNetworkConfigOutput)
}

// The Anthos clusters on the VMware version for the admin cluster.
func (o VmwareAdminClusterOutput) OnPremVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringPtrOutput { return v.OnPremVersion }).(pulumi.StringPtrOutput)
}

// The VMware platform configuration.
func (o VmwareAdminClusterOutput) PlatformConfig() VmwareAdminClusterPlatformConfigPtrOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterPlatformConfigPtrOutput { return v.PlatformConfig }).(VmwareAdminClusterPlatformConfigPtrOutput)
}

func (o VmwareAdminClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the VMware admin cluster.
func (o VmwareAdminClusterOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// (Output)
// The lifecycle state of the condition.
func (o VmwareAdminClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// ResourceStatus representing detailed cluster state.
// Structure is documented below.
func (o VmwareAdminClusterOutput) Statuses() VmwareAdminClusterStatusArrayOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterStatusArrayOutput { return v.Statuses }).(VmwareAdminClusterStatusArrayOutput)
}

// The unique identifier of the VMware Admin Cluster.
func (o VmwareAdminClusterOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time the cluster was last updated, in RFC3339 text format.
func (o VmwareAdminClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Specifies vCenter config for the admin cluster.
func (o VmwareAdminClusterOutput) Vcenter() VmwareAdminClusterVcenterPtrOutput {
	return o.ApplyT(func(v *VmwareAdminCluster) VmwareAdminClusterVcenterPtrOutput { return v.Vcenter }).(VmwareAdminClusterVcenterPtrOutput)
}

type VmwareAdminClusterArrayOutput struct{ *pulumi.OutputState }

func (VmwareAdminClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmwareAdminCluster)(nil)).Elem()
}

func (o VmwareAdminClusterArrayOutput) ToVmwareAdminClusterArrayOutput() VmwareAdminClusterArrayOutput {
	return o
}

func (o VmwareAdminClusterArrayOutput) ToVmwareAdminClusterArrayOutputWithContext(ctx context.Context) VmwareAdminClusterArrayOutput {
	return o
}

func (o VmwareAdminClusterArrayOutput) Index(i pulumi.IntInput) VmwareAdminClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmwareAdminCluster {
		return vs[0].([]*VmwareAdminCluster)[vs[1].(int)]
	}).(VmwareAdminClusterOutput)
}

type VmwareAdminClusterMapOutput struct{ *pulumi.OutputState }

func (VmwareAdminClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmwareAdminCluster)(nil)).Elem()
}

func (o VmwareAdminClusterMapOutput) ToVmwareAdminClusterMapOutput() VmwareAdminClusterMapOutput {
	return o
}

func (o VmwareAdminClusterMapOutput) ToVmwareAdminClusterMapOutputWithContext(ctx context.Context) VmwareAdminClusterMapOutput {
	return o
}

func (o VmwareAdminClusterMapOutput) MapIndex(k pulumi.StringInput) VmwareAdminClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmwareAdminCluster {
		return vs[0].(map[string]*VmwareAdminCluster)[vs[1].(string)]
	}).(VmwareAdminClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAdminClusterInput)(nil)).Elem(), &VmwareAdminCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAdminClusterArrayInput)(nil)).Elem(), VmwareAdminClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAdminClusterMapInput)(nil)).Elem(), VmwareAdminClusterMap{})
	pulumi.RegisterOutputType(VmwareAdminClusterOutput{})
	pulumi.RegisterOutputType(VmwareAdminClusterArrayOutput{})
	pulumi.RegisterOutputType(VmwareAdminClusterMapOutput{})
}
