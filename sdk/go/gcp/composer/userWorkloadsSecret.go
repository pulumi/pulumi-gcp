// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package composer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/composer"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := composer.NewEnvironment(ctx, "example", &composer.EnvironmentArgs{
//				Name:    pulumi.String("example-environment"),
//				Project: pulumi.String("example-project"),
//				Region:  pulumi.String("us-central1"),
//				Config: &composer.EnvironmentConfigArgs{
//					SoftwareConfig: &composer.EnvironmentConfigSoftwareConfigArgs{
//						ImageVersion: pulumi.String("example-image-version"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeBase64encode, err := std.Base64encode(ctx, &std.Base64encodeArgs{
//				Input: "example-email",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeBase64encode1, err := std.Base64encode(ctx, &std.Base64encodeArgs{
//				Input: "example-password",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = composer.NewUserWorkloadsSecret(ctx, "example", &composer.UserWorkloadsSecretArgs{
//				Name:        pulumi.String("example-secret"),
//				Project:     pulumi.String("example-project"),
//				Region:      pulumi.String("us-central1"),
//				Environment: example.Name,
//				Data: pulumi.Map{
//					"email":    invokeBase64encode.Result,
//					"password": invokeBase64encode1.Result,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Secret can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsSecrets/{{name}}`
//
// * `{{project}}/{{region}}/{{environment}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, Environment can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:composer/userWorkloadsSecret:UserWorkloadsSecret example projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsSecrets/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:composer/userWorkloadsSecret:UserWorkloadsSecret example {{project}}/{{region}}/{{environment}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:composer/userWorkloadsSecret:UserWorkloadsSecret example {{name}}
// ```
type UserWorkloadsSecret struct {
	pulumi.CustomResourceState

	// A map of the secret data.
	Data pulumi.MapOutput `pulumi:"data"`
	// Environment where the Kubernetes Secret will be stored and used.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Name of the Kubernetes Secret.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewUserWorkloadsSecret registers a new resource with the given unique name, arguments, and options.
func NewUserWorkloadsSecret(ctx *pulumi.Context,
	name string, args *UserWorkloadsSecretArgs, opts ...pulumi.ResourceOption) (*UserWorkloadsSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Data != nil {
		args.Data = pulumi.ToSecret(args.Data).(pulumi.MapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"data",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserWorkloadsSecret
	err := ctx.RegisterResource("gcp:composer/userWorkloadsSecret:UserWorkloadsSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserWorkloadsSecret gets an existing UserWorkloadsSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserWorkloadsSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserWorkloadsSecretState, opts ...pulumi.ResourceOption) (*UserWorkloadsSecret, error) {
	var resource UserWorkloadsSecret
	err := ctx.ReadResource("gcp:composer/userWorkloadsSecret:UserWorkloadsSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserWorkloadsSecret resources.
type userWorkloadsSecretState struct {
	// A map of the secret data.
	Data map[string]interface{} `pulumi:"data"`
	// Environment where the Kubernetes Secret will be stored and used.
	Environment *string `pulumi:"environment"`
	// Name of the Kubernetes Secret.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region *string `pulumi:"region"`
}

type UserWorkloadsSecretState struct {
	// A map of the secret data.
	Data pulumi.MapInput
	// Environment where the Kubernetes Secret will be stored and used.
	Environment pulumi.StringPtrInput
	// Name of the Kubernetes Secret.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The location or Compute Engine region for the environment.
	Region pulumi.StringPtrInput
}

func (UserWorkloadsSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*userWorkloadsSecretState)(nil)).Elem()
}

type userWorkloadsSecretArgs struct {
	// A map of the secret data.
	Data map[string]interface{} `pulumi:"data"`
	// Environment where the Kubernetes Secret will be stored and used.
	Environment string `pulumi:"environment"`
	// Name of the Kubernetes Secret.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a UserWorkloadsSecret resource.
type UserWorkloadsSecretArgs struct {
	// A map of the secret data.
	Data pulumi.MapInput
	// Environment where the Kubernetes Secret will be stored and used.
	Environment pulumi.StringInput
	// Name of the Kubernetes Secret.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The location or Compute Engine region for the environment.
	Region pulumi.StringPtrInput
}

func (UserWorkloadsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userWorkloadsSecretArgs)(nil)).Elem()
}

type UserWorkloadsSecretInput interface {
	pulumi.Input

	ToUserWorkloadsSecretOutput() UserWorkloadsSecretOutput
	ToUserWorkloadsSecretOutputWithContext(ctx context.Context) UserWorkloadsSecretOutput
}

func (*UserWorkloadsSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**UserWorkloadsSecret)(nil)).Elem()
}

func (i *UserWorkloadsSecret) ToUserWorkloadsSecretOutput() UserWorkloadsSecretOutput {
	return i.ToUserWorkloadsSecretOutputWithContext(context.Background())
}

func (i *UserWorkloadsSecret) ToUserWorkloadsSecretOutputWithContext(ctx context.Context) UserWorkloadsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWorkloadsSecretOutput)
}

// UserWorkloadsSecretArrayInput is an input type that accepts UserWorkloadsSecretArray and UserWorkloadsSecretArrayOutput values.
// You can construct a concrete instance of `UserWorkloadsSecretArrayInput` via:
//
//	UserWorkloadsSecretArray{ UserWorkloadsSecretArgs{...} }
type UserWorkloadsSecretArrayInput interface {
	pulumi.Input

	ToUserWorkloadsSecretArrayOutput() UserWorkloadsSecretArrayOutput
	ToUserWorkloadsSecretArrayOutputWithContext(context.Context) UserWorkloadsSecretArrayOutput
}

type UserWorkloadsSecretArray []UserWorkloadsSecretInput

func (UserWorkloadsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserWorkloadsSecret)(nil)).Elem()
}

func (i UserWorkloadsSecretArray) ToUserWorkloadsSecretArrayOutput() UserWorkloadsSecretArrayOutput {
	return i.ToUserWorkloadsSecretArrayOutputWithContext(context.Background())
}

func (i UserWorkloadsSecretArray) ToUserWorkloadsSecretArrayOutputWithContext(ctx context.Context) UserWorkloadsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWorkloadsSecretArrayOutput)
}

// UserWorkloadsSecretMapInput is an input type that accepts UserWorkloadsSecretMap and UserWorkloadsSecretMapOutput values.
// You can construct a concrete instance of `UserWorkloadsSecretMapInput` via:
//
//	UserWorkloadsSecretMap{ "key": UserWorkloadsSecretArgs{...} }
type UserWorkloadsSecretMapInput interface {
	pulumi.Input

	ToUserWorkloadsSecretMapOutput() UserWorkloadsSecretMapOutput
	ToUserWorkloadsSecretMapOutputWithContext(context.Context) UserWorkloadsSecretMapOutput
}

type UserWorkloadsSecretMap map[string]UserWorkloadsSecretInput

func (UserWorkloadsSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserWorkloadsSecret)(nil)).Elem()
}

func (i UserWorkloadsSecretMap) ToUserWorkloadsSecretMapOutput() UserWorkloadsSecretMapOutput {
	return i.ToUserWorkloadsSecretMapOutputWithContext(context.Background())
}

func (i UserWorkloadsSecretMap) ToUserWorkloadsSecretMapOutputWithContext(ctx context.Context) UserWorkloadsSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWorkloadsSecretMapOutput)
}

type UserWorkloadsSecretOutput struct{ *pulumi.OutputState }

func (UserWorkloadsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserWorkloadsSecret)(nil)).Elem()
}

func (o UserWorkloadsSecretOutput) ToUserWorkloadsSecretOutput() UserWorkloadsSecretOutput {
	return o
}

func (o UserWorkloadsSecretOutput) ToUserWorkloadsSecretOutputWithContext(ctx context.Context) UserWorkloadsSecretOutput {
	return o
}

// A map of the secret data.
func (o UserWorkloadsSecretOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v *UserWorkloadsSecret) pulumi.MapOutput { return v.Data }).(pulumi.MapOutput)
}

// Environment where the Kubernetes Secret will be stored and used.
func (o UserWorkloadsSecretOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsSecret) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Name of the Kubernetes Secret.
func (o UserWorkloadsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o UserWorkloadsSecretOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsSecret) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The location or Compute Engine region for the environment.
func (o UserWorkloadsSecretOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsSecret) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type UserWorkloadsSecretArrayOutput struct{ *pulumi.OutputState }

func (UserWorkloadsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserWorkloadsSecret)(nil)).Elem()
}

func (o UserWorkloadsSecretArrayOutput) ToUserWorkloadsSecretArrayOutput() UserWorkloadsSecretArrayOutput {
	return o
}

func (o UserWorkloadsSecretArrayOutput) ToUserWorkloadsSecretArrayOutputWithContext(ctx context.Context) UserWorkloadsSecretArrayOutput {
	return o
}

func (o UserWorkloadsSecretArrayOutput) Index(i pulumi.IntInput) UserWorkloadsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserWorkloadsSecret {
		return vs[0].([]*UserWorkloadsSecret)[vs[1].(int)]
	}).(UserWorkloadsSecretOutput)
}

type UserWorkloadsSecretMapOutput struct{ *pulumi.OutputState }

func (UserWorkloadsSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserWorkloadsSecret)(nil)).Elem()
}

func (o UserWorkloadsSecretMapOutput) ToUserWorkloadsSecretMapOutput() UserWorkloadsSecretMapOutput {
	return o
}

func (o UserWorkloadsSecretMapOutput) ToUserWorkloadsSecretMapOutputWithContext(ctx context.Context) UserWorkloadsSecretMapOutput {
	return o
}

func (o UserWorkloadsSecretMapOutput) MapIndex(k pulumi.StringInput) UserWorkloadsSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserWorkloadsSecret {
		return vs[0].(map[string]*UserWorkloadsSecret)[vs[1].(string)]
	}).(UserWorkloadsSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserWorkloadsSecretInput)(nil)).Elem(), &UserWorkloadsSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserWorkloadsSecretArrayInput)(nil)).Elem(), UserWorkloadsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserWorkloadsSecretMapInput)(nil)).Elem(), UserWorkloadsSecretMap{})
	pulumi.RegisterOutputType(UserWorkloadsSecretOutput{})
	pulumi.RegisterOutputType(UserWorkloadsSecretArrayOutput{})
	pulumi.RegisterOutputType(UserWorkloadsSecretMapOutput{})
}
