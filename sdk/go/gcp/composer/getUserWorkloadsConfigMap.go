// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package composer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/composer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleEnvironment, err := composer.NewEnvironment(ctx, "example", &composer.EnvironmentArgs{
//				Name: pulumi.String("example-environment"),
//				Config: &composer.EnvironmentConfigArgs{
//					SoftwareConfig: &composer.EnvironmentConfigSoftwareConfigArgs{
//						ImageVersion: pulumi.String("composer-3-airflow-2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = composer.NewUserWorkloadsConfigMap(ctx, "example", &composer.UserWorkloadsConfigMapArgs{
//				Environment: exampleEnvironment.Name,
//				Name:        pulumi.String("example-config-map"),
//				Data: pulumi.StringMap{
//					"db_host":  pulumi.String("dbhost:5432"),
//					"api_host": pulumi.String("apihost:443"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example := exampleEnvironment.Name.ApplyT(func(name string) (composer.GetUserWorkloadsConfigMapResult, error) {
//				return composer.LookupUserWorkloadsConfigMapOutput(ctx, composer.GetUserWorkloadsConfigMapOutputArgs{
//					Environment: name,
//					Name:        googleComposerUserWorkloadsConfigMap.Example.Name,
//				}, nil), nil
//			}).(composer.GetUserWorkloadsConfigMapResultOutput)
//			ctx.Export("debug", example)
//			return nil
//		})
//	}
//
// ```
func LookupUserWorkloadsConfigMap(ctx *pulumi.Context, args *LookupUserWorkloadsConfigMapArgs, opts ...pulumi.InvokeOption) (*LookupUserWorkloadsConfigMapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserWorkloadsConfigMapResult
	err := ctx.Invoke("gcp:composer/getUserWorkloadsConfigMap:getUserWorkloadsConfigMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserWorkloadsConfigMap.
type LookupUserWorkloadsConfigMapArgs struct {
	// Environment where the ConfigMap is stored.
	Environment string `pulumi:"environment"`
	// Name of the ConfigMap.
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location or Compute Engine region of the environment.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getUserWorkloadsConfigMap.
type LookupUserWorkloadsConfigMapResult struct {
	// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
	// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data        map[string]string `pulumi:"data"`
	Environment string            `pulumi:"environment"`
	// The provider-assigned unique ID for this managed resource.
	Id      string  `pulumi:"id"`
	Name    string  `pulumi:"name"`
	Project *string `pulumi:"project"`
	Region  *string `pulumi:"region"`
}

func LookupUserWorkloadsConfigMapOutput(ctx *pulumi.Context, args LookupUserWorkloadsConfigMapOutputArgs, opts ...pulumi.InvokeOption) LookupUserWorkloadsConfigMapResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserWorkloadsConfigMapResult, error) {
			args := v.(LookupUserWorkloadsConfigMapArgs)
			r, err := LookupUserWorkloadsConfigMap(ctx, &args, opts...)
			var s LookupUserWorkloadsConfigMapResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserWorkloadsConfigMapResultOutput)
}

// A collection of arguments for invoking getUserWorkloadsConfigMap.
type LookupUserWorkloadsConfigMapOutputArgs struct {
	// Environment where the ConfigMap is stored.
	Environment pulumi.StringInput `pulumi:"environment"`
	// Name of the ConfigMap.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The location or Compute Engine region of the environment.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupUserWorkloadsConfigMapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserWorkloadsConfigMapArgs)(nil)).Elem()
}

// A collection of values returned by getUserWorkloadsConfigMap.
type LookupUserWorkloadsConfigMapResultOutput struct{ *pulumi.OutputState }

func (LookupUserWorkloadsConfigMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserWorkloadsConfigMapResult)(nil)).Elem()
}

func (o LookupUserWorkloadsConfigMapResultOutput) ToLookupUserWorkloadsConfigMapResultOutput() LookupUserWorkloadsConfigMapResultOutput {
	return o
}

func (o LookupUserWorkloadsConfigMapResultOutput) ToLookupUserWorkloadsConfigMapResultOutputWithContext(ctx context.Context) LookupUserWorkloadsConfigMapResultOutput {
	return o
}

// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
func (o LookupUserWorkloadsConfigMapResultOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserWorkloadsConfigMapResult) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

func (o LookupUserWorkloadsConfigMapResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserWorkloadsConfigMapResult) string { return v.Environment }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserWorkloadsConfigMapResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserWorkloadsConfigMapResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserWorkloadsConfigMapResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserWorkloadsConfigMapResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupUserWorkloadsConfigMapResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserWorkloadsConfigMapResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupUserWorkloadsConfigMapResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserWorkloadsConfigMapResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserWorkloadsConfigMapResultOutput{})
}
