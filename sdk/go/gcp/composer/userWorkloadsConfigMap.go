// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package composer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// User workloads ConfigMap used by Airflow tasks that run with Kubernetes Executor or KubernetesPodOperator.
// Intended for Composer 3 Environments.
//
// To get more information about UserWorkloadsConfigMap, see:
//
// * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsConfigMaps)
//
// ## Example Usage
//
// ### Composer User Workloads Config Map Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/composer"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			test, err := serviceaccount.NewAccount(ctx, "test", &serviceaccount.AccountArgs{
//				AccountId:   pulumi.String("test-sa"),
//				DisplayName: pulumi.String("Test Service Account for Composer Environment"),
//			})
//			if err != nil {
//				return err
//			}
//			composer_worker, err := projects.NewIAMMember(ctx, "composer-worker", &projects.IAMMemberArgs{
//				Project: pulumi.String(project.ProjectId),
//				Role:    pulumi.String("roles/composer.worker"),
//				Member: test.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			environment, err := composer.NewEnvironment(ctx, "environment", &composer.EnvironmentArgs{
//				Name:   pulumi.String("test-environment"),
//				Region: pulumi.String("us-central1"),
//				Config: &composer.EnvironmentConfigArgs{
//					SoftwareConfig: &composer.EnvironmentConfigSoftwareConfigArgs{
//						ImageVersion: pulumi.String("composer-3-airflow-2"),
//					},
//					NodeConfig: &composer.EnvironmentConfigNodeConfigArgs{
//						ServiceAccount: test.Name,
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				composer_worker,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = composer.NewUserWorkloadsConfigMap(ctx, "config_map", &composer.UserWorkloadsConfigMapArgs{
//				Name:        pulumi.String("test-config-map"),
//				Region:      pulumi.String("us-central1"),
//				Environment: environment.Name,
//				Data: pulumi.StringMap{
//					"api_host": pulumi.String("apihost:443"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// UserWorkloadsConfigMap can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsConfigMaps/{{name}}`
//
// * `{{project}}/{{region}}/{{environment}}/{{name}}`
//
// * `{{region}}/{{environment}}/{{name}}`
//
// * `{{environment}}/{{name}}`
//
// When using the `pulumi import` command, UserWorkloadsConfigMap can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsConfigMaps/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{project}}/{{region}}/{{environment}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{region}}/{{environment}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{environment}}/{{name}}
// ```
type UserWorkloadsConfigMap struct {
	pulumi.CustomResourceState

	// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
	// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data pulumi.StringMapOutput `pulumi:"data"`
	// Environment where the Kubernetes ConfigMap will be stored and used.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Name of the Kubernetes ConfigMap.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewUserWorkloadsConfigMap registers a new resource with the given unique name, arguments, and options.
func NewUserWorkloadsConfigMap(ctx *pulumi.Context,
	name string, args *UserWorkloadsConfigMapArgs, opts ...pulumi.ResourceOption) (*UserWorkloadsConfigMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserWorkloadsConfigMap
	err := ctx.RegisterResource("gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserWorkloadsConfigMap gets an existing UserWorkloadsConfigMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserWorkloadsConfigMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserWorkloadsConfigMapState, opts ...pulumi.ResourceOption) (*UserWorkloadsConfigMap, error) {
	var resource UserWorkloadsConfigMap
	err := ctx.ReadResource("gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserWorkloadsConfigMap resources.
type userWorkloadsConfigMapState struct {
	// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
	// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data map[string]string `pulumi:"data"`
	// Environment where the Kubernetes ConfigMap will be stored and used.
	Environment *string `pulumi:"environment"`
	// Name of the Kubernetes ConfigMap.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region *string `pulumi:"region"`
}

type UserWorkloadsConfigMapState struct {
	// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
	// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data pulumi.StringMapInput
	// Environment where the Kubernetes ConfigMap will be stored and used.
	Environment pulumi.StringPtrInput
	// Name of the Kubernetes ConfigMap.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The location or Compute Engine region for the environment.
	Region pulumi.StringPtrInput
}

func (UserWorkloadsConfigMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*userWorkloadsConfigMapState)(nil)).Elem()
}

type userWorkloadsConfigMapArgs struct {
	// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
	// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data map[string]string `pulumi:"data"`
	// Environment where the Kubernetes ConfigMap will be stored and used.
	Environment string `pulumi:"environment"`
	// Name of the Kubernetes ConfigMap.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a UserWorkloadsConfigMap resource.
type UserWorkloadsConfigMapArgs struct {
	// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
	// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data pulumi.StringMapInput
	// Environment where the Kubernetes ConfigMap will be stored and used.
	Environment pulumi.StringInput
	// Name of the Kubernetes ConfigMap.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The location or Compute Engine region for the environment.
	Region pulumi.StringPtrInput
}

func (UserWorkloadsConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userWorkloadsConfigMapArgs)(nil)).Elem()
}

type UserWorkloadsConfigMapInput interface {
	pulumi.Input

	ToUserWorkloadsConfigMapOutput() UserWorkloadsConfigMapOutput
	ToUserWorkloadsConfigMapOutputWithContext(ctx context.Context) UserWorkloadsConfigMapOutput
}

func (*UserWorkloadsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((**UserWorkloadsConfigMap)(nil)).Elem()
}

func (i *UserWorkloadsConfigMap) ToUserWorkloadsConfigMapOutput() UserWorkloadsConfigMapOutput {
	return i.ToUserWorkloadsConfigMapOutputWithContext(context.Background())
}

func (i *UserWorkloadsConfigMap) ToUserWorkloadsConfigMapOutputWithContext(ctx context.Context) UserWorkloadsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWorkloadsConfigMapOutput)
}

// UserWorkloadsConfigMapArrayInput is an input type that accepts UserWorkloadsConfigMapArray and UserWorkloadsConfigMapArrayOutput values.
// You can construct a concrete instance of `UserWorkloadsConfigMapArrayInput` via:
//
//	UserWorkloadsConfigMapArray{ UserWorkloadsConfigMapArgs{...} }
type UserWorkloadsConfigMapArrayInput interface {
	pulumi.Input

	ToUserWorkloadsConfigMapArrayOutput() UserWorkloadsConfigMapArrayOutput
	ToUserWorkloadsConfigMapArrayOutputWithContext(context.Context) UserWorkloadsConfigMapArrayOutput
}

type UserWorkloadsConfigMapArray []UserWorkloadsConfigMapInput

func (UserWorkloadsConfigMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserWorkloadsConfigMap)(nil)).Elem()
}

func (i UserWorkloadsConfigMapArray) ToUserWorkloadsConfigMapArrayOutput() UserWorkloadsConfigMapArrayOutput {
	return i.ToUserWorkloadsConfigMapArrayOutputWithContext(context.Background())
}

func (i UserWorkloadsConfigMapArray) ToUserWorkloadsConfigMapArrayOutputWithContext(ctx context.Context) UserWorkloadsConfigMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWorkloadsConfigMapArrayOutput)
}

// UserWorkloadsConfigMapMapInput is an input type that accepts UserWorkloadsConfigMapMap and UserWorkloadsConfigMapMapOutput values.
// You can construct a concrete instance of `UserWorkloadsConfigMapMapInput` via:
//
//	UserWorkloadsConfigMapMap{ "key": UserWorkloadsConfigMapArgs{...} }
type UserWorkloadsConfigMapMapInput interface {
	pulumi.Input

	ToUserWorkloadsConfigMapMapOutput() UserWorkloadsConfigMapMapOutput
	ToUserWorkloadsConfigMapMapOutputWithContext(context.Context) UserWorkloadsConfigMapMapOutput
}

type UserWorkloadsConfigMapMap map[string]UserWorkloadsConfigMapInput

func (UserWorkloadsConfigMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserWorkloadsConfigMap)(nil)).Elem()
}

func (i UserWorkloadsConfigMapMap) ToUserWorkloadsConfigMapMapOutput() UserWorkloadsConfigMapMapOutput {
	return i.ToUserWorkloadsConfigMapMapOutputWithContext(context.Background())
}

func (i UserWorkloadsConfigMapMap) ToUserWorkloadsConfigMapMapOutputWithContext(ctx context.Context) UserWorkloadsConfigMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWorkloadsConfigMapMapOutput)
}

type UserWorkloadsConfigMapOutput struct{ *pulumi.OutputState }

func (UserWorkloadsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserWorkloadsConfigMap)(nil)).Elem()
}

func (o UserWorkloadsConfigMapOutput) ToUserWorkloadsConfigMapOutput() UserWorkloadsConfigMapOutput {
	return o
}

func (o UserWorkloadsConfigMapOutput) ToUserWorkloadsConfigMapOutputWithContext(ctx context.Context) UserWorkloadsConfigMapOutput {
	return o
}

// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
func (o UserWorkloadsConfigMapOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringMapOutput { return v.Data }).(pulumi.StringMapOutput)
}

// Environment where the Kubernetes ConfigMap will be stored and used.
func (o UserWorkloadsConfigMapOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Name of the Kubernetes ConfigMap.
func (o UserWorkloadsConfigMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o UserWorkloadsConfigMapOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The location or Compute Engine region for the environment.
func (o UserWorkloadsConfigMapOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type UserWorkloadsConfigMapArrayOutput struct{ *pulumi.OutputState }

func (UserWorkloadsConfigMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserWorkloadsConfigMap)(nil)).Elem()
}

func (o UserWorkloadsConfigMapArrayOutput) ToUserWorkloadsConfigMapArrayOutput() UserWorkloadsConfigMapArrayOutput {
	return o
}

func (o UserWorkloadsConfigMapArrayOutput) ToUserWorkloadsConfigMapArrayOutputWithContext(ctx context.Context) UserWorkloadsConfigMapArrayOutput {
	return o
}

func (o UserWorkloadsConfigMapArrayOutput) Index(i pulumi.IntInput) UserWorkloadsConfigMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserWorkloadsConfigMap {
		return vs[0].([]*UserWorkloadsConfigMap)[vs[1].(int)]
	}).(UserWorkloadsConfigMapOutput)
}

type UserWorkloadsConfigMapMapOutput struct{ *pulumi.OutputState }

func (UserWorkloadsConfigMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserWorkloadsConfigMap)(nil)).Elem()
}

func (o UserWorkloadsConfigMapMapOutput) ToUserWorkloadsConfigMapMapOutput() UserWorkloadsConfigMapMapOutput {
	return o
}

func (o UserWorkloadsConfigMapMapOutput) ToUserWorkloadsConfigMapMapOutputWithContext(ctx context.Context) UserWorkloadsConfigMapMapOutput {
	return o
}

func (o UserWorkloadsConfigMapMapOutput) MapIndex(k pulumi.StringInput) UserWorkloadsConfigMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserWorkloadsConfigMap {
		return vs[0].(map[string]*UserWorkloadsConfigMap)[vs[1].(string)]
	}).(UserWorkloadsConfigMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserWorkloadsConfigMapInput)(nil)).Elem(), &UserWorkloadsConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserWorkloadsConfigMapArrayInput)(nil)).Elem(), UserWorkloadsConfigMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserWorkloadsConfigMapMapInput)(nil)).Elem(), UserWorkloadsConfigMapMap{})
	pulumi.RegisterOutputType(UserWorkloadsConfigMapOutput{})
	pulumi.RegisterOutputType(UserWorkloadsConfigMapArrayOutput{})
	pulumi.RegisterOutputType(UserWorkloadsConfigMapMapOutput{})
}
