// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package composer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EnvironmentConfig struct {
	AirflowUri   *string `pulumi:"airflowUri"`
	DagGcsPrefix *string `pulumi:"dagGcsPrefix"`
	GkeCluster   *string `pulumi:"gkeCluster"`
	// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
	NodeConfig *EnvironmentConfigNodeConfig `pulumi:"nodeConfig"`
	// The number of nodes in the Kubernetes Engine cluster that
	// will be used to run this environment.
	NodeCount *int `pulumi:"nodeCount"`
	// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
	PrivateEnvironmentConfig *EnvironmentConfigPrivateEnvironmentConfig `pulumi:"privateEnvironmentConfig"`
	// The configuration settings for software inside the environment.  Structure is documented below.
	SoftwareConfig *EnvironmentConfigSoftwareConfig `pulumi:"softwareConfig"`
}

// EnvironmentConfigInput is an input type that accepts EnvironmentConfigArgs and EnvironmentConfigOutput values.
// You can construct a concrete instance of `EnvironmentConfigInput` via:
//
// 		 EnvironmentConfigArgs{...}
//
type EnvironmentConfigInput interface {
	pulumi.Input

	ToEnvironmentConfigOutput() EnvironmentConfigOutput
	ToEnvironmentConfigOutputWithContext(context.Context) EnvironmentConfigOutput
}

type EnvironmentConfigArgs struct {
	AirflowUri   pulumi.StringPtrInput `pulumi:"airflowUri"`
	DagGcsPrefix pulumi.StringPtrInput `pulumi:"dagGcsPrefix"`
	GkeCluster   pulumi.StringPtrInput `pulumi:"gkeCluster"`
	// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
	NodeConfig EnvironmentConfigNodeConfigPtrInput `pulumi:"nodeConfig"`
	// The number of nodes in the Kubernetes Engine cluster that
	// will be used to run this environment.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
	// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
	PrivateEnvironmentConfig EnvironmentConfigPrivateEnvironmentConfigPtrInput `pulumi:"privateEnvironmentConfig"`
	// The configuration settings for software inside the environment.  Structure is documented below.
	SoftwareConfig EnvironmentConfigSoftwareConfigPtrInput `pulumi:"softwareConfig"`
}

func (EnvironmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfig)(nil)).Elem()
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigOutput() EnvironmentConfigOutput {
	return i.ToEnvironmentConfigOutputWithContext(context.Background())
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigOutputWithContext(ctx context.Context) EnvironmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigOutput)
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return i.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigOutput).ToEnvironmentConfigPtrOutputWithContext(ctx)
}

// EnvironmentConfigPtrInput is an input type that accepts EnvironmentConfigArgs, EnvironmentConfigPtr and EnvironmentConfigPtrOutput values.
// You can construct a concrete instance of `EnvironmentConfigPtrInput` via:
//
// 		 EnvironmentConfigArgs{...}
//
//  or:
//
// 		 nil
//
type EnvironmentConfigPtrInput interface {
	pulumi.Input

	ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput
	ToEnvironmentConfigPtrOutputWithContext(context.Context) EnvironmentConfigPtrOutput
}

type environmentConfigPtrType EnvironmentConfigArgs

func EnvironmentConfigPtr(v *EnvironmentConfigArgs) EnvironmentConfigPtrInput {
	return (*environmentConfigPtrType)(v)
}

func (*environmentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfig)(nil)).Elem()
}

func (i *environmentConfigPtrType) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return i.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i *environmentConfigPtrType) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigPtrOutput)
}

type EnvironmentConfigOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfig)(nil)).Elem()
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigOutput() EnvironmentConfigOutput {
	return o
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigOutputWithContext(ctx context.Context) EnvironmentConfigOutput {
	return o
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return o.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *EnvironmentConfig {
		return &v
	}).(EnvironmentConfigPtrOutput)
}
func (o EnvironmentConfigOutput) AirflowUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *string { return v.AirflowUri }).(pulumi.StringPtrOutput)
}

func (o EnvironmentConfigOutput) DagGcsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *string { return v.DagGcsPrefix }).(pulumi.StringPtrOutput)
}

func (o EnvironmentConfigOutput) GkeCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *string { return v.GkeCluster }).(pulumi.StringPtrOutput)
}

// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
func (o EnvironmentConfigOutput) NodeConfig() EnvironmentConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *EnvironmentConfigNodeConfig { return v.NodeConfig }).(EnvironmentConfigNodeConfigPtrOutput)
}

// The number of nodes in the Kubernetes Engine cluster that
// will be used to run this environment.
func (o EnvironmentConfigOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
func (o EnvironmentConfigOutput) PrivateEnvironmentConfig() EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *EnvironmentConfigPrivateEnvironmentConfig {
		return v.PrivateEnvironmentConfig
	}).(EnvironmentConfigPrivateEnvironmentConfigPtrOutput)
}

// The configuration settings for software inside the environment.  Structure is documented below.
func (o EnvironmentConfigOutput) SoftwareConfig() EnvironmentConfigSoftwareConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *EnvironmentConfigSoftwareConfig { return v.SoftwareConfig }).(EnvironmentConfigSoftwareConfigPtrOutput)
}

type EnvironmentConfigPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfig)(nil)).Elem()
}

func (o EnvironmentConfigPtrOutput) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return o
}

func (o EnvironmentConfigPtrOutput) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return o
}

func (o EnvironmentConfigPtrOutput) Elem() EnvironmentConfigOutput {
	return o.ApplyT(func(v *EnvironmentConfig) EnvironmentConfig { return *v }).(EnvironmentConfigOutput)
}

func (o EnvironmentConfigPtrOutput) AirflowUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.AirflowUri
	}).(pulumi.StringPtrOutput)
}

func (o EnvironmentConfigPtrOutput) DagGcsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.DagGcsPrefix
	}).(pulumi.StringPtrOutput)
}

func (o EnvironmentConfigPtrOutput) GkeCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.GkeCluster
	}).(pulumi.StringPtrOutput)
}

// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
func (o EnvironmentConfigPtrOutput) NodeConfig() EnvironmentConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *EnvironmentConfigNodeConfig {
		if v == nil {
			return nil
		}
		return v.NodeConfig
	}).(EnvironmentConfigNodeConfigPtrOutput)
}

// The number of nodes in the Kubernetes Engine cluster that
// will be used to run this environment.
func (o EnvironmentConfigPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
func (o EnvironmentConfigPtrOutput) PrivateEnvironmentConfig() EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *EnvironmentConfigPrivateEnvironmentConfig {
		if v == nil {
			return nil
		}
		return v.PrivateEnvironmentConfig
	}).(EnvironmentConfigPrivateEnvironmentConfigPtrOutput)
}

// The configuration settings for software inside the environment.  Structure is documented below.
func (o EnvironmentConfigPtrOutput) SoftwareConfig() EnvironmentConfigSoftwareConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *EnvironmentConfigSoftwareConfig {
		if v == nil {
			return nil
		}
		return v.SoftwareConfig
	}).(EnvironmentConfigSoftwareConfigPtrOutput)
}

type EnvironmentConfigNodeConfig struct {
	// The disk size in GB used for node VMs. Minimum size is 20GB.
	// If unspecified, defaults to 100GB. Cannot be updated.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Configuration for controlling how IPs are allocated in the GKE cluster.
	// Structure is documented below.
	// Cannot be updated.
	IpAllocationPolicy *EnvironmentConfigNodeConfigIpAllocationPolicy `pulumi:"ipAllocationPolicy"`
	// The Compute Engine machine type used for cluster instances,
	// specified as a name or relative resource name. For example:
	// "projects/{project}/zones/{zone}/machineTypes/{machineType}". Must belong to the enclosing environment's project and
	// region/zone.
	MachineType *string `pulumi:"machineType"`
	// The Compute Engine network to be used for machine
	// communications, specified as a self-link, relative resource name
	// (e.g. "projects/{project}/global/networks/{network}"), by name.
	Network *string `pulumi:"network"`
	// The set of Google API scopes to be made available on all node
	// VMs. Cannot be updated. If empty, defaults to
	// `["https://www.googleapis.com/auth/cloud-platform"]`
	OauthScopes []string `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the
	// node VMs. If a service account is not specified, the "default"
	// Compute Engine service account is used. Cannot be updated. If given,
	// note that the service account must have `roles/composer.worker`
	// for any GCP resources created under the Cloud Composer Environment.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The Compute Engine subnetwork to be used for machine
	// communications, , specified as a self-link, relative resource name (e.g.
	// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
	// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
	Subnetwork *string `pulumi:"subnetwork"`
	// The list of instance tags applied to all node VMs. Tags are
	// used to identify valid sources or targets for network
	// firewalls. Each tag within the list must comply with RFC1035.
	// Cannot be updated.
	Tags []string `pulumi:"tags"`
	// The Compute Engine zone in which to deploy the VMs running the
	// Apache Airflow software, specified as the zone name or
	// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must belong to the enclosing environment's project
	// and region.
	Zone string `pulumi:"zone"`
}

// EnvironmentConfigNodeConfigInput is an input type that accepts EnvironmentConfigNodeConfigArgs and EnvironmentConfigNodeConfigOutput values.
// You can construct a concrete instance of `EnvironmentConfigNodeConfigInput` via:
//
// 		 EnvironmentConfigNodeConfigArgs{...}
//
type EnvironmentConfigNodeConfigInput interface {
	pulumi.Input

	ToEnvironmentConfigNodeConfigOutput() EnvironmentConfigNodeConfigOutput
	ToEnvironmentConfigNodeConfigOutputWithContext(context.Context) EnvironmentConfigNodeConfigOutput
}

type EnvironmentConfigNodeConfigArgs struct {
	// The disk size in GB used for node VMs. Minimum size is 20GB.
	// If unspecified, defaults to 100GB. Cannot be updated.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Configuration for controlling how IPs are allocated in the GKE cluster.
	// Structure is documented below.
	// Cannot be updated.
	IpAllocationPolicy EnvironmentConfigNodeConfigIpAllocationPolicyPtrInput `pulumi:"ipAllocationPolicy"`
	// The Compute Engine machine type used for cluster instances,
	// specified as a name or relative resource name. For example:
	// "projects/{project}/zones/{zone}/machineTypes/{machineType}". Must belong to the enclosing environment's project and
	// region/zone.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The Compute Engine network to be used for machine
	// communications, specified as a self-link, relative resource name
	// (e.g. "projects/{project}/global/networks/{network}"), by name.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The set of Google API scopes to be made available on all node
	// VMs. Cannot be updated. If empty, defaults to
	// `["https://www.googleapis.com/auth/cloud-platform"]`
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the
	// node VMs. If a service account is not specified, the "default"
	// Compute Engine service account is used. Cannot be updated. If given,
	// note that the service account must have `roles/composer.worker`
	// for any GCP resources created under the Cloud Composer Environment.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The Compute Engine subnetwork to be used for machine
	// communications, , specified as a self-link, relative resource name (e.g.
	// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
	// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// The list of instance tags applied to all node VMs. Tags are
	// used to identify valid sources or targets for network
	// firewalls. Each tag within the list must comply with RFC1035.
	// Cannot be updated.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The Compute Engine zone in which to deploy the VMs running the
	// Apache Airflow software, specified as the zone name or
	// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must belong to the enclosing environment's project
	// and region.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (EnvironmentConfigNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigNodeConfig)(nil)).Elem()
}

func (i EnvironmentConfigNodeConfigArgs) ToEnvironmentConfigNodeConfigOutput() EnvironmentConfigNodeConfigOutput {
	return i.ToEnvironmentConfigNodeConfigOutputWithContext(context.Background())
}

func (i EnvironmentConfigNodeConfigArgs) ToEnvironmentConfigNodeConfigOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigNodeConfigOutput)
}

func (i EnvironmentConfigNodeConfigArgs) ToEnvironmentConfigNodeConfigPtrOutput() EnvironmentConfigNodeConfigPtrOutput {
	return i.ToEnvironmentConfigNodeConfigPtrOutputWithContext(context.Background())
}

func (i EnvironmentConfigNodeConfigArgs) ToEnvironmentConfigNodeConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigNodeConfigOutput).ToEnvironmentConfigNodeConfigPtrOutputWithContext(ctx)
}

// EnvironmentConfigNodeConfigPtrInput is an input type that accepts EnvironmentConfigNodeConfigArgs, EnvironmentConfigNodeConfigPtr and EnvironmentConfigNodeConfigPtrOutput values.
// You can construct a concrete instance of `EnvironmentConfigNodeConfigPtrInput` via:
//
// 		 EnvironmentConfigNodeConfigArgs{...}
//
//  or:
//
// 		 nil
//
type EnvironmentConfigNodeConfigPtrInput interface {
	pulumi.Input

	ToEnvironmentConfigNodeConfigPtrOutput() EnvironmentConfigNodeConfigPtrOutput
	ToEnvironmentConfigNodeConfigPtrOutputWithContext(context.Context) EnvironmentConfigNodeConfigPtrOutput
}

type environmentConfigNodeConfigPtrType EnvironmentConfigNodeConfigArgs

func EnvironmentConfigNodeConfigPtr(v *EnvironmentConfigNodeConfigArgs) EnvironmentConfigNodeConfigPtrInput {
	return (*environmentConfigNodeConfigPtrType)(v)
}

func (*environmentConfigNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfigNodeConfig)(nil)).Elem()
}

func (i *environmentConfigNodeConfigPtrType) ToEnvironmentConfigNodeConfigPtrOutput() EnvironmentConfigNodeConfigPtrOutput {
	return i.ToEnvironmentConfigNodeConfigPtrOutputWithContext(context.Background())
}

func (i *environmentConfigNodeConfigPtrType) ToEnvironmentConfigNodeConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigNodeConfigPtrOutput)
}

type EnvironmentConfigNodeConfigOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigNodeConfig)(nil)).Elem()
}

func (o EnvironmentConfigNodeConfigOutput) ToEnvironmentConfigNodeConfigOutput() EnvironmentConfigNodeConfigOutput {
	return o
}

func (o EnvironmentConfigNodeConfigOutput) ToEnvironmentConfigNodeConfigOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigOutput {
	return o
}

func (o EnvironmentConfigNodeConfigOutput) ToEnvironmentConfigNodeConfigPtrOutput() EnvironmentConfigNodeConfigPtrOutput {
	return o.ToEnvironmentConfigNodeConfigPtrOutputWithContext(context.Background())
}

func (o EnvironmentConfigNodeConfigOutput) ToEnvironmentConfigNodeConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) *EnvironmentConfigNodeConfig {
		return &v
	}).(EnvironmentConfigNodeConfigPtrOutput)
}

// The disk size in GB used for node VMs. Minimum size is 20GB.
// If unspecified, defaults to 100GB. Cannot be updated.
func (o EnvironmentConfigNodeConfigOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Configuration for controlling how IPs are allocated in the GKE cluster.
// Structure is documented below.
// Cannot be updated.
func (o EnvironmentConfigNodeConfigOutput) IpAllocationPolicy() EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) *EnvironmentConfigNodeConfigIpAllocationPolicy {
		return v.IpAllocationPolicy
	}).(EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput)
}

// The Compute Engine machine type used for cluster instances,
// specified as a name or relative resource name. For example:
// "projects/{project}/zones/{zone}/machineTypes/{machineType}". Must belong to the enclosing environment's project and
// region/zone.
func (o EnvironmentConfigNodeConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The Compute Engine network to be used for machine
// communications, specified as a self-link, relative resource name
// (e.g. "projects/{project}/global/networks/{network}"), by name.
func (o EnvironmentConfigNodeConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all node
// VMs. Cannot be updated. If empty, defaults to
// `["https://www.googleapis.com/auth/cloud-platform"]`
func (o EnvironmentConfigNodeConfigOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the
// node VMs. If a service account is not specified, the "default"
// Compute Engine service account is used. Cannot be updated. If given,
// note that the service account must have `roles/composer.worker`
// for any GCP resources created under the Cloud Composer Environment.
func (o EnvironmentConfigNodeConfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The Compute Engine subnetwork to be used for machine
// communications, , specified as a self-link, relative resource name (e.g.
// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
func (o EnvironmentConfigNodeConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// The list of instance tags applied to all node VMs. Tags are
// used to identify valid sources or targets for network
// firewalls. Each tag within the list must comply with RFC1035.
// Cannot be updated.
func (o EnvironmentConfigNodeConfigOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The Compute Engine zone in which to deploy the VMs running the
// Apache Airflow software, specified as the zone name or
// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must belong to the enclosing environment's project
// and region.
func (o EnvironmentConfigNodeConfigOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfig) string { return v.Zone }).(pulumi.StringOutput)
}

type EnvironmentConfigNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfigNodeConfig)(nil)).Elem()
}

func (o EnvironmentConfigNodeConfigPtrOutput) ToEnvironmentConfigNodeConfigPtrOutput() EnvironmentConfigNodeConfigPtrOutput {
	return o
}

func (o EnvironmentConfigNodeConfigPtrOutput) ToEnvironmentConfigNodeConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigPtrOutput {
	return o
}

func (o EnvironmentConfigNodeConfigPtrOutput) Elem() EnvironmentConfigNodeConfigOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) EnvironmentConfigNodeConfig { return *v }).(EnvironmentConfigNodeConfigOutput)
}

// The disk size in GB used for node VMs. Minimum size is 20GB.
// If unspecified, defaults to 100GB. Cannot be updated.
func (o EnvironmentConfigNodeConfigPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Configuration for controlling how IPs are allocated in the GKE cluster.
// Structure is documented below.
// Cannot be updated.
func (o EnvironmentConfigNodeConfigPtrOutput) IpAllocationPolicy() EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) *EnvironmentConfigNodeConfigIpAllocationPolicy {
		if v == nil {
			return nil
		}
		return v.IpAllocationPolicy
	}).(EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput)
}

// The Compute Engine machine type used for cluster instances,
// specified as a name or relative resource name. For example:
// "projects/{project}/zones/{zone}/machineTypes/{machineType}". Must belong to the enclosing environment's project and
// region/zone.
func (o EnvironmentConfigNodeConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The Compute Engine network to be used for machine
// communications, specified as a self-link, relative resource name
// (e.g. "projects/{project}/global/networks/{network}"), by name.
func (o EnvironmentConfigNodeConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all node
// VMs. Cannot be updated. If empty, defaults to
// `["https://www.googleapis.com/auth/cloud-platform"]`
func (o EnvironmentConfigNodeConfigPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the
// node VMs. If a service account is not specified, the "default"
// Compute Engine service account is used. Cannot be updated. If given,
// note that the service account must have `roles/composer.worker`
// for any GCP resources created under the Cloud Composer Environment.
func (o EnvironmentConfigNodeConfigPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The Compute Engine subnetwork to be used for machine
// communications, , specified as a self-link, relative resource name (e.g.
// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
func (o EnvironmentConfigNodeConfigPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// The list of instance tags applied to all node VMs. Tags are
// used to identify valid sources or targets for network
// firewalls. Each tag within the list must comply with RFC1035.
// Cannot be updated.
func (o EnvironmentConfigNodeConfigPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// The Compute Engine zone in which to deploy the VMs running the
// Apache Airflow software, specified as the zone name or
// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must belong to the enclosing environment's project
// and region.
func (o EnvironmentConfigNodeConfigPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Zone
	}).(pulumi.StringPtrOutput)
}

type EnvironmentConfigNodeConfigIpAllocationPolicy struct {
	// The IP address range used to allocate IP addresses to pods in the cluster.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either `clusterSecondaryRangeName` or `clusterIpv4CidrBlock` but not both.
	ClusterIpv4CidrBlock *string `pulumi:"clusterIpv4CidrBlock"`
	// The name of the cluster's secondary range used to allocate IP addresses to pods.
	// Specify either `clusterSecondaryRangeName` or `clusterIpv4CidrBlock` but not both.
	// This field is applicable only when `useIpAliases` is true.
	ClusterSecondaryRangeName *string `pulumi:"clusterSecondaryRangeName"`
	// The IP address range used to allocate IP addresses in this cluster.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either `servicesSecondaryRangeName` or `servicesIpv4CidrBlock` but not both.
	ServicesIpv4CidrBlock *string `pulumi:"servicesIpv4CidrBlock"`
	// The name of the services' secondary range used to allocate IP addresses to the cluster.
	// Specify either `servicesSecondaryRangeName` or `servicesIpv4CidrBlock` but not both.
	// This field is applicable only when `useIpAliases` is true.
	ServicesSecondaryRangeName *string `pulumi:"servicesSecondaryRangeName"`
	// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
	// Defaults to true if the `ipAllocationBlock` is present in config.
	UseIpAliases bool `pulumi:"useIpAliases"`
}

// EnvironmentConfigNodeConfigIpAllocationPolicyInput is an input type that accepts EnvironmentConfigNodeConfigIpAllocationPolicyArgs and EnvironmentConfigNodeConfigIpAllocationPolicyOutput values.
// You can construct a concrete instance of `EnvironmentConfigNodeConfigIpAllocationPolicyInput` via:
//
// 		 EnvironmentConfigNodeConfigIpAllocationPolicyArgs{...}
//
type EnvironmentConfigNodeConfigIpAllocationPolicyInput interface {
	pulumi.Input

	ToEnvironmentConfigNodeConfigIpAllocationPolicyOutput() EnvironmentConfigNodeConfigIpAllocationPolicyOutput
	ToEnvironmentConfigNodeConfigIpAllocationPolicyOutputWithContext(context.Context) EnvironmentConfigNodeConfigIpAllocationPolicyOutput
}

type EnvironmentConfigNodeConfigIpAllocationPolicyArgs struct {
	// The IP address range used to allocate IP addresses to pods in the cluster.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either `clusterSecondaryRangeName` or `clusterIpv4CidrBlock` but not both.
	ClusterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"clusterIpv4CidrBlock"`
	// The name of the cluster's secondary range used to allocate IP addresses to pods.
	// Specify either `clusterSecondaryRangeName` or `clusterIpv4CidrBlock` but not both.
	// This field is applicable only when `useIpAliases` is true.
	ClusterSecondaryRangeName pulumi.StringPtrInput `pulumi:"clusterSecondaryRangeName"`
	// The IP address range used to allocate IP addresses in this cluster.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either `servicesSecondaryRangeName` or `servicesIpv4CidrBlock` but not both.
	ServicesIpv4CidrBlock pulumi.StringPtrInput `pulumi:"servicesIpv4CidrBlock"`
	// The name of the services' secondary range used to allocate IP addresses to the cluster.
	// Specify either `servicesSecondaryRangeName` or `servicesIpv4CidrBlock` but not both.
	// This field is applicable only when `useIpAliases` is true.
	ServicesSecondaryRangeName pulumi.StringPtrInput `pulumi:"servicesSecondaryRangeName"`
	// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
	// Defaults to true if the `ipAllocationBlock` is present in config.
	UseIpAliases pulumi.BoolInput `pulumi:"useIpAliases"`
}

func (EnvironmentConfigNodeConfigIpAllocationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigNodeConfigIpAllocationPolicy)(nil)).Elem()
}

func (i EnvironmentConfigNodeConfigIpAllocationPolicyArgs) ToEnvironmentConfigNodeConfigIpAllocationPolicyOutput() EnvironmentConfigNodeConfigIpAllocationPolicyOutput {
	return i.ToEnvironmentConfigNodeConfigIpAllocationPolicyOutputWithContext(context.Background())
}

func (i EnvironmentConfigNodeConfigIpAllocationPolicyArgs) ToEnvironmentConfigNodeConfigIpAllocationPolicyOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigIpAllocationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigNodeConfigIpAllocationPolicyOutput)
}

func (i EnvironmentConfigNodeConfigIpAllocationPolicyArgs) ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput() EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return i.ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i EnvironmentConfigNodeConfigIpAllocationPolicyArgs) ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigNodeConfigIpAllocationPolicyOutput).ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(ctx)
}

// EnvironmentConfigNodeConfigIpAllocationPolicyPtrInput is an input type that accepts EnvironmentConfigNodeConfigIpAllocationPolicyArgs, EnvironmentConfigNodeConfigIpAllocationPolicyPtr and EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput values.
// You can construct a concrete instance of `EnvironmentConfigNodeConfigIpAllocationPolicyPtrInput` via:
//
// 		 EnvironmentConfigNodeConfigIpAllocationPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type EnvironmentConfigNodeConfigIpAllocationPolicyPtrInput interface {
	pulumi.Input

	ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput() EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput
	ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(context.Context) EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput
}

type environmentConfigNodeConfigIpAllocationPolicyPtrType EnvironmentConfigNodeConfigIpAllocationPolicyArgs

func EnvironmentConfigNodeConfigIpAllocationPolicyPtr(v *EnvironmentConfigNodeConfigIpAllocationPolicyArgs) EnvironmentConfigNodeConfigIpAllocationPolicyPtrInput {
	return (*environmentConfigNodeConfigIpAllocationPolicyPtrType)(v)
}

func (*environmentConfigNodeConfigIpAllocationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfigNodeConfigIpAllocationPolicy)(nil)).Elem()
}

func (i *environmentConfigNodeConfigIpAllocationPolicyPtrType) ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput() EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return i.ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i *environmentConfigNodeConfigIpAllocationPolicyPtrType) ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput)
}

type EnvironmentConfigNodeConfigIpAllocationPolicyOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigNodeConfigIpAllocationPolicy)(nil)).Elem()
}

func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ToEnvironmentConfigNodeConfigIpAllocationPolicyOutput() EnvironmentConfigNodeConfigIpAllocationPolicyOutput {
	return o
}

func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ToEnvironmentConfigNodeConfigIpAllocationPolicyOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigIpAllocationPolicyOutput {
	return o
}

func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput() EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return o.ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(context.Background())
}

func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfigIpAllocationPolicy) *EnvironmentConfigNodeConfigIpAllocationPolicy {
		return &v
	}).(EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput)
}

// The IP address range used to allocate IP addresses to pods in the cluster.
// Set to blank to have GKE choose a range with the default size.
// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
// Specify either `clusterSecondaryRangeName` or `clusterIpv4CidrBlock` but not both.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfigIpAllocationPolicy) *string { return v.ClusterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the cluster's secondary range used to allocate IP addresses to pods.
// Specify either `clusterSecondaryRangeName` or `clusterIpv4CidrBlock` but not both.
// This field is applicable only when `useIpAliases` is true.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfigIpAllocationPolicy) *string { return v.ClusterSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// The IP address range used to allocate IP addresses in this cluster.
// Set to blank to have GKE choose a range with the default size.
// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
// Specify either `servicesSecondaryRangeName` or `servicesIpv4CidrBlock` but not both.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfigIpAllocationPolicy) *string { return v.ServicesIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the services' secondary range used to allocate IP addresses to the cluster.
// Specify either `servicesSecondaryRangeName` or `servicesIpv4CidrBlock` but not both.
// This field is applicable only when `useIpAliases` is true.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfigIpAllocationPolicy) *string { return v.ServicesSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
// Defaults to true if the `ipAllocationBlock` is present in config.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyOutput) UseIpAliases() pulumi.BoolOutput {
	return o.ApplyT(func(v EnvironmentConfigNodeConfigIpAllocationPolicy) bool { return v.UseIpAliases }).(pulumi.BoolOutput)
}

type EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfigNodeConfigIpAllocationPolicy)(nil)).Elem()
}

func (o EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput() EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return o
}

func (o EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) ToEnvironmentConfigNodeConfigIpAllocationPolicyPtrOutputWithContext(ctx context.Context) EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput {
	return o
}

func (o EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) Elem() EnvironmentConfigNodeConfigIpAllocationPolicyOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfigIpAllocationPolicy) EnvironmentConfigNodeConfigIpAllocationPolicy {
		return *v
	}).(EnvironmentConfigNodeConfigIpAllocationPolicyOutput)
}

// The IP address range used to allocate IP addresses to pods in the cluster.
// Set to blank to have GKE choose a range with the default size.
// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
// Specify either `clusterSecondaryRangeName` or `clusterIpv4CidrBlock` but not both.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfigIpAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster's secondary range used to allocate IP addresses to pods.
// Specify either `clusterSecondaryRangeName` or `clusterIpv4CidrBlock` but not both.
// This field is applicable only when `useIpAliases` is true.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfigIpAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// The IP address range used to allocate IP addresses in this cluster.
// Set to blank to have GKE choose a range with the default size.
// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
// Specify either `servicesSecondaryRangeName` or `servicesIpv4CidrBlock` but not both.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfigIpAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the services' secondary range used to allocate IP addresses to the cluster.
// Specify either `servicesSecondaryRangeName` or `servicesIpv4CidrBlock` but not both.
// This field is applicable only when `useIpAliases` is true.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfigIpAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
// Defaults to true if the `ipAllocationBlock` is present in config.
func (o EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigNodeConfigIpAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.UseIpAliases
	}).(pulumi.BoolPtrOutput)
}

type EnvironmentConfigPrivateEnvironmentConfig struct {
	// -
	// If true, access to the public endpoint of the GKE cluster is denied.
	EnablePrivateEndpoint *bool `pulumi:"enablePrivateEndpoint"`
	// The IP range in CIDR notation to use for the hosted master network. This range is used
	// for assigning internal IP addresses to the cluster master or set of masters and to the
	// internal load balancer virtual IP. This range must not overlap with any other ranges
	// in use within the cluster's network.
	// If left blank, the default value of '172.16.0.0/28' is used.
	MasterIpv4CidrBlock *string `pulumi:"masterIpv4CidrBlock"`
}

// EnvironmentConfigPrivateEnvironmentConfigInput is an input type that accepts EnvironmentConfigPrivateEnvironmentConfigArgs and EnvironmentConfigPrivateEnvironmentConfigOutput values.
// You can construct a concrete instance of `EnvironmentConfigPrivateEnvironmentConfigInput` via:
//
// 		 EnvironmentConfigPrivateEnvironmentConfigArgs{...}
//
type EnvironmentConfigPrivateEnvironmentConfigInput interface {
	pulumi.Input

	ToEnvironmentConfigPrivateEnvironmentConfigOutput() EnvironmentConfigPrivateEnvironmentConfigOutput
	ToEnvironmentConfigPrivateEnvironmentConfigOutputWithContext(context.Context) EnvironmentConfigPrivateEnvironmentConfigOutput
}

type EnvironmentConfigPrivateEnvironmentConfigArgs struct {
	// -
	// If true, access to the public endpoint of the GKE cluster is denied.
	EnablePrivateEndpoint pulumi.BoolPtrInput `pulumi:"enablePrivateEndpoint"`
	// The IP range in CIDR notation to use for the hosted master network. This range is used
	// for assigning internal IP addresses to the cluster master or set of masters and to the
	// internal load balancer virtual IP. This range must not overlap with any other ranges
	// in use within the cluster's network.
	// If left blank, the default value of '172.16.0.0/28' is used.
	MasterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"masterIpv4CidrBlock"`
}

func (EnvironmentConfigPrivateEnvironmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigPrivateEnvironmentConfig)(nil)).Elem()
}

func (i EnvironmentConfigPrivateEnvironmentConfigArgs) ToEnvironmentConfigPrivateEnvironmentConfigOutput() EnvironmentConfigPrivateEnvironmentConfigOutput {
	return i.ToEnvironmentConfigPrivateEnvironmentConfigOutputWithContext(context.Background())
}

func (i EnvironmentConfigPrivateEnvironmentConfigArgs) ToEnvironmentConfigPrivateEnvironmentConfigOutputWithContext(ctx context.Context) EnvironmentConfigPrivateEnvironmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigPrivateEnvironmentConfigOutput)
}

func (i EnvironmentConfigPrivateEnvironmentConfigArgs) ToEnvironmentConfigPrivateEnvironmentConfigPtrOutput() EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return i.ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i EnvironmentConfigPrivateEnvironmentConfigArgs) ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigPrivateEnvironmentConfigOutput).ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(ctx)
}

// EnvironmentConfigPrivateEnvironmentConfigPtrInput is an input type that accepts EnvironmentConfigPrivateEnvironmentConfigArgs, EnvironmentConfigPrivateEnvironmentConfigPtr and EnvironmentConfigPrivateEnvironmentConfigPtrOutput values.
// You can construct a concrete instance of `EnvironmentConfigPrivateEnvironmentConfigPtrInput` via:
//
// 		 EnvironmentConfigPrivateEnvironmentConfigArgs{...}
//
//  or:
//
// 		 nil
//
type EnvironmentConfigPrivateEnvironmentConfigPtrInput interface {
	pulumi.Input

	ToEnvironmentConfigPrivateEnvironmentConfigPtrOutput() EnvironmentConfigPrivateEnvironmentConfigPtrOutput
	ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(context.Context) EnvironmentConfigPrivateEnvironmentConfigPtrOutput
}

type environmentConfigPrivateEnvironmentConfigPtrType EnvironmentConfigPrivateEnvironmentConfigArgs

func EnvironmentConfigPrivateEnvironmentConfigPtr(v *EnvironmentConfigPrivateEnvironmentConfigArgs) EnvironmentConfigPrivateEnvironmentConfigPtrInput {
	return (*environmentConfigPrivateEnvironmentConfigPtrType)(v)
}

func (*environmentConfigPrivateEnvironmentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfigPrivateEnvironmentConfig)(nil)).Elem()
}

func (i *environmentConfigPrivateEnvironmentConfigPtrType) ToEnvironmentConfigPrivateEnvironmentConfigPtrOutput() EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return i.ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i *environmentConfigPrivateEnvironmentConfigPtrType) ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigPrivateEnvironmentConfigPtrOutput)
}

type EnvironmentConfigPrivateEnvironmentConfigOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigPrivateEnvironmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigPrivateEnvironmentConfig)(nil)).Elem()
}

func (o EnvironmentConfigPrivateEnvironmentConfigOutput) ToEnvironmentConfigPrivateEnvironmentConfigOutput() EnvironmentConfigPrivateEnvironmentConfigOutput {
	return o
}

func (o EnvironmentConfigPrivateEnvironmentConfigOutput) ToEnvironmentConfigPrivateEnvironmentConfigOutputWithContext(ctx context.Context) EnvironmentConfigPrivateEnvironmentConfigOutput {
	return o
}

func (o EnvironmentConfigPrivateEnvironmentConfigOutput) ToEnvironmentConfigPrivateEnvironmentConfigPtrOutput() EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return o.ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (o EnvironmentConfigPrivateEnvironmentConfigOutput) ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigPrivateEnvironmentConfig) *EnvironmentConfigPrivateEnvironmentConfig {
		return &v
	}).(EnvironmentConfigPrivateEnvironmentConfigPtrOutput)
}

// -
// If true, access to the public endpoint of the GKE cluster is denied.
func (o EnvironmentConfigPrivateEnvironmentConfigOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigPrivateEnvironmentConfig) *bool { return v.EnablePrivateEndpoint }).(pulumi.BoolPtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range is used
// for assigning internal IP addresses to the cluster master or set of masters and to the
// internal load balancer virtual IP. This range must not overlap with any other ranges
// in use within the cluster's network.
// If left blank, the default value of '172.16.0.0/28' is used.
func (o EnvironmentConfigPrivateEnvironmentConfigOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigPrivateEnvironmentConfig) *string { return v.MasterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

type EnvironmentConfigPrivateEnvironmentConfigPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigPrivateEnvironmentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfigPrivateEnvironmentConfig)(nil)).Elem()
}

func (o EnvironmentConfigPrivateEnvironmentConfigPtrOutput) ToEnvironmentConfigPrivateEnvironmentConfigPtrOutput() EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return o
}

func (o EnvironmentConfigPrivateEnvironmentConfigPtrOutput) ToEnvironmentConfigPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPrivateEnvironmentConfigPtrOutput {
	return o
}

func (o EnvironmentConfigPrivateEnvironmentConfigPtrOutput) Elem() EnvironmentConfigPrivateEnvironmentConfigOutput {
	return o.ApplyT(func(v *EnvironmentConfigPrivateEnvironmentConfig) EnvironmentConfigPrivateEnvironmentConfig {
		return *v
	}).(EnvironmentConfigPrivateEnvironmentConfigOutput)
}

// -
// If true, access to the public endpoint of the GKE cluster is denied.
func (o EnvironmentConfigPrivateEnvironmentConfigPtrOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigPrivateEnvironmentConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEndpoint
	}).(pulumi.BoolPtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range is used
// for assigning internal IP addresses to the cluster master or set of masters and to the
// internal load balancer virtual IP. This range must not overlap with any other ranges
// in use within the cluster's network.
// If left blank, the default value of '172.16.0.0/28' is used.
func (o EnvironmentConfigPrivateEnvironmentConfigPtrOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigPrivateEnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.MasterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

type EnvironmentConfigSoftwareConfig struct {
	// -
	// (Optional) Apache Airflow configuration properties to override. Property keys contain the section and property names,
	// separated by a hyphen, for example "core-dags_are_paused_at_creation".
	AirflowConfigOverrides map[string]string `pulumi:"airflowConfigOverrides"`
	// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
	// Environment variable names must match the regular expression `[a-zA-Z_][a-zA-Z0-9_]*`.
	// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
	// `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names:
	// ```
	// AIRFLOW_HOME
	// C_FORCE_ROOT
	// CONTAINER_NAME
	// DAGS_FOLDER
	// GCP_PROJECT
	// GCS_BUCKET
	// GKE_CLUSTER_NAME
	// SQL_DATABASE
	// SQL_INSTANCE
	// SQL_PASSWORD
	// SQL_PROJECT
	// SQL_REGION
	// SQL_USER
	// ```
	EnvVariables map[string]string `pulumi:"envVariables"`
	// -
	// The version of the software running in the environment. This encapsulates both the version of Cloud Composer
	// functionality and the version of Apache Airflow. It must match the regular expression
	// `composer-[0-9]+\.[0-9]+(\.[0-9]+)?-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
	// The Cloud Composer portion of the version is a semantic version.
	// The portion of the image version following 'airflow-' is an official Apache Airflow repository release name.
	// See [documentation](https://cloud.google.com/composer/docs/reference/rest/v1beta1/projects.locations.environments#softwareconfig)
	// for allowed release names.
	ImageVersion *string `pulumi:"imageVersion"`
	// Custom Python Package Index (PyPI) packages to be installed
	// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
	// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
	// pinning it to a version specifier, use the empty string as the value.
	PypiPackages map[string]string `pulumi:"pypiPackages"`
	// -
	// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
	// Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
	PythonVersion *string `pulumi:"pythonVersion"`
}

// EnvironmentConfigSoftwareConfigInput is an input type that accepts EnvironmentConfigSoftwareConfigArgs and EnvironmentConfigSoftwareConfigOutput values.
// You can construct a concrete instance of `EnvironmentConfigSoftwareConfigInput` via:
//
// 		 EnvironmentConfigSoftwareConfigArgs{...}
//
type EnvironmentConfigSoftwareConfigInput interface {
	pulumi.Input

	ToEnvironmentConfigSoftwareConfigOutput() EnvironmentConfigSoftwareConfigOutput
	ToEnvironmentConfigSoftwareConfigOutputWithContext(context.Context) EnvironmentConfigSoftwareConfigOutput
}

type EnvironmentConfigSoftwareConfigArgs struct {
	// -
	// (Optional) Apache Airflow configuration properties to override. Property keys contain the section and property names,
	// separated by a hyphen, for example "core-dags_are_paused_at_creation".
	AirflowConfigOverrides pulumi.StringMapInput `pulumi:"airflowConfigOverrides"`
	// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
	// Environment variable names must match the regular expression `[a-zA-Z_][a-zA-Z0-9_]*`.
	// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
	// `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names:
	// ```
	// AIRFLOW_HOME
	// C_FORCE_ROOT
	// CONTAINER_NAME
	// DAGS_FOLDER
	// GCP_PROJECT
	// GCS_BUCKET
	// GKE_CLUSTER_NAME
	// SQL_DATABASE
	// SQL_INSTANCE
	// SQL_PASSWORD
	// SQL_PROJECT
	// SQL_REGION
	// SQL_USER
	// ```
	EnvVariables pulumi.StringMapInput `pulumi:"envVariables"`
	// -
	// The version of the software running in the environment. This encapsulates both the version of Cloud Composer
	// functionality and the version of Apache Airflow. It must match the regular expression
	// `composer-[0-9]+\.[0-9]+(\.[0-9]+)?-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
	// The Cloud Composer portion of the version is a semantic version.
	// The portion of the image version following 'airflow-' is an official Apache Airflow repository release name.
	// See [documentation](https://cloud.google.com/composer/docs/reference/rest/v1beta1/projects.locations.environments#softwareconfig)
	// for allowed release names.
	ImageVersion pulumi.StringPtrInput `pulumi:"imageVersion"`
	// Custom Python Package Index (PyPI) packages to be installed
	// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
	// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
	// pinning it to a version specifier, use the empty string as the value.
	PypiPackages pulumi.StringMapInput `pulumi:"pypiPackages"`
	// -
	// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
	// Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
	PythonVersion pulumi.StringPtrInput `pulumi:"pythonVersion"`
}

func (EnvironmentConfigSoftwareConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigSoftwareConfig)(nil)).Elem()
}

func (i EnvironmentConfigSoftwareConfigArgs) ToEnvironmentConfigSoftwareConfigOutput() EnvironmentConfigSoftwareConfigOutput {
	return i.ToEnvironmentConfigSoftwareConfigOutputWithContext(context.Background())
}

func (i EnvironmentConfigSoftwareConfigArgs) ToEnvironmentConfigSoftwareConfigOutputWithContext(ctx context.Context) EnvironmentConfigSoftwareConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigSoftwareConfigOutput)
}

func (i EnvironmentConfigSoftwareConfigArgs) ToEnvironmentConfigSoftwareConfigPtrOutput() EnvironmentConfigSoftwareConfigPtrOutput {
	return i.ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(context.Background())
}

func (i EnvironmentConfigSoftwareConfigArgs) ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigSoftwareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigSoftwareConfigOutput).ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(ctx)
}

// EnvironmentConfigSoftwareConfigPtrInput is an input type that accepts EnvironmentConfigSoftwareConfigArgs, EnvironmentConfigSoftwareConfigPtr and EnvironmentConfigSoftwareConfigPtrOutput values.
// You can construct a concrete instance of `EnvironmentConfigSoftwareConfigPtrInput` via:
//
// 		 EnvironmentConfigSoftwareConfigArgs{...}
//
//  or:
//
// 		 nil
//
type EnvironmentConfigSoftwareConfigPtrInput interface {
	pulumi.Input

	ToEnvironmentConfigSoftwareConfigPtrOutput() EnvironmentConfigSoftwareConfigPtrOutput
	ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(context.Context) EnvironmentConfigSoftwareConfigPtrOutput
}

type environmentConfigSoftwareConfigPtrType EnvironmentConfigSoftwareConfigArgs

func EnvironmentConfigSoftwareConfigPtr(v *EnvironmentConfigSoftwareConfigArgs) EnvironmentConfigSoftwareConfigPtrInput {
	return (*environmentConfigSoftwareConfigPtrType)(v)
}

func (*environmentConfigSoftwareConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfigSoftwareConfig)(nil)).Elem()
}

func (i *environmentConfigSoftwareConfigPtrType) ToEnvironmentConfigSoftwareConfigPtrOutput() EnvironmentConfigSoftwareConfigPtrOutput {
	return i.ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(context.Background())
}

func (i *environmentConfigSoftwareConfigPtrType) ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigSoftwareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigSoftwareConfigPtrOutput)
}

type EnvironmentConfigSoftwareConfigOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigSoftwareConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigSoftwareConfig)(nil)).Elem()
}

func (o EnvironmentConfigSoftwareConfigOutput) ToEnvironmentConfigSoftwareConfigOutput() EnvironmentConfigSoftwareConfigOutput {
	return o
}

func (o EnvironmentConfigSoftwareConfigOutput) ToEnvironmentConfigSoftwareConfigOutputWithContext(ctx context.Context) EnvironmentConfigSoftwareConfigOutput {
	return o
}

func (o EnvironmentConfigSoftwareConfigOutput) ToEnvironmentConfigSoftwareConfigPtrOutput() EnvironmentConfigSoftwareConfigPtrOutput {
	return o.ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(context.Background())
}

func (o EnvironmentConfigSoftwareConfigOutput) ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigSoftwareConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigSoftwareConfig) *EnvironmentConfigSoftwareConfig {
		return &v
	}).(EnvironmentConfigSoftwareConfigPtrOutput)
}

// -
// (Optional) Apache Airflow configuration properties to override. Property keys contain the section and property names,
// separated by a hyphen, for example "core-dags_are_paused_at_creation".
func (o EnvironmentConfigSoftwareConfigOutput) AirflowConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentConfigSoftwareConfig) map[string]string { return v.AirflowConfigOverrides }).(pulumi.StringMapOutput)
}

// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
// Environment variable names must match the regular expression `[a-zA-Z_][a-zA-Z0-9_]*`.
// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
// `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names:
// ```
// AIRFLOW_HOME
// C_FORCE_ROOT
// CONTAINER_NAME
// DAGS_FOLDER
// GCP_PROJECT
// GCS_BUCKET
// GKE_CLUSTER_NAME
// SQL_DATABASE
// SQL_INSTANCE
// SQL_PASSWORD
// SQL_PROJECT
// SQL_REGION
// SQL_USER
// ```
func (o EnvironmentConfigSoftwareConfigOutput) EnvVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentConfigSoftwareConfig) map[string]string { return v.EnvVariables }).(pulumi.StringMapOutput)
}

// -
// The version of the software running in the environment. This encapsulates both the version of Cloud Composer
// functionality and the version of Apache Airflow. It must match the regular expression
// `composer-[0-9]+\.[0-9]+(\.[0-9]+)?-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
// The Cloud Composer portion of the version is a semantic version.
// The portion of the image version following 'airflow-' is an official Apache Airflow repository release name.
// See [documentation](https://cloud.google.com/composer/docs/reference/rest/v1beta1/projects.locations.environments#softwareconfig)
// for allowed release names.
func (o EnvironmentConfigSoftwareConfigOutput) ImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigSoftwareConfig) *string { return v.ImageVersion }).(pulumi.StringPtrOutput)
}

// Custom Python Package Index (PyPI) packages to be installed
// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
// pinning it to a version specifier, use the empty string as the value.
func (o EnvironmentConfigSoftwareConfigOutput) PypiPackages() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentConfigSoftwareConfig) map[string]string { return v.PypiPackages }).(pulumi.StringMapOutput)
}

// -
// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
// Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
func (o EnvironmentConfigSoftwareConfigOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfigSoftwareConfig) *string { return v.PythonVersion }).(pulumi.StringPtrOutput)
}

type EnvironmentConfigSoftwareConfigPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigSoftwareConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfigSoftwareConfig)(nil)).Elem()
}

func (o EnvironmentConfigSoftwareConfigPtrOutput) ToEnvironmentConfigSoftwareConfigPtrOutput() EnvironmentConfigSoftwareConfigPtrOutput {
	return o
}

func (o EnvironmentConfigSoftwareConfigPtrOutput) ToEnvironmentConfigSoftwareConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigSoftwareConfigPtrOutput {
	return o
}

func (o EnvironmentConfigSoftwareConfigPtrOutput) Elem() EnvironmentConfigSoftwareConfigOutput {
	return o.ApplyT(func(v *EnvironmentConfigSoftwareConfig) EnvironmentConfigSoftwareConfig { return *v }).(EnvironmentConfigSoftwareConfigOutput)
}

// -
// (Optional) Apache Airflow configuration properties to override. Property keys contain the section and property names,
// separated by a hyphen, for example "core-dags_are_paused_at_creation".
func (o EnvironmentConfigSoftwareConfigPtrOutput) AirflowConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnvironmentConfigSoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.AirflowConfigOverrides
	}).(pulumi.StringMapOutput)
}

// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
// Environment variable names must match the regular expression `[a-zA-Z_][a-zA-Z0-9_]*`.
// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
// `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names:
// ```
// AIRFLOW_HOME
// C_FORCE_ROOT
// CONTAINER_NAME
// DAGS_FOLDER
// GCP_PROJECT
// GCS_BUCKET
// GKE_CLUSTER_NAME
// SQL_DATABASE
// SQL_INSTANCE
// SQL_PASSWORD
// SQL_PROJECT
// SQL_REGION
// SQL_USER
// ```
func (o EnvironmentConfigSoftwareConfigPtrOutput) EnvVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnvironmentConfigSoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvVariables
	}).(pulumi.StringMapOutput)
}

// -
// The version of the software running in the environment. This encapsulates both the version of Cloud Composer
// functionality and the version of Apache Airflow. It must match the regular expression
// `composer-[0-9]+\.[0-9]+(\.[0-9]+)?-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
// The Cloud Composer portion of the version is a semantic version.
// The portion of the image version following 'airflow-' is an official Apache Airflow repository release name.
// See [documentation](https://cloud.google.com/composer/docs/reference/rest/v1beta1/projects.locations.environments#softwareconfig)
// for allowed release names.
func (o EnvironmentConfigSoftwareConfigPtrOutput) ImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigSoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.ImageVersion
	}).(pulumi.StringPtrOutput)
}

// Custom Python Package Index (PyPI) packages to be installed
// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
// pinning it to a version specifier, use the empty string as the value.
func (o EnvironmentConfigSoftwareConfigPtrOutput) PypiPackages() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnvironmentConfigSoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.PypiPackages
	}).(pulumi.StringMapOutput)
}

// -
// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
// Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
func (o EnvironmentConfigSoftwareConfigPtrOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfigSoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.PythonVersion
	}).(pulumi.StringPtrOutput)
}

type GetImageVersionsImageVersion struct {
	// The string identifier of the image version, in the form: "composer-x.y.z-airflow-a.b(.c)"
	ImageVersionId string `pulumi:"imageVersionId"`
	// Supported python versions for this image version
	SupportedPythonVersions []string `pulumi:"supportedPythonVersions"`
}

// GetImageVersionsImageVersionInput is an input type that accepts GetImageVersionsImageVersionArgs and GetImageVersionsImageVersionOutput values.
// You can construct a concrete instance of `GetImageVersionsImageVersionInput` via:
//
// 		 GetImageVersionsImageVersionArgs{...}
//
type GetImageVersionsImageVersionInput interface {
	pulumi.Input

	ToGetImageVersionsImageVersionOutput() GetImageVersionsImageVersionOutput
	ToGetImageVersionsImageVersionOutputWithContext(context.Context) GetImageVersionsImageVersionOutput
}

type GetImageVersionsImageVersionArgs struct {
	// The string identifier of the image version, in the form: "composer-x.y.z-airflow-a.b(.c)"
	ImageVersionId pulumi.StringInput `pulumi:"imageVersionId"`
	// Supported python versions for this image version
	SupportedPythonVersions pulumi.StringArrayInput `pulumi:"supportedPythonVersions"`
}

func (GetImageVersionsImageVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageVersionsImageVersion)(nil)).Elem()
}

func (i GetImageVersionsImageVersionArgs) ToGetImageVersionsImageVersionOutput() GetImageVersionsImageVersionOutput {
	return i.ToGetImageVersionsImageVersionOutputWithContext(context.Background())
}

func (i GetImageVersionsImageVersionArgs) ToGetImageVersionsImageVersionOutputWithContext(ctx context.Context) GetImageVersionsImageVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageVersionsImageVersionOutput)
}

// GetImageVersionsImageVersionArrayInput is an input type that accepts GetImageVersionsImageVersionArray and GetImageVersionsImageVersionArrayOutput values.
// You can construct a concrete instance of `GetImageVersionsImageVersionArrayInput` via:
//
// 		 GetImageVersionsImageVersionArray{ GetImageVersionsImageVersionArgs{...} }
//
type GetImageVersionsImageVersionArrayInput interface {
	pulumi.Input

	ToGetImageVersionsImageVersionArrayOutput() GetImageVersionsImageVersionArrayOutput
	ToGetImageVersionsImageVersionArrayOutputWithContext(context.Context) GetImageVersionsImageVersionArrayOutput
}

type GetImageVersionsImageVersionArray []GetImageVersionsImageVersionInput

func (GetImageVersionsImageVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageVersionsImageVersion)(nil)).Elem()
}

func (i GetImageVersionsImageVersionArray) ToGetImageVersionsImageVersionArrayOutput() GetImageVersionsImageVersionArrayOutput {
	return i.ToGetImageVersionsImageVersionArrayOutputWithContext(context.Background())
}

func (i GetImageVersionsImageVersionArray) ToGetImageVersionsImageVersionArrayOutputWithContext(ctx context.Context) GetImageVersionsImageVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageVersionsImageVersionArrayOutput)
}

type GetImageVersionsImageVersionOutput struct{ *pulumi.OutputState }

func (GetImageVersionsImageVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageVersionsImageVersion)(nil)).Elem()
}

func (o GetImageVersionsImageVersionOutput) ToGetImageVersionsImageVersionOutput() GetImageVersionsImageVersionOutput {
	return o
}

func (o GetImageVersionsImageVersionOutput) ToGetImageVersionsImageVersionOutputWithContext(ctx context.Context) GetImageVersionsImageVersionOutput {
	return o
}

// The string identifier of the image version, in the form: "composer-x.y.z-airflow-a.b(.c)"
func (o GetImageVersionsImageVersionOutput) ImageVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageVersionsImageVersion) string { return v.ImageVersionId }).(pulumi.StringOutput)
}

// Supported python versions for this image version
func (o GetImageVersionsImageVersionOutput) SupportedPythonVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImageVersionsImageVersion) []string { return v.SupportedPythonVersions }).(pulumi.StringArrayOutput)
}

type GetImageVersionsImageVersionArrayOutput struct{ *pulumi.OutputState }

func (GetImageVersionsImageVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageVersionsImageVersion)(nil)).Elem()
}

func (o GetImageVersionsImageVersionArrayOutput) ToGetImageVersionsImageVersionArrayOutput() GetImageVersionsImageVersionArrayOutput {
	return o
}

func (o GetImageVersionsImageVersionArrayOutput) ToGetImageVersionsImageVersionArrayOutputWithContext(ctx context.Context) GetImageVersionsImageVersionArrayOutput {
	return o
}

func (o GetImageVersionsImageVersionArrayOutput) Index(i pulumi.IntInput) GetImageVersionsImageVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageVersionsImageVersion {
		return vs[0].([]GetImageVersionsImageVersion)[vs[1].(int)]
	}).(GetImageVersionsImageVersionOutput)
}

func init() {
	pulumi.RegisterOutputType(EnvironmentConfigOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigNodeConfigOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigNodeConfigIpAllocationPolicyOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigNodeConfigIpAllocationPolicyPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigPrivateEnvironmentConfigOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigPrivateEnvironmentConfigPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigSoftwareConfigOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigSoftwareConfigPtrOutput{})
	pulumi.RegisterOutputType(GetImageVersionsImageVersionOutput{})
	pulumi.RegisterOutputType(GetImageVersionsImageVersionArrayOutput{})
}
