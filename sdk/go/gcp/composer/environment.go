// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package composer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An environment for running orchestration tasks.
//
// Environments run Apache Airflow software on Google infrastructure.
//
// To get more information about Environments, see:
//
// * [API documentation](https://cloud.google.com/composer/docs/reference/rest/)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/composer/docs)
//     * [Configuring Shared VPC for Composer Environments](https://cloud.google.com/composer/docs/how-to/managing/configuring-shared-vpc)
// * [Apache Airflow Documentation](http://airflow.apache.org/)
//
// > **Warning:** We **STRONGLY** recommend you read the [GCP guides](https://cloud.google.com/composer/docs/how-to)
//   as the Environment resource requires a long deployment process and involves several layers of GCP infrastructure,
//   including a Kubernetes Engine cluster, Cloud Storage, and Compute networking resources. Due to limitations of the API,
//   This provider will not be able to automatically find or manage many of these underlying resources. In particular:
//   * It can take up to one hour to create or update an environment resource. In addition, GCP may only detect some
//     errors in configuration when they are used (e.g. ~40-50 minutes into the creation process), and is prone to limited
//     error reporting. If you encounter confusing or uninformative errors, please verify your configuration is valid
//     against GCP Cloud Composer before filing bugs against this provider.
//   * **Environments create Google Cloud Storage buckets that do not get cleaned up automatically** on environment
//     deletion. [More about Composer's use of Cloud Storage](https://cloud.google.com/composer/docs/concepts/cloud-storage).
//   * Please review the [known issues](https://cloud.google.com/composer/docs/known-issues) for Composer if you are having problems.
//
// ## Example Usage
// ### Basic Usage
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/composer"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := composer.NewEnvironment(ctx, "test", &composer.EnvironmentArgs{
// 			Region: pulumi.String("us-central1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### With GKE and Compute Resource Dependencies
//
// **NOTE** To use custom service accounts, you need to give at least `role/composer.worker` to the service account being used by the GKE Nodes on the Composer project.
// You may need to assign additional roles depending on what the Airflow DAGs will be running.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/composer"
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/projects"
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/serviceAccount"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testNetwork, err := compute.NewNetwork(ctx, "testNetwork", &compute.NetworkArgs{
// 			AutoCreateSubnetworks: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		testSubnetwork, err := compute.NewSubnetwork(ctx, "testSubnetwork", &compute.SubnetworkArgs{
// 			IpCidrRange: pulumi.String("10.2.0.0/16"),
// 			Region:      pulumi.String("us-central1"),
// 			Network:     testNetwork.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		testAccount, err := serviceAccount.NewAccount(ctx, "testAccount", &serviceAccount.AccountArgs{
// 			AccountId:   pulumi.String("composer-env-account"),
// 			DisplayName: pulumi.String("Test Service Account for Composer Environment"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = composer.NewEnvironment(ctx, "testEnvironment", &composer.EnvironmentArgs{
// 			Region: pulumi.String("us-central1"),
// 			Config: &composer.EnvironmentConfigArgs{
// 				NodeCount: pulumi.Int(4),
// 				NodeConfig: &composer.EnvironmentConfigNodeConfigArgs{
// 					Zone:           pulumi.String("us-central1-a"),
// 					MachineType:    pulumi.String("e2-medium"),
// 					Network:        testNetwork.ID(),
// 					Subnetwork:     testSubnetwork.ID(),
// 					ServiceAccount: testAccount.Name,
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = projects.NewIAMMember(ctx, "composer_worker", &projects.IAMMemberArgs{
// 			Role: pulumi.String("roles/composer.worker"),
// 			Member: testAccount.Email.ApplyT(func(email string) (string, error) {
// 				return fmt.Sprintf("%v%v", "serviceAccount:", email), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### With Software (Airflow) Config
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/composer"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := composer.NewEnvironment(ctx, "test", &composer.EnvironmentArgs{
// 			Config: &composer.EnvironmentConfigArgs{
// 				SoftwareConfig: &composer.EnvironmentConfigSoftwareConfigArgs{
// 					AirflowConfigOverrides: pulumi.StringMap{
// 						"core-loadExample": pulumi.String("True"),
// 					},
// 					EnvVariables: pulumi.StringMap{
// 						"FOO": pulumi.String("bar"),
// 					},
// 					PypiPackages: pulumi.StringMap{
// 						"numpy": pulumi.String(""),
// 						"scipy": pulumi.String("==1.1.0"),
// 					},
// 				},
// 			},
// 			Region: pulumi.String("us-central1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Environment can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:composer/environment:Environment default projects/{{project}}/locations/{{region}}/environments/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:composer/environment:Environment default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:composer/environment:Environment default {{name}}
// ```
type Environment struct {
	pulumi.CustomResourceState

	// Configuration parameters for this environment  Structure is documented below.
	Config EnvironmentConfigOutput `pulumi:"config"`
	// User-defined labels for this environment. The labels map can contain
	// no more than 64 entries. Entries of the labels map are UTF8 strings
	// that comply with the following restrictions:
	// Label keys must be between 1 and 63 characters long and must conform
	// to the following regular expression: `a-z?`.
	// Label values must be between 0 and 63 characters long and must
	// conform to the regular expression `(a-z?)?`.
	// No more than 64 labels can be associated with a given environment.
	// Both keys and values must be <= 128 bytes in size.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the environment
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region pulumi.StringPtrOutput `pulumi:"region"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		args = &EnvironmentArgs{}
	}

	var resource Environment
	err := ctx.RegisterResource("gcp:composer/environment:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("gcp:composer/environment:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
	// Configuration parameters for this environment  Structure is documented below.
	Config *EnvironmentConfig `pulumi:"config"`
	// User-defined labels for this environment. The labels map can contain
	// no more than 64 entries. Entries of the labels map are UTF8 strings
	// that comply with the following restrictions:
	// Label keys must be between 1 and 63 characters long and must conform
	// to the following regular expression: `a-z?`.
	// Label values must be between 0 and 63 characters long and must
	// conform to the regular expression `(a-z?)?`.
	// No more than 64 labels can be associated with a given environment.
	// Both keys and values must be <= 128 bytes in size.
	Labels map[string]string `pulumi:"labels"`
	// Name of the environment
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region *string `pulumi:"region"`
}

type EnvironmentState struct {
	// Configuration parameters for this environment  Structure is documented below.
	Config EnvironmentConfigPtrInput
	// User-defined labels for this environment. The labels map can contain
	// no more than 64 entries. Entries of the labels map are UTF8 strings
	// that comply with the following restrictions:
	// Label keys must be between 1 and 63 characters long and must conform
	// to the following regular expression: `a-z?`.
	// Label values must be between 0 and 63 characters long and must
	// conform to the regular expression `(a-z?)?`.
	// No more than 64 labels can be associated with a given environment.
	// Both keys and values must be <= 128 bytes in size.
	Labels pulumi.StringMapInput
	// Name of the environment
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The location or Compute Engine region for the environment.
	Region pulumi.StringPtrInput
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	// Configuration parameters for this environment  Structure is documented below.
	Config *EnvironmentConfig `pulumi:"config"`
	// User-defined labels for this environment. The labels map can contain
	// no more than 64 entries. Entries of the labels map are UTF8 strings
	// that comply with the following restrictions:
	// Label keys must be between 1 and 63 characters long and must conform
	// to the following regular expression: `a-z?`.
	// Label values must be between 0 and 63 characters long and must
	// conform to the regular expression `(a-z?)?`.
	// No more than 64 labels can be associated with a given environment.
	// Both keys and values must be <= 128 bytes in size.
	Labels map[string]string `pulumi:"labels"`
	// Name of the environment
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location or Compute Engine region for the environment.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// Configuration parameters for this environment  Structure is documented below.
	Config EnvironmentConfigPtrInput
	// User-defined labels for this environment. The labels map can contain
	// no more than 64 entries. Entries of the labels map are UTF8 strings
	// that comply with the following restrictions:
	// Label keys must be between 1 and 63 characters long and must conform
	// to the following regular expression: `a-z?`.
	// Label values must be between 0 and 63 characters long and must
	// conform to the regular expression `(a-z?)?`.
	// No more than 64 labels can be associated with a given environment.
	// Both keys and values must be <= 128 bytes in size.
	Labels pulumi.StringMapInput
	// Name of the environment
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The location or Compute Engine region for the environment.
	Region pulumi.StringPtrInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil))
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

func (i *Environment) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentPtrOutput)
}

type EnvironmentPtrInput interface {
	pulumi.Input

	ToEnvironmentPtrOutput() EnvironmentPtrOutput
	ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput
}

type environmentPtrType EnvironmentArgs

func (*environmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil))
}

func (i *environmentPtrType) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i *environmentPtrType) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentPtrOutput)
}

// EnvironmentArrayInput is an input type that accepts EnvironmentArray and EnvironmentArrayOutput values.
// You can construct a concrete instance of `EnvironmentArrayInput` via:
//
//          EnvironmentArray{ EnvironmentArgs{...} }
type EnvironmentArrayInput interface {
	pulumi.Input

	ToEnvironmentArrayOutput() EnvironmentArrayOutput
	ToEnvironmentArrayOutputWithContext(context.Context) EnvironmentArrayOutput
}

type EnvironmentArray []EnvironmentInput

func (EnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Environment)(nil))
}

func (i EnvironmentArray) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return i.ToEnvironmentArrayOutputWithContext(context.Background())
}

func (i EnvironmentArray) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentArrayOutput)
}

// EnvironmentMapInput is an input type that accepts EnvironmentMap and EnvironmentMapOutput values.
// You can construct a concrete instance of `EnvironmentMapInput` via:
//
//          EnvironmentMap{ "key": EnvironmentArgs{...} }
type EnvironmentMapInput interface {
	pulumi.Input

	ToEnvironmentMapOutput() EnvironmentMapOutput
	ToEnvironmentMapOutputWithContext(context.Context) EnvironmentMapOutput
}

type EnvironmentMap map[string]EnvironmentInput

func (EnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Environment)(nil))
}

func (i EnvironmentMap) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return i.ToEnvironmentMapOutputWithContext(context.Background())
}

func (i EnvironmentMap) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMapOutput)
}

type EnvironmentOutput struct {
	*pulumi.OutputState
}

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil))
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (o EnvironmentOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o.ApplyT(func(v Environment) *Environment {
		return &v
	}).(EnvironmentPtrOutput)
}

type EnvironmentPtrOutput struct {
	*pulumi.OutputState
}

func (EnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil))
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o
}

type EnvironmentArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Environment)(nil))
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) Index(i pulumi.IntInput) EnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Environment {
		return vs[0].([]Environment)[vs[1].(int)]
	}).(EnvironmentOutput)
}

type EnvironmentMapOutput struct{ *pulumi.OutputState }

func (EnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Environment)(nil))
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) MapIndex(k pulumi.StringInput) EnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Environment {
		return vs[0].(map[string]Environment)[vs[1].(string)]
	}).(EnvironmentOutput)
}

func init() {
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentMapOutput{})
}
