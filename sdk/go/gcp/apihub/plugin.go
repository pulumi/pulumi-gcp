// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apihub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A plugin resource in the API hub.
//
// ## Example Usage
//
// ### Apihub Plugin Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apihub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apihub.NewPlugin(ctx, "apihub_plugin_full", &apihub.PluginArgs{
//				Location:       pulumi.String("us-central1"),
//				DisplayName:    pulumi.String("Test Plugin"),
//				Description:    pulumi.String("Test description"),
//				PluginId:       pulumi.String("plugin-full"),
//				PluginCategory: pulumi.String("API_GATEWAY"),
//				ActionsConfigs: apihub.PluginActionsConfigArray{
//					&apihub.PluginActionsConfigArgs{
//						Id:          pulumi.String("sync-metadata"),
//						DisplayName: pulumi.String("Sync Metadata"),
//						Description: pulumi.String("Syncs API metadata."),
//						TriggerMode: pulumi.String("API_HUB_SCHEDULE_TRIGGER"),
//					},
//				},
//				Documentation: &apihub.PluginDocumentationArgs{
//					ExternalUri: pulumi.String("https://example.com/plugin-documentation"),
//				},
//				HostingService: &apihub.PluginHostingServiceArgs{
//					ServiceUri: pulumi.String("https://your-plugin-service.example.com/api"),
//				},
//				ConfigTemplate: &apihub.PluginConfigTemplateArgs{
//					AuthConfigTemplate: &apihub.PluginConfigTemplateAuthConfigTemplateArgs{
//						SupportedAuthTypes: pulumi.StringArray{
//							pulumi.String("NO_AUTH"),
//							pulumi.String("USER_PASSWORD"),
//						},
//						ServiceAccount: &apihub.PluginConfigTemplateAuthConfigTemplateServiceAccountArgs{
//							ServiceAccount: pulumi.String("test@developer.gserviceaccount.com"),
//						},
//					},
//					AdditionalConfigTemplates: apihub.PluginConfigTemplateAdditionalConfigTemplateArray{
//						&apihub.PluginConfigTemplateAdditionalConfigTemplateArgs{
//							Id:              pulumi.String("string-val"),
//							Description:     pulumi.String("API key for the service."),
//							ValueType:       pulumi.String("STRING"),
//							Required:        pulumi.Bool(false),
//							ValidationRegex: pulumi.String("^[a-zA-Z0-9]{5,20}$"),
//						},
//						&apihub.PluginConfigTemplateAdditionalConfigTemplateArgs{
//							Id:              pulumi.String("integer-val"),
//							Description:     pulumi.String("API key for the service."),
//							ValueType:       pulumi.String("INT"),
//							Required:        pulumi.Bool(true),
//							ValidationRegex: pulumi.String(""),
//						},
//						&apihub.PluginConfigTemplateAdditionalConfigTemplateArgs{
//							Id:              pulumi.String("bool-val"),
//							Description:     pulumi.String("API key for the service."),
//							ValueType:       pulumi.String("BOOL"),
//							Required:        pulumi.Bool(false),
//							ValidationRegex: pulumi.String(""),
//						},
//						&apihub.PluginConfigTemplateAdditionalConfigTemplateArgs{
//							Id:          pulumi.String("enum-val"),
//							Description: pulumi.String("API key for the service."),
//							ValueType:   pulumi.String("ENUM"),
//							EnumOptions: apihub.PluginConfigTemplateAdditionalConfigTemplateEnumOptionArray{
//								&apihub.PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs{
//									Id:          pulumi.String("Option1"),
//									DisplayName: pulumi.String("Option1"),
//									Description: pulumi.String("Description for Option1"),
//								},
//								&apihub.PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs{
//									Id:          pulumi.String("Option2"),
//									DisplayName: pulumi.String("Option2"),
//									Description: pulumi.String("Description for Option2"),
//								},
//							},
//							Required:        pulumi.Bool(false),
//							ValidationRegex: pulumi.String(""),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Plugin can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}`
//
// * `{{project}}/{{location}}/{{plugin_id}}`
//
// * `{{location}}/{{plugin_id}}`
//
// When using the `pulumi import` command, Plugin can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apihub/plugin:Plugin default projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apihub/plugin:Plugin default {{project}}/{{location}}/{{plugin_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apihub/plugin:Plugin default {{location}}/{{plugin_id}}
// ```
type Plugin struct {
	pulumi.CustomResourceState

	// The configuration of actions supported by the plugin.
	// Structure is documented below.
	ActionsConfigs PluginActionsConfigArrayOutput `pulumi:"actionsConfigs"`
	// ConfigTemplate represents the configuration template for a plugin.
	// Structure is documented below.
	ConfigTemplate PluginConfigTemplatePtrOutput `pulumi:"configTemplate"`
	// Timestamp indicating when the plugin was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The plugin description. Max length is 2000 characters (Unicode code
	// points).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the plugin. Max length is 50 characters (Unicode code
	// points).
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Documentation details.
	// Structure is documented below.
	Documentation PluginDocumentationPtrOutput `pulumi:"documentation"`
	// The information related to the service implemented by the plugin
	// developer, used to invoke the plugin's functionality.
	// Structure is documented below.
	HostingService PluginHostingServicePtrOutput `pulumi:"hostingService"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The name of the plugin.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the plugin, indicating whether it is 'SYSTEM_OWNED' or
	// 'USER_OWNED'.
	// Possible values:
	// OWNERSHIP_TYPE_UNSPECIFIED
	// SYSTEM_OWNED
	// USER_OWNED
	OwnershipType pulumi.StringOutput `pulumi:"ownershipType"`
	// Possible values:
	// PLUGIN_CATEGORY_UNSPECIFIED
	// API_GATEWAY
	// API_PRODUCER
	PluginCategory pulumi.StringPtrOutput `pulumi:"pluginCategory"`
	// The ID to use for the Plugin resource, which will become the final
	// component of the Plugin's resource name. This field is optional.
	// * If provided, the same will be used. The service will throw an error if
	//   the specified id is already used by another Plugin resource in the API hub
	//   instance.
	// * If not provided, a system generated id will be used.
	//   This value should be 4-63 characters, overall resource name which will be
	//   of format
	//   `projects/{project}/locations/{location}/plugins/{plugin}`,
	//   its length is limited to 1000 characters and valid characters are
	//   /a-z[0-9]-_/.
	//
	// ***
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Represents the state of the plugin.
	// Note this field will not be set for plugins developed via plugin
	// framework as the state will be managed at plugin instance level.
	// Possible values:
	// STATE_UNSPECIFIED
	// ENABLED
	// DISABLED
	State pulumi.StringOutput `pulumi:"state"`
	// Timestamp indicating when the plugin was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPlugin registers a new resource with the given unique name, arguments, and options.
func NewPlugin(ctx *pulumi.Context,
	name string, args *PluginArgs, opts ...pulumi.ResourceOption) (*Plugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plugin
	err := ctx.RegisterResource("gcp:apihub/plugin:Plugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlugin gets an existing Plugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginState, opts ...pulumi.ResourceOption) (*Plugin, error) {
	var resource Plugin
	err := ctx.ReadResource("gcp:apihub/plugin:Plugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plugin resources.
type pluginState struct {
	// The configuration of actions supported by the plugin.
	// Structure is documented below.
	ActionsConfigs []PluginActionsConfig `pulumi:"actionsConfigs"`
	// ConfigTemplate represents the configuration template for a plugin.
	// Structure is documented below.
	ConfigTemplate *PluginConfigTemplate `pulumi:"configTemplate"`
	// Timestamp indicating when the plugin was created.
	CreateTime *string `pulumi:"createTime"`
	// The plugin description. Max length is 2000 characters (Unicode code
	// points).
	Description *string `pulumi:"description"`
	// The display name of the plugin. Max length is 50 characters (Unicode code
	// points).
	DisplayName *string `pulumi:"displayName"`
	// Documentation details.
	// Structure is documented below.
	Documentation *PluginDocumentation `pulumi:"documentation"`
	// The information related to the service implemented by the plugin
	// developer, used to invoke the plugin's functionality.
	// Structure is documented below.
	HostingService *PluginHostingService `pulumi:"hostingService"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. The name of the plugin.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
	Name *string `pulumi:"name"`
	// The type of the plugin, indicating whether it is 'SYSTEM_OWNED' or
	// 'USER_OWNED'.
	// Possible values:
	// OWNERSHIP_TYPE_UNSPECIFIED
	// SYSTEM_OWNED
	// USER_OWNED
	OwnershipType *string `pulumi:"ownershipType"`
	// Possible values:
	// PLUGIN_CATEGORY_UNSPECIFIED
	// API_GATEWAY
	// API_PRODUCER
	PluginCategory *string `pulumi:"pluginCategory"`
	// The ID to use for the Plugin resource, which will become the final
	// component of the Plugin's resource name. This field is optional.
	// * If provided, the same will be used. The service will throw an error if
	//   the specified id is already used by another Plugin resource in the API hub
	//   instance.
	// * If not provided, a system generated id will be used.
	//   This value should be 4-63 characters, overall resource name which will be
	//   of format
	//   `projects/{project}/locations/{location}/plugins/{plugin}`,
	//   its length is limited to 1000 characters and valid characters are
	//   /a-z[0-9]-_/.
	//
	// ***
	PluginId *string `pulumi:"pluginId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Represents the state of the plugin.
	// Note this field will not be set for plugins developed via plugin
	// framework as the state will be managed at plugin instance level.
	// Possible values:
	// STATE_UNSPECIFIED
	// ENABLED
	// DISABLED
	State *string `pulumi:"state"`
	// Timestamp indicating when the plugin was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type PluginState struct {
	// The configuration of actions supported by the plugin.
	// Structure is documented below.
	ActionsConfigs PluginActionsConfigArrayInput
	// ConfigTemplate represents the configuration template for a plugin.
	// Structure is documented below.
	ConfigTemplate PluginConfigTemplatePtrInput
	// Timestamp indicating when the plugin was created.
	CreateTime pulumi.StringPtrInput
	// The plugin description. Max length is 2000 characters (Unicode code
	// points).
	Description pulumi.StringPtrInput
	// The display name of the plugin. Max length is 50 characters (Unicode code
	// points).
	DisplayName pulumi.StringPtrInput
	// Documentation details.
	// Structure is documented below.
	Documentation PluginDocumentationPtrInput
	// The information related to the service implemented by the plugin
	// developer, used to invoke the plugin's functionality.
	// Structure is documented below.
	HostingService PluginHostingServicePtrInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. The name of the plugin.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
	Name pulumi.StringPtrInput
	// The type of the plugin, indicating whether it is 'SYSTEM_OWNED' or
	// 'USER_OWNED'.
	// Possible values:
	// OWNERSHIP_TYPE_UNSPECIFIED
	// SYSTEM_OWNED
	// USER_OWNED
	OwnershipType pulumi.StringPtrInput
	// Possible values:
	// PLUGIN_CATEGORY_UNSPECIFIED
	// API_GATEWAY
	// API_PRODUCER
	PluginCategory pulumi.StringPtrInput
	// The ID to use for the Plugin resource, which will become the final
	// component of the Plugin's resource name. This field is optional.
	// * If provided, the same will be used. The service will throw an error if
	//   the specified id is already used by another Plugin resource in the API hub
	//   instance.
	// * If not provided, a system generated id will be used.
	//   This value should be 4-63 characters, overall resource name which will be
	//   of format
	//   `projects/{project}/locations/{location}/plugins/{plugin}`,
	//   its length is limited to 1000 characters and valid characters are
	//   /a-z[0-9]-_/.
	//
	// ***
	PluginId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Represents the state of the plugin.
	// Note this field will not be set for plugins developed via plugin
	// framework as the state will be managed at plugin instance level.
	// Possible values:
	// STATE_UNSPECIFIED
	// ENABLED
	// DISABLED
	State pulumi.StringPtrInput
	// Timestamp indicating when the plugin was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (PluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginState)(nil)).Elem()
}

type pluginArgs struct {
	// The configuration of actions supported by the plugin.
	// Structure is documented below.
	ActionsConfigs []PluginActionsConfig `pulumi:"actionsConfigs"`
	// ConfigTemplate represents the configuration template for a plugin.
	// Structure is documented below.
	ConfigTemplate *PluginConfigTemplate `pulumi:"configTemplate"`
	// The plugin description. Max length is 2000 characters (Unicode code
	// points).
	Description *string `pulumi:"description"`
	// The display name of the plugin. Max length is 50 characters (Unicode code
	// points).
	DisplayName string `pulumi:"displayName"`
	// Documentation details.
	// Structure is documented below.
	Documentation *PluginDocumentation `pulumi:"documentation"`
	// The information related to the service implemented by the plugin
	// developer, used to invoke the plugin's functionality.
	// Structure is documented below.
	HostingService *PluginHostingService `pulumi:"hostingService"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// Possible values:
	// PLUGIN_CATEGORY_UNSPECIFIED
	// API_GATEWAY
	// API_PRODUCER
	PluginCategory *string `pulumi:"pluginCategory"`
	// The ID to use for the Plugin resource, which will become the final
	// component of the Plugin's resource name. This field is optional.
	// * If provided, the same will be used. The service will throw an error if
	//   the specified id is already used by another Plugin resource in the API hub
	//   instance.
	// * If not provided, a system generated id will be used.
	//   This value should be 4-63 characters, overall resource name which will be
	//   of format
	//   `projects/{project}/locations/{location}/plugins/{plugin}`,
	//   its length is limited to 1000 characters and valid characters are
	//   /a-z[0-9]-_/.
	//
	// ***
	PluginId string `pulumi:"pluginId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Plugin resource.
type PluginArgs struct {
	// The configuration of actions supported by the plugin.
	// Structure is documented below.
	ActionsConfigs PluginActionsConfigArrayInput
	// ConfigTemplate represents the configuration template for a plugin.
	// Structure is documented below.
	ConfigTemplate PluginConfigTemplatePtrInput
	// The plugin description. Max length is 2000 characters (Unicode code
	// points).
	Description pulumi.StringPtrInput
	// The display name of the plugin. Max length is 50 characters (Unicode code
	// points).
	DisplayName pulumi.StringInput
	// Documentation details.
	// Structure is documented below.
	Documentation PluginDocumentationPtrInput
	// The information related to the service implemented by the plugin
	// developer, used to invoke the plugin's functionality.
	// Structure is documented below.
	HostingService PluginHostingServicePtrInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// Possible values:
	// PLUGIN_CATEGORY_UNSPECIFIED
	// API_GATEWAY
	// API_PRODUCER
	PluginCategory pulumi.StringPtrInput
	// The ID to use for the Plugin resource, which will become the final
	// component of the Plugin's resource name. This field is optional.
	// * If provided, the same will be used. The service will throw an error if
	//   the specified id is already used by another Plugin resource in the API hub
	//   instance.
	// * If not provided, a system generated id will be used.
	//   This value should be 4-63 characters, overall resource name which will be
	//   of format
	//   `projects/{project}/locations/{location}/plugins/{plugin}`,
	//   its length is limited to 1000 characters and valid characters are
	//   /a-z[0-9]-_/.
	//
	// ***
	PluginId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (PluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginArgs)(nil)).Elem()
}

type PluginInput interface {
	pulumi.Input

	ToPluginOutput() PluginOutput
	ToPluginOutputWithContext(ctx context.Context) PluginOutput
}

func (*Plugin) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (i *Plugin) ToPluginOutput() PluginOutput {
	return i.ToPluginOutputWithContext(context.Background())
}

func (i *Plugin) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginOutput)
}

// PluginArrayInput is an input type that accepts PluginArray and PluginArrayOutput values.
// You can construct a concrete instance of `PluginArrayInput` via:
//
//	PluginArray{ PluginArgs{...} }
type PluginArrayInput interface {
	pulumi.Input

	ToPluginArrayOutput() PluginArrayOutput
	ToPluginArrayOutputWithContext(context.Context) PluginArrayOutput
}

type PluginArray []PluginInput

func (PluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plugin)(nil)).Elem()
}

func (i PluginArray) ToPluginArrayOutput() PluginArrayOutput {
	return i.ToPluginArrayOutputWithContext(context.Background())
}

func (i PluginArray) ToPluginArrayOutputWithContext(ctx context.Context) PluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginArrayOutput)
}

// PluginMapInput is an input type that accepts PluginMap and PluginMapOutput values.
// You can construct a concrete instance of `PluginMapInput` via:
//
//	PluginMap{ "key": PluginArgs{...} }
type PluginMapInput interface {
	pulumi.Input

	ToPluginMapOutput() PluginMapOutput
	ToPluginMapOutputWithContext(context.Context) PluginMapOutput
}

type PluginMap map[string]PluginInput

func (PluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plugin)(nil)).Elem()
}

func (i PluginMap) ToPluginMapOutput() PluginMapOutput {
	return i.ToPluginMapOutputWithContext(context.Background())
}

func (i PluginMap) ToPluginMapOutputWithContext(ctx context.Context) PluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginMapOutput)
}

type PluginOutput struct{ *pulumi.OutputState }

func (PluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (o PluginOutput) ToPluginOutput() PluginOutput {
	return o
}

func (o PluginOutput) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return o
}

// The configuration of actions supported by the plugin.
// Structure is documented below.
func (o PluginOutput) ActionsConfigs() PluginActionsConfigArrayOutput {
	return o.ApplyT(func(v *Plugin) PluginActionsConfigArrayOutput { return v.ActionsConfigs }).(PluginActionsConfigArrayOutput)
}

// ConfigTemplate represents the configuration template for a plugin.
// Structure is documented below.
func (o PluginOutput) ConfigTemplate() PluginConfigTemplatePtrOutput {
	return o.ApplyT(func(v *Plugin) PluginConfigTemplatePtrOutput { return v.ConfigTemplate }).(PluginConfigTemplatePtrOutput)
}

// Timestamp indicating when the plugin was created.
func (o PluginOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The plugin description. Max length is 2000 characters (Unicode code
// points).
func (o PluginOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the plugin. Max length is 50 characters (Unicode code
// points).
func (o PluginOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Documentation details.
// Structure is documented below.
func (o PluginOutput) Documentation() PluginDocumentationPtrOutput {
	return o.ApplyT(func(v *Plugin) PluginDocumentationPtrOutput { return v.Documentation }).(PluginDocumentationPtrOutput)
}

// The information related to the service implemented by the plugin
// developer, used to invoke the plugin's functionality.
// Structure is documented below.
func (o PluginOutput) HostingService() PluginHostingServicePtrOutput {
	return o.ApplyT(func(v *Plugin) PluginHostingServicePtrOutput { return v.HostingService }).(PluginHostingServicePtrOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o PluginOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The name of the plugin.
// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
func (o PluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of the plugin, indicating whether it is 'SYSTEM_OWNED' or
// 'USER_OWNED'.
// Possible values:
// OWNERSHIP_TYPE_UNSPECIFIED
// SYSTEM_OWNED
// USER_OWNED
func (o PluginOutput) OwnershipType() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.OwnershipType }).(pulumi.StringOutput)
}

// Possible values:
// PLUGIN_CATEGORY_UNSPECIFIED
// API_GATEWAY
// API_PRODUCER
func (o PluginOutput) PluginCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.PluginCategory }).(pulumi.StringPtrOutput)
}

// The ID to use for the Plugin resource, which will become the final
// component of the Plugin's resource name. This field is optional.
//   - If provided, the same will be used. The service will throw an error if
//     the specified id is already used by another Plugin resource in the API hub
//     instance.
//   - If not provided, a system generated id will be used.
//     This value should be 4-63 characters, overall resource name which will be
//     of format
//     `projects/{project}/locations/{location}/plugins/{plugin}`,
//     its length is limited to 1000 characters and valid characters are
//     /a-z[0-9]-_/.
//
// ***
func (o PluginOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o PluginOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Represents the state of the plugin.
// Note this field will not be set for plugins developed via plugin
// framework as the state will be managed at plugin instance level.
// Possible values:
// STATE_UNSPECIFIED
// ENABLED
// DISABLED
func (o PluginOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Timestamp indicating when the plugin was last updated.
func (o PluginOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type PluginArrayOutput struct{ *pulumi.OutputState }

func (PluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plugin)(nil)).Elem()
}

func (o PluginArrayOutput) ToPluginArrayOutput() PluginArrayOutput {
	return o
}

func (o PluginArrayOutput) ToPluginArrayOutputWithContext(ctx context.Context) PluginArrayOutput {
	return o
}

func (o PluginArrayOutput) Index(i pulumi.IntInput) PluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Plugin {
		return vs[0].([]*Plugin)[vs[1].(int)]
	}).(PluginOutput)
}

type PluginMapOutput struct{ *pulumi.OutputState }

func (PluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plugin)(nil)).Elem()
}

func (o PluginMapOutput) ToPluginMapOutput() PluginMapOutput {
	return o
}

func (o PluginMapOutput) ToPluginMapOutputWithContext(ctx context.Context) PluginMapOutput {
	return o
}

func (o PluginMapOutput) MapIndex(k pulumi.StringInput) PluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Plugin {
		return vs[0].(map[string]*Plugin)[vs[1].(string)]
	}).(PluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginInput)(nil)).Elem(), &Plugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginArrayInput)(nil)).Elem(), PluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginMapInput)(nil)).Elem(), PluginMap{})
	pulumi.RegisterOutputType(PluginOutput{})
	pulumi.RegisterOutputType(PluginArrayOutput{})
	pulumi.RegisterOutputType(PluginMapOutput{})
}
