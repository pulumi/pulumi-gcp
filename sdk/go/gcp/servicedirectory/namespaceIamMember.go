// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicedirectory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Three different resources help you manage your IAM policy for Service Directory Namespace. Each of these resources serves a different use case:
//
// * `servicedirectory.NamespaceIamPolicy`: Authoritative. Sets the IAM policy for the namespace and replaces any existing policy already attached.
// * `servicedirectory.NamespaceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the namespace are preserved.
// * `servicedirectory.NamespaceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the namespace are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `servicedirectory.NamespaceIamPolicy`: Retrieves the IAM policy for the namespace
//
// > **Note:** `servicedirectory.NamespaceIamPolicy` **cannot** be used in conjunction with `servicedirectory.NamespaceIamBinding` and `servicedirectory.NamespaceIamMember` or they will fight over what your policy should be.
//
// > **Note:** `servicedirectory.NamespaceIamBinding` resources **can be** used in conjunction with `servicedirectory.NamespaceIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} * {{project}}/{{location}}/{{namespace_id}} * {{location}}/{{namespace_id}} Any variables not passed in the import command will be taken from the provider configuration. Service Directory namespace IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:servicedirectory/namespaceIamMember:NamespaceIamMember editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:servicedirectory/namespaceIamMember:NamespaceIamMember editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:servicedirectory/namespaceIamMember:NamespaceIamMember editor projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type NamespaceIamMember struct {
	pulumi.CustomResourceState

	Condition NamespaceIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Name pulumi.StringOutput `pulumi:"name"`
	// The role that should be applied. Only one
	// `servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewNamespaceIamMember registers a new resource with the given unique name, arguments, and options.
func NewNamespaceIamMember(ctx *pulumi.Context,
	name string, args *NamespaceIamMemberArgs, opts ...pulumi.ResourceOption) (*NamespaceIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NamespaceIamMember
	err := ctx.RegisterResource("gcp:servicedirectory/namespaceIamMember:NamespaceIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceIamMember gets an existing NamespaceIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceIamMemberState, opts ...pulumi.ResourceOption) (*NamespaceIamMember, error) {
	var resource NamespaceIamMember
	err := ctx.ReadResource("gcp:servicedirectory/namespaceIamMember:NamespaceIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceIamMember resources.
type namespaceIamMemberState struct {
	Condition *NamespaceIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Name *string `pulumi:"name"`
	// The role that should be applied. Only one
	// `servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type NamespaceIamMemberState struct {
	Condition NamespaceIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Name pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (NamespaceIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceIamMemberState)(nil)).Elem()
}

type namespaceIamMemberArgs struct {
	Condition *NamespaceIamMemberCondition `pulumi:"condition"`
	Member    string                       `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Name *string `pulumi:"name"`
	// The role that should be applied. Only one
	// `servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a NamespaceIamMember resource.
type NamespaceIamMemberArgs struct {
	Condition NamespaceIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Name pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (NamespaceIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceIamMemberArgs)(nil)).Elem()
}

type NamespaceIamMemberInput interface {
	pulumi.Input

	ToNamespaceIamMemberOutput() NamespaceIamMemberOutput
	ToNamespaceIamMemberOutputWithContext(ctx context.Context) NamespaceIamMemberOutput
}

func (*NamespaceIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIamMember)(nil)).Elem()
}

func (i *NamespaceIamMember) ToNamespaceIamMemberOutput() NamespaceIamMemberOutput {
	return i.ToNamespaceIamMemberOutputWithContext(context.Background())
}

func (i *NamespaceIamMember) ToNamespaceIamMemberOutputWithContext(ctx context.Context) NamespaceIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamMemberOutput)
}

func (i *NamespaceIamMember) ToOutput(ctx context.Context) pulumix.Output[*NamespaceIamMember] {
	return pulumix.Output[*NamespaceIamMember]{
		OutputState: i.ToNamespaceIamMemberOutputWithContext(ctx).OutputState,
	}
}

// NamespaceIamMemberArrayInput is an input type that accepts NamespaceIamMemberArray and NamespaceIamMemberArrayOutput values.
// You can construct a concrete instance of `NamespaceIamMemberArrayInput` via:
//
//	NamespaceIamMemberArray{ NamespaceIamMemberArgs{...} }
type NamespaceIamMemberArrayInput interface {
	pulumi.Input

	ToNamespaceIamMemberArrayOutput() NamespaceIamMemberArrayOutput
	ToNamespaceIamMemberArrayOutputWithContext(context.Context) NamespaceIamMemberArrayOutput
}

type NamespaceIamMemberArray []NamespaceIamMemberInput

func (NamespaceIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceIamMember)(nil)).Elem()
}

func (i NamespaceIamMemberArray) ToNamespaceIamMemberArrayOutput() NamespaceIamMemberArrayOutput {
	return i.ToNamespaceIamMemberArrayOutputWithContext(context.Background())
}

func (i NamespaceIamMemberArray) ToNamespaceIamMemberArrayOutputWithContext(ctx context.Context) NamespaceIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamMemberArrayOutput)
}

func (i NamespaceIamMemberArray) ToOutput(ctx context.Context) pulumix.Output[[]*NamespaceIamMember] {
	return pulumix.Output[[]*NamespaceIamMember]{
		OutputState: i.ToNamespaceIamMemberArrayOutputWithContext(ctx).OutputState,
	}
}

// NamespaceIamMemberMapInput is an input type that accepts NamespaceIamMemberMap and NamespaceIamMemberMapOutput values.
// You can construct a concrete instance of `NamespaceIamMemberMapInput` via:
//
//	NamespaceIamMemberMap{ "key": NamespaceIamMemberArgs{...} }
type NamespaceIamMemberMapInput interface {
	pulumi.Input

	ToNamespaceIamMemberMapOutput() NamespaceIamMemberMapOutput
	ToNamespaceIamMemberMapOutputWithContext(context.Context) NamespaceIamMemberMapOutput
}

type NamespaceIamMemberMap map[string]NamespaceIamMemberInput

func (NamespaceIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceIamMember)(nil)).Elem()
}

func (i NamespaceIamMemberMap) ToNamespaceIamMemberMapOutput() NamespaceIamMemberMapOutput {
	return i.ToNamespaceIamMemberMapOutputWithContext(context.Background())
}

func (i NamespaceIamMemberMap) ToNamespaceIamMemberMapOutputWithContext(ctx context.Context) NamespaceIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamMemberMapOutput)
}

func (i NamespaceIamMemberMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NamespaceIamMember] {
	return pulumix.Output[map[string]*NamespaceIamMember]{
		OutputState: i.ToNamespaceIamMemberMapOutputWithContext(ctx).OutputState,
	}
}

type NamespaceIamMemberOutput struct{ *pulumi.OutputState }

func (NamespaceIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIamMember)(nil)).Elem()
}

func (o NamespaceIamMemberOutput) ToNamespaceIamMemberOutput() NamespaceIamMemberOutput {
	return o
}

func (o NamespaceIamMemberOutput) ToNamespaceIamMemberOutputWithContext(ctx context.Context) NamespaceIamMemberOutput {
	return o
}

func (o NamespaceIamMemberOutput) ToOutput(ctx context.Context) pulumix.Output[*NamespaceIamMember] {
	return pulumix.Output[*NamespaceIamMember]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceIamMemberOutput) Condition() NamespaceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *NamespaceIamMember) NamespaceIamMemberConditionPtrOutput { return v.Condition }).(NamespaceIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o NamespaceIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o NamespaceIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o NamespaceIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o NamespaceIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type NamespaceIamMemberArrayOutput struct{ *pulumi.OutputState }

func (NamespaceIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceIamMember)(nil)).Elem()
}

func (o NamespaceIamMemberArrayOutput) ToNamespaceIamMemberArrayOutput() NamespaceIamMemberArrayOutput {
	return o
}

func (o NamespaceIamMemberArrayOutput) ToNamespaceIamMemberArrayOutputWithContext(ctx context.Context) NamespaceIamMemberArrayOutput {
	return o
}

func (o NamespaceIamMemberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NamespaceIamMember] {
	return pulumix.Output[[]*NamespaceIamMember]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceIamMemberArrayOutput) Index(i pulumi.IntInput) NamespaceIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NamespaceIamMember {
		return vs[0].([]*NamespaceIamMember)[vs[1].(int)]
	}).(NamespaceIamMemberOutput)
}

type NamespaceIamMemberMapOutput struct{ *pulumi.OutputState }

func (NamespaceIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceIamMember)(nil)).Elem()
}

func (o NamespaceIamMemberMapOutput) ToNamespaceIamMemberMapOutput() NamespaceIamMemberMapOutput {
	return o
}

func (o NamespaceIamMemberMapOutput) ToNamespaceIamMemberMapOutputWithContext(ctx context.Context) NamespaceIamMemberMapOutput {
	return o
}

func (o NamespaceIamMemberMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NamespaceIamMember] {
	return pulumix.Output[map[string]*NamespaceIamMember]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceIamMemberMapOutput) MapIndex(k pulumi.StringInput) NamespaceIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NamespaceIamMember {
		return vs[0].(map[string]*NamespaceIamMember)[vs[1].(string)]
	}).(NamespaceIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceIamMemberInput)(nil)).Elem(), &NamespaceIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceIamMemberArrayInput)(nil)).Elem(), NamespaceIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceIamMemberMapInput)(nil)).Elem(), NamespaceIamMemberMap{})
	pulumi.RegisterOutputType(NamespaceIamMemberOutput{})
	pulumi.RegisterOutputType(NamespaceIamMemberArrayOutput{})
	pulumi.RegisterOutputType(NamespaceIamMemberMapOutput{})
}
