// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicedirectory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NamespaceIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// NamespaceIamBindingConditionInput is an input type that accepts NamespaceIamBindingConditionArgs and NamespaceIamBindingConditionOutput values.
// You can construct a concrete instance of `NamespaceIamBindingConditionInput` via:
//
// 		 NamespaceIamBindingConditionArgs{...}
//
type NamespaceIamBindingConditionInput interface {
	pulumi.Input

	ToNamespaceIamBindingConditionOutput() NamespaceIamBindingConditionOutput
	ToNamespaceIamBindingConditionOutputWithContext(context.Context) NamespaceIamBindingConditionOutput
}

type NamespaceIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (NamespaceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceIamBindingCondition)(nil)).Elem()
}

func (i NamespaceIamBindingConditionArgs) ToNamespaceIamBindingConditionOutput() NamespaceIamBindingConditionOutput {
	return i.ToNamespaceIamBindingConditionOutputWithContext(context.Background())
}

func (i NamespaceIamBindingConditionArgs) ToNamespaceIamBindingConditionOutputWithContext(ctx context.Context) NamespaceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamBindingConditionOutput)
}

func (i NamespaceIamBindingConditionArgs) ToNamespaceIamBindingConditionPtrOutput() NamespaceIamBindingConditionPtrOutput {
	return i.ToNamespaceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i NamespaceIamBindingConditionArgs) ToNamespaceIamBindingConditionPtrOutputWithContext(ctx context.Context) NamespaceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamBindingConditionOutput).ToNamespaceIamBindingConditionPtrOutputWithContext(ctx)
}

// NamespaceIamBindingConditionPtrInput is an input type that accepts NamespaceIamBindingConditionArgs, NamespaceIamBindingConditionPtr and NamespaceIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `NamespaceIamBindingConditionPtrInput` via:
//
// 		 NamespaceIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type NamespaceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToNamespaceIamBindingConditionPtrOutput() NamespaceIamBindingConditionPtrOutput
	ToNamespaceIamBindingConditionPtrOutputWithContext(context.Context) NamespaceIamBindingConditionPtrOutput
}

type namespaceIamBindingConditionPtrType NamespaceIamBindingConditionArgs

func NamespaceIamBindingConditionPtr(v *NamespaceIamBindingConditionArgs) NamespaceIamBindingConditionPtrInput {
	return (*namespaceIamBindingConditionPtrType)(v)
}

func (*namespaceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIamBindingCondition)(nil)).Elem()
}

func (i *namespaceIamBindingConditionPtrType) ToNamespaceIamBindingConditionPtrOutput() NamespaceIamBindingConditionPtrOutput {
	return i.ToNamespaceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *namespaceIamBindingConditionPtrType) ToNamespaceIamBindingConditionPtrOutputWithContext(ctx context.Context) NamespaceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamBindingConditionPtrOutput)
}

type NamespaceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (NamespaceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceIamBindingCondition)(nil)).Elem()
}

func (o NamespaceIamBindingConditionOutput) ToNamespaceIamBindingConditionOutput() NamespaceIamBindingConditionOutput {
	return o
}

func (o NamespaceIamBindingConditionOutput) ToNamespaceIamBindingConditionOutputWithContext(ctx context.Context) NamespaceIamBindingConditionOutput {
	return o
}

func (o NamespaceIamBindingConditionOutput) ToNamespaceIamBindingConditionPtrOutput() NamespaceIamBindingConditionPtrOutput {
	return o.ToNamespaceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o NamespaceIamBindingConditionOutput) ToNamespaceIamBindingConditionPtrOutputWithContext(ctx context.Context) NamespaceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v NamespaceIamBindingCondition) *NamespaceIamBindingCondition {
		return &v
	}).(NamespaceIamBindingConditionPtrOutput)
}
func (o NamespaceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NamespaceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o NamespaceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type NamespaceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (NamespaceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIamBindingCondition)(nil)).Elem()
}

func (o NamespaceIamBindingConditionPtrOutput) ToNamespaceIamBindingConditionPtrOutput() NamespaceIamBindingConditionPtrOutput {
	return o
}

func (o NamespaceIamBindingConditionPtrOutput) ToNamespaceIamBindingConditionPtrOutputWithContext(ctx context.Context) NamespaceIamBindingConditionPtrOutput {
	return o
}

func (o NamespaceIamBindingConditionPtrOutput) Elem() NamespaceIamBindingConditionOutput {
	return o.ApplyT(func(v *NamespaceIamBindingCondition) NamespaceIamBindingCondition { return *v }).(NamespaceIamBindingConditionOutput)
}

func (o NamespaceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o NamespaceIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o NamespaceIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type NamespaceIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// NamespaceIamMemberConditionInput is an input type that accepts NamespaceIamMemberConditionArgs and NamespaceIamMemberConditionOutput values.
// You can construct a concrete instance of `NamespaceIamMemberConditionInput` via:
//
// 		 NamespaceIamMemberConditionArgs{...}
//
type NamespaceIamMemberConditionInput interface {
	pulumi.Input

	ToNamespaceIamMemberConditionOutput() NamespaceIamMemberConditionOutput
	ToNamespaceIamMemberConditionOutputWithContext(context.Context) NamespaceIamMemberConditionOutput
}

type NamespaceIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (NamespaceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceIamMemberCondition)(nil)).Elem()
}

func (i NamespaceIamMemberConditionArgs) ToNamespaceIamMemberConditionOutput() NamespaceIamMemberConditionOutput {
	return i.ToNamespaceIamMemberConditionOutputWithContext(context.Background())
}

func (i NamespaceIamMemberConditionArgs) ToNamespaceIamMemberConditionOutputWithContext(ctx context.Context) NamespaceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamMemberConditionOutput)
}

func (i NamespaceIamMemberConditionArgs) ToNamespaceIamMemberConditionPtrOutput() NamespaceIamMemberConditionPtrOutput {
	return i.ToNamespaceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i NamespaceIamMemberConditionArgs) ToNamespaceIamMemberConditionPtrOutputWithContext(ctx context.Context) NamespaceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamMemberConditionOutput).ToNamespaceIamMemberConditionPtrOutputWithContext(ctx)
}

// NamespaceIamMemberConditionPtrInput is an input type that accepts NamespaceIamMemberConditionArgs, NamespaceIamMemberConditionPtr and NamespaceIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `NamespaceIamMemberConditionPtrInput` via:
//
// 		 NamespaceIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type NamespaceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToNamespaceIamMemberConditionPtrOutput() NamespaceIamMemberConditionPtrOutput
	ToNamespaceIamMemberConditionPtrOutputWithContext(context.Context) NamespaceIamMemberConditionPtrOutput
}

type namespaceIamMemberConditionPtrType NamespaceIamMemberConditionArgs

func NamespaceIamMemberConditionPtr(v *NamespaceIamMemberConditionArgs) NamespaceIamMemberConditionPtrInput {
	return (*namespaceIamMemberConditionPtrType)(v)
}

func (*namespaceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIamMemberCondition)(nil)).Elem()
}

func (i *namespaceIamMemberConditionPtrType) ToNamespaceIamMemberConditionPtrOutput() NamespaceIamMemberConditionPtrOutput {
	return i.ToNamespaceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *namespaceIamMemberConditionPtrType) ToNamespaceIamMemberConditionPtrOutputWithContext(ctx context.Context) NamespaceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIamMemberConditionPtrOutput)
}

type NamespaceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (NamespaceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceIamMemberCondition)(nil)).Elem()
}

func (o NamespaceIamMemberConditionOutput) ToNamespaceIamMemberConditionOutput() NamespaceIamMemberConditionOutput {
	return o
}

func (o NamespaceIamMemberConditionOutput) ToNamespaceIamMemberConditionOutputWithContext(ctx context.Context) NamespaceIamMemberConditionOutput {
	return o
}

func (o NamespaceIamMemberConditionOutput) ToNamespaceIamMemberConditionPtrOutput() NamespaceIamMemberConditionPtrOutput {
	return o.ToNamespaceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o NamespaceIamMemberConditionOutput) ToNamespaceIamMemberConditionPtrOutputWithContext(ctx context.Context) NamespaceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v NamespaceIamMemberCondition) *NamespaceIamMemberCondition {
		return &v
	}).(NamespaceIamMemberConditionPtrOutput)
}
func (o NamespaceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NamespaceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o NamespaceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type NamespaceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (NamespaceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIamMemberCondition)(nil)).Elem()
}

func (o NamespaceIamMemberConditionPtrOutput) ToNamespaceIamMemberConditionPtrOutput() NamespaceIamMemberConditionPtrOutput {
	return o
}

func (o NamespaceIamMemberConditionPtrOutput) ToNamespaceIamMemberConditionPtrOutputWithContext(ctx context.Context) NamespaceIamMemberConditionPtrOutput {
	return o
}

func (o NamespaceIamMemberConditionPtrOutput) Elem() NamespaceIamMemberConditionOutput {
	return o.ApplyT(func(v *NamespaceIamMemberCondition) NamespaceIamMemberCondition { return *v }).(NamespaceIamMemberConditionOutput)
}

func (o NamespaceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o NamespaceIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o NamespaceIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type ServiceIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// ServiceIamBindingConditionInput is an input type that accepts ServiceIamBindingConditionArgs and ServiceIamBindingConditionOutput values.
// You can construct a concrete instance of `ServiceIamBindingConditionInput` via:
//
// 		 ServiceIamBindingConditionArgs{...}
//
type ServiceIamBindingConditionInput interface {
	pulumi.Input

	ToServiceIamBindingConditionOutput() ServiceIamBindingConditionOutput
	ToServiceIamBindingConditionOutputWithContext(context.Context) ServiceIamBindingConditionOutput
}

type ServiceIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (ServiceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIamBindingCondition)(nil)).Elem()
}

func (i ServiceIamBindingConditionArgs) ToServiceIamBindingConditionOutput() ServiceIamBindingConditionOutput {
	return i.ToServiceIamBindingConditionOutputWithContext(context.Background())
}

func (i ServiceIamBindingConditionArgs) ToServiceIamBindingConditionOutputWithContext(ctx context.Context) ServiceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIamBindingConditionOutput)
}

func (i ServiceIamBindingConditionArgs) ToServiceIamBindingConditionPtrOutput() ServiceIamBindingConditionPtrOutput {
	return i.ToServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i ServiceIamBindingConditionArgs) ToServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) ServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIamBindingConditionOutput).ToServiceIamBindingConditionPtrOutputWithContext(ctx)
}

// ServiceIamBindingConditionPtrInput is an input type that accepts ServiceIamBindingConditionArgs, ServiceIamBindingConditionPtr and ServiceIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `ServiceIamBindingConditionPtrInput` via:
//
// 		 ServiceIamBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type ServiceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToServiceIamBindingConditionPtrOutput() ServiceIamBindingConditionPtrOutput
	ToServiceIamBindingConditionPtrOutputWithContext(context.Context) ServiceIamBindingConditionPtrOutput
}

type serviceIamBindingConditionPtrType ServiceIamBindingConditionArgs

func ServiceIamBindingConditionPtr(v *ServiceIamBindingConditionArgs) ServiceIamBindingConditionPtrInput {
	return (*serviceIamBindingConditionPtrType)(v)
}

func (*serviceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIamBindingCondition)(nil)).Elem()
}

func (i *serviceIamBindingConditionPtrType) ToServiceIamBindingConditionPtrOutput() ServiceIamBindingConditionPtrOutput {
	return i.ToServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *serviceIamBindingConditionPtrType) ToServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) ServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIamBindingConditionPtrOutput)
}

type ServiceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (ServiceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIamBindingCondition)(nil)).Elem()
}

func (o ServiceIamBindingConditionOutput) ToServiceIamBindingConditionOutput() ServiceIamBindingConditionOutput {
	return o
}

func (o ServiceIamBindingConditionOutput) ToServiceIamBindingConditionOutputWithContext(ctx context.Context) ServiceIamBindingConditionOutput {
	return o
}

func (o ServiceIamBindingConditionOutput) ToServiceIamBindingConditionPtrOutput() ServiceIamBindingConditionPtrOutput {
	return o.ToServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o ServiceIamBindingConditionOutput) ToServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) ServiceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v ServiceIamBindingCondition) *ServiceIamBindingCondition {
		return &v
	}).(ServiceIamBindingConditionPtrOutput)
}
func (o ServiceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ServiceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ServiceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type ServiceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (ServiceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIamBindingCondition)(nil)).Elem()
}

func (o ServiceIamBindingConditionPtrOutput) ToServiceIamBindingConditionPtrOutput() ServiceIamBindingConditionPtrOutput {
	return o
}

func (o ServiceIamBindingConditionPtrOutput) ToServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) ServiceIamBindingConditionPtrOutput {
	return o
}

func (o ServiceIamBindingConditionPtrOutput) Elem() ServiceIamBindingConditionOutput {
	return o.ApplyT(func(v *ServiceIamBindingCondition) ServiceIamBindingCondition { return *v }).(ServiceIamBindingConditionOutput)
}

func (o ServiceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ServiceIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o ServiceIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type ServiceIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// ServiceIamMemberConditionInput is an input type that accepts ServiceIamMemberConditionArgs and ServiceIamMemberConditionOutput values.
// You can construct a concrete instance of `ServiceIamMemberConditionInput` via:
//
// 		 ServiceIamMemberConditionArgs{...}
//
type ServiceIamMemberConditionInput interface {
	pulumi.Input

	ToServiceIamMemberConditionOutput() ServiceIamMemberConditionOutput
	ToServiceIamMemberConditionOutputWithContext(context.Context) ServiceIamMemberConditionOutput
}

type ServiceIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (ServiceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIamMemberCondition)(nil)).Elem()
}

func (i ServiceIamMemberConditionArgs) ToServiceIamMemberConditionOutput() ServiceIamMemberConditionOutput {
	return i.ToServiceIamMemberConditionOutputWithContext(context.Background())
}

func (i ServiceIamMemberConditionArgs) ToServiceIamMemberConditionOutputWithContext(ctx context.Context) ServiceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIamMemberConditionOutput)
}

func (i ServiceIamMemberConditionArgs) ToServiceIamMemberConditionPtrOutput() ServiceIamMemberConditionPtrOutput {
	return i.ToServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i ServiceIamMemberConditionArgs) ToServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) ServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIamMemberConditionOutput).ToServiceIamMemberConditionPtrOutputWithContext(ctx)
}

// ServiceIamMemberConditionPtrInput is an input type that accepts ServiceIamMemberConditionArgs, ServiceIamMemberConditionPtr and ServiceIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `ServiceIamMemberConditionPtrInput` via:
//
// 		 ServiceIamMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type ServiceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToServiceIamMemberConditionPtrOutput() ServiceIamMemberConditionPtrOutput
	ToServiceIamMemberConditionPtrOutputWithContext(context.Context) ServiceIamMemberConditionPtrOutput
}

type serviceIamMemberConditionPtrType ServiceIamMemberConditionArgs

func ServiceIamMemberConditionPtr(v *ServiceIamMemberConditionArgs) ServiceIamMemberConditionPtrInput {
	return (*serviceIamMemberConditionPtrType)(v)
}

func (*serviceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIamMemberCondition)(nil)).Elem()
}

func (i *serviceIamMemberConditionPtrType) ToServiceIamMemberConditionPtrOutput() ServiceIamMemberConditionPtrOutput {
	return i.ToServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *serviceIamMemberConditionPtrType) ToServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) ServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIamMemberConditionPtrOutput)
}

type ServiceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (ServiceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIamMemberCondition)(nil)).Elem()
}

func (o ServiceIamMemberConditionOutput) ToServiceIamMemberConditionOutput() ServiceIamMemberConditionOutput {
	return o
}

func (o ServiceIamMemberConditionOutput) ToServiceIamMemberConditionOutputWithContext(ctx context.Context) ServiceIamMemberConditionOutput {
	return o
}

func (o ServiceIamMemberConditionOutput) ToServiceIamMemberConditionPtrOutput() ServiceIamMemberConditionPtrOutput {
	return o.ToServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o ServiceIamMemberConditionOutput) ToServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) ServiceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v ServiceIamMemberCondition) *ServiceIamMemberCondition {
		return &v
	}).(ServiceIamMemberConditionPtrOutput)
}
func (o ServiceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ServiceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ServiceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type ServiceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (ServiceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIamMemberCondition)(nil)).Elem()
}

func (o ServiceIamMemberConditionPtrOutput) ToServiceIamMemberConditionPtrOutput() ServiceIamMemberConditionPtrOutput {
	return o
}

func (o ServiceIamMemberConditionPtrOutput) ToServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) ServiceIamMemberConditionPtrOutput {
	return o
}

func (o ServiceIamMemberConditionPtrOutput) Elem() ServiceIamMemberConditionOutput {
	return o.ApplyT(func(v *ServiceIamMemberCondition) ServiceIamMemberCondition { return *v }).(ServiceIamMemberConditionOutput)
}

func (o ServiceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ServiceIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o ServiceIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(NamespaceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(NamespaceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(NamespaceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(NamespaceIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(ServiceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(ServiceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(ServiceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(ServiceIamMemberConditionPtrOutput{})
}
