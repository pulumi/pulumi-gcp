// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource for managing Repository Group for Gemini Code Assist.
//
// To get more information about RepositoryGroup, see:
//
// * [API documentation](https://cloud.google.com/gemini/docs/api/reference/rest/v1/projects.locations.codeRepositoryIndexes.repositoryGroups)
//
// ## Example Usage
//
// ### Gemini Repository Group Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewRepositoryGroup(ctx, "example", &gemini.RepositoryGroupArgs{
//				Location:            pulumi.String("us-central1"),
//				CodeRepositoryIndex: pulumi.String("example-cri"),
//				RepositoryGroupId:   pulumi.String("example-repository-group"),
//				Repositories: gemini.RepositoryGroupRepositoryArray{
//					&gemini.RepositoryGroupRepositoryArgs{
//						Resource:      pulumi.String("projects/example-project/locations/us-central1/connections/example-connection/gitRepositoryLinks/example-repo"),
//						BranchPattern: pulumi.String("main"),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"label1": pulumi.String("value1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RepositoryGroup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}`
//
// * `{{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}`
//
// * `{{location}}/{{code_repository_index}}/{{repository_group_id}}`
//
// When using the `pulumi import` command, RepositoryGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default {{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default {{location}}/{{code_repository_index}}/{{repository_group_id}}
// ```
type RepositoryGroup struct {
	pulumi.CustomResourceState

	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex pulumi.StringOutput `pulumi:"codeRepositoryIndex"`
	// Output only. Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the Code Repository Index, for example `us-central1`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Immutable. Identifier. Name of Repository Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Required. List of repositories to group.
	// Structure is documented below.
	Repositories RepositoryGroupRepositoryArrayOutput `pulumi:"repositories"`
	// Required. Id of the Repository Group.
	RepositoryGroupId pulumi.StringOutput `pulumi:"repositoryGroupId"`
	// Output only. Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRepositoryGroup registers a new resource with the given unique name, arguments, and options.
func NewRepositoryGroup(ctx *pulumi.Context,
	name string, args *RepositoryGroupArgs, opts ...pulumi.ResourceOption) (*RepositoryGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeRepositoryIndex == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepositoryIndex'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Repositories == nil {
		return nil, errors.New("invalid value for required argument 'Repositories'")
	}
	if args.RepositoryGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryGroupId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryGroup
	err := ctx.RegisterResource("gcp:gemini/repositoryGroup:RepositoryGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryGroup gets an existing RepositoryGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryGroupState, opts ...pulumi.ResourceOption) (*RepositoryGroup, error) {
	var resource RepositoryGroup
	err := ctx.ReadResource("gcp:gemini/repositoryGroup:RepositoryGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryGroup resources.
type repositoryGroupState struct {
	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex *string `pulumi:"codeRepositoryIndex"`
	// Output only. Create time stamp.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the Code Repository Index, for example `us-central1`.
	Location *string `pulumi:"location"`
	// Immutable. Identifier. Name of Repository Group.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Required. List of repositories to group.
	// Structure is documented below.
	Repositories []RepositoryGroupRepository `pulumi:"repositories"`
	// Required. Id of the Repository Group.
	RepositoryGroupId *string `pulumi:"repositoryGroupId"`
	// Output only. Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type RepositoryGroupState struct {
	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex pulumi.StringPtrInput
	// Output only. Create time stamp.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the Code Repository Index, for example `us-central1`.
	Location pulumi.StringPtrInput
	// Immutable. Identifier. Name of Repository Group.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Required. List of repositories to group.
	// Structure is documented below.
	Repositories RepositoryGroupRepositoryArrayInput
	// Required. Id of the Repository Group.
	RepositoryGroupId pulumi.StringPtrInput
	// Output only. Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (RepositoryGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryGroupState)(nil)).Elem()
}

type repositoryGroupArgs struct {
	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex string `pulumi:"codeRepositoryIndex"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the Code Repository Index, for example `us-central1`.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. List of repositories to group.
	// Structure is documented below.
	Repositories []RepositoryGroupRepository `pulumi:"repositories"`
	// Required. Id of the Repository Group.
	RepositoryGroupId string `pulumi:"repositoryGroupId"`
}

// The set of arguments for constructing a RepositoryGroup resource.
type RepositoryGroupArgs struct {
	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex pulumi.StringInput
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the Code Repository Index, for example `us-central1`.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. List of repositories to group.
	// Structure is documented below.
	Repositories RepositoryGroupRepositoryArrayInput
	// Required. Id of the Repository Group.
	RepositoryGroupId pulumi.StringInput
}

func (RepositoryGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryGroupArgs)(nil)).Elem()
}

type RepositoryGroupInput interface {
	pulumi.Input

	ToRepositoryGroupOutput() RepositoryGroupOutput
	ToRepositoryGroupOutputWithContext(ctx context.Context) RepositoryGroupOutput
}

func (*RepositoryGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGroup)(nil)).Elem()
}

func (i *RepositoryGroup) ToRepositoryGroupOutput() RepositoryGroupOutput {
	return i.ToRepositoryGroupOutputWithContext(context.Background())
}

func (i *RepositoryGroup) ToRepositoryGroupOutputWithContext(ctx context.Context) RepositoryGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupOutput)
}

// RepositoryGroupArrayInput is an input type that accepts RepositoryGroupArray and RepositoryGroupArrayOutput values.
// You can construct a concrete instance of `RepositoryGroupArrayInput` via:
//
//	RepositoryGroupArray{ RepositoryGroupArgs{...} }
type RepositoryGroupArrayInput interface {
	pulumi.Input

	ToRepositoryGroupArrayOutput() RepositoryGroupArrayOutput
	ToRepositoryGroupArrayOutputWithContext(context.Context) RepositoryGroupArrayOutput
}

type RepositoryGroupArray []RepositoryGroupInput

func (RepositoryGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryGroup)(nil)).Elem()
}

func (i RepositoryGroupArray) ToRepositoryGroupArrayOutput() RepositoryGroupArrayOutput {
	return i.ToRepositoryGroupArrayOutputWithContext(context.Background())
}

func (i RepositoryGroupArray) ToRepositoryGroupArrayOutputWithContext(ctx context.Context) RepositoryGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupArrayOutput)
}

// RepositoryGroupMapInput is an input type that accepts RepositoryGroupMap and RepositoryGroupMapOutput values.
// You can construct a concrete instance of `RepositoryGroupMapInput` via:
//
//	RepositoryGroupMap{ "key": RepositoryGroupArgs{...} }
type RepositoryGroupMapInput interface {
	pulumi.Input

	ToRepositoryGroupMapOutput() RepositoryGroupMapOutput
	ToRepositoryGroupMapOutputWithContext(context.Context) RepositoryGroupMapOutput
}

type RepositoryGroupMap map[string]RepositoryGroupInput

func (RepositoryGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryGroup)(nil)).Elem()
}

func (i RepositoryGroupMap) ToRepositoryGroupMapOutput() RepositoryGroupMapOutput {
	return i.ToRepositoryGroupMapOutputWithContext(context.Background())
}

func (i RepositoryGroupMap) ToRepositoryGroupMapOutputWithContext(ctx context.Context) RepositoryGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupMapOutput)
}

type RepositoryGroupOutput struct{ *pulumi.OutputState }

func (RepositoryGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGroup)(nil)).Elem()
}

func (o RepositoryGroupOutput) ToRepositoryGroupOutput() RepositoryGroupOutput {
	return o
}

func (o RepositoryGroupOutput) ToRepositoryGroupOutputWithContext(ctx context.Context) RepositoryGroupOutput {
	return o
}

// Required. Id of the Code Repository Index.
func (o RepositoryGroupOutput) CodeRepositoryIndex() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringOutput { return v.CodeRepositoryIndex }).(pulumi.StringOutput)
}

// Output only. Create time stamp.
func (o RepositoryGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o RepositoryGroupOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. Labels as key value pairs.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o RepositoryGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the Code Repository Index, for example `us-central1`.
func (o RepositoryGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. Identifier. Name of Repository Group.
func (o RepositoryGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RepositoryGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o RepositoryGroupOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Required. List of repositories to group.
// Structure is documented below.
func (o RepositoryGroupOutput) Repositories() RepositoryGroupRepositoryArrayOutput {
	return o.ApplyT(func(v *RepositoryGroup) RepositoryGroupRepositoryArrayOutput { return v.Repositories }).(RepositoryGroupRepositoryArrayOutput)
}

// Required. Id of the Repository Group.
func (o RepositoryGroupOutput) RepositoryGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringOutput { return v.RepositoryGroupId }).(pulumi.StringOutput)
}

// Output only. Update time stamp.
func (o RepositoryGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type RepositoryGroupArrayOutput struct{ *pulumi.OutputState }

func (RepositoryGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryGroup)(nil)).Elem()
}

func (o RepositoryGroupArrayOutput) ToRepositoryGroupArrayOutput() RepositoryGroupArrayOutput {
	return o
}

func (o RepositoryGroupArrayOutput) ToRepositoryGroupArrayOutputWithContext(ctx context.Context) RepositoryGroupArrayOutput {
	return o
}

func (o RepositoryGroupArrayOutput) Index(i pulumi.IntInput) RepositoryGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryGroup {
		return vs[0].([]*RepositoryGroup)[vs[1].(int)]
	}).(RepositoryGroupOutput)
}

type RepositoryGroupMapOutput struct{ *pulumi.OutputState }

func (RepositoryGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryGroup)(nil)).Elem()
}

func (o RepositoryGroupMapOutput) ToRepositoryGroupMapOutput() RepositoryGroupMapOutput {
	return o
}

func (o RepositoryGroupMapOutput) ToRepositoryGroupMapOutputWithContext(ctx context.Context) RepositoryGroupMapOutput {
	return o
}

func (o RepositoryGroupMapOutput) MapIndex(k pulumi.StringInput) RepositoryGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryGroup {
		return vs[0].(map[string]*RepositoryGroup)[vs[1].(string)]
	}).(RepositoryGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupInput)(nil)).Elem(), &RepositoryGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupArrayInput)(nil)).Elem(), RepositoryGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupMapInput)(nil)).Elem(), RepositoryGroupMap{})
	pulumi.RegisterOutputType(RepositoryGroupOutput{})
	pulumi.RegisterOutputType(RepositoryGroupArrayOutput{})
	pulumi.RegisterOutputType(RepositoryGroupMapOutput{})
}
