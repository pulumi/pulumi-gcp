// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource for managing DataSharingWithGoogle settings for Admin Control.
//
// ## Example Usage
//
// ### Gemini Data Sharing With Google Setting Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewDataSharingWithGoogleSetting(ctx, "example", &gemini.DataSharingWithGoogleSettingArgs{
//				DataSharingWithGoogleSettingId: pulumi.String("ls1-tf"),
//				Location:                       pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"my_key": pulumi.String("my_value"),
//				},
//				EnablePreviewDataSharing: pulumi.Bool(true),
//				EnableDataSharing:        pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DataSharingWithGoogleSetting can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/dataSharingWithGoogleSettings/{{data_sharing_with_google_setting_id}}`
//
// * `{{project}}/{{location}}/{{data_sharing_with_google_setting_id}}`
//
// * `{{location}}/{{data_sharing_with_google_setting_id}}`
//
// When using the `pulumi import` command, DataSharingWithGoogleSetting can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gemini/dataSharingWithGoogleSetting:DataSharingWithGoogleSetting default projects/{{project}}/locations/{{location}}/dataSharingWithGoogleSettings/{{data_sharing_with_google_setting_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/dataSharingWithGoogleSetting:DataSharingWithGoogleSetting default {{project}}/{{location}}/{{data_sharing_with_google_setting_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/dataSharingWithGoogleSetting:DataSharingWithGoogleSetting default {{location}}/{{data_sharing_with_google_setting_id}}
// ```
type DataSharingWithGoogleSetting struct {
	pulumi.CustomResourceState

	// Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Id of the Data Sharing With Google Setting.
	DataSharingWithGoogleSettingId pulumi.StringOutput `pulumi:"dataSharingWithGoogleSettingId"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Whether data sharing should be enabled in GA products.
	EnableDataSharing pulumi.BoolPtrOutput `pulumi:"enableDataSharing"`
	// Whether data sharing should be enabled in Preview products.
	EnablePreviewDataSharing pulumi.BoolPtrOutput `pulumi:"enablePreviewDataSharing"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/dataSharingWithGoogleSettings/{dataSharingWithGoogleSetting}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDataSharingWithGoogleSetting registers a new resource with the given unique name, arguments, and options.
func NewDataSharingWithGoogleSetting(ctx *pulumi.Context,
	name string, args *DataSharingWithGoogleSettingArgs, opts ...pulumi.ResourceOption) (*DataSharingWithGoogleSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSharingWithGoogleSettingId == nil {
		return nil, errors.New("invalid value for required argument 'DataSharingWithGoogleSettingId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSharingWithGoogleSetting
	err := ctx.RegisterResource("gcp:gemini/dataSharingWithGoogleSetting:DataSharingWithGoogleSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSharingWithGoogleSetting gets an existing DataSharingWithGoogleSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSharingWithGoogleSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSharingWithGoogleSettingState, opts ...pulumi.ResourceOption) (*DataSharingWithGoogleSetting, error) {
	var resource DataSharingWithGoogleSetting
	err := ctx.ReadResource("gcp:gemini/dataSharingWithGoogleSetting:DataSharingWithGoogleSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSharingWithGoogleSetting resources.
type dataSharingWithGoogleSettingState struct {
	// Create time stamp.
	CreateTime *string `pulumi:"createTime"`
	// Id of the Data Sharing With Google Setting.
	DataSharingWithGoogleSettingId *string `pulumi:"dataSharingWithGoogleSettingId"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Whether data sharing should be enabled in GA products.
	EnableDataSharing *bool `pulumi:"enableDataSharing"`
	// Whether data sharing should be enabled in Preview products.
	EnablePreviewDataSharing *bool `pulumi:"enablePreviewDataSharing"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/dataSharingWithGoogleSettings/{dataSharingWithGoogleSetting}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type DataSharingWithGoogleSettingState struct {
	// Create time stamp.
	CreateTime pulumi.StringPtrInput
	// Id of the Data Sharing With Google Setting.
	DataSharingWithGoogleSettingId pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Whether data sharing should be enabled in GA products.
	EnableDataSharing pulumi.BoolPtrInput
	// Whether data sharing should be enabled in Preview products.
	EnablePreviewDataSharing pulumi.BoolPtrInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/dataSharingWithGoogleSettings/{dataSharingWithGoogleSetting}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (DataSharingWithGoogleSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSharingWithGoogleSettingState)(nil)).Elem()
}

type dataSharingWithGoogleSettingArgs struct {
	// Id of the Data Sharing With Google Setting.
	DataSharingWithGoogleSettingId string `pulumi:"dataSharingWithGoogleSettingId"`
	// Whether data sharing should be enabled in GA products.
	EnableDataSharing *bool `pulumi:"enableDataSharing"`
	// Whether data sharing should be enabled in Preview products.
	EnablePreviewDataSharing *bool `pulumi:"enablePreviewDataSharing"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a DataSharingWithGoogleSetting resource.
type DataSharingWithGoogleSettingArgs struct {
	// Id of the Data Sharing With Google Setting.
	DataSharingWithGoogleSettingId pulumi.StringInput
	// Whether data sharing should be enabled in GA products.
	EnableDataSharing pulumi.BoolPtrInput
	// Whether data sharing should be enabled in Preview products.
	EnablePreviewDataSharing pulumi.BoolPtrInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (DataSharingWithGoogleSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSharingWithGoogleSettingArgs)(nil)).Elem()
}

type DataSharingWithGoogleSettingInput interface {
	pulumi.Input

	ToDataSharingWithGoogleSettingOutput() DataSharingWithGoogleSettingOutput
	ToDataSharingWithGoogleSettingOutputWithContext(ctx context.Context) DataSharingWithGoogleSettingOutput
}

func (*DataSharingWithGoogleSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSharingWithGoogleSetting)(nil)).Elem()
}

func (i *DataSharingWithGoogleSetting) ToDataSharingWithGoogleSettingOutput() DataSharingWithGoogleSettingOutput {
	return i.ToDataSharingWithGoogleSettingOutputWithContext(context.Background())
}

func (i *DataSharingWithGoogleSetting) ToDataSharingWithGoogleSettingOutputWithContext(ctx context.Context) DataSharingWithGoogleSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSharingWithGoogleSettingOutput)
}

// DataSharingWithGoogleSettingArrayInput is an input type that accepts DataSharingWithGoogleSettingArray and DataSharingWithGoogleSettingArrayOutput values.
// You can construct a concrete instance of `DataSharingWithGoogleSettingArrayInput` via:
//
//	DataSharingWithGoogleSettingArray{ DataSharingWithGoogleSettingArgs{...} }
type DataSharingWithGoogleSettingArrayInput interface {
	pulumi.Input

	ToDataSharingWithGoogleSettingArrayOutput() DataSharingWithGoogleSettingArrayOutput
	ToDataSharingWithGoogleSettingArrayOutputWithContext(context.Context) DataSharingWithGoogleSettingArrayOutput
}

type DataSharingWithGoogleSettingArray []DataSharingWithGoogleSettingInput

func (DataSharingWithGoogleSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSharingWithGoogleSetting)(nil)).Elem()
}

func (i DataSharingWithGoogleSettingArray) ToDataSharingWithGoogleSettingArrayOutput() DataSharingWithGoogleSettingArrayOutput {
	return i.ToDataSharingWithGoogleSettingArrayOutputWithContext(context.Background())
}

func (i DataSharingWithGoogleSettingArray) ToDataSharingWithGoogleSettingArrayOutputWithContext(ctx context.Context) DataSharingWithGoogleSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSharingWithGoogleSettingArrayOutput)
}

// DataSharingWithGoogleSettingMapInput is an input type that accepts DataSharingWithGoogleSettingMap and DataSharingWithGoogleSettingMapOutput values.
// You can construct a concrete instance of `DataSharingWithGoogleSettingMapInput` via:
//
//	DataSharingWithGoogleSettingMap{ "key": DataSharingWithGoogleSettingArgs{...} }
type DataSharingWithGoogleSettingMapInput interface {
	pulumi.Input

	ToDataSharingWithGoogleSettingMapOutput() DataSharingWithGoogleSettingMapOutput
	ToDataSharingWithGoogleSettingMapOutputWithContext(context.Context) DataSharingWithGoogleSettingMapOutput
}

type DataSharingWithGoogleSettingMap map[string]DataSharingWithGoogleSettingInput

func (DataSharingWithGoogleSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSharingWithGoogleSetting)(nil)).Elem()
}

func (i DataSharingWithGoogleSettingMap) ToDataSharingWithGoogleSettingMapOutput() DataSharingWithGoogleSettingMapOutput {
	return i.ToDataSharingWithGoogleSettingMapOutputWithContext(context.Background())
}

func (i DataSharingWithGoogleSettingMap) ToDataSharingWithGoogleSettingMapOutputWithContext(ctx context.Context) DataSharingWithGoogleSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSharingWithGoogleSettingMapOutput)
}

type DataSharingWithGoogleSettingOutput struct{ *pulumi.OutputState }

func (DataSharingWithGoogleSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSharingWithGoogleSetting)(nil)).Elem()
}

func (o DataSharingWithGoogleSettingOutput) ToDataSharingWithGoogleSettingOutput() DataSharingWithGoogleSettingOutput {
	return o
}

func (o DataSharingWithGoogleSettingOutput) ToDataSharingWithGoogleSettingOutputWithContext(ctx context.Context) DataSharingWithGoogleSettingOutput {
	return o
}

// Create time stamp.
func (o DataSharingWithGoogleSettingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Id of the Data Sharing With Google Setting.
func (o DataSharingWithGoogleSettingOutput) DataSharingWithGoogleSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringOutput { return v.DataSharingWithGoogleSettingId }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o DataSharingWithGoogleSettingOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Whether data sharing should be enabled in GA products.
func (o DataSharingWithGoogleSettingOutput) EnableDataSharing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.BoolPtrOutput { return v.EnableDataSharing }).(pulumi.BoolPtrOutput)
}

// Whether data sharing should be enabled in Preview products.
func (o DataSharingWithGoogleSettingOutput) EnablePreviewDataSharing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.BoolPtrOutput { return v.EnablePreviewDataSharing }).(pulumi.BoolPtrOutput)
}

// Labels as key value pairs.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o DataSharingWithGoogleSettingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o DataSharingWithGoogleSettingOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Identifier. Name of the resource.
// Format:projects/{project}/locations/{location}/dataSharingWithGoogleSettings/{dataSharingWithGoogleSetting}
func (o DataSharingWithGoogleSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o DataSharingWithGoogleSettingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o DataSharingWithGoogleSettingOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Update time stamp.
func (o DataSharingWithGoogleSettingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSharingWithGoogleSetting) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type DataSharingWithGoogleSettingArrayOutput struct{ *pulumi.OutputState }

func (DataSharingWithGoogleSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSharingWithGoogleSetting)(nil)).Elem()
}

func (o DataSharingWithGoogleSettingArrayOutput) ToDataSharingWithGoogleSettingArrayOutput() DataSharingWithGoogleSettingArrayOutput {
	return o
}

func (o DataSharingWithGoogleSettingArrayOutput) ToDataSharingWithGoogleSettingArrayOutputWithContext(ctx context.Context) DataSharingWithGoogleSettingArrayOutput {
	return o
}

func (o DataSharingWithGoogleSettingArrayOutput) Index(i pulumi.IntInput) DataSharingWithGoogleSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataSharingWithGoogleSetting {
		return vs[0].([]*DataSharingWithGoogleSetting)[vs[1].(int)]
	}).(DataSharingWithGoogleSettingOutput)
}

type DataSharingWithGoogleSettingMapOutput struct{ *pulumi.OutputState }

func (DataSharingWithGoogleSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSharingWithGoogleSetting)(nil)).Elem()
}

func (o DataSharingWithGoogleSettingMapOutput) ToDataSharingWithGoogleSettingMapOutput() DataSharingWithGoogleSettingMapOutput {
	return o
}

func (o DataSharingWithGoogleSettingMapOutput) ToDataSharingWithGoogleSettingMapOutputWithContext(ctx context.Context) DataSharingWithGoogleSettingMapOutput {
	return o
}

func (o DataSharingWithGoogleSettingMapOutput) MapIndex(k pulumi.StringInput) DataSharingWithGoogleSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataSharingWithGoogleSetting {
		return vs[0].(map[string]*DataSharingWithGoogleSetting)[vs[1].(string)]
	}).(DataSharingWithGoogleSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSharingWithGoogleSettingInput)(nil)).Elem(), &DataSharingWithGoogleSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSharingWithGoogleSettingArrayInput)(nil)).Elem(), DataSharingWithGoogleSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSharingWithGoogleSettingMapInput)(nil)).Elem(), DataSharingWithGoogleSettingMap{})
	pulumi.RegisterOutputType(DataSharingWithGoogleSettingOutput{})
	pulumi.RegisterOutputType(DataSharingWithGoogleSettingArrayOutput{})
	pulumi.RegisterOutputType(DataSharingWithGoogleSettingMapOutput{})
}
