// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource for managing CodeTools setting bindings for Admin Control.
//
// To get more information about CodeToolsSettingBinding, see:
// * How-to Guides
//   - [Gemini Cloud Assist overview](https://cloud.google.com/gemini/docs/cloud-assist/overview)
//
// ## Example Usage
//
// ### Gemini Code Tools Setting Binding Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewCodeToolsSetting(ctx, "example", &gemini.CodeToolsSettingArgs{
//				CodeToolsSettingId: pulumi.String("ls-tf1"),
//				Location:           pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"my_key": pulumi.String("my_value"),
//				},
//				EnabledTools: gemini.CodeToolsSettingEnabledToolArray{
//					&gemini.CodeToolsSettingEnabledToolArgs{
//						Handle:           pulumi.String("my_handle"),
//						Tool:             pulumi.String("my_tool"),
//						AccountConnector: pulumi.String("my_con"),
//						Configs: gemini.CodeToolsSettingEnabledToolConfigArray{
//							&gemini.CodeToolsSettingEnabledToolConfigArgs{
//								Key:   pulumi.String("my_key"),
//								Value: pulumi.String("my_value"),
//							},
//						},
//						UriOverride: pulumi.String("my_uri_override"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gemini.NewCodeToolsSettingBinding(ctx, "example", &gemini.CodeToolsSettingBindingArgs{
//				CodeToolsSettingId: pulumi.Any(basic.CodeToolsSettingId),
//				SettingBindingId:   pulumi.String("ls-tf1b1"),
//				Location:           pulumi.String("global"),
//				Target:             pulumi.String("projects/980109375338"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CodeToolsSettingBinding can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/codeToolsSettings/{{code_tools_setting_id}}/settingBindings/{{setting_binding_id}}`
//
// * `{{project}}/{{location}}/{{code_tools_setting_id}}/{{setting_binding_id}}`
//
// * `{{location}}/{{code_tools_setting_id}}/{{setting_binding_id}}`
//
// When using the `pulumi import` command, CodeToolsSettingBinding can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gemini/codeToolsSettingBinding:CodeToolsSettingBinding default projects/{{project}}/locations/{{location}}/codeToolsSettings/{{code_tools_setting_id}}/settingBindings/{{setting_binding_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/codeToolsSettingBinding:CodeToolsSettingBinding default {{project}}/{{location}}/{{code_tools_setting_id}}/{{setting_binding_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/codeToolsSettingBinding:CodeToolsSettingBinding default {{location}}/{{code_tools_setting_id}}/{{setting_binding_id}}
// ```
type CodeToolsSettingBinding struct {
	pulumi.CustomResourceState

	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	CodeToolsSettingId pulumi.StringOutput `pulumi:"codeToolsSettingId"`
	// Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/codeToolsSettings/{setting}/settingBindings/{setting_binding}
	Name pulumi.StringOutput `pulumi:"name"`
	// Product type of the setting binding.
	// Possible values are: `GEMINI_CODE_ASSIST`.
	Product pulumi.StringOutput `pulumi:"product"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Id of the setting binding.
	//
	// ***
	SettingBindingId pulumi.StringOutput `pulumi:"settingBindingId"`
	// Target of the binding.
	Target pulumi.StringOutput `pulumi:"target"`
	// Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCodeToolsSettingBinding registers a new resource with the given unique name, arguments, and options.
func NewCodeToolsSettingBinding(ctx *pulumi.Context,
	name string, args *CodeToolsSettingBindingArgs, opts ...pulumi.ResourceOption) (*CodeToolsSettingBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeToolsSettingId == nil {
		return nil, errors.New("invalid value for required argument 'CodeToolsSettingId'")
	}
	if args.SettingBindingId == nil {
		return nil, errors.New("invalid value for required argument 'SettingBindingId'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CodeToolsSettingBinding
	err := ctx.RegisterResource("gcp:gemini/codeToolsSettingBinding:CodeToolsSettingBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCodeToolsSettingBinding gets an existing CodeToolsSettingBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCodeToolsSettingBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CodeToolsSettingBindingState, opts ...pulumi.ResourceOption) (*CodeToolsSettingBinding, error) {
	var resource CodeToolsSettingBinding
	err := ctx.ReadResource("gcp:gemini/codeToolsSettingBinding:CodeToolsSettingBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CodeToolsSettingBinding resources.
type codeToolsSettingBindingState struct {
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	CodeToolsSettingId *string `pulumi:"codeToolsSettingId"`
	// Create time stamp.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/codeToolsSettings/{setting}/settingBindings/{setting_binding}
	Name *string `pulumi:"name"`
	// Product type of the setting binding.
	// Possible values are: `GEMINI_CODE_ASSIST`.
	Product *string `pulumi:"product"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Id of the setting binding.
	//
	// ***
	SettingBindingId *string `pulumi:"settingBindingId"`
	// Target of the binding.
	Target *string `pulumi:"target"`
	// Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type CodeToolsSettingBindingState struct {
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	CodeToolsSettingId pulumi.StringPtrInput
	// Create time stamp.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/codeToolsSettings/{setting}/settingBindings/{setting_binding}
	Name pulumi.StringPtrInput
	// Product type of the setting binding.
	// Possible values are: `GEMINI_CODE_ASSIST`.
	Product pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Id of the setting binding.
	//
	// ***
	SettingBindingId pulumi.StringPtrInput
	// Target of the binding.
	Target pulumi.StringPtrInput
	// Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (CodeToolsSettingBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*codeToolsSettingBindingState)(nil)).Elem()
}

type codeToolsSettingBindingArgs struct {
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	CodeToolsSettingId string `pulumi:"codeToolsSettingId"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Product type of the setting binding.
	// Possible values are: `GEMINI_CODE_ASSIST`.
	Product *string `pulumi:"product"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Id of the setting binding.
	//
	// ***
	SettingBindingId string `pulumi:"settingBindingId"`
	// Target of the binding.
	Target string `pulumi:"target"`
}

// The set of arguments for constructing a CodeToolsSettingBinding resource.
type CodeToolsSettingBindingArgs struct {
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	CodeToolsSettingId pulumi.StringInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Product type of the setting binding.
	// Possible values are: `GEMINI_CODE_ASSIST`.
	Product pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Id of the setting binding.
	//
	// ***
	SettingBindingId pulumi.StringInput
	// Target of the binding.
	Target pulumi.StringInput
}

func (CodeToolsSettingBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*codeToolsSettingBindingArgs)(nil)).Elem()
}

type CodeToolsSettingBindingInput interface {
	pulumi.Input

	ToCodeToolsSettingBindingOutput() CodeToolsSettingBindingOutput
	ToCodeToolsSettingBindingOutputWithContext(ctx context.Context) CodeToolsSettingBindingOutput
}

func (*CodeToolsSettingBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeToolsSettingBinding)(nil)).Elem()
}

func (i *CodeToolsSettingBinding) ToCodeToolsSettingBindingOutput() CodeToolsSettingBindingOutput {
	return i.ToCodeToolsSettingBindingOutputWithContext(context.Background())
}

func (i *CodeToolsSettingBinding) ToCodeToolsSettingBindingOutputWithContext(ctx context.Context) CodeToolsSettingBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeToolsSettingBindingOutput)
}

// CodeToolsSettingBindingArrayInput is an input type that accepts CodeToolsSettingBindingArray and CodeToolsSettingBindingArrayOutput values.
// You can construct a concrete instance of `CodeToolsSettingBindingArrayInput` via:
//
//	CodeToolsSettingBindingArray{ CodeToolsSettingBindingArgs{...} }
type CodeToolsSettingBindingArrayInput interface {
	pulumi.Input

	ToCodeToolsSettingBindingArrayOutput() CodeToolsSettingBindingArrayOutput
	ToCodeToolsSettingBindingArrayOutputWithContext(context.Context) CodeToolsSettingBindingArrayOutput
}

type CodeToolsSettingBindingArray []CodeToolsSettingBindingInput

func (CodeToolsSettingBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeToolsSettingBinding)(nil)).Elem()
}

func (i CodeToolsSettingBindingArray) ToCodeToolsSettingBindingArrayOutput() CodeToolsSettingBindingArrayOutput {
	return i.ToCodeToolsSettingBindingArrayOutputWithContext(context.Background())
}

func (i CodeToolsSettingBindingArray) ToCodeToolsSettingBindingArrayOutputWithContext(ctx context.Context) CodeToolsSettingBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeToolsSettingBindingArrayOutput)
}

// CodeToolsSettingBindingMapInput is an input type that accepts CodeToolsSettingBindingMap and CodeToolsSettingBindingMapOutput values.
// You can construct a concrete instance of `CodeToolsSettingBindingMapInput` via:
//
//	CodeToolsSettingBindingMap{ "key": CodeToolsSettingBindingArgs{...} }
type CodeToolsSettingBindingMapInput interface {
	pulumi.Input

	ToCodeToolsSettingBindingMapOutput() CodeToolsSettingBindingMapOutput
	ToCodeToolsSettingBindingMapOutputWithContext(context.Context) CodeToolsSettingBindingMapOutput
}

type CodeToolsSettingBindingMap map[string]CodeToolsSettingBindingInput

func (CodeToolsSettingBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeToolsSettingBinding)(nil)).Elem()
}

func (i CodeToolsSettingBindingMap) ToCodeToolsSettingBindingMapOutput() CodeToolsSettingBindingMapOutput {
	return i.ToCodeToolsSettingBindingMapOutputWithContext(context.Background())
}

func (i CodeToolsSettingBindingMap) ToCodeToolsSettingBindingMapOutputWithContext(ctx context.Context) CodeToolsSettingBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeToolsSettingBindingMapOutput)
}

type CodeToolsSettingBindingOutput struct{ *pulumi.OutputState }

func (CodeToolsSettingBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeToolsSettingBinding)(nil)).Elem()
}

func (o CodeToolsSettingBindingOutput) ToCodeToolsSettingBindingOutput() CodeToolsSettingBindingOutput {
	return o
}

func (o CodeToolsSettingBindingOutput) ToCodeToolsSettingBindingOutputWithContext(ctx context.Context) CodeToolsSettingBindingOutput {
	return o
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o CodeToolsSettingBindingOutput) CodeToolsSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringOutput { return v.CodeToolsSettingId }).(pulumi.StringOutput)
}

// Create time stamp.
func (o CodeToolsSettingBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o CodeToolsSettingBindingOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Labels as key value pairs.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o CodeToolsSettingBindingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o CodeToolsSettingBindingOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Identifier. Name of the resource.
// Format:projects/{project}/locations/{location}/codeToolsSettings/{setting}/settingBindings/{setting_binding}
func (o CodeToolsSettingBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Product type of the setting binding.
// Possible values are: `GEMINI_CODE_ASSIST`.
func (o CodeToolsSettingBindingOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringOutput { return v.Product }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CodeToolsSettingBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o CodeToolsSettingBindingOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Id of the setting binding.
//
// ***
func (o CodeToolsSettingBindingOutput) SettingBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringOutput { return v.SettingBindingId }).(pulumi.StringOutput)
}

// Target of the binding.
func (o CodeToolsSettingBindingOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// Update time stamp.
func (o CodeToolsSettingBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSettingBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type CodeToolsSettingBindingArrayOutput struct{ *pulumi.OutputState }

func (CodeToolsSettingBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeToolsSettingBinding)(nil)).Elem()
}

func (o CodeToolsSettingBindingArrayOutput) ToCodeToolsSettingBindingArrayOutput() CodeToolsSettingBindingArrayOutput {
	return o
}

func (o CodeToolsSettingBindingArrayOutput) ToCodeToolsSettingBindingArrayOutputWithContext(ctx context.Context) CodeToolsSettingBindingArrayOutput {
	return o
}

func (o CodeToolsSettingBindingArrayOutput) Index(i pulumi.IntInput) CodeToolsSettingBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CodeToolsSettingBinding {
		return vs[0].([]*CodeToolsSettingBinding)[vs[1].(int)]
	}).(CodeToolsSettingBindingOutput)
}

type CodeToolsSettingBindingMapOutput struct{ *pulumi.OutputState }

func (CodeToolsSettingBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeToolsSettingBinding)(nil)).Elem()
}

func (o CodeToolsSettingBindingMapOutput) ToCodeToolsSettingBindingMapOutput() CodeToolsSettingBindingMapOutput {
	return o
}

func (o CodeToolsSettingBindingMapOutput) ToCodeToolsSettingBindingMapOutputWithContext(ctx context.Context) CodeToolsSettingBindingMapOutput {
	return o
}

func (o CodeToolsSettingBindingMapOutput) MapIndex(k pulumi.StringInput) CodeToolsSettingBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CodeToolsSettingBinding {
		return vs[0].(map[string]*CodeToolsSettingBinding)[vs[1].(string)]
	}).(CodeToolsSettingBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CodeToolsSettingBindingInput)(nil)).Elem(), &CodeToolsSettingBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeToolsSettingBindingArrayInput)(nil)).Elem(), CodeToolsSettingBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeToolsSettingBindingMapInput)(nil)).Elem(), CodeToolsSettingBindingMap{})
	pulumi.RegisterOutputType(CodeToolsSettingBindingOutput{})
	pulumi.RegisterOutputType(CodeToolsSettingBindingArrayOutput{})
	pulumi.RegisterOutputType(CodeToolsSettingBindingMapOutput{})
}
