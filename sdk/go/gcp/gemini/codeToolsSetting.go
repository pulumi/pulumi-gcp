// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource for managing CodeTools settings for Admin Control.
//
// ## Example Usage
//
// ### Gemini Code Tools Setting Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewCodeToolsSetting(ctx, "example", &gemini.CodeToolsSettingArgs{
//				CodeToolsSettingId: pulumi.String("ls1-tf"),
//				Location:           pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"my_key": pulumi.String("my_value"),
//				},
//				EnabledTools: gemini.CodeToolsSettingEnabledToolArray{
//					&gemini.CodeToolsSettingEnabledToolArgs{
//						Handle:           pulumi.String("my_handle"),
//						Tool:             pulumi.String("my_tool"),
//						AccountConnector: pulumi.String("my_con"),
//						Configs: gemini.CodeToolsSettingEnabledToolConfigArray{
//							&gemini.CodeToolsSettingEnabledToolConfigArgs{
//								Key:   pulumi.String("my_key"),
//								Value: pulumi.String("my_value"),
//							},
//						},
//						UriOverride: pulumi.String("my_uri_override"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CodeToolsSetting can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/codeToolsSettings/{{code_tools_setting_id}}`
//
// * `{{project}}/{{location}}/{{code_tools_setting_id}}`
//
// * `{{location}}/{{code_tools_setting_id}}`
//
// When using the `pulumi import` command, CodeToolsSetting can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gemini/codeToolsSetting:CodeToolsSetting default projects/{{project}}/locations/{{location}}/codeToolsSettings/{{code_tools_setting_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/codeToolsSetting:CodeToolsSetting default {{project}}/{{location}}/{{code_tools_setting_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/codeToolsSetting:CodeToolsSetting default {{location}}/{{code_tools_setting_id}}
// ```
type CodeToolsSetting struct {
	pulumi.CustomResourceState

	// Id of the Code Tools Setting.
	CodeToolsSettingId pulumi.StringOutput `pulumi:"codeToolsSettingId"`
	// Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Represents the full set of enabled tools.
	// Structure is documented below.
	EnabledTools CodeToolsSettingEnabledToolArrayOutput `pulumi:"enabledTools"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/codeToolsSettings/{codeToolsSetting}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCodeToolsSetting registers a new resource with the given unique name, arguments, and options.
func NewCodeToolsSetting(ctx *pulumi.Context,
	name string, args *CodeToolsSettingArgs, opts ...pulumi.ResourceOption) (*CodeToolsSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeToolsSettingId == nil {
		return nil, errors.New("invalid value for required argument 'CodeToolsSettingId'")
	}
	if args.EnabledTools == nil {
		return nil, errors.New("invalid value for required argument 'EnabledTools'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CodeToolsSetting
	err := ctx.RegisterResource("gcp:gemini/codeToolsSetting:CodeToolsSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCodeToolsSetting gets an existing CodeToolsSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCodeToolsSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CodeToolsSettingState, opts ...pulumi.ResourceOption) (*CodeToolsSetting, error) {
	var resource CodeToolsSetting
	err := ctx.ReadResource("gcp:gemini/codeToolsSetting:CodeToolsSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CodeToolsSetting resources.
type codeToolsSettingState struct {
	// Id of the Code Tools Setting.
	CodeToolsSettingId *string `pulumi:"codeToolsSettingId"`
	// Create time stamp.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Represents the full set of enabled tools.
	// Structure is documented below.
	EnabledTools []CodeToolsSettingEnabledTool `pulumi:"enabledTools"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/codeToolsSettings/{codeToolsSetting}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type CodeToolsSettingState struct {
	// Id of the Code Tools Setting.
	CodeToolsSettingId pulumi.StringPtrInput
	// Create time stamp.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Represents the full set of enabled tools.
	// Structure is documented below.
	EnabledTools CodeToolsSettingEnabledToolArrayInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/codeToolsSettings/{codeToolsSetting}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (CodeToolsSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*codeToolsSettingState)(nil)).Elem()
}

type codeToolsSettingArgs struct {
	// Id of the Code Tools Setting.
	CodeToolsSettingId string `pulumi:"codeToolsSettingId"`
	// Represents the full set of enabled tools.
	// Structure is documented below.
	EnabledTools []CodeToolsSettingEnabledTool `pulumi:"enabledTools"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CodeToolsSetting resource.
type CodeToolsSettingArgs struct {
	// Id of the Code Tools Setting.
	CodeToolsSettingId pulumi.StringInput
	// Represents the full set of enabled tools.
	// Structure is documented below.
	EnabledTools CodeToolsSettingEnabledToolArrayInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CodeToolsSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*codeToolsSettingArgs)(nil)).Elem()
}

type CodeToolsSettingInput interface {
	pulumi.Input

	ToCodeToolsSettingOutput() CodeToolsSettingOutput
	ToCodeToolsSettingOutputWithContext(ctx context.Context) CodeToolsSettingOutput
}

func (*CodeToolsSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeToolsSetting)(nil)).Elem()
}

func (i *CodeToolsSetting) ToCodeToolsSettingOutput() CodeToolsSettingOutput {
	return i.ToCodeToolsSettingOutputWithContext(context.Background())
}

func (i *CodeToolsSetting) ToCodeToolsSettingOutputWithContext(ctx context.Context) CodeToolsSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeToolsSettingOutput)
}

// CodeToolsSettingArrayInput is an input type that accepts CodeToolsSettingArray and CodeToolsSettingArrayOutput values.
// You can construct a concrete instance of `CodeToolsSettingArrayInput` via:
//
//	CodeToolsSettingArray{ CodeToolsSettingArgs{...} }
type CodeToolsSettingArrayInput interface {
	pulumi.Input

	ToCodeToolsSettingArrayOutput() CodeToolsSettingArrayOutput
	ToCodeToolsSettingArrayOutputWithContext(context.Context) CodeToolsSettingArrayOutput
}

type CodeToolsSettingArray []CodeToolsSettingInput

func (CodeToolsSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeToolsSetting)(nil)).Elem()
}

func (i CodeToolsSettingArray) ToCodeToolsSettingArrayOutput() CodeToolsSettingArrayOutput {
	return i.ToCodeToolsSettingArrayOutputWithContext(context.Background())
}

func (i CodeToolsSettingArray) ToCodeToolsSettingArrayOutputWithContext(ctx context.Context) CodeToolsSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeToolsSettingArrayOutput)
}

// CodeToolsSettingMapInput is an input type that accepts CodeToolsSettingMap and CodeToolsSettingMapOutput values.
// You can construct a concrete instance of `CodeToolsSettingMapInput` via:
//
//	CodeToolsSettingMap{ "key": CodeToolsSettingArgs{...} }
type CodeToolsSettingMapInput interface {
	pulumi.Input

	ToCodeToolsSettingMapOutput() CodeToolsSettingMapOutput
	ToCodeToolsSettingMapOutputWithContext(context.Context) CodeToolsSettingMapOutput
}

type CodeToolsSettingMap map[string]CodeToolsSettingInput

func (CodeToolsSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeToolsSetting)(nil)).Elem()
}

func (i CodeToolsSettingMap) ToCodeToolsSettingMapOutput() CodeToolsSettingMapOutput {
	return i.ToCodeToolsSettingMapOutputWithContext(context.Background())
}

func (i CodeToolsSettingMap) ToCodeToolsSettingMapOutputWithContext(ctx context.Context) CodeToolsSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeToolsSettingMapOutput)
}

type CodeToolsSettingOutput struct{ *pulumi.OutputState }

func (CodeToolsSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeToolsSetting)(nil)).Elem()
}

func (o CodeToolsSettingOutput) ToCodeToolsSettingOutput() CodeToolsSettingOutput {
	return o
}

func (o CodeToolsSettingOutput) ToCodeToolsSettingOutputWithContext(ctx context.Context) CodeToolsSettingOutput {
	return o
}

// Id of the Code Tools Setting.
func (o CodeToolsSettingOutput) CodeToolsSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringOutput { return v.CodeToolsSettingId }).(pulumi.StringOutput)
}

// Create time stamp.
func (o CodeToolsSettingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o CodeToolsSettingOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Represents the full set of enabled tools.
// Structure is documented below.
func (o CodeToolsSettingOutput) EnabledTools() CodeToolsSettingEnabledToolArrayOutput {
	return o.ApplyT(func(v *CodeToolsSetting) CodeToolsSettingEnabledToolArrayOutput { return v.EnabledTools }).(CodeToolsSettingEnabledToolArrayOutput)
}

// Labels as key value pairs.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o CodeToolsSettingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o CodeToolsSettingOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Identifier. Name of the resource.
// Format:projects/{project}/locations/{location}/codeToolsSettings/{codeToolsSetting}
func (o CodeToolsSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CodeToolsSettingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o CodeToolsSettingOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Update time stamp.
func (o CodeToolsSettingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeToolsSetting) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type CodeToolsSettingArrayOutput struct{ *pulumi.OutputState }

func (CodeToolsSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeToolsSetting)(nil)).Elem()
}

func (o CodeToolsSettingArrayOutput) ToCodeToolsSettingArrayOutput() CodeToolsSettingArrayOutput {
	return o
}

func (o CodeToolsSettingArrayOutput) ToCodeToolsSettingArrayOutputWithContext(ctx context.Context) CodeToolsSettingArrayOutput {
	return o
}

func (o CodeToolsSettingArrayOutput) Index(i pulumi.IntInput) CodeToolsSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CodeToolsSetting {
		return vs[0].([]*CodeToolsSetting)[vs[1].(int)]
	}).(CodeToolsSettingOutput)
}

type CodeToolsSettingMapOutput struct{ *pulumi.OutputState }

func (CodeToolsSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeToolsSetting)(nil)).Elem()
}

func (o CodeToolsSettingMapOutput) ToCodeToolsSettingMapOutput() CodeToolsSettingMapOutput {
	return o
}

func (o CodeToolsSettingMapOutput) ToCodeToolsSettingMapOutputWithContext(ctx context.Context) CodeToolsSettingMapOutput {
	return o
}

func (o CodeToolsSettingMapOutput) MapIndex(k pulumi.StringInput) CodeToolsSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CodeToolsSetting {
		return vs[0].(map[string]*CodeToolsSetting)[vs[1].(string)]
	}).(CodeToolsSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CodeToolsSettingInput)(nil)).Elem(), &CodeToolsSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeToolsSettingArrayInput)(nil)).Elem(), CodeToolsSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeToolsSettingMapInput)(nil)).Elem(), CodeToolsSettingMap{})
	pulumi.RegisterOutputType(CodeToolsSettingOutput{})
	pulumi.RegisterOutputType(CodeToolsSettingArrayOutput{})
	pulumi.RegisterOutputType(CodeToolsSettingMapOutput{})
}
