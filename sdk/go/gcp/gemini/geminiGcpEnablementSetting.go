// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource for managing GeminiGcpEnablement settings for Admin Control.
//
// ## Example Usage
//
// ### Gemini Gemini Gcp Enablement Setting Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewGeminiGcpEnablementSetting(ctx, "example", &gemini.GeminiGcpEnablementSettingArgs{
//				GeminiGcpEnablementSettingId: pulumi.String("ls1-tf"),
//				Location:                     pulumi.String("global"),
//				EnableCustomerDataSharing:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GeminiGcpEnablementSetting can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/geminiGcpEnablementSettings/{{gemini_gcp_enablement_setting_id}}`
//
// * `{{project}}/{{location}}/{{gemini_gcp_enablement_setting_id}}`
//
// * `{{location}}/{{gemini_gcp_enablement_setting_id}}`
//
// When using the `pulumi import` command, GeminiGcpEnablementSetting can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gemini/geminiGcpEnablementSetting:GeminiGcpEnablementSetting default projects/{{project}}/locations/{{location}}/geminiGcpEnablementSettings/{{gemini_gcp_enablement_setting_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/geminiGcpEnablementSetting:GeminiGcpEnablementSetting default {{project}}/{{location}}/{{gemini_gcp_enablement_setting_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/geminiGcpEnablementSetting:GeminiGcpEnablementSetting default {{location}}/{{gemini_gcp_enablement_setting_id}}
// ```
type GeminiGcpEnablementSetting struct {
	pulumi.CustomResourceState

	// Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Whether customer data sharing should be enabled.
	EnableCustomerDataSharing pulumi.BoolPtrOutput `pulumi:"enableCustomerDataSharing"`
	// Id of the Gemini Gcp Enablement setting.
	//
	// ***
	GeminiGcpEnablementSettingId pulumi.StringOutput `pulumi:"geminiGcpEnablementSettingId"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/geminiGcpEnablementSettings/{geminiGcpEnablementSetting}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGeminiGcpEnablementSetting registers a new resource with the given unique name, arguments, and options.
func NewGeminiGcpEnablementSetting(ctx *pulumi.Context,
	name string, args *GeminiGcpEnablementSettingArgs, opts ...pulumi.ResourceOption) (*GeminiGcpEnablementSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GeminiGcpEnablementSettingId == nil {
		return nil, errors.New("invalid value for required argument 'GeminiGcpEnablementSettingId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GeminiGcpEnablementSetting
	err := ctx.RegisterResource("gcp:gemini/geminiGcpEnablementSetting:GeminiGcpEnablementSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeminiGcpEnablementSetting gets an existing GeminiGcpEnablementSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeminiGcpEnablementSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeminiGcpEnablementSettingState, opts ...pulumi.ResourceOption) (*GeminiGcpEnablementSetting, error) {
	var resource GeminiGcpEnablementSetting
	err := ctx.ReadResource("gcp:gemini/geminiGcpEnablementSetting:GeminiGcpEnablementSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeminiGcpEnablementSetting resources.
type geminiGcpEnablementSettingState struct {
	// Create time stamp.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Whether customer data sharing should be enabled.
	EnableCustomerDataSharing *bool `pulumi:"enableCustomerDataSharing"`
	// Id of the Gemini Gcp Enablement setting.
	//
	// ***
	GeminiGcpEnablementSettingId *string `pulumi:"geminiGcpEnablementSettingId"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/geminiGcpEnablementSettings/{geminiGcpEnablementSetting}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type GeminiGcpEnablementSettingState struct {
	// Create time stamp.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Whether customer data sharing should be enabled.
	EnableCustomerDataSharing pulumi.BoolPtrInput
	// Id of the Gemini Gcp Enablement setting.
	//
	// ***
	GeminiGcpEnablementSettingId pulumi.StringPtrInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/geminiGcpEnablementSettings/{geminiGcpEnablementSetting}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (GeminiGcpEnablementSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiGcpEnablementSettingState)(nil)).Elem()
}

type geminiGcpEnablementSettingArgs struct {
	// Whether customer data sharing should be enabled.
	EnableCustomerDataSharing *bool `pulumi:"enableCustomerDataSharing"`
	// Id of the Gemini Gcp Enablement setting.
	//
	// ***
	GeminiGcpEnablementSettingId string `pulumi:"geminiGcpEnablementSettingId"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a GeminiGcpEnablementSetting resource.
type GeminiGcpEnablementSettingArgs struct {
	// Whether customer data sharing should be enabled.
	EnableCustomerDataSharing pulumi.BoolPtrInput
	// Id of the Gemini Gcp Enablement setting.
	//
	// ***
	GeminiGcpEnablementSettingId pulumi.StringInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GeminiGcpEnablementSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiGcpEnablementSettingArgs)(nil)).Elem()
}

type GeminiGcpEnablementSettingInput interface {
	pulumi.Input

	ToGeminiGcpEnablementSettingOutput() GeminiGcpEnablementSettingOutput
	ToGeminiGcpEnablementSettingOutputWithContext(ctx context.Context) GeminiGcpEnablementSettingOutput
}

func (*GeminiGcpEnablementSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiGcpEnablementSetting)(nil)).Elem()
}

func (i *GeminiGcpEnablementSetting) ToGeminiGcpEnablementSettingOutput() GeminiGcpEnablementSettingOutput {
	return i.ToGeminiGcpEnablementSettingOutputWithContext(context.Background())
}

func (i *GeminiGcpEnablementSetting) ToGeminiGcpEnablementSettingOutputWithContext(ctx context.Context) GeminiGcpEnablementSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeminiGcpEnablementSettingOutput)
}

// GeminiGcpEnablementSettingArrayInput is an input type that accepts GeminiGcpEnablementSettingArray and GeminiGcpEnablementSettingArrayOutput values.
// You can construct a concrete instance of `GeminiGcpEnablementSettingArrayInput` via:
//
//	GeminiGcpEnablementSettingArray{ GeminiGcpEnablementSettingArgs{...} }
type GeminiGcpEnablementSettingArrayInput interface {
	pulumi.Input

	ToGeminiGcpEnablementSettingArrayOutput() GeminiGcpEnablementSettingArrayOutput
	ToGeminiGcpEnablementSettingArrayOutputWithContext(context.Context) GeminiGcpEnablementSettingArrayOutput
}

type GeminiGcpEnablementSettingArray []GeminiGcpEnablementSettingInput

func (GeminiGcpEnablementSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GeminiGcpEnablementSetting)(nil)).Elem()
}

func (i GeminiGcpEnablementSettingArray) ToGeminiGcpEnablementSettingArrayOutput() GeminiGcpEnablementSettingArrayOutput {
	return i.ToGeminiGcpEnablementSettingArrayOutputWithContext(context.Background())
}

func (i GeminiGcpEnablementSettingArray) ToGeminiGcpEnablementSettingArrayOutputWithContext(ctx context.Context) GeminiGcpEnablementSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeminiGcpEnablementSettingArrayOutput)
}

// GeminiGcpEnablementSettingMapInput is an input type that accepts GeminiGcpEnablementSettingMap and GeminiGcpEnablementSettingMapOutput values.
// You can construct a concrete instance of `GeminiGcpEnablementSettingMapInput` via:
//
//	GeminiGcpEnablementSettingMap{ "key": GeminiGcpEnablementSettingArgs{...} }
type GeminiGcpEnablementSettingMapInput interface {
	pulumi.Input

	ToGeminiGcpEnablementSettingMapOutput() GeminiGcpEnablementSettingMapOutput
	ToGeminiGcpEnablementSettingMapOutputWithContext(context.Context) GeminiGcpEnablementSettingMapOutput
}

type GeminiGcpEnablementSettingMap map[string]GeminiGcpEnablementSettingInput

func (GeminiGcpEnablementSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GeminiGcpEnablementSetting)(nil)).Elem()
}

func (i GeminiGcpEnablementSettingMap) ToGeminiGcpEnablementSettingMapOutput() GeminiGcpEnablementSettingMapOutput {
	return i.ToGeminiGcpEnablementSettingMapOutputWithContext(context.Background())
}

func (i GeminiGcpEnablementSettingMap) ToGeminiGcpEnablementSettingMapOutputWithContext(ctx context.Context) GeminiGcpEnablementSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeminiGcpEnablementSettingMapOutput)
}

type GeminiGcpEnablementSettingOutput struct{ *pulumi.OutputState }

func (GeminiGcpEnablementSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiGcpEnablementSetting)(nil)).Elem()
}

func (o GeminiGcpEnablementSettingOutput) ToGeminiGcpEnablementSettingOutput() GeminiGcpEnablementSettingOutput {
	return o
}

func (o GeminiGcpEnablementSettingOutput) ToGeminiGcpEnablementSettingOutputWithContext(ctx context.Context) GeminiGcpEnablementSettingOutput {
	return o
}

// Create time stamp.
func (o GeminiGcpEnablementSettingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o GeminiGcpEnablementSettingOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Whether customer data sharing should be enabled.
func (o GeminiGcpEnablementSettingOutput) EnableCustomerDataSharing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.BoolPtrOutput { return v.EnableCustomerDataSharing }).(pulumi.BoolPtrOutput)
}

// Id of the Gemini Gcp Enablement setting.
//
// ***
func (o GeminiGcpEnablementSettingOutput) GeminiGcpEnablementSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringOutput { return v.GeminiGcpEnablementSettingId }).(pulumi.StringOutput)
}

// Labels as key value pairs.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GeminiGcpEnablementSettingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o GeminiGcpEnablementSettingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. Name of the resource.
// Format:projects/{project}/locations/{location}/geminiGcpEnablementSettings/{geminiGcpEnablementSetting}
func (o GeminiGcpEnablementSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GeminiGcpEnablementSettingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GeminiGcpEnablementSettingOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Update time stamp.
func (o GeminiGcpEnablementSettingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiGcpEnablementSetting) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GeminiGcpEnablementSettingArrayOutput struct{ *pulumi.OutputState }

func (GeminiGcpEnablementSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GeminiGcpEnablementSetting)(nil)).Elem()
}

func (o GeminiGcpEnablementSettingArrayOutput) ToGeminiGcpEnablementSettingArrayOutput() GeminiGcpEnablementSettingArrayOutput {
	return o
}

func (o GeminiGcpEnablementSettingArrayOutput) ToGeminiGcpEnablementSettingArrayOutputWithContext(ctx context.Context) GeminiGcpEnablementSettingArrayOutput {
	return o
}

func (o GeminiGcpEnablementSettingArrayOutput) Index(i pulumi.IntInput) GeminiGcpEnablementSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GeminiGcpEnablementSetting {
		return vs[0].([]*GeminiGcpEnablementSetting)[vs[1].(int)]
	}).(GeminiGcpEnablementSettingOutput)
}

type GeminiGcpEnablementSettingMapOutput struct{ *pulumi.OutputState }

func (GeminiGcpEnablementSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GeminiGcpEnablementSetting)(nil)).Elem()
}

func (o GeminiGcpEnablementSettingMapOutput) ToGeminiGcpEnablementSettingMapOutput() GeminiGcpEnablementSettingMapOutput {
	return o
}

func (o GeminiGcpEnablementSettingMapOutput) ToGeminiGcpEnablementSettingMapOutputWithContext(ctx context.Context) GeminiGcpEnablementSettingMapOutput {
	return o
}

func (o GeminiGcpEnablementSettingMapOutput) MapIndex(k pulumi.StringInput) GeminiGcpEnablementSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GeminiGcpEnablementSetting {
		return vs[0].(map[string]*GeminiGcpEnablementSetting)[vs[1].(string)]
	}).(GeminiGcpEnablementSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeminiGcpEnablementSettingInput)(nil)).Elem(), &GeminiGcpEnablementSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeminiGcpEnablementSettingArrayInput)(nil)).Elem(), GeminiGcpEnablementSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeminiGcpEnablementSettingMapInput)(nil)).Elem(), GeminiGcpEnablementSettingMap{})
	pulumi.RegisterOutputType(GeminiGcpEnablementSettingOutput{})
	pulumi.RegisterOutputType(GeminiGcpEnablementSettingArrayOutput{})
	pulumi.RegisterOutputType(GeminiGcpEnablementSettingMapOutput{})
}
