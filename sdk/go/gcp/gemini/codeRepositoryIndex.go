// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource for managing Code Repository Index for Gemini Code Assist.
//
// To get more information about CodeRepositoryIndex, see:
//
// * [API documentation](https://cloud.google.com/gemini/docs/api/reference/rest/v1/projects.locations.codeRepositoryIndexes)
// * How-to Guides
//   - [Gemini Code Assist overview](https://cloud.google.com/gemini/docs/codeassist/overview)
//
// ## Example Usage
//
// ### Gemini Code Repository Index Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewCodeRepositoryIndex(ctx, "example", &gemini.CodeRepositoryIndexArgs{
//				Location:              pulumi.String("us-central1"),
//				CodeRepositoryIndexId: pulumi.String("code-repository-index-example"),
//				KmsKey:                pulumi.String("projects/projectExample/locations/locationExample/keyRings/keyRingExample/cryptoKeys/cryptoKeyExample"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CodeRepositoryIndex can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index_id}}`
//
// * `{{project}}/{{location}}/{{code_repository_index_id}}`
//
// * `{{location}}/{{code_repository_index_id}}`
//
// When using the `pulumi import` command, CodeRepositoryIndex can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex default projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex default {{project}}/{{location}}/{{code_repository_index_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex default {{location}}/{{code_repository_index_id}}
// ```
type CodeRepositoryIndex struct {
	pulumi.CustomResourceState

	// Required. Id of the Code Repository Index.
	//
	// ***
	CodeRepositoryIndexId pulumi.StringOutput `pulumi:"codeRepositoryIndexId"`
	// Output only. Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// Optional. Immutable. Customer-managed encryption key name, in the format
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KmsKey pulumi.StringPtrOutput `pulumi:"kmsKey"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the Code Repository Index, for example `us-central1`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Immutable. Identifier. Name of Code Repository Index.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Code Repository Index instance State.
	// Possible values are: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`, `SUSPENDED`.
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCodeRepositoryIndex registers a new resource with the given unique name, arguments, and options.
func NewCodeRepositoryIndex(ctx *pulumi.Context,
	name string, args *CodeRepositoryIndexArgs, opts ...pulumi.ResourceOption) (*CodeRepositoryIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeRepositoryIndexId == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepositoryIndexId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CodeRepositoryIndex
	err := ctx.RegisterResource("gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCodeRepositoryIndex gets an existing CodeRepositoryIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCodeRepositoryIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CodeRepositoryIndexState, opts ...pulumi.ResourceOption) (*CodeRepositoryIndex, error) {
	var resource CodeRepositoryIndex
	err := ctx.ReadResource("gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CodeRepositoryIndex resources.
type codeRepositoryIndexState struct {
	// Required. Id of the Code Repository Index.
	//
	// ***
	CodeRepositoryIndexId *string `pulumi:"codeRepositoryIndexId"`
	// Output only. Create time stamp.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Optional. Immutable. Customer-managed encryption key name, in the format
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KmsKey *string `pulumi:"kmsKey"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the Code Repository Index, for example `us-central1`.
	Location *string `pulumi:"location"`
	// Immutable. Identifier. Name of Code Repository Index.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Code Repository Index instance State.
	// Possible values are: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`, `SUSPENDED`.
	State *string `pulumi:"state"`
	// Output only. Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type CodeRepositoryIndexState struct {
	// Required. Id of the Code Repository Index.
	//
	// ***
	CodeRepositoryIndexId pulumi.StringPtrInput
	// Output only. Create time stamp.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
	ForceDestroy pulumi.BoolPtrInput
	// Optional. Immutable. Customer-managed encryption key name, in the format
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KmsKey pulumi.StringPtrInput
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the Code Repository Index, for example `us-central1`.
	Location pulumi.StringPtrInput
	// Immutable. Identifier. Name of Code Repository Index.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Code Repository Index instance State.
	// Possible values are: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`, `SUSPENDED`.
	State pulumi.StringPtrInput
	// Output only. Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (CodeRepositoryIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*codeRepositoryIndexState)(nil)).Elem()
}

type codeRepositoryIndexArgs struct {
	// Required. Id of the Code Repository Index.
	//
	// ***
	CodeRepositoryIndexId string `pulumi:"codeRepositoryIndexId"`
	// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Optional. Immutable. Customer-managed encryption key name, in the format
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KmsKey *string `pulumi:"kmsKey"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the Code Repository Index, for example `us-central1`.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CodeRepositoryIndex resource.
type CodeRepositoryIndexArgs struct {
	// Required. Id of the Code Repository Index.
	//
	// ***
	CodeRepositoryIndexId pulumi.StringInput
	// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
	ForceDestroy pulumi.BoolPtrInput
	// Optional. Immutable. Customer-managed encryption key name, in the format
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KmsKey pulumi.StringPtrInput
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the Code Repository Index, for example `us-central1`.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CodeRepositoryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*codeRepositoryIndexArgs)(nil)).Elem()
}

type CodeRepositoryIndexInput interface {
	pulumi.Input

	ToCodeRepositoryIndexOutput() CodeRepositoryIndexOutput
	ToCodeRepositoryIndexOutputWithContext(ctx context.Context) CodeRepositoryIndexOutput
}

func (*CodeRepositoryIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeRepositoryIndex)(nil)).Elem()
}

func (i *CodeRepositoryIndex) ToCodeRepositoryIndexOutput() CodeRepositoryIndexOutput {
	return i.ToCodeRepositoryIndexOutputWithContext(context.Background())
}

func (i *CodeRepositoryIndex) ToCodeRepositoryIndexOutputWithContext(ctx context.Context) CodeRepositoryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeRepositoryIndexOutput)
}

// CodeRepositoryIndexArrayInput is an input type that accepts CodeRepositoryIndexArray and CodeRepositoryIndexArrayOutput values.
// You can construct a concrete instance of `CodeRepositoryIndexArrayInput` via:
//
//	CodeRepositoryIndexArray{ CodeRepositoryIndexArgs{...} }
type CodeRepositoryIndexArrayInput interface {
	pulumi.Input

	ToCodeRepositoryIndexArrayOutput() CodeRepositoryIndexArrayOutput
	ToCodeRepositoryIndexArrayOutputWithContext(context.Context) CodeRepositoryIndexArrayOutput
}

type CodeRepositoryIndexArray []CodeRepositoryIndexInput

func (CodeRepositoryIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeRepositoryIndex)(nil)).Elem()
}

func (i CodeRepositoryIndexArray) ToCodeRepositoryIndexArrayOutput() CodeRepositoryIndexArrayOutput {
	return i.ToCodeRepositoryIndexArrayOutputWithContext(context.Background())
}

func (i CodeRepositoryIndexArray) ToCodeRepositoryIndexArrayOutputWithContext(ctx context.Context) CodeRepositoryIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeRepositoryIndexArrayOutput)
}

// CodeRepositoryIndexMapInput is an input type that accepts CodeRepositoryIndexMap and CodeRepositoryIndexMapOutput values.
// You can construct a concrete instance of `CodeRepositoryIndexMapInput` via:
//
//	CodeRepositoryIndexMap{ "key": CodeRepositoryIndexArgs{...} }
type CodeRepositoryIndexMapInput interface {
	pulumi.Input

	ToCodeRepositoryIndexMapOutput() CodeRepositoryIndexMapOutput
	ToCodeRepositoryIndexMapOutputWithContext(context.Context) CodeRepositoryIndexMapOutput
}

type CodeRepositoryIndexMap map[string]CodeRepositoryIndexInput

func (CodeRepositoryIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeRepositoryIndex)(nil)).Elem()
}

func (i CodeRepositoryIndexMap) ToCodeRepositoryIndexMapOutput() CodeRepositoryIndexMapOutput {
	return i.ToCodeRepositoryIndexMapOutputWithContext(context.Background())
}

func (i CodeRepositoryIndexMap) ToCodeRepositoryIndexMapOutputWithContext(ctx context.Context) CodeRepositoryIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeRepositoryIndexMapOutput)
}

type CodeRepositoryIndexOutput struct{ *pulumi.OutputState }

func (CodeRepositoryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeRepositoryIndex)(nil)).Elem()
}

func (o CodeRepositoryIndexOutput) ToCodeRepositoryIndexOutput() CodeRepositoryIndexOutput {
	return o
}

func (o CodeRepositoryIndexOutput) ToCodeRepositoryIndexOutputWithContext(ctx context.Context) CodeRepositoryIndexOutput {
	return o
}

// Required. Id of the Code Repository Index.
//
// ***
func (o CodeRepositoryIndexOutput) CodeRepositoryIndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringOutput { return v.CodeRepositoryIndexId }).(pulumi.StringOutput)
}

// Output only. Create time stamp.
func (o CodeRepositoryIndexOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o CodeRepositoryIndexOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
func (o CodeRepositoryIndexOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// Optional. Immutable. Customer-managed encryption key name, in the format
// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o CodeRepositoryIndexOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringPtrOutput { return v.KmsKey }).(pulumi.StringPtrOutput)
}

// Optional. Labels as key value pairs.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o CodeRepositoryIndexOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the Code Repository Index, for example `us-central1`.
func (o CodeRepositoryIndexOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. Identifier. Name of Code Repository Index.
func (o CodeRepositoryIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CodeRepositoryIndexOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o CodeRepositoryIndexOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Code Repository Index instance State.
// Possible values are: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`, `SUSPENDED`.
func (o CodeRepositoryIndexOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. Update time stamp.
func (o CodeRepositoryIndexOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeRepositoryIndex) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type CodeRepositoryIndexArrayOutput struct{ *pulumi.OutputState }

func (CodeRepositoryIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeRepositoryIndex)(nil)).Elem()
}

func (o CodeRepositoryIndexArrayOutput) ToCodeRepositoryIndexArrayOutput() CodeRepositoryIndexArrayOutput {
	return o
}

func (o CodeRepositoryIndexArrayOutput) ToCodeRepositoryIndexArrayOutputWithContext(ctx context.Context) CodeRepositoryIndexArrayOutput {
	return o
}

func (o CodeRepositoryIndexArrayOutput) Index(i pulumi.IntInput) CodeRepositoryIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CodeRepositoryIndex {
		return vs[0].([]*CodeRepositoryIndex)[vs[1].(int)]
	}).(CodeRepositoryIndexOutput)
}

type CodeRepositoryIndexMapOutput struct{ *pulumi.OutputState }

func (CodeRepositoryIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeRepositoryIndex)(nil)).Elem()
}

func (o CodeRepositoryIndexMapOutput) ToCodeRepositoryIndexMapOutput() CodeRepositoryIndexMapOutput {
	return o
}

func (o CodeRepositoryIndexMapOutput) ToCodeRepositoryIndexMapOutputWithContext(ctx context.Context) CodeRepositoryIndexMapOutput {
	return o
}

func (o CodeRepositoryIndexMapOutput) MapIndex(k pulumi.StringInput) CodeRepositoryIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CodeRepositoryIndex {
		return vs[0].(map[string]*CodeRepositoryIndex)[vs[1].(string)]
	}).(CodeRepositoryIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CodeRepositoryIndexInput)(nil)).Elem(), &CodeRepositoryIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeRepositoryIndexArrayInput)(nil)).Elem(), CodeRepositoryIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeRepositoryIndexMapInput)(nil)).Elem(), CodeRepositoryIndexMap{})
	pulumi.RegisterOutputType(CodeRepositoryIndexOutput{})
	pulumi.RegisterOutputType(CodeRepositoryIndexArrayOutput{})
	pulumi.RegisterOutputType(CodeRepositoryIndexMapOutput{})
}
