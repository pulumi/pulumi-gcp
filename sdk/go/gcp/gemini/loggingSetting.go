// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Gemini Logging Setting Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewLoggingSetting(ctx, "example", &gemini.LoggingSettingArgs{
//				LoggingSettingId: pulumi.String("ls1-tf"),
//				Location:         pulumi.String("global"),
//				Labels: pulumi.StringMap{
//					"my_key": pulumi.String("my_value"),
//				},
//				LogPromptsAndResponses: pulumi.Bool(true),
//				LogMetadata:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// LoggingSetting can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/loggingSettings/{{logging_setting_id}}`
//
// * `{{project}}/{{location}}/{{logging_setting_id}}`
//
// * `{{location}}/{{logging_setting_id}}`
//
// When using the `pulumi import` command, LoggingSetting can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:gemini/loggingSetting:LoggingSetting default projects/{{project}}/locations/{{location}}/loggingSettings/{{logging_setting_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/loggingSetting:LoggingSetting default {{project}}/{{location}}/{{logging_setting_id}}
// ```
//
// ```sh
// $ pulumi import gcp:gemini/loggingSetting:LoggingSetting default {{location}}/{{logging_setting_id}}
// ```
type LoggingSetting struct {
	pulumi.CustomResourceState

	// Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Whether to log metadata.
	LogMetadata pulumi.BoolPtrOutput `pulumi:"logMetadata"`
	// Whether to log prompts and responses.
	LogPromptsAndResponses pulumi.BoolPtrOutput `pulumi:"logPromptsAndResponses"`
	// Id of the Logging Setting.
	//
	// ***
	LoggingSettingId pulumi.StringOutput `pulumi:"loggingSettingId"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/loggingsettings/{loggingsetting}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewLoggingSetting registers a new resource with the given unique name, arguments, and options.
func NewLoggingSetting(ctx *pulumi.Context,
	name string, args *LoggingSettingArgs, opts ...pulumi.ResourceOption) (*LoggingSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.LoggingSettingId == nil {
		return nil, errors.New("invalid value for required argument 'LoggingSettingId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoggingSetting
	err := ctx.RegisterResource("gcp:gemini/loggingSetting:LoggingSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingSetting gets an existing LoggingSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingSettingState, opts ...pulumi.ResourceOption) (*LoggingSetting, error) {
	var resource LoggingSetting
	err := ctx.ReadResource("gcp:gemini/loggingSetting:LoggingSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingSetting resources.
type loggingSettingState struct {
	// Create time stamp.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Whether to log metadata.
	LogMetadata *bool `pulumi:"logMetadata"`
	// Whether to log prompts and responses.
	LogPromptsAndResponses *bool `pulumi:"logPromptsAndResponses"`
	// Id of the Logging Setting.
	//
	// ***
	LoggingSettingId *string `pulumi:"loggingSettingId"`
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/loggingsettings/{loggingsetting}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type LoggingSettingState struct {
	// Create time stamp.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Whether to log metadata.
	LogMetadata pulumi.BoolPtrInput
	// Whether to log prompts and responses.
	LogPromptsAndResponses pulumi.BoolPtrInput
	// Id of the Logging Setting.
	//
	// ***
	LoggingSettingId pulumi.StringPtrInput
	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/loggingsettings/{loggingsetting}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (LoggingSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingSettingState)(nil)).Elem()
}

type loggingSettingArgs struct {
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// Whether to log metadata.
	LogMetadata *bool `pulumi:"logMetadata"`
	// Whether to log prompts and responses.
	LogPromptsAndResponses *bool `pulumi:"logPromptsAndResponses"`
	// Id of the Logging Setting.
	//
	// ***
	LoggingSettingId string `pulumi:"loggingSettingId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a LoggingSetting resource.
type LoggingSettingArgs struct {
	// Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// Whether to log metadata.
	LogMetadata pulumi.BoolPtrInput
	// Whether to log prompts and responses.
	LogPromptsAndResponses pulumi.BoolPtrInput
	// Id of the Logging Setting.
	//
	// ***
	LoggingSettingId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (LoggingSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingSettingArgs)(nil)).Elem()
}

type LoggingSettingInput interface {
	pulumi.Input

	ToLoggingSettingOutput() LoggingSettingOutput
	ToLoggingSettingOutputWithContext(ctx context.Context) LoggingSettingOutput
}

func (*LoggingSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingSetting)(nil)).Elem()
}

func (i *LoggingSetting) ToLoggingSettingOutput() LoggingSettingOutput {
	return i.ToLoggingSettingOutputWithContext(context.Background())
}

func (i *LoggingSetting) ToLoggingSettingOutputWithContext(ctx context.Context) LoggingSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingSettingOutput)
}

// LoggingSettingArrayInput is an input type that accepts LoggingSettingArray and LoggingSettingArrayOutput values.
// You can construct a concrete instance of `LoggingSettingArrayInput` via:
//
//	LoggingSettingArray{ LoggingSettingArgs{...} }
type LoggingSettingArrayInput interface {
	pulumi.Input

	ToLoggingSettingArrayOutput() LoggingSettingArrayOutput
	ToLoggingSettingArrayOutputWithContext(context.Context) LoggingSettingArrayOutput
}

type LoggingSettingArray []LoggingSettingInput

func (LoggingSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingSetting)(nil)).Elem()
}

func (i LoggingSettingArray) ToLoggingSettingArrayOutput() LoggingSettingArrayOutput {
	return i.ToLoggingSettingArrayOutputWithContext(context.Background())
}

func (i LoggingSettingArray) ToLoggingSettingArrayOutputWithContext(ctx context.Context) LoggingSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingSettingArrayOutput)
}

// LoggingSettingMapInput is an input type that accepts LoggingSettingMap and LoggingSettingMapOutput values.
// You can construct a concrete instance of `LoggingSettingMapInput` via:
//
//	LoggingSettingMap{ "key": LoggingSettingArgs{...} }
type LoggingSettingMapInput interface {
	pulumi.Input

	ToLoggingSettingMapOutput() LoggingSettingMapOutput
	ToLoggingSettingMapOutputWithContext(context.Context) LoggingSettingMapOutput
}

type LoggingSettingMap map[string]LoggingSettingInput

func (LoggingSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingSetting)(nil)).Elem()
}

func (i LoggingSettingMap) ToLoggingSettingMapOutput() LoggingSettingMapOutput {
	return i.ToLoggingSettingMapOutputWithContext(context.Background())
}

func (i LoggingSettingMap) ToLoggingSettingMapOutputWithContext(ctx context.Context) LoggingSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingSettingMapOutput)
}

type LoggingSettingOutput struct{ *pulumi.OutputState }

func (LoggingSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingSetting)(nil)).Elem()
}

func (o LoggingSettingOutput) ToLoggingSettingOutput() LoggingSettingOutput {
	return o
}

func (o LoggingSettingOutput) ToLoggingSettingOutputWithContext(ctx context.Context) LoggingSettingOutput {
	return o
}

// Create time stamp.
func (o LoggingSettingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o LoggingSettingOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Labels as key value pairs.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o LoggingSettingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o LoggingSettingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Whether to log metadata.
func (o LoggingSettingOutput) LogMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.BoolPtrOutput { return v.LogMetadata }).(pulumi.BoolPtrOutput)
}

// Whether to log prompts and responses.
func (o LoggingSettingOutput) LogPromptsAndResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.BoolPtrOutput { return v.LogPromptsAndResponses }).(pulumi.BoolPtrOutput)
}

// Id of the Logging Setting.
//
// ***
func (o LoggingSettingOutput) LoggingSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringOutput { return v.LoggingSettingId }).(pulumi.StringOutput)
}

// Identifier. Name of the resource.
// Format:projects/{project}/locations/{location}/loggingsettings/{loggingsetting}
func (o LoggingSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o LoggingSettingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o LoggingSettingOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Update time stamp.
func (o LoggingSettingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingSetting) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type LoggingSettingArrayOutput struct{ *pulumi.OutputState }

func (LoggingSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingSetting)(nil)).Elem()
}

func (o LoggingSettingArrayOutput) ToLoggingSettingArrayOutput() LoggingSettingArrayOutput {
	return o
}

func (o LoggingSettingArrayOutput) ToLoggingSettingArrayOutputWithContext(ctx context.Context) LoggingSettingArrayOutput {
	return o
}

func (o LoggingSettingArrayOutput) Index(i pulumi.IntInput) LoggingSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoggingSetting {
		return vs[0].([]*LoggingSetting)[vs[1].(int)]
	}).(LoggingSettingOutput)
}

type LoggingSettingMapOutput struct{ *pulumi.OutputState }

func (LoggingSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingSetting)(nil)).Elem()
}

func (o LoggingSettingMapOutput) ToLoggingSettingMapOutput() LoggingSettingMapOutput {
	return o
}

func (o LoggingSettingMapOutput) ToLoggingSettingMapOutputWithContext(ctx context.Context) LoggingSettingMapOutput {
	return o
}

func (o LoggingSettingMapOutput) MapIndex(k pulumi.StringInput) LoggingSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoggingSetting {
		return vs[0].(map[string]*LoggingSetting)[vs[1].(string)]
	}).(LoggingSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingSettingInput)(nil)).Elem(), &LoggingSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingSettingArrayInput)(nil)).Elem(), LoggingSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingSettingMapInput)(nil)).Elem(), LoggingSettingMap{})
	pulumi.RegisterOutputType(LoggingSettingOutput{})
	pulumi.RegisterOutputType(LoggingSettingArrayOutput{})
	pulumi.RegisterOutputType(LoggingSettingMapOutput{})
}
