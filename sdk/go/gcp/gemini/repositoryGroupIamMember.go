// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Gemini for Google Cloud RepositoryGroup. Each of these resources serves a different use case:
//
// * `gemini.RepositoryGroupIamPolicy`: Authoritative. Sets the IAM policy for the repositorygroup and replaces any existing policy already attached.
// * `gemini.RepositoryGroupIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repositorygroup are preserved.
// * `gemini.RepositoryGroupIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repositorygroup are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `gemini.RepositoryGroupIamPolicy`: Retrieves the IAM policy for the repositorygroup
//
// > **Note:** `gemini.RepositoryGroupIamPolicy` **cannot** be used in conjunction with `gemini.RepositoryGroupIamBinding` and `gemini.RepositoryGroupIamMember` or they will fight over what your policy should be.
//
// > **Note:** `gemini.RepositoryGroupIamBinding` resources **can be** used in conjunction with `gemini.RepositoryGroupIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## gemini.RepositoryGroupIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/gemini"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/cloudaicompanion.repositoryGroupsUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gemini.NewRepositoryGroupIamPolicy(ctx, "policy", &gemini.RepositoryGroupIamPolicyArgs{
//				Project:             pulumi.Any(example.Project),
//				Location:            pulumi.Any(example.Location),
//				CodeRepositoryIndex: pulumi.Any(example.CodeRepositoryIndex),
//				RepositoryGroupId:   pulumi.Any(example.RepositoryGroupId),
//				PolicyData:          pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## gemini.RepositoryGroupIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewRepositoryGroupIamBinding(ctx, "binding", &gemini.RepositoryGroupIamBindingArgs{
//				Project:             pulumi.Any(example.Project),
//				Location:            pulumi.Any(example.Location),
//				CodeRepositoryIndex: pulumi.Any(example.CodeRepositoryIndex),
//				RepositoryGroupId:   pulumi.Any(example.RepositoryGroupId),
//				Role:                pulumi.String("roles/cloudaicompanion.repositoryGroupsUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## gemini.RepositoryGroupIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewRepositoryGroupIamMember(ctx, "member", &gemini.RepositoryGroupIamMemberArgs{
//				Project:             pulumi.Any(example.Project),
//				Location:            pulumi.Any(example.Location),
//				CodeRepositoryIndex: pulumi.Any(example.CodeRepositoryIndex),
//				RepositoryGroupId:   pulumi.Any(example.RepositoryGroupId),
//				Role:                pulumi.String("roles/cloudaicompanion.repositoryGroupsUser"),
//				Member:              pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Gemini for Google Cloud RepositoryGroup
//
// Three different resources help you manage your IAM policy for Gemini for Google Cloud RepositoryGroup. Each of these resources serves a different use case:
//
// * `gemini.RepositoryGroupIamPolicy`: Authoritative. Sets the IAM policy for the repositorygroup and replaces any existing policy already attached.
// * `gemini.RepositoryGroupIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repositorygroup are preserved.
// * `gemini.RepositoryGroupIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repositorygroup are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `gemini.RepositoryGroupIamPolicy`: Retrieves the IAM policy for the repositorygroup
//
// > **Note:** `gemini.RepositoryGroupIamPolicy` **cannot** be used in conjunction with `gemini.RepositoryGroupIamBinding` and `gemini.RepositoryGroupIamMember` or they will fight over what your policy should be.
//
// > **Note:** `gemini.RepositoryGroupIamBinding` resources **can be** used in conjunction with `gemini.RepositoryGroupIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## gemini.RepositoryGroupIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/gemini"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/cloudaicompanion.repositoryGroupsUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gemini.NewRepositoryGroupIamPolicy(ctx, "policy", &gemini.RepositoryGroupIamPolicyArgs{
//				Project:             pulumi.Any(example.Project),
//				Location:            pulumi.Any(example.Location),
//				CodeRepositoryIndex: pulumi.Any(example.CodeRepositoryIndex),
//				RepositoryGroupId:   pulumi.Any(example.RepositoryGroupId),
//				PolicyData:          pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## gemini.RepositoryGroupIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewRepositoryGroupIamBinding(ctx, "binding", &gemini.RepositoryGroupIamBindingArgs{
//				Project:             pulumi.Any(example.Project),
//				Location:            pulumi.Any(example.Location),
//				CodeRepositoryIndex: pulumi.Any(example.CodeRepositoryIndex),
//				RepositoryGroupId:   pulumi.Any(example.RepositoryGroupId),
//				Role:                pulumi.String("roles/cloudaicompanion.repositoryGroupsUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## gemini.RepositoryGroupIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/gemini"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gemini.NewRepositoryGroupIamMember(ctx, "member", &gemini.RepositoryGroupIamMemberArgs{
//				Project:             pulumi.Any(example.Project),
//				Location:            pulumi.Any(example.Location),
//				CodeRepositoryIndex: pulumi.Any(example.CodeRepositoryIndex),
//				RepositoryGroupId:   pulumi.Any(example.RepositoryGroupId),
//				Role:                pulumi.String("roles/cloudaicompanion.repositoryGroupsUser"),
//				Member:              pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}
//
// * {{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}
//
// * {{location}}/{{code_repository_index}}/{{repository_group_id}}
//
// * {{repository_group_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Gemini for Google Cloud repositorygroup IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:gemini/repositoryGroupIamMember:RepositoryGroupIamMember editor "projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}} roles/cloudaicompanion.repositoryGroupsUser user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:gemini/repositoryGroupIamMember:RepositoryGroupIamMember editor "projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}} roles/cloudaicompanion.repositoryGroupsUser"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:gemini/repositoryGroupIamMember:RepositoryGroupIamMember editor projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RepositoryGroupIamMember struct {
	pulumi.CustomResourceState

	// Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
	CodeRepositoryIndex pulumi.StringOutput                        `pulumi:"codeRepositoryIndex"`
	Condition           RepositoryGroupIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	RepositoryGroupId pulumi.StringOutput `pulumi:"repositoryGroupId"`
	// The role that should be applied. Only one
	// `gemini.RepositoryGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewRepositoryGroupIamMember registers a new resource with the given unique name, arguments, and options.
func NewRepositoryGroupIamMember(ctx *pulumi.Context,
	name string, args *RepositoryGroupIamMemberArgs, opts ...pulumi.ResourceOption) (*RepositoryGroupIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeRepositoryIndex == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepositoryIndex'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.RepositoryGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryGroupId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryGroupIamMember
	err := ctx.RegisterResource("gcp:gemini/repositoryGroupIamMember:RepositoryGroupIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryGroupIamMember gets an existing RepositoryGroupIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryGroupIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryGroupIamMemberState, opts ...pulumi.ResourceOption) (*RepositoryGroupIamMember, error) {
	var resource RepositoryGroupIamMember
	err := ctx.ReadResource("gcp:gemini/repositoryGroupIamMember:RepositoryGroupIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryGroupIamMember resources.
type repositoryGroupIamMemberState struct {
	// Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
	CodeRepositoryIndex *string                            `pulumi:"codeRepositoryIndex"`
	Condition           *RepositoryGroupIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	RepositoryGroupId *string `pulumi:"repositoryGroupId"`
	// The role that should be applied. Only one
	// `gemini.RepositoryGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type RepositoryGroupIamMemberState struct {
	// Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
	CodeRepositoryIndex pulumi.StringPtrInput
	Condition           RepositoryGroupIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	RepositoryGroupId pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `gemini.RepositoryGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (RepositoryGroupIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryGroupIamMemberState)(nil)).Elem()
}

type repositoryGroupIamMemberArgs struct {
	// Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
	CodeRepositoryIndex string                             `pulumi:"codeRepositoryIndex"`
	Condition           *RepositoryGroupIamMemberCondition `pulumi:"condition"`
	// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	RepositoryGroupId string `pulumi:"repositoryGroupId"`
	// The role that should be applied. Only one
	// `gemini.RepositoryGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a RepositoryGroupIamMember resource.
type RepositoryGroupIamMemberArgs struct {
	// Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
	CodeRepositoryIndex pulumi.StringInput
	Condition           RepositoryGroupIamMemberConditionPtrInput
	// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	RepositoryGroupId pulumi.StringInput
	// The role that should be applied. Only one
	// `gemini.RepositoryGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (RepositoryGroupIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryGroupIamMemberArgs)(nil)).Elem()
}

type RepositoryGroupIamMemberInput interface {
	pulumi.Input

	ToRepositoryGroupIamMemberOutput() RepositoryGroupIamMemberOutput
	ToRepositoryGroupIamMemberOutputWithContext(ctx context.Context) RepositoryGroupIamMemberOutput
}

func (*RepositoryGroupIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGroupIamMember)(nil)).Elem()
}

func (i *RepositoryGroupIamMember) ToRepositoryGroupIamMemberOutput() RepositoryGroupIamMemberOutput {
	return i.ToRepositoryGroupIamMemberOutputWithContext(context.Background())
}

func (i *RepositoryGroupIamMember) ToRepositoryGroupIamMemberOutputWithContext(ctx context.Context) RepositoryGroupIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamMemberOutput)
}

// RepositoryGroupIamMemberArrayInput is an input type that accepts RepositoryGroupIamMemberArray and RepositoryGroupIamMemberArrayOutput values.
// You can construct a concrete instance of `RepositoryGroupIamMemberArrayInput` via:
//
//	RepositoryGroupIamMemberArray{ RepositoryGroupIamMemberArgs{...} }
type RepositoryGroupIamMemberArrayInput interface {
	pulumi.Input

	ToRepositoryGroupIamMemberArrayOutput() RepositoryGroupIamMemberArrayOutput
	ToRepositoryGroupIamMemberArrayOutputWithContext(context.Context) RepositoryGroupIamMemberArrayOutput
}

type RepositoryGroupIamMemberArray []RepositoryGroupIamMemberInput

func (RepositoryGroupIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryGroupIamMember)(nil)).Elem()
}

func (i RepositoryGroupIamMemberArray) ToRepositoryGroupIamMemberArrayOutput() RepositoryGroupIamMemberArrayOutput {
	return i.ToRepositoryGroupIamMemberArrayOutputWithContext(context.Background())
}

func (i RepositoryGroupIamMemberArray) ToRepositoryGroupIamMemberArrayOutputWithContext(ctx context.Context) RepositoryGroupIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamMemberArrayOutput)
}

// RepositoryGroupIamMemberMapInput is an input type that accepts RepositoryGroupIamMemberMap and RepositoryGroupIamMemberMapOutput values.
// You can construct a concrete instance of `RepositoryGroupIamMemberMapInput` via:
//
//	RepositoryGroupIamMemberMap{ "key": RepositoryGroupIamMemberArgs{...} }
type RepositoryGroupIamMemberMapInput interface {
	pulumi.Input

	ToRepositoryGroupIamMemberMapOutput() RepositoryGroupIamMemberMapOutput
	ToRepositoryGroupIamMemberMapOutputWithContext(context.Context) RepositoryGroupIamMemberMapOutput
}

type RepositoryGroupIamMemberMap map[string]RepositoryGroupIamMemberInput

func (RepositoryGroupIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryGroupIamMember)(nil)).Elem()
}

func (i RepositoryGroupIamMemberMap) ToRepositoryGroupIamMemberMapOutput() RepositoryGroupIamMemberMapOutput {
	return i.ToRepositoryGroupIamMemberMapOutputWithContext(context.Background())
}

func (i RepositoryGroupIamMemberMap) ToRepositoryGroupIamMemberMapOutputWithContext(ctx context.Context) RepositoryGroupIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamMemberMapOutput)
}

type RepositoryGroupIamMemberOutput struct{ *pulumi.OutputState }

func (RepositoryGroupIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGroupIamMember)(nil)).Elem()
}

func (o RepositoryGroupIamMemberOutput) ToRepositoryGroupIamMemberOutput() RepositoryGroupIamMemberOutput {
	return o
}

func (o RepositoryGroupIamMemberOutput) ToRepositoryGroupIamMemberOutputWithContext(ctx context.Context) RepositoryGroupIamMemberOutput {
	return o
}

// Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
func (o RepositoryGroupIamMemberOutput) CodeRepositoryIndex() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMember) pulumi.StringOutput { return v.CodeRepositoryIndex }).(pulumi.StringOutput)
}

func (o RepositoryGroupIamMemberOutput) Condition() RepositoryGroupIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMember) RepositoryGroupIamMemberConditionPtrOutput { return v.Condition }).(RepositoryGroupIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o RepositoryGroupIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o RepositoryGroupIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o RepositoryGroupIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RepositoryGroupIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o RepositoryGroupIamMemberOutput) RepositoryGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMember) pulumi.StringOutput { return v.RepositoryGroupId }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `gemini.RepositoryGroupIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o RepositoryGroupIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RepositoryGroupIamMemberArrayOutput struct{ *pulumi.OutputState }

func (RepositoryGroupIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryGroupIamMember)(nil)).Elem()
}

func (o RepositoryGroupIamMemberArrayOutput) ToRepositoryGroupIamMemberArrayOutput() RepositoryGroupIamMemberArrayOutput {
	return o
}

func (o RepositoryGroupIamMemberArrayOutput) ToRepositoryGroupIamMemberArrayOutputWithContext(ctx context.Context) RepositoryGroupIamMemberArrayOutput {
	return o
}

func (o RepositoryGroupIamMemberArrayOutput) Index(i pulumi.IntInput) RepositoryGroupIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryGroupIamMember {
		return vs[0].([]*RepositoryGroupIamMember)[vs[1].(int)]
	}).(RepositoryGroupIamMemberOutput)
}

type RepositoryGroupIamMemberMapOutput struct{ *pulumi.OutputState }

func (RepositoryGroupIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryGroupIamMember)(nil)).Elem()
}

func (o RepositoryGroupIamMemberMapOutput) ToRepositoryGroupIamMemberMapOutput() RepositoryGroupIamMemberMapOutput {
	return o
}

func (o RepositoryGroupIamMemberMapOutput) ToRepositoryGroupIamMemberMapOutputWithContext(ctx context.Context) RepositoryGroupIamMemberMapOutput {
	return o
}

func (o RepositoryGroupIamMemberMapOutput) MapIndex(k pulumi.StringInput) RepositoryGroupIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryGroupIamMember {
		return vs[0].(map[string]*RepositoryGroupIamMember)[vs[1].(string)]
	}).(RepositoryGroupIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupIamMemberInput)(nil)).Elem(), &RepositoryGroupIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupIamMemberArrayInput)(nil)).Elem(), RepositoryGroupIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupIamMemberMapInput)(nil)).Elem(), RepositoryGroupIamMemberMap{})
	pulumi.RegisterOutputType(RepositoryGroupIamMemberOutput{})
	pulumi.RegisterOutputType(RepositoryGroupIamMemberArrayOutput{})
	pulumi.RegisterOutputType(RepositoryGroupIamMemberMapOutput{})
}
