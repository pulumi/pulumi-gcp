// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRepositoryGroupIamPolicy(ctx *pulumi.Context, args *LookupRepositoryGroupIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryGroupIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryGroupIamPolicyResult
	err := ctx.Invoke("gcp:gemini/getRepositoryGroupIamPolicy:getRepositoryGroupIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryGroupIamPolicy.
type LookupRepositoryGroupIamPolicyArgs struct {
	CodeRepositoryIndex string `pulumi:"codeRepositoryIndex"`
	// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project           *string `pulumi:"project"`
	RepositoryGroupId string  `pulumi:"repositoryGroupId"`
}

// A collection of values returned by getRepositoryGroupIamPolicy.
type LookupRepositoryGroupIamPolicyResult struct {
	CodeRepositoryIndex string `pulumi:"codeRepositoryIndex"`
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// (Required only by `gemini.RepositoryGroupIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData        string `pulumi:"policyData"`
	Project           string `pulumi:"project"`
	RepositoryGroupId string `pulumi:"repositoryGroupId"`
}

func LookupRepositoryGroupIamPolicyOutput(ctx *pulumi.Context, args LookupRepositoryGroupIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryGroupIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryGroupIamPolicyResultOutput, error) {
			args := v.(LookupRepositoryGroupIamPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupRepositoryGroupIamPolicyResult
			secret, err := ctx.InvokePackageRaw("gcp:gemini/getRepositoryGroupIamPolicy:getRepositoryGroupIamPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupRepositoryGroupIamPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupRepositoryGroupIamPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupRepositoryGroupIamPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupRepositoryGroupIamPolicyResultOutput)
}

// A collection of arguments for invoking getRepositoryGroupIamPolicy.
type LookupRepositoryGroupIamPolicyOutputArgs struct {
	CodeRepositoryIndex pulumi.StringInput `pulumi:"codeRepositoryIndex"`
	// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project           pulumi.StringPtrInput `pulumi:"project"`
	RepositoryGroupId pulumi.StringInput    `pulumi:"repositoryGroupId"`
}

func (LookupRepositoryGroupIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryGroupIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryGroupIamPolicy.
type LookupRepositoryGroupIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryGroupIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryGroupIamPolicyResult)(nil)).Elem()
}

func (o LookupRepositoryGroupIamPolicyResultOutput) ToLookupRepositoryGroupIamPolicyResultOutput() LookupRepositoryGroupIamPolicyResultOutput {
	return o
}

func (o LookupRepositoryGroupIamPolicyResultOutput) ToLookupRepositoryGroupIamPolicyResultOutputWithContext(ctx context.Context) LookupRepositoryGroupIamPolicyResultOutput {
	return o
}

func (o LookupRepositoryGroupIamPolicyResultOutput) CodeRepositoryIndex() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryGroupIamPolicyResult) string { return v.CodeRepositoryIndex }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o LookupRepositoryGroupIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryGroupIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepositoryGroupIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryGroupIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRepositoryGroupIamPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryGroupIamPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// (Required only by `gemini.RepositoryGroupIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupRepositoryGroupIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryGroupIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupRepositoryGroupIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryGroupIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupRepositoryGroupIamPolicyResultOutput) RepositoryGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryGroupIamPolicyResult) string { return v.RepositoryGroupId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryGroupIamPolicyResultOutput{})
}
