// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex":
		r = &CodeRepositoryIndex{}
	case "gcp:gemini/codeToolsSetting:CodeToolsSetting":
		r = &CodeToolsSetting{}
	case "gcp:gemini/codeToolsSettingBinding:CodeToolsSettingBinding":
		r = &CodeToolsSettingBinding{}
	case "gcp:gemini/dataSharingWithGoogleSetting:DataSharingWithGoogleSetting":
		r = &DataSharingWithGoogleSetting{}
	case "gcp:gemini/dataSharingWithGoogleSettingBinding:DataSharingWithGoogleSettingBinding":
		r = &DataSharingWithGoogleSettingBinding{}
	case "gcp:gemini/geminiGcpEnablementSetting:GeminiGcpEnablementSetting":
		r = &GeminiGcpEnablementSetting{}
	case "gcp:gemini/geminiGcpEnablementSettingBinding:GeminiGcpEnablementSettingBinding":
		r = &GeminiGcpEnablementSettingBinding{}
	case "gcp:gemini/loggingSetting:LoggingSetting":
		r = &LoggingSetting{}
	case "gcp:gemini/loggingSettingBinding:LoggingSettingBinding":
		r = &LoggingSettingBinding{}
	case "gcp:gemini/releaseChannelSetting:ReleaseChannelSetting":
		r = &ReleaseChannelSetting{}
	case "gcp:gemini/releaseChannelSettingBinding:ReleaseChannelSettingBinding":
		r = &ReleaseChannelSettingBinding{}
	case "gcp:gemini/repositoryGroup:RepositoryGroup":
		r = &RepositoryGroup{}
	case "gcp:gemini/repositoryGroupIamBinding:RepositoryGroupIamBinding":
		r = &RepositoryGroupIamBinding{}
	case "gcp:gemini/repositoryGroupIamMember:RepositoryGroupIamMember":
		r = &RepositoryGroupIamMember{}
	case "gcp:gemini/repositoryGroupIamPolicy:RepositoryGroupIamPolicy":
		r = &RepositoryGroupIamPolicy{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/codeRepositoryIndex",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/codeToolsSetting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/codeToolsSettingBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/dataSharingWithGoogleSetting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/dataSharingWithGoogleSettingBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/geminiGcpEnablementSetting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/geminiGcpEnablementSettingBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/loggingSetting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/loggingSettingBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/releaseChannelSetting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/releaseChannelSettingBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/repositoryGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/repositoryGroupIamBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/repositoryGroupIamMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"gemini/repositoryGroupIamPolicy",
		&module{version},
	)
}
