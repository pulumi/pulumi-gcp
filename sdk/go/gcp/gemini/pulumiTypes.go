// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gemini

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RepositoryGroupIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// RepositoryGroupIamBindingConditionInput is an input type that accepts RepositoryGroupIamBindingConditionArgs and RepositoryGroupIamBindingConditionOutput values.
// You can construct a concrete instance of `RepositoryGroupIamBindingConditionInput` via:
//
//	RepositoryGroupIamBindingConditionArgs{...}
type RepositoryGroupIamBindingConditionInput interface {
	pulumi.Input

	ToRepositoryGroupIamBindingConditionOutput() RepositoryGroupIamBindingConditionOutput
	ToRepositoryGroupIamBindingConditionOutputWithContext(context.Context) RepositoryGroupIamBindingConditionOutput
}

type RepositoryGroupIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (RepositoryGroupIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryGroupIamBindingCondition)(nil)).Elem()
}

func (i RepositoryGroupIamBindingConditionArgs) ToRepositoryGroupIamBindingConditionOutput() RepositoryGroupIamBindingConditionOutput {
	return i.ToRepositoryGroupIamBindingConditionOutputWithContext(context.Background())
}

func (i RepositoryGroupIamBindingConditionArgs) ToRepositoryGroupIamBindingConditionOutputWithContext(ctx context.Context) RepositoryGroupIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamBindingConditionOutput)
}

func (i RepositoryGroupIamBindingConditionArgs) ToRepositoryGroupIamBindingConditionPtrOutput() RepositoryGroupIamBindingConditionPtrOutput {
	return i.ToRepositoryGroupIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryGroupIamBindingConditionArgs) ToRepositoryGroupIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryGroupIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamBindingConditionOutput).ToRepositoryGroupIamBindingConditionPtrOutputWithContext(ctx)
}

// RepositoryGroupIamBindingConditionPtrInput is an input type that accepts RepositoryGroupIamBindingConditionArgs, RepositoryGroupIamBindingConditionPtr and RepositoryGroupIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryGroupIamBindingConditionPtrInput` via:
//
//	        RepositoryGroupIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryGroupIamBindingConditionPtrInput interface {
	pulumi.Input

	ToRepositoryGroupIamBindingConditionPtrOutput() RepositoryGroupIamBindingConditionPtrOutput
	ToRepositoryGroupIamBindingConditionPtrOutputWithContext(context.Context) RepositoryGroupIamBindingConditionPtrOutput
}

type repositoryGroupIamBindingConditionPtrType RepositoryGroupIamBindingConditionArgs

func RepositoryGroupIamBindingConditionPtr(v *RepositoryGroupIamBindingConditionArgs) RepositoryGroupIamBindingConditionPtrInput {
	return (*repositoryGroupIamBindingConditionPtrType)(v)
}

func (*repositoryGroupIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGroupIamBindingCondition)(nil)).Elem()
}

func (i *repositoryGroupIamBindingConditionPtrType) ToRepositoryGroupIamBindingConditionPtrOutput() RepositoryGroupIamBindingConditionPtrOutput {
	return i.ToRepositoryGroupIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryGroupIamBindingConditionPtrType) ToRepositoryGroupIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryGroupIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamBindingConditionPtrOutput)
}

type RepositoryGroupIamBindingConditionOutput struct{ *pulumi.OutputState }

func (RepositoryGroupIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryGroupIamBindingCondition)(nil)).Elem()
}

func (o RepositoryGroupIamBindingConditionOutput) ToRepositoryGroupIamBindingConditionOutput() RepositoryGroupIamBindingConditionOutput {
	return o
}

func (o RepositoryGroupIamBindingConditionOutput) ToRepositoryGroupIamBindingConditionOutputWithContext(ctx context.Context) RepositoryGroupIamBindingConditionOutput {
	return o
}

func (o RepositoryGroupIamBindingConditionOutput) ToRepositoryGroupIamBindingConditionPtrOutput() RepositoryGroupIamBindingConditionPtrOutput {
	return o.ToRepositoryGroupIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryGroupIamBindingConditionOutput) ToRepositoryGroupIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryGroupIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryGroupIamBindingCondition) *RepositoryGroupIamBindingCondition {
		return &v
	}).(RepositoryGroupIamBindingConditionPtrOutput)
}

func (o RepositoryGroupIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryGroupIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryGroupIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGroupIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o RepositoryGroupIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGroupIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type RepositoryGroupIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryGroupIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGroupIamBindingCondition)(nil)).Elem()
}

func (o RepositoryGroupIamBindingConditionPtrOutput) ToRepositoryGroupIamBindingConditionPtrOutput() RepositoryGroupIamBindingConditionPtrOutput {
	return o
}

func (o RepositoryGroupIamBindingConditionPtrOutput) ToRepositoryGroupIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryGroupIamBindingConditionPtrOutput {
	return o
}

func (o RepositoryGroupIamBindingConditionPtrOutput) Elem() RepositoryGroupIamBindingConditionOutput {
	return o.ApplyT(func(v *RepositoryGroupIamBindingCondition) RepositoryGroupIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryGroupIamBindingCondition
		return ret
	}).(RepositoryGroupIamBindingConditionOutput)
}

func (o RepositoryGroupIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGroupIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryGroupIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGroupIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryGroupIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGroupIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RepositoryGroupIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// RepositoryGroupIamMemberConditionInput is an input type that accepts RepositoryGroupIamMemberConditionArgs and RepositoryGroupIamMemberConditionOutput values.
// You can construct a concrete instance of `RepositoryGroupIamMemberConditionInput` via:
//
//	RepositoryGroupIamMemberConditionArgs{...}
type RepositoryGroupIamMemberConditionInput interface {
	pulumi.Input

	ToRepositoryGroupIamMemberConditionOutput() RepositoryGroupIamMemberConditionOutput
	ToRepositoryGroupIamMemberConditionOutputWithContext(context.Context) RepositoryGroupIamMemberConditionOutput
}

type RepositoryGroupIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (RepositoryGroupIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryGroupIamMemberCondition)(nil)).Elem()
}

func (i RepositoryGroupIamMemberConditionArgs) ToRepositoryGroupIamMemberConditionOutput() RepositoryGroupIamMemberConditionOutput {
	return i.ToRepositoryGroupIamMemberConditionOutputWithContext(context.Background())
}

func (i RepositoryGroupIamMemberConditionArgs) ToRepositoryGroupIamMemberConditionOutputWithContext(ctx context.Context) RepositoryGroupIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamMemberConditionOutput)
}

func (i RepositoryGroupIamMemberConditionArgs) ToRepositoryGroupIamMemberConditionPtrOutput() RepositoryGroupIamMemberConditionPtrOutput {
	return i.ToRepositoryGroupIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryGroupIamMemberConditionArgs) ToRepositoryGroupIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryGroupIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamMemberConditionOutput).ToRepositoryGroupIamMemberConditionPtrOutputWithContext(ctx)
}

// RepositoryGroupIamMemberConditionPtrInput is an input type that accepts RepositoryGroupIamMemberConditionArgs, RepositoryGroupIamMemberConditionPtr and RepositoryGroupIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryGroupIamMemberConditionPtrInput` via:
//
//	        RepositoryGroupIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryGroupIamMemberConditionPtrInput interface {
	pulumi.Input

	ToRepositoryGroupIamMemberConditionPtrOutput() RepositoryGroupIamMemberConditionPtrOutput
	ToRepositoryGroupIamMemberConditionPtrOutputWithContext(context.Context) RepositoryGroupIamMemberConditionPtrOutput
}

type repositoryGroupIamMemberConditionPtrType RepositoryGroupIamMemberConditionArgs

func RepositoryGroupIamMemberConditionPtr(v *RepositoryGroupIamMemberConditionArgs) RepositoryGroupIamMemberConditionPtrInput {
	return (*repositoryGroupIamMemberConditionPtrType)(v)
}

func (*repositoryGroupIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGroupIamMemberCondition)(nil)).Elem()
}

func (i *repositoryGroupIamMemberConditionPtrType) ToRepositoryGroupIamMemberConditionPtrOutput() RepositoryGroupIamMemberConditionPtrOutput {
	return i.ToRepositoryGroupIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryGroupIamMemberConditionPtrType) ToRepositoryGroupIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryGroupIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupIamMemberConditionPtrOutput)
}

type RepositoryGroupIamMemberConditionOutput struct{ *pulumi.OutputState }

func (RepositoryGroupIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryGroupIamMemberCondition)(nil)).Elem()
}

func (o RepositoryGroupIamMemberConditionOutput) ToRepositoryGroupIamMemberConditionOutput() RepositoryGroupIamMemberConditionOutput {
	return o
}

func (o RepositoryGroupIamMemberConditionOutput) ToRepositoryGroupIamMemberConditionOutputWithContext(ctx context.Context) RepositoryGroupIamMemberConditionOutput {
	return o
}

func (o RepositoryGroupIamMemberConditionOutput) ToRepositoryGroupIamMemberConditionPtrOutput() RepositoryGroupIamMemberConditionPtrOutput {
	return o.ToRepositoryGroupIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryGroupIamMemberConditionOutput) ToRepositoryGroupIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryGroupIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryGroupIamMemberCondition) *RepositoryGroupIamMemberCondition {
		return &v
	}).(RepositoryGroupIamMemberConditionPtrOutput)
}

func (o RepositoryGroupIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryGroupIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryGroupIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGroupIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o RepositoryGroupIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGroupIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type RepositoryGroupIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryGroupIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGroupIamMemberCondition)(nil)).Elem()
}

func (o RepositoryGroupIamMemberConditionPtrOutput) ToRepositoryGroupIamMemberConditionPtrOutput() RepositoryGroupIamMemberConditionPtrOutput {
	return o
}

func (o RepositoryGroupIamMemberConditionPtrOutput) ToRepositoryGroupIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryGroupIamMemberConditionPtrOutput {
	return o
}

func (o RepositoryGroupIamMemberConditionPtrOutput) Elem() RepositoryGroupIamMemberConditionOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMemberCondition) RepositoryGroupIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryGroupIamMemberCondition
		return ret
	}).(RepositoryGroupIamMemberConditionOutput)
}

func (o RepositoryGroupIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryGroupIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryGroupIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGroupIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RepositoryGroupRepository struct {
	// Required. The Git branch pattern used for indexing in RE2 syntax.
	// See https://github.com/google/re2/wiki/syntax for syntax.
	//
	// ***
	BranchPattern string `pulumi:"branchPattern"`
	// Required. The DeveloperConnect repository full resource name, relative resource name
	// or resource URL to be indexed.
	Resource string `pulumi:"resource"`
}

// RepositoryGroupRepositoryInput is an input type that accepts RepositoryGroupRepositoryArgs and RepositoryGroupRepositoryOutput values.
// You can construct a concrete instance of `RepositoryGroupRepositoryInput` via:
//
//	RepositoryGroupRepositoryArgs{...}
type RepositoryGroupRepositoryInput interface {
	pulumi.Input

	ToRepositoryGroupRepositoryOutput() RepositoryGroupRepositoryOutput
	ToRepositoryGroupRepositoryOutputWithContext(context.Context) RepositoryGroupRepositoryOutput
}

type RepositoryGroupRepositoryArgs struct {
	// Required. The Git branch pattern used for indexing in RE2 syntax.
	// See https://github.com/google/re2/wiki/syntax for syntax.
	//
	// ***
	BranchPattern pulumi.StringInput `pulumi:"branchPattern"`
	// Required. The DeveloperConnect repository full resource name, relative resource name
	// or resource URL to be indexed.
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RepositoryGroupRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryGroupRepository)(nil)).Elem()
}

func (i RepositoryGroupRepositoryArgs) ToRepositoryGroupRepositoryOutput() RepositoryGroupRepositoryOutput {
	return i.ToRepositoryGroupRepositoryOutputWithContext(context.Background())
}

func (i RepositoryGroupRepositoryArgs) ToRepositoryGroupRepositoryOutputWithContext(ctx context.Context) RepositoryGroupRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupRepositoryOutput)
}

// RepositoryGroupRepositoryArrayInput is an input type that accepts RepositoryGroupRepositoryArray and RepositoryGroupRepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoryGroupRepositoryArrayInput` via:
//
//	RepositoryGroupRepositoryArray{ RepositoryGroupRepositoryArgs{...} }
type RepositoryGroupRepositoryArrayInput interface {
	pulumi.Input

	ToRepositoryGroupRepositoryArrayOutput() RepositoryGroupRepositoryArrayOutput
	ToRepositoryGroupRepositoryArrayOutputWithContext(context.Context) RepositoryGroupRepositoryArrayOutput
}

type RepositoryGroupRepositoryArray []RepositoryGroupRepositoryInput

func (RepositoryGroupRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryGroupRepository)(nil)).Elem()
}

func (i RepositoryGroupRepositoryArray) ToRepositoryGroupRepositoryArrayOutput() RepositoryGroupRepositoryArrayOutput {
	return i.ToRepositoryGroupRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoryGroupRepositoryArray) ToRepositoryGroupRepositoryArrayOutputWithContext(ctx context.Context) RepositoryGroupRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGroupRepositoryArrayOutput)
}

type RepositoryGroupRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryGroupRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryGroupRepository)(nil)).Elem()
}

func (o RepositoryGroupRepositoryOutput) ToRepositoryGroupRepositoryOutput() RepositoryGroupRepositoryOutput {
	return o
}

func (o RepositoryGroupRepositoryOutput) ToRepositoryGroupRepositoryOutputWithContext(ctx context.Context) RepositoryGroupRepositoryOutput {
	return o
}

// Required. The Git branch pattern used for indexing in RE2 syntax.
// See https://github.com/google/re2/wiki/syntax for syntax.
//
// ***
func (o RepositoryGroupRepositoryOutput) BranchPattern() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGroupRepository) string { return v.BranchPattern }).(pulumi.StringOutput)
}

// Required. The DeveloperConnect repository full resource name, relative resource name
// or resource URL to be indexed.
func (o RepositoryGroupRepositoryOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGroupRepository) string { return v.Resource }).(pulumi.StringOutput)
}

type RepositoryGroupRepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryGroupRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryGroupRepository)(nil)).Elem()
}

func (o RepositoryGroupRepositoryArrayOutput) ToRepositoryGroupRepositoryArrayOutput() RepositoryGroupRepositoryArrayOutput {
	return o
}

func (o RepositoryGroupRepositoryArrayOutput) ToRepositoryGroupRepositoryArrayOutputWithContext(ctx context.Context) RepositoryGroupRepositoryArrayOutput {
	return o
}

func (o RepositoryGroupRepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryGroupRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryGroupRepository {
		return vs[0].([]RepositoryGroupRepository)[vs[1].(int)]
	}).(RepositoryGroupRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupIamBindingConditionInput)(nil)).Elem(), RepositoryGroupIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupIamBindingConditionPtrInput)(nil)).Elem(), RepositoryGroupIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupIamMemberConditionInput)(nil)).Elem(), RepositoryGroupIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupIamMemberConditionPtrInput)(nil)).Elem(), RepositoryGroupIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupRepositoryInput)(nil)).Elem(), RepositoryGroupRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGroupRepositoryArrayInput)(nil)).Elem(), RepositoryGroupRepositoryArray{})
	pulumi.RegisterOutputType(RepositoryGroupIamBindingConditionOutput{})
	pulumi.RegisterOutputType(RepositoryGroupIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryGroupIamMemberConditionOutput{})
	pulumi.RegisterOutputType(RepositoryGroupIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryGroupRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryGroupRepositoryArrayOutput{})
}
