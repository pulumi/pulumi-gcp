// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Config of GenAI caching features. This is a singleton resource.
//
// To get more information about CacheConfig, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/reference/rest/v1/projects/updateCacheConfig)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/reference/rest/Shared.Types/CacheConfig)
//
// ## Example Usage
//
// ### Vertex Ai Cache Config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiCacheConfig(ctx, "cache_config", &vertex.AiCacheConfigArgs{
//				Project:      pulumi.String("my-project-name"),
//				DisableCache: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CacheConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/cacheConfig`
//
// * `{{project}}`
//
// When using the `pulumi import` command, CacheConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vertex/aiCacheConfig:AiCacheConfig default projects/{{project}}/cacheConfig
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiCacheConfig:AiCacheConfig default {{project}}
// ```
type AiCacheConfig struct {
	pulumi.CustomResourceState

	// If set to true, disables GenAI caching. Otherwise caching is enabled.
	DisableCache pulumi.BoolOutput `pulumi:"disableCache"`
	// Identifier. name of the cache config. Format: - `projects/{project}/cacheConfig`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewAiCacheConfig registers a new resource with the given unique name, arguments, and options.
func NewAiCacheConfig(ctx *pulumi.Context,
	name string, args *AiCacheConfigArgs, opts ...pulumi.ResourceOption) (*AiCacheConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisableCache == nil {
		return nil, errors.New("invalid value for required argument 'DisableCache'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiCacheConfig
	err := ctx.RegisterResource("gcp:vertex/aiCacheConfig:AiCacheConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiCacheConfig gets an existing AiCacheConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiCacheConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiCacheConfigState, opts ...pulumi.ResourceOption) (*AiCacheConfig, error) {
	var resource AiCacheConfig
	err := ctx.ReadResource("gcp:vertex/aiCacheConfig:AiCacheConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiCacheConfig resources.
type aiCacheConfigState struct {
	// If set to true, disables GenAI caching. Otherwise caching is enabled.
	DisableCache *bool `pulumi:"disableCache"`
	// Identifier. name of the cache config. Format: - `projects/{project}/cacheConfig`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type AiCacheConfigState struct {
	// If set to true, disables GenAI caching. Otherwise caching is enabled.
	DisableCache pulumi.BoolPtrInput
	// Identifier. name of the cache config. Format: - `projects/{project}/cacheConfig`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AiCacheConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiCacheConfigState)(nil)).Elem()
}

type aiCacheConfigArgs struct {
	// If set to true, disables GenAI caching. Otherwise caching is enabled.
	DisableCache bool `pulumi:"disableCache"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a AiCacheConfig resource.
type AiCacheConfigArgs struct {
	// If set to true, disables GenAI caching. Otherwise caching is enabled.
	DisableCache pulumi.BoolInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AiCacheConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiCacheConfigArgs)(nil)).Elem()
}

type AiCacheConfigInput interface {
	pulumi.Input

	ToAiCacheConfigOutput() AiCacheConfigOutput
	ToAiCacheConfigOutputWithContext(ctx context.Context) AiCacheConfigOutput
}

func (*AiCacheConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AiCacheConfig)(nil)).Elem()
}

func (i *AiCacheConfig) ToAiCacheConfigOutput() AiCacheConfigOutput {
	return i.ToAiCacheConfigOutputWithContext(context.Background())
}

func (i *AiCacheConfig) ToAiCacheConfigOutputWithContext(ctx context.Context) AiCacheConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiCacheConfigOutput)
}

// AiCacheConfigArrayInput is an input type that accepts AiCacheConfigArray and AiCacheConfigArrayOutput values.
// You can construct a concrete instance of `AiCacheConfigArrayInput` via:
//
//	AiCacheConfigArray{ AiCacheConfigArgs{...} }
type AiCacheConfigArrayInput interface {
	pulumi.Input

	ToAiCacheConfigArrayOutput() AiCacheConfigArrayOutput
	ToAiCacheConfigArrayOutputWithContext(context.Context) AiCacheConfigArrayOutput
}

type AiCacheConfigArray []AiCacheConfigInput

func (AiCacheConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiCacheConfig)(nil)).Elem()
}

func (i AiCacheConfigArray) ToAiCacheConfigArrayOutput() AiCacheConfigArrayOutput {
	return i.ToAiCacheConfigArrayOutputWithContext(context.Background())
}

func (i AiCacheConfigArray) ToAiCacheConfigArrayOutputWithContext(ctx context.Context) AiCacheConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiCacheConfigArrayOutput)
}

// AiCacheConfigMapInput is an input type that accepts AiCacheConfigMap and AiCacheConfigMapOutput values.
// You can construct a concrete instance of `AiCacheConfigMapInput` via:
//
//	AiCacheConfigMap{ "key": AiCacheConfigArgs{...} }
type AiCacheConfigMapInput interface {
	pulumi.Input

	ToAiCacheConfigMapOutput() AiCacheConfigMapOutput
	ToAiCacheConfigMapOutputWithContext(context.Context) AiCacheConfigMapOutput
}

type AiCacheConfigMap map[string]AiCacheConfigInput

func (AiCacheConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiCacheConfig)(nil)).Elem()
}

func (i AiCacheConfigMap) ToAiCacheConfigMapOutput() AiCacheConfigMapOutput {
	return i.ToAiCacheConfigMapOutputWithContext(context.Background())
}

func (i AiCacheConfigMap) ToAiCacheConfigMapOutputWithContext(ctx context.Context) AiCacheConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiCacheConfigMapOutput)
}

type AiCacheConfigOutput struct{ *pulumi.OutputState }

func (AiCacheConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiCacheConfig)(nil)).Elem()
}

func (o AiCacheConfigOutput) ToAiCacheConfigOutput() AiCacheConfigOutput {
	return o
}

func (o AiCacheConfigOutput) ToAiCacheConfigOutputWithContext(ctx context.Context) AiCacheConfigOutput {
	return o
}

// If set to true, disables GenAI caching. Otherwise caching is enabled.
func (o AiCacheConfigOutput) DisableCache() pulumi.BoolOutput {
	return o.ApplyT(func(v *AiCacheConfig) pulumi.BoolOutput { return v.DisableCache }).(pulumi.BoolOutput)
}

// Identifier. name of the cache config. Format: - `projects/{project}/cacheConfig`.
func (o AiCacheConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiCacheConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiCacheConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiCacheConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type AiCacheConfigArrayOutput struct{ *pulumi.OutputState }

func (AiCacheConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiCacheConfig)(nil)).Elem()
}

func (o AiCacheConfigArrayOutput) ToAiCacheConfigArrayOutput() AiCacheConfigArrayOutput {
	return o
}

func (o AiCacheConfigArrayOutput) ToAiCacheConfigArrayOutputWithContext(ctx context.Context) AiCacheConfigArrayOutput {
	return o
}

func (o AiCacheConfigArrayOutput) Index(i pulumi.IntInput) AiCacheConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiCacheConfig {
		return vs[0].([]*AiCacheConfig)[vs[1].(int)]
	}).(AiCacheConfigOutput)
}

type AiCacheConfigMapOutput struct{ *pulumi.OutputState }

func (AiCacheConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiCacheConfig)(nil)).Elem()
}

func (o AiCacheConfigMapOutput) ToAiCacheConfigMapOutput() AiCacheConfigMapOutput {
	return o
}

func (o AiCacheConfigMapOutput) ToAiCacheConfigMapOutputWithContext(ctx context.Context) AiCacheConfigMapOutput {
	return o
}

func (o AiCacheConfigMapOutput) MapIndex(k pulumi.StringInput) AiCacheConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiCacheConfig {
		return vs[0].(map[string]*AiCacheConfig)[vs[1].(string)]
	}).(AiCacheConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiCacheConfigInput)(nil)).Elem(), &AiCacheConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiCacheConfigArrayInput)(nil)).Elem(), AiCacheConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiCacheConfigMapInput)(nil)).Elem(), AiCacheConfigMap{})
	pulumi.RegisterOutputType(AiCacheConfigOutput{})
	pulumi.RegisterOutputType(AiCacheConfigArrayOutput{})
	pulumi.RegisterOutputType(AiCacheConfigMapOutput{})
}
