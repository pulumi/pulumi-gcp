// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Vertex AI FeatureGroup. Each of these resources serves a different use case:
//
// * `vertex.AiFeatureGroupIamPolicy`: Authoritative. Sets the IAM policy for the featuregroup and replaces any existing policy already attached.
// * `vertex.AiFeatureGroupIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the featuregroup are preserved.
// * `vertex.AiFeatureGroupIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the featuregroup are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `vertex.AiFeatureGroupIamPolicy`: Retrieves the IAM policy for the featuregroup
//
// > **Note:** `vertex.AiFeatureGroupIamPolicy` **cannot** be used in conjunction with `vertex.AiFeatureGroupIamBinding` and `vertex.AiFeatureGroupIamMember` or they will fight over what your policy should be.
//
// > **Note:** `vertex.AiFeatureGroupIamBinding` resources **can be** used in conjunction with `vertex.AiFeatureGroupIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## vertex.AiFeatureGroupIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureGroupIamPolicy(ctx, "policy", &vertex.AiFeatureGroupIamPolicyArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureGroupIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureGroupIamBinding(ctx, "binding", &vertex.AiFeatureGroupIamBindingArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureGroupIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureGroupIamMember(ctx, "member", &vertex.AiFeatureGroupIamMemberArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Vertex AI FeatureGroup
//
// Three different resources help you manage your IAM policy for Vertex AI FeatureGroup. Each of these resources serves a different use case:
//
// * `vertex.AiFeatureGroupIamPolicy`: Authoritative. Sets the IAM policy for the featuregroup and replaces any existing policy already attached.
// * `vertex.AiFeatureGroupIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the featuregroup are preserved.
// * `vertex.AiFeatureGroupIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the featuregroup are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `vertex.AiFeatureGroupIamPolicy`: Retrieves the IAM policy for the featuregroup
//
// > **Note:** `vertex.AiFeatureGroupIamPolicy` **cannot** be used in conjunction with `vertex.AiFeatureGroupIamBinding` and `vertex.AiFeatureGroupIamMember` or they will fight over what your policy should be.
//
// > **Note:** `vertex.AiFeatureGroupIamBinding` resources **can be** used in conjunction with `vertex.AiFeatureGroupIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## vertex.AiFeatureGroupIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureGroupIamPolicy(ctx, "policy", &vertex.AiFeatureGroupIamPolicyArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureGroupIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureGroupIamBinding(ctx, "binding", &vertex.AiFeatureGroupIamBindingArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureGroupIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureGroupIamMember(ctx, "member", &vertex.AiFeatureGroupIamMemberArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{region}}/featureGroups/{{name}}
//
// * {{project}}/{{region}}/{{name}}
//
// * {{region}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Vertex AI featuregroup IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamBinding:AiFeatureGroupIamBinding editor "projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamBinding:AiFeatureGroupIamBinding editor "projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamBinding:AiFeatureGroupIamBinding editor projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AiFeatureGroupIamBinding struct {
	pulumi.CustomResourceState

	Condition AiFeatureGroupIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringOutput `pulumi:"featureGroup"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewAiFeatureGroupIamBinding registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureGroupIamBinding(ctx *pulumi.Context,
	name string, args *AiFeatureGroupIamBindingArgs, opts ...pulumi.ResourceOption) (*AiFeatureGroupIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureGroup == nil {
		return nil, errors.New("invalid value for required argument 'FeatureGroup'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiFeatureGroupIamBinding
	err := ctx.RegisterResource("gcp:vertex/aiFeatureGroupIamBinding:AiFeatureGroupIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureGroupIamBinding gets an existing AiFeatureGroupIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureGroupIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureGroupIamBindingState, opts ...pulumi.ResourceOption) (*AiFeatureGroupIamBinding, error) {
	var resource AiFeatureGroupIamBinding
	err := ctx.ReadResource("gcp:vertex/aiFeatureGroupIamBinding:AiFeatureGroupIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureGroupIamBinding resources.
type aiFeatureGroupIamBindingState struct {
	Condition *AiFeatureGroupIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup *string `pulumi:"featureGroup"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type AiFeatureGroupIamBindingState struct {
	Condition AiFeatureGroupIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (AiFeatureGroupIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupIamBindingState)(nil)).Elem()
}

type aiFeatureGroupIamBindingArgs struct {
	Condition *AiFeatureGroupIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup string `pulumi:"featureGroup"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a AiFeatureGroupIamBinding resource.
type AiFeatureGroupIamBindingArgs struct {
	Condition AiFeatureGroupIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (AiFeatureGroupIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupIamBindingArgs)(nil)).Elem()
}

type AiFeatureGroupIamBindingInput interface {
	pulumi.Input

	ToAiFeatureGroupIamBindingOutput() AiFeatureGroupIamBindingOutput
	ToAiFeatureGroupIamBindingOutputWithContext(ctx context.Context) AiFeatureGroupIamBindingOutput
}

func (*AiFeatureGroupIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroupIamBinding)(nil)).Elem()
}

func (i *AiFeatureGroupIamBinding) ToAiFeatureGroupIamBindingOutput() AiFeatureGroupIamBindingOutput {
	return i.ToAiFeatureGroupIamBindingOutputWithContext(context.Background())
}

func (i *AiFeatureGroupIamBinding) ToAiFeatureGroupIamBindingOutputWithContext(ctx context.Context) AiFeatureGroupIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamBindingOutput)
}

// AiFeatureGroupIamBindingArrayInput is an input type that accepts AiFeatureGroupIamBindingArray and AiFeatureGroupIamBindingArrayOutput values.
// You can construct a concrete instance of `AiFeatureGroupIamBindingArrayInput` via:
//
//	AiFeatureGroupIamBindingArray{ AiFeatureGroupIamBindingArgs{...} }
type AiFeatureGroupIamBindingArrayInput interface {
	pulumi.Input

	ToAiFeatureGroupIamBindingArrayOutput() AiFeatureGroupIamBindingArrayOutput
	ToAiFeatureGroupIamBindingArrayOutputWithContext(context.Context) AiFeatureGroupIamBindingArrayOutput
}

type AiFeatureGroupIamBindingArray []AiFeatureGroupIamBindingInput

func (AiFeatureGroupIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroupIamBinding)(nil)).Elem()
}

func (i AiFeatureGroupIamBindingArray) ToAiFeatureGroupIamBindingArrayOutput() AiFeatureGroupIamBindingArrayOutput {
	return i.ToAiFeatureGroupIamBindingArrayOutputWithContext(context.Background())
}

func (i AiFeatureGroupIamBindingArray) ToAiFeatureGroupIamBindingArrayOutputWithContext(ctx context.Context) AiFeatureGroupIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamBindingArrayOutput)
}

// AiFeatureGroupIamBindingMapInput is an input type that accepts AiFeatureGroupIamBindingMap and AiFeatureGroupIamBindingMapOutput values.
// You can construct a concrete instance of `AiFeatureGroupIamBindingMapInput` via:
//
//	AiFeatureGroupIamBindingMap{ "key": AiFeatureGroupIamBindingArgs{...} }
type AiFeatureGroupIamBindingMapInput interface {
	pulumi.Input

	ToAiFeatureGroupIamBindingMapOutput() AiFeatureGroupIamBindingMapOutput
	ToAiFeatureGroupIamBindingMapOutputWithContext(context.Context) AiFeatureGroupIamBindingMapOutput
}

type AiFeatureGroupIamBindingMap map[string]AiFeatureGroupIamBindingInput

func (AiFeatureGroupIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroupIamBinding)(nil)).Elem()
}

func (i AiFeatureGroupIamBindingMap) ToAiFeatureGroupIamBindingMapOutput() AiFeatureGroupIamBindingMapOutput {
	return i.ToAiFeatureGroupIamBindingMapOutputWithContext(context.Background())
}

func (i AiFeatureGroupIamBindingMap) ToAiFeatureGroupIamBindingMapOutputWithContext(ctx context.Context) AiFeatureGroupIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamBindingMapOutput)
}

type AiFeatureGroupIamBindingOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroupIamBinding)(nil)).Elem()
}

func (o AiFeatureGroupIamBindingOutput) ToAiFeatureGroupIamBindingOutput() AiFeatureGroupIamBindingOutput {
	return o
}

func (o AiFeatureGroupIamBindingOutput) ToAiFeatureGroupIamBindingOutputWithContext(ctx context.Context) AiFeatureGroupIamBindingOutput {
	return o
}

func (o AiFeatureGroupIamBindingOutput) Condition() AiFeatureGroupIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamBinding) AiFeatureGroupIamBindingConditionPtrOutput { return v.Condition }).(AiFeatureGroupIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o AiFeatureGroupIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AiFeatureGroupIamBindingOutput) FeatureGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamBinding) pulumi.StringOutput { return v.FeatureGroup }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
func (o AiFeatureGroupIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o AiFeatureGroupIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o AiFeatureGroupIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o AiFeatureGroupIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AiFeatureGroupIamBindingArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroupIamBinding)(nil)).Elem()
}

func (o AiFeatureGroupIamBindingArrayOutput) ToAiFeatureGroupIamBindingArrayOutput() AiFeatureGroupIamBindingArrayOutput {
	return o
}

func (o AiFeatureGroupIamBindingArrayOutput) ToAiFeatureGroupIamBindingArrayOutputWithContext(ctx context.Context) AiFeatureGroupIamBindingArrayOutput {
	return o
}

func (o AiFeatureGroupIamBindingArrayOutput) Index(i pulumi.IntInput) AiFeatureGroupIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureGroupIamBinding {
		return vs[0].([]*AiFeatureGroupIamBinding)[vs[1].(int)]
	}).(AiFeatureGroupIamBindingOutput)
}

type AiFeatureGroupIamBindingMapOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroupIamBinding)(nil)).Elem()
}

func (o AiFeatureGroupIamBindingMapOutput) ToAiFeatureGroupIamBindingMapOutput() AiFeatureGroupIamBindingMapOutput {
	return o
}

func (o AiFeatureGroupIamBindingMapOutput) ToAiFeatureGroupIamBindingMapOutputWithContext(ctx context.Context) AiFeatureGroupIamBindingMapOutput {
	return o
}

func (o AiFeatureGroupIamBindingMapOutput) MapIndex(k pulumi.StringInput) AiFeatureGroupIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureGroupIamBinding {
		return vs[0].(map[string]*AiFeatureGroupIamBinding)[vs[1].(string)]
	}).(AiFeatureGroupIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamBindingInput)(nil)).Elem(), &AiFeatureGroupIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamBindingArrayInput)(nil)).Elem(), AiFeatureGroupIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamBindingMapInput)(nil)).Elem(), AiFeatureGroupIamBindingMap{})
	pulumi.RegisterOutputType(AiFeatureGroupIamBindingOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupIamBindingArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupIamBindingMapOutput{})
}
