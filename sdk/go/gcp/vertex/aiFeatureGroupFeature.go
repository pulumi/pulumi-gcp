// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vertex AI Feature Group Feature is feature metadata information.
//
// To get more information about FeatureGroupFeature, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureGroups.features)
// * How-to Guides
//   - [Creating a Feature](https://cloud.google.com/vertex-ai/docs/featurestore/latest/create-feature)
//
// ## Example Usage
//
// ### Vertex Ai Feature Group Feature
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sampleDataset, err := bigquery.NewDataset(ctx, "sample_dataset", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_load_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			sampleTable, err := bigquery.NewTable(ctx, "sample_table", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				DatasetId:          sampleDataset.DatasetId,
//				TableId:            pulumi.String("job_load_table"),
//				Schema: pulumi.String(`[
//	    {
//	        "name": "feature_id",
//	        "type": "STRING",
//	        "mode": "NULLABLE"
//	    },
//	    {
//	        "name": "example_feature",
//	        "type": "STRING",
//	        "mode": "NULLABLE"
//	    },
//	    {
//	        "name": "feature_timestamp",
//	        "type": "TIMESTAMP",
//	        "mode": "NULLABLE"
//	    }
//
// ]
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			sampleFeatureGroup, err := vertex.NewAiFeatureGroup(ctx, "sample_feature_group", &vertex.AiFeatureGroupArgs{
//				Name:        pulumi.String("example_feature_group"),
//				Description: pulumi.String("A sample feature group"),
//				Region:      pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//				BigQuery: &vertex.AiFeatureGroupBigQueryArgs{
//					BigQuerySource: &vertex.AiFeatureGroupBigQueryBigQuerySourceArgs{
//						InputUri: pulumi.All(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).ApplyT(func(_args []interface{}) (string, error) {
//							project := _args[0].(string)
//							datasetId := _args[1].(string)
//							tableId := _args[2].(string)
//							return fmt.Sprintf("bq://%v.%v.%v", project, datasetId, tableId), nil
//						}).(pulumi.StringOutput),
//					},
//					EntityIdColumns: pulumi.StringArray{
//						pulumi.String("feature_id"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureGroupFeature(ctx, "feature_group_feature", &vertex.AiFeatureGroupFeatureArgs{
//				Name:         pulumi.String("example_feature"),
//				Region:       pulumi.String("us-central1"),
//				FeatureGroup: sampleFeatureGroup.Name,
//				Description:  pulumi.String("A sample feature"),
//				Labels: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FeatureGroupFeature can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}/features/{{name}}`
//
// * `{{project}}/{{region}}/{{feature_group}}/{{name}}`
//
// * `{{region}}/{{feature_group}}/{{name}}`
//
// * `{{feature_group}}/{{name}}`
//
// When using the `pulumi import` command, FeatureGroupFeature can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}/features/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{project}}/{{region}}/{{feature_group}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{region}}/{{feature_group}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{feature_group}}/{{name}}
// ```
type AiFeatureGroupFeature struct {
	pulumi.CustomResourceState

	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the FeatureGroup.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The name of the Feature Group.
	FeatureGroup pulumi.StringOutput `pulumi:"featureGroup"`
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name of the Feature Group Feature.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The region for the resource. It should be the same as the feature group's region.
	//
	// ***
	Region pulumi.StringOutput `pulumi:"region"`
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
	VersionColumnName pulumi.StringOutput `pulumi:"versionColumnName"`
}

// NewAiFeatureGroupFeature registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureGroupFeature(ctx *pulumi.Context,
	name string, args *AiFeatureGroupFeatureArgs, opts ...pulumi.ResourceOption) (*AiFeatureGroupFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureGroup == nil {
		return nil, errors.New("invalid value for required argument 'FeatureGroup'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiFeatureGroupFeature
	err := ctx.RegisterResource("gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureGroupFeature gets an existing AiFeatureGroupFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureGroupFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureGroupFeatureState, opts ...pulumi.ResourceOption) (*AiFeatureGroupFeature, error) {
	var resource AiFeatureGroupFeature
	err := ctx.ReadResource("gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureGroupFeature resources.
type aiFeatureGroupFeatureState struct {
	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// The description of the FeatureGroup.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The name of the Feature Group.
	FeatureGroup *string `pulumi:"featureGroup"`
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Feature Group Feature.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The region for the resource. It should be the same as the feature group's region.
	//
	// ***
	Region *string `pulumi:"region"`
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
	// The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
	VersionColumnName *string `pulumi:"versionColumnName"`
}

type AiFeatureGroupFeatureState struct {
	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// The description of the FeatureGroup.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The name of the Feature Group.
	FeatureGroup pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Feature Group Feature.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The region for the resource. It should be the same as the feature group's region.
	//
	// ***
	Region pulumi.StringPtrInput
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringPtrInput
	// The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
	VersionColumnName pulumi.StringPtrInput
}

func (AiFeatureGroupFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupFeatureState)(nil)).Elem()
}

type aiFeatureGroupFeatureArgs struct {
	// The description of the FeatureGroup.
	Description *string `pulumi:"description"`
	// The name of the Feature Group.
	FeatureGroup string `pulumi:"featureGroup"`
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Feature Group Feature.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region for the resource. It should be the same as the feature group's region.
	//
	// ***
	Region string `pulumi:"region"`
	// The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
	VersionColumnName *string `pulumi:"versionColumnName"`
}

// The set of arguments for constructing a AiFeatureGroupFeature resource.
type AiFeatureGroupFeatureArgs struct {
	// The description of the FeatureGroup.
	Description pulumi.StringPtrInput
	// The name of the Feature Group.
	FeatureGroup pulumi.StringInput
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Feature Group Feature.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region for the resource. It should be the same as the feature group's region.
	//
	// ***
	Region pulumi.StringInput
	// The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
	VersionColumnName pulumi.StringPtrInput
}

func (AiFeatureGroupFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupFeatureArgs)(nil)).Elem()
}

type AiFeatureGroupFeatureInput interface {
	pulumi.Input

	ToAiFeatureGroupFeatureOutput() AiFeatureGroupFeatureOutput
	ToAiFeatureGroupFeatureOutputWithContext(ctx context.Context) AiFeatureGroupFeatureOutput
}

func (*AiFeatureGroupFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroupFeature)(nil)).Elem()
}

func (i *AiFeatureGroupFeature) ToAiFeatureGroupFeatureOutput() AiFeatureGroupFeatureOutput {
	return i.ToAiFeatureGroupFeatureOutputWithContext(context.Background())
}

func (i *AiFeatureGroupFeature) ToAiFeatureGroupFeatureOutputWithContext(ctx context.Context) AiFeatureGroupFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupFeatureOutput)
}

// AiFeatureGroupFeatureArrayInput is an input type that accepts AiFeatureGroupFeatureArray and AiFeatureGroupFeatureArrayOutput values.
// You can construct a concrete instance of `AiFeatureGroupFeatureArrayInput` via:
//
//	AiFeatureGroupFeatureArray{ AiFeatureGroupFeatureArgs{...} }
type AiFeatureGroupFeatureArrayInput interface {
	pulumi.Input

	ToAiFeatureGroupFeatureArrayOutput() AiFeatureGroupFeatureArrayOutput
	ToAiFeatureGroupFeatureArrayOutputWithContext(context.Context) AiFeatureGroupFeatureArrayOutput
}

type AiFeatureGroupFeatureArray []AiFeatureGroupFeatureInput

func (AiFeatureGroupFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroupFeature)(nil)).Elem()
}

func (i AiFeatureGroupFeatureArray) ToAiFeatureGroupFeatureArrayOutput() AiFeatureGroupFeatureArrayOutput {
	return i.ToAiFeatureGroupFeatureArrayOutputWithContext(context.Background())
}

func (i AiFeatureGroupFeatureArray) ToAiFeatureGroupFeatureArrayOutputWithContext(ctx context.Context) AiFeatureGroupFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupFeatureArrayOutput)
}

// AiFeatureGroupFeatureMapInput is an input type that accepts AiFeatureGroupFeatureMap and AiFeatureGroupFeatureMapOutput values.
// You can construct a concrete instance of `AiFeatureGroupFeatureMapInput` via:
//
//	AiFeatureGroupFeatureMap{ "key": AiFeatureGroupFeatureArgs{...} }
type AiFeatureGroupFeatureMapInput interface {
	pulumi.Input

	ToAiFeatureGroupFeatureMapOutput() AiFeatureGroupFeatureMapOutput
	ToAiFeatureGroupFeatureMapOutputWithContext(context.Context) AiFeatureGroupFeatureMapOutput
}

type AiFeatureGroupFeatureMap map[string]AiFeatureGroupFeatureInput

func (AiFeatureGroupFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroupFeature)(nil)).Elem()
}

func (i AiFeatureGroupFeatureMap) ToAiFeatureGroupFeatureMapOutput() AiFeatureGroupFeatureMapOutput {
	return i.ToAiFeatureGroupFeatureMapOutputWithContext(context.Background())
}

func (i AiFeatureGroupFeatureMap) ToAiFeatureGroupFeatureMapOutputWithContext(ctx context.Context) AiFeatureGroupFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupFeatureMapOutput)
}

type AiFeatureGroupFeatureOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroupFeature)(nil)).Elem()
}

func (o AiFeatureGroupFeatureOutput) ToAiFeatureGroupFeatureOutput() AiFeatureGroupFeatureOutput {
	return o
}

func (o AiFeatureGroupFeatureOutput) ToAiFeatureGroupFeatureOutputWithContext(ctx context.Context) AiFeatureGroupFeatureOutput {
	return o
}

// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiFeatureGroupFeatureOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the FeatureGroup.
func (o AiFeatureGroupFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AiFeatureGroupFeatureOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The name of the Feature Group.
func (o AiFeatureGroupFeatureOutput) FeatureGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringOutput { return v.FeatureGroup }).(pulumi.StringOutput)
}

// The labels with user-defined metadata to organize your FeatureGroup.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o AiFeatureGroupFeatureOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the Feature Group Feature.
func (o AiFeatureGroupFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiFeatureGroupFeatureOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AiFeatureGroupFeatureOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The region for the resource. It should be the same as the feature group's region.
//
// ***
func (o AiFeatureGroupFeatureOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiFeatureGroupFeatureOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
func (o AiFeatureGroupFeatureOutput) VersionColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupFeature) pulumi.StringOutput { return v.VersionColumnName }).(pulumi.StringOutput)
}

type AiFeatureGroupFeatureArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroupFeature)(nil)).Elem()
}

func (o AiFeatureGroupFeatureArrayOutput) ToAiFeatureGroupFeatureArrayOutput() AiFeatureGroupFeatureArrayOutput {
	return o
}

func (o AiFeatureGroupFeatureArrayOutput) ToAiFeatureGroupFeatureArrayOutputWithContext(ctx context.Context) AiFeatureGroupFeatureArrayOutput {
	return o
}

func (o AiFeatureGroupFeatureArrayOutput) Index(i pulumi.IntInput) AiFeatureGroupFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureGroupFeature {
		return vs[0].([]*AiFeatureGroupFeature)[vs[1].(int)]
	}).(AiFeatureGroupFeatureOutput)
}

type AiFeatureGroupFeatureMapOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroupFeature)(nil)).Elem()
}

func (o AiFeatureGroupFeatureMapOutput) ToAiFeatureGroupFeatureMapOutput() AiFeatureGroupFeatureMapOutput {
	return o
}

func (o AiFeatureGroupFeatureMapOutput) ToAiFeatureGroupFeatureMapOutputWithContext(ctx context.Context) AiFeatureGroupFeatureMapOutput {
	return o
}

func (o AiFeatureGroupFeatureMapOutput) MapIndex(k pulumi.StringInput) AiFeatureGroupFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureGroupFeature {
		return vs[0].(map[string]*AiFeatureGroupFeature)[vs[1].(string)]
	}).(AiFeatureGroupFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupFeatureInput)(nil)).Elem(), &AiFeatureGroupFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupFeatureArrayInput)(nil)).Elem(), AiFeatureGroupFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupFeatureMapInput)(nil)).Elem(), AiFeatureGroupFeatureMap{})
	pulumi.RegisterOutputType(AiFeatureGroupFeatureOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupFeatureArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupFeatureMapOutput{})
}
