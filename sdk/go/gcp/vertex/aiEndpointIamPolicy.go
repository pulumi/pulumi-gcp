// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AiEndpointIamPolicy struct {
	pulumi.CustomResourceState

	Endpoint   pulumi.StringOutput `pulumi:"endpoint"`
	Etag       pulumi.StringOutput `pulumi:"etag"`
	Location   pulumi.StringOutput `pulumi:"location"`
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	Project    pulumi.StringOutput `pulumi:"project"`
}

// NewAiEndpointIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAiEndpointIamPolicy(ctx *pulumi.Context,
	name string, args *AiEndpointIamPolicyArgs, opts ...pulumi.ResourceOption) (*AiEndpointIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiEndpointIamPolicy
	err := ctx.RegisterResource("gcp:vertex/aiEndpointIamPolicy:AiEndpointIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiEndpointIamPolicy gets an existing AiEndpointIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiEndpointIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiEndpointIamPolicyState, opts ...pulumi.ResourceOption) (*AiEndpointIamPolicy, error) {
	var resource AiEndpointIamPolicy
	err := ctx.ReadResource("gcp:vertex/aiEndpointIamPolicy:AiEndpointIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiEndpointIamPolicy resources.
type aiEndpointIamPolicyState struct {
	Endpoint   *string `pulumi:"endpoint"`
	Etag       *string `pulumi:"etag"`
	Location   *string `pulumi:"location"`
	PolicyData *string `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
}

type AiEndpointIamPolicyState struct {
	Endpoint   pulumi.StringPtrInput
	Etag       pulumi.StringPtrInput
	Location   pulumi.StringPtrInput
	PolicyData pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
}

func (AiEndpointIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiEndpointIamPolicyState)(nil)).Elem()
}

type aiEndpointIamPolicyArgs struct {
	Endpoint   string  `pulumi:"endpoint"`
	Location   *string `pulumi:"location"`
	PolicyData string  `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
}

// The set of arguments for constructing a AiEndpointIamPolicy resource.
type AiEndpointIamPolicyArgs struct {
	Endpoint   pulumi.StringInput
	Location   pulumi.StringPtrInput
	PolicyData pulumi.StringInput
	Project    pulumi.StringPtrInput
}

func (AiEndpointIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiEndpointIamPolicyArgs)(nil)).Elem()
}

type AiEndpointIamPolicyInput interface {
	pulumi.Input

	ToAiEndpointIamPolicyOutput() AiEndpointIamPolicyOutput
	ToAiEndpointIamPolicyOutputWithContext(ctx context.Context) AiEndpointIamPolicyOutput
}

func (*AiEndpointIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AiEndpointIamPolicy)(nil)).Elem()
}

func (i *AiEndpointIamPolicy) ToAiEndpointIamPolicyOutput() AiEndpointIamPolicyOutput {
	return i.ToAiEndpointIamPolicyOutputWithContext(context.Background())
}

func (i *AiEndpointIamPolicy) ToAiEndpointIamPolicyOutputWithContext(ctx context.Context) AiEndpointIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiEndpointIamPolicyOutput)
}

// AiEndpointIamPolicyArrayInput is an input type that accepts AiEndpointIamPolicyArray and AiEndpointIamPolicyArrayOutput values.
// You can construct a concrete instance of `AiEndpointIamPolicyArrayInput` via:
//
//	AiEndpointIamPolicyArray{ AiEndpointIamPolicyArgs{...} }
type AiEndpointIamPolicyArrayInput interface {
	pulumi.Input

	ToAiEndpointIamPolicyArrayOutput() AiEndpointIamPolicyArrayOutput
	ToAiEndpointIamPolicyArrayOutputWithContext(context.Context) AiEndpointIamPolicyArrayOutput
}

type AiEndpointIamPolicyArray []AiEndpointIamPolicyInput

func (AiEndpointIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiEndpointIamPolicy)(nil)).Elem()
}

func (i AiEndpointIamPolicyArray) ToAiEndpointIamPolicyArrayOutput() AiEndpointIamPolicyArrayOutput {
	return i.ToAiEndpointIamPolicyArrayOutputWithContext(context.Background())
}

func (i AiEndpointIamPolicyArray) ToAiEndpointIamPolicyArrayOutputWithContext(ctx context.Context) AiEndpointIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiEndpointIamPolicyArrayOutput)
}

// AiEndpointIamPolicyMapInput is an input type that accepts AiEndpointIamPolicyMap and AiEndpointIamPolicyMapOutput values.
// You can construct a concrete instance of `AiEndpointIamPolicyMapInput` via:
//
//	AiEndpointIamPolicyMap{ "key": AiEndpointIamPolicyArgs{...} }
type AiEndpointIamPolicyMapInput interface {
	pulumi.Input

	ToAiEndpointIamPolicyMapOutput() AiEndpointIamPolicyMapOutput
	ToAiEndpointIamPolicyMapOutputWithContext(context.Context) AiEndpointIamPolicyMapOutput
}

type AiEndpointIamPolicyMap map[string]AiEndpointIamPolicyInput

func (AiEndpointIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiEndpointIamPolicy)(nil)).Elem()
}

func (i AiEndpointIamPolicyMap) ToAiEndpointIamPolicyMapOutput() AiEndpointIamPolicyMapOutput {
	return i.ToAiEndpointIamPolicyMapOutputWithContext(context.Background())
}

func (i AiEndpointIamPolicyMap) ToAiEndpointIamPolicyMapOutputWithContext(ctx context.Context) AiEndpointIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiEndpointIamPolicyMapOutput)
}

type AiEndpointIamPolicyOutput struct{ *pulumi.OutputState }

func (AiEndpointIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiEndpointIamPolicy)(nil)).Elem()
}

func (o AiEndpointIamPolicyOutput) ToAiEndpointIamPolicyOutput() AiEndpointIamPolicyOutput {
	return o
}

func (o AiEndpointIamPolicyOutput) ToAiEndpointIamPolicyOutputWithContext(ctx context.Context) AiEndpointIamPolicyOutput {
	return o
}

func (o AiEndpointIamPolicyOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamPolicy) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o AiEndpointIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AiEndpointIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o AiEndpointIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o AiEndpointIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type AiEndpointIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (AiEndpointIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiEndpointIamPolicy)(nil)).Elem()
}

func (o AiEndpointIamPolicyArrayOutput) ToAiEndpointIamPolicyArrayOutput() AiEndpointIamPolicyArrayOutput {
	return o
}

func (o AiEndpointIamPolicyArrayOutput) ToAiEndpointIamPolicyArrayOutputWithContext(ctx context.Context) AiEndpointIamPolicyArrayOutput {
	return o
}

func (o AiEndpointIamPolicyArrayOutput) Index(i pulumi.IntInput) AiEndpointIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiEndpointIamPolicy {
		return vs[0].([]*AiEndpointIamPolicy)[vs[1].(int)]
	}).(AiEndpointIamPolicyOutput)
}

type AiEndpointIamPolicyMapOutput struct{ *pulumi.OutputState }

func (AiEndpointIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiEndpointIamPolicy)(nil)).Elem()
}

func (o AiEndpointIamPolicyMapOutput) ToAiEndpointIamPolicyMapOutput() AiEndpointIamPolicyMapOutput {
	return o
}

func (o AiEndpointIamPolicyMapOutput) ToAiEndpointIamPolicyMapOutputWithContext(ctx context.Context) AiEndpointIamPolicyMapOutput {
	return o
}

func (o AiEndpointIamPolicyMapOutput) MapIndex(k pulumi.StringInput) AiEndpointIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiEndpointIamPolicy {
		return vs[0].(map[string]*AiEndpointIamPolicy)[vs[1].(string)]
	}).(AiEndpointIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiEndpointIamPolicyInput)(nil)).Elem(), &AiEndpointIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiEndpointIamPolicyArrayInput)(nil)).Elem(), AiEndpointIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiEndpointIamPolicyMapInput)(nil)).Elem(), AiEndpointIamPolicyMap{})
	pulumi.RegisterOutputType(AiEndpointIamPolicyOutput{})
	pulumi.RegisterOutputType(AiEndpointIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(AiEndpointIamPolicyMapOutput{})
}
