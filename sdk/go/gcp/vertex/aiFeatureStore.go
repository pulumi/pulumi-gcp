// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Featurestore can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{name}}
// ```
type AiFeatureStore struct {
	pulumi.CustomResourceState

	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// If set to true, any EntityTypes and Features for this Featurestore will also be deleted
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// A set of key/value label pairs to assign to this Featurestore.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringOutput `pulumi:"name"`
	// Config for online serving resources.
	// Structure is documented below.
	OnlineServingConfig AiFeatureStoreOnlineServingConfigPtrOutput `pulumi:"onlineServingConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region pulumi.StringOutput `pulumi:"region"`
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAiFeatureStore registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureStore(ctx *pulumi.Context,
	name string, args *AiFeatureStoreArgs, opts ...pulumi.ResourceOption) (*AiFeatureStore, error) {
	if args == nil {
		args = &AiFeatureStoreArgs{}
	}

	var resource AiFeatureStore
	err := ctx.RegisterResource("gcp:vertex/aiFeatureStore:AiFeatureStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureStore gets an existing AiFeatureStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureStoreState, opts ...pulumi.ResourceOption) (*AiFeatureStore, error) {
	var resource AiFeatureStore
	err := ctx.ReadResource("gcp:vertex/aiFeatureStore:AiFeatureStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureStore resources.
type aiFeatureStoreState struct {
	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// If set to true, any EntityTypes and Features for this Featurestore will also be deleted
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A set of key/value label pairs to assign to this Featurestore.
	Labels map[string]string `pulumi:"labels"`
	// The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name *string `pulumi:"name"`
	// Config for online serving resources.
	// Structure is documented below.
	OnlineServingConfig *AiFeatureStoreOnlineServingConfig `pulumi:"onlineServingConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region *string `pulumi:"region"`
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
}

type AiFeatureStoreState struct {
	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// If set to true, any EntityTypes and Features for this Featurestore will also be deleted
	ForceDestroy pulumi.BoolPtrInput
	// A set of key/value label pairs to assign to this Featurestore.
	Labels pulumi.StringMapInput
	// The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringPtrInput
	// Config for online serving resources.
	// Structure is documented below.
	OnlineServingConfig AiFeatureStoreOnlineServingConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1
	Region pulumi.StringPtrInput
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime pulumi.StringPtrInput
}

func (AiFeatureStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreState)(nil)).Elem()
}

type aiFeatureStoreArgs struct {
	// If set to true, any EntityTypes and Features for this Featurestore will also be deleted
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A set of key/value label pairs to assign to this Featurestore.
	Labels map[string]string `pulumi:"labels"`
	// The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name *string `pulumi:"name"`
	// Config for online serving resources.
	// Structure is documented below.
	OnlineServingConfig *AiFeatureStoreOnlineServingConfig `pulumi:"onlineServingConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiFeatureStore resource.
type AiFeatureStoreArgs struct {
	// If set to true, any EntityTypes and Features for this Featurestore will also be deleted
	ForceDestroy pulumi.BoolPtrInput
	// A set of key/value label pairs to assign to this Featurestore.
	Labels pulumi.StringMapInput
	// The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringPtrInput
	// Config for online serving resources.
	// Structure is documented below.
	OnlineServingConfig AiFeatureStoreOnlineServingConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiFeatureStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreArgs)(nil)).Elem()
}

type AiFeatureStoreInput interface {
	pulumi.Input

	ToAiFeatureStoreOutput() AiFeatureStoreOutput
	ToAiFeatureStoreOutputWithContext(ctx context.Context) AiFeatureStoreOutput
}

func (*AiFeatureStore) ElementType() reflect.Type {
	return reflect.TypeOf((*AiFeatureStore)(nil))
}

func (i *AiFeatureStore) ToAiFeatureStoreOutput() AiFeatureStoreOutput {
	return i.ToAiFeatureStoreOutputWithContext(context.Background())
}

func (i *AiFeatureStore) ToAiFeatureStoreOutputWithContext(ctx context.Context) AiFeatureStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreOutput)
}

func (i *AiFeatureStore) ToAiFeatureStorePtrOutput() AiFeatureStorePtrOutput {
	return i.ToAiFeatureStorePtrOutputWithContext(context.Background())
}

func (i *AiFeatureStore) ToAiFeatureStorePtrOutputWithContext(ctx context.Context) AiFeatureStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStorePtrOutput)
}

type AiFeatureStorePtrInput interface {
	pulumi.Input

	ToAiFeatureStorePtrOutput() AiFeatureStorePtrOutput
	ToAiFeatureStorePtrOutputWithContext(ctx context.Context) AiFeatureStorePtrOutput
}

type aiFeatureStorePtrType AiFeatureStoreArgs

func (*aiFeatureStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStore)(nil))
}

func (i *aiFeatureStorePtrType) ToAiFeatureStorePtrOutput() AiFeatureStorePtrOutput {
	return i.ToAiFeatureStorePtrOutputWithContext(context.Background())
}

func (i *aiFeatureStorePtrType) ToAiFeatureStorePtrOutputWithContext(ctx context.Context) AiFeatureStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStorePtrOutput)
}

// AiFeatureStoreArrayInput is an input type that accepts AiFeatureStoreArray and AiFeatureStoreArrayOutput values.
// You can construct a concrete instance of `AiFeatureStoreArrayInput` via:
//
//          AiFeatureStoreArray{ AiFeatureStoreArgs{...} }
type AiFeatureStoreArrayInput interface {
	pulumi.Input

	ToAiFeatureStoreArrayOutput() AiFeatureStoreArrayOutput
	ToAiFeatureStoreArrayOutputWithContext(context.Context) AiFeatureStoreArrayOutput
}

type AiFeatureStoreArray []AiFeatureStoreInput

func (AiFeatureStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStore)(nil)).Elem()
}

func (i AiFeatureStoreArray) ToAiFeatureStoreArrayOutput() AiFeatureStoreArrayOutput {
	return i.ToAiFeatureStoreArrayOutputWithContext(context.Background())
}

func (i AiFeatureStoreArray) ToAiFeatureStoreArrayOutputWithContext(ctx context.Context) AiFeatureStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreArrayOutput)
}

// AiFeatureStoreMapInput is an input type that accepts AiFeatureStoreMap and AiFeatureStoreMapOutput values.
// You can construct a concrete instance of `AiFeatureStoreMapInput` via:
//
//          AiFeatureStoreMap{ "key": AiFeatureStoreArgs{...} }
type AiFeatureStoreMapInput interface {
	pulumi.Input

	ToAiFeatureStoreMapOutput() AiFeatureStoreMapOutput
	ToAiFeatureStoreMapOutputWithContext(context.Context) AiFeatureStoreMapOutput
}

type AiFeatureStoreMap map[string]AiFeatureStoreInput

func (AiFeatureStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStore)(nil)).Elem()
}

func (i AiFeatureStoreMap) ToAiFeatureStoreMapOutput() AiFeatureStoreMapOutput {
	return i.ToAiFeatureStoreMapOutputWithContext(context.Background())
}

func (i AiFeatureStoreMap) ToAiFeatureStoreMapOutputWithContext(ctx context.Context) AiFeatureStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreMapOutput)
}

type AiFeatureStoreOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AiFeatureStore)(nil))
}

func (o AiFeatureStoreOutput) ToAiFeatureStoreOutput() AiFeatureStoreOutput {
	return o
}

func (o AiFeatureStoreOutput) ToAiFeatureStoreOutputWithContext(ctx context.Context) AiFeatureStoreOutput {
	return o
}

func (o AiFeatureStoreOutput) ToAiFeatureStorePtrOutput() AiFeatureStorePtrOutput {
	return o.ToAiFeatureStorePtrOutputWithContext(context.Background())
}

func (o AiFeatureStoreOutput) ToAiFeatureStorePtrOutputWithContext(ctx context.Context) AiFeatureStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AiFeatureStore) *AiFeatureStore {
		return &v
	}).(AiFeatureStorePtrOutput)
}

type AiFeatureStorePtrOutput struct{ *pulumi.OutputState }

func (AiFeatureStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStore)(nil))
}

func (o AiFeatureStorePtrOutput) ToAiFeatureStorePtrOutput() AiFeatureStorePtrOutput {
	return o
}

func (o AiFeatureStorePtrOutput) ToAiFeatureStorePtrOutputWithContext(ctx context.Context) AiFeatureStorePtrOutput {
	return o
}

func (o AiFeatureStorePtrOutput) Elem() AiFeatureStoreOutput {
	return o.ApplyT(func(v *AiFeatureStore) AiFeatureStore {
		if v != nil {
			return *v
		}
		var ret AiFeatureStore
		return ret
	}).(AiFeatureStoreOutput)
}

type AiFeatureStoreArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AiFeatureStore)(nil))
}

func (o AiFeatureStoreArrayOutput) ToAiFeatureStoreArrayOutput() AiFeatureStoreArrayOutput {
	return o
}

func (o AiFeatureStoreArrayOutput) ToAiFeatureStoreArrayOutputWithContext(ctx context.Context) AiFeatureStoreArrayOutput {
	return o
}

func (o AiFeatureStoreArrayOutput) Index(i pulumi.IntInput) AiFeatureStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AiFeatureStore {
		return vs[0].([]AiFeatureStore)[vs[1].(int)]
	}).(AiFeatureStoreOutput)
}

type AiFeatureStoreMapOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AiFeatureStore)(nil))
}

func (o AiFeatureStoreMapOutput) ToAiFeatureStoreMapOutput() AiFeatureStoreMapOutput {
	return o
}

func (o AiFeatureStoreMapOutput) ToAiFeatureStoreMapOutputWithContext(ctx context.Context) AiFeatureStoreMapOutput {
	return o
}

func (o AiFeatureStoreMapOutput) MapIndex(k pulumi.StringInput) AiFeatureStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AiFeatureStore {
		return vs[0].(map[string]AiFeatureStore)[vs[1].(string)]
	}).(AiFeatureStoreOutput)
}

func init() {
	pulumi.RegisterOutputType(AiFeatureStoreOutput{})
	pulumi.RegisterOutputType(AiFeatureStorePtrOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreMapOutput{})
}
