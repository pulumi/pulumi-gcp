// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A collection of DataItems and Annotations on them.
//
// To get more information about Featurestore, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/vertex-ai/docs)
//
// ## Example Usage
// ### Vertex Ai Featurestore
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
//				EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
//					KmsKeyName: pulumi.String("kms-name"),
//				},
//				ForceDestroy: pulumi.Bool(true),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
//					FixedNodeCount: pulumi.Int(2),
//				},
//				Region: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Featurestore can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember default {{name}}
//
// ```
type AiFeatureStoreIamMember struct {
	pulumi.CustomResourceState

	Condition    AiFeatureStoreIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag         pulumi.StringOutput                       `pulumi:"etag"`
	Featurestore pulumi.StringOutput                       `pulumi:"featurestore"`
	Member       pulumi.StringOutput                       `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region pulumi.StringOutput `pulumi:"region"`
	Role   pulumi.StringOutput `pulumi:"role"`
}

// NewAiFeatureStoreIamMember registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureStoreIamMember(ctx *pulumi.Context,
	name string, args *AiFeatureStoreIamMemberArgs, opts ...pulumi.ResourceOption) (*AiFeatureStoreIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AiFeatureStoreIamMember
	err := ctx.RegisterResource("gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureStoreIamMember gets an existing AiFeatureStoreIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureStoreIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureStoreIamMemberState, opts ...pulumi.ResourceOption) (*AiFeatureStoreIamMember, error) {
	var resource AiFeatureStoreIamMember
	err := ctx.ReadResource("gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureStoreIamMember resources.
type aiFeatureStoreIamMemberState struct {
	Condition    *AiFeatureStoreIamMemberCondition `pulumi:"condition"`
	Etag         *string                           `pulumi:"etag"`
	Featurestore *string                           `pulumi:"featurestore"`
	Member       *string                           `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region *string `pulumi:"region"`
	Role   *string `pulumi:"role"`
}

type AiFeatureStoreIamMemberState struct {
	Condition    AiFeatureStoreIamMemberConditionPtrInput
	Etag         pulumi.StringPtrInput
	Featurestore pulumi.StringPtrInput
	Member       pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1
	Region pulumi.StringPtrInput
	Role   pulumi.StringPtrInput
}

func (AiFeatureStoreIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreIamMemberState)(nil)).Elem()
}

type aiFeatureStoreIamMemberArgs struct {
	Condition    *AiFeatureStoreIamMemberCondition `pulumi:"condition"`
	Featurestore string                            `pulumi:"featurestore"`
	Member       string                            `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region *string `pulumi:"region"`
	Role   string  `pulumi:"role"`
}

// The set of arguments for constructing a AiFeatureStoreIamMember resource.
type AiFeatureStoreIamMemberArgs struct {
	Condition    AiFeatureStoreIamMemberConditionPtrInput
	Featurestore pulumi.StringInput
	Member       pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1
	Region pulumi.StringPtrInput
	Role   pulumi.StringInput
}

func (AiFeatureStoreIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreIamMemberArgs)(nil)).Elem()
}

type AiFeatureStoreIamMemberInput interface {
	pulumi.Input

	ToAiFeatureStoreIamMemberOutput() AiFeatureStoreIamMemberOutput
	ToAiFeatureStoreIamMemberOutputWithContext(ctx context.Context) AiFeatureStoreIamMemberOutput
}

func (*AiFeatureStoreIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreIamMember)(nil)).Elem()
}

func (i *AiFeatureStoreIamMember) ToAiFeatureStoreIamMemberOutput() AiFeatureStoreIamMemberOutput {
	return i.ToAiFeatureStoreIamMemberOutputWithContext(context.Background())
}

func (i *AiFeatureStoreIamMember) ToAiFeatureStoreIamMemberOutputWithContext(ctx context.Context) AiFeatureStoreIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamMemberOutput)
}

// AiFeatureStoreIamMemberArrayInput is an input type that accepts AiFeatureStoreIamMemberArray and AiFeatureStoreIamMemberArrayOutput values.
// You can construct a concrete instance of `AiFeatureStoreIamMemberArrayInput` via:
//
//	AiFeatureStoreIamMemberArray{ AiFeatureStoreIamMemberArgs{...} }
type AiFeatureStoreIamMemberArrayInput interface {
	pulumi.Input

	ToAiFeatureStoreIamMemberArrayOutput() AiFeatureStoreIamMemberArrayOutput
	ToAiFeatureStoreIamMemberArrayOutputWithContext(context.Context) AiFeatureStoreIamMemberArrayOutput
}

type AiFeatureStoreIamMemberArray []AiFeatureStoreIamMemberInput

func (AiFeatureStoreIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreIamMember)(nil)).Elem()
}

func (i AiFeatureStoreIamMemberArray) ToAiFeatureStoreIamMemberArrayOutput() AiFeatureStoreIamMemberArrayOutput {
	return i.ToAiFeatureStoreIamMemberArrayOutputWithContext(context.Background())
}

func (i AiFeatureStoreIamMemberArray) ToAiFeatureStoreIamMemberArrayOutputWithContext(ctx context.Context) AiFeatureStoreIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamMemberArrayOutput)
}

// AiFeatureStoreIamMemberMapInput is an input type that accepts AiFeatureStoreIamMemberMap and AiFeatureStoreIamMemberMapOutput values.
// You can construct a concrete instance of `AiFeatureStoreIamMemberMapInput` via:
//
//	AiFeatureStoreIamMemberMap{ "key": AiFeatureStoreIamMemberArgs{...} }
type AiFeatureStoreIamMemberMapInput interface {
	pulumi.Input

	ToAiFeatureStoreIamMemberMapOutput() AiFeatureStoreIamMemberMapOutput
	ToAiFeatureStoreIamMemberMapOutputWithContext(context.Context) AiFeatureStoreIamMemberMapOutput
}

type AiFeatureStoreIamMemberMap map[string]AiFeatureStoreIamMemberInput

func (AiFeatureStoreIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreIamMember)(nil)).Elem()
}

func (i AiFeatureStoreIamMemberMap) ToAiFeatureStoreIamMemberMapOutput() AiFeatureStoreIamMemberMapOutput {
	return i.ToAiFeatureStoreIamMemberMapOutputWithContext(context.Background())
}

func (i AiFeatureStoreIamMemberMap) ToAiFeatureStoreIamMemberMapOutputWithContext(ctx context.Context) AiFeatureStoreIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamMemberMapOutput)
}

type AiFeatureStoreIamMemberOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreIamMember)(nil)).Elem()
}

func (o AiFeatureStoreIamMemberOutput) ToAiFeatureStoreIamMemberOutput() AiFeatureStoreIamMemberOutput {
	return o
}

func (o AiFeatureStoreIamMemberOutput) ToAiFeatureStoreIamMemberOutputWithContext(ctx context.Context) AiFeatureStoreIamMemberOutput {
	return o
}

func (o AiFeatureStoreIamMemberOutput) Condition() AiFeatureStoreIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamMember) AiFeatureStoreIamMemberConditionPtrOutput { return v.Condition }).(AiFeatureStoreIamMemberConditionPtrOutput)
}

func (o AiFeatureStoreIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AiFeatureStoreIamMemberOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamMember) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o AiFeatureStoreIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiFeatureStoreIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the dataset. eg us-central1
func (o AiFeatureStoreIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AiFeatureStoreIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AiFeatureStoreIamMemberArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreIamMember)(nil)).Elem()
}

func (o AiFeatureStoreIamMemberArrayOutput) ToAiFeatureStoreIamMemberArrayOutput() AiFeatureStoreIamMemberArrayOutput {
	return o
}

func (o AiFeatureStoreIamMemberArrayOutput) ToAiFeatureStoreIamMemberArrayOutputWithContext(ctx context.Context) AiFeatureStoreIamMemberArrayOutput {
	return o
}

func (o AiFeatureStoreIamMemberArrayOutput) Index(i pulumi.IntInput) AiFeatureStoreIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureStoreIamMember {
		return vs[0].([]*AiFeatureStoreIamMember)[vs[1].(int)]
	}).(AiFeatureStoreIamMemberOutput)
}

type AiFeatureStoreIamMemberMapOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreIamMember)(nil)).Elem()
}

func (o AiFeatureStoreIamMemberMapOutput) ToAiFeatureStoreIamMemberMapOutput() AiFeatureStoreIamMemberMapOutput {
	return o
}

func (o AiFeatureStoreIamMemberMapOutput) ToAiFeatureStoreIamMemberMapOutputWithContext(ctx context.Context) AiFeatureStoreIamMemberMapOutput {
	return o
}

func (o AiFeatureStoreIamMemberMapOutput) MapIndex(k pulumi.StringInput) AiFeatureStoreIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureStoreIamMember {
		return vs[0].(map[string]*AiFeatureStoreIamMember)[vs[1].(string)]
	}).(AiFeatureStoreIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamMemberInput)(nil)).Elem(), &AiFeatureStoreIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamMemberArrayInput)(nil)).Elem(), AiFeatureStoreIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamMemberMapInput)(nil)).Elem(), AiFeatureStoreIamMemberMap{})
	pulumi.RegisterOutputType(AiFeatureStoreIamMemberOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreIamMemberArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreIamMemberMapOutput{})
}
