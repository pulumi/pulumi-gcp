// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vertex AI RAG Engine lets you scale your RagManagedDb instance based on your usage and performance requirements using a choice of two tiers, and optionally, lets you delete your Vertex AI RAG Engine data using a third tier. The tier is a project-level setting that's available in the RagEngineConfig resource that impacts all RAG corpora using RagManagedDb. The following tiers are available in RagEngineConfig: Basic, Scaled and Unprovisioned.
//
// To get more information about RagEngineConfig, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/reference/rest/v1/RagEngineConfig)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/rag-engine/understanding-ragmanageddb)
//
// ## Example Usage
//
// ## Import
//
// RagEngineConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/ragEngineConfig`
//
// * `{{project}}/{{region}}`
//
// * `{{region}}`
//
// When using the `pulumi import` command, RagEngineConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vertex/aiRagEngineConfig:AiRagEngineConfig default projects/{{project}}/locations/{{region}}/ragEngineConfig
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiRagEngineConfig:AiRagEngineConfig default {{project}}/{{region}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiRagEngineConfig:AiRagEngineConfig default {{region}}
// ```
type AiRagEngineConfig struct {
	pulumi.CustomResourceState

	// The resource name of the Dataset. This value is set by Google.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. The config of the RagManagedDb used by RagEngine.
	// Structure is documented below.
	RagManagedDbConfig AiRagEngineConfigRagManagedDbConfigOutput `pulumi:"ragManagedDbConfig"`
	// The region of the RagEngineConfig. eg us-central1
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewAiRagEngineConfig registers a new resource with the given unique name, arguments, and options.
func NewAiRagEngineConfig(ctx *pulumi.Context,
	name string, args *AiRagEngineConfigArgs, opts ...pulumi.ResourceOption) (*AiRagEngineConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RagManagedDbConfig == nil {
		return nil, errors.New("invalid value for required argument 'RagManagedDbConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiRagEngineConfig
	err := ctx.RegisterResource("gcp:vertex/aiRagEngineConfig:AiRagEngineConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiRagEngineConfig gets an existing AiRagEngineConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiRagEngineConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiRagEngineConfigState, opts ...pulumi.ResourceOption) (*AiRagEngineConfig, error) {
	var resource AiRagEngineConfig
	err := ctx.ReadResource("gcp:vertex/aiRagEngineConfig:AiRagEngineConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiRagEngineConfig resources.
type aiRagEngineConfigState struct {
	// The resource name of the Dataset. This value is set by Google.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. The config of the RagManagedDb used by RagEngine.
	// Structure is documented below.
	RagManagedDbConfig *AiRagEngineConfigRagManagedDbConfig `pulumi:"ragManagedDbConfig"`
	// The region of the RagEngineConfig. eg us-central1
	Region *string `pulumi:"region"`
}

type AiRagEngineConfigState struct {
	// The resource name of the Dataset. This value is set by Google.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. The config of the RagManagedDb used by RagEngine.
	// Structure is documented below.
	RagManagedDbConfig AiRagEngineConfigRagManagedDbConfigPtrInput
	// The region of the RagEngineConfig. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiRagEngineConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiRagEngineConfigState)(nil)).Elem()
}

type aiRagEngineConfigArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. The config of the RagManagedDb used by RagEngine.
	// Structure is documented below.
	RagManagedDbConfig AiRagEngineConfigRagManagedDbConfig `pulumi:"ragManagedDbConfig"`
	// The region of the RagEngineConfig. eg us-central1
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiRagEngineConfig resource.
type AiRagEngineConfigArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. The config of the RagManagedDb used by RagEngine.
	// Structure is documented below.
	RagManagedDbConfig AiRagEngineConfigRagManagedDbConfigInput
	// The region of the RagEngineConfig. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiRagEngineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiRagEngineConfigArgs)(nil)).Elem()
}

type AiRagEngineConfigInput interface {
	pulumi.Input

	ToAiRagEngineConfigOutput() AiRagEngineConfigOutput
	ToAiRagEngineConfigOutputWithContext(ctx context.Context) AiRagEngineConfigOutput
}

func (*AiRagEngineConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AiRagEngineConfig)(nil)).Elem()
}

func (i *AiRagEngineConfig) ToAiRagEngineConfigOutput() AiRagEngineConfigOutput {
	return i.ToAiRagEngineConfigOutputWithContext(context.Background())
}

func (i *AiRagEngineConfig) ToAiRagEngineConfigOutputWithContext(ctx context.Context) AiRagEngineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiRagEngineConfigOutput)
}

// AiRagEngineConfigArrayInput is an input type that accepts AiRagEngineConfigArray and AiRagEngineConfigArrayOutput values.
// You can construct a concrete instance of `AiRagEngineConfigArrayInput` via:
//
//	AiRagEngineConfigArray{ AiRagEngineConfigArgs{...} }
type AiRagEngineConfigArrayInput interface {
	pulumi.Input

	ToAiRagEngineConfigArrayOutput() AiRagEngineConfigArrayOutput
	ToAiRagEngineConfigArrayOutputWithContext(context.Context) AiRagEngineConfigArrayOutput
}

type AiRagEngineConfigArray []AiRagEngineConfigInput

func (AiRagEngineConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiRagEngineConfig)(nil)).Elem()
}

func (i AiRagEngineConfigArray) ToAiRagEngineConfigArrayOutput() AiRagEngineConfigArrayOutput {
	return i.ToAiRagEngineConfigArrayOutputWithContext(context.Background())
}

func (i AiRagEngineConfigArray) ToAiRagEngineConfigArrayOutputWithContext(ctx context.Context) AiRagEngineConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiRagEngineConfigArrayOutput)
}

// AiRagEngineConfigMapInput is an input type that accepts AiRagEngineConfigMap and AiRagEngineConfigMapOutput values.
// You can construct a concrete instance of `AiRagEngineConfigMapInput` via:
//
//	AiRagEngineConfigMap{ "key": AiRagEngineConfigArgs{...} }
type AiRagEngineConfigMapInput interface {
	pulumi.Input

	ToAiRagEngineConfigMapOutput() AiRagEngineConfigMapOutput
	ToAiRagEngineConfigMapOutputWithContext(context.Context) AiRagEngineConfigMapOutput
}

type AiRagEngineConfigMap map[string]AiRagEngineConfigInput

func (AiRagEngineConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiRagEngineConfig)(nil)).Elem()
}

func (i AiRagEngineConfigMap) ToAiRagEngineConfigMapOutput() AiRagEngineConfigMapOutput {
	return i.ToAiRagEngineConfigMapOutputWithContext(context.Background())
}

func (i AiRagEngineConfigMap) ToAiRagEngineConfigMapOutputWithContext(ctx context.Context) AiRagEngineConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiRagEngineConfigMapOutput)
}

type AiRagEngineConfigOutput struct{ *pulumi.OutputState }

func (AiRagEngineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiRagEngineConfig)(nil)).Elem()
}

func (o AiRagEngineConfigOutput) ToAiRagEngineConfigOutput() AiRagEngineConfigOutput {
	return o
}

func (o AiRagEngineConfigOutput) ToAiRagEngineConfigOutputWithContext(ctx context.Context) AiRagEngineConfigOutput {
	return o
}

// The resource name of the Dataset. This value is set by Google.
func (o AiRagEngineConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiRagEngineConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiRagEngineConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiRagEngineConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. The config of the RagManagedDb used by RagEngine.
// Structure is documented below.
func (o AiRagEngineConfigOutput) RagManagedDbConfig() AiRagEngineConfigRagManagedDbConfigOutput {
	return o.ApplyT(func(v *AiRagEngineConfig) AiRagEngineConfigRagManagedDbConfigOutput { return v.RagManagedDbConfig }).(AiRagEngineConfigRagManagedDbConfigOutput)
}

// The region of the RagEngineConfig. eg us-central1
func (o AiRagEngineConfigOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiRagEngineConfig) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type AiRagEngineConfigArrayOutput struct{ *pulumi.OutputState }

func (AiRagEngineConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiRagEngineConfig)(nil)).Elem()
}

func (o AiRagEngineConfigArrayOutput) ToAiRagEngineConfigArrayOutput() AiRagEngineConfigArrayOutput {
	return o
}

func (o AiRagEngineConfigArrayOutput) ToAiRagEngineConfigArrayOutputWithContext(ctx context.Context) AiRagEngineConfigArrayOutput {
	return o
}

func (o AiRagEngineConfigArrayOutput) Index(i pulumi.IntInput) AiRagEngineConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiRagEngineConfig {
		return vs[0].([]*AiRagEngineConfig)[vs[1].(int)]
	}).(AiRagEngineConfigOutput)
}

type AiRagEngineConfigMapOutput struct{ *pulumi.OutputState }

func (AiRagEngineConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiRagEngineConfig)(nil)).Elem()
}

func (o AiRagEngineConfigMapOutput) ToAiRagEngineConfigMapOutput() AiRagEngineConfigMapOutput {
	return o
}

func (o AiRagEngineConfigMapOutput) ToAiRagEngineConfigMapOutputWithContext(ctx context.Context) AiRagEngineConfigMapOutput {
	return o
}

func (o AiRagEngineConfigMapOutput) MapIndex(k pulumi.StringInput) AiRagEngineConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiRagEngineConfig {
		return vs[0].(map[string]*AiRagEngineConfig)[vs[1].(string)]
	}).(AiRagEngineConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiRagEngineConfigInput)(nil)).Elem(), &AiRagEngineConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiRagEngineConfigArrayInput)(nil)).Elem(), AiRagEngineConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiRagEngineConfigMapInput)(nil)).Elem(), AiRagEngineConfigMap{})
	pulumi.RegisterOutputType(AiRagEngineConfigOutput{})
	pulumi.RegisterOutputType(AiRagEngineConfigArrayOutput{})
	pulumi.RegisterOutputType(AiRagEngineConfigMapOutput{})
}
