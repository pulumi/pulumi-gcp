// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* {{featurestore}}/entityTypes/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Vertex AI featurestoreentitytype IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding editor {{featurestore}}/entityTypes/{{featurestore_entitytype}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AiFeatureStoreEntityTypeIamBinding struct {
	pulumi.CustomResourceState

	Condition AiFeatureStoreEntityTypeIamBindingConditionPtrOutput `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Entitytype pulumi.StringOutput `pulumi:"entitytype"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
	Featurestore pulumi.StringOutput      `pulumi:"featurestore"`
	Members      pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewAiFeatureStoreEntityTypeIamBinding registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureStoreEntityTypeIamBinding(ctx *pulumi.Context,
	name string, args *AiFeatureStoreEntityTypeIamBindingArgs, opts ...pulumi.ResourceOption) (*AiFeatureStoreEntityTypeIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entitytype == nil {
		return nil, errors.New("invalid value for required argument 'Entitytype'")
	}
	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AiFeatureStoreEntityTypeIamBinding
	err := ctx.RegisterResource("gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureStoreEntityTypeIamBinding gets an existing AiFeatureStoreEntityTypeIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureStoreEntityTypeIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureStoreEntityTypeIamBindingState, opts ...pulumi.ResourceOption) (*AiFeatureStoreEntityTypeIamBinding, error) {
	var resource AiFeatureStoreEntityTypeIamBinding
	err := ctx.ReadResource("gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureStoreEntityTypeIamBinding resources.
type aiFeatureStoreEntityTypeIamBindingState struct {
	Condition *AiFeatureStoreEntityTypeIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Entitytype *string `pulumi:"entitytype"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
	Featurestore *string  `pulumi:"featurestore"`
	Members      []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type AiFeatureStoreEntityTypeIamBindingState struct {
	Condition AiFeatureStoreEntityTypeIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Entitytype pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
	Featurestore pulumi.StringPtrInput
	Members      pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (AiFeatureStoreEntityTypeIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreEntityTypeIamBindingState)(nil)).Elem()
}

type aiFeatureStoreEntityTypeIamBindingArgs struct {
	Condition *AiFeatureStoreEntityTypeIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Entitytype string `pulumi:"entitytype"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
	Featurestore string   `pulumi:"featurestore"`
	Members      []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a AiFeatureStoreEntityTypeIamBinding resource.
type AiFeatureStoreEntityTypeIamBindingArgs struct {
	Condition AiFeatureStoreEntityTypeIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Entitytype pulumi.StringInput
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
	Featurestore pulumi.StringInput
	Members      pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (AiFeatureStoreEntityTypeIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreEntityTypeIamBindingArgs)(nil)).Elem()
}

type AiFeatureStoreEntityTypeIamBindingInput interface {
	pulumi.Input

	ToAiFeatureStoreEntityTypeIamBindingOutput() AiFeatureStoreEntityTypeIamBindingOutput
	ToAiFeatureStoreEntityTypeIamBindingOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeIamBindingOutput
}

func (*AiFeatureStoreEntityTypeIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreEntityTypeIamBinding)(nil)).Elem()
}

func (i *AiFeatureStoreEntityTypeIamBinding) ToAiFeatureStoreEntityTypeIamBindingOutput() AiFeatureStoreEntityTypeIamBindingOutput {
	return i.ToAiFeatureStoreEntityTypeIamBindingOutputWithContext(context.Background())
}

func (i *AiFeatureStoreEntityTypeIamBinding) ToAiFeatureStoreEntityTypeIamBindingOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreEntityTypeIamBindingOutput)
}

// AiFeatureStoreEntityTypeIamBindingArrayInput is an input type that accepts AiFeatureStoreEntityTypeIamBindingArray and AiFeatureStoreEntityTypeIamBindingArrayOutput values.
// You can construct a concrete instance of `AiFeatureStoreEntityTypeIamBindingArrayInput` via:
//
//	AiFeatureStoreEntityTypeIamBindingArray{ AiFeatureStoreEntityTypeIamBindingArgs{...} }
type AiFeatureStoreEntityTypeIamBindingArrayInput interface {
	pulumi.Input

	ToAiFeatureStoreEntityTypeIamBindingArrayOutput() AiFeatureStoreEntityTypeIamBindingArrayOutput
	ToAiFeatureStoreEntityTypeIamBindingArrayOutputWithContext(context.Context) AiFeatureStoreEntityTypeIamBindingArrayOutput
}

type AiFeatureStoreEntityTypeIamBindingArray []AiFeatureStoreEntityTypeIamBindingInput

func (AiFeatureStoreEntityTypeIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreEntityTypeIamBinding)(nil)).Elem()
}

func (i AiFeatureStoreEntityTypeIamBindingArray) ToAiFeatureStoreEntityTypeIamBindingArrayOutput() AiFeatureStoreEntityTypeIamBindingArrayOutput {
	return i.ToAiFeatureStoreEntityTypeIamBindingArrayOutputWithContext(context.Background())
}

func (i AiFeatureStoreEntityTypeIamBindingArray) ToAiFeatureStoreEntityTypeIamBindingArrayOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreEntityTypeIamBindingArrayOutput)
}

// AiFeatureStoreEntityTypeIamBindingMapInput is an input type that accepts AiFeatureStoreEntityTypeIamBindingMap and AiFeatureStoreEntityTypeIamBindingMapOutput values.
// You can construct a concrete instance of `AiFeatureStoreEntityTypeIamBindingMapInput` via:
//
//	AiFeatureStoreEntityTypeIamBindingMap{ "key": AiFeatureStoreEntityTypeIamBindingArgs{...} }
type AiFeatureStoreEntityTypeIamBindingMapInput interface {
	pulumi.Input

	ToAiFeatureStoreEntityTypeIamBindingMapOutput() AiFeatureStoreEntityTypeIamBindingMapOutput
	ToAiFeatureStoreEntityTypeIamBindingMapOutputWithContext(context.Context) AiFeatureStoreEntityTypeIamBindingMapOutput
}

type AiFeatureStoreEntityTypeIamBindingMap map[string]AiFeatureStoreEntityTypeIamBindingInput

func (AiFeatureStoreEntityTypeIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreEntityTypeIamBinding)(nil)).Elem()
}

func (i AiFeatureStoreEntityTypeIamBindingMap) ToAiFeatureStoreEntityTypeIamBindingMapOutput() AiFeatureStoreEntityTypeIamBindingMapOutput {
	return i.ToAiFeatureStoreEntityTypeIamBindingMapOutputWithContext(context.Background())
}

func (i AiFeatureStoreEntityTypeIamBindingMap) ToAiFeatureStoreEntityTypeIamBindingMapOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreEntityTypeIamBindingMapOutput)
}

type AiFeatureStoreEntityTypeIamBindingOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreEntityTypeIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreEntityTypeIamBinding)(nil)).Elem()
}

func (o AiFeatureStoreEntityTypeIamBindingOutput) ToAiFeatureStoreEntityTypeIamBindingOutput() AiFeatureStoreEntityTypeIamBindingOutput {
	return o
}

func (o AiFeatureStoreEntityTypeIamBindingOutput) ToAiFeatureStoreEntityTypeIamBindingOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeIamBindingOutput {
	return o
}

func (o AiFeatureStoreEntityTypeIamBindingOutput) Condition() AiFeatureStoreEntityTypeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityTypeIamBinding) AiFeatureStoreEntityTypeIamBindingConditionPtrOutput {
		return v.Condition
	}).(AiFeatureStoreEntityTypeIamBindingConditionPtrOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AiFeatureStoreEntityTypeIamBindingOutput) Entitytype() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityTypeIamBinding) pulumi.StringOutput { return v.Entitytype }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o AiFeatureStoreEntityTypeIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityTypeIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
func (o AiFeatureStoreEntityTypeIamBindingOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityTypeIamBinding) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o AiFeatureStoreEntityTypeIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityTypeIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. Only one
// `vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o AiFeatureStoreEntityTypeIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityTypeIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AiFeatureStoreEntityTypeIamBindingArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreEntityTypeIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreEntityTypeIamBinding)(nil)).Elem()
}

func (o AiFeatureStoreEntityTypeIamBindingArrayOutput) ToAiFeatureStoreEntityTypeIamBindingArrayOutput() AiFeatureStoreEntityTypeIamBindingArrayOutput {
	return o
}

func (o AiFeatureStoreEntityTypeIamBindingArrayOutput) ToAiFeatureStoreEntityTypeIamBindingArrayOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeIamBindingArrayOutput {
	return o
}

func (o AiFeatureStoreEntityTypeIamBindingArrayOutput) Index(i pulumi.IntInput) AiFeatureStoreEntityTypeIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureStoreEntityTypeIamBinding {
		return vs[0].([]*AiFeatureStoreEntityTypeIamBinding)[vs[1].(int)]
	}).(AiFeatureStoreEntityTypeIamBindingOutput)
}

type AiFeatureStoreEntityTypeIamBindingMapOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreEntityTypeIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreEntityTypeIamBinding)(nil)).Elem()
}

func (o AiFeatureStoreEntityTypeIamBindingMapOutput) ToAiFeatureStoreEntityTypeIamBindingMapOutput() AiFeatureStoreEntityTypeIamBindingMapOutput {
	return o
}

func (o AiFeatureStoreEntityTypeIamBindingMapOutput) ToAiFeatureStoreEntityTypeIamBindingMapOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeIamBindingMapOutput {
	return o
}

func (o AiFeatureStoreEntityTypeIamBindingMapOutput) MapIndex(k pulumi.StringInput) AiFeatureStoreEntityTypeIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureStoreEntityTypeIamBinding {
		return vs[0].(map[string]*AiFeatureStoreEntityTypeIamBinding)[vs[1].(string)]
	}).(AiFeatureStoreEntityTypeIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreEntityTypeIamBindingInput)(nil)).Elem(), &AiFeatureStoreEntityTypeIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreEntityTypeIamBindingArrayInput)(nil)).Elem(), AiFeatureStoreEntityTypeIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreEntityTypeIamBindingMapInput)(nil)).Elem(), AiFeatureStoreEntityTypeIamBindingMap{})
	pulumi.RegisterOutputType(AiFeatureStoreEntityTypeIamBindingOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreEntityTypeIamBindingArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreEntityTypeIamBindingMapOutput{})
}
