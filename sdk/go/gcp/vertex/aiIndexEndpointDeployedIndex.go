// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An endpoint indexes are deployed into. An index endpoint can have multiple deployed indexes.
//
// To get more information about IndexEndpointDeployedIndex, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex)
//
// ## Example Usage
//
// ### Vertex Ai Index Endpoint Deployed Index Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("bucket-name"),
//				Location:                 pulumi.String("us-central1"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			index, err := vertex.NewAiIndex(ctx, "index", &vertex.AiIndexArgs{
//				Region:            pulumi.String("us-central1"),
//				DisplayName:       pulumi.String("test-index"),
//				Description:       pulumi.String("index for test"),
//				IndexUpdateMethod: pulumi.String("BATCH_UPDATE"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Metadata: &vertex.AiIndexMetadataArgs{
//					ContentsDeltaUri: bucket.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("gs://%v/contents", name), nil
//					}).(pulumi.StringOutput),
//					Config: &vertex.AiIndexMetadataConfigArgs{
//						Dimensions:                pulumi.Int(2),
//						ApproximateNeighborsCount: pulumi.Int(150),
//						ShardSize:                 pulumi.String("SHARD_SIZE_SMALL"),
//						DistanceMeasureType:       pulumi.String("DOT_PRODUCT_DISTANCE"),
//						AlgorithmConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigArgs{
//							TreeAhConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs{
//								LeafNodeEmbeddingCount:   pulumi.Int(500),
//								LeafNodesToSearchPercent: pulumi.Int(7),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			vertexNetwork, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name: "network-name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			vertexIndexEndpointDeployed, err := vertex.NewAiIndexEndpoint(ctx, "vertex_index_endpoint_deployed", &vertex.AiIndexEndpointArgs{
//				DisplayName: pulumi.String("sample-endpoint"),
//				Description: pulumi.String("A sample vertex endpoint"),
//				Region:      pulumi.String("us-central1"),
//				Network:     pulumi.Sprintf("projects/%v/global/networks/%v", project.Number, vertexNetwork.Name),
//				Labels: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
//				AccountId: pulumi.String("vertex-sa"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiIndexEndpointDeployedIndex(ctx, "basic_deployed_index", &vertex.AiIndexEndpointDeployedIndexArgs{
//				DeployedIndexId:     pulumi.String("deployed_index_id"),
//				DisplayName:         pulumi.String("vertex-deployed-index"),
//				Region:              pulumi.String("us-central1"),
//				Index:               index.ID(),
//				IndexEndpoint:       vertexIndexEndpointDeployed.ID(),
//				EnableAccessLogging: pulumi.Bool(false),
//				ReservedIpRanges: pulumi.StringArray{
//					pulumi.String("vertex-ai-range"),
//				},
//				DeployedIndexAuthConfig: &vertex.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs{
//					AuthProvider: &vertex.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs{
//						Audiences: pulumi.StringArray{
//							pulumi.String("123456-my-app"),
//						},
//						AllowedIssuers: pulumi.StringArray{
//							sa.Email,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// The sample data comes from the following link:
//			// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
//			_, err = storage.NewBucketObject(ctx, "data", &storage.BucketObjectArgs{
//				Name:    pulumi.String("contents/data.json"),
//				Bucket:  bucket.Name,
//				Content: pulumi.String("{\"id\": \"42\", \"embedding\": [0.5, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"cat\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"feline\"]}]}\n{\"id\": \"43\", \"embedding\": [0.6, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"dog\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"canine\"]}]}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Vertex Ai Index Endpoint Deployed Index Basic Two
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
//				AccountId: pulumi.String("vertex-sa"),
//			})
//			if err != nil {
//				return err
//			}
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("bucket-name"),
//				Location:                 pulumi.String("us-central1"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			index, err := vertex.NewAiIndex(ctx, "index", &vertex.AiIndexArgs{
//				Region:            pulumi.String("us-central1"),
//				DisplayName:       pulumi.String("test-index"),
//				Description:       pulumi.String("index for test"),
//				IndexUpdateMethod: pulumi.String("BATCH_UPDATE"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Metadata: &vertex.AiIndexMetadataArgs{
//					ContentsDeltaUri: bucket.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("gs://%v/contents", name), nil
//					}).(pulumi.StringOutput),
//					Config: &vertex.AiIndexMetadataConfigArgs{
//						Dimensions:                pulumi.Int(2),
//						ApproximateNeighborsCount: pulumi.Int(150),
//						ShardSize:                 pulumi.String("SHARD_SIZE_SMALL"),
//						DistanceMeasureType:       pulumi.String("DOT_PRODUCT_DISTANCE"),
//						AlgorithmConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigArgs{
//							TreeAhConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs{
//								LeafNodeEmbeddingCount:   pulumi.Int(500),
//								LeafNodesToSearchPercent: pulumi.Int(7),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			vertexNetwork, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name: "network-name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			vertexIndexEndpointDeployed, err := vertex.NewAiIndexEndpoint(ctx, "vertex_index_endpoint_deployed", &vertex.AiIndexEndpointArgs{
//				DisplayName: pulumi.String("sample-endpoint"),
//				Description: pulumi.String("A sample vertex endpoint"),
//				Region:      pulumi.String("us-central1"),
//				Network:     pulumi.Sprintf("projects/%v/global/networks/%v", project.Number, vertexNetwork.Name),
//				Labels: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiIndexEndpointDeployedIndex(ctx, "basic_deployed_index", &vertex.AiIndexEndpointDeployedIndexArgs{
//				DeployedIndexId: pulumi.String("deployed_index_id"),
//				DisplayName:     pulumi.String("vertex-deployed-index"),
//				Region:          pulumi.String("us-central1"),
//				Index:           index.ID(),
//				IndexEndpoint:   vertexIndexEndpointDeployed.ID(),
//				ReservedIpRanges: pulumi.StringArray{
//					pulumi.String("vertex-ai-range"),
//				},
//				EnableAccessLogging: pulumi.Bool(false),
//				DeployedIndexAuthConfig: &vertex.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs{
//					AuthProvider: &vertex.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs{
//						Audiences: pulumi.StringArray{
//							pulumi.String("123456-my-app"),
//						},
//						AllowedIssuers: pulumi.StringArray{
//							sa.Email,
//						},
//					},
//				},
//				AutomaticResources: &vertex.AiIndexEndpointDeployedIndexAutomaticResourcesArgs{
//					MaxReplicaCount: pulumi.Int(4),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// The sample data comes from the following link:
//			// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
//			_, err = storage.NewBucketObject(ctx, "data", &storage.BucketObjectArgs{
//				Name:    pulumi.String("contents/data.json"),
//				Bucket:  bucket.Name,
//				Content: pulumi.String("{\"id\": \"42\", \"embedding\": [0.5, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"cat\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"feline\"]}]}\n{\"id\": \"43\", \"embedding\": [0.6, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"dog\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"canine\"]}]}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IndexEndpointDeployedIndex can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/indexEndpoints/{{index_endpoint}}/deployedIndex/{{deployed_index_id}}`
//
// * `{{project}}/{{region}}/{{index_endpoint}}/{{deployed_index_id}}`
//
// * `{{region}}/{{index_endpoint}}/{{deployed_index_id}}`
//
// * `{{index_endpoint}}/{{deployed_index_id}}`
//
// When using the `pulumi import` command, IndexEndpointDeployedIndex can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default projects/{{project}}/locations/{{region}}/indexEndpoints/{{index_endpoint}}/deployedIndex/{{deployed_index_id}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{project}}/{{region}}/{{index_endpoint}}/{{deployed_index_id}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{region}}/{{index_endpoint}}/{{deployed_index_id}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{index_endpoint}}/{{deployed_index_id}}
// ```
type AiIndexEndpointDeployedIndex struct {
	pulumi.CustomResourceState

	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
	// Structure is documented below.
	AutomaticResources AiIndexEndpointDeployedIndexAutomaticResourcesOutput `pulumi:"automaticResources"`
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
	// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
	// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
	// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
	// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	// Structure is documented below.
	DedicatedResources AiIndexEndpointDeployedIndexDedicatedResourcesPtrOutput `pulumi:"dedicatedResources"`
	// If set, the authentication is enabled for the private endpoint.
	// Structure is documented below.
	DeployedIndexAuthConfig AiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrOutput `pulumi:"deployedIndexAuthConfig"`
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId pulumi.StringOutput `pulumi:"deployedIndexId"`
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
	// Creating deploymentGroups with reservedIpRanges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deploymentGroup (except 'default') can only be used with the same reservedIpRanges which means if the deploymentGroup has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup pulumi.StringPtrOutput `pulumi:"deploymentGroup"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging pulumi.BoolPtrOutput `pulumi:"enableAccessLogging"`
	// The name of the Index this is the deployment of.
	Index pulumi.StringOutput `pulumi:"index"`
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint pulumi.StringOutput `pulumi:"indexEndpoint"`
	// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time) of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations) the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal or before this sync time are contained in this DeployedIndex.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	IndexSyncTime pulumi.StringOutput `pulumi:"indexSyncTime"`
	// The name of the DeployedIndex resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services access. This field is populated if [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network) is configured.
	// Structure is documented below.
	PrivateEndpoints AiIndexEndpointDeployedIndexPrivateEndpointArrayOutput `pulumi:"privateEndpoints"`
	// The region of the index endpoint deployment. eg us-central1
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
	// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
	// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
	// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges pulumi.StringArrayOutput `pulumi:"reservedIpRanges"`
}

// NewAiIndexEndpointDeployedIndex registers a new resource with the given unique name, arguments, and options.
func NewAiIndexEndpointDeployedIndex(ctx *pulumi.Context,
	name string, args *AiIndexEndpointDeployedIndexArgs, opts ...pulumi.ResourceOption) (*AiIndexEndpointDeployedIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeployedIndexId == nil {
		return nil, errors.New("invalid value for required argument 'DeployedIndexId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.IndexEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'IndexEndpoint'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiIndexEndpointDeployedIndex
	err := ctx.RegisterResource("gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiIndexEndpointDeployedIndex gets an existing AiIndexEndpointDeployedIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiIndexEndpointDeployedIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiIndexEndpointDeployedIndexState, opts ...pulumi.ResourceOption) (*AiIndexEndpointDeployedIndex, error) {
	var resource AiIndexEndpointDeployedIndex
	err := ctx.ReadResource("gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiIndexEndpointDeployedIndex resources.
type aiIndexEndpointDeployedIndexState struct {
	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
	// Structure is documented below.
	AutomaticResources *AiIndexEndpointDeployedIndexAutomaticResources `pulumi:"automaticResources"`
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
	// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
	// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
	// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
	// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	// Structure is documented below.
	DedicatedResources *AiIndexEndpointDeployedIndexDedicatedResources `pulumi:"dedicatedResources"`
	// If set, the authentication is enabled for the private endpoint.
	// Structure is documented below.
	DeployedIndexAuthConfig *AiIndexEndpointDeployedIndexDeployedIndexAuthConfig `pulumi:"deployedIndexAuthConfig"`
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId *string `pulumi:"deployedIndexId"`
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
	// Creating deploymentGroups with reservedIpRanges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deploymentGroup (except 'default') can only be used with the same reservedIpRanges which means if the deploymentGroup has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup *string `pulumi:"deploymentGroup"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName *string `pulumi:"displayName"`
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging *bool `pulumi:"enableAccessLogging"`
	// The name of the Index this is the deployment of.
	Index *string `pulumi:"index"`
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint *string `pulumi:"indexEndpoint"`
	// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time) of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations) the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal or before this sync time are contained in this DeployedIndex.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	IndexSyncTime *string `pulumi:"indexSyncTime"`
	// The name of the DeployedIndex resource.
	Name *string `pulumi:"name"`
	// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services access. This field is populated if [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network) is configured.
	// Structure is documented below.
	PrivateEndpoints []AiIndexEndpointDeployedIndexPrivateEndpoint `pulumi:"privateEndpoints"`
	// The region of the index endpoint deployment. eg us-central1
	Region *string `pulumi:"region"`
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
	// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
	// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
	// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges []string `pulumi:"reservedIpRanges"`
}

type AiIndexEndpointDeployedIndexState struct {
	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
	// Structure is documented below.
	AutomaticResources AiIndexEndpointDeployedIndexAutomaticResourcesPtrInput
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
	// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
	// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
	// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
	// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	// Structure is documented below.
	DedicatedResources AiIndexEndpointDeployedIndexDedicatedResourcesPtrInput
	// If set, the authentication is enabled for the private endpoint.
	// Structure is documented below.
	DeployedIndexAuthConfig AiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrInput
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId pulumi.StringPtrInput
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
	// Creating deploymentGroups with reservedIpRanges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deploymentGroup (except 'default') can only be used with the same reservedIpRanges which means if the deploymentGroup has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup pulumi.StringPtrInput
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringPtrInput
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging pulumi.BoolPtrInput
	// The name of the Index this is the deployment of.
	Index pulumi.StringPtrInput
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint pulumi.StringPtrInput
	// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time) of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations) the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal or before this sync time are contained in this DeployedIndex.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	IndexSyncTime pulumi.StringPtrInput
	// The name of the DeployedIndex resource.
	Name pulumi.StringPtrInput
	// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services access. This field is populated if [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network) is configured.
	// Structure is documented below.
	PrivateEndpoints AiIndexEndpointDeployedIndexPrivateEndpointArrayInput
	// The region of the index endpoint deployment. eg us-central1
	Region pulumi.StringPtrInput
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
	// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
	// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
	// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges pulumi.StringArrayInput
}

func (AiIndexEndpointDeployedIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiIndexEndpointDeployedIndexState)(nil)).Elem()
}

type aiIndexEndpointDeployedIndexArgs struct {
	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
	// Structure is documented below.
	AutomaticResources *AiIndexEndpointDeployedIndexAutomaticResources `pulumi:"automaticResources"`
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
	// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
	// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
	// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
	// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	// Structure is documented below.
	DedicatedResources *AiIndexEndpointDeployedIndexDedicatedResources `pulumi:"dedicatedResources"`
	// If set, the authentication is enabled for the private endpoint.
	// Structure is documented below.
	DeployedIndexAuthConfig *AiIndexEndpointDeployedIndexDeployedIndexAuthConfig `pulumi:"deployedIndexAuthConfig"`
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId string `pulumi:"deployedIndexId"`
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
	// Creating deploymentGroups with reservedIpRanges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deploymentGroup (except 'default') can only be used with the same reservedIpRanges which means if the deploymentGroup has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup *string `pulumi:"deploymentGroup"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName *string `pulumi:"displayName"`
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging *bool `pulumi:"enableAccessLogging"`
	// The name of the Index this is the deployment of.
	Index string `pulumi:"index"`
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint string `pulumi:"indexEndpoint"`
	// The region of the index endpoint deployment. eg us-central1
	Region *string `pulumi:"region"`
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
	// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
	// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
	// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges []string `pulumi:"reservedIpRanges"`
}

// The set of arguments for constructing a AiIndexEndpointDeployedIndex resource.
type AiIndexEndpointDeployedIndexArgs struct {
	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
	// Structure is documented below.
	AutomaticResources AiIndexEndpointDeployedIndexAutomaticResourcesPtrInput
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
	// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
	// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
	// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
	// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	// Structure is documented below.
	DedicatedResources AiIndexEndpointDeployedIndexDedicatedResourcesPtrInput
	// If set, the authentication is enabled for the private endpoint.
	// Structure is documented below.
	DeployedIndexAuthConfig AiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrInput
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId pulumi.StringInput
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
	// Creating deploymentGroups with reservedIpRanges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deploymentGroup (except 'default') can only be used with the same reservedIpRanges which means if the deploymentGroup has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup pulumi.StringPtrInput
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringPtrInput
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging pulumi.BoolPtrInput
	// The name of the Index this is the deployment of.
	Index pulumi.StringInput
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint pulumi.StringInput
	// The region of the index endpoint deployment. eg us-central1
	Region pulumi.StringPtrInput
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
	// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
	// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
	// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges pulumi.StringArrayInput
}

func (AiIndexEndpointDeployedIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiIndexEndpointDeployedIndexArgs)(nil)).Elem()
}

type AiIndexEndpointDeployedIndexInput interface {
	pulumi.Input

	ToAiIndexEndpointDeployedIndexOutput() AiIndexEndpointDeployedIndexOutput
	ToAiIndexEndpointDeployedIndexOutputWithContext(ctx context.Context) AiIndexEndpointDeployedIndexOutput
}

func (*AiIndexEndpointDeployedIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**AiIndexEndpointDeployedIndex)(nil)).Elem()
}

func (i *AiIndexEndpointDeployedIndex) ToAiIndexEndpointDeployedIndexOutput() AiIndexEndpointDeployedIndexOutput {
	return i.ToAiIndexEndpointDeployedIndexOutputWithContext(context.Background())
}

func (i *AiIndexEndpointDeployedIndex) ToAiIndexEndpointDeployedIndexOutputWithContext(ctx context.Context) AiIndexEndpointDeployedIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiIndexEndpointDeployedIndexOutput)
}

// AiIndexEndpointDeployedIndexArrayInput is an input type that accepts AiIndexEndpointDeployedIndexArray and AiIndexEndpointDeployedIndexArrayOutput values.
// You can construct a concrete instance of `AiIndexEndpointDeployedIndexArrayInput` via:
//
//	AiIndexEndpointDeployedIndexArray{ AiIndexEndpointDeployedIndexArgs{...} }
type AiIndexEndpointDeployedIndexArrayInput interface {
	pulumi.Input

	ToAiIndexEndpointDeployedIndexArrayOutput() AiIndexEndpointDeployedIndexArrayOutput
	ToAiIndexEndpointDeployedIndexArrayOutputWithContext(context.Context) AiIndexEndpointDeployedIndexArrayOutput
}

type AiIndexEndpointDeployedIndexArray []AiIndexEndpointDeployedIndexInput

func (AiIndexEndpointDeployedIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiIndexEndpointDeployedIndex)(nil)).Elem()
}

func (i AiIndexEndpointDeployedIndexArray) ToAiIndexEndpointDeployedIndexArrayOutput() AiIndexEndpointDeployedIndexArrayOutput {
	return i.ToAiIndexEndpointDeployedIndexArrayOutputWithContext(context.Background())
}

func (i AiIndexEndpointDeployedIndexArray) ToAiIndexEndpointDeployedIndexArrayOutputWithContext(ctx context.Context) AiIndexEndpointDeployedIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiIndexEndpointDeployedIndexArrayOutput)
}

// AiIndexEndpointDeployedIndexMapInput is an input type that accepts AiIndexEndpointDeployedIndexMap and AiIndexEndpointDeployedIndexMapOutput values.
// You can construct a concrete instance of `AiIndexEndpointDeployedIndexMapInput` via:
//
//	AiIndexEndpointDeployedIndexMap{ "key": AiIndexEndpointDeployedIndexArgs{...} }
type AiIndexEndpointDeployedIndexMapInput interface {
	pulumi.Input

	ToAiIndexEndpointDeployedIndexMapOutput() AiIndexEndpointDeployedIndexMapOutput
	ToAiIndexEndpointDeployedIndexMapOutputWithContext(context.Context) AiIndexEndpointDeployedIndexMapOutput
}

type AiIndexEndpointDeployedIndexMap map[string]AiIndexEndpointDeployedIndexInput

func (AiIndexEndpointDeployedIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiIndexEndpointDeployedIndex)(nil)).Elem()
}

func (i AiIndexEndpointDeployedIndexMap) ToAiIndexEndpointDeployedIndexMapOutput() AiIndexEndpointDeployedIndexMapOutput {
	return i.ToAiIndexEndpointDeployedIndexMapOutputWithContext(context.Background())
}

func (i AiIndexEndpointDeployedIndexMap) ToAiIndexEndpointDeployedIndexMapOutputWithContext(ctx context.Context) AiIndexEndpointDeployedIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiIndexEndpointDeployedIndexMapOutput)
}

type AiIndexEndpointDeployedIndexOutput struct{ *pulumi.OutputState }

func (AiIndexEndpointDeployedIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiIndexEndpointDeployedIndex)(nil)).Elem()
}

func (o AiIndexEndpointDeployedIndexOutput) ToAiIndexEndpointDeployedIndexOutput() AiIndexEndpointDeployedIndexOutput {
	return o
}

func (o AiIndexEndpointDeployedIndexOutput) ToAiIndexEndpointDeployedIndexOutputWithContext(ctx context.Context) AiIndexEndpointDeployedIndexOutput {
	return o
}

// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
// Structure is documented below.
func (o AiIndexEndpointDeployedIndexOutput) AutomaticResources() AiIndexEndpointDeployedIndexAutomaticResourcesOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) AiIndexEndpointDeployedIndexAutomaticResourcesOutput {
		return v.AutomaticResources
	}).(AiIndexEndpointDeployedIndexAutomaticResourcesOutput)
}

// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiIndexEndpointDeployedIndexOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
// Structure is documented below.
func (o AiIndexEndpointDeployedIndexOutput) DedicatedResources() AiIndexEndpointDeployedIndexDedicatedResourcesPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) AiIndexEndpointDeployedIndexDedicatedResourcesPtrOutput {
		return v.DedicatedResources
	}).(AiIndexEndpointDeployedIndexDedicatedResourcesPtrOutput)
}

// If set, the authentication is enabled for the private endpoint.
// Structure is documented below.
func (o AiIndexEndpointDeployedIndexOutput) DeployedIndexAuthConfig() AiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) AiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrOutput {
		return v.DeployedIndexAuthConfig
	}).(AiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrOutput)
}

// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
func (o AiIndexEndpointDeployedIndexOutput) DeployedIndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.DeployedIndexId }).(pulumi.StringOutput)
}

// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
// Creating deploymentGroups with reservedIpRanges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deploymentGroup (except 'default') can only be used with the same reservedIpRanges which means if the deploymentGroup has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
// Note: we only support up to 5 deployment groups (not including 'default').
func (o AiIndexEndpointDeployedIndexOutput) DeploymentGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringPtrOutput { return v.DeploymentGroup }).(pulumi.StringPtrOutput)
}

// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o AiIndexEndpointDeployedIndexOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// If true, private endpoint's access logs are sent to Cloud Logging.
func (o AiIndexEndpointDeployedIndexOutput) EnableAccessLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.BoolPtrOutput { return v.EnableAccessLogging }).(pulumi.BoolPtrOutput)
}

// The name of the Index this is the deployment of.
func (o AiIndexEndpointDeployedIndexOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.Index }).(pulumi.StringOutput)
}

// Identifies the index endpoint. Must be in the format
// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
func (o AiIndexEndpointDeployedIndexOutput) IndexEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.IndexEndpoint }).(pulumi.StringOutput)
}

// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time) of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations) the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal or before this sync time are contained in this DeployedIndex.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o AiIndexEndpointDeployedIndexOutput) IndexSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.IndexSyncTime }).(pulumi.StringOutput)
}

// The name of the DeployedIndex resource.
func (o AiIndexEndpointDeployedIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services access. This field is populated if [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network) is configured.
// Structure is documented below.
func (o AiIndexEndpointDeployedIndexOutput) PrivateEndpoints() AiIndexEndpointDeployedIndexPrivateEndpointArrayOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) AiIndexEndpointDeployedIndexPrivateEndpointArrayOutput {
		return v.PrivateEndpoints
	}).(AiIndexEndpointDeployedIndexPrivateEndpointArrayOutput)
}

// The region of the index endpoint deployment. eg us-central1
func (o AiIndexEndpointDeployedIndexOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
func (o AiIndexEndpointDeployedIndexOutput) ReservedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AiIndexEndpointDeployedIndex) pulumi.StringArrayOutput { return v.ReservedIpRanges }).(pulumi.StringArrayOutput)
}

type AiIndexEndpointDeployedIndexArrayOutput struct{ *pulumi.OutputState }

func (AiIndexEndpointDeployedIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiIndexEndpointDeployedIndex)(nil)).Elem()
}

func (o AiIndexEndpointDeployedIndexArrayOutput) ToAiIndexEndpointDeployedIndexArrayOutput() AiIndexEndpointDeployedIndexArrayOutput {
	return o
}

func (o AiIndexEndpointDeployedIndexArrayOutput) ToAiIndexEndpointDeployedIndexArrayOutputWithContext(ctx context.Context) AiIndexEndpointDeployedIndexArrayOutput {
	return o
}

func (o AiIndexEndpointDeployedIndexArrayOutput) Index(i pulumi.IntInput) AiIndexEndpointDeployedIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiIndexEndpointDeployedIndex {
		return vs[0].([]*AiIndexEndpointDeployedIndex)[vs[1].(int)]
	}).(AiIndexEndpointDeployedIndexOutput)
}

type AiIndexEndpointDeployedIndexMapOutput struct{ *pulumi.OutputState }

func (AiIndexEndpointDeployedIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiIndexEndpointDeployedIndex)(nil)).Elem()
}

func (o AiIndexEndpointDeployedIndexMapOutput) ToAiIndexEndpointDeployedIndexMapOutput() AiIndexEndpointDeployedIndexMapOutput {
	return o
}

func (o AiIndexEndpointDeployedIndexMapOutput) ToAiIndexEndpointDeployedIndexMapOutputWithContext(ctx context.Context) AiIndexEndpointDeployedIndexMapOutput {
	return o
}

func (o AiIndexEndpointDeployedIndexMapOutput) MapIndex(k pulumi.StringInput) AiIndexEndpointDeployedIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiIndexEndpointDeployedIndex {
		return vs[0].(map[string]*AiIndexEndpointDeployedIndex)[vs[1].(string)]
	}).(AiIndexEndpointDeployedIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiIndexEndpointDeployedIndexInput)(nil)).Elem(), &AiIndexEndpointDeployedIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiIndexEndpointDeployedIndexArrayInput)(nil)).Elem(), AiIndexEndpointDeployedIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiIndexEndpointDeployedIndexMapInput)(nil)).Elem(), AiIndexEndpointDeployedIndexMap{})
	pulumi.RegisterOutputType(AiIndexEndpointDeployedIndexOutput{})
	pulumi.RegisterOutputType(AiIndexEndpointDeployedIndexArrayOutput{})
	pulumi.RegisterOutputType(AiIndexEndpointDeployedIndexMapOutput{})
}
