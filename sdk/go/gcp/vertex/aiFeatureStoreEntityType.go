// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An entity type is a type of object in a system that needs to be modeled and have stored information about. For example, driver is an entity type, and driver0 is an instance of an entity type driver.
//
// To get more information about FeaturestoreEntitytype, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/vertex-ai/docs)
//
// ## Example Usage
// ### Vertex Ai Featurestore Entitytype
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			featurestore, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Region: pulumi.String("us-central1"),
//				OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
//					FixedNodeCount: pulumi.Int(2),
//				},
//				EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
//					KmsKeyName: pulumi.String("kms-name"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureStoreEntityType(ctx, "entity", &vertex.AiFeatureStoreEntityTypeArgs{
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Featurestore: featurestore.ID(),
//				MonitoringConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigArgs{
//					SnapshotAnalysis: &vertex.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs{
//						Disabled:               pulumi.Bool(false),
//						MonitoringIntervalDays: pulumi.Int(1),
//						StalenessDays:          pulumi.Int(21),
//					},
//					NumericalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs{
//						Value: pulumi.Float64(0.8),
//					},
//					CategoricalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs{
//						Value: pulumi.Float64(10),
//					},
//					ImportFeaturesAnalysis: &vertex.AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs{
//						State:                    pulumi.String("ENABLED"),
//						AnomalyDetectionBaseline: pulumi.String("PREVIOUS_IMPORT_FEATURES_STATS"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Vertex Ai Featurestore Entitytype With Beta Fields
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			featurestore, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Region: pulumi.String("us-central1"),
//				OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
//					FixedNodeCount: pulumi.Int(2),
//				},
//				EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
//					KmsKeyName: pulumi.String("kms-name"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureStoreEntityType(ctx, "entity", &vertex.AiFeatureStoreEntityTypeArgs{
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Featurestore: featurestore.ID(),
//				MonitoringConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigArgs{
//					SnapshotAnalysis: &vertex.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs{
//						Disabled:           pulumi.Bool(false),
//						MonitoringInterval: pulumi.String("86400s"),
//					},
//					CategoricalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs{
//						Value: pulumi.Float64(0.3),
//					},
//					NumericalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs{
//						Value: pulumi.Float64(0.3),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # FeaturestoreEntitytype can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType default {{featurestore}}/entityTypes/{{name}}
//
// ```
type AiFeatureStoreEntityType struct {
	pulumi.CustomResourceState

	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore pulumi.StringOutput `pulumi:"featurestore"`
	// A set of key/value label pairs to assign to this EntityType.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The default monitoring configuration for all Features under this EntityType.
	// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
	// Structure is documented below.
	MonitoringConfig AiFeatureStoreEntityTypeMonitoringConfigPtrOutput `pulumi:"monitoringConfig"`
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region of the EntityType.
	Region pulumi.StringOutput `pulumi:"region"`
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAiFeatureStoreEntityType registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureStoreEntityType(ctx *pulumi.Context,
	name string, args *AiFeatureStoreEntityTypeArgs, opts ...pulumi.ResourceOption) (*AiFeatureStoreEntityType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	var resource AiFeatureStoreEntityType
	err := ctx.RegisterResource("gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureStoreEntityType gets an existing AiFeatureStoreEntityType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureStoreEntityType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureStoreEntityTypeState, opts ...pulumi.ResourceOption) (*AiFeatureStoreEntityType, error) {
	var resource AiFeatureStoreEntityType
	err := ctx.ReadResource("gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureStoreEntityType resources.
type aiFeatureStoreEntityTypeState struct {
	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore *string `pulumi:"featurestore"`
	// A set of key/value label pairs to assign to this EntityType.
	Labels map[string]string `pulumi:"labels"`
	// The default monitoring configuration for all Features under this EntityType.
	// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
	// Structure is documented below.
	MonitoringConfig *AiFeatureStoreEntityTypeMonitoringConfig `pulumi:"monitoringConfig"`
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name *string `pulumi:"name"`
	// The region of the EntityType.
	Region *string `pulumi:"region"`
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
}

type AiFeatureStoreEntityTypeState struct {
	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore pulumi.StringPtrInput
	// A set of key/value label pairs to assign to this EntityType.
	Labels pulumi.StringMapInput
	// The default monitoring configuration for all Features under this EntityType.
	// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
	// Structure is documented below.
	MonitoringConfig AiFeatureStoreEntityTypeMonitoringConfigPtrInput
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringPtrInput
	// The region of the EntityType.
	Region pulumi.StringPtrInput
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringPtrInput
}

func (AiFeatureStoreEntityTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreEntityTypeState)(nil)).Elem()
}

type aiFeatureStoreEntityTypeArgs struct {
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore string `pulumi:"featurestore"`
	// A set of key/value label pairs to assign to this EntityType.
	Labels map[string]string `pulumi:"labels"`
	// The default monitoring configuration for all Features under this EntityType.
	// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
	// Structure is documented below.
	MonitoringConfig *AiFeatureStoreEntityTypeMonitoringConfig `pulumi:"monitoringConfig"`
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AiFeatureStoreEntityType resource.
type AiFeatureStoreEntityTypeArgs struct {
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore pulumi.StringInput
	// A set of key/value label pairs to assign to this EntityType.
	Labels pulumi.StringMapInput
	// The default monitoring configuration for all Features under this EntityType.
	// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
	// Structure is documented below.
	MonitoringConfig AiFeatureStoreEntityTypeMonitoringConfigPtrInput
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringPtrInput
}

func (AiFeatureStoreEntityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreEntityTypeArgs)(nil)).Elem()
}

type AiFeatureStoreEntityTypeInput interface {
	pulumi.Input

	ToAiFeatureStoreEntityTypeOutput() AiFeatureStoreEntityTypeOutput
	ToAiFeatureStoreEntityTypeOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeOutput
}

func (*AiFeatureStoreEntityType) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreEntityType)(nil)).Elem()
}

func (i *AiFeatureStoreEntityType) ToAiFeatureStoreEntityTypeOutput() AiFeatureStoreEntityTypeOutput {
	return i.ToAiFeatureStoreEntityTypeOutputWithContext(context.Background())
}

func (i *AiFeatureStoreEntityType) ToAiFeatureStoreEntityTypeOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreEntityTypeOutput)
}

// AiFeatureStoreEntityTypeArrayInput is an input type that accepts AiFeatureStoreEntityTypeArray and AiFeatureStoreEntityTypeArrayOutput values.
// You can construct a concrete instance of `AiFeatureStoreEntityTypeArrayInput` via:
//
//	AiFeatureStoreEntityTypeArray{ AiFeatureStoreEntityTypeArgs{...} }
type AiFeatureStoreEntityTypeArrayInput interface {
	pulumi.Input

	ToAiFeatureStoreEntityTypeArrayOutput() AiFeatureStoreEntityTypeArrayOutput
	ToAiFeatureStoreEntityTypeArrayOutputWithContext(context.Context) AiFeatureStoreEntityTypeArrayOutput
}

type AiFeatureStoreEntityTypeArray []AiFeatureStoreEntityTypeInput

func (AiFeatureStoreEntityTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreEntityType)(nil)).Elem()
}

func (i AiFeatureStoreEntityTypeArray) ToAiFeatureStoreEntityTypeArrayOutput() AiFeatureStoreEntityTypeArrayOutput {
	return i.ToAiFeatureStoreEntityTypeArrayOutputWithContext(context.Background())
}

func (i AiFeatureStoreEntityTypeArray) ToAiFeatureStoreEntityTypeArrayOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreEntityTypeArrayOutput)
}

// AiFeatureStoreEntityTypeMapInput is an input type that accepts AiFeatureStoreEntityTypeMap and AiFeatureStoreEntityTypeMapOutput values.
// You can construct a concrete instance of `AiFeatureStoreEntityTypeMapInput` via:
//
//	AiFeatureStoreEntityTypeMap{ "key": AiFeatureStoreEntityTypeArgs{...} }
type AiFeatureStoreEntityTypeMapInput interface {
	pulumi.Input

	ToAiFeatureStoreEntityTypeMapOutput() AiFeatureStoreEntityTypeMapOutput
	ToAiFeatureStoreEntityTypeMapOutputWithContext(context.Context) AiFeatureStoreEntityTypeMapOutput
}

type AiFeatureStoreEntityTypeMap map[string]AiFeatureStoreEntityTypeInput

func (AiFeatureStoreEntityTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreEntityType)(nil)).Elem()
}

func (i AiFeatureStoreEntityTypeMap) ToAiFeatureStoreEntityTypeMapOutput() AiFeatureStoreEntityTypeMapOutput {
	return i.ToAiFeatureStoreEntityTypeMapOutputWithContext(context.Background())
}

func (i AiFeatureStoreEntityTypeMap) ToAiFeatureStoreEntityTypeMapOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreEntityTypeMapOutput)
}

type AiFeatureStoreEntityTypeOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreEntityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreEntityType)(nil)).Elem()
}

func (o AiFeatureStoreEntityTypeOutput) ToAiFeatureStoreEntityTypeOutput() AiFeatureStoreEntityTypeOutput {
	return o
}

func (o AiFeatureStoreEntityTypeOutput) ToAiFeatureStoreEntityTypeOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeOutput {
	return o
}

// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiFeatureStoreEntityTypeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityType) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Used to perform consistent read-modify-write updates.
func (o AiFeatureStoreEntityTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityType) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
func (o AiFeatureStoreEntityTypeOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityType) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

// A set of key/value label pairs to assign to this EntityType.
func (o AiFeatureStoreEntityTypeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityType) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The default monitoring configuration for all Features under this EntityType.
// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
// Structure is documented below.
func (o AiFeatureStoreEntityTypeOutput) MonitoringConfig() AiFeatureStoreEntityTypeMonitoringConfigPtrOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityType) AiFeatureStoreEntityTypeMonitoringConfigPtrOutput {
		return v.MonitoringConfig
	}).(AiFeatureStoreEntityTypeMonitoringConfigPtrOutput)
}

// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
func (o AiFeatureStoreEntityTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region of the EntityType.
func (o AiFeatureStoreEntityTypeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityType) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiFeatureStoreEntityTypeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreEntityType) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AiFeatureStoreEntityTypeArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreEntityTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreEntityType)(nil)).Elem()
}

func (o AiFeatureStoreEntityTypeArrayOutput) ToAiFeatureStoreEntityTypeArrayOutput() AiFeatureStoreEntityTypeArrayOutput {
	return o
}

func (o AiFeatureStoreEntityTypeArrayOutput) ToAiFeatureStoreEntityTypeArrayOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeArrayOutput {
	return o
}

func (o AiFeatureStoreEntityTypeArrayOutput) Index(i pulumi.IntInput) AiFeatureStoreEntityTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureStoreEntityType {
		return vs[0].([]*AiFeatureStoreEntityType)[vs[1].(int)]
	}).(AiFeatureStoreEntityTypeOutput)
}

type AiFeatureStoreEntityTypeMapOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreEntityTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreEntityType)(nil)).Elem()
}

func (o AiFeatureStoreEntityTypeMapOutput) ToAiFeatureStoreEntityTypeMapOutput() AiFeatureStoreEntityTypeMapOutput {
	return o
}

func (o AiFeatureStoreEntityTypeMapOutput) ToAiFeatureStoreEntityTypeMapOutputWithContext(ctx context.Context) AiFeatureStoreEntityTypeMapOutput {
	return o
}

func (o AiFeatureStoreEntityTypeMapOutput) MapIndex(k pulumi.StringInput) AiFeatureStoreEntityTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureStoreEntityType {
		return vs[0].(map[string]*AiFeatureStoreEntityType)[vs[1].(string)]
	}).(AiFeatureStoreEntityTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreEntityTypeInput)(nil)).Elem(), &AiFeatureStoreEntityType{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreEntityTypeArrayInput)(nil)).Elem(), AiFeatureStoreEntityTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreEntityTypeMapInput)(nil)).Elem(), AiFeatureStoreEntityTypeMap{})
	pulumi.RegisterOutputType(AiFeatureStoreEntityTypeOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreEntityTypeArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreEntityTypeMapOutput{})
}
