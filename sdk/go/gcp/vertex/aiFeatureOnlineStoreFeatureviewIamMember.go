// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Vertex AI FeatureOnlineStoreFeatureview. Each of these resources serves a different use case:
//
// * `vertex.AiFeatureOnlineStoreFeatureviewIamPolicy`: Authoritative. Sets the IAM policy for the featureonlinestorefeatureview and replaces any existing policy already attached.
// * `vertex.AiFeatureOnlineStoreFeatureviewIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the featureonlinestorefeatureview are preserved.
// * `vertex.AiFeatureOnlineStoreFeatureviewIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the featureonlinestorefeatureview are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `vertex.AiFeatureOnlineStoreFeatureviewIamPolicy`: Retrieves the IAM policy for the featureonlinestorefeatureview
//
// > **Note:** `vertex.AiFeatureOnlineStoreFeatureviewIamPolicy` **cannot** be used in conjunction with `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` and `vertex.AiFeatureOnlineStoreFeatureviewIamMember` or they will fight over what your policy should be.
//
// > **Note:** `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` resources **can be** used in conjunction with `vertex.AiFeatureOnlineStoreFeatureviewIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## vertex.AiFeatureOnlineStoreFeatureviewIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureOnlineStoreFeatureviewIamPolicy(ctx, "policy", &vertex.AiFeatureOnlineStoreFeatureviewIamPolicyArgs{
//				Region:             pulumi.Any(featureview.Region),
//				FeatureOnlineStore: pulumi.Any(featureview.FeatureOnlineStore),
//				FeatureView:        pulumi.Any(featureview.Name),
//				PolicyData:         pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureOnlineStoreFeatureviewIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureOnlineStoreFeatureviewIamBinding(ctx, "binding", &vertex.AiFeatureOnlineStoreFeatureviewIamBindingArgs{
//				Region:             pulumi.Any(featureview.Region),
//				FeatureOnlineStore: pulumi.Any(featureview.FeatureOnlineStore),
//				FeatureView:        pulumi.Any(featureview.Name),
//				Role:               pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureOnlineStoreFeatureviewIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureOnlineStoreFeatureviewIamMember(ctx, "member", &vertex.AiFeatureOnlineStoreFeatureviewIamMemberArgs{
//				Region:             pulumi.Any(featureview.Region),
//				FeatureOnlineStore: pulumi.Any(featureview.FeatureOnlineStore),
//				FeatureView:        pulumi.Any(featureview.Name),
//				Role:               pulumi.String("roles/viewer"),
//				Member:             pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Vertex AI FeatureOnlineStoreFeatureview
//
// Three different resources help you manage your IAM policy for Vertex AI FeatureOnlineStoreFeatureview. Each of these resources serves a different use case:
//
// * `vertex.AiFeatureOnlineStoreFeatureviewIamPolicy`: Authoritative. Sets the IAM policy for the featureonlinestorefeatureview and replaces any existing policy already attached.
// * `vertex.AiFeatureOnlineStoreFeatureviewIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the featureonlinestorefeatureview are preserved.
// * `vertex.AiFeatureOnlineStoreFeatureviewIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the featureonlinestorefeatureview are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `vertex.AiFeatureOnlineStoreFeatureviewIamPolicy`: Retrieves the IAM policy for the featureonlinestorefeatureview
//
// > **Note:** `vertex.AiFeatureOnlineStoreFeatureviewIamPolicy` **cannot** be used in conjunction with `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` and `vertex.AiFeatureOnlineStoreFeatureviewIamMember` or they will fight over what your policy should be.
//
// > **Note:** `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` resources **can be** used in conjunction with `vertex.AiFeatureOnlineStoreFeatureviewIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## vertex.AiFeatureOnlineStoreFeatureviewIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureOnlineStoreFeatureviewIamPolicy(ctx, "policy", &vertex.AiFeatureOnlineStoreFeatureviewIamPolicyArgs{
//				Region:             pulumi.Any(featureview.Region),
//				FeatureOnlineStore: pulumi.Any(featureview.FeatureOnlineStore),
//				FeatureView:        pulumi.Any(featureview.Name),
//				PolicyData:         pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureOnlineStoreFeatureviewIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureOnlineStoreFeatureviewIamBinding(ctx, "binding", &vertex.AiFeatureOnlineStoreFeatureviewIamBindingArgs{
//				Region:             pulumi.Any(featureview.Region),
//				FeatureOnlineStore: pulumi.Any(featureview.FeatureOnlineStore),
//				FeatureView:        pulumi.Any(featureview.Name),
//				Role:               pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureOnlineStoreFeatureviewIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureOnlineStoreFeatureviewIamMember(ctx, "member", &vertex.AiFeatureOnlineStoreFeatureviewIamMemberArgs{
//				Region:             pulumi.Any(featureview.Region),
//				FeatureOnlineStore: pulumi.Any(featureview.FeatureOnlineStore),
//				FeatureView:        pulumi.Any(featureview.Name),
//				Role:               pulumi.String("roles/viewer"),
//				Member:             pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * {{feature_online_store}}/featureViews/{{name}}
//
// * {{feature_online_store}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Vertex AI featureonlinestorefeatureview IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureviewIamMember:AiFeatureOnlineStoreFeatureviewIamMember editor "{{feature_online_store}}/featureViews/{{feature_online_store_featureview}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureviewIamMember:AiFeatureOnlineStoreFeatureviewIamMember editor "{{feature_online_store}}/featureViews/{{feature_online_store_featureview}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureviewIamMember:AiFeatureOnlineStoreFeatureviewIamMember editor {{feature_online_store}}/featureViews/{{feature_online_store_featureview}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AiFeatureOnlineStoreFeatureviewIamMember struct {
	pulumi.CustomResourceState

	Condition AiFeatureOnlineStoreFeatureviewIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the FeatureOnlineStore to use for the featureview. Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore pulumi.StringOutput `pulumi:"featureOnlineStore"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureView pulumi.StringOutput `pulumi:"featureView"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region for the resource. It should be the same as the featureonlinestore region. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewAiFeatureOnlineStoreFeatureviewIamMember registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureOnlineStoreFeatureviewIamMember(ctx *pulumi.Context,
	name string, args *AiFeatureOnlineStoreFeatureviewIamMemberArgs, opts ...pulumi.ResourceOption) (*AiFeatureOnlineStoreFeatureviewIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureOnlineStore == nil {
		return nil, errors.New("invalid value for required argument 'FeatureOnlineStore'")
	}
	if args.FeatureView == nil {
		return nil, errors.New("invalid value for required argument 'FeatureView'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiFeatureOnlineStoreFeatureviewIamMember
	err := ctx.RegisterResource("gcp:vertex/aiFeatureOnlineStoreFeatureviewIamMember:AiFeatureOnlineStoreFeatureviewIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureOnlineStoreFeatureviewIamMember gets an existing AiFeatureOnlineStoreFeatureviewIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureOnlineStoreFeatureviewIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureOnlineStoreFeatureviewIamMemberState, opts ...pulumi.ResourceOption) (*AiFeatureOnlineStoreFeatureviewIamMember, error) {
	var resource AiFeatureOnlineStoreFeatureviewIamMember
	err := ctx.ReadResource("gcp:vertex/aiFeatureOnlineStoreFeatureviewIamMember:AiFeatureOnlineStoreFeatureviewIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureOnlineStoreFeatureviewIamMember resources.
type aiFeatureOnlineStoreFeatureviewIamMemberState struct {
	Condition *AiFeatureOnlineStoreFeatureviewIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The name of the FeatureOnlineStore to use for the featureview. Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore *string `pulumi:"featureOnlineStore"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureView *string `pulumi:"featureView"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region for the resource. It should be the same as the featureonlinestore region. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type AiFeatureOnlineStoreFeatureviewIamMemberState struct {
	Condition AiFeatureOnlineStoreFeatureviewIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The name of the FeatureOnlineStore to use for the featureview. Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureView pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region for the resource. It should be the same as the featureonlinestore region. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (AiFeatureOnlineStoreFeatureviewIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureOnlineStoreFeatureviewIamMemberState)(nil)).Elem()
}

type aiFeatureOnlineStoreFeatureviewIamMemberArgs struct {
	Condition *AiFeatureOnlineStoreFeatureviewIamMemberCondition `pulumi:"condition"`
	// The name of the FeatureOnlineStore to use for the featureview. Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore string `pulumi:"featureOnlineStore"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureView string `pulumi:"featureView"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region for the resource. It should be the same as the featureonlinestore region. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a AiFeatureOnlineStoreFeatureviewIamMember resource.
type AiFeatureOnlineStoreFeatureviewIamMemberArgs struct {
	Condition AiFeatureOnlineStoreFeatureviewIamMemberConditionPtrInput
	// The name of the FeatureOnlineStore to use for the featureview. Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureView pulumi.StringInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region for the resource. It should be the same as the featureonlinestore region. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (AiFeatureOnlineStoreFeatureviewIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureOnlineStoreFeatureviewIamMemberArgs)(nil)).Elem()
}

type AiFeatureOnlineStoreFeatureviewIamMemberInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreFeatureviewIamMemberOutput() AiFeatureOnlineStoreFeatureviewIamMemberOutput
	ToAiFeatureOnlineStoreFeatureviewIamMemberOutputWithContext(ctx context.Context) AiFeatureOnlineStoreFeatureviewIamMemberOutput
}

func (*AiFeatureOnlineStoreFeatureviewIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureOnlineStoreFeatureviewIamMember)(nil)).Elem()
}

func (i *AiFeatureOnlineStoreFeatureviewIamMember) ToAiFeatureOnlineStoreFeatureviewIamMemberOutput() AiFeatureOnlineStoreFeatureviewIamMemberOutput {
	return i.ToAiFeatureOnlineStoreFeatureviewIamMemberOutputWithContext(context.Background())
}

func (i *AiFeatureOnlineStoreFeatureviewIamMember) ToAiFeatureOnlineStoreFeatureviewIamMemberOutputWithContext(ctx context.Context) AiFeatureOnlineStoreFeatureviewIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreFeatureviewIamMemberOutput)
}

// AiFeatureOnlineStoreFeatureviewIamMemberArrayInput is an input type that accepts AiFeatureOnlineStoreFeatureviewIamMemberArray and AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput values.
// You can construct a concrete instance of `AiFeatureOnlineStoreFeatureviewIamMemberArrayInput` via:
//
//	AiFeatureOnlineStoreFeatureviewIamMemberArray{ AiFeatureOnlineStoreFeatureviewIamMemberArgs{...} }
type AiFeatureOnlineStoreFeatureviewIamMemberArrayInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreFeatureviewIamMemberArrayOutput() AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput
	ToAiFeatureOnlineStoreFeatureviewIamMemberArrayOutputWithContext(context.Context) AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput
}

type AiFeatureOnlineStoreFeatureviewIamMemberArray []AiFeatureOnlineStoreFeatureviewIamMemberInput

func (AiFeatureOnlineStoreFeatureviewIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureOnlineStoreFeatureviewIamMember)(nil)).Elem()
}

func (i AiFeatureOnlineStoreFeatureviewIamMemberArray) ToAiFeatureOnlineStoreFeatureviewIamMemberArrayOutput() AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput {
	return i.ToAiFeatureOnlineStoreFeatureviewIamMemberArrayOutputWithContext(context.Background())
}

func (i AiFeatureOnlineStoreFeatureviewIamMemberArray) ToAiFeatureOnlineStoreFeatureviewIamMemberArrayOutputWithContext(ctx context.Context) AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput)
}

// AiFeatureOnlineStoreFeatureviewIamMemberMapInput is an input type that accepts AiFeatureOnlineStoreFeatureviewIamMemberMap and AiFeatureOnlineStoreFeatureviewIamMemberMapOutput values.
// You can construct a concrete instance of `AiFeatureOnlineStoreFeatureviewIamMemberMapInput` via:
//
//	AiFeatureOnlineStoreFeatureviewIamMemberMap{ "key": AiFeatureOnlineStoreFeatureviewIamMemberArgs{...} }
type AiFeatureOnlineStoreFeatureviewIamMemberMapInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreFeatureviewIamMemberMapOutput() AiFeatureOnlineStoreFeatureviewIamMemberMapOutput
	ToAiFeatureOnlineStoreFeatureviewIamMemberMapOutputWithContext(context.Context) AiFeatureOnlineStoreFeatureviewIamMemberMapOutput
}

type AiFeatureOnlineStoreFeatureviewIamMemberMap map[string]AiFeatureOnlineStoreFeatureviewIamMemberInput

func (AiFeatureOnlineStoreFeatureviewIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureOnlineStoreFeatureviewIamMember)(nil)).Elem()
}

func (i AiFeatureOnlineStoreFeatureviewIamMemberMap) ToAiFeatureOnlineStoreFeatureviewIamMemberMapOutput() AiFeatureOnlineStoreFeatureviewIamMemberMapOutput {
	return i.ToAiFeatureOnlineStoreFeatureviewIamMemberMapOutputWithContext(context.Background())
}

func (i AiFeatureOnlineStoreFeatureviewIamMemberMap) ToAiFeatureOnlineStoreFeatureviewIamMemberMapOutputWithContext(ctx context.Context) AiFeatureOnlineStoreFeatureviewIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreFeatureviewIamMemberMapOutput)
}

type AiFeatureOnlineStoreFeatureviewIamMemberOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreFeatureviewIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureOnlineStoreFeatureviewIamMember)(nil)).Elem()
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) ToAiFeatureOnlineStoreFeatureviewIamMemberOutput() AiFeatureOnlineStoreFeatureviewIamMemberOutput {
	return o
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) ToAiFeatureOnlineStoreFeatureviewIamMemberOutputWithContext(ctx context.Context) AiFeatureOnlineStoreFeatureviewIamMemberOutput {
	return o
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) Condition() AiFeatureOnlineStoreFeatureviewIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreFeatureviewIamMember) AiFeatureOnlineStoreFeatureviewIamMemberConditionPtrOutput {
		return v.Condition
	}).(AiFeatureOnlineStoreFeatureviewIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreFeatureviewIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the FeatureOnlineStore to use for the featureview. Used to find the parent resource to bind the IAM policy to
func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) FeatureOnlineStore() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreFeatureviewIamMember) pulumi.StringOutput { return v.FeatureOnlineStore }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) FeatureView() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreFeatureviewIamMember) pulumi.StringOutput { return v.FeatureView }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreFeatureviewIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreFeatureviewIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region for the resource. It should be the same as the featureonlinestore region. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreFeatureviewIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `vertex.AiFeatureOnlineStoreFeatureviewIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o AiFeatureOnlineStoreFeatureviewIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreFeatureviewIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureOnlineStoreFeatureviewIamMember)(nil)).Elem()
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput) ToAiFeatureOnlineStoreFeatureviewIamMemberArrayOutput() AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput {
	return o
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput) ToAiFeatureOnlineStoreFeatureviewIamMemberArrayOutputWithContext(ctx context.Context) AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput {
	return o
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput) Index(i pulumi.IntInput) AiFeatureOnlineStoreFeatureviewIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureOnlineStoreFeatureviewIamMember {
		return vs[0].([]*AiFeatureOnlineStoreFeatureviewIamMember)[vs[1].(int)]
	}).(AiFeatureOnlineStoreFeatureviewIamMemberOutput)
}

type AiFeatureOnlineStoreFeatureviewIamMemberMapOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreFeatureviewIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureOnlineStoreFeatureviewIamMember)(nil)).Elem()
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberMapOutput) ToAiFeatureOnlineStoreFeatureviewIamMemberMapOutput() AiFeatureOnlineStoreFeatureviewIamMemberMapOutput {
	return o
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberMapOutput) ToAiFeatureOnlineStoreFeatureviewIamMemberMapOutputWithContext(ctx context.Context) AiFeatureOnlineStoreFeatureviewIamMemberMapOutput {
	return o
}

func (o AiFeatureOnlineStoreFeatureviewIamMemberMapOutput) MapIndex(k pulumi.StringInput) AiFeatureOnlineStoreFeatureviewIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureOnlineStoreFeatureviewIamMember {
		return vs[0].(map[string]*AiFeatureOnlineStoreFeatureviewIamMember)[vs[1].(string)]
	}).(AiFeatureOnlineStoreFeatureviewIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreFeatureviewIamMemberInput)(nil)).Elem(), &AiFeatureOnlineStoreFeatureviewIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreFeatureviewIamMemberArrayInput)(nil)).Elem(), AiFeatureOnlineStoreFeatureviewIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreFeatureviewIamMemberMapInput)(nil)).Elem(), AiFeatureOnlineStoreFeatureviewIamMemberMap{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreFeatureviewIamMemberOutput{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreFeatureviewIamMemberArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreFeatureviewIamMemberMapOutput{})
}
