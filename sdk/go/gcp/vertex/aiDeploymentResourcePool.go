// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// 'DeploymentResourcePool can be shared by multiple deployed models,
// whose underlying specification consists of dedicated resources.'
//
// To get more information about DeploymentResourcePool, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.deploymentResourcePools)
//
// ## Example Usage
//
// ### Vertex Ai Deployment Resource Pool
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiDeploymentResourcePool(ctx, "deployment_resource_pool", &vertex.AiDeploymentResourcePoolArgs{
//				Region: pulumi.String("us-central1"),
//				Name:   pulumi.String("example-deployment-resource-pool"),
//				DedicatedResources: &vertex.AiDeploymentResourcePoolDedicatedResourcesArgs{
//					MachineSpec: &vertex.AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs{
//						MachineType:      pulumi.String("n1-standard-4"),
//						AcceleratorType:  pulumi.String("NVIDIA_TESLA_K80"),
//						AcceleratorCount: pulumi.Int(1),
//					},
//					MinReplicaCount: pulumi.Int(1),
//					MaxReplicaCount: pulumi.Int(2),
//					AutoscalingMetricSpecs: vertex.AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArray{
//						&vertex.AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs{
//							MetricName: pulumi.String("aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle"),
//							Target:     pulumi.Int(60),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DeploymentResourcePool can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/deploymentResourcePools/{{name}}`
//
// * `{{project}}/{{region}}/{{name}}`
//
// * `{{region}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, DeploymentResourcePool can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default projects/{{project}}/locations/{{region}}/deploymentResourcePools/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{name}}
// ```
type AiDeploymentResourcePool struct {
	pulumi.CustomResourceState

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The underlying dedicated resources that the deployment resource pool uses.
	// Structure is documented below.
	DedicatedResources AiDeploymentResourcePoolDedicatedResourcesPtrOutput `pulumi:"dedicatedResources"`
	// The resource name of deployment resource pool. The maximum length is 63 characters, and valid characters are `/^a-z?$/`.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of deployment resource pool. eg us-central1
	Region pulumi.StringPtrOutput `pulumi:"region"`
}

// NewAiDeploymentResourcePool registers a new resource with the given unique name, arguments, and options.
func NewAiDeploymentResourcePool(ctx *pulumi.Context,
	name string, args *AiDeploymentResourcePoolArgs, opts ...pulumi.ResourceOption) (*AiDeploymentResourcePool, error) {
	if args == nil {
		args = &AiDeploymentResourcePoolArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiDeploymentResourcePool
	err := ctx.RegisterResource("gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiDeploymentResourcePool gets an existing AiDeploymentResourcePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiDeploymentResourcePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiDeploymentResourcePoolState, opts ...pulumi.ResourceOption) (*AiDeploymentResourcePool, error) {
	var resource AiDeploymentResourcePool
	err := ctx.ReadResource("gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiDeploymentResourcePool resources.
type aiDeploymentResourcePoolState struct {
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// The underlying dedicated resources that the deployment resource pool uses.
	// Structure is documented below.
	DedicatedResources *AiDeploymentResourcePoolDedicatedResources `pulumi:"dedicatedResources"`
	// The resource name of deployment resource pool. The maximum length is 63 characters, and valid characters are `/^a-z?$/`.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of deployment resource pool. eg us-central1
	Region *string `pulumi:"region"`
}

type AiDeploymentResourcePoolState struct {
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// The underlying dedicated resources that the deployment resource pool uses.
	// Structure is documented below.
	DedicatedResources AiDeploymentResourcePoolDedicatedResourcesPtrInput
	// The resource name of deployment resource pool. The maximum length is 63 characters, and valid characters are `/^a-z?$/`.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of deployment resource pool. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiDeploymentResourcePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiDeploymentResourcePoolState)(nil)).Elem()
}

type aiDeploymentResourcePoolArgs struct {
	// The underlying dedicated resources that the deployment resource pool uses.
	// Structure is documented below.
	DedicatedResources *AiDeploymentResourcePoolDedicatedResources `pulumi:"dedicatedResources"`
	// The resource name of deployment resource pool. The maximum length is 63 characters, and valid characters are `/^a-z?$/`.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of deployment resource pool. eg us-central1
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiDeploymentResourcePool resource.
type AiDeploymentResourcePoolArgs struct {
	// The underlying dedicated resources that the deployment resource pool uses.
	// Structure is documented below.
	DedicatedResources AiDeploymentResourcePoolDedicatedResourcesPtrInput
	// The resource name of deployment resource pool. The maximum length is 63 characters, and valid characters are `/^a-z?$/`.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of deployment resource pool. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiDeploymentResourcePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiDeploymentResourcePoolArgs)(nil)).Elem()
}

type AiDeploymentResourcePoolInput interface {
	pulumi.Input

	ToAiDeploymentResourcePoolOutput() AiDeploymentResourcePoolOutput
	ToAiDeploymentResourcePoolOutputWithContext(ctx context.Context) AiDeploymentResourcePoolOutput
}

func (*AiDeploymentResourcePool) ElementType() reflect.Type {
	return reflect.TypeOf((**AiDeploymentResourcePool)(nil)).Elem()
}

func (i *AiDeploymentResourcePool) ToAiDeploymentResourcePoolOutput() AiDeploymentResourcePoolOutput {
	return i.ToAiDeploymentResourcePoolOutputWithContext(context.Background())
}

func (i *AiDeploymentResourcePool) ToAiDeploymentResourcePoolOutputWithContext(ctx context.Context) AiDeploymentResourcePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiDeploymentResourcePoolOutput)
}

// AiDeploymentResourcePoolArrayInput is an input type that accepts AiDeploymentResourcePoolArray and AiDeploymentResourcePoolArrayOutput values.
// You can construct a concrete instance of `AiDeploymentResourcePoolArrayInput` via:
//
//	AiDeploymentResourcePoolArray{ AiDeploymentResourcePoolArgs{...} }
type AiDeploymentResourcePoolArrayInput interface {
	pulumi.Input

	ToAiDeploymentResourcePoolArrayOutput() AiDeploymentResourcePoolArrayOutput
	ToAiDeploymentResourcePoolArrayOutputWithContext(context.Context) AiDeploymentResourcePoolArrayOutput
}

type AiDeploymentResourcePoolArray []AiDeploymentResourcePoolInput

func (AiDeploymentResourcePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiDeploymentResourcePool)(nil)).Elem()
}

func (i AiDeploymentResourcePoolArray) ToAiDeploymentResourcePoolArrayOutput() AiDeploymentResourcePoolArrayOutput {
	return i.ToAiDeploymentResourcePoolArrayOutputWithContext(context.Background())
}

func (i AiDeploymentResourcePoolArray) ToAiDeploymentResourcePoolArrayOutputWithContext(ctx context.Context) AiDeploymentResourcePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiDeploymentResourcePoolArrayOutput)
}

// AiDeploymentResourcePoolMapInput is an input type that accepts AiDeploymentResourcePoolMap and AiDeploymentResourcePoolMapOutput values.
// You can construct a concrete instance of `AiDeploymentResourcePoolMapInput` via:
//
//	AiDeploymentResourcePoolMap{ "key": AiDeploymentResourcePoolArgs{...} }
type AiDeploymentResourcePoolMapInput interface {
	pulumi.Input

	ToAiDeploymentResourcePoolMapOutput() AiDeploymentResourcePoolMapOutput
	ToAiDeploymentResourcePoolMapOutputWithContext(context.Context) AiDeploymentResourcePoolMapOutput
}

type AiDeploymentResourcePoolMap map[string]AiDeploymentResourcePoolInput

func (AiDeploymentResourcePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiDeploymentResourcePool)(nil)).Elem()
}

func (i AiDeploymentResourcePoolMap) ToAiDeploymentResourcePoolMapOutput() AiDeploymentResourcePoolMapOutput {
	return i.ToAiDeploymentResourcePoolMapOutputWithContext(context.Background())
}

func (i AiDeploymentResourcePoolMap) ToAiDeploymentResourcePoolMapOutputWithContext(ctx context.Context) AiDeploymentResourcePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiDeploymentResourcePoolMapOutput)
}

type AiDeploymentResourcePoolOutput struct{ *pulumi.OutputState }

func (AiDeploymentResourcePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiDeploymentResourcePool)(nil)).Elem()
}

func (o AiDeploymentResourcePoolOutput) ToAiDeploymentResourcePoolOutput() AiDeploymentResourcePoolOutput {
	return o
}

func (o AiDeploymentResourcePoolOutput) ToAiDeploymentResourcePoolOutputWithContext(ctx context.Context) AiDeploymentResourcePoolOutput {
	return o
}

// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiDeploymentResourcePoolOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiDeploymentResourcePool) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The underlying dedicated resources that the deployment resource pool uses.
// Structure is documented below.
func (o AiDeploymentResourcePoolOutput) DedicatedResources() AiDeploymentResourcePoolDedicatedResourcesPtrOutput {
	return o.ApplyT(func(v *AiDeploymentResourcePool) AiDeploymentResourcePoolDedicatedResourcesPtrOutput {
		return v.DedicatedResources
	}).(AiDeploymentResourcePoolDedicatedResourcesPtrOutput)
}

// The resource name of deployment resource pool. The maximum length is 63 characters, and valid characters are `/^a-z?$/`.
//
// ***
func (o AiDeploymentResourcePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiDeploymentResourcePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiDeploymentResourcePoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiDeploymentResourcePool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of deployment resource pool. eg us-central1
func (o AiDeploymentResourcePoolOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiDeploymentResourcePool) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

type AiDeploymentResourcePoolArrayOutput struct{ *pulumi.OutputState }

func (AiDeploymentResourcePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiDeploymentResourcePool)(nil)).Elem()
}

func (o AiDeploymentResourcePoolArrayOutput) ToAiDeploymentResourcePoolArrayOutput() AiDeploymentResourcePoolArrayOutput {
	return o
}

func (o AiDeploymentResourcePoolArrayOutput) ToAiDeploymentResourcePoolArrayOutputWithContext(ctx context.Context) AiDeploymentResourcePoolArrayOutput {
	return o
}

func (o AiDeploymentResourcePoolArrayOutput) Index(i pulumi.IntInput) AiDeploymentResourcePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiDeploymentResourcePool {
		return vs[0].([]*AiDeploymentResourcePool)[vs[1].(int)]
	}).(AiDeploymentResourcePoolOutput)
}

type AiDeploymentResourcePoolMapOutput struct{ *pulumi.OutputState }

func (AiDeploymentResourcePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiDeploymentResourcePool)(nil)).Elem()
}

func (o AiDeploymentResourcePoolMapOutput) ToAiDeploymentResourcePoolMapOutput() AiDeploymentResourcePoolMapOutput {
	return o
}

func (o AiDeploymentResourcePoolMapOutput) ToAiDeploymentResourcePoolMapOutputWithContext(ctx context.Context) AiDeploymentResourcePoolMapOutput {
	return o
}

func (o AiDeploymentResourcePoolMapOutput) MapIndex(k pulumi.StringInput) AiDeploymentResourcePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiDeploymentResourcePool {
		return vs[0].(map[string]*AiDeploymentResourcePool)[vs[1].(string)]
	}).(AiDeploymentResourcePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiDeploymentResourcePoolInput)(nil)).Elem(), &AiDeploymentResourcePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiDeploymentResourcePoolArrayInput)(nil)).Elem(), AiDeploymentResourcePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiDeploymentResourcePoolMapInput)(nil)).Elem(), AiDeploymentResourcePoolMap{})
	pulumi.RegisterOutputType(AiDeploymentResourcePoolOutput{})
	pulumi.RegisterOutputType(AiDeploymentResourcePoolArrayOutput{})
	pulumi.RegisterOutputType(AiDeploymentResourcePoolMapOutput{})
}
