// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vertex AI Feature Group.
//
// To get more information about FeatureGroup, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureGroups)
// * How-to Guides
//   - [Creating a Feature Group](https://cloud.google.com/vertex-ai/docs/featurestore/latest/create-featuregroup)
//
// ## Example Usage
// ### Vertex Ai Feature Group
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sampleDataset, err := bigquery.NewDataset(ctx, "sampleDataset", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_load_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			sampleTable, err := bigquery.NewTable(ctx, "sampleTable", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				DatasetId:          sampleDataset.DatasetId,
//				TableId:            pulumi.String("job_load_table"),
//				Schema: pulumi.String(`[
//	    {
//	        "name": "feature_id",
//	        "type": "STRING",
//	        "mode": "NULLABLE"
//	    },
//	    {
//	        "name": "feature_timestamp",
//	        "type": "TIMESTAMP",
//	        "mode": "NULLABLE"
//	    }
//
// ]
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureGroup(ctx, "featureGroup", &vertex.AiFeatureGroupArgs{
//				Description: pulumi.String("A sample feature group"),
//				Region:      pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//				BigQuery: &vertex.AiFeatureGroupBigQueryArgs{
//					BigQuerySource: &vertex.AiFeatureGroupBigQueryBigQuerySourceArgs{
//						InputUri: pulumi.All(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).ApplyT(func(_args []interface{}) (string, error) {
//							project := _args[0].(string)
//							datasetId := _args[1].(string)
//							tableId := _args[2].(string)
//							return fmt.Sprintf("bq://%v.%v.%v", project, datasetId, tableId), nil
//						}).(pulumi.StringOutput),
//					},
//					EntityIdColumns: pulumi.StringArray{
//						pulumi.String("feature_id"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FeatureGroup can be imported using any of these accepted formats* `projects/{{project}}/locations/{{region}}/featureGroups/{{name}}` * `{{project}}/{{region}}/{{name}}` * `{{region}}/{{name}}` * `{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import FeatureGroup using one of the formats above. For exampletf import {
//
//	id = "projects/{{project}}/locations/{{region}}/featureGroups/{{name}}"
//
//	to = google_vertex_ai_feature_group.default }
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), FeatureGroup can be imported using one of the formats above. For example
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup default projects/{{project}}/locations/{{region}}/featureGroups/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup default {{name}}
//
// ```
type AiFeatureGroup struct {
	pulumi.CustomResourceState

	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entityId and a featureTimestamp column in the source.
	// Structure is documented below.
	BigQuery AiFeatureGroupBigQueryPtrOutput `pulumi:"bigQuery"`
	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the FeatureGroup.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name of the Feature Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The region of feature group. eg us-central1
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAiFeatureGroup registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureGroup(ctx *pulumi.Context,
	name string, args *AiFeatureGroupArgs, opts ...pulumi.ResourceOption) (*AiFeatureGroup, error) {
	if args == nil {
		args = &AiFeatureGroupArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiFeatureGroup
	err := ctx.RegisterResource("gcp:vertex/aiFeatureGroup:AiFeatureGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureGroup gets an existing AiFeatureGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureGroupState, opts ...pulumi.ResourceOption) (*AiFeatureGroup, error) {
	var resource AiFeatureGroup
	err := ctx.ReadResource("gcp:vertex/aiFeatureGroup:AiFeatureGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureGroup resources.
type aiFeatureGroupState struct {
	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entityId and a featureTimestamp column in the source.
	// Structure is documented below.
	BigQuery *AiFeatureGroupBigQuery `pulumi:"bigQuery"`
	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// The description of the FeatureGroup.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Feature Group.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The region of feature group. eg us-central1
	Region *string `pulumi:"region"`
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
}

type AiFeatureGroupState struct {
	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entityId and a featureTimestamp column in the source.
	// Structure is documented below.
	BigQuery AiFeatureGroupBigQueryPtrInput
	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// The description of the FeatureGroup.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Feature Group.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The region of feature group. eg us-central1
	Region pulumi.StringPtrInput
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringPtrInput
}

func (AiFeatureGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupState)(nil)).Elem()
}

type aiFeatureGroupArgs struct {
	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entityId and a featureTimestamp column in the source.
	// Structure is documented below.
	BigQuery *AiFeatureGroupBigQuery `pulumi:"bigQuery"`
	// The description of the FeatureGroup.
	Description *string `pulumi:"description"`
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Feature Group.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiFeatureGroup resource.
type AiFeatureGroupArgs struct {
	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entityId and a featureTimestamp column in the source.
	// Structure is documented below.
	BigQuery AiFeatureGroupBigQueryPtrInput
	// The description of the FeatureGroup.
	Description pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your FeatureGroup.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Feature Group.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiFeatureGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupArgs)(nil)).Elem()
}

type AiFeatureGroupInput interface {
	pulumi.Input

	ToAiFeatureGroupOutput() AiFeatureGroupOutput
	ToAiFeatureGroupOutputWithContext(ctx context.Context) AiFeatureGroupOutput
}

func (*AiFeatureGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroup)(nil)).Elem()
}

func (i *AiFeatureGroup) ToAiFeatureGroupOutput() AiFeatureGroupOutput {
	return i.ToAiFeatureGroupOutputWithContext(context.Background())
}

func (i *AiFeatureGroup) ToAiFeatureGroupOutputWithContext(ctx context.Context) AiFeatureGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupOutput)
}

// AiFeatureGroupArrayInput is an input type that accepts AiFeatureGroupArray and AiFeatureGroupArrayOutput values.
// You can construct a concrete instance of `AiFeatureGroupArrayInput` via:
//
//	AiFeatureGroupArray{ AiFeatureGroupArgs{...} }
type AiFeatureGroupArrayInput interface {
	pulumi.Input

	ToAiFeatureGroupArrayOutput() AiFeatureGroupArrayOutput
	ToAiFeatureGroupArrayOutputWithContext(context.Context) AiFeatureGroupArrayOutput
}

type AiFeatureGroupArray []AiFeatureGroupInput

func (AiFeatureGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroup)(nil)).Elem()
}

func (i AiFeatureGroupArray) ToAiFeatureGroupArrayOutput() AiFeatureGroupArrayOutput {
	return i.ToAiFeatureGroupArrayOutputWithContext(context.Background())
}

func (i AiFeatureGroupArray) ToAiFeatureGroupArrayOutputWithContext(ctx context.Context) AiFeatureGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupArrayOutput)
}

// AiFeatureGroupMapInput is an input type that accepts AiFeatureGroupMap and AiFeatureGroupMapOutput values.
// You can construct a concrete instance of `AiFeatureGroupMapInput` via:
//
//	AiFeatureGroupMap{ "key": AiFeatureGroupArgs{...} }
type AiFeatureGroupMapInput interface {
	pulumi.Input

	ToAiFeatureGroupMapOutput() AiFeatureGroupMapOutput
	ToAiFeatureGroupMapOutputWithContext(context.Context) AiFeatureGroupMapOutput
}

type AiFeatureGroupMap map[string]AiFeatureGroupInput

func (AiFeatureGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroup)(nil)).Elem()
}

func (i AiFeatureGroupMap) ToAiFeatureGroupMapOutput() AiFeatureGroupMapOutput {
	return i.ToAiFeatureGroupMapOutputWithContext(context.Background())
}

func (i AiFeatureGroupMap) ToAiFeatureGroupMapOutputWithContext(ctx context.Context) AiFeatureGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupMapOutput)
}

type AiFeatureGroupOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroup)(nil)).Elem()
}

func (o AiFeatureGroupOutput) ToAiFeatureGroupOutput() AiFeatureGroupOutput {
	return o
}

func (o AiFeatureGroupOutput) ToAiFeatureGroupOutputWithContext(ctx context.Context) AiFeatureGroupOutput {
	return o
}

// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entityId and a featureTimestamp column in the source.
// Structure is documented below.
func (o AiFeatureGroupOutput) BigQuery() AiFeatureGroupBigQueryPtrOutput {
	return o.ApplyT(func(v *AiFeatureGroup) AiFeatureGroupBigQueryPtrOutput { return v.BigQuery }).(AiFeatureGroupBigQueryPtrOutput)
}

// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiFeatureGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the FeatureGroup.
func (o AiFeatureGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AiFeatureGroupOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Used to perform consistent read-modify-write updates.
func (o AiFeatureGroupOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The labels with user-defined metadata to organize your FeatureGroup.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o AiFeatureGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the Feature Group.
func (o AiFeatureGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiFeatureGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AiFeatureGroupOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The region of feature group. eg us-central1
func (o AiFeatureGroupOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiFeatureGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AiFeatureGroupArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroup)(nil)).Elem()
}

func (o AiFeatureGroupArrayOutput) ToAiFeatureGroupArrayOutput() AiFeatureGroupArrayOutput {
	return o
}

func (o AiFeatureGroupArrayOutput) ToAiFeatureGroupArrayOutputWithContext(ctx context.Context) AiFeatureGroupArrayOutput {
	return o
}

func (o AiFeatureGroupArrayOutput) Index(i pulumi.IntInput) AiFeatureGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureGroup {
		return vs[0].([]*AiFeatureGroup)[vs[1].(int)]
	}).(AiFeatureGroupOutput)
}

type AiFeatureGroupMapOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroup)(nil)).Elem()
}

func (o AiFeatureGroupMapOutput) ToAiFeatureGroupMapOutput() AiFeatureGroupMapOutput {
	return o
}

func (o AiFeatureGroupMapOutput) ToAiFeatureGroupMapOutputWithContext(ctx context.Context) AiFeatureGroupMapOutput {
	return o
}

func (o AiFeatureGroupMapOutput) MapIndex(k pulumi.StringInput) AiFeatureGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureGroup {
		return vs[0].(map[string]*AiFeatureGroup)[vs[1].(string)]
	}).(AiFeatureGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupInput)(nil)).Elem(), &AiFeatureGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupArrayInput)(nil)).Elem(), AiFeatureGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupMapInput)(nil)).Elem(), AiFeatureGroupMap{})
	pulumi.RegisterOutputType(AiFeatureGroupOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupMapOutput{})
}
