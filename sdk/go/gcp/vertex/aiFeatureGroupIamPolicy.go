// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Vertex AI FeatureGroup. Each of these resources serves a different use case:
//
// * `vertex.AiFeatureGroupIamPolicy`: Authoritative. Sets the IAM policy for the featuregroup and replaces any existing policy already attached.
// * `vertex.AiFeatureGroupIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the featuregroup are preserved.
// * `vertex.AiFeatureGroupIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the featuregroup are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `vertex.AiFeatureGroupIamPolicy`: Retrieves the IAM policy for the featuregroup
//
// > **Note:** `vertex.AiFeatureGroupIamPolicy` **cannot** be used in conjunction with `vertex.AiFeatureGroupIamBinding` and `vertex.AiFeatureGroupIamMember` or they will fight over what your policy should be.
//
// > **Note:** `vertex.AiFeatureGroupIamBinding` resources **can be** used in conjunction with `vertex.AiFeatureGroupIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## vertex.AiFeatureGroupIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureGroupIamPolicy(ctx, "policy", &vertex.AiFeatureGroupIamPolicyArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureGroupIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureGroupIamBinding(ctx, "binding", &vertex.AiFeatureGroupIamBindingArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureGroupIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureGroupIamMember(ctx, "member", &vertex.AiFeatureGroupIamMemberArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Vertex AI FeatureGroup
//
// Three different resources help you manage your IAM policy for Vertex AI FeatureGroup. Each of these resources serves a different use case:
//
// * `vertex.AiFeatureGroupIamPolicy`: Authoritative. Sets the IAM policy for the featuregroup and replaces any existing policy already attached.
// * `vertex.AiFeatureGroupIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the featuregroup are preserved.
// * `vertex.AiFeatureGroupIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the featuregroup are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `vertex.AiFeatureGroupIamPolicy`: Retrieves the IAM policy for the featuregroup
//
// > **Note:** `vertex.AiFeatureGroupIamPolicy` **cannot** be used in conjunction with `vertex.AiFeatureGroupIamBinding` and `vertex.AiFeatureGroupIamMember` or they will fight over what your policy should be.
//
// > **Note:** `vertex.AiFeatureGroupIamBinding` resources **can be** used in conjunction with `vertex.AiFeatureGroupIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## vertex.AiFeatureGroupIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureGroupIamPolicy(ctx, "policy", &vertex.AiFeatureGroupIamPolicyArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureGroupIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureGroupIamBinding(ctx, "binding", &vertex.AiFeatureGroupIamBindingArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## vertex.AiFeatureGroupIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureGroupIamMember(ctx, "member", &vertex.AiFeatureGroupIamMemberArgs{
//				Region:       pulumi.Any(featureGroup.Region),
//				FeatureGroup: pulumi.Any(featureGroup.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{region}}/featureGroups/{{name}}
//
// * {{project}}/{{region}}/{{name}}
//
// * {{region}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Vertex AI featuregroup IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamPolicy:AiFeatureGroupIamPolicy editor "projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamPolicy:AiFeatureGroupIamPolicy editor "projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamPolicy:AiFeatureGroupIamPolicy editor projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AiFeatureGroupIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringOutput `pulumi:"featureGroup"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewAiFeatureGroupIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureGroupIamPolicy(ctx *pulumi.Context,
	name string, args *AiFeatureGroupIamPolicyArgs, opts ...pulumi.ResourceOption) (*AiFeatureGroupIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureGroup == nil {
		return nil, errors.New("invalid value for required argument 'FeatureGroup'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiFeatureGroupIamPolicy
	err := ctx.RegisterResource("gcp:vertex/aiFeatureGroupIamPolicy:AiFeatureGroupIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureGroupIamPolicy gets an existing AiFeatureGroupIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureGroupIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureGroupIamPolicyState, opts ...pulumi.ResourceOption) (*AiFeatureGroupIamPolicy, error) {
	var resource AiFeatureGroupIamPolicy
	err := ctx.ReadResource("gcp:vertex/aiFeatureGroupIamPolicy:AiFeatureGroupIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureGroupIamPolicy resources.
type aiFeatureGroupIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup *string `pulumi:"featureGroup"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

type AiFeatureGroupIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (AiFeatureGroupIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupIamPolicyState)(nil)).Elem()
}

type aiFeatureGroupIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup string `pulumi:"featureGroup"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiFeatureGroupIamPolicy resource.
type AiFeatureGroupIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (AiFeatureGroupIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupIamPolicyArgs)(nil)).Elem()
}

type AiFeatureGroupIamPolicyInput interface {
	pulumi.Input

	ToAiFeatureGroupIamPolicyOutput() AiFeatureGroupIamPolicyOutput
	ToAiFeatureGroupIamPolicyOutputWithContext(ctx context.Context) AiFeatureGroupIamPolicyOutput
}

func (*AiFeatureGroupIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroupIamPolicy)(nil)).Elem()
}

func (i *AiFeatureGroupIamPolicy) ToAiFeatureGroupIamPolicyOutput() AiFeatureGroupIamPolicyOutput {
	return i.ToAiFeatureGroupIamPolicyOutputWithContext(context.Background())
}

func (i *AiFeatureGroupIamPolicy) ToAiFeatureGroupIamPolicyOutputWithContext(ctx context.Context) AiFeatureGroupIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamPolicyOutput)
}

// AiFeatureGroupIamPolicyArrayInput is an input type that accepts AiFeatureGroupIamPolicyArray and AiFeatureGroupIamPolicyArrayOutput values.
// You can construct a concrete instance of `AiFeatureGroupIamPolicyArrayInput` via:
//
//	AiFeatureGroupIamPolicyArray{ AiFeatureGroupIamPolicyArgs{...} }
type AiFeatureGroupIamPolicyArrayInput interface {
	pulumi.Input

	ToAiFeatureGroupIamPolicyArrayOutput() AiFeatureGroupIamPolicyArrayOutput
	ToAiFeatureGroupIamPolicyArrayOutputWithContext(context.Context) AiFeatureGroupIamPolicyArrayOutput
}

type AiFeatureGroupIamPolicyArray []AiFeatureGroupIamPolicyInput

func (AiFeatureGroupIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroupIamPolicy)(nil)).Elem()
}

func (i AiFeatureGroupIamPolicyArray) ToAiFeatureGroupIamPolicyArrayOutput() AiFeatureGroupIamPolicyArrayOutput {
	return i.ToAiFeatureGroupIamPolicyArrayOutputWithContext(context.Background())
}

func (i AiFeatureGroupIamPolicyArray) ToAiFeatureGroupIamPolicyArrayOutputWithContext(ctx context.Context) AiFeatureGroupIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamPolicyArrayOutput)
}

// AiFeatureGroupIamPolicyMapInput is an input type that accepts AiFeatureGroupIamPolicyMap and AiFeatureGroupIamPolicyMapOutput values.
// You can construct a concrete instance of `AiFeatureGroupIamPolicyMapInput` via:
//
//	AiFeatureGroupIamPolicyMap{ "key": AiFeatureGroupIamPolicyArgs{...} }
type AiFeatureGroupIamPolicyMapInput interface {
	pulumi.Input

	ToAiFeatureGroupIamPolicyMapOutput() AiFeatureGroupIamPolicyMapOutput
	ToAiFeatureGroupIamPolicyMapOutputWithContext(context.Context) AiFeatureGroupIamPolicyMapOutput
}

type AiFeatureGroupIamPolicyMap map[string]AiFeatureGroupIamPolicyInput

func (AiFeatureGroupIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroupIamPolicy)(nil)).Elem()
}

func (i AiFeatureGroupIamPolicyMap) ToAiFeatureGroupIamPolicyMapOutput() AiFeatureGroupIamPolicyMapOutput {
	return i.ToAiFeatureGroupIamPolicyMapOutputWithContext(context.Background())
}

func (i AiFeatureGroupIamPolicyMap) ToAiFeatureGroupIamPolicyMapOutputWithContext(ctx context.Context) AiFeatureGroupIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamPolicyMapOutput)
}

type AiFeatureGroupIamPolicyOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroupIamPolicy)(nil)).Elem()
}

func (o AiFeatureGroupIamPolicyOutput) ToAiFeatureGroupIamPolicyOutput() AiFeatureGroupIamPolicyOutput {
	return o
}

func (o AiFeatureGroupIamPolicyOutput) ToAiFeatureGroupIamPolicyOutputWithContext(ctx context.Context) AiFeatureGroupIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o AiFeatureGroupIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AiFeatureGroupIamPolicyOutput) FeatureGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamPolicy) pulumi.StringOutput { return v.FeatureGroup }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o AiFeatureGroupIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o AiFeatureGroupIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o AiFeatureGroupIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type AiFeatureGroupIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroupIamPolicy)(nil)).Elem()
}

func (o AiFeatureGroupIamPolicyArrayOutput) ToAiFeatureGroupIamPolicyArrayOutput() AiFeatureGroupIamPolicyArrayOutput {
	return o
}

func (o AiFeatureGroupIamPolicyArrayOutput) ToAiFeatureGroupIamPolicyArrayOutputWithContext(ctx context.Context) AiFeatureGroupIamPolicyArrayOutput {
	return o
}

func (o AiFeatureGroupIamPolicyArrayOutput) Index(i pulumi.IntInput) AiFeatureGroupIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureGroupIamPolicy {
		return vs[0].([]*AiFeatureGroupIamPolicy)[vs[1].(int)]
	}).(AiFeatureGroupIamPolicyOutput)
}

type AiFeatureGroupIamPolicyMapOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroupIamPolicy)(nil)).Elem()
}

func (o AiFeatureGroupIamPolicyMapOutput) ToAiFeatureGroupIamPolicyMapOutput() AiFeatureGroupIamPolicyMapOutput {
	return o
}

func (o AiFeatureGroupIamPolicyMapOutput) ToAiFeatureGroupIamPolicyMapOutputWithContext(ctx context.Context) AiFeatureGroupIamPolicyMapOutput {
	return o
}

func (o AiFeatureGroupIamPolicyMapOutput) MapIndex(k pulumi.StringInput) AiFeatureGroupIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureGroupIamPolicy {
		return vs[0].(map[string]*AiFeatureGroupIamPolicy)[vs[1].(string)]
	}).(AiFeatureGroupIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamPolicyInput)(nil)).Elem(), &AiFeatureGroupIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamPolicyArrayInput)(nil)).Elem(), AiFeatureGroupIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamPolicyMapInput)(nil)).Elem(), AiFeatureGroupIamPolicyMap{})
	pulumi.RegisterOutputType(AiFeatureGroupIamPolicyOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupIamPolicyMapOutput{})
}
