// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ReasoningEngine provides a customizable runtime for models to determine which actions to take and in which order.
//
// To get more information about ReasoningEngine, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.reasoningEngines/)
// * How-to Guides
//   - [Develop and deploy agents on Vertex AI Agent Engine](https://cloud.google.com/vertex-ai/generative-ai/docs/agent-engine/quickstart)
//
// ## Example Usage
//
// ### Vertex Ai Reasoning Engine Full
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/storage"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/vertex"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			classMethods := []map[string]interface{}{
//				map[string]interface{}{
//					"apiMode":     "async",
//					"description": nil,
//					"name":        "async_query",
//					"parameters": map[string]interface{}{
//						"type":       "object",
//						"required":   []interface{}{},
//						"properties": map[string]interface{}{},
//					},
//				},
//			}
//			secret, err := secretmanager.NewSecret(ctx, "secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			secretVersion, err := secretmanager.NewSecretVersion(ctx, "secret_version", &secretmanager.SecretVersionArgs{
//				Secret:     secret.ID(),
//				SecretData: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				AccountId: pulumi.String("sa"),
//			})
//			if err != nil {
//				return err
//			}
//			secretAccess, err := secretmanager.NewSecretIamMember(ctx, "secret_access", &secretmanager.SecretIamMemberArgs{
//				SecretId: secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			saIamObjectViewer, err := projects.NewIAMMember(ctx, "sa_iam_object_viewer", &projects.IAMMemberArgs{
//				Role:    pulumi.String("roles/storage.objectViewer"),
//				Project: pulumi.String(project.Id),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			saIamAiPlatformUser, err := projects.NewIAMMember(ctx, "sa_iam_ai_platform_user", &projects.IAMMemberArgs{
//				Role:    pulumi.String("roles/aiplatform.user"),
//				Project: pulumi.String(project.Id),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			saIamViewer, err := projects.NewIAMMember(ctx, "sa_iam_viewer", &projects.IAMMemberArgs{
//				Role:    pulumi.String("roles/viewer"),
//				Project: pulumi.String(project.Id),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			// Ensure we wait enough time for IAM permissions to be propagated
//			wait5Minutes, err := time.NewSleep(ctx, "wait_5_minutes", &time.SleepArgs{
//				CreateDuration: "5m",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				saIamAiPlatformUser,
//				saIamObjectViewer,
//				saIamViewer,
//				secretAccess,
//				secretVersion,
//			}))
//			if err != nil {
//				return err
//			}
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("reasoning-engine"),
//				Location:                 pulumi.String("us-central1"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//				ForceDestroy:             pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			bucketObjRequirementsTxt, err := storage.NewBucketObject(ctx, "bucket_obj_requirements_txt", &storage.BucketObjectArgs{
//				Name:   pulumi.String("requirements.txt"),
//				Bucket: bucket.ID(),
//				Source: pulumi.NewFileAsset("./test-fixtures/requirements_adk.txt"),
//			})
//			if err != nil {
//				return err
//			}
//			bucketObjPickle, err := storage.NewBucketObject(ctx, "bucket_obj_pickle", &storage.BucketObjectArgs{
//				Name:   pulumi.String("code.pkl"),
//				Bucket: bucket.ID(),
//				Source: pulumi.NewFileAsset("./test-fixtures/pickle_adk.pkl"),
//			})
//			if err != nil {
//				return err
//			}
//			bucketObjDependenciesTarGz, err := storage.NewBucketObject(ctx, "bucket_obj_dependencies_tar_gz", &storage.BucketObjectArgs{
//				Name:   pulumi.String("dependencies.tar.gz"),
//				Bucket: bucket.ID(),
//				Source: pulumi.NewFileAsset("./test-fixtures/dependencies_adk.tar.gz"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(classMethods)
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = vertex.NewAiReasoningEngine(ctx, "reasoning_engine", &vertex.AiReasoningEngineArgs{
//				DisplayName: pulumi.String("reasoning-engine"),
//				Description: pulumi.String("A basic reasoning engine"),
//				Region:      pulumi.String("us-central1"),
//				EncryptionSpec: &vertex.AiReasoningEngineEncryptionSpecArgs{
//					KmsKeyName: pulumi.String("example-key"),
//				},
//				Spec: &vertex.AiReasoningEngineSpecArgs{
//					AgentFramework: pulumi.String("google-adk"),
//					ClassMethods:   pulumi.String(json0),
//					ServiceAccount: serviceAccount.Email,
//					DeploymentSpec: &vertex.AiReasoningEngineSpecDeploymentSpecArgs{
//						Envs: vertex.AiReasoningEngineSpecDeploymentSpecEnvArray{
//							&vertex.AiReasoningEngineSpecDeploymentSpecEnvArgs{
//								Name:  pulumi.String("var_1"),
//								Value: pulumi.String("value_2"),
//							},
//							&vertex.AiReasoningEngineSpecDeploymentSpecEnvArgs{
//								Name:  pulumi.String("var_2"),
//								Value: pulumi.String("value_2"),
//							},
//						},
//						SecretEnvs: vertex.AiReasoningEngineSpecDeploymentSpecSecretEnvArray{
//							&vertex.AiReasoningEngineSpecDeploymentSpecSecretEnvArgs{
//								Name: pulumi.String("secret_var_1"),
//								SecretRef: &vertex.AiReasoningEngineSpecDeploymentSpecSecretEnvSecretRefArgs{
//									Secret:  secret.SecretId,
//									Version: pulumi.String("latest"),
//								},
//							},
//							&vertex.AiReasoningEngineSpecDeploymentSpecSecretEnvArgs{
//								Name: pulumi.String("secret_var_2"),
//								SecretRef: &vertex.AiReasoningEngineSpecDeploymentSpecSecretEnvSecretRefArgs{
//									Secret:  secret.SecretId,
//									Version: pulumi.String("latest"),
//								},
//							},
//						},
//					},
//					PackageSpec: &vertex.AiReasoningEngineSpecPackageSpecArgs{
//						DependencyFilesGcsUri: pulumi.All(bucket.Url, bucketObjDependenciesTarGz.Name).ApplyT(func(_args []interface{}) (string, error) {
//							url := _args[0].(string)
//							name := _args[1].(string)
//							return fmt.Sprintf("%v/%v", url, name), nil
//						}).(pulumi.StringOutput),
//						PickleObjectGcsUri: pulumi.All(bucket.Url, bucketObjPickle.Name).ApplyT(func(_args []interface{}) (string, error) {
//							url := _args[0].(string)
//							name := _args[1].(string)
//							return fmt.Sprintf("%v/%v", url, name), nil
//						}).(pulumi.StringOutput),
//						PythonVersion: pulumi.String("3.11"),
//						RequirementsGcsUri: pulumi.All(bucket.Url, bucketObjRequirementsTxt.Name).ApplyT(func(_args []interface{}) (string, error) {
//							url := _args[0].(string)
//							name := _args[1].(string)
//							return fmt.Sprintf("%v/%v", url, name), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait5Minutes,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ReasoningEngine can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}`
//
// * `{{project}}/{{region}}/{{name}}`
//
// * `{{region}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, ReasoningEngine can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{name}}
// ```
type AiReasoningEngine struct {
	pulumi.CustomResourceState

	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the ReasoningEngine.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the ReasoningEngine.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Optional. Customer-managed encryption key spec for a ReasoningEngine.
	// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
	// Structure is documented below.
	EncryptionSpec AiReasoningEngineEncryptionSpecPtrOutput `pulumi:"encryptionSpec"`
	// The generated name of the ReasoningEngine, in the format
	// 'projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}'
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the reasoning engine. eg us-central1
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Optional. Configurations of the ReasoningEngine.
	// Structure is documented below.
	Spec AiReasoningEngineSpecPtrOutput `pulumi:"spec"`
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAiReasoningEngine registers a new resource with the given unique name, arguments, and options.
func NewAiReasoningEngine(ctx *pulumi.Context,
	name string, args *AiReasoningEngineArgs, opts ...pulumi.ResourceOption) (*AiReasoningEngine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiReasoningEngine
	err := ctx.RegisterResource("gcp:vertex/aiReasoningEngine:AiReasoningEngine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiReasoningEngine gets an existing AiReasoningEngine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiReasoningEngine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiReasoningEngineState, opts ...pulumi.ResourceOption) (*AiReasoningEngine, error) {
	var resource AiReasoningEngine
	err := ctx.ReadResource("gcp:vertex/aiReasoningEngine:AiReasoningEngine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiReasoningEngine resources.
type aiReasoningEngineState struct {
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// The description of the ReasoningEngine.
	Description *string `pulumi:"description"`
	// The display name of the ReasoningEngine.
	DisplayName *string `pulumi:"displayName"`
	// Optional. Customer-managed encryption key spec for a ReasoningEngine.
	// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
	// Structure is documented below.
	EncryptionSpec *AiReasoningEngineEncryptionSpec `pulumi:"encryptionSpec"`
	// The generated name of the ReasoningEngine, in the format
	// 'projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}'
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the reasoning engine. eg us-central1
	Region *string `pulumi:"region"`
	// Optional. Configurations of the ReasoningEngine.
	// Structure is documented below.
	Spec *AiReasoningEngineSpec `pulumi:"spec"`
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
}

type AiReasoningEngineState struct {
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// The description of the ReasoningEngine.
	Description pulumi.StringPtrInput
	// The display name of the ReasoningEngine.
	DisplayName pulumi.StringPtrInput
	// Optional. Customer-managed encryption key spec for a ReasoningEngine.
	// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
	// Structure is documented below.
	EncryptionSpec AiReasoningEngineEncryptionSpecPtrInput
	// The generated name of the ReasoningEngine, in the format
	// 'projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}'
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the reasoning engine. eg us-central1
	Region pulumi.StringPtrInput
	// Optional. Configurations of the ReasoningEngine.
	// Structure is documented below.
	Spec AiReasoningEngineSpecPtrInput
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringPtrInput
}

func (AiReasoningEngineState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiReasoningEngineState)(nil)).Elem()
}

type aiReasoningEngineArgs struct {
	// The description of the ReasoningEngine.
	Description *string `pulumi:"description"`
	// The display name of the ReasoningEngine.
	DisplayName string `pulumi:"displayName"`
	// Optional. Customer-managed encryption key spec for a ReasoningEngine.
	// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
	// Structure is documented below.
	EncryptionSpec *AiReasoningEngineEncryptionSpec `pulumi:"encryptionSpec"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the reasoning engine. eg us-central1
	Region *string `pulumi:"region"`
	// Optional. Configurations of the ReasoningEngine.
	// Structure is documented below.
	Spec *AiReasoningEngineSpec `pulumi:"spec"`
}

// The set of arguments for constructing a AiReasoningEngine resource.
type AiReasoningEngineArgs struct {
	// The description of the ReasoningEngine.
	Description pulumi.StringPtrInput
	// The display name of the ReasoningEngine.
	DisplayName pulumi.StringInput
	// Optional. Customer-managed encryption key spec for a ReasoningEngine.
	// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
	// Structure is documented below.
	EncryptionSpec AiReasoningEngineEncryptionSpecPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the reasoning engine. eg us-central1
	Region pulumi.StringPtrInput
	// Optional. Configurations of the ReasoningEngine.
	// Structure is documented below.
	Spec AiReasoningEngineSpecPtrInput
}

func (AiReasoningEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiReasoningEngineArgs)(nil)).Elem()
}

type AiReasoningEngineInput interface {
	pulumi.Input

	ToAiReasoningEngineOutput() AiReasoningEngineOutput
	ToAiReasoningEngineOutputWithContext(ctx context.Context) AiReasoningEngineOutput
}

func (*AiReasoningEngine) ElementType() reflect.Type {
	return reflect.TypeOf((**AiReasoningEngine)(nil)).Elem()
}

func (i *AiReasoningEngine) ToAiReasoningEngineOutput() AiReasoningEngineOutput {
	return i.ToAiReasoningEngineOutputWithContext(context.Background())
}

func (i *AiReasoningEngine) ToAiReasoningEngineOutputWithContext(ctx context.Context) AiReasoningEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiReasoningEngineOutput)
}

// AiReasoningEngineArrayInput is an input type that accepts AiReasoningEngineArray and AiReasoningEngineArrayOutput values.
// You can construct a concrete instance of `AiReasoningEngineArrayInput` via:
//
//	AiReasoningEngineArray{ AiReasoningEngineArgs{...} }
type AiReasoningEngineArrayInput interface {
	pulumi.Input

	ToAiReasoningEngineArrayOutput() AiReasoningEngineArrayOutput
	ToAiReasoningEngineArrayOutputWithContext(context.Context) AiReasoningEngineArrayOutput
}

type AiReasoningEngineArray []AiReasoningEngineInput

func (AiReasoningEngineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiReasoningEngine)(nil)).Elem()
}

func (i AiReasoningEngineArray) ToAiReasoningEngineArrayOutput() AiReasoningEngineArrayOutput {
	return i.ToAiReasoningEngineArrayOutputWithContext(context.Background())
}

func (i AiReasoningEngineArray) ToAiReasoningEngineArrayOutputWithContext(ctx context.Context) AiReasoningEngineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiReasoningEngineArrayOutput)
}

// AiReasoningEngineMapInput is an input type that accepts AiReasoningEngineMap and AiReasoningEngineMapOutput values.
// You can construct a concrete instance of `AiReasoningEngineMapInput` via:
//
//	AiReasoningEngineMap{ "key": AiReasoningEngineArgs{...} }
type AiReasoningEngineMapInput interface {
	pulumi.Input

	ToAiReasoningEngineMapOutput() AiReasoningEngineMapOutput
	ToAiReasoningEngineMapOutputWithContext(context.Context) AiReasoningEngineMapOutput
}

type AiReasoningEngineMap map[string]AiReasoningEngineInput

func (AiReasoningEngineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiReasoningEngine)(nil)).Elem()
}

func (i AiReasoningEngineMap) ToAiReasoningEngineMapOutput() AiReasoningEngineMapOutput {
	return i.ToAiReasoningEngineMapOutputWithContext(context.Background())
}

func (i AiReasoningEngineMap) ToAiReasoningEngineMapOutputWithContext(ctx context.Context) AiReasoningEngineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiReasoningEngineMapOutput)
}

type AiReasoningEngineOutput struct{ *pulumi.OutputState }

func (AiReasoningEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiReasoningEngine)(nil)).Elem()
}

func (o AiReasoningEngineOutput) ToAiReasoningEngineOutput() AiReasoningEngineOutput {
	return o
}

func (o AiReasoningEngineOutput) ToAiReasoningEngineOutputWithContext(ctx context.Context) AiReasoningEngineOutput {
	return o
}

// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format,
// with nanosecond resolution and up to nine fractional digits.
func (o AiReasoningEngineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiReasoningEngine) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the ReasoningEngine.
func (o AiReasoningEngineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiReasoningEngine) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the ReasoningEngine.
func (o AiReasoningEngineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AiReasoningEngine) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. Customer-managed encryption key spec for a ReasoningEngine.
// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
// Structure is documented below.
func (o AiReasoningEngineOutput) EncryptionSpec() AiReasoningEngineEncryptionSpecPtrOutput {
	return o.ApplyT(func(v *AiReasoningEngine) AiReasoningEngineEncryptionSpecPtrOutput { return v.EncryptionSpec }).(AiReasoningEngineEncryptionSpecPtrOutput)
}

// The generated name of the ReasoningEngine, in the format
// 'projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}'
func (o AiReasoningEngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiReasoningEngine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiReasoningEngineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiReasoningEngine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the reasoning engine. eg us-central1
func (o AiReasoningEngineOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiReasoningEngine) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Optional. Configurations of the ReasoningEngine.
// Structure is documented below.
func (o AiReasoningEngineOutput) Spec() AiReasoningEngineSpecPtrOutput {
	return o.ApplyT(func(v *AiReasoningEngine) AiReasoningEngineSpecPtrOutput { return v.Spec }).(AiReasoningEngineSpecPtrOutput)
}

// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format,
// with nanosecond resolution and up to nine fractional digits.
func (o AiReasoningEngineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiReasoningEngine) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AiReasoningEngineArrayOutput struct{ *pulumi.OutputState }

func (AiReasoningEngineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiReasoningEngine)(nil)).Elem()
}

func (o AiReasoningEngineArrayOutput) ToAiReasoningEngineArrayOutput() AiReasoningEngineArrayOutput {
	return o
}

func (o AiReasoningEngineArrayOutput) ToAiReasoningEngineArrayOutputWithContext(ctx context.Context) AiReasoningEngineArrayOutput {
	return o
}

func (o AiReasoningEngineArrayOutput) Index(i pulumi.IntInput) AiReasoningEngineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiReasoningEngine {
		return vs[0].([]*AiReasoningEngine)[vs[1].(int)]
	}).(AiReasoningEngineOutput)
}

type AiReasoningEngineMapOutput struct{ *pulumi.OutputState }

func (AiReasoningEngineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiReasoningEngine)(nil)).Elem()
}

func (o AiReasoningEngineMapOutput) ToAiReasoningEngineMapOutput() AiReasoningEngineMapOutput {
	return o
}

func (o AiReasoningEngineMapOutput) ToAiReasoningEngineMapOutputWithContext(ctx context.Context) AiReasoningEngineMapOutput {
	return o
}

func (o AiReasoningEngineMapOutput) MapIndex(k pulumi.StringInput) AiReasoningEngineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiReasoningEngine {
		return vs[0].(map[string]*AiReasoningEngine)[vs[1].(string)]
	}).(AiReasoningEngineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiReasoningEngineInput)(nil)).Elem(), &AiReasoningEngine{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiReasoningEngineArrayInput)(nil)).Elem(), AiReasoningEngineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiReasoningEngineMapInput)(nil)).Elem(), AiReasoningEngineMap{})
	pulumi.RegisterOutputType(AiReasoningEngineOutput{})
	pulumi.RegisterOutputType(AiReasoningEngineArrayOutput{})
	pulumi.RegisterOutputType(AiReasoningEngineMapOutput{})
}
