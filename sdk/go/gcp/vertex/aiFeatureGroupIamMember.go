// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{region}}/featureGroups/{{name}}
//
// * {{project}}/{{region}}/{{name}}
//
// * {{region}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Vertex AI featuregroup IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamMember:AiFeatureGroupIamMember editor "projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamMember:AiFeatureGroupIamMember editor "projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureGroupIamMember:AiFeatureGroupIamMember editor projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AiFeatureGroupIamMember struct {
	pulumi.CustomResourceState

	Condition AiFeatureGroupIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringOutput `pulumi:"featureGroup"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewAiFeatureGroupIamMember registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureGroupIamMember(ctx *pulumi.Context,
	name string, args *AiFeatureGroupIamMemberArgs, opts ...pulumi.ResourceOption) (*AiFeatureGroupIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureGroup == nil {
		return nil, errors.New("invalid value for required argument 'FeatureGroup'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiFeatureGroupIamMember
	err := ctx.RegisterResource("gcp:vertex/aiFeatureGroupIamMember:AiFeatureGroupIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureGroupIamMember gets an existing AiFeatureGroupIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureGroupIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureGroupIamMemberState, opts ...pulumi.ResourceOption) (*AiFeatureGroupIamMember, error) {
	var resource AiFeatureGroupIamMember
	err := ctx.ReadResource("gcp:vertex/aiFeatureGroupIamMember:AiFeatureGroupIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureGroupIamMember resources.
type aiFeatureGroupIamMemberState struct {
	Condition *AiFeatureGroupIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup *string `pulumi:"featureGroup"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type AiFeatureGroupIamMemberState struct {
	Condition AiFeatureGroupIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (AiFeatureGroupIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupIamMemberState)(nil)).Elem()
}

type aiFeatureGroupIamMemberArgs struct {
	Condition *AiFeatureGroupIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup string `pulumi:"featureGroup"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a AiFeatureGroupIamMember resource.
type AiFeatureGroupIamMemberArgs struct {
	Condition AiFeatureGroupIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureGroup pulumi.StringInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (AiFeatureGroupIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureGroupIamMemberArgs)(nil)).Elem()
}

type AiFeatureGroupIamMemberInput interface {
	pulumi.Input

	ToAiFeatureGroupIamMemberOutput() AiFeatureGroupIamMemberOutput
	ToAiFeatureGroupIamMemberOutputWithContext(ctx context.Context) AiFeatureGroupIamMemberOutput
}

func (*AiFeatureGroupIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroupIamMember)(nil)).Elem()
}

func (i *AiFeatureGroupIamMember) ToAiFeatureGroupIamMemberOutput() AiFeatureGroupIamMemberOutput {
	return i.ToAiFeatureGroupIamMemberOutputWithContext(context.Background())
}

func (i *AiFeatureGroupIamMember) ToAiFeatureGroupIamMemberOutputWithContext(ctx context.Context) AiFeatureGroupIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamMemberOutput)
}

// AiFeatureGroupIamMemberArrayInput is an input type that accepts AiFeatureGroupIamMemberArray and AiFeatureGroupIamMemberArrayOutput values.
// You can construct a concrete instance of `AiFeatureGroupIamMemberArrayInput` via:
//
//	AiFeatureGroupIamMemberArray{ AiFeatureGroupIamMemberArgs{...} }
type AiFeatureGroupIamMemberArrayInput interface {
	pulumi.Input

	ToAiFeatureGroupIamMemberArrayOutput() AiFeatureGroupIamMemberArrayOutput
	ToAiFeatureGroupIamMemberArrayOutputWithContext(context.Context) AiFeatureGroupIamMemberArrayOutput
}

type AiFeatureGroupIamMemberArray []AiFeatureGroupIamMemberInput

func (AiFeatureGroupIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroupIamMember)(nil)).Elem()
}

func (i AiFeatureGroupIamMemberArray) ToAiFeatureGroupIamMemberArrayOutput() AiFeatureGroupIamMemberArrayOutput {
	return i.ToAiFeatureGroupIamMemberArrayOutputWithContext(context.Background())
}

func (i AiFeatureGroupIamMemberArray) ToAiFeatureGroupIamMemberArrayOutputWithContext(ctx context.Context) AiFeatureGroupIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamMemberArrayOutput)
}

// AiFeatureGroupIamMemberMapInput is an input type that accepts AiFeatureGroupIamMemberMap and AiFeatureGroupIamMemberMapOutput values.
// You can construct a concrete instance of `AiFeatureGroupIamMemberMapInput` via:
//
//	AiFeatureGroupIamMemberMap{ "key": AiFeatureGroupIamMemberArgs{...} }
type AiFeatureGroupIamMemberMapInput interface {
	pulumi.Input

	ToAiFeatureGroupIamMemberMapOutput() AiFeatureGroupIamMemberMapOutput
	ToAiFeatureGroupIamMemberMapOutputWithContext(context.Context) AiFeatureGroupIamMemberMapOutput
}

type AiFeatureGroupIamMemberMap map[string]AiFeatureGroupIamMemberInput

func (AiFeatureGroupIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroupIamMember)(nil)).Elem()
}

func (i AiFeatureGroupIamMemberMap) ToAiFeatureGroupIamMemberMapOutput() AiFeatureGroupIamMemberMapOutput {
	return i.ToAiFeatureGroupIamMemberMapOutputWithContext(context.Background())
}

func (i AiFeatureGroupIamMemberMap) ToAiFeatureGroupIamMemberMapOutputWithContext(ctx context.Context) AiFeatureGroupIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureGroupIamMemberMapOutput)
}

type AiFeatureGroupIamMemberOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureGroupIamMember)(nil)).Elem()
}

func (o AiFeatureGroupIamMemberOutput) ToAiFeatureGroupIamMemberOutput() AiFeatureGroupIamMemberOutput {
	return o
}

func (o AiFeatureGroupIamMemberOutput) ToAiFeatureGroupIamMemberOutputWithContext(ctx context.Context) AiFeatureGroupIamMemberOutput {
	return o
}

func (o AiFeatureGroupIamMemberOutput) Condition() AiFeatureGroupIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamMember) AiFeatureGroupIamMemberConditionPtrOutput { return v.Condition }).(AiFeatureGroupIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o AiFeatureGroupIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AiFeatureGroupIamMemberOutput) FeatureGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamMember) pulumi.StringOutput { return v.FeatureGroup }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o AiFeatureGroupIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o AiFeatureGroupIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of feature group. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o AiFeatureGroupIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `vertex.AiFeatureGroupIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o AiFeatureGroupIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureGroupIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AiFeatureGroupIamMemberArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureGroupIamMember)(nil)).Elem()
}

func (o AiFeatureGroupIamMemberArrayOutput) ToAiFeatureGroupIamMemberArrayOutput() AiFeatureGroupIamMemberArrayOutput {
	return o
}

func (o AiFeatureGroupIamMemberArrayOutput) ToAiFeatureGroupIamMemberArrayOutputWithContext(ctx context.Context) AiFeatureGroupIamMemberArrayOutput {
	return o
}

func (o AiFeatureGroupIamMemberArrayOutput) Index(i pulumi.IntInput) AiFeatureGroupIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureGroupIamMember {
		return vs[0].([]*AiFeatureGroupIamMember)[vs[1].(int)]
	}).(AiFeatureGroupIamMemberOutput)
}

type AiFeatureGroupIamMemberMapOutput struct{ *pulumi.OutputState }

func (AiFeatureGroupIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureGroupIamMember)(nil)).Elem()
}

func (o AiFeatureGroupIamMemberMapOutput) ToAiFeatureGroupIamMemberMapOutput() AiFeatureGroupIamMemberMapOutput {
	return o
}

func (o AiFeatureGroupIamMemberMapOutput) ToAiFeatureGroupIamMemberMapOutputWithContext(ctx context.Context) AiFeatureGroupIamMemberMapOutput {
	return o
}

func (o AiFeatureGroupIamMemberMapOutput) MapIndex(k pulumi.StringInput) AiFeatureGroupIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureGroupIamMember {
		return vs[0].(map[string]*AiFeatureGroupIamMember)[vs[1].(string)]
	}).(AiFeatureGroupIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamMemberInput)(nil)).Elem(), &AiFeatureGroupIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamMemberArrayInput)(nil)).Elem(), AiFeatureGroupIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureGroupIamMemberMapInput)(nil)).Elem(), AiFeatureGroupIamMemberMap{})
	pulumi.RegisterOutputType(AiFeatureGroupIamMemberOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupIamMemberArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureGroupIamMemberMapOutput{})
}
