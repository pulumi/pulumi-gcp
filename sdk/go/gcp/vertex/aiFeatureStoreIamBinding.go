// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A collection of DataItems and Annotations on them.
//
// To get more information about Featurestore, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/vertex-ai/docs)
//
// ## Example Usage
// ### Vertex Ai Featurestore
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
//				EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
//					KmsKeyName: pulumi.String("kms-name"),
//				},
//				ForceDestroy: pulumi.Bool(true),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
//					FixedNodeCount: pulumi.Int(2),
//				},
//				Region: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Featurestore can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding default {{name}}
//
// ```
type AiFeatureStoreIamBinding struct {
	pulumi.CustomResourceState

	Condition    AiFeatureStoreIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag         pulumi.StringOutput                        `pulumi:"etag"`
	Featurestore pulumi.StringOutput                        `pulumi:"featurestore"`
	Members      pulumi.StringArrayOutput                   `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region pulumi.StringOutput `pulumi:"region"`
	Role   pulumi.StringOutput `pulumi:"role"`
}

// NewAiFeatureStoreIamBinding registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureStoreIamBinding(ctx *pulumi.Context,
	name string, args *AiFeatureStoreIamBindingArgs, opts ...pulumi.ResourceOption) (*AiFeatureStoreIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AiFeatureStoreIamBinding
	err := ctx.RegisterResource("gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureStoreIamBinding gets an existing AiFeatureStoreIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureStoreIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureStoreIamBindingState, opts ...pulumi.ResourceOption) (*AiFeatureStoreIamBinding, error) {
	var resource AiFeatureStoreIamBinding
	err := ctx.ReadResource("gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureStoreIamBinding resources.
type aiFeatureStoreIamBindingState struct {
	Condition    *AiFeatureStoreIamBindingCondition `pulumi:"condition"`
	Etag         *string                            `pulumi:"etag"`
	Featurestore *string                            `pulumi:"featurestore"`
	Members      []string                           `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region *string `pulumi:"region"`
	Role   *string `pulumi:"role"`
}

type AiFeatureStoreIamBindingState struct {
	Condition    AiFeatureStoreIamBindingConditionPtrInput
	Etag         pulumi.StringPtrInput
	Featurestore pulumi.StringPtrInput
	Members      pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1
	Region pulumi.StringPtrInput
	Role   pulumi.StringPtrInput
}

func (AiFeatureStoreIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreIamBindingState)(nil)).Elem()
}

type aiFeatureStoreIamBindingArgs struct {
	Condition    *AiFeatureStoreIamBindingCondition `pulumi:"condition"`
	Featurestore string                             `pulumi:"featurestore"`
	Members      []string                           `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region *string `pulumi:"region"`
	Role   string  `pulumi:"role"`
}

// The set of arguments for constructing a AiFeatureStoreIamBinding resource.
type AiFeatureStoreIamBindingArgs struct {
	Condition    AiFeatureStoreIamBindingConditionPtrInput
	Featurestore pulumi.StringInput
	Members      pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1
	Region pulumi.StringPtrInput
	Role   pulumi.StringInput
}

func (AiFeatureStoreIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreIamBindingArgs)(nil)).Elem()
}

type AiFeatureStoreIamBindingInput interface {
	pulumi.Input

	ToAiFeatureStoreIamBindingOutput() AiFeatureStoreIamBindingOutput
	ToAiFeatureStoreIamBindingOutputWithContext(ctx context.Context) AiFeatureStoreIamBindingOutput
}

func (*AiFeatureStoreIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreIamBinding)(nil)).Elem()
}

func (i *AiFeatureStoreIamBinding) ToAiFeatureStoreIamBindingOutput() AiFeatureStoreIamBindingOutput {
	return i.ToAiFeatureStoreIamBindingOutputWithContext(context.Background())
}

func (i *AiFeatureStoreIamBinding) ToAiFeatureStoreIamBindingOutputWithContext(ctx context.Context) AiFeatureStoreIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamBindingOutput)
}

// AiFeatureStoreIamBindingArrayInput is an input type that accepts AiFeatureStoreIamBindingArray and AiFeatureStoreIamBindingArrayOutput values.
// You can construct a concrete instance of `AiFeatureStoreIamBindingArrayInput` via:
//
//	AiFeatureStoreIamBindingArray{ AiFeatureStoreIamBindingArgs{...} }
type AiFeatureStoreIamBindingArrayInput interface {
	pulumi.Input

	ToAiFeatureStoreIamBindingArrayOutput() AiFeatureStoreIamBindingArrayOutput
	ToAiFeatureStoreIamBindingArrayOutputWithContext(context.Context) AiFeatureStoreIamBindingArrayOutput
}

type AiFeatureStoreIamBindingArray []AiFeatureStoreIamBindingInput

func (AiFeatureStoreIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreIamBinding)(nil)).Elem()
}

func (i AiFeatureStoreIamBindingArray) ToAiFeatureStoreIamBindingArrayOutput() AiFeatureStoreIamBindingArrayOutput {
	return i.ToAiFeatureStoreIamBindingArrayOutputWithContext(context.Background())
}

func (i AiFeatureStoreIamBindingArray) ToAiFeatureStoreIamBindingArrayOutputWithContext(ctx context.Context) AiFeatureStoreIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamBindingArrayOutput)
}

// AiFeatureStoreIamBindingMapInput is an input type that accepts AiFeatureStoreIamBindingMap and AiFeatureStoreIamBindingMapOutput values.
// You can construct a concrete instance of `AiFeatureStoreIamBindingMapInput` via:
//
//	AiFeatureStoreIamBindingMap{ "key": AiFeatureStoreIamBindingArgs{...} }
type AiFeatureStoreIamBindingMapInput interface {
	pulumi.Input

	ToAiFeatureStoreIamBindingMapOutput() AiFeatureStoreIamBindingMapOutput
	ToAiFeatureStoreIamBindingMapOutputWithContext(context.Context) AiFeatureStoreIamBindingMapOutput
}

type AiFeatureStoreIamBindingMap map[string]AiFeatureStoreIamBindingInput

func (AiFeatureStoreIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreIamBinding)(nil)).Elem()
}

func (i AiFeatureStoreIamBindingMap) ToAiFeatureStoreIamBindingMapOutput() AiFeatureStoreIamBindingMapOutput {
	return i.ToAiFeatureStoreIamBindingMapOutputWithContext(context.Background())
}

func (i AiFeatureStoreIamBindingMap) ToAiFeatureStoreIamBindingMapOutputWithContext(ctx context.Context) AiFeatureStoreIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamBindingMapOutput)
}

type AiFeatureStoreIamBindingOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreIamBinding)(nil)).Elem()
}

func (o AiFeatureStoreIamBindingOutput) ToAiFeatureStoreIamBindingOutput() AiFeatureStoreIamBindingOutput {
	return o
}

func (o AiFeatureStoreIamBindingOutput) ToAiFeatureStoreIamBindingOutputWithContext(ctx context.Context) AiFeatureStoreIamBindingOutput {
	return o
}

func (o AiFeatureStoreIamBindingOutput) Condition() AiFeatureStoreIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamBinding) AiFeatureStoreIamBindingConditionPtrOutput { return v.Condition }).(AiFeatureStoreIamBindingConditionPtrOutput)
}

func (o AiFeatureStoreIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AiFeatureStoreIamBindingOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamBinding) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o AiFeatureStoreIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiFeatureStoreIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the dataset. eg us-central1
func (o AiFeatureStoreIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AiFeatureStoreIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AiFeatureStoreIamBindingArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreIamBinding)(nil)).Elem()
}

func (o AiFeatureStoreIamBindingArrayOutput) ToAiFeatureStoreIamBindingArrayOutput() AiFeatureStoreIamBindingArrayOutput {
	return o
}

func (o AiFeatureStoreIamBindingArrayOutput) ToAiFeatureStoreIamBindingArrayOutputWithContext(ctx context.Context) AiFeatureStoreIamBindingArrayOutput {
	return o
}

func (o AiFeatureStoreIamBindingArrayOutput) Index(i pulumi.IntInput) AiFeatureStoreIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureStoreIamBinding {
		return vs[0].([]*AiFeatureStoreIamBinding)[vs[1].(int)]
	}).(AiFeatureStoreIamBindingOutput)
}

type AiFeatureStoreIamBindingMapOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreIamBinding)(nil)).Elem()
}

func (o AiFeatureStoreIamBindingMapOutput) ToAiFeatureStoreIamBindingMapOutput() AiFeatureStoreIamBindingMapOutput {
	return o
}

func (o AiFeatureStoreIamBindingMapOutput) ToAiFeatureStoreIamBindingMapOutputWithContext(ctx context.Context) AiFeatureStoreIamBindingMapOutput {
	return o
}

func (o AiFeatureStoreIamBindingMapOutput) MapIndex(k pulumi.StringInput) AiFeatureStoreIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureStoreIamBinding {
		return vs[0].(map[string]*AiFeatureStoreIamBinding)[vs[1].(string)]
	}).(AiFeatureStoreIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamBindingInput)(nil)).Elem(), &AiFeatureStoreIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamBindingArrayInput)(nil)).Elem(), AiFeatureStoreIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamBindingMapInput)(nil)).Elem(), AiFeatureStoreIamBindingMap{})
	pulumi.RegisterOutputType(AiFeatureStoreIamBindingOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreIamBindingArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreIamBindingMapOutput{})
}
