// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A collection of DataItems and Annotations on them.
//
// To get more information about Featurestore, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/vertex-ai/docs)
//
// ## Example Usage
// ### Vertex Ai Featurestore
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
//				EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
//					KmsKeyName: pulumi.String("kms-name"),
//				},
//				ForceDestroy: pulumi.Bool(true),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
//					FixedNodeCount: pulumi.Int(2),
//				},
//				Region: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Featurestore can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy default {{name}}
//
// ```
type AiFeatureStoreIamPolicy struct {
	pulumi.CustomResourceState

	Etag         pulumi.StringOutput `pulumi:"etag"`
	Featurestore pulumi.StringOutput `pulumi:"featurestore"`
	PolicyData   pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewAiFeatureStoreIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureStoreIamPolicy(ctx *pulumi.Context,
	name string, args *AiFeatureStoreIamPolicyArgs, opts ...pulumi.ResourceOption) (*AiFeatureStoreIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource AiFeatureStoreIamPolicy
	err := ctx.RegisterResource("gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureStoreIamPolicy gets an existing AiFeatureStoreIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureStoreIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureStoreIamPolicyState, opts ...pulumi.ResourceOption) (*AiFeatureStoreIamPolicy, error) {
	var resource AiFeatureStoreIamPolicy
	err := ctx.ReadResource("gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureStoreIamPolicy resources.
type aiFeatureStoreIamPolicyState struct {
	Etag         *string `pulumi:"etag"`
	Featurestore *string `pulumi:"featurestore"`
	PolicyData   *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region *string `pulumi:"region"`
}

type AiFeatureStoreIamPolicyState struct {
	Etag         pulumi.StringPtrInput
	Featurestore pulumi.StringPtrInput
	PolicyData   pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiFeatureStoreIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreIamPolicyState)(nil)).Elem()
}

type aiFeatureStoreIamPolicyArgs struct {
	Featurestore string `pulumi:"featurestore"`
	PolicyData   string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiFeatureStoreIamPolicy resource.
type AiFeatureStoreIamPolicyArgs struct {
	Featurestore pulumi.StringInput
	PolicyData   pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiFeatureStoreIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreIamPolicyArgs)(nil)).Elem()
}

type AiFeatureStoreIamPolicyInput interface {
	pulumi.Input

	ToAiFeatureStoreIamPolicyOutput() AiFeatureStoreIamPolicyOutput
	ToAiFeatureStoreIamPolicyOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyOutput
}

func (*AiFeatureStoreIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (i *AiFeatureStoreIamPolicy) ToAiFeatureStoreIamPolicyOutput() AiFeatureStoreIamPolicyOutput {
	return i.ToAiFeatureStoreIamPolicyOutputWithContext(context.Background())
}

func (i *AiFeatureStoreIamPolicy) ToAiFeatureStoreIamPolicyOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamPolicyOutput)
}

// AiFeatureStoreIamPolicyArrayInput is an input type that accepts AiFeatureStoreIamPolicyArray and AiFeatureStoreIamPolicyArrayOutput values.
// You can construct a concrete instance of `AiFeatureStoreIamPolicyArrayInput` via:
//
//	AiFeatureStoreIamPolicyArray{ AiFeatureStoreIamPolicyArgs{...} }
type AiFeatureStoreIamPolicyArrayInput interface {
	pulumi.Input

	ToAiFeatureStoreIamPolicyArrayOutput() AiFeatureStoreIamPolicyArrayOutput
	ToAiFeatureStoreIamPolicyArrayOutputWithContext(context.Context) AiFeatureStoreIamPolicyArrayOutput
}

type AiFeatureStoreIamPolicyArray []AiFeatureStoreIamPolicyInput

func (AiFeatureStoreIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (i AiFeatureStoreIamPolicyArray) ToAiFeatureStoreIamPolicyArrayOutput() AiFeatureStoreIamPolicyArrayOutput {
	return i.ToAiFeatureStoreIamPolicyArrayOutputWithContext(context.Background())
}

func (i AiFeatureStoreIamPolicyArray) ToAiFeatureStoreIamPolicyArrayOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamPolicyArrayOutput)
}

// AiFeatureStoreIamPolicyMapInput is an input type that accepts AiFeatureStoreIamPolicyMap and AiFeatureStoreIamPolicyMapOutput values.
// You can construct a concrete instance of `AiFeatureStoreIamPolicyMapInput` via:
//
//	AiFeatureStoreIamPolicyMap{ "key": AiFeatureStoreIamPolicyArgs{...} }
type AiFeatureStoreIamPolicyMapInput interface {
	pulumi.Input

	ToAiFeatureStoreIamPolicyMapOutput() AiFeatureStoreIamPolicyMapOutput
	ToAiFeatureStoreIamPolicyMapOutputWithContext(context.Context) AiFeatureStoreIamPolicyMapOutput
}

type AiFeatureStoreIamPolicyMap map[string]AiFeatureStoreIamPolicyInput

func (AiFeatureStoreIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (i AiFeatureStoreIamPolicyMap) ToAiFeatureStoreIamPolicyMapOutput() AiFeatureStoreIamPolicyMapOutput {
	return i.ToAiFeatureStoreIamPolicyMapOutputWithContext(context.Background())
}

func (i AiFeatureStoreIamPolicyMap) ToAiFeatureStoreIamPolicyMapOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamPolicyMapOutput)
}

type AiFeatureStoreIamPolicyOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (o AiFeatureStoreIamPolicyOutput) ToAiFeatureStoreIamPolicyOutput() AiFeatureStoreIamPolicyOutput {
	return o
}

func (o AiFeatureStoreIamPolicyOutput) ToAiFeatureStoreIamPolicyOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyOutput {
	return o
}

func (o AiFeatureStoreIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AiFeatureStoreIamPolicyOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o AiFeatureStoreIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiFeatureStoreIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the dataset. eg us-central1
func (o AiFeatureStoreIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type AiFeatureStoreIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (o AiFeatureStoreIamPolicyArrayOutput) ToAiFeatureStoreIamPolicyArrayOutput() AiFeatureStoreIamPolicyArrayOutput {
	return o
}

func (o AiFeatureStoreIamPolicyArrayOutput) ToAiFeatureStoreIamPolicyArrayOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyArrayOutput {
	return o
}

func (o AiFeatureStoreIamPolicyArrayOutput) Index(i pulumi.IntInput) AiFeatureStoreIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureStoreIamPolicy {
		return vs[0].([]*AiFeatureStoreIamPolicy)[vs[1].(int)]
	}).(AiFeatureStoreIamPolicyOutput)
}

type AiFeatureStoreIamPolicyMapOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (o AiFeatureStoreIamPolicyMapOutput) ToAiFeatureStoreIamPolicyMapOutput() AiFeatureStoreIamPolicyMapOutput {
	return o
}

func (o AiFeatureStoreIamPolicyMapOutput) ToAiFeatureStoreIamPolicyMapOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyMapOutput {
	return o
}

func (o AiFeatureStoreIamPolicyMapOutput) MapIndex(k pulumi.StringInput) AiFeatureStoreIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureStoreIamPolicy {
		return vs[0].(map[string]*AiFeatureStoreIamPolicy)[vs[1].(string)]
	}).(AiFeatureStoreIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamPolicyInput)(nil)).Elem(), &AiFeatureStoreIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamPolicyArrayInput)(nil)).Elem(), AiFeatureStoreIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamPolicyMapInput)(nil)).Elem(), AiFeatureStoreIamPolicyMap{})
	pulumi.RegisterOutputType(AiFeatureStoreIamPolicyOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreIamPolicyMapOutput{})
}
