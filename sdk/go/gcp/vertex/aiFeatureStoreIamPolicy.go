// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{region}}/featurestores/{{name}} * {{project}}/{{region}}/{{name}} * {{region}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Vertex AI featurestore IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy editor "projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy editor "projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy editor projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AiFeatureStoreIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Featurestore pulumi.StringOutput `pulumi:"featurestore"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewAiFeatureStoreIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureStoreIamPolicy(ctx *pulumi.Context,
	name string, args *AiFeatureStoreIamPolicyArgs, opts ...pulumi.ResourceOption) (*AiFeatureStoreIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource AiFeatureStoreIamPolicy
	err := ctx.RegisterResource("gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureStoreIamPolicy gets an existing AiFeatureStoreIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureStoreIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureStoreIamPolicyState, opts ...pulumi.ResourceOption) (*AiFeatureStoreIamPolicy, error) {
	var resource AiFeatureStoreIamPolicy
	err := ctx.ReadResource("gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureStoreIamPolicy resources.
type aiFeatureStoreIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Featurestore *string `pulumi:"featurestore"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

type AiFeatureStoreIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Featurestore pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (AiFeatureStoreIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreIamPolicyState)(nil)).Elem()
}

type aiFeatureStoreIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Featurestore string `pulumi:"featurestore"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiFeatureStoreIamPolicy resource.
type AiFeatureStoreIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Featurestore pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (AiFeatureStoreIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureStoreIamPolicyArgs)(nil)).Elem()
}

type AiFeatureStoreIamPolicyInput interface {
	pulumi.Input

	ToAiFeatureStoreIamPolicyOutput() AiFeatureStoreIamPolicyOutput
	ToAiFeatureStoreIamPolicyOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyOutput
}

func (*AiFeatureStoreIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (i *AiFeatureStoreIamPolicy) ToAiFeatureStoreIamPolicyOutput() AiFeatureStoreIamPolicyOutput {
	return i.ToAiFeatureStoreIamPolicyOutputWithContext(context.Background())
}

func (i *AiFeatureStoreIamPolicy) ToAiFeatureStoreIamPolicyOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamPolicyOutput)
}

// AiFeatureStoreIamPolicyArrayInput is an input type that accepts AiFeatureStoreIamPolicyArray and AiFeatureStoreIamPolicyArrayOutput values.
// You can construct a concrete instance of `AiFeatureStoreIamPolicyArrayInput` via:
//
//	AiFeatureStoreIamPolicyArray{ AiFeatureStoreIamPolicyArgs{...} }
type AiFeatureStoreIamPolicyArrayInput interface {
	pulumi.Input

	ToAiFeatureStoreIamPolicyArrayOutput() AiFeatureStoreIamPolicyArrayOutput
	ToAiFeatureStoreIamPolicyArrayOutputWithContext(context.Context) AiFeatureStoreIamPolicyArrayOutput
}

type AiFeatureStoreIamPolicyArray []AiFeatureStoreIamPolicyInput

func (AiFeatureStoreIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (i AiFeatureStoreIamPolicyArray) ToAiFeatureStoreIamPolicyArrayOutput() AiFeatureStoreIamPolicyArrayOutput {
	return i.ToAiFeatureStoreIamPolicyArrayOutputWithContext(context.Background())
}

func (i AiFeatureStoreIamPolicyArray) ToAiFeatureStoreIamPolicyArrayOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamPolicyArrayOutput)
}

// AiFeatureStoreIamPolicyMapInput is an input type that accepts AiFeatureStoreIamPolicyMap and AiFeatureStoreIamPolicyMapOutput values.
// You can construct a concrete instance of `AiFeatureStoreIamPolicyMapInput` via:
//
//	AiFeatureStoreIamPolicyMap{ "key": AiFeatureStoreIamPolicyArgs{...} }
type AiFeatureStoreIamPolicyMapInput interface {
	pulumi.Input

	ToAiFeatureStoreIamPolicyMapOutput() AiFeatureStoreIamPolicyMapOutput
	ToAiFeatureStoreIamPolicyMapOutputWithContext(context.Context) AiFeatureStoreIamPolicyMapOutput
}

type AiFeatureStoreIamPolicyMap map[string]AiFeatureStoreIamPolicyInput

func (AiFeatureStoreIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (i AiFeatureStoreIamPolicyMap) ToAiFeatureStoreIamPolicyMapOutput() AiFeatureStoreIamPolicyMapOutput {
	return i.ToAiFeatureStoreIamPolicyMapOutputWithContext(context.Background())
}

func (i AiFeatureStoreIamPolicyMap) ToAiFeatureStoreIamPolicyMapOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureStoreIamPolicyMapOutput)
}

type AiFeatureStoreIamPolicyOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (o AiFeatureStoreIamPolicyOutput) ToAiFeatureStoreIamPolicyOutput() AiFeatureStoreIamPolicyOutput {
	return o
}

func (o AiFeatureStoreIamPolicyOutput) ToAiFeatureStoreIamPolicyOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o AiFeatureStoreIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AiFeatureStoreIamPolicyOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o AiFeatureStoreIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o AiFeatureStoreIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o AiFeatureStoreIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureStoreIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type AiFeatureStoreIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (o AiFeatureStoreIamPolicyArrayOutput) ToAiFeatureStoreIamPolicyArrayOutput() AiFeatureStoreIamPolicyArrayOutput {
	return o
}

func (o AiFeatureStoreIamPolicyArrayOutput) ToAiFeatureStoreIamPolicyArrayOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyArrayOutput {
	return o
}

func (o AiFeatureStoreIamPolicyArrayOutput) Index(i pulumi.IntInput) AiFeatureStoreIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureStoreIamPolicy {
		return vs[0].([]*AiFeatureStoreIamPolicy)[vs[1].(int)]
	}).(AiFeatureStoreIamPolicyOutput)
}

type AiFeatureStoreIamPolicyMapOutput struct{ *pulumi.OutputState }

func (AiFeatureStoreIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureStoreIamPolicy)(nil)).Elem()
}

func (o AiFeatureStoreIamPolicyMapOutput) ToAiFeatureStoreIamPolicyMapOutput() AiFeatureStoreIamPolicyMapOutput {
	return o
}

func (o AiFeatureStoreIamPolicyMapOutput) ToAiFeatureStoreIamPolicyMapOutputWithContext(ctx context.Context) AiFeatureStoreIamPolicyMapOutput {
	return o
}

func (o AiFeatureStoreIamPolicyMapOutput) MapIndex(k pulumi.StringInput) AiFeatureStoreIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureStoreIamPolicy {
		return vs[0].(map[string]*AiFeatureStoreIamPolicy)[vs[1].(string)]
	}).(AiFeatureStoreIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamPolicyInput)(nil)).Elem(), &AiFeatureStoreIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamPolicyArrayInput)(nil)).Elem(), AiFeatureStoreIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureStoreIamPolicyMapInput)(nil)).Elem(), AiFeatureStoreIamPolicyMap{})
	pulumi.RegisterOutputType(AiFeatureStoreIamPolicyOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureStoreIamPolicyMapOutput{})
}
