// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetAiFeaturestoreEntitytypeIamPolicy(ctx *pulumi.Context, args *GetAiFeaturestoreEntitytypeIamPolicyArgs, opts ...pulumi.InvokeOption) (*GetAiFeaturestoreEntitytypeIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAiFeaturestoreEntitytypeIamPolicyResult
	err := ctx.Invoke("gcp:vertex/getAiFeaturestoreEntitytypeIamPolicy:getAiFeaturestoreEntitytypeIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAiFeaturestoreEntitytypeIamPolicy.
type GetAiFeaturestoreEntitytypeIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Entitytype string `pulumi:"entitytype"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
	Featurestore string `pulumi:"featurestore"`
}

// A collection of values returned by getAiFeaturestoreEntitytypeIamPolicy.
type GetAiFeaturestoreEntitytypeIamPolicyResult struct {
	Entitytype string `pulumi:"entitytype"`
	// (Computed) The etag of the IAM policy.
	Etag         string `pulumi:"etag"`
	Featurestore string `pulumi:"featurestore"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Required only by `vertex.AiFeatureStoreEntityTypeIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
}

func GetAiFeaturestoreEntitytypeIamPolicyOutput(ctx *pulumi.Context, args GetAiFeaturestoreEntitytypeIamPolicyOutputArgs, opts ...pulumi.InvokeOption) GetAiFeaturestoreEntitytypeIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAiFeaturestoreEntitytypeIamPolicyResult, error) {
			args := v.(GetAiFeaturestoreEntitytypeIamPolicyArgs)
			r, err := GetAiFeaturestoreEntitytypeIamPolicy(ctx, &args, opts...)
			var s GetAiFeaturestoreEntitytypeIamPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAiFeaturestoreEntitytypeIamPolicyResultOutput)
}

// A collection of arguments for invoking getAiFeaturestoreEntitytypeIamPolicy.
type GetAiFeaturestoreEntitytypeIamPolicyOutputArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Entitytype pulumi.StringInput `pulumi:"entitytype"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
	Featurestore pulumi.StringInput `pulumi:"featurestore"`
}

func (GetAiFeaturestoreEntitytypeIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAiFeaturestoreEntitytypeIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getAiFeaturestoreEntitytypeIamPolicy.
type GetAiFeaturestoreEntitytypeIamPolicyResultOutput struct{ *pulumi.OutputState }

func (GetAiFeaturestoreEntitytypeIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAiFeaturestoreEntitytypeIamPolicyResult)(nil)).Elem()
}

func (o GetAiFeaturestoreEntitytypeIamPolicyResultOutput) ToGetAiFeaturestoreEntitytypeIamPolicyResultOutput() GetAiFeaturestoreEntitytypeIamPolicyResultOutput {
	return o
}

func (o GetAiFeaturestoreEntitytypeIamPolicyResultOutput) ToGetAiFeaturestoreEntitytypeIamPolicyResultOutputWithContext(ctx context.Context) GetAiFeaturestoreEntitytypeIamPolicyResultOutput {
	return o
}

func (o GetAiFeaturestoreEntitytypeIamPolicyResultOutput) Entitytype() pulumi.StringOutput {
	return o.ApplyT(func(v GetAiFeaturestoreEntitytypeIamPolicyResult) string { return v.Entitytype }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o GetAiFeaturestoreEntitytypeIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v GetAiFeaturestoreEntitytypeIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

func (o GetAiFeaturestoreEntitytypeIamPolicyResultOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v GetAiFeaturestoreEntitytypeIamPolicyResult) string { return v.Featurestore }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAiFeaturestoreEntitytypeIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAiFeaturestoreEntitytypeIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required only by `vertex.AiFeatureStoreEntityTypeIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o GetAiFeaturestoreEntitytypeIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v GetAiFeaturestoreEntitytypeIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAiFeaturestoreEntitytypeIamPolicyResultOutput{})
}
