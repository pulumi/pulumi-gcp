// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AiEndpointIamBinding struct {
	pulumi.CustomResourceState

	Condition AiEndpointIamBindingConditionPtrOutput `pulumi:"condition"`
	Endpoint  pulumi.StringOutput                    `pulumi:"endpoint"`
	Etag      pulumi.StringOutput                    `pulumi:"etag"`
	Location  pulumi.StringOutput                    `pulumi:"location"`
	Members   pulumi.StringArrayOutput               `pulumi:"members"`
	Project   pulumi.StringOutput                    `pulumi:"project"`
	Role      pulumi.StringOutput                    `pulumi:"role"`
}

// NewAiEndpointIamBinding registers a new resource with the given unique name, arguments, and options.
func NewAiEndpointIamBinding(ctx *pulumi.Context,
	name string, args *AiEndpointIamBindingArgs, opts ...pulumi.ResourceOption) (*AiEndpointIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiEndpointIamBinding
	err := ctx.RegisterResource("gcp:vertex/aiEndpointIamBinding:AiEndpointIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiEndpointIamBinding gets an existing AiEndpointIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiEndpointIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiEndpointIamBindingState, opts ...pulumi.ResourceOption) (*AiEndpointIamBinding, error) {
	var resource AiEndpointIamBinding
	err := ctx.ReadResource("gcp:vertex/aiEndpointIamBinding:AiEndpointIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiEndpointIamBinding resources.
type aiEndpointIamBindingState struct {
	Condition *AiEndpointIamBindingCondition `pulumi:"condition"`
	Endpoint  *string                        `pulumi:"endpoint"`
	Etag      *string                        `pulumi:"etag"`
	Location  *string                        `pulumi:"location"`
	Members   []string                       `pulumi:"members"`
	Project   *string                        `pulumi:"project"`
	Role      *string                        `pulumi:"role"`
}

type AiEndpointIamBindingState struct {
	Condition AiEndpointIamBindingConditionPtrInput
	Endpoint  pulumi.StringPtrInput
	Etag      pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (AiEndpointIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiEndpointIamBindingState)(nil)).Elem()
}

type aiEndpointIamBindingArgs struct {
	Condition *AiEndpointIamBindingCondition `pulumi:"condition"`
	Endpoint  string                         `pulumi:"endpoint"`
	Location  *string                        `pulumi:"location"`
	Members   []string                       `pulumi:"members"`
	Project   *string                        `pulumi:"project"`
	Role      string                         `pulumi:"role"`
}

// The set of arguments for constructing a AiEndpointIamBinding resource.
type AiEndpointIamBindingArgs struct {
	Condition AiEndpointIamBindingConditionPtrInput
	Endpoint  pulumi.StringInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (AiEndpointIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiEndpointIamBindingArgs)(nil)).Elem()
}

type AiEndpointIamBindingInput interface {
	pulumi.Input

	ToAiEndpointIamBindingOutput() AiEndpointIamBindingOutput
	ToAiEndpointIamBindingOutputWithContext(ctx context.Context) AiEndpointIamBindingOutput
}

func (*AiEndpointIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**AiEndpointIamBinding)(nil)).Elem()
}

func (i *AiEndpointIamBinding) ToAiEndpointIamBindingOutput() AiEndpointIamBindingOutput {
	return i.ToAiEndpointIamBindingOutputWithContext(context.Background())
}

func (i *AiEndpointIamBinding) ToAiEndpointIamBindingOutputWithContext(ctx context.Context) AiEndpointIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiEndpointIamBindingOutput)
}

// AiEndpointIamBindingArrayInput is an input type that accepts AiEndpointIamBindingArray and AiEndpointIamBindingArrayOutput values.
// You can construct a concrete instance of `AiEndpointIamBindingArrayInput` via:
//
//	AiEndpointIamBindingArray{ AiEndpointIamBindingArgs{...} }
type AiEndpointIamBindingArrayInput interface {
	pulumi.Input

	ToAiEndpointIamBindingArrayOutput() AiEndpointIamBindingArrayOutput
	ToAiEndpointIamBindingArrayOutputWithContext(context.Context) AiEndpointIamBindingArrayOutput
}

type AiEndpointIamBindingArray []AiEndpointIamBindingInput

func (AiEndpointIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiEndpointIamBinding)(nil)).Elem()
}

func (i AiEndpointIamBindingArray) ToAiEndpointIamBindingArrayOutput() AiEndpointIamBindingArrayOutput {
	return i.ToAiEndpointIamBindingArrayOutputWithContext(context.Background())
}

func (i AiEndpointIamBindingArray) ToAiEndpointIamBindingArrayOutputWithContext(ctx context.Context) AiEndpointIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiEndpointIamBindingArrayOutput)
}

// AiEndpointIamBindingMapInput is an input type that accepts AiEndpointIamBindingMap and AiEndpointIamBindingMapOutput values.
// You can construct a concrete instance of `AiEndpointIamBindingMapInput` via:
//
//	AiEndpointIamBindingMap{ "key": AiEndpointIamBindingArgs{...} }
type AiEndpointIamBindingMapInput interface {
	pulumi.Input

	ToAiEndpointIamBindingMapOutput() AiEndpointIamBindingMapOutput
	ToAiEndpointIamBindingMapOutputWithContext(context.Context) AiEndpointIamBindingMapOutput
}

type AiEndpointIamBindingMap map[string]AiEndpointIamBindingInput

func (AiEndpointIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiEndpointIamBinding)(nil)).Elem()
}

func (i AiEndpointIamBindingMap) ToAiEndpointIamBindingMapOutput() AiEndpointIamBindingMapOutput {
	return i.ToAiEndpointIamBindingMapOutputWithContext(context.Background())
}

func (i AiEndpointIamBindingMap) ToAiEndpointIamBindingMapOutputWithContext(ctx context.Context) AiEndpointIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiEndpointIamBindingMapOutput)
}

type AiEndpointIamBindingOutput struct{ *pulumi.OutputState }

func (AiEndpointIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiEndpointIamBinding)(nil)).Elem()
}

func (o AiEndpointIamBindingOutput) ToAiEndpointIamBindingOutput() AiEndpointIamBindingOutput {
	return o
}

func (o AiEndpointIamBindingOutput) ToAiEndpointIamBindingOutputWithContext(ctx context.Context) AiEndpointIamBindingOutput {
	return o
}

func (o AiEndpointIamBindingOutput) Condition() AiEndpointIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *AiEndpointIamBinding) AiEndpointIamBindingConditionPtrOutput { return v.Condition }).(AiEndpointIamBindingConditionPtrOutput)
}

func (o AiEndpointIamBindingOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamBinding) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o AiEndpointIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AiEndpointIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o AiEndpointIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AiEndpointIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o AiEndpointIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o AiEndpointIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AiEndpointIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AiEndpointIamBindingArrayOutput struct{ *pulumi.OutputState }

func (AiEndpointIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiEndpointIamBinding)(nil)).Elem()
}

func (o AiEndpointIamBindingArrayOutput) ToAiEndpointIamBindingArrayOutput() AiEndpointIamBindingArrayOutput {
	return o
}

func (o AiEndpointIamBindingArrayOutput) ToAiEndpointIamBindingArrayOutputWithContext(ctx context.Context) AiEndpointIamBindingArrayOutput {
	return o
}

func (o AiEndpointIamBindingArrayOutput) Index(i pulumi.IntInput) AiEndpointIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiEndpointIamBinding {
		return vs[0].([]*AiEndpointIamBinding)[vs[1].(int)]
	}).(AiEndpointIamBindingOutput)
}

type AiEndpointIamBindingMapOutput struct{ *pulumi.OutputState }

func (AiEndpointIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiEndpointIamBinding)(nil)).Elem()
}

func (o AiEndpointIamBindingMapOutput) ToAiEndpointIamBindingMapOutput() AiEndpointIamBindingMapOutput {
	return o
}

func (o AiEndpointIamBindingMapOutput) ToAiEndpointIamBindingMapOutputWithContext(ctx context.Context) AiEndpointIamBindingMapOutput {
	return o
}

func (o AiEndpointIamBindingMapOutput) MapIndex(k pulumi.StringInput) AiEndpointIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiEndpointIamBinding {
		return vs[0].(map[string]*AiEndpointIamBinding)[vs[1].(string)]
	}).(AiEndpointIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiEndpointIamBindingInput)(nil)).Elem(), &AiEndpointIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiEndpointIamBindingArrayInput)(nil)).Elem(), AiEndpointIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiEndpointIamBindingMapInput)(nil)).Elem(), AiEndpointIamBindingMap{})
	pulumi.RegisterOutputType(AiEndpointIamBindingOutput{})
	pulumi.RegisterOutputType(AiEndpointIamBindingArrayOutput{})
	pulumi.RegisterOutputType(AiEndpointIamBindingMapOutput{})
}
