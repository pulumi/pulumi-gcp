// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{region}}/featureOnlineStores/{{name}}
//
// * {{project}}/{{region}}/{{name}}
//
// * {{region}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Vertex AI featureonlinestore IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStoreIamMember:AiFeatureOnlineStoreIamMember editor "projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStoreIamMember:AiFeatureOnlineStoreIamMember editor "projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStoreIamMember:AiFeatureOnlineStoreIamMember editor projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AiFeatureOnlineStoreIamMember struct {
	pulumi.CustomResourceState

	Condition AiFeatureOnlineStoreIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore pulumi.StringOutput `pulumi:"featureOnlineStore"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of feature online store. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewAiFeatureOnlineStoreIamMember registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureOnlineStoreIamMember(ctx *pulumi.Context,
	name string, args *AiFeatureOnlineStoreIamMemberArgs, opts ...pulumi.ResourceOption) (*AiFeatureOnlineStoreIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureOnlineStore == nil {
		return nil, errors.New("invalid value for required argument 'FeatureOnlineStore'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiFeatureOnlineStoreIamMember
	err := ctx.RegisterResource("gcp:vertex/aiFeatureOnlineStoreIamMember:AiFeatureOnlineStoreIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureOnlineStoreIamMember gets an existing AiFeatureOnlineStoreIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureOnlineStoreIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureOnlineStoreIamMemberState, opts ...pulumi.ResourceOption) (*AiFeatureOnlineStoreIamMember, error) {
	var resource AiFeatureOnlineStoreIamMember
	err := ctx.ReadResource("gcp:vertex/aiFeatureOnlineStoreIamMember:AiFeatureOnlineStoreIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureOnlineStoreIamMember resources.
type aiFeatureOnlineStoreIamMemberState struct {
	Condition *AiFeatureOnlineStoreIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore *string `pulumi:"featureOnlineStore"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature online store. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type AiFeatureOnlineStoreIamMemberState struct {
	Condition AiFeatureOnlineStoreIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature online store. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (AiFeatureOnlineStoreIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureOnlineStoreIamMemberState)(nil)).Elem()
}

type aiFeatureOnlineStoreIamMemberArgs struct {
	Condition *AiFeatureOnlineStoreIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore string `pulumi:"featureOnlineStore"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature online store. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a AiFeatureOnlineStoreIamMember resource.
type AiFeatureOnlineStoreIamMemberArgs struct {
	Condition AiFeatureOnlineStoreIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	FeatureOnlineStore pulumi.StringInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature online store. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `vertex.AiFeatureOnlineStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (AiFeatureOnlineStoreIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureOnlineStoreIamMemberArgs)(nil)).Elem()
}

type AiFeatureOnlineStoreIamMemberInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreIamMemberOutput() AiFeatureOnlineStoreIamMemberOutput
	ToAiFeatureOnlineStoreIamMemberOutputWithContext(ctx context.Context) AiFeatureOnlineStoreIamMemberOutput
}

func (*AiFeatureOnlineStoreIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureOnlineStoreIamMember)(nil)).Elem()
}

func (i *AiFeatureOnlineStoreIamMember) ToAiFeatureOnlineStoreIamMemberOutput() AiFeatureOnlineStoreIamMemberOutput {
	return i.ToAiFeatureOnlineStoreIamMemberOutputWithContext(context.Background())
}

func (i *AiFeatureOnlineStoreIamMember) ToAiFeatureOnlineStoreIamMemberOutputWithContext(ctx context.Context) AiFeatureOnlineStoreIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreIamMemberOutput)
}

// AiFeatureOnlineStoreIamMemberArrayInput is an input type that accepts AiFeatureOnlineStoreIamMemberArray and AiFeatureOnlineStoreIamMemberArrayOutput values.
// You can construct a concrete instance of `AiFeatureOnlineStoreIamMemberArrayInput` via:
//
//	AiFeatureOnlineStoreIamMemberArray{ AiFeatureOnlineStoreIamMemberArgs{...} }
type AiFeatureOnlineStoreIamMemberArrayInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreIamMemberArrayOutput() AiFeatureOnlineStoreIamMemberArrayOutput
	ToAiFeatureOnlineStoreIamMemberArrayOutputWithContext(context.Context) AiFeatureOnlineStoreIamMemberArrayOutput
}

type AiFeatureOnlineStoreIamMemberArray []AiFeatureOnlineStoreIamMemberInput

func (AiFeatureOnlineStoreIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureOnlineStoreIamMember)(nil)).Elem()
}

func (i AiFeatureOnlineStoreIamMemberArray) ToAiFeatureOnlineStoreIamMemberArrayOutput() AiFeatureOnlineStoreIamMemberArrayOutput {
	return i.ToAiFeatureOnlineStoreIamMemberArrayOutputWithContext(context.Background())
}

func (i AiFeatureOnlineStoreIamMemberArray) ToAiFeatureOnlineStoreIamMemberArrayOutputWithContext(ctx context.Context) AiFeatureOnlineStoreIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreIamMemberArrayOutput)
}

// AiFeatureOnlineStoreIamMemberMapInput is an input type that accepts AiFeatureOnlineStoreIamMemberMap and AiFeatureOnlineStoreIamMemberMapOutput values.
// You can construct a concrete instance of `AiFeatureOnlineStoreIamMemberMapInput` via:
//
//	AiFeatureOnlineStoreIamMemberMap{ "key": AiFeatureOnlineStoreIamMemberArgs{...} }
type AiFeatureOnlineStoreIamMemberMapInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreIamMemberMapOutput() AiFeatureOnlineStoreIamMemberMapOutput
	ToAiFeatureOnlineStoreIamMemberMapOutputWithContext(context.Context) AiFeatureOnlineStoreIamMemberMapOutput
}

type AiFeatureOnlineStoreIamMemberMap map[string]AiFeatureOnlineStoreIamMemberInput

func (AiFeatureOnlineStoreIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureOnlineStoreIamMember)(nil)).Elem()
}

func (i AiFeatureOnlineStoreIamMemberMap) ToAiFeatureOnlineStoreIamMemberMapOutput() AiFeatureOnlineStoreIamMemberMapOutput {
	return i.ToAiFeatureOnlineStoreIamMemberMapOutputWithContext(context.Background())
}

func (i AiFeatureOnlineStoreIamMemberMap) ToAiFeatureOnlineStoreIamMemberMapOutputWithContext(ctx context.Context) AiFeatureOnlineStoreIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreIamMemberMapOutput)
}

type AiFeatureOnlineStoreIamMemberOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureOnlineStoreIamMember)(nil)).Elem()
}

func (o AiFeatureOnlineStoreIamMemberOutput) ToAiFeatureOnlineStoreIamMemberOutput() AiFeatureOnlineStoreIamMemberOutput {
	return o
}

func (o AiFeatureOnlineStoreIamMemberOutput) ToAiFeatureOnlineStoreIamMemberOutputWithContext(ctx context.Context) AiFeatureOnlineStoreIamMemberOutput {
	return o
}

func (o AiFeatureOnlineStoreIamMemberOutput) Condition() AiFeatureOnlineStoreIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreIamMember) AiFeatureOnlineStoreIamMemberConditionPtrOutput {
		return v.Condition
	}).(AiFeatureOnlineStoreIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o AiFeatureOnlineStoreIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AiFeatureOnlineStoreIamMemberOutput) FeatureOnlineStore() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreIamMember) pulumi.StringOutput { return v.FeatureOnlineStore }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o AiFeatureOnlineStoreIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o AiFeatureOnlineStoreIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of feature online store. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o AiFeatureOnlineStoreIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `vertex.AiFeatureOnlineStoreIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o AiFeatureOnlineStoreIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStoreIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AiFeatureOnlineStoreIamMemberArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureOnlineStoreIamMember)(nil)).Elem()
}

func (o AiFeatureOnlineStoreIamMemberArrayOutput) ToAiFeatureOnlineStoreIamMemberArrayOutput() AiFeatureOnlineStoreIamMemberArrayOutput {
	return o
}

func (o AiFeatureOnlineStoreIamMemberArrayOutput) ToAiFeatureOnlineStoreIamMemberArrayOutputWithContext(ctx context.Context) AiFeatureOnlineStoreIamMemberArrayOutput {
	return o
}

func (o AiFeatureOnlineStoreIamMemberArrayOutput) Index(i pulumi.IntInput) AiFeatureOnlineStoreIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureOnlineStoreIamMember {
		return vs[0].([]*AiFeatureOnlineStoreIamMember)[vs[1].(int)]
	}).(AiFeatureOnlineStoreIamMemberOutput)
}

type AiFeatureOnlineStoreIamMemberMapOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureOnlineStoreIamMember)(nil)).Elem()
}

func (o AiFeatureOnlineStoreIamMemberMapOutput) ToAiFeatureOnlineStoreIamMemberMapOutput() AiFeatureOnlineStoreIamMemberMapOutput {
	return o
}

func (o AiFeatureOnlineStoreIamMemberMapOutput) ToAiFeatureOnlineStoreIamMemberMapOutputWithContext(ctx context.Context) AiFeatureOnlineStoreIamMemberMapOutput {
	return o
}

func (o AiFeatureOnlineStoreIamMemberMapOutput) MapIndex(k pulumi.StringInput) AiFeatureOnlineStoreIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureOnlineStoreIamMember {
		return vs[0].(map[string]*AiFeatureOnlineStoreIamMember)[vs[1].(string)]
	}).(AiFeatureOnlineStoreIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreIamMemberInput)(nil)).Elem(), &AiFeatureOnlineStoreIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreIamMemberArrayInput)(nil)).Elem(), AiFeatureOnlineStoreIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreIamMemberMapInput)(nil)).Elem(), AiFeatureOnlineStoreIamMemberMap{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreIamMemberOutput{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreIamMemberArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreIamMemberMapOutput{})
}
