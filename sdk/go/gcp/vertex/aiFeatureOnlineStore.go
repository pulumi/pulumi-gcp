// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vertex AI Feature Online Store provides a centralized repository for serving ML features and embedding indexes at low latency. The Feature Online Store is a top-level container.
//
// To get more information about FeatureOnlineStore, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/vertex-ai/docs)
//
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureOnlineStore(ctx, "feature_online_store", &vertex.AiFeatureOnlineStoreArgs{
//				Name: pulumi.String("example_feature_online_store"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Region: pulumi.String("us-central1"),
//				Bigtable: &vertex.AiFeatureOnlineStoreBigtableArgs{
//					AutoScaling: &vertex.AiFeatureOnlineStoreBigtableAutoScalingArgs{
//						MinNodeCount:         pulumi.Int(1),
//						MaxNodeCount:         pulumi.Int(3),
//						CpuUtilizationTarget: pulumi.Int(50),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiFeatureOnlineStore(ctx, "featureonlinestore", &vertex.AiFeatureOnlineStoreArgs{
//				Name: pulumi.String("example_feature_online_store_optimized"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Region:    pulumi.String("us-central1"),
//				Optimized: nil,
//				DedicatedServingEndpoint: &vertex.AiFeatureOnlineStoreDedicatedServingEndpointArgs{
//					PrivateServiceConnectConfig: &vertex.AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs{
//						EnablePrivateServiceConnect: pulumi.Bool(true),
//						ProjectAllowlists: pulumi.StringArray{
//							pulumi.String(project.Number),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vertex.NewAiFeatureOnlineStore(ctx, "featureonlinestore", &vertex.AiFeatureOnlineStoreArgs{
//				Name: pulumi.String("example_feature_online_store_beta_bigtable"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Region: pulumi.String("us-central1"),
//				Bigtable: &vertex.AiFeatureOnlineStoreBigtableArgs{
//					AutoScaling: &vertex.AiFeatureOnlineStoreBigtableAutoScalingArgs{
//						MinNodeCount:         pulumi.Int(1),
//						MaxNodeCount:         pulumi.Int(2),
//						CpuUtilizationTarget: pulumi.Int(80),
//					},
//				},
//				EmbeddingManagement: &vertex.AiFeatureOnlineStoreEmbeddingManagementArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FeatureOnlineStore can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{region}}/featureOnlineStores/{{name}}`
//
// * `{{project}}/{{region}}/{{name}}`
//
// * `{{region}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, FeatureOnlineStore can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore default projects/{{project}}/locations/{{region}}/featureOnlineStores/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore default {{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore default {{name}}
// ```
type AiFeatureOnlineStore struct {
	pulumi.CustomResourceState

	// Settings for Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
	// Structure is documented below.
	Bigtable AiFeatureOnlineStoreBigtablePtrOutput `pulumi:"bigtable"`
	// The timestamp of when the feature online store was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The dedicated serving endpoint for this FeatureOnlineStore, which is different from common vertex service endpoint. Only need to be set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default.
	// Structure is documented below.
	DedicatedServingEndpoint AiFeatureOnlineStoreDedicatedServingEndpointOutput `pulumi:"dedicatedServingEndpoint"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The settings for embedding management in FeatureOnlineStore. Embedding management can only be set for BigTable. It is enabled by default for optimized storagetype.
	// Structure is documented below.
	//
	// > **Warning:** `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	//
	// Deprecated: `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	EmbeddingManagement AiFeatureOnlineStoreEmbeddingManagementOutput `pulumi:"embeddingManagement"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// If set to true, any FeatureViews and Features for this FeatureOnlineStore will also be deleted.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// The labels with user-defined metadata to organize your feature online stores.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name of the Feature Online Store. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringOutput `pulumi:"name"`
	// Settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore
	Optimized AiFeatureOnlineStoreOptimizedPtrOutput `pulumi:"optimized"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The region of feature online store. eg us-central1
	Region pulumi.StringOutput `pulumi:"region"`
	// The state of the Feature Online Store. See the possible states in [this link](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores#state).
	State pulumi.StringOutput `pulumi:"state"`
	// The timestamp of when the feature online store was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAiFeatureOnlineStore registers a new resource with the given unique name, arguments, and options.
func NewAiFeatureOnlineStore(ctx *pulumi.Context,
	name string, args *AiFeatureOnlineStoreArgs, opts ...pulumi.ResourceOption) (*AiFeatureOnlineStore, error) {
	if args == nil {
		args = &AiFeatureOnlineStoreArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiFeatureOnlineStore
	err := ctx.RegisterResource("gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiFeatureOnlineStore gets an existing AiFeatureOnlineStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiFeatureOnlineStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiFeatureOnlineStoreState, opts ...pulumi.ResourceOption) (*AiFeatureOnlineStore, error) {
	var resource AiFeatureOnlineStore
	err := ctx.ReadResource("gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiFeatureOnlineStore resources.
type aiFeatureOnlineStoreState struct {
	// Settings for Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
	// Structure is documented below.
	Bigtable *AiFeatureOnlineStoreBigtable `pulumi:"bigtable"`
	// The timestamp of when the feature online store was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// The dedicated serving endpoint for this FeatureOnlineStore, which is different from common vertex service endpoint. Only need to be set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default.
	// Structure is documented below.
	DedicatedServingEndpoint *AiFeatureOnlineStoreDedicatedServingEndpoint `pulumi:"dedicatedServingEndpoint"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The settings for embedding management in FeatureOnlineStore. Embedding management can only be set for BigTable. It is enabled by default for optimized storagetype.
	// Structure is documented below.
	//
	// > **Warning:** `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	//
	// Deprecated: `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	EmbeddingManagement *AiFeatureOnlineStoreEmbeddingManagement `pulumi:"embeddingManagement"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// If set to true, any FeatureViews and Features for this FeatureOnlineStore will also be deleted.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The labels with user-defined metadata to organize your feature online stores.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Feature Online Store. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name *string `pulumi:"name"`
	// Settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore
	Optimized *AiFeatureOnlineStoreOptimized `pulumi:"optimized"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The region of feature online store. eg us-central1
	Region *string `pulumi:"region"`
	// The state of the Feature Online Store. See the possible states in [this link](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores#state).
	State *string `pulumi:"state"`
	// The timestamp of when the feature online store was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
}

type AiFeatureOnlineStoreState struct {
	// Settings for Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
	// Structure is documented below.
	Bigtable AiFeatureOnlineStoreBigtablePtrInput
	// The timestamp of when the feature online store was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// The dedicated serving endpoint for this FeatureOnlineStore, which is different from common vertex service endpoint. Only need to be set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default.
	// Structure is documented below.
	DedicatedServingEndpoint AiFeatureOnlineStoreDedicatedServingEndpointPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The settings for embedding management in FeatureOnlineStore. Embedding management can only be set for BigTable. It is enabled by default for optimized storagetype.
	// Structure is documented below.
	//
	// > **Warning:** `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	//
	// Deprecated: `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	EmbeddingManagement AiFeatureOnlineStoreEmbeddingManagementPtrInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// If set to true, any FeatureViews and Features for this FeatureOnlineStore will also be deleted.
	ForceDestroy pulumi.BoolPtrInput
	// The labels with user-defined metadata to organize your feature online stores.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Feature Online Store. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringPtrInput
	// Settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore
	Optimized AiFeatureOnlineStoreOptimizedPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The region of feature online store. eg us-central1
	Region pulumi.StringPtrInput
	// The state of the Feature Online Store. See the possible states in [this link](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores#state).
	State pulumi.StringPtrInput
	// The timestamp of when the feature online store was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringPtrInput
}

func (AiFeatureOnlineStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureOnlineStoreState)(nil)).Elem()
}

type aiFeatureOnlineStoreArgs struct {
	// Settings for Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
	// Structure is documented below.
	Bigtable *AiFeatureOnlineStoreBigtable `pulumi:"bigtable"`
	// The dedicated serving endpoint for this FeatureOnlineStore, which is different from common vertex service endpoint. Only need to be set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default.
	// Structure is documented below.
	DedicatedServingEndpoint *AiFeatureOnlineStoreDedicatedServingEndpoint `pulumi:"dedicatedServingEndpoint"`
	// The settings for embedding management in FeatureOnlineStore. Embedding management can only be set for BigTable. It is enabled by default for optimized storagetype.
	// Structure is documented below.
	//
	// > **Warning:** `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	//
	// Deprecated: `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	EmbeddingManagement *AiFeatureOnlineStoreEmbeddingManagement `pulumi:"embeddingManagement"`
	// If set to true, any FeatureViews and Features for this FeatureOnlineStore will also be deleted.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The labels with user-defined metadata to organize your feature online stores.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Feature Online Store. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name *string `pulumi:"name"`
	// Settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore
	Optimized *AiFeatureOnlineStoreOptimized `pulumi:"optimized"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of feature online store. eg us-central1
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiFeatureOnlineStore resource.
type AiFeatureOnlineStoreArgs struct {
	// Settings for Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
	// Structure is documented below.
	Bigtable AiFeatureOnlineStoreBigtablePtrInput
	// The dedicated serving endpoint for this FeatureOnlineStore, which is different from common vertex service endpoint. Only need to be set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default.
	// Structure is documented below.
	DedicatedServingEndpoint AiFeatureOnlineStoreDedicatedServingEndpointPtrInput
	// The settings for embedding management in FeatureOnlineStore. Embedding management can only be set for BigTable. It is enabled by default for optimized storagetype.
	// Structure is documented below.
	//
	// > **Warning:** `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	//
	// Deprecated: `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
	EmbeddingManagement AiFeatureOnlineStoreEmbeddingManagementPtrInput
	// If set to true, any FeatureViews and Features for this FeatureOnlineStore will also be deleted.
	ForceDestroy pulumi.BoolPtrInput
	// The labels with user-defined metadata to organize your feature online stores.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Feature Online Store. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name pulumi.StringPtrInput
	// Settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore
	Optimized AiFeatureOnlineStoreOptimizedPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of feature online store. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiFeatureOnlineStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiFeatureOnlineStoreArgs)(nil)).Elem()
}

type AiFeatureOnlineStoreInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreOutput() AiFeatureOnlineStoreOutput
	ToAiFeatureOnlineStoreOutputWithContext(ctx context.Context) AiFeatureOnlineStoreOutput
}

func (*AiFeatureOnlineStore) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureOnlineStore)(nil)).Elem()
}

func (i *AiFeatureOnlineStore) ToAiFeatureOnlineStoreOutput() AiFeatureOnlineStoreOutput {
	return i.ToAiFeatureOnlineStoreOutputWithContext(context.Background())
}

func (i *AiFeatureOnlineStore) ToAiFeatureOnlineStoreOutputWithContext(ctx context.Context) AiFeatureOnlineStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreOutput)
}

// AiFeatureOnlineStoreArrayInput is an input type that accepts AiFeatureOnlineStoreArray and AiFeatureOnlineStoreArrayOutput values.
// You can construct a concrete instance of `AiFeatureOnlineStoreArrayInput` via:
//
//	AiFeatureOnlineStoreArray{ AiFeatureOnlineStoreArgs{...} }
type AiFeatureOnlineStoreArrayInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreArrayOutput() AiFeatureOnlineStoreArrayOutput
	ToAiFeatureOnlineStoreArrayOutputWithContext(context.Context) AiFeatureOnlineStoreArrayOutput
}

type AiFeatureOnlineStoreArray []AiFeatureOnlineStoreInput

func (AiFeatureOnlineStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureOnlineStore)(nil)).Elem()
}

func (i AiFeatureOnlineStoreArray) ToAiFeatureOnlineStoreArrayOutput() AiFeatureOnlineStoreArrayOutput {
	return i.ToAiFeatureOnlineStoreArrayOutputWithContext(context.Background())
}

func (i AiFeatureOnlineStoreArray) ToAiFeatureOnlineStoreArrayOutputWithContext(ctx context.Context) AiFeatureOnlineStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreArrayOutput)
}

// AiFeatureOnlineStoreMapInput is an input type that accepts AiFeatureOnlineStoreMap and AiFeatureOnlineStoreMapOutput values.
// You can construct a concrete instance of `AiFeatureOnlineStoreMapInput` via:
//
//	AiFeatureOnlineStoreMap{ "key": AiFeatureOnlineStoreArgs{...} }
type AiFeatureOnlineStoreMapInput interface {
	pulumi.Input

	ToAiFeatureOnlineStoreMapOutput() AiFeatureOnlineStoreMapOutput
	ToAiFeatureOnlineStoreMapOutputWithContext(context.Context) AiFeatureOnlineStoreMapOutput
}

type AiFeatureOnlineStoreMap map[string]AiFeatureOnlineStoreInput

func (AiFeatureOnlineStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureOnlineStore)(nil)).Elem()
}

func (i AiFeatureOnlineStoreMap) ToAiFeatureOnlineStoreMapOutput() AiFeatureOnlineStoreMapOutput {
	return i.ToAiFeatureOnlineStoreMapOutputWithContext(context.Background())
}

func (i AiFeatureOnlineStoreMap) ToAiFeatureOnlineStoreMapOutputWithContext(ctx context.Context) AiFeatureOnlineStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiFeatureOnlineStoreMapOutput)
}

type AiFeatureOnlineStoreOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiFeatureOnlineStore)(nil)).Elem()
}

func (o AiFeatureOnlineStoreOutput) ToAiFeatureOnlineStoreOutput() AiFeatureOnlineStoreOutput {
	return o
}

func (o AiFeatureOnlineStoreOutput) ToAiFeatureOnlineStoreOutputWithContext(ctx context.Context) AiFeatureOnlineStoreOutput {
	return o
}

// Settings for Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
// Structure is documented below.
func (o AiFeatureOnlineStoreOutput) Bigtable() AiFeatureOnlineStoreBigtablePtrOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) AiFeatureOnlineStoreBigtablePtrOutput { return v.Bigtable }).(AiFeatureOnlineStoreBigtablePtrOutput)
}

// The timestamp of when the feature online store was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiFeatureOnlineStoreOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The dedicated serving endpoint for this FeatureOnlineStore, which is different from common vertex service endpoint. Only need to be set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default.
// Structure is documented below.
func (o AiFeatureOnlineStoreOutput) DedicatedServingEndpoint() AiFeatureOnlineStoreDedicatedServingEndpointOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) AiFeatureOnlineStoreDedicatedServingEndpointOutput {
		return v.DedicatedServingEndpoint
	}).(AiFeatureOnlineStoreDedicatedServingEndpointOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AiFeatureOnlineStoreOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The settings for embedding management in FeatureOnlineStore. Embedding management can only be set for BigTable. It is enabled by default for optimized storagetype.
// Structure is documented below.
//
// > **Warning:** `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
//
// Deprecated: `embeddingManagement` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
func (o AiFeatureOnlineStoreOutput) EmbeddingManagement() AiFeatureOnlineStoreEmbeddingManagementOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) AiFeatureOnlineStoreEmbeddingManagementOutput {
		return v.EmbeddingManagement
	}).(AiFeatureOnlineStoreEmbeddingManagementOutput)
}

// Used to perform consistent read-modify-write updates.
func (o AiFeatureOnlineStoreOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// If set to true, any FeatureViews and Features for this FeatureOnlineStore will also be deleted.
func (o AiFeatureOnlineStoreOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// The labels with user-defined metadata to organize your feature online stores.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o AiFeatureOnlineStoreOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the Feature Online Store. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
func (o AiFeatureOnlineStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore
func (o AiFeatureOnlineStoreOutput) Optimized() AiFeatureOnlineStoreOptimizedPtrOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) AiFeatureOnlineStoreOptimizedPtrOutput { return v.Optimized }).(AiFeatureOnlineStoreOptimizedPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiFeatureOnlineStoreOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AiFeatureOnlineStoreOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The region of feature online store. eg us-central1
func (o AiFeatureOnlineStoreOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The state of the Feature Online Store. See the possible states in [this link](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores#state).
func (o AiFeatureOnlineStoreOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The timestamp of when the feature online store was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiFeatureOnlineStoreOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiFeatureOnlineStore) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AiFeatureOnlineStoreArrayOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiFeatureOnlineStore)(nil)).Elem()
}

func (o AiFeatureOnlineStoreArrayOutput) ToAiFeatureOnlineStoreArrayOutput() AiFeatureOnlineStoreArrayOutput {
	return o
}

func (o AiFeatureOnlineStoreArrayOutput) ToAiFeatureOnlineStoreArrayOutputWithContext(ctx context.Context) AiFeatureOnlineStoreArrayOutput {
	return o
}

func (o AiFeatureOnlineStoreArrayOutput) Index(i pulumi.IntInput) AiFeatureOnlineStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiFeatureOnlineStore {
		return vs[0].([]*AiFeatureOnlineStore)[vs[1].(int)]
	}).(AiFeatureOnlineStoreOutput)
}

type AiFeatureOnlineStoreMapOutput struct{ *pulumi.OutputState }

func (AiFeatureOnlineStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiFeatureOnlineStore)(nil)).Elem()
}

func (o AiFeatureOnlineStoreMapOutput) ToAiFeatureOnlineStoreMapOutput() AiFeatureOnlineStoreMapOutput {
	return o
}

func (o AiFeatureOnlineStoreMapOutput) ToAiFeatureOnlineStoreMapOutputWithContext(ctx context.Context) AiFeatureOnlineStoreMapOutput {
	return o
}

func (o AiFeatureOnlineStoreMapOutput) MapIndex(k pulumi.StringInput) AiFeatureOnlineStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiFeatureOnlineStore {
		return vs[0].(map[string]*AiFeatureOnlineStore)[vs[1].(string)]
	}).(AiFeatureOnlineStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreInput)(nil)).Elem(), &AiFeatureOnlineStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreArrayInput)(nil)).Elem(), AiFeatureOnlineStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiFeatureOnlineStoreMapInput)(nil)).Elem(), AiFeatureOnlineStoreMap{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreOutput{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreArrayOutput{})
	pulumi.RegisterOutputType(AiFeatureOnlineStoreMapOutput{})
}
