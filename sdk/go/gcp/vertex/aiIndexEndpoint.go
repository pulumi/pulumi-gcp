// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vertex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An endpoint indexes are deployed into. An index endpoint can have multiple deployed indexes.
//
// To get more information about IndexEndpoint, see:
//
// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints/)
//
// ## Example Usage
// ### Vertex Ai Index Endpoint
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vertex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vertexNetwork, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name: "network-name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vertexRange, err := compute.NewGlobalAddress(ctx, "vertexRange", &compute.GlobalAddressArgs{
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(24),
//				Network:      *pulumi.String(vertexNetwork.Id),
//			})
//			if err != nil {
//				return err
//			}
//			vertexVpcConnection, err := servicenetworking.NewConnection(ctx, "vertexVpcConnection", &servicenetworking.ConnectionArgs{
//				Network: *pulumi.String(vertexNetwork.Id),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					vertexRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vertex.NewAiIndexEndpoint(ctx, "indexEndpoint", &vertex.AiIndexEndpointArgs{
//				DisplayName: pulumi.String("sample-endpoint"),
//				Description: pulumi.String("A sample vertex endpoint"),
//				Region:      pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label-one": pulumi.String("value-one"),
//				},
//				Network: pulumi.String(fmt.Sprintf("projects/%v/global/networks/%v", project.Number, vertexNetwork.Name)),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				vertexVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # IndexEndpoint can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiIndexEndpoint:AiIndexEndpoint default projects/{{project}}/locations/{{region}}/indexEndpoints/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiIndexEndpoint:AiIndexEndpoint default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiIndexEndpoint:AiIndexEndpoint default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:vertex/aiIndexEndpoint:AiIndexEndpoint default {{name}}
//
// ```
type AiIndexEndpoint struct {
	pulumi.CustomResourceState

	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the Index.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	//
	// ***
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels with user-defined metadata to organize your Indexes.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name of the Index.
	Name pulumi.StringOutput `pulumi:"name"`
	// The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the index endpoint should be peered.
	// Private services access must already be configured for the network. If left unspecified, the index endpoint is not peered with any network.
	// [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`.
	// Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
	Network pulumi.StringPtrOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the index endpoint. eg us-central1
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAiIndexEndpoint registers a new resource with the given unique name, arguments, and options.
func NewAiIndexEndpoint(ctx *pulumi.Context,
	name string, args *AiIndexEndpointArgs, opts ...pulumi.ResourceOption) (*AiIndexEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiIndexEndpoint
	err := ctx.RegisterResource("gcp:vertex/aiIndexEndpoint:AiIndexEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiIndexEndpoint gets an existing AiIndexEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiIndexEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiIndexEndpointState, opts ...pulumi.ResourceOption) (*AiIndexEndpoint, error) {
	var resource AiIndexEndpoint
	err := ctx.ReadResource("gcp:vertex/aiIndexEndpoint:AiIndexEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiIndexEndpoint resources.
type aiIndexEndpointState struct {
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// The description of the Index.
	Description *string `pulumi:"description"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	//
	// ***
	DisplayName *string `pulumi:"displayName"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// The labels with user-defined metadata to organize your Indexes.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Index.
	Name *string `pulumi:"name"`
	// The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the index endpoint should be peered.
	// Private services access must already be configured for the network. If left unspecified, the index endpoint is not peered with any network.
	// [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`.
	// Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the index endpoint. eg us-central1
	Region *string `pulumi:"region"`
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
}

type AiIndexEndpointState struct {
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// The description of the Index.
	Description pulumi.StringPtrInput
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	//
	// ***
	DisplayName pulumi.StringPtrInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your Indexes.
	Labels pulumi.StringMapInput
	// The resource name of the Index.
	Name pulumi.StringPtrInput
	// The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the index endpoint should be peered.
	// Private services access must already be configured for the network. If left unspecified, the index endpoint is not peered with any network.
	// [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`.
	// Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the index endpoint. eg us-central1
	Region pulumi.StringPtrInput
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime pulumi.StringPtrInput
}

func (AiIndexEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiIndexEndpointState)(nil)).Elem()
}

type aiIndexEndpointArgs struct {
	// The description of the Index.
	Description *string `pulumi:"description"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	//
	// ***
	DisplayName string `pulumi:"displayName"`
	// The labels with user-defined metadata to organize your Indexes.
	Labels map[string]string `pulumi:"labels"`
	// The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the index endpoint should be peered.
	// Private services access must already be configured for the network. If left unspecified, the index endpoint is not peered with any network.
	// [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`.
	// Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the index endpoint. eg us-central1
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AiIndexEndpoint resource.
type AiIndexEndpointArgs struct {
	// The description of the Index.
	Description pulumi.StringPtrInput
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	//
	// ***
	DisplayName pulumi.StringInput
	// The labels with user-defined metadata to organize your Indexes.
	Labels pulumi.StringMapInput
	// The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the index endpoint should be peered.
	// Private services access must already be configured for the network. If left unspecified, the index endpoint is not peered with any network.
	// [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`.
	// Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the index endpoint. eg us-central1
	Region pulumi.StringPtrInput
}

func (AiIndexEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiIndexEndpointArgs)(nil)).Elem()
}

type AiIndexEndpointInput interface {
	pulumi.Input

	ToAiIndexEndpointOutput() AiIndexEndpointOutput
	ToAiIndexEndpointOutputWithContext(ctx context.Context) AiIndexEndpointOutput
}

func (*AiIndexEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**AiIndexEndpoint)(nil)).Elem()
}

func (i *AiIndexEndpoint) ToAiIndexEndpointOutput() AiIndexEndpointOutput {
	return i.ToAiIndexEndpointOutputWithContext(context.Background())
}

func (i *AiIndexEndpoint) ToAiIndexEndpointOutputWithContext(ctx context.Context) AiIndexEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiIndexEndpointOutput)
}

func (i *AiIndexEndpoint) ToOutput(ctx context.Context) pulumix.Output[*AiIndexEndpoint] {
	return pulumix.Output[*AiIndexEndpoint]{
		OutputState: i.ToAiIndexEndpointOutputWithContext(ctx).OutputState,
	}
}

// AiIndexEndpointArrayInput is an input type that accepts AiIndexEndpointArray and AiIndexEndpointArrayOutput values.
// You can construct a concrete instance of `AiIndexEndpointArrayInput` via:
//
//	AiIndexEndpointArray{ AiIndexEndpointArgs{...} }
type AiIndexEndpointArrayInput interface {
	pulumi.Input

	ToAiIndexEndpointArrayOutput() AiIndexEndpointArrayOutput
	ToAiIndexEndpointArrayOutputWithContext(context.Context) AiIndexEndpointArrayOutput
}

type AiIndexEndpointArray []AiIndexEndpointInput

func (AiIndexEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiIndexEndpoint)(nil)).Elem()
}

func (i AiIndexEndpointArray) ToAiIndexEndpointArrayOutput() AiIndexEndpointArrayOutput {
	return i.ToAiIndexEndpointArrayOutputWithContext(context.Background())
}

func (i AiIndexEndpointArray) ToAiIndexEndpointArrayOutputWithContext(ctx context.Context) AiIndexEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiIndexEndpointArrayOutput)
}

func (i AiIndexEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]*AiIndexEndpoint] {
	return pulumix.Output[[]*AiIndexEndpoint]{
		OutputState: i.ToAiIndexEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

// AiIndexEndpointMapInput is an input type that accepts AiIndexEndpointMap and AiIndexEndpointMapOutput values.
// You can construct a concrete instance of `AiIndexEndpointMapInput` via:
//
//	AiIndexEndpointMap{ "key": AiIndexEndpointArgs{...} }
type AiIndexEndpointMapInput interface {
	pulumi.Input

	ToAiIndexEndpointMapOutput() AiIndexEndpointMapOutput
	ToAiIndexEndpointMapOutputWithContext(context.Context) AiIndexEndpointMapOutput
}

type AiIndexEndpointMap map[string]AiIndexEndpointInput

func (AiIndexEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiIndexEndpoint)(nil)).Elem()
}

func (i AiIndexEndpointMap) ToAiIndexEndpointMapOutput() AiIndexEndpointMapOutput {
	return i.ToAiIndexEndpointMapOutputWithContext(context.Background())
}

func (i AiIndexEndpointMap) ToAiIndexEndpointMapOutputWithContext(ctx context.Context) AiIndexEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiIndexEndpointMapOutput)
}

func (i AiIndexEndpointMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AiIndexEndpoint] {
	return pulumix.Output[map[string]*AiIndexEndpoint]{
		OutputState: i.ToAiIndexEndpointMapOutputWithContext(ctx).OutputState,
	}
}

type AiIndexEndpointOutput struct{ *pulumi.OutputState }

func (AiIndexEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiIndexEndpoint)(nil)).Elem()
}

func (o AiIndexEndpointOutput) ToAiIndexEndpointOutput() AiIndexEndpointOutput {
	return o
}

func (o AiIndexEndpointOutput) ToAiIndexEndpointOutputWithContext(ctx context.Context) AiIndexEndpointOutput {
	return o
}

func (o AiIndexEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[*AiIndexEndpoint] {
	return pulumix.Output[*AiIndexEndpoint]{
		OutputState: o.OutputState,
	}
}

// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiIndexEndpointOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the Index.
func (o AiIndexEndpointOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
//
// ***
func (o AiIndexEndpointOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Used to perform consistent read-modify-write updates.
func (o AiIndexEndpointOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The labels with user-defined metadata to organize your Indexes.
func (o AiIndexEndpointOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the Index.
func (o AiIndexEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the index endpoint should be peered.
// Private services access must already be configured for the network. If left unspecified, the index endpoint is not peered with any network.
// [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`.
// Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
func (o AiIndexEndpointOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringPtrOutput { return v.Network }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AiIndexEndpointOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the index endpoint. eg us-central1
func (o AiIndexEndpointOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
func (o AiIndexEndpointOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AiIndexEndpoint) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AiIndexEndpointArrayOutput struct{ *pulumi.OutputState }

func (AiIndexEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AiIndexEndpoint)(nil)).Elem()
}

func (o AiIndexEndpointArrayOutput) ToAiIndexEndpointArrayOutput() AiIndexEndpointArrayOutput {
	return o
}

func (o AiIndexEndpointArrayOutput) ToAiIndexEndpointArrayOutputWithContext(ctx context.Context) AiIndexEndpointArrayOutput {
	return o
}

func (o AiIndexEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AiIndexEndpoint] {
	return pulumix.Output[[]*AiIndexEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o AiIndexEndpointArrayOutput) Index(i pulumi.IntInput) AiIndexEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AiIndexEndpoint {
		return vs[0].([]*AiIndexEndpoint)[vs[1].(int)]
	}).(AiIndexEndpointOutput)
}

type AiIndexEndpointMapOutput struct{ *pulumi.OutputState }

func (AiIndexEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AiIndexEndpoint)(nil)).Elem()
}

func (o AiIndexEndpointMapOutput) ToAiIndexEndpointMapOutput() AiIndexEndpointMapOutput {
	return o
}

func (o AiIndexEndpointMapOutput) ToAiIndexEndpointMapOutputWithContext(ctx context.Context) AiIndexEndpointMapOutput {
	return o
}

func (o AiIndexEndpointMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AiIndexEndpoint] {
	return pulumix.Output[map[string]*AiIndexEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o AiIndexEndpointMapOutput) MapIndex(k pulumi.StringInput) AiIndexEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AiIndexEndpoint {
		return vs[0].(map[string]*AiIndexEndpoint)[vs[1].(string)]
	}).(AiIndexEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiIndexEndpointInput)(nil)).Elem(), &AiIndexEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiIndexEndpointArrayInput)(nil)).Elem(), AiIndexEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AiIndexEndpointMapInput)(nil)).Elem(), AiIndexEndpointMap{})
	pulumi.RegisterOutputType(AiIndexEndpointOutput{})
	pulumi.RegisterOutputType(AiIndexEndpointArrayOutput{})
	pulumi.RegisterOutputType(AiIndexEndpointMapOutput{})
}
