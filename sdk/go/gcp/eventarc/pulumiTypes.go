// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventarc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TriggerDestination struct {
	// [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
	CloudFunction *string `pulumi:"cloudFunction"`
	// Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
	CloudRunService *TriggerDestinationCloudRunService `pulumi:"cloudRunService"`
	// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
	Gke *TriggerDestinationGke `pulumi:"gke"`
	// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
	Workflow *string `pulumi:"workflow"`
}

// TriggerDestinationInput is an input type that accepts TriggerDestinationArgs and TriggerDestinationOutput values.
// You can construct a concrete instance of `TriggerDestinationInput` via:
//
//	TriggerDestinationArgs{...}
type TriggerDestinationInput interface {
	pulumi.Input

	ToTriggerDestinationOutput() TriggerDestinationOutput
	ToTriggerDestinationOutputWithContext(context.Context) TriggerDestinationOutput
}

type TriggerDestinationArgs struct {
	// [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
	CloudFunction pulumi.StringPtrInput `pulumi:"cloudFunction"`
	// Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
	CloudRunService TriggerDestinationCloudRunServicePtrInput `pulumi:"cloudRunService"`
	// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
	Gke TriggerDestinationGkePtrInput `pulumi:"gke"`
	// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
	Workflow pulumi.StringPtrInput `pulumi:"workflow"`
}

func (TriggerDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDestination)(nil)).Elem()
}

func (i TriggerDestinationArgs) ToTriggerDestinationOutput() TriggerDestinationOutput {
	return i.ToTriggerDestinationOutputWithContext(context.Background())
}

func (i TriggerDestinationArgs) ToTriggerDestinationOutputWithContext(ctx context.Context) TriggerDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationOutput)
}

func (i TriggerDestinationArgs) ToTriggerDestinationPtrOutput() TriggerDestinationPtrOutput {
	return i.ToTriggerDestinationPtrOutputWithContext(context.Background())
}

func (i TriggerDestinationArgs) ToTriggerDestinationPtrOutputWithContext(ctx context.Context) TriggerDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationOutput).ToTriggerDestinationPtrOutputWithContext(ctx)
}

// TriggerDestinationPtrInput is an input type that accepts TriggerDestinationArgs, TriggerDestinationPtr and TriggerDestinationPtrOutput values.
// You can construct a concrete instance of `TriggerDestinationPtrInput` via:
//
//	        TriggerDestinationArgs{...}
//
//	or:
//
//	        nil
type TriggerDestinationPtrInput interface {
	pulumi.Input

	ToTriggerDestinationPtrOutput() TriggerDestinationPtrOutput
	ToTriggerDestinationPtrOutputWithContext(context.Context) TriggerDestinationPtrOutput
}

type triggerDestinationPtrType TriggerDestinationArgs

func TriggerDestinationPtr(v *TriggerDestinationArgs) TriggerDestinationPtrInput {
	return (*triggerDestinationPtrType)(v)
}

func (*triggerDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerDestination)(nil)).Elem()
}

func (i *triggerDestinationPtrType) ToTriggerDestinationPtrOutput() TriggerDestinationPtrOutput {
	return i.ToTriggerDestinationPtrOutputWithContext(context.Background())
}

func (i *triggerDestinationPtrType) ToTriggerDestinationPtrOutputWithContext(ctx context.Context) TriggerDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationPtrOutput)
}

type TriggerDestinationOutput struct{ *pulumi.OutputState }

func (TriggerDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDestination)(nil)).Elem()
}

func (o TriggerDestinationOutput) ToTriggerDestinationOutput() TriggerDestinationOutput {
	return o
}

func (o TriggerDestinationOutput) ToTriggerDestinationOutputWithContext(ctx context.Context) TriggerDestinationOutput {
	return o
}

func (o TriggerDestinationOutput) ToTriggerDestinationPtrOutput() TriggerDestinationPtrOutput {
	return o.ToTriggerDestinationPtrOutputWithContext(context.Background())
}

func (o TriggerDestinationOutput) ToTriggerDestinationPtrOutputWithContext(ctx context.Context) TriggerDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerDestination) *TriggerDestination {
		return &v
	}).(TriggerDestinationPtrOutput)
}

// [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
func (o TriggerDestinationOutput) CloudFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerDestination) *string { return v.CloudFunction }).(pulumi.StringPtrOutput)
}

// Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
func (o TriggerDestinationOutput) CloudRunService() TriggerDestinationCloudRunServicePtrOutput {
	return o.ApplyT(func(v TriggerDestination) *TriggerDestinationCloudRunService { return v.CloudRunService }).(TriggerDestinationCloudRunServicePtrOutput)
}

// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
func (o TriggerDestinationOutput) Gke() TriggerDestinationGkePtrOutput {
	return o.ApplyT(func(v TriggerDestination) *TriggerDestinationGke { return v.Gke }).(TriggerDestinationGkePtrOutput)
}

// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
func (o TriggerDestinationOutput) Workflow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerDestination) *string { return v.Workflow }).(pulumi.StringPtrOutput)
}

type TriggerDestinationPtrOutput struct{ *pulumi.OutputState }

func (TriggerDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerDestination)(nil)).Elem()
}

func (o TriggerDestinationPtrOutput) ToTriggerDestinationPtrOutput() TriggerDestinationPtrOutput {
	return o
}

func (o TriggerDestinationPtrOutput) ToTriggerDestinationPtrOutputWithContext(ctx context.Context) TriggerDestinationPtrOutput {
	return o
}

func (o TriggerDestinationPtrOutput) Elem() TriggerDestinationOutput {
	return o.ApplyT(func(v *TriggerDestination) TriggerDestination {
		if v != nil {
			return *v
		}
		var ret TriggerDestination
		return ret
	}).(TriggerDestinationOutput)
}

// [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
func (o TriggerDestinationPtrOutput) CloudFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestination) *string {
		if v == nil {
			return nil
		}
		return v.CloudFunction
	}).(pulumi.StringPtrOutput)
}

// Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
func (o TriggerDestinationPtrOutput) CloudRunService() TriggerDestinationCloudRunServicePtrOutput {
	return o.ApplyT(func(v *TriggerDestination) *TriggerDestinationCloudRunService {
		if v == nil {
			return nil
		}
		return v.CloudRunService
	}).(TriggerDestinationCloudRunServicePtrOutput)
}

// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
func (o TriggerDestinationPtrOutput) Gke() TriggerDestinationGkePtrOutput {
	return o.ApplyT(func(v *TriggerDestination) *TriggerDestinationGke {
		if v == nil {
			return nil
		}
		return v.Gke
	}).(TriggerDestinationGkePtrOutput)
}

// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
func (o TriggerDestinationPtrOutput) Workflow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestination) *string {
		if v == nil {
			return nil
		}
		return v.Workflow
	}).(pulumi.StringPtrOutput)
}

type TriggerDestinationCloudRunService struct {
	// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path *string `pulumi:"path"`
	// Required. The region the Cloud Run service is deployed in.
	Region *string `pulumi:"region"`
	// Required. The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project of the trigger object can be addressed.
	Service string `pulumi:"service"`
}

// TriggerDestinationCloudRunServiceInput is an input type that accepts TriggerDestinationCloudRunServiceArgs and TriggerDestinationCloudRunServiceOutput values.
// You can construct a concrete instance of `TriggerDestinationCloudRunServiceInput` via:
//
//	TriggerDestinationCloudRunServiceArgs{...}
type TriggerDestinationCloudRunServiceInput interface {
	pulumi.Input

	ToTriggerDestinationCloudRunServiceOutput() TriggerDestinationCloudRunServiceOutput
	ToTriggerDestinationCloudRunServiceOutputWithContext(context.Context) TriggerDestinationCloudRunServiceOutput
}

type TriggerDestinationCloudRunServiceArgs struct {
	// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Required. The region the Cloud Run service is deployed in.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Required. The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project of the trigger object can be addressed.
	Service pulumi.StringInput `pulumi:"service"`
}

func (TriggerDestinationCloudRunServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDestinationCloudRunService)(nil)).Elem()
}

func (i TriggerDestinationCloudRunServiceArgs) ToTriggerDestinationCloudRunServiceOutput() TriggerDestinationCloudRunServiceOutput {
	return i.ToTriggerDestinationCloudRunServiceOutputWithContext(context.Background())
}

func (i TriggerDestinationCloudRunServiceArgs) ToTriggerDestinationCloudRunServiceOutputWithContext(ctx context.Context) TriggerDestinationCloudRunServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationCloudRunServiceOutput)
}

func (i TriggerDestinationCloudRunServiceArgs) ToTriggerDestinationCloudRunServicePtrOutput() TriggerDestinationCloudRunServicePtrOutput {
	return i.ToTriggerDestinationCloudRunServicePtrOutputWithContext(context.Background())
}

func (i TriggerDestinationCloudRunServiceArgs) ToTriggerDestinationCloudRunServicePtrOutputWithContext(ctx context.Context) TriggerDestinationCloudRunServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationCloudRunServiceOutput).ToTriggerDestinationCloudRunServicePtrOutputWithContext(ctx)
}

// TriggerDestinationCloudRunServicePtrInput is an input type that accepts TriggerDestinationCloudRunServiceArgs, TriggerDestinationCloudRunServicePtr and TriggerDestinationCloudRunServicePtrOutput values.
// You can construct a concrete instance of `TriggerDestinationCloudRunServicePtrInput` via:
//
//	        TriggerDestinationCloudRunServiceArgs{...}
//
//	or:
//
//	        nil
type TriggerDestinationCloudRunServicePtrInput interface {
	pulumi.Input

	ToTriggerDestinationCloudRunServicePtrOutput() TriggerDestinationCloudRunServicePtrOutput
	ToTriggerDestinationCloudRunServicePtrOutputWithContext(context.Context) TriggerDestinationCloudRunServicePtrOutput
}

type triggerDestinationCloudRunServicePtrType TriggerDestinationCloudRunServiceArgs

func TriggerDestinationCloudRunServicePtr(v *TriggerDestinationCloudRunServiceArgs) TriggerDestinationCloudRunServicePtrInput {
	return (*triggerDestinationCloudRunServicePtrType)(v)
}

func (*triggerDestinationCloudRunServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerDestinationCloudRunService)(nil)).Elem()
}

func (i *triggerDestinationCloudRunServicePtrType) ToTriggerDestinationCloudRunServicePtrOutput() TriggerDestinationCloudRunServicePtrOutput {
	return i.ToTriggerDestinationCloudRunServicePtrOutputWithContext(context.Background())
}

func (i *triggerDestinationCloudRunServicePtrType) ToTriggerDestinationCloudRunServicePtrOutputWithContext(ctx context.Context) TriggerDestinationCloudRunServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationCloudRunServicePtrOutput)
}

type TriggerDestinationCloudRunServiceOutput struct{ *pulumi.OutputState }

func (TriggerDestinationCloudRunServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDestinationCloudRunService)(nil)).Elem()
}

func (o TriggerDestinationCloudRunServiceOutput) ToTriggerDestinationCloudRunServiceOutput() TriggerDestinationCloudRunServiceOutput {
	return o
}

func (o TriggerDestinationCloudRunServiceOutput) ToTriggerDestinationCloudRunServiceOutputWithContext(ctx context.Context) TriggerDestinationCloudRunServiceOutput {
	return o
}

func (o TriggerDestinationCloudRunServiceOutput) ToTriggerDestinationCloudRunServicePtrOutput() TriggerDestinationCloudRunServicePtrOutput {
	return o.ToTriggerDestinationCloudRunServicePtrOutputWithContext(context.Background())
}

func (o TriggerDestinationCloudRunServiceOutput) ToTriggerDestinationCloudRunServicePtrOutputWithContext(ctx context.Context) TriggerDestinationCloudRunServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerDestinationCloudRunService) *TriggerDestinationCloudRunService {
		return &v
	}).(TriggerDestinationCloudRunServicePtrOutput)
}

// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o TriggerDestinationCloudRunServiceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerDestinationCloudRunService) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Required. The region the Cloud Run service is deployed in.
func (o TriggerDestinationCloudRunServiceOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerDestinationCloudRunService) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Required. The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project of the trigger object can be addressed.
func (o TriggerDestinationCloudRunServiceOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDestinationCloudRunService) string { return v.Service }).(pulumi.StringOutput)
}

type TriggerDestinationCloudRunServicePtrOutput struct{ *pulumi.OutputState }

func (TriggerDestinationCloudRunServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerDestinationCloudRunService)(nil)).Elem()
}

func (o TriggerDestinationCloudRunServicePtrOutput) ToTriggerDestinationCloudRunServicePtrOutput() TriggerDestinationCloudRunServicePtrOutput {
	return o
}

func (o TriggerDestinationCloudRunServicePtrOutput) ToTriggerDestinationCloudRunServicePtrOutputWithContext(ctx context.Context) TriggerDestinationCloudRunServicePtrOutput {
	return o
}

func (o TriggerDestinationCloudRunServicePtrOutput) Elem() TriggerDestinationCloudRunServiceOutput {
	return o.ApplyT(func(v *TriggerDestinationCloudRunService) TriggerDestinationCloudRunService {
		if v != nil {
			return *v
		}
		var ret TriggerDestinationCloudRunService
		return ret
	}).(TriggerDestinationCloudRunServiceOutput)
}

// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o TriggerDestinationCloudRunServicePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestinationCloudRunService) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Required. The region the Cloud Run service is deployed in.
func (o TriggerDestinationCloudRunServicePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestinationCloudRunService) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// Required. The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project of the trigger object can be addressed.
func (o TriggerDestinationCloudRunServicePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestinationCloudRunService) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type TriggerDestinationGke struct {
	// Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
	Cluster string `pulumi:"cluster"`
	// Required. The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
	Location string `pulumi:"location"`
	// Required. The namespace the GKE service is running in.
	Namespace string `pulumi:"namespace"`
	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path *string `pulumi:"path"`
	// Required. Name of the GKE service.
	Service string `pulumi:"service"`
}

// TriggerDestinationGkeInput is an input type that accepts TriggerDestinationGkeArgs and TriggerDestinationGkeOutput values.
// You can construct a concrete instance of `TriggerDestinationGkeInput` via:
//
//	TriggerDestinationGkeArgs{...}
type TriggerDestinationGkeInput interface {
	pulumi.Input

	ToTriggerDestinationGkeOutput() TriggerDestinationGkeOutput
	ToTriggerDestinationGkeOutputWithContext(context.Context) TriggerDestinationGkeOutput
}

type TriggerDestinationGkeArgs struct {
	// Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// Required. The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
	Location pulumi.StringInput `pulumi:"location"`
	// Required. The namespace the GKE service is running in.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Required. Name of the GKE service.
	Service pulumi.StringInput `pulumi:"service"`
}

func (TriggerDestinationGkeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDestinationGke)(nil)).Elem()
}

func (i TriggerDestinationGkeArgs) ToTriggerDestinationGkeOutput() TriggerDestinationGkeOutput {
	return i.ToTriggerDestinationGkeOutputWithContext(context.Background())
}

func (i TriggerDestinationGkeArgs) ToTriggerDestinationGkeOutputWithContext(ctx context.Context) TriggerDestinationGkeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationGkeOutput)
}

func (i TriggerDestinationGkeArgs) ToTriggerDestinationGkePtrOutput() TriggerDestinationGkePtrOutput {
	return i.ToTriggerDestinationGkePtrOutputWithContext(context.Background())
}

func (i TriggerDestinationGkeArgs) ToTriggerDestinationGkePtrOutputWithContext(ctx context.Context) TriggerDestinationGkePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationGkeOutput).ToTriggerDestinationGkePtrOutputWithContext(ctx)
}

// TriggerDestinationGkePtrInput is an input type that accepts TriggerDestinationGkeArgs, TriggerDestinationGkePtr and TriggerDestinationGkePtrOutput values.
// You can construct a concrete instance of `TriggerDestinationGkePtrInput` via:
//
//	        TriggerDestinationGkeArgs{...}
//
//	or:
//
//	        nil
type TriggerDestinationGkePtrInput interface {
	pulumi.Input

	ToTriggerDestinationGkePtrOutput() TriggerDestinationGkePtrOutput
	ToTriggerDestinationGkePtrOutputWithContext(context.Context) TriggerDestinationGkePtrOutput
}

type triggerDestinationGkePtrType TriggerDestinationGkeArgs

func TriggerDestinationGkePtr(v *TriggerDestinationGkeArgs) TriggerDestinationGkePtrInput {
	return (*triggerDestinationGkePtrType)(v)
}

func (*triggerDestinationGkePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerDestinationGke)(nil)).Elem()
}

func (i *triggerDestinationGkePtrType) ToTriggerDestinationGkePtrOutput() TriggerDestinationGkePtrOutput {
	return i.ToTriggerDestinationGkePtrOutputWithContext(context.Background())
}

func (i *triggerDestinationGkePtrType) ToTriggerDestinationGkePtrOutputWithContext(ctx context.Context) TriggerDestinationGkePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDestinationGkePtrOutput)
}

type TriggerDestinationGkeOutput struct{ *pulumi.OutputState }

func (TriggerDestinationGkeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDestinationGke)(nil)).Elem()
}

func (o TriggerDestinationGkeOutput) ToTriggerDestinationGkeOutput() TriggerDestinationGkeOutput {
	return o
}

func (o TriggerDestinationGkeOutput) ToTriggerDestinationGkeOutputWithContext(ctx context.Context) TriggerDestinationGkeOutput {
	return o
}

func (o TriggerDestinationGkeOutput) ToTriggerDestinationGkePtrOutput() TriggerDestinationGkePtrOutput {
	return o.ToTriggerDestinationGkePtrOutputWithContext(context.Background())
}

func (o TriggerDestinationGkeOutput) ToTriggerDestinationGkePtrOutputWithContext(ctx context.Context) TriggerDestinationGkePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerDestinationGke) *TriggerDestinationGke {
		return &v
	}).(TriggerDestinationGkePtrOutput)
}

// Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
func (o TriggerDestinationGkeOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDestinationGke) string { return v.Cluster }).(pulumi.StringOutput)
}

// Required. The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
func (o TriggerDestinationGkeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDestinationGke) string { return v.Location }).(pulumi.StringOutput)
}

// Required. The namespace the GKE service is running in.
func (o TriggerDestinationGkeOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDestinationGke) string { return v.Namespace }).(pulumi.StringOutput)
}

// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o TriggerDestinationGkeOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerDestinationGke) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Required. Name of the GKE service.
func (o TriggerDestinationGkeOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDestinationGke) string { return v.Service }).(pulumi.StringOutput)
}

type TriggerDestinationGkePtrOutput struct{ *pulumi.OutputState }

func (TriggerDestinationGkePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerDestinationGke)(nil)).Elem()
}

func (o TriggerDestinationGkePtrOutput) ToTriggerDestinationGkePtrOutput() TriggerDestinationGkePtrOutput {
	return o
}

func (o TriggerDestinationGkePtrOutput) ToTriggerDestinationGkePtrOutputWithContext(ctx context.Context) TriggerDestinationGkePtrOutput {
	return o
}

func (o TriggerDestinationGkePtrOutput) Elem() TriggerDestinationGkeOutput {
	return o.ApplyT(func(v *TriggerDestinationGke) TriggerDestinationGke {
		if v != nil {
			return *v
		}
		var ret TriggerDestinationGke
		return ret
	}).(TriggerDestinationGkeOutput)
}

// Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
func (o TriggerDestinationGkePtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestinationGke) *string {
		if v == nil {
			return nil
		}
		return &v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Required. The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
func (o TriggerDestinationGkePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestinationGke) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Required. The namespace the GKE service is running in.
func (o TriggerDestinationGkePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestinationGke) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o TriggerDestinationGkePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestinationGke) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Required. Name of the GKE service.
func (o TriggerDestinationGkePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDestinationGke) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type TriggerMatchingCriteria struct {
	// Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
	Attribute string `pulumi:"attribute"`
	// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is `match-path-pattern`.
	Operator *string `pulumi:"operator"`
	// Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
	Value string `pulumi:"value"`
}

// TriggerMatchingCriteriaInput is an input type that accepts TriggerMatchingCriteriaArgs and TriggerMatchingCriteriaOutput values.
// You can construct a concrete instance of `TriggerMatchingCriteriaInput` via:
//
//	TriggerMatchingCriteriaArgs{...}
type TriggerMatchingCriteriaInput interface {
	pulumi.Input

	ToTriggerMatchingCriteriaOutput() TriggerMatchingCriteriaOutput
	ToTriggerMatchingCriteriaOutputWithContext(context.Context) TriggerMatchingCriteriaOutput
}

type TriggerMatchingCriteriaArgs struct {
	// Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is `match-path-pattern`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TriggerMatchingCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerMatchingCriteria)(nil)).Elem()
}

func (i TriggerMatchingCriteriaArgs) ToTriggerMatchingCriteriaOutput() TriggerMatchingCriteriaOutput {
	return i.ToTriggerMatchingCriteriaOutputWithContext(context.Background())
}

func (i TriggerMatchingCriteriaArgs) ToTriggerMatchingCriteriaOutputWithContext(ctx context.Context) TriggerMatchingCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerMatchingCriteriaOutput)
}

// TriggerMatchingCriteriaArrayInput is an input type that accepts TriggerMatchingCriteriaArray and TriggerMatchingCriteriaArrayOutput values.
// You can construct a concrete instance of `TriggerMatchingCriteriaArrayInput` via:
//
//	TriggerMatchingCriteriaArray{ TriggerMatchingCriteriaArgs{...} }
type TriggerMatchingCriteriaArrayInput interface {
	pulumi.Input

	ToTriggerMatchingCriteriaArrayOutput() TriggerMatchingCriteriaArrayOutput
	ToTriggerMatchingCriteriaArrayOutputWithContext(context.Context) TriggerMatchingCriteriaArrayOutput
}

type TriggerMatchingCriteriaArray []TriggerMatchingCriteriaInput

func (TriggerMatchingCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerMatchingCriteria)(nil)).Elem()
}

func (i TriggerMatchingCriteriaArray) ToTriggerMatchingCriteriaArrayOutput() TriggerMatchingCriteriaArrayOutput {
	return i.ToTriggerMatchingCriteriaArrayOutputWithContext(context.Background())
}

func (i TriggerMatchingCriteriaArray) ToTriggerMatchingCriteriaArrayOutputWithContext(ctx context.Context) TriggerMatchingCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerMatchingCriteriaArrayOutput)
}

type TriggerMatchingCriteriaOutput struct{ *pulumi.OutputState }

func (TriggerMatchingCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerMatchingCriteria)(nil)).Elem()
}

func (o TriggerMatchingCriteriaOutput) ToTriggerMatchingCriteriaOutput() TriggerMatchingCriteriaOutput {
	return o
}

func (o TriggerMatchingCriteriaOutput) ToTriggerMatchingCriteriaOutputWithContext(ctx context.Context) TriggerMatchingCriteriaOutput {
	return o
}

// Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
func (o TriggerMatchingCriteriaOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerMatchingCriteria) string { return v.Attribute }).(pulumi.StringOutput)
}

// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is `match-path-pattern`.
func (o TriggerMatchingCriteriaOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerMatchingCriteria) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
func (o TriggerMatchingCriteriaOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerMatchingCriteria) string { return v.Value }).(pulumi.StringOutput)
}

type TriggerMatchingCriteriaArrayOutput struct{ *pulumi.OutputState }

func (TriggerMatchingCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerMatchingCriteria)(nil)).Elem()
}

func (o TriggerMatchingCriteriaArrayOutput) ToTriggerMatchingCriteriaArrayOutput() TriggerMatchingCriteriaArrayOutput {
	return o
}

func (o TriggerMatchingCriteriaArrayOutput) ToTriggerMatchingCriteriaArrayOutputWithContext(ctx context.Context) TriggerMatchingCriteriaArrayOutput {
	return o
}

func (o TriggerMatchingCriteriaArrayOutput) Index(i pulumi.IntInput) TriggerMatchingCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerMatchingCriteria {
		return vs[0].([]TriggerMatchingCriteria)[vs[1].(int)]
	}).(TriggerMatchingCriteriaOutput)
}

type TriggerTransport struct {
	// The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
	Pubsubs []TriggerTransportPubsub `pulumi:"pubsubs"`
}

// TriggerTransportInput is an input type that accepts TriggerTransportArgs and TriggerTransportOutput values.
// You can construct a concrete instance of `TriggerTransportInput` via:
//
//	TriggerTransportArgs{...}
type TriggerTransportInput interface {
	pulumi.Input

	ToTriggerTransportOutput() TriggerTransportOutput
	ToTriggerTransportOutputWithContext(context.Context) TriggerTransportOutput
}

type TriggerTransportArgs struct {
	// The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
	Pubsubs TriggerTransportPubsubArrayInput `pulumi:"pubsubs"`
}

func (TriggerTransportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTransport)(nil)).Elem()
}

func (i TriggerTransportArgs) ToTriggerTransportOutput() TriggerTransportOutput {
	return i.ToTriggerTransportOutputWithContext(context.Background())
}

func (i TriggerTransportArgs) ToTriggerTransportOutputWithContext(ctx context.Context) TriggerTransportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTransportOutput)
}

// TriggerTransportArrayInput is an input type that accepts TriggerTransportArray and TriggerTransportArrayOutput values.
// You can construct a concrete instance of `TriggerTransportArrayInput` via:
//
//	TriggerTransportArray{ TriggerTransportArgs{...} }
type TriggerTransportArrayInput interface {
	pulumi.Input

	ToTriggerTransportArrayOutput() TriggerTransportArrayOutput
	ToTriggerTransportArrayOutputWithContext(context.Context) TriggerTransportArrayOutput
}

type TriggerTransportArray []TriggerTransportInput

func (TriggerTransportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerTransport)(nil)).Elem()
}

func (i TriggerTransportArray) ToTriggerTransportArrayOutput() TriggerTransportArrayOutput {
	return i.ToTriggerTransportArrayOutputWithContext(context.Background())
}

func (i TriggerTransportArray) ToTriggerTransportArrayOutputWithContext(ctx context.Context) TriggerTransportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTransportArrayOutput)
}

type TriggerTransportOutput struct{ *pulumi.OutputState }

func (TriggerTransportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTransport)(nil)).Elem()
}

func (o TriggerTransportOutput) ToTriggerTransportOutput() TriggerTransportOutput {
	return o
}

func (o TriggerTransportOutput) ToTriggerTransportOutputWithContext(ctx context.Context) TriggerTransportOutput {
	return o
}

// The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
func (o TriggerTransportOutput) Pubsubs() TriggerTransportPubsubArrayOutput {
	return o.ApplyT(func(v TriggerTransport) []TriggerTransportPubsub { return v.Pubsubs }).(TriggerTransportPubsubArrayOutput)
}

type TriggerTransportArrayOutput struct{ *pulumi.OutputState }

func (TriggerTransportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerTransport)(nil)).Elem()
}

func (o TriggerTransportArrayOutput) ToTriggerTransportArrayOutput() TriggerTransportArrayOutput {
	return o
}

func (o TriggerTransportArrayOutput) ToTriggerTransportArrayOutputWithContext(ctx context.Context) TriggerTransportArrayOutput {
	return o
}

func (o TriggerTransportArrayOutput) Index(i pulumi.IntInput) TriggerTransportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerTransport {
		return vs[0].([]TriggerTransport)[vs[1].(int)]
	}).(TriggerTransportOutput)
}

type TriggerTransportPubsub struct {
	// Output only. The name of the Pub/Sub subscription created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
	Subscription *string `pulumi:"subscription"`
	// Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
	Topic *string `pulumi:"topic"`
}

// TriggerTransportPubsubInput is an input type that accepts TriggerTransportPubsubArgs and TriggerTransportPubsubOutput values.
// You can construct a concrete instance of `TriggerTransportPubsubInput` via:
//
//	TriggerTransportPubsubArgs{...}
type TriggerTransportPubsubInput interface {
	pulumi.Input

	ToTriggerTransportPubsubOutput() TriggerTransportPubsubOutput
	ToTriggerTransportPubsubOutputWithContext(context.Context) TriggerTransportPubsubOutput
}

type TriggerTransportPubsubArgs struct {
	// Output only. The name of the Pub/Sub subscription created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
	Subscription pulumi.StringPtrInput `pulumi:"subscription"`
	// Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (TriggerTransportPubsubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTransportPubsub)(nil)).Elem()
}

func (i TriggerTransportPubsubArgs) ToTriggerTransportPubsubOutput() TriggerTransportPubsubOutput {
	return i.ToTriggerTransportPubsubOutputWithContext(context.Background())
}

func (i TriggerTransportPubsubArgs) ToTriggerTransportPubsubOutputWithContext(ctx context.Context) TriggerTransportPubsubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTransportPubsubOutput)
}

// TriggerTransportPubsubArrayInput is an input type that accepts TriggerTransportPubsubArray and TriggerTransportPubsubArrayOutput values.
// You can construct a concrete instance of `TriggerTransportPubsubArrayInput` via:
//
//	TriggerTransportPubsubArray{ TriggerTransportPubsubArgs{...} }
type TriggerTransportPubsubArrayInput interface {
	pulumi.Input

	ToTriggerTransportPubsubArrayOutput() TriggerTransportPubsubArrayOutput
	ToTriggerTransportPubsubArrayOutputWithContext(context.Context) TriggerTransportPubsubArrayOutput
}

type TriggerTransportPubsubArray []TriggerTransportPubsubInput

func (TriggerTransportPubsubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerTransportPubsub)(nil)).Elem()
}

func (i TriggerTransportPubsubArray) ToTriggerTransportPubsubArrayOutput() TriggerTransportPubsubArrayOutput {
	return i.ToTriggerTransportPubsubArrayOutputWithContext(context.Background())
}

func (i TriggerTransportPubsubArray) ToTriggerTransportPubsubArrayOutputWithContext(ctx context.Context) TriggerTransportPubsubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTransportPubsubArrayOutput)
}

type TriggerTransportPubsubOutput struct{ *pulumi.OutputState }

func (TriggerTransportPubsubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTransportPubsub)(nil)).Elem()
}

func (o TriggerTransportPubsubOutput) ToTriggerTransportPubsubOutput() TriggerTransportPubsubOutput {
	return o
}

func (o TriggerTransportPubsubOutput) ToTriggerTransportPubsubOutputWithContext(ctx context.Context) TriggerTransportPubsubOutput {
	return o
}

// Output only. The name of the Pub/Sub subscription created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
func (o TriggerTransportPubsubOutput) Subscription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTransportPubsub) *string { return v.Subscription }).(pulumi.StringPtrOutput)
}

// Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
func (o TriggerTransportPubsubOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTransportPubsub) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type TriggerTransportPubsubArrayOutput struct{ *pulumi.OutputState }

func (TriggerTransportPubsubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerTransportPubsub)(nil)).Elem()
}

func (o TriggerTransportPubsubArrayOutput) ToTriggerTransportPubsubArrayOutput() TriggerTransportPubsubArrayOutput {
	return o
}

func (o TriggerTransportPubsubArrayOutput) ToTriggerTransportPubsubArrayOutputWithContext(ctx context.Context) TriggerTransportPubsubArrayOutput {
	return o
}

func (o TriggerTransportPubsubArrayOutput) Index(i pulumi.IntInput) TriggerTransportPubsubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerTransportPubsub {
		return vs[0].([]TriggerTransportPubsub)[vs[1].(int)]
	}).(TriggerTransportPubsubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerDestinationInput)(nil)).Elem(), TriggerDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerDestinationPtrInput)(nil)).Elem(), TriggerDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerDestinationCloudRunServiceInput)(nil)).Elem(), TriggerDestinationCloudRunServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerDestinationCloudRunServicePtrInput)(nil)).Elem(), TriggerDestinationCloudRunServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerDestinationGkeInput)(nil)).Elem(), TriggerDestinationGkeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerDestinationGkePtrInput)(nil)).Elem(), TriggerDestinationGkeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerMatchingCriteriaInput)(nil)).Elem(), TriggerMatchingCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerMatchingCriteriaArrayInput)(nil)).Elem(), TriggerMatchingCriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTransportInput)(nil)).Elem(), TriggerTransportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTransportArrayInput)(nil)).Elem(), TriggerTransportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTransportPubsubInput)(nil)).Elem(), TriggerTransportPubsubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTransportPubsubArrayInput)(nil)).Elem(), TriggerTransportPubsubArray{})
	pulumi.RegisterOutputType(TriggerDestinationOutput{})
	pulumi.RegisterOutputType(TriggerDestinationPtrOutput{})
	pulumi.RegisterOutputType(TriggerDestinationCloudRunServiceOutput{})
	pulumi.RegisterOutputType(TriggerDestinationCloudRunServicePtrOutput{})
	pulumi.RegisterOutputType(TriggerDestinationGkeOutput{})
	pulumi.RegisterOutputType(TriggerDestinationGkePtrOutput{})
	pulumi.RegisterOutputType(TriggerMatchingCriteriaOutput{})
	pulumi.RegisterOutputType(TriggerMatchingCriteriaArrayOutput{})
	pulumi.RegisterOutputType(TriggerTransportOutput{})
	pulumi.RegisterOutputType(TriggerTransportArrayOutput{})
	pulumi.RegisterOutputType(TriggerTransportPubsubOutput{})
	pulumi.RegisterOutputType(TriggerTransportPubsubArrayOutput{})
}
