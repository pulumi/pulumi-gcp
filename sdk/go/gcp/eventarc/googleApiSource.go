// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventarc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Eventarc GoogleApiSource resource
//
// To get more information about GoogleApiSource, see:
//
// * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.googleApiSources)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/publish-events/publish-events-google-sources)
//
// ## Example Usage
//
// ### Eventarc Google Api Source With Cmek
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/eventarc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testProject, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{
//				ProjectId: pulumi.StringRef("my-project-name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testKeyRing, err := kms.GetKMSKeyRing(ctx, &kms.GetKMSKeyRingArgs{
//				Name:     "keyring",
//				Location: "us-central1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			key, err := kms.GetKMSCryptoKey(ctx, &kms.GetKMSCryptoKeyArgs{
//				Name:    "key",
//				KeyRing: testKeyRing.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			keyMember, err := kms.NewCryptoKeyIAMMember(ctx, "key_member", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String(key.Id),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-eventarc.iam.gserviceaccount.com", testProject.Number),
//			})
//			if err != nil {
//				return err
//			}
//			messageBus, err := eventarc.NewMessageBus(ctx, "message_bus", &eventarc.MessageBusArgs{
//				Location:     pulumi.String("us-central1"),
//				MessageBusId: pulumi.String("some-message-bus"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventarc.NewGoogleApiSource(ctx, "primary", &eventarc.GoogleApiSourceArgs{
//				Location:          pulumi.String("us-central1"),
//				GoogleApiSourceId: pulumi.String("some-google-api-source"),
//				Destination:       messageBus.ID(),
//				CryptoKeyName:     pulumi.String(key.Id),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				keyMember,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GoogleApiSource can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/googleApiSources/{{google_api_source_id}}`
//
// * `{{project}}/{{location}}/{{google_api_source_id}}`
//
// * `{{location}}/{{google_api_source_id}}`
//
// When using the `pulumi import` command, GoogleApiSource can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:eventarc/googleApiSource:GoogleApiSource default projects/{{project}}/locations/{{location}}/googleApiSources/{{google_api_source_id}}
// ```
//
// ```sh
// $ pulumi import gcp:eventarc/googleApiSource:GoogleApiSource default {{project}}/{{location}}/{{google_api_source_id}}
// ```
//
// ```sh
// $ pulumi import gcp:eventarc/googleApiSource:GoogleApiSource default {{location}}/{{google_api_source_id}}
// ```
type GoogleApiSource struct {
	pulumi.CustomResourceState

	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrOutput `pulumi:"cryptoKeyName"`
	// Destination is the message bus that the GoogleApiSource is delivering to.
	// It must be point to the full resource name of a MessageBus. Format:
	// "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Resource display name.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The user-provided ID to be assigned to the GoogleApiSource. It should match
	// the format `^a-z?$`.
	//
	// ***
	GoogleApiSourceId pulumi.StringOutput `pulumi:"googleApiSourceId"`
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig GoogleApiSourceLoggingConfigOutput `pulumi:"loggingConfig"`
	// Resource name of the form
	// projects/{project}/locations/{location}/googleApiSources/{google_api_source}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGoogleApiSource registers a new resource with the given unique name, arguments, and options.
func NewGoogleApiSource(ctx *pulumi.Context,
	name string, args *GoogleApiSourceArgs, opts ...pulumi.ResourceOption) (*GoogleApiSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.GoogleApiSourceId == nil {
		return nil, errors.New("invalid value for required argument 'GoogleApiSourceId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GoogleApiSource
	err := ctx.RegisterResource("gcp:eventarc/googleApiSource:GoogleApiSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoogleApiSource gets an existing GoogleApiSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoogleApiSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoogleApiSourceState, opts ...pulumi.ResourceOption) (*GoogleApiSource, error) {
	var resource GoogleApiSource
	err := ctx.ReadResource("gcp:eventarc/googleApiSource:GoogleApiSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoogleApiSource resources.
type googleApiSourceState struct {
	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// Destination is the message bus that the GoogleApiSource is delivering to.
	// It must be point to the full resource name of a MessageBus. Format:
	// "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
	Destination *string `pulumi:"destination"`
	// Resource display name.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// The user-provided ID to be assigned to the GoogleApiSource. It should match
	// the format `^a-z?$`.
	//
	// ***
	GoogleApiSourceId *string `pulumi:"googleApiSourceId"`
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig *GoogleApiSourceLoggingConfig `pulumi:"loggingConfig"`
	// Resource name of the form
	// projects/{project}/locations/{location}/googleApiSources/{google_api_source}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid *string `pulumi:"uid"`
	// The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type GoogleApiSourceState struct {
	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The creation time.
	CreateTime pulumi.StringPtrInput
	// Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrInput
	// Destination is the message bus that the GoogleApiSource is delivering to.
	// It must be point to the full resource name of a MessageBus. Format:
	// "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
	Destination pulumi.StringPtrInput
	// Resource display name.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// The user-provided ID to be assigned to the GoogleApiSource. It should match
	// the format `^a-z?$`.
	//
	// ***
	GoogleApiSourceId pulumi.StringPtrInput
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig GoogleApiSourceLoggingConfigPtrInput
	// Resource name of the form
	// projects/{project}/locations/{location}/googleApiSources/{google_api_source}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringPtrInput
	// The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (GoogleApiSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*googleApiSourceState)(nil)).Elem()
}

type googleApiSourceArgs struct {
	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// Destination is the message bus that the GoogleApiSource is delivering to.
	// It must be point to the full resource name of a MessageBus. Format:
	// "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
	Destination string `pulumi:"destination"`
	// Resource display name.
	DisplayName *string `pulumi:"displayName"`
	// The user-provided ID to be assigned to the GoogleApiSource. It should match
	// the format `^a-z?$`.
	//
	// ***
	GoogleApiSourceId string `pulumi:"googleApiSourceId"`
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig *GoogleApiSourceLoggingConfig `pulumi:"loggingConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a GoogleApiSource resource.
type GoogleApiSourceArgs struct {
	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrInput
	// Destination is the message bus that the GoogleApiSource is delivering to.
	// It must be point to the full resource name of a MessageBus. Format:
	// "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
	Destination pulumi.StringInput
	// Resource display name.
	DisplayName pulumi.StringPtrInput
	// The user-provided ID to be assigned to the GoogleApiSource. It should match
	// the format `^a-z?$`.
	//
	// ***
	GoogleApiSourceId pulumi.StringInput
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig GoogleApiSourceLoggingConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GoogleApiSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*googleApiSourceArgs)(nil)).Elem()
}

type GoogleApiSourceInput interface {
	pulumi.Input

	ToGoogleApiSourceOutput() GoogleApiSourceOutput
	ToGoogleApiSourceOutputWithContext(ctx context.Context) GoogleApiSourceOutput
}

func (*GoogleApiSource) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleApiSource)(nil)).Elem()
}

func (i *GoogleApiSource) ToGoogleApiSourceOutput() GoogleApiSourceOutput {
	return i.ToGoogleApiSourceOutputWithContext(context.Background())
}

func (i *GoogleApiSource) ToGoogleApiSourceOutputWithContext(ctx context.Context) GoogleApiSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleApiSourceOutput)
}

// GoogleApiSourceArrayInput is an input type that accepts GoogleApiSourceArray and GoogleApiSourceArrayOutput values.
// You can construct a concrete instance of `GoogleApiSourceArrayInput` via:
//
//	GoogleApiSourceArray{ GoogleApiSourceArgs{...} }
type GoogleApiSourceArrayInput interface {
	pulumi.Input

	ToGoogleApiSourceArrayOutput() GoogleApiSourceArrayOutput
	ToGoogleApiSourceArrayOutputWithContext(context.Context) GoogleApiSourceArrayOutput
}

type GoogleApiSourceArray []GoogleApiSourceInput

func (GoogleApiSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GoogleApiSource)(nil)).Elem()
}

func (i GoogleApiSourceArray) ToGoogleApiSourceArrayOutput() GoogleApiSourceArrayOutput {
	return i.ToGoogleApiSourceArrayOutputWithContext(context.Background())
}

func (i GoogleApiSourceArray) ToGoogleApiSourceArrayOutputWithContext(ctx context.Context) GoogleApiSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleApiSourceArrayOutput)
}

// GoogleApiSourceMapInput is an input type that accepts GoogleApiSourceMap and GoogleApiSourceMapOutput values.
// You can construct a concrete instance of `GoogleApiSourceMapInput` via:
//
//	GoogleApiSourceMap{ "key": GoogleApiSourceArgs{...} }
type GoogleApiSourceMapInput interface {
	pulumi.Input

	ToGoogleApiSourceMapOutput() GoogleApiSourceMapOutput
	ToGoogleApiSourceMapOutputWithContext(context.Context) GoogleApiSourceMapOutput
}

type GoogleApiSourceMap map[string]GoogleApiSourceInput

func (GoogleApiSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GoogleApiSource)(nil)).Elem()
}

func (i GoogleApiSourceMap) ToGoogleApiSourceMapOutput() GoogleApiSourceMapOutput {
	return i.ToGoogleApiSourceMapOutputWithContext(context.Background())
}

func (i GoogleApiSourceMap) ToGoogleApiSourceMapOutputWithContext(ctx context.Context) GoogleApiSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleApiSourceMapOutput)
}

type GoogleApiSourceOutput struct{ *pulumi.OutputState }

func (GoogleApiSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleApiSource)(nil)).Elem()
}

func (o GoogleApiSourceOutput) ToGoogleApiSourceOutput() GoogleApiSourceOutput {
	return o
}

func (o GoogleApiSourceOutput) ToGoogleApiSourceOutputWithContext(ctx context.Context) GoogleApiSourceOutput {
	return o
}

// Resource annotations.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o GoogleApiSourceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The creation time.
func (o GoogleApiSourceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Resource name of a KMS crypto key (managed by the user) used to
// encrypt/decrypt their event data.
// It must match the pattern
// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o GoogleApiSourceOutput) CryptoKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringPtrOutput { return v.CryptoKeyName }).(pulumi.StringPtrOutput)
}

// Destination is the message bus that the GoogleApiSource is delivering to.
// It must be point to the full resource name of a MessageBus. Format:
// "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
func (o GoogleApiSourceOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Resource display name.
func (o GoogleApiSourceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GoogleApiSourceOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o GoogleApiSourceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// This checksum is computed by the server based on the value of other
// fields, and might be sent only on update and delete requests to ensure that
// the client has an up-to-date value before proceeding.
func (o GoogleApiSourceOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The user-provided ID to be assigned to the GoogleApiSource. It should match
// the format `^a-z?$`.
//
// ***
func (o GoogleApiSourceOutput) GoogleApiSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.GoogleApiSourceId }).(pulumi.StringOutput)
}

// Resource labels.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GoogleApiSourceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o GoogleApiSourceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The configuration for Platform Telemetry logging for Eventarc Advanced
// resources.
// Structure is documented below.
func (o GoogleApiSourceOutput) LoggingConfig() GoogleApiSourceLoggingConfigOutput {
	return o.ApplyT(func(v *GoogleApiSource) GoogleApiSourceLoggingConfigOutput { return v.LoggingConfig }).(GoogleApiSourceLoggingConfigOutput)
}

// Resource name of the form
// projects/{project}/locations/{location}/googleApiSources/{google_api_source}
func (o GoogleApiSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GoogleApiSourceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GoogleApiSourceOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Server assigned unique identifier for the channel. The value is a UUID4
// string and guaranteed to remain unchanged until the resource is deleted.
func (o GoogleApiSourceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The last-modified time.
func (o GoogleApiSourceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleApiSource) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GoogleApiSourceArrayOutput struct{ *pulumi.OutputState }

func (GoogleApiSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GoogleApiSource)(nil)).Elem()
}

func (o GoogleApiSourceArrayOutput) ToGoogleApiSourceArrayOutput() GoogleApiSourceArrayOutput {
	return o
}

func (o GoogleApiSourceArrayOutput) ToGoogleApiSourceArrayOutputWithContext(ctx context.Context) GoogleApiSourceArrayOutput {
	return o
}

func (o GoogleApiSourceArrayOutput) Index(i pulumi.IntInput) GoogleApiSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GoogleApiSource {
		return vs[0].([]*GoogleApiSource)[vs[1].(int)]
	}).(GoogleApiSourceOutput)
}

type GoogleApiSourceMapOutput struct{ *pulumi.OutputState }

func (GoogleApiSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GoogleApiSource)(nil)).Elem()
}

func (o GoogleApiSourceMapOutput) ToGoogleApiSourceMapOutput() GoogleApiSourceMapOutput {
	return o
}

func (o GoogleApiSourceMapOutput) ToGoogleApiSourceMapOutputWithContext(ctx context.Context) GoogleApiSourceMapOutput {
	return o
}

func (o GoogleApiSourceMapOutput) MapIndex(k pulumi.StringInput) GoogleApiSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GoogleApiSource {
		return vs[0].(map[string]*GoogleApiSource)[vs[1].(string)]
	}).(GoogleApiSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleApiSourceInput)(nil)).Elem(), &GoogleApiSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleApiSourceArrayInput)(nil)).Elem(), GoogleApiSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleApiSourceMapInput)(nil)).Elem(), GoogleApiSourceMap{})
	pulumi.RegisterOutputType(GoogleApiSourceOutput{})
	pulumi.RegisterOutputType(GoogleApiSourceArrayOutput{})
	pulumi.RegisterOutputType(GoogleApiSourceMapOutput{})
}
