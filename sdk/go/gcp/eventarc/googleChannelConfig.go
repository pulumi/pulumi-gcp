// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventarc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Eventarc GoogleChannelConfig resource
//
// ## Example Usage
// ### Basic
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/eventarc"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testProject, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{
//				ProjectId: pulumi.StringRef("my-project-name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testKeyRing, err := kms.GetKMSKeyRing(ctx, &kms.GetKMSKeyRingArgs{
//				Name:     "keyring",
//				Location: "us-west1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.GetKMSCryptoKey(ctx, &kms.GetKMSCryptoKeyArgs{
//				Name:    "key",
//				KeyRing: testKeyRing.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			key1Binding, err := kms.NewCryptoKeyIAMBinding(ctx, "key1Binding", &kms.CryptoKeyIAMBindingArgs{
//				CryptoKeyId: pulumi.Any(data.Google_kms_crypto_key.Key1.Id),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Members: pulumi.StringArray{
//					pulumi.String(fmt.Sprintf("serviceAccount:service-%v@gcp-sa-eventarc.iam.gserviceaccount.com", testProject.Number)),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventarc.NewGoogleChannelConfig(ctx, "primary", &eventarc.GoogleChannelConfigArgs{
//				Location:      pulumi.String("us-west1"),
//				Project:       *pulumi.String(testProject.ProjectId),
//				CryptoKeyName: pulumi.Any(data.Google_kms_crypto_key.Key1.Id),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				key1Binding,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # GoogleChannelConfig can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:eventarc/googleChannelConfig:GoogleChannelConfig default projects/{{project}}/locations/{{location}}/googleChannelConfig
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:eventarc/googleChannelConfig:GoogleChannelConfig default {{project}}/{{location}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:eventarc/googleChannelConfig:GoogleChannelConfig default {{location}}
//
// ```
type GoogleChannelConfig struct {
	pulumi.CustomResourceState

	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrOutput `pulumi:"cryptoKeyName"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. The resource name of the config. Must be in the format of, `projects/{project}/locations/{location}/googleChannelConfig`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGoogleChannelConfig registers a new resource with the given unique name, arguments, and options.
func NewGoogleChannelConfig(ctx *pulumi.Context,
	name string, args *GoogleChannelConfigArgs, opts ...pulumi.ResourceOption) (*GoogleChannelConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource GoogleChannelConfig
	err := ctx.RegisterResource("gcp:eventarc/googleChannelConfig:GoogleChannelConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoogleChannelConfig gets an existing GoogleChannelConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoogleChannelConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoogleChannelConfigState, opts ...pulumi.ResourceOption) (*GoogleChannelConfig, error) {
	var resource GoogleChannelConfig
	err := ctx.ReadResource("gcp:eventarc/googleChannelConfig:GoogleChannelConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoogleChannelConfig resources.
type googleChannelConfigState struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Required. The resource name of the config. Must be in the format of, `projects/{project}/locations/{location}/googleChannelConfig`.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type GoogleChannelConfigState struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Required. The resource name of the config. Must be in the format of, `projects/{project}/locations/{location}/googleChannelConfig`.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (GoogleChannelConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*googleChannelConfigState)(nil)).Elem()
}

type googleChannelConfigArgs struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Required. The resource name of the config. Must be in the format of, `projects/{project}/locations/{location}/googleChannelConfig`.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a GoogleChannelConfig resource.
type GoogleChannelConfigArgs struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringInput
	// Required. The resource name of the config. Must be in the format of, `projects/{project}/locations/{location}/googleChannelConfig`.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
}

func (GoogleChannelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*googleChannelConfigArgs)(nil)).Elem()
}

type GoogleChannelConfigInput interface {
	pulumi.Input

	ToGoogleChannelConfigOutput() GoogleChannelConfigOutput
	ToGoogleChannelConfigOutputWithContext(ctx context.Context) GoogleChannelConfigOutput
}

func (*GoogleChannelConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleChannelConfig)(nil)).Elem()
}

func (i *GoogleChannelConfig) ToGoogleChannelConfigOutput() GoogleChannelConfigOutput {
	return i.ToGoogleChannelConfigOutputWithContext(context.Background())
}

func (i *GoogleChannelConfig) ToGoogleChannelConfigOutputWithContext(ctx context.Context) GoogleChannelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleChannelConfigOutput)
}

// GoogleChannelConfigArrayInput is an input type that accepts GoogleChannelConfigArray and GoogleChannelConfigArrayOutput values.
// You can construct a concrete instance of `GoogleChannelConfigArrayInput` via:
//
//	GoogleChannelConfigArray{ GoogleChannelConfigArgs{...} }
type GoogleChannelConfigArrayInput interface {
	pulumi.Input

	ToGoogleChannelConfigArrayOutput() GoogleChannelConfigArrayOutput
	ToGoogleChannelConfigArrayOutputWithContext(context.Context) GoogleChannelConfigArrayOutput
}

type GoogleChannelConfigArray []GoogleChannelConfigInput

func (GoogleChannelConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GoogleChannelConfig)(nil)).Elem()
}

func (i GoogleChannelConfigArray) ToGoogleChannelConfigArrayOutput() GoogleChannelConfigArrayOutput {
	return i.ToGoogleChannelConfigArrayOutputWithContext(context.Background())
}

func (i GoogleChannelConfigArray) ToGoogleChannelConfigArrayOutputWithContext(ctx context.Context) GoogleChannelConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleChannelConfigArrayOutput)
}

// GoogleChannelConfigMapInput is an input type that accepts GoogleChannelConfigMap and GoogleChannelConfigMapOutput values.
// You can construct a concrete instance of `GoogleChannelConfigMapInput` via:
//
//	GoogleChannelConfigMap{ "key": GoogleChannelConfigArgs{...} }
type GoogleChannelConfigMapInput interface {
	pulumi.Input

	ToGoogleChannelConfigMapOutput() GoogleChannelConfigMapOutput
	ToGoogleChannelConfigMapOutputWithContext(context.Context) GoogleChannelConfigMapOutput
}

type GoogleChannelConfigMap map[string]GoogleChannelConfigInput

func (GoogleChannelConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GoogleChannelConfig)(nil)).Elem()
}

func (i GoogleChannelConfigMap) ToGoogleChannelConfigMapOutput() GoogleChannelConfigMapOutput {
	return i.ToGoogleChannelConfigMapOutputWithContext(context.Background())
}

func (i GoogleChannelConfigMap) ToGoogleChannelConfigMapOutputWithContext(ctx context.Context) GoogleChannelConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleChannelConfigMapOutput)
}

type GoogleChannelConfigOutput struct{ *pulumi.OutputState }

func (GoogleChannelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleChannelConfig)(nil)).Elem()
}

func (o GoogleChannelConfigOutput) ToGoogleChannelConfigOutput() GoogleChannelConfigOutput {
	return o
}

func (o GoogleChannelConfigOutput) ToGoogleChannelConfigOutputWithContext(ctx context.Context) GoogleChannelConfigOutput {
	return o
}

// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o GoogleChannelConfigOutput) CryptoKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleChannelConfig) pulumi.StringPtrOutput { return v.CryptoKeyName }).(pulumi.StringPtrOutput)
}

// The location for the resource
func (o GoogleChannelConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleChannelConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. The resource name of the config. Must be in the format of, `projects/{project}/locations/{location}/googleChannelConfig`.
func (o GoogleChannelConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleChannelConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o GoogleChannelConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleChannelConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. The last-modified time.
func (o GoogleChannelConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GoogleChannelConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GoogleChannelConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleChannelConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GoogleChannelConfig)(nil)).Elem()
}

func (o GoogleChannelConfigArrayOutput) ToGoogleChannelConfigArrayOutput() GoogleChannelConfigArrayOutput {
	return o
}

func (o GoogleChannelConfigArrayOutput) ToGoogleChannelConfigArrayOutputWithContext(ctx context.Context) GoogleChannelConfigArrayOutput {
	return o
}

func (o GoogleChannelConfigArrayOutput) Index(i pulumi.IntInput) GoogleChannelConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GoogleChannelConfig {
		return vs[0].([]*GoogleChannelConfig)[vs[1].(int)]
	}).(GoogleChannelConfigOutput)
}

type GoogleChannelConfigMapOutput struct{ *pulumi.OutputState }

func (GoogleChannelConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GoogleChannelConfig)(nil)).Elem()
}

func (o GoogleChannelConfigMapOutput) ToGoogleChannelConfigMapOutput() GoogleChannelConfigMapOutput {
	return o
}

func (o GoogleChannelConfigMapOutput) ToGoogleChannelConfigMapOutputWithContext(ctx context.Context) GoogleChannelConfigMapOutput {
	return o
}

func (o GoogleChannelConfigMapOutput) MapIndex(k pulumi.StringInput) GoogleChannelConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GoogleChannelConfig {
		return vs[0].(map[string]*GoogleChannelConfig)[vs[1].(string)]
	}).(GoogleChannelConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleChannelConfigInput)(nil)).Elem(), &GoogleChannelConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleChannelConfigArrayInput)(nil)).Elem(), GoogleChannelConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleChannelConfigMapInput)(nil)).Elem(), GoogleChannelConfigMap{})
	pulumi.RegisterOutputType(GoogleChannelConfigOutput{})
	pulumi.RegisterOutputType(GoogleChannelConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleChannelConfigMapOutput{})
}
