// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventarc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Eventarc Enrollment resource
//
// To get more information about Enrollment, see:
//
// * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.enrollments)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/receive-events/create-enrollment)
//
// ## Example Usage
//
// ### Eventarc Enrollment With Pipeline Destination
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/eventarc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pipeline, err := eventarc.NewPipeline(ctx, "pipeline", &eventarc.PipelineArgs{
//				Location:   pulumi.String("us-central1"),
//				PipelineId: pulumi.String("some-pipeline"),
//				Destinations: eventarc.PipelineDestinationArray{
//					&eventarc.PipelineDestinationArgs{
//						HttpEndpoint: &eventarc.PipelineDestinationHttpEndpointArgs{
//							Uri: pulumi.String("https://10.77.0.0:80/route"),
//						},
//						NetworkConfig: &eventarc.PipelineDestinationNetworkConfigArgs{
//							NetworkAttachment: pulumi.String("projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventarc.NewEnrollment(ctx, "primary", &eventarc.EnrollmentArgs{
//				Location:     pulumi.String("us-central1"),
//				EnrollmentId: pulumi.String("some-enrollment"),
//				MessageBus:   pulumi.Any(primaryGoogleEventarcMessageBus.Id),
//				Destination:  pipeline.ID(),
//				CelMatch:     pulumi.String("message.type == 'google.cloud.dataflow.job.v1beta3.statusChanged'"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventarc.NewMessageBus(ctx, "message_bus", &eventarc.MessageBusArgs{
//				Location:     pulumi.String("us-central1"),
//				MessageBusId: pulumi.String("some-message-bus"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Enrollment can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/enrollments/{{enrollment_id}}`
//
// * `{{project}}/{{location}}/{{enrollment_id}}`
//
// * `{{location}}/{{enrollment_id}}`
//
// When using the `pulumi import` command, Enrollment can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:eventarc/enrollment:Enrollment default projects/{{project}}/locations/{{location}}/enrollments/{{enrollment_id}}
// ```
//
// ```sh
// $ pulumi import gcp:eventarc/enrollment:Enrollment default {{project}}/{{location}}/{{enrollment_id}}
// ```
//
// ```sh
// $ pulumi import gcp:eventarc/enrollment:Enrollment default {{location}}/{{enrollment_id}}
// ```
type Enrollment struct {
	pulumi.CustomResourceState

	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// A CEL expression identifying which messages this enrollment applies to.
	CelMatch pulumi.StringOutput `pulumi:"celMatch"`
	// The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Destination is the Pipeline that the Enrollment is delivering to. It must
	// point to the full resource name of a Pipeline. Format:
	// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Resource display name.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The user-provided ID to be assigned to the Enrollment. It should match the
	// format `^a-z?$`.
	EnrollmentId pulumi.StringOutput `pulumi:"enrollmentId"`
	// This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name of the message bus identifying the source of the messages. It
	// matches the form
	// projects/{project}/locations/{location}/messageBuses/{messageBus}.
	MessageBus pulumi.StringOutput `pulumi:"messageBus"`
	// Resource name of the form
	// projects/{project}/locations/{location}/enrollments/{enrollment}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEnrollment registers a new resource with the given unique name, arguments, and options.
func NewEnrollment(ctx *pulumi.Context,
	name string, args *EnrollmentArgs, opts ...pulumi.ResourceOption) (*Enrollment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CelMatch == nil {
		return nil, errors.New("invalid value for required argument 'CelMatch'")
	}
	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.EnrollmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnrollmentId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MessageBus == nil {
		return nil, errors.New("invalid value for required argument 'MessageBus'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Enrollment
	err := ctx.RegisterResource("gcp:eventarc/enrollment:Enrollment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnrollment gets an existing Enrollment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnrollment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnrollmentState, opts ...pulumi.ResourceOption) (*Enrollment, error) {
	var resource Enrollment
	err := ctx.ReadResource("gcp:eventarc/enrollment:Enrollment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Enrollment resources.
type enrollmentState struct {
	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// A CEL expression identifying which messages this enrollment applies to.
	CelMatch *string `pulumi:"celMatch"`
	// The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Destination is the Pipeline that the Enrollment is delivering to. It must
	// point to the full resource name of a Pipeline. Format:
	// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
	Destination *string `pulumi:"destination"`
	// Resource display name.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The user-provided ID to be assigned to the Enrollment. It should match the
	// format `^a-z?$`.
	EnrollmentId *string `pulumi:"enrollmentId"`
	// This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Resource name of the message bus identifying the source of the messages. It
	// matches the form
	// projects/{project}/locations/{location}/messageBuses/{messageBus}.
	MessageBus *string `pulumi:"messageBus"`
	// Resource name of the form
	// projects/{project}/locations/{location}/enrollments/{enrollment}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid *string `pulumi:"uid"`
	// The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type EnrollmentState struct {
	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// A CEL expression identifying which messages this enrollment applies to.
	CelMatch pulumi.StringPtrInput
	// The creation time.
	CreateTime pulumi.StringPtrInput
	// Destination is the Pipeline that the Enrollment is delivering to. It must
	// point to the full resource name of a Pipeline. Format:
	// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
	Destination pulumi.StringPtrInput
	// Resource display name.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The user-provided ID to be assigned to the Enrollment. It should match the
	// format `^a-z?$`.
	EnrollmentId pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Resource name of the message bus identifying the source of the messages. It
	// matches the form
	// projects/{project}/locations/{location}/messageBuses/{messageBus}.
	MessageBus pulumi.StringPtrInput
	// Resource name of the form
	// projects/{project}/locations/{location}/enrollments/{enrollment}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringPtrInput
	// The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (EnrollmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*enrollmentState)(nil)).Elem()
}

type enrollmentArgs struct {
	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// A CEL expression identifying which messages this enrollment applies to.
	CelMatch string `pulumi:"celMatch"`
	// Destination is the Pipeline that the Enrollment is delivering to. It must
	// point to the full resource name of a Pipeline. Format:
	// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
	Destination string `pulumi:"destination"`
	// Resource display name.
	DisplayName *string `pulumi:"displayName"`
	// The user-provided ID to be assigned to the Enrollment. It should match the
	// format `^a-z?$`.
	EnrollmentId string `pulumi:"enrollmentId"`
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// Resource name of the message bus identifying the source of the messages. It
	// matches the form
	// projects/{project}/locations/{location}/messageBuses/{messageBus}.
	MessageBus string `pulumi:"messageBus"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Enrollment resource.
type EnrollmentArgs struct {
	// Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// A CEL expression identifying which messages this enrollment applies to.
	CelMatch pulumi.StringInput
	// Destination is the Pipeline that the Enrollment is delivering to. It must
	// point to the full resource name of a Pipeline. Format:
	// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
	Destination pulumi.StringInput
	// Resource display name.
	DisplayName pulumi.StringPtrInput
	// The user-provided ID to be assigned to the Enrollment. It should match the
	// format `^a-z?$`.
	EnrollmentId pulumi.StringInput
	// Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// Resource name of the message bus identifying the source of the messages. It
	// matches the form
	// projects/{project}/locations/{location}/messageBuses/{messageBus}.
	MessageBus pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (EnrollmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enrollmentArgs)(nil)).Elem()
}

type EnrollmentInput interface {
	pulumi.Input

	ToEnrollmentOutput() EnrollmentOutput
	ToEnrollmentOutputWithContext(ctx context.Context) EnrollmentOutput
}

func (*Enrollment) ElementType() reflect.Type {
	return reflect.TypeOf((**Enrollment)(nil)).Elem()
}

func (i *Enrollment) ToEnrollmentOutput() EnrollmentOutput {
	return i.ToEnrollmentOutputWithContext(context.Background())
}

func (i *Enrollment) ToEnrollmentOutputWithContext(ctx context.Context) EnrollmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnrollmentOutput)
}

// EnrollmentArrayInput is an input type that accepts EnrollmentArray and EnrollmentArrayOutput values.
// You can construct a concrete instance of `EnrollmentArrayInput` via:
//
//	EnrollmentArray{ EnrollmentArgs{...} }
type EnrollmentArrayInput interface {
	pulumi.Input

	ToEnrollmentArrayOutput() EnrollmentArrayOutput
	ToEnrollmentArrayOutputWithContext(context.Context) EnrollmentArrayOutput
}

type EnrollmentArray []EnrollmentInput

func (EnrollmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Enrollment)(nil)).Elem()
}

func (i EnrollmentArray) ToEnrollmentArrayOutput() EnrollmentArrayOutput {
	return i.ToEnrollmentArrayOutputWithContext(context.Background())
}

func (i EnrollmentArray) ToEnrollmentArrayOutputWithContext(ctx context.Context) EnrollmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnrollmentArrayOutput)
}

// EnrollmentMapInput is an input type that accepts EnrollmentMap and EnrollmentMapOutput values.
// You can construct a concrete instance of `EnrollmentMapInput` via:
//
//	EnrollmentMap{ "key": EnrollmentArgs{...} }
type EnrollmentMapInput interface {
	pulumi.Input

	ToEnrollmentMapOutput() EnrollmentMapOutput
	ToEnrollmentMapOutputWithContext(context.Context) EnrollmentMapOutput
}

type EnrollmentMap map[string]EnrollmentInput

func (EnrollmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Enrollment)(nil)).Elem()
}

func (i EnrollmentMap) ToEnrollmentMapOutput() EnrollmentMapOutput {
	return i.ToEnrollmentMapOutputWithContext(context.Background())
}

func (i EnrollmentMap) ToEnrollmentMapOutputWithContext(ctx context.Context) EnrollmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnrollmentMapOutput)
}

type EnrollmentOutput struct{ *pulumi.OutputState }

func (EnrollmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Enrollment)(nil)).Elem()
}

func (o EnrollmentOutput) ToEnrollmentOutput() EnrollmentOutput {
	return o
}

func (o EnrollmentOutput) ToEnrollmentOutputWithContext(ctx context.Context) EnrollmentOutput {
	return o
}

// Resource annotations.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o EnrollmentOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// A CEL expression identifying which messages this enrollment applies to.
func (o EnrollmentOutput) CelMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.CelMatch }).(pulumi.StringOutput)
}

// The creation time.
func (o EnrollmentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Destination is the Pipeline that the Enrollment is delivering to. It must
// point to the full resource name of a Pipeline. Format:
// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
func (o EnrollmentOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Resource display name.
func (o EnrollmentOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o EnrollmentOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o EnrollmentOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The user-provided ID to be assigned to the Enrollment. It should match the
// format `^a-z?$`.
func (o EnrollmentOutput) EnrollmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.EnrollmentId }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other
// fields, and might be sent only on update and delete requests to ensure that
// the client has an up-to-date value before proceeding.
func (o EnrollmentOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Resource labels.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o EnrollmentOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o EnrollmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name of the message bus identifying the source of the messages. It
// matches the form
// projects/{project}/locations/{location}/messageBuses/{messageBus}.
func (o EnrollmentOutput) MessageBus() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.MessageBus }).(pulumi.StringOutput)
}

// Resource name of the form
// projects/{project}/locations/{location}/enrollments/{enrollment}
func (o EnrollmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o EnrollmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o EnrollmentOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Server assigned unique identifier for the channel. The value is a UUID4
// string and guaranteed to remain unchanged until the resource is deleted.
func (o EnrollmentOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The last-modified time.
func (o EnrollmentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Enrollment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type EnrollmentArrayOutput struct{ *pulumi.OutputState }

func (EnrollmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Enrollment)(nil)).Elem()
}

func (o EnrollmentArrayOutput) ToEnrollmentArrayOutput() EnrollmentArrayOutput {
	return o
}

func (o EnrollmentArrayOutput) ToEnrollmentArrayOutputWithContext(ctx context.Context) EnrollmentArrayOutput {
	return o
}

func (o EnrollmentArrayOutput) Index(i pulumi.IntInput) EnrollmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Enrollment {
		return vs[0].([]*Enrollment)[vs[1].(int)]
	}).(EnrollmentOutput)
}

type EnrollmentMapOutput struct{ *pulumi.OutputState }

func (EnrollmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Enrollment)(nil)).Elem()
}

func (o EnrollmentMapOutput) ToEnrollmentMapOutput() EnrollmentMapOutput {
	return o
}

func (o EnrollmentMapOutput) ToEnrollmentMapOutputWithContext(ctx context.Context) EnrollmentMapOutput {
	return o
}

func (o EnrollmentMapOutput) MapIndex(k pulumi.StringInput) EnrollmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Enrollment {
		return vs[0].(map[string]*Enrollment)[vs[1].(string)]
	}).(EnrollmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnrollmentInput)(nil)).Elem(), &Enrollment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnrollmentArrayInput)(nil)).Elem(), EnrollmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnrollmentMapInput)(nil)).Elem(), EnrollmentMap{})
	pulumi.RegisterOutputType(EnrollmentOutput{})
	pulumi.RegisterOutputType(EnrollmentArrayOutput{})
	pulumi.RegisterOutputType(EnrollmentMapOutput{})
}
