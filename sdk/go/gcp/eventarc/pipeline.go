// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventarc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Eventarc Pipeline resource
//
// To get more information about Pipeline, see:
//
// * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.pipelines)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/receive-events/create-enrollment)
//
// ## Example Usage
//
// ### Eventarc Pipeline With Topic Destination
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/eventarc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			topic, err := pubsub.NewTopic(ctx, "topic", &pubsub.TopicArgs{
//				Name: pulumi.String("some-topic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventarc.NewPipeline(ctx, "primary", &eventarc.PipelineArgs{
//				Location:   pulumi.String("us-central1"),
//				PipelineId: pulumi.String("some-pipeline"),
//				Destinations: eventarc.PipelineDestinationArray{
//					&eventarc.PipelineDestinationArgs{
//						Topic: topic.ID(),
//						NetworkConfig: &eventarc.PipelineDestinationNetworkConfigArgs{
//							NetworkAttachment: pulumi.String("projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment"),
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"test_label": pulumi.String("test-eventarc-label"),
//				},
//				Annotations: pulumi.StringMap{
//					"test_annotation": pulumi.String("test-eventarc-annotation"),
//				},
//				DisplayName: pulumi.String("Testing Pipeline"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Eventarc Pipeline With Http Destination
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/eventarc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eventarc.NewPipeline(ctx, "primary", &eventarc.PipelineArgs{
//				Location:   pulumi.String("us-central1"),
//				PipelineId: pulumi.String("some-pipeline"),
//				Destinations: eventarc.PipelineDestinationArray{
//					&eventarc.PipelineDestinationArgs{
//						HttpEndpoint: &eventarc.PipelineDestinationHttpEndpointArgs{
//							Uri: pulumi.String("https://10.77.0.0:80/route"),
//						},
//						NetworkConfig: &eventarc.PipelineDestinationNetworkConfigArgs{
//							NetworkAttachment: pulumi.String("projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Eventarc Pipeline With Workflow Destination
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/eventarc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/workflows"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			workflow, err := workflows.NewWorkflow(ctx, "workflow", &workflows.WorkflowArgs{
//				Name:               pulumi.String("some-workflow"),
//				DeletionProtection: pulumi.Bool(false),
//				Region:             pulumi.String("us-central1"),
//				SourceContents: pulumi.String(`# This is a sample workflow, feel free to replace it with your source code
//
// #
// # This workflow does the following:
// # - reads current time and date information from an external API and stores
// #   the response in CurrentDateTime variable
// # - retrieves a list of Wikipedia articles related to the day of the week
// #   from CurrentDateTime
// # - returns the list of articles as an output of the workflow
// # FYI, In terraform you need to escape the $$ or it will cause errors.
//
//   - getCurrentTime:
//     call: http.get
//     args:
//     url: ${sys.get_env("url")}
//     result: CurrentDateTime
//   - readWikipedia:
//     call: http.get
//     args:
//     url: https://en.wikipedia.org/w/api.php
//     query:
//     action: opensearch
//     search: ${CurrentDateTime.body.dayOfTheWeek}
//     result: WikiResult
//   - returnOutput:
//     return: ${WikiResult.body[1]}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventarc.NewPipeline(ctx, "primary", &eventarc.PipelineArgs{
//				Location:   pulumi.String("us-central1"),
//				PipelineId: pulumi.String("some-pipeline"),
//				Destinations: eventarc.PipelineDestinationArray{
//					&eventarc.PipelineDestinationArgs{
//						Workflow: workflow.ID(),
//						NetworkConfig: &eventarc.PipelineDestinationNetworkConfigArgs{
//							NetworkAttachment: pulumi.String("projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Eventarc Pipeline With Oidc And Json Format
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/eventarc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eventarc.NewPipeline(ctx, "primary", &eventarc.PipelineArgs{
//				Location:   pulumi.String("us-central1"),
//				PipelineId: pulumi.String("some-pipeline"),
//				Destinations: eventarc.PipelineDestinationArray{
//					&eventarc.PipelineDestinationArgs{
//						HttpEndpoint: &eventarc.PipelineDestinationHttpEndpointArgs{
//							Uri:                    pulumi.String("https://10.77.0.0:80/route"),
//							MessageBindingTemplate: pulumi.String("{\"headers\":{\"new-header-key\": \"new-header-value\"}}"),
//						},
//						NetworkConfig: &eventarc.PipelineDestinationNetworkConfigArgs{
//							NetworkAttachment: pulumi.String("projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment"),
//						},
//						AuthenticationConfig: &eventarc.PipelineDestinationAuthenticationConfigArgs{
//							GoogleOidc: &eventarc.PipelineDestinationAuthenticationConfigGoogleOidcArgs{
//								ServiceAccount: pulumi.String("my@service-account.com"),
//								Audience:       pulumi.String("http://www.example.com"),
//							},
//						},
//						OutputPayloadFormat: &eventarc.PipelineDestinationOutputPayloadFormatArgs{
//							Json: &eventarc.PipelineDestinationOutputPayloadFormatJsonArgs{},
//						},
//					},
//				},
//				InputPayloadFormat: &eventarc.PipelineInputPayloadFormatArgs{
//					Json: &eventarc.PipelineInputPayloadFormatJsonArgs{},
//				},
//				RetryPolicy: &eventarc.PipelineRetryPolicyArgs{
//					MaxRetryDelay: pulumi.String("50s"),
//					MaxAttempts:   pulumi.Int(2),
//					MinRetryDelay: pulumi.String("40s"),
//				},
//				Mediations: eventarc.PipelineMediationArray{
//					&eventarc.PipelineMediationArgs{
//						Transformation: &eventarc.PipelineMediationTransformationArgs{
//							TransformationTemplate: pulumi.String(`{
//
// "id": message.id,
// "datacontenttype": "application/json",
// "data": "{ \"scrubbed\": \"true\" }"
// }
// `),
//
//						},
//					},
//				},
//				LoggingConfig: &eventarc.PipelineLoggingConfigArgs{
//					LogSeverity: pulumi.String("DEBUG"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Eventarc Pipeline With Oauth And Protobuf Format
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/eventarc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eventarc.NewPipeline(ctx, "primary", &eventarc.PipelineArgs{
//				Location:   pulumi.String("us-central1"),
//				PipelineId: pulumi.String("some-pipeline"),
//				Destinations: eventarc.PipelineDestinationArray{
//					&eventarc.PipelineDestinationArgs{
//						HttpEndpoint: &eventarc.PipelineDestinationHttpEndpointArgs{
//							Uri:                    pulumi.String("https://10.77.0.0:80/route"),
//							MessageBindingTemplate: pulumi.String("{\"headers\":{\"new-header-key\": \"new-header-value\"}}"),
//						},
//						NetworkConfig: &eventarc.PipelineDestinationNetworkConfigArgs{
//							NetworkAttachment: pulumi.String("projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment"),
//						},
//						AuthenticationConfig: &eventarc.PipelineDestinationAuthenticationConfigArgs{
//							OauthToken: &eventarc.PipelineDestinationAuthenticationConfigOauthTokenArgs{
//								ServiceAccount: pulumi.String("my@service-account.com"),
//								Scope:          pulumi.String("https://www.googleapis.com/auth/cloud-platform"),
//							},
//						},
//						OutputPayloadFormat: &eventarc.PipelineDestinationOutputPayloadFormatArgs{
//							Protobuf: &eventarc.PipelineDestinationOutputPayloadFormatProtobufArgs{
//								SchemaDefinition: pulumi.String(`syntax = "proto3";
//
// message schema {
// string name = 1;
// string severity = 2;
// }
// `),
//
//				},
//			},
//		},
//	},
//	InputPayloadFormat: &eventarc.PipelineInputPayloadFormatArgs{
//		Protobuf: &eventarc.PipelineInputPayloadFormatProtobufArgs{
//			SchemaDefinition: pulumi.String(`syntax = "proto3";
//
// message schema {
// string name = 1;
// string severity = 2;
// }
// `),
//
//		},
//	},
//	RetryPolicy: &eventarc.PipelineRetryPolicyArgs{
//		MaxRetryDelay: pulumi.String("50s"),
//		MaxAttempts:   pulumi.Int(2),
//		MinRetryDelay: pulumi.String("40s"),
//	},
//	Mediations: eventarc.PipelineMediationArray{
//		&eventarc.PipelineMediationArgs{
//			Transformation: &eventarc.PipelineMediationTransformationArgs{
//				TransformationTemplate: pulumi.String(`{
//
// "id": message.id,
// "datacontenttype": "application/json",
// "data": "{ \"scrubbed\": \"true\" }"
// }
// `),
//
//						},
//					},
//				},
//				LoggingConfig: &eventarc.PipelineLoggingConfigArgs{
//					LogSeverity: pulumi.String("DEBUG"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Eventarc Pipeline With Cmek And Avro Format
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/eventarc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eventarc.NewPipeline(ctx, "primary", &eventarc.PipelineArgs{
//				Location:      pulumi.String("us-central1"),
//				PipelineId:    pulumi.String("some-pipeline"),
//				CryptoKeyName: pulumi.String("some-key"),
//				Destinations: eventarc.PipelineDestinationArray{
//					&eventarc.PipelineDestinationArgs{
//						HttpEndpoint: &eventarc.PipelineDestinationHttpEndpointArgs{
//							Uri:                    pulumi.String("https://10.77.0.0:80/route"),
//							MessageBindingTemplate: pulumi.String("{\"headers\":{\"new-header-key\": \"new-header-value\"}}"),
//						},
//						NetworkConfig: &eventarc.PipelineDestinationNetworkConfigArgs{
//							NetworkAttachment: pulumi.String("projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment"),
//						},
//						OutputPayloadFormat: &eventarc.PipelineDestinationOutputPayloadFormatArgs{
//							Avro: &eventarc.PipelineDestinationOutputPayloadFormatAvroArgs{
//								SchemaDefinition: pulumi.String("{\"type\": \"record\", \"name\": \"my_record\", \"fields\": [{\"name\": \"my_field\", \"type\": \"string\"}]}"),
//							},
//						},
//					},
//				},
//				InputPayloadFormat: &eventarc.PipelineInputPayloadFormatArgs{
//					Avro: &eventarc.PipelineInputPayloadFormatAvroArgs{
//						SchemaDefinition: pulumi.String("{\"type\": \"record\", \"name\": \"my_record\", \"fields\": [{\"name\": \"my_field\", \"type\": \"string\"}]}"),
//					},
//				},
//				RetryPolicy: &eventarc.PipelineRetryPolicyArgs{
//					MaxRetryDelay: pulumi.String("50s"),
//					MaxAttempts:   pulumi.Int(2),
//					MinRetryDelay: pulumi.String("40s"),
//				},
//				Mediations: eventarc.PipelineMediationArray{
//					&eventarc.PipelineMediationArgs{
//						Transformation: &eventarc.PipelineMediationTransformationArgs{
//							TransformationTemplate: pulumi.String(`{
//
// "id": message.id,
// "datacontenttype": "application/json",
// "data": "{ \"scrubbed\": \"true\" }"
// }
// `),
//
//						},
//					},
//				},
//				LoggingConfig: &eventarc.PipelineLoggingConfigArgs{
//					LogSeverity: pulumi.String("DEBUG"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pipeline can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/pipelines/{{pipeline_id}}`
//
// * `{{project}}/{{location}}/{{pipeline_id}}`
//
// * `{{location}}/{{pipeline_id}}`
//
// When using the `pulumi import` command, Pipeline can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:eventarc/pipeline:Pipeline default projects/{{project}}/locations/{{location}}/pipelines/{{pipeline_id}}
// ```
//
// ```sh
// $ pulumi import gcp:eventarc/pipeline:Pipeline default {{project}}/{{location}}/{{pipeline_id}}
// ```
//
// ```sh
// $ pulumi import gcp:eventarc/pipeline:Pipeline default {{location}}/{{pipeline_id}}
// ```
type Pipeline struct {
	pulumi.CustomResourceState

	// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
	// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
	// all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The creation time.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
	// Google-owned key will be used to encrypt messages. It must match the pattern
	// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
	CryptoKeyName pulumi.StringPtrOutput `pulumi:"cryptoKeyName"`
	// List of destinations to which messages will be forwarded. Currently,
	// exactly one destination is supported per Pipeline.
	// Structure is documented below.
	Destinations PipelineDestinationArrayOutput `pulumi:"destinations"`
	// Display name of resource.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// This checksum is computed by the server based on the value of
	// other fields, and might be sent only on create requests to ensure that the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Represents the format of message data.
	InputPayloadFormat PipelineInputPayloadFormatPtrOutput `pulumi:"inputPayloadFormat"`
	// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
	LoggingConfig PipelineLoggingConfigOutput `pulumi:"loggingConfig"`
	// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
	// each Pipeline.
	Mediations PipelineMediationArrayOutput `pulumi:"mediations"`
	// The resource name of the Pipeline. Must be unique within the
	// location of the project and must be in
	// `projects/{project}/locations/{location}/pipelines/{pipeline}` format.
	Name pulumi.StringOutput `pulumi:"name"`
	// The user-provided ID to be assigned to the Pipeline. It should match the
	// format `^a-z?$`.
	PipelineId pulumi.StringOutput `pulumi:"pipelineId"`
	Project    pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
	// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
	// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
	// 60 seconds by default. Please note that if you set the minRetryDelay and maxRetryDelay fields to the same value this
	// will make the duration between retries constant.
	RetryPolicy PipelineRetryPolicyOutput `pulumi:"retryPolicy"`
	// Server-assigned unique identifier for the Pipeline. The value
	// is a UUID4 string and guaranteed to remain unchanged until the resource is
	// deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The last-modified time.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destinations == nil {
		return nil, errors.New("invalid value for required argument 'Destinations'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PipelineId == nil {
		return nil, errors.New("invalid value for required argument 'PipelineId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("gcp:eventarc/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("gcp:eventarc/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
	// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
	// all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The creation time.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
	// Google-owned key will be used to encrypt messages. It must match the pattern
	// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// List of destinations to which messages will be forwarded. Currently,
	// exactly one destination is supported per Pipeline.
	// Structure is documented below.
	Destinations []PipelineDestination `pulumi:"destinations"`
	// Display name of resource.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// This checksum is computed by the server based on the value of
	// other fields, and might be sent only on create requests to ensure that the
	// client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Represents the format of message data.
	InputPayloadFormat *PipelineInputPayloadFormat `pulumi:"inputPayloadFormat"`
	// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
	LoggingConfig *PipelineLoggingConfig `pulumi:"loggingConfig"`
	// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
	// each Pipeline.
	Mediations []PipelineMediation `pulumi:"mediations"`
	// The resource name of the Pipeline. Must be unique within the
	// location of the project and must be in
	// `projects/{project}/locations/{location}/pipelines/{pipeline}` format.
	Name *string `pulumi:"name"`
	// The user-provided ID to be assigned to the Pipeline. It should match the
	// format `^a-z?$`.
	PipelineId *string `pulumi:"pipelineId"`
	Project    *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
	// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
	// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
	// 60 seconds by default. Please note that if you set the minRetryDelay and maxRetryDelay fields to the same value this
	// will make the duration between retries constant.
	RetryPolicy *PipelineRetryPolicy `pulumi:"retryPolicy"`
	// Server-assigned unique identifier for the Pipeline. The value
	// is a UUID4 string and guaranteed to remain unchanged until the resource is
	// deleted.
	Uid *string `pulumi:"uid"`
	// The last-modified time.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type PipelineState struct {
	// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
	// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
	// all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The creation time.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
	// Google-owned key will be used to encrypt messages. It must match the pattern
	// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
	CryptoKeyName pulumi.StringPtrInput
	// List of destinations to which messages will be forwarded. Currently,
	// exactly one destination is supported per Pipeline.
	// Structure is documented below.
	Destinations PipelineDestinationArrayInput
	// Display name of resource.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// This checksum is computed by the server based on the value of
	// other fields, and might be sent only on create requests to ensure that the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Represents the format of message data.
	InputPayloadFormat PipelineInputPayloadFormatPtrInput
	// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
	LoggingConfig PipelineLoggingConfigPtrInput
	// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
	// each Pipeline.
	Mediations PipelineMediationArrayInput
	// The resource name of the Pipeline. Must be unique within the
	// location of the project and must be in
	// `projects/{project}/locations/{location}/pipelines/{pipeline}` format.
	Name pulumi.StringPtrInput
	// The user-provided ID to be assigned to the Pipeline. It should match the
	// format `^a-z?$`.
	PipelineId pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
	// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
	// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
	// 60 seconds by default. Please note that if you set the minRetryDelay and maxRetryDelay fields to the same value this
	// will make the duration between retries constant.
	RetryPolicy PipelineRetryPolicyPtrInput
	// Server-assigned unique identifier for the Pipeline. The value
	// is a UUID4 string and guaranteed to remain unchanged until the resource is
	// deleted.
	Uid pulumi.StringPtrInput
	// The last-modified time.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
	// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
	// all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
	// Google-owned key will be used to encrypt messages. It must match the pattern
	// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// List of destinations to which messages will be forwarded. Currently,
	// exactly one destination is supported per Pipeline.
	// Structure is documented below.
	Destinations []PipelineDestination `pulumi:"destinations"`
	// Display name of resource.
	DisplayName *string `pulumi:"displayName"`
	// Represents the format of message data.
	InputPayloadFormat *PipelineInputPayloadFormat `pulumi:"inputPayloadFormat"`
	// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
	LoggingConfig *PipelineLoggingConfig `pulumi:"loggingConfig"`
	// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
	// each Pipeline.
	Mediations []PipelineMediation `pulumi:"mediations"`
	// The user-provided ID to be assigned to the Pipeline. It should match the
	// format `^a-z?$`.
	PipelineId string  `pulumi:"pipelineId"`
	Project    *string `pulumi:"project"`
	// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
	// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
	// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
	// 60 seconds by default. Please note that if you set the minRetryDelay and maxRetryDelay fields to the same value this
	// will make the duration between retries constant.
	RetryPolicy *PipelineRetryPolicy `pulumi:"retryPolicy"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
	// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
	// all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
	// Google-owned key will be used to encrypt messages. It must match the pattern
	// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
	CryptoKeyName pulumi.StringPtrInput
	// List of destinations to which messages will be forwarded. Currently,
	// exactly one destination is supported per Pipeline.
	// Structure is documented below.
	Destinations PipelineDestinationArrayInput
	// Display name of resource.
	DisplayName pulumi.StringPtrInput
	// Represents the format of message data.
	InputPayloadFormat PipelineInputPayloadFormatPtrInput
	// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
	LoggingConfig PipelineLoggingConfigPtrInput
	// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
	// each Pipeline.
	Mediations PipelineMediationArrayInput
	// The user-provided ID to be assigned to the Pipeline. It should match the
	// format `^a-z?$`.
	PipelineId pulumi.StringInput
	Project    pulumi.StringPtrInput
	// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
	// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
	// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
	// 60 seconds by default. Please note that if you set the minRetryDelay and maxRetryDelay fields to the same value this
	// will make the duration between retries constant.
	RetryPolicy PipelineRetryPolicyPtrInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//	PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// PipelineMapInput is an input type that accepts PipelineMap and PipelineMapOutput values.
// You can construct a concrete instance of `PipelineMapInput` via:
//
//	PipelineMap{ "key": PipelineArgs{...} }
type PipelineMapInput interface {
	pulumi.Input

	ToPipelineMapOutput() PipelineMapOutput
	ToPipelineMapOutputWithContext(context.Context) PipelineMapOutput
}

type PipelineMap map[string]PipelineInput

func (PipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (i PipelineMap) ToPipelineMapOutput() PipelineMapOutput {
	return i.ToPipelineMapOutputWithContext(context.Background())
}

func (i PipelineMap) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineMapOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
// all of the annotations present on the resource.
func (o PipelineOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The creation time.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
// "2014-10-02T15:01:23.045123456Z".
func (o PipelineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
// Google-owned key will be used to encrypt messages. It must match the pattern
// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
func (o PipelineOutput) CryptoKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.CryptoKeyName }).(pulumi.StringPtrOutput)
}

// List of destinations to which messages will be forwarded. Currently,
// exactly one destination is supported per Pipeline.
// Structure is documented below.
func (o PipelineOutput) Destinations() PipelineDestinationArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineDestinationArrayOutput { return v.Destinations }).(PipelineDestinationArrayOutput)
}

// Display name of resource.
func (o PipelineOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o PipelineOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// This checksum is computed by the server based on the value of
// other fields, and might be sent only on create requests to ensure that the
// client has an up-to-date value before proceeding.
func (o PipelineOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Represents the format of message data.
func (o PipelineOutput) InputPayloadFormat() PipelineInputPayloadFormatPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineInputPayloadFormatPtrOutput { return v.InputPayloadFormat }).(PipelineInputPayloadFormatPtrOutput)
}

// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o PipelineOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o PipelineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
func (o PipelineOutput) LoggingConfig() PipelineLoggingConfigOutput {
	return o.ApplyT(func(v *Pipeline) PipelineLoggingConfigOutput { return v.LoggingConfig }).(PipelineLoggingConfigOutput)
}

// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
// each Pipeline.
func (o PipelineOutput) Mediations() PipelineMediationArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineMediationArrayOutput { return v.Mediations }).(PipelineMediationArrayOutput)
}

// The resource name of the Pipeline. Must be unique within the
// location of the project and must be in
// `projects/{project}/locations/{location}/pipelines/{pipeline}` format.
func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The user-provided ID to be assigned to the Pipeline. It should match the
// format `^a-z?$`.
func (o PipelineOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.PipelineId }).(pulumi.StringOutput)
}

func (o PipelineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o PipelineOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
// 60 seconds by default. Please note that if you set the minRetryDelay and maxRetryDelay fields to the same value this
// will make the duration between retries constant.
func (o PipelineOutput) RetryPolicy() PipelineRetryPolicyOutput {
	return o.ApplyT(func(v *Pipeline) PipelineRetryPolicyOutput { return v.RetryPolicy }).(PipelineRetryPolicyOutput)
}

// Server-assigned unique identifier for the Pipeline. The value
// is a UUID4 string and guaranteed to remain unchanged until the resource is
// deleted.
func (o PipelineOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The last-modified time.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
// "2014-10-02T15:01:23.045123456Z".
func (o PipelineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].([]*Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

type PipelineMapOutput struct{ *pulumi.OutputState }

func (PipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (o PipelineMapOutput) ToPipelineMapOutput() PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) MapIndex(k pulumi.StringInput) PipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].(map[string]*Pipeline)[vs[1].(string)]
	}).(PipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArrayInput)(nil)).Elem(), PipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineMapInput)(nil)).Elem(), PipelineMap{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineMapOutput{})
}
