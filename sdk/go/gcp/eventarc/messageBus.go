// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventarc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Eventarc MessageBus resource
//
// To get more information about MessageBus, see:
//
// * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.messageBuses)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/publish-events/create-bus)
//
// ## Example Usage
//
// ### Eventarc Message Bus With Cmek
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/eventarc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testProject, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{
//				ProjectId: pulumi.StringRef("my-project-name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testKeyRing, err := kms.GetKMSKeyRing(ctx, &kms.GetKMSKeyRingArgs{
//				Name:     "keyring",
//				Location: "us-central1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			key, err := kms.GetKMSCryptoKey(ctx, &kms.GetKMSCryptoKeyArgs{
//				Name:    "key",
//				KeyRing: testKeyRing.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			keyMember, err := kms.NewCryptoKeyIAMMember(ctx, "key_member", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String(key.Id),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-eventarc.iam.gserviceaccount.com", testProject.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventarc.NewMessageBus(ctx, "primary", &eventarc.MessageBusArgs{
//				Location:      pulumi.String("us-central1"),
//				MessageBusId:  pulumi.String("some-message-bus"),
//				CryptoKeyName: pulumi.String(key.Id),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				keyMember,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MessageBus can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/messageBuses/{{message_bus_id}}`
//
// * `{{project}}/{{location}}/{{message_bus_id}}`
//
// * `{{location}}/{{message_bus_id}}`
//
// When using the `pulumi import` command, MessageBus can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:eventarc/messageBus:MessageBus default projects/{{project}}/locations/{{location}}/messageBuses/{{message_bus_id}}
// ```
//
// ```sh
// $ pulumi import gcp:eventarc/messageBus:MessageBus default {{project}}/{{location}}/{{message_bus_id}}
// ```
//
// ```sh
// $ pulumi import gcp:eventarc/messageBus:MessageBus default {{location}}/{{message_bus_id}}
// ```
type MessageBus struct {
	pulumi.CustomResourceState

	// Optional. Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Output only. The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrOutput `pulumi:"cryptoKeyName"`
	// Optional. Resource display name.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig MessageBusLoggingConfigOutput `pulumi:"loggingConfig"`
	// Required. The user-provided ID to be assigned to the MessageBus. It should match the
	// format `^a-z?$`.
	//
	// ***
	MessageBusId pulumi.StringOutput `pulumi:"messageBusId"`
	// Identifier. Resource name of the form
	// projects/{project}/locations/{location}/messageBuses/{message_bus}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMessageBus registers a new resource with the given unique name, arguments, and options.
func NewMessageBus(ctx *pulumi.Context,
	name string, args *MessageBusArgs, opts ...pulumi.ResourceOption) (*MessageBus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MessageBusId == nil {
		return nil, errors.New("invalid value for required argument 'MessageBusId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MessageBus
	err := ctx.RegisterResource("gcp:eventarc/messageBus:MessageBus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMessageBus gets an existing MessageBus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMessageBus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MessageBusState, opts ...pulumi.ResourceOption) (*MessageBus, error) {
	var resource MessageBus
	err := ctx.ReadResource("gcp:eventarc/messageBus:MessageBus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MessageBus resources.
type messageBusState struct {
	// Optional. Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Output only. The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Optional. Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// Optional. Resource display name.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Optional. Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig *MessageBusLoggingConfig `pulumi:"loggingConfig"`
	// Required. The user-provided ID to be assigned to the MessageBus. It should match the
	// format `^a-z?$`.
	//
	// ***
	MessageBusId *string `pulumi:"messageBusId"`
	// Identifier. Resource name of the form
	// projects/{project}/locations/{location}/messageBuses/{message_bus}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid *string `pulumi:"uid"`
	// Output only. The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type MessageBusState struct {
	// Optional. Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Output only. The creation time.
	CreateTime pulumi.StringPtrInput
	// Optional. Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrInput
	// Optional. Resource display name.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and might be sent only on update and delete requests to ensure that
	// the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Optional. Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig MessageBusLoggingConfigPtrInput
	// Required. The user-provided ID to be assigned to the MessageBus. It should match the
	// format `^a-z?$`.
	//
	// ***
	MessageBusId pulumi.StringPtrInput
	// Identifier. Resource name of the form
	// projects/{project}/locations/{location}/messageBuses/{message_bus}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Server assigned unique identifier for the channel. The value is a UUID4
	// string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringPtrInput
	// Output only. The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (MessageBusState) ElementType() reflect.Type {
	return reflect.TypeOf((*messageBusState)(nil)).Elem()
}

type messageBusArgs struct {
	// Optional. Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Optional. Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// Optional. Resource display name.
	DisplayName *string `pulumi:"displayName"`
	// Optional. Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig *MessageBusLoggingConfig `pulumi:"loggingConfig"`
	// Required. The user-provided ID to be assigned to the MessageBus. It should match the
	// format `^a-z?$`.
	//
	// ***
	MessageBusId string `pulumi:"messageBusId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a MessageBus resource.
type MessageBusArgs struct {
	// Optional. Resource annotations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Optional. Resource name of a KMS crypto key (managed by the user) used to
	// encrypt/decrypt their event data.
	// It must match the pattern
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName pulumi.StringPtrInput
	// Optional. Resource display name.
	DisplayName pulumi.StringPtrInput
	// Optional. Resource labels.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The configuration for Platform Telemetry logging for Eventarc Advanced
	// resources.
	// Structure is documented below.
	LoggingConfig MessageBusLoggingConfigPtrInput
	// Required. The user-provided ID to be assigned to the MessageBus. It should match the
	// format `^a-z?$`.
	//
	// ***
	MessageBusId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (MessageBusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*messageBusArgs)(nil)).Elem()
}

type MessageBusInput interface {
	pulumi.Input

	ToMessageBusOutput() MessageBusOutput
	ToMessageBusOutputWithContext(ctx context.Context) MessageBusOutput
}

func (*MessageBus) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageBus)(nil)).Elem()
}

func (i *MessageBus) ToMessageBusOutput() MessageBusOutput {
	return i.ToMessageBusOutputWithContext(context.Background())
}

func (i *MessageBus) ToMessageBusOutputWithContext(ctx context.Context) MessageBusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageBusOutput)
}

// MessageBusArrayInput is an input type that accepts MessageBusArray and MessageBusArrayOutput values.
// You can construct a concrete instance of `MessageBusArrayInput` via:
//
//	MessageBusArray{ MessageBusArgs{...} }
type MessageBusArrayInput interface {
	pulumi.Input

	ToMessageBusArrayOutput() MessageBusArrayOutput
	ToMessageBusArrayOutputWithContext(context.Context) MessageBusArrayOutput
}

type MessageBusArray []MessageBusInput

func (MessageBusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MessageBus)(nil)).Elem()
}

func (i MessageBusArray) ToMessageBusArrayOutput() MessageBusArrayOutput {
	return i.ToMessageBusArrayOutputWithContext(context.Background())
}

func (i MessageBusArray) ToMessageBusArrayOutputWithContext(ctx context.Context) MessageBusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageBusArrayOutput)
}

// MessageBusMapInput is an input type that accepts MessageBusMap and MessageBusMapOutput values.
// You can construct a concrete instance of `MessageBusMapInput` via:
//
//	MessageBusMap{ "key": MessageBusArgs{...} }
type MessageBusMapInput interface {
	pulumi.Input

	ToMessageBusMapOutput() MessageBusMapOutput
	ToMessageBusMapOutputWithContext(context.Context) MessageBusMapOutput
}

type MessageBusMap map[string]MessageBusInput

func (MessageBusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MessageBus)(nil)).Elem()
}

func (i MessageBusMap) ToMessageBusMapOutput() MessageBusMapOutput {
	return i.ToMessageBusMapOutputWithContext(context.Background())
}

func (i MessageBusMap) ToMessageBusMapOutputWithContext(ctx context.Context) MessageBusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageBusMapOutput)
}

type MessageBusOutput struct{ *pulumi.OutputState }

func (MessageBusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageBus)(nil)).Elem()
}

func (o MessageBusOutput) ToMessageBusOutput() MessageBusOutput {
	return o
}

func (o MessageBusOutput) ToMessageBusOutputWithContext(ctx context.Context) MessageBusOutput {
	return o
}

// Optional. Resource annotations.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o MessageBusOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Output only. The creation time.
func (o MessageBusOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Resource name of a KMS crypto key (managed by the user) used to
// encrypt/decrypt their event data.
// It must match the pattern
// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o MessageBusOutput) CryptoKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringPtrOutput { return v.CryptoKeyName }).(pulumi.StringPtrOutput)
}

// Optional. Resource display name.
func (o MessageBusOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o MessageBusOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o MessageBusOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Output only. This checksum is computed by the server based on the value of other
// fields, and might be sent only on update and delete requests to ensure that
// the client has an up-to-date value before proceeding.
func (o MessageBusOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. Resource labels.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o MessageBusOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o MessageBusOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The configuration for Platform Telemetry logging for Eventarc Advanced
// resources.
// Structure is documented below.
func (o MessageBusOutput) LoggingConfig() MessageBusLoggingConfigOutput {
	return o.ApplyT(func(v *MessageBus) MessageBusLoggingConfigOutput { return v.LoggingConfig }).(MessageBusLoggingConfigOutput)
}

// Required. The user-provided ID to be assigned to the MessageBus. It should match the
// format `^a-z?$`.
//
// ***
func (o MessageBusOutput) MessageBusId() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringOutput { return v.MessageBusId }).(pulumi.StringOutput)
}

// Identifier. Resource name of the form
// projects/{project}/locations/{location}/messageBuses/{message_bus}
func (o MessageBusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o MessageBusOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o MessageBusOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Server assigned unique identifier for the channel. The value is a UUID4
// string and guaranteed to remain unchanged until the resource is deleted.
func (o MessageBusOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The last-modified time.
func (o MessageBusOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageBus) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MessageBusArrayOutput struct{ *pulumi.OutputState }

func (MessageBusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MessageBus)(nil)).Elem()
}

func (o MessageBusArrayOutput) ToMessageBusArrayOutput() MessageBusArrayOutput {
	return o
}

func (o MessageBusArrayOutput) ToMessageBusArrayOutputWithContext(ctx context.Context) MessageBusArrayOutput {
	return o
}

func (o MessageBusArrayOutput) Index(i pulumi.IntInput) MessageBusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MessageBus {
		return vs[0].([]*MessageBus)[vs[1].(int)]
	}).(MessageBusOutput)
}

type MessageBusMapOutput struct{ *pulumi.OutputState }

func (MessageBusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MessageBus)(nil)).Elem()
}

func (o MessageBusMapOutput) ToMessageBusMapOutput() MessageBusMapOutput {
	return o
}

func (o MessageBusMapOutput) ToMessageBusMapOutputWithContext(ctx context.Context) MessageBusMapOutput {
	return o
}

func (o MessageBusMapOutput) MapIndex(k pulumi.StringInput) MessageBusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MessageBus {
		return vs[0].(map[string]*MessageBus)[vs[1].(string)]
	}).(MessageBusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MessageBusInput)(nil)).Elem(), &MessageBus{})
	pulumi.RegisterInputType(reflect.TypeOf((*MessageBusArrayInput)(nil)).Elem(), MessageBusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MessageBusMapInput)(nil)).Elem(), MessageBusMap{})
	pulumi.RegisterOutputType(MessageBusOutput{})
	pulumi.RegisterOutputType(MessageBusArrayOutput{})
	pulumi.RegisterOutputType(MessageBusMapOutput{})
}
