// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backupdisasterrecovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A backup plan defines when and how to back up a resource, including the backup's schedule, retention, and location.
//
// To get more information about BackupPlan, see:
//
// * [API documentation](https://cloud.google.com/backup-disaster-recovery/docs/reference/rest)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/backup-disaster-recovery/docs)
//
// ## Example Usage
//
// ### Backup Dr Backup Plan Simple
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/backupdisasterrecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myBackupVault, err := backupdisasterrecovery.NewBackupVault(ctx, "my_backup_vault", &backupdisasterrecovery.BackupVaultArgs{
//				Location:                               pulumi.String("us-central1"),
//				BackupVaultId:                          pulumi.String("backup-vault-simple-test"),
//				BackupMinimumEnforcedRetentionDuration: pulumi.String("100000s"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = backupdisasterrecovery.NewBackupPlan(ctx, "my-backup-plan-1", &backupdisasterrecovery.BackupPlanArgs{
//				Location:     pulumi.String("us-central1"),
//				BackupPlanId: pulumi.String("backup-plan-simple-test"),
//				ResourceType: pulumi.String("compute.googleapis.com/Instance"),
//				BackupVault:  myBackupVault.ID(),
//				BackupRules: backupdisasterrecovery.BackupPlanBackupRuleArray{
//					&backupdisasterrecovery.BackupPlanBackupRuleArgs{
//						RuleId:              pulumi.String("rule-1"),
//						BackupRetentionDays: pulumi.Int(5),
//						StandardSchedule: &backupdisasterrecovery.BackupPlanBackupRuleStandardScheduleArgs{
//							RecurrenceType:  pulumi.String("HOURLY"),
//							HourlyFrequency: pulumi.Int(6),
//							TimeZone:        pulumi.String("UTC"),
//							BackupWindow: &backupdisasterrecovery.BackupPlanBackupRuleStandardScheduleBackupWindowArgs{
//								StartHourOfDay: pulumi.Int(0),
//								EndHourOfDay:   pulumi.Int(24),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Backup Dr Backup Plan For Disk Resource
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/backupdisasterrecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myBackupVault, err := backupdisasterrecovery.NewBackupVault(ctx, "my_backup_vault", &backupdisasterrecovery.BackupVaultArgs{
//				Location:                               pulumi.String("us-central1"),
//				BackupVaultId:                          pulumi.String("backup-vault-disk-test"),
//				BackupMinimumEnforcedRetentionDuration: pulumi.String("100000s"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = backupdisasterrecovery.NewBackupPlan(ctx, "my-disk-backup-plan-1", &backupdisasterrecovery.BackupPlanArgs{
//				Location:     pulumi.String("us-central1"),
//				BackupPlanId: pulumi.String("backup-plan-disk-test"),
//				ResourceType: pulumi.String("compute.googleapis.com/Disk"),
//				BackupVault:  myBackupVault.ID(),
//				BackupRules: backupdisasterrecovery.BackupPlanBackupRuleArray{
//					&backupdisasterrecovery.BackupPlanBackupRuleArgs{
//						RuleId:              pulumi.String("rule-1"),
//						BackupRetentionDays: pulumi.Int(5),
//						StandardSchedule: &backupdisasterrecovery.BackupPlanBackupRuleStandardScheduleArgs{
//							RecurrenceType:  pulumi.String("HOURLY"),
//							HourlyFrequency: pulumi.Int(1),
//							TimeZone:        pulumi.String("UTC"),
//							BackupWindow: &backupdisasterrecovery.BackupPlanBackupRuleStandardScheduleBackupWindowArgs{
//								StartHourOfDay: pulumi.Int(0),
//								EndHourOfDay:   pulumi.Int(6),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BackupPlan can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backupPlans/{{backup_plan_id}}`
//
// * `{{project}}/{{location}}/{{backup_plan_id}}`
//
// * `{{location}}/{{backup_plan_id}}`
//
// When using the `pulumi import` command, BackupPlan can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:backupdisasterrecovery/backupPlan:BackupPlan default projects/{{project}}/locations/{{location}}/backupPlans/{{backup_plan_id}}
// ```
//
// ```sh
// $ pulumi import gcp:backupdisasterrecovery/backupPlan:BackupPlan default {{project}}/{{location}}/{{backup_plan_id}}
// ```
//
// ```sh
// $ pulumi import gcp:backupdisasterrecovery/backupPlan:BackupPlan default {{location}}/{{backup_plan_id}}
// ```
type BackupPlan struct {
	pulumi.CustomResourceState

	// The ID of the backup plan
	BackupPlanId pulumi.StringOutput `pulumi:"backupPlanId"`
	// The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
	// Structure is documented below.
	BackupRules BackupPlanBackupRuleArrayOutput `pulumi:"backupRules"`
	// Backup vault where the backups gets stored using this Backup plan.
	BackupVault pulumi.StringOutput `pulumi:"backupVault"`
	// The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.
	BackupVaultServiceAccount pulumi.StringOutput `pulumi:"backupVaultServiceAccount"`
	// When the `BackupPlan` was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description allows for additional details about `BackupPlan` and its use cases to be provided.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The location for the backup plan
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of backup plan resource created
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The resource type to which the `BackupPlan` will be applied.
	// Examples include, "compute.googleapis.com/Instance", "compute.googleapis.com/Disk", and "storage.googleapis.com/Bucket".
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The list of all resource types to which the 'BackupPlan' can be applied.
	SupportedResourceTypes pulumi.StringArrayOutput `pulumi:"supportedResourceTypes"`
	// When the `BackupPlan` was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBackupPlan registers a new resource with the given unique name, arguments, and options.
func NewBackupPlan(ctx *pulumi.Context,
	name string, args *BackupPlanArgs, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPlanId == nil {
		return nil, errors.New("invalid value for required argument 'BackupPlanId'")
	}
	if args.BackupRules == nil {
		return nil, errors.New("invalid value for required argument 'BackupRules'")
	}
	if args.BackupVault == nil {
		return nil, errors.New("invalid value for required argument 'BackupVault'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupPlan
	err := ctx.RegisterResource("gcp:backupdisasterrecovery/backupPlan:BackupPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPlan gets an existing BackupPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPlanState, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	var resource BackupPlan
	err := ctx.ReadResource("gcp:backupdisasterrecovery/backupPlan:BackupPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPlan resources.
type backupPlanState struct {
	// The ID of the backup plan
	BackupPlanId *string `pulumi:"backupPlanId"`
	// The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
	// Structure is documented below.
	BackupRules []BackupPlanBackupRule `pulumi:"backupRules"`
	// Backup vault where the backups gets stored using this Backup plan.
	BackupVault *string `pulumi:"backupVault"`
	// The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.
	BackupVaultServiceAccount *string `pulumi:"backupVaultServiceAccount"`
	// When the `BackupPlan` was created.
	CreateTime *string `pulumi:"createTime"`
	// The description allows for additional details about `BackupPlan` and its use cases to be provided.
	Description *string `pulumi:"description"`
	// The location for the backup plan
	Location *string `pulumi:"location"`
	// The name of backup plan resource created
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The resource type to which the `BackupPlan` will be applied.
	// Examples include, "compute.googleapis.com/Instance", "compute.googleapis.com/Disk", and "storage.googleapis.com/Bucket".
	ResourceType *string `pulumi:"resourceType"`
	// The list of all resource types to which the 'BackupPlan' can be applied.
	SupportedResourceTypes []string `pulumi:"supportedResourceTypes"`
	// When the `BackupPlan` was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type BackupPlanState struct {
	// The ID of the backup plan
	BackupPlanId pulumi.StringPtrInput
	// The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
	// Structure is documented below.
	BackupRules BackupPlanBackupRuleArrayInput
	// Backup vault where the backups gets stored using this Backup plan.
	BackupVault pulumi.StringPtrInput
	// The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.
	BackupVaultServiceAccount pulumi.StringPtrInput
	// When the `BackupPlan` was created.
	CreateTime pulumi.StringPtrInput
	// The description allows for additional details about `BackupPlan` and its use cases to be provided.
	Description pulumi.StringPtrInput
	// The location for the backup plan
	Location pulumi.StringPtrInput
	// The name of backup plan resource created
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The resource type to which the `BackupPlan` will be applied.
	// Examples include, "compute.googleapis.com/Instance", "compute.googleapis.com/Disk", and "storage.googleapis.com/Bucket".
	ResourceType pulumi.StringPtrInput
	// The list of all resource types to which the 'BackupPlan' can be applied.
	SupportedResourceTypes pulumi.StringArrayInput
	// When the `BackupPlan` was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (BackupPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanState)(nil)).Elem()
}

type backupPlanArgs struct {
	// The ID of the backup plan
	BackupPlanId string `pulumi:"backupPlanId"`
	// The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
	// Structure is documented below.
	BackupRules []BackupPlanBackupRule `pulumi:"backupRules"`
	// Backup vault where the backups gets stored using this Backup plan.
	BackupVault string `pulumi:"backupVault"`
	// The description allows for additional details about `BackupPlan` and its use cases to be provided.
	Description *string `pulumi:"description"`
	// The location for the backup plan
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The resource type to which the `BackupPlan` will be applied.
	// Examples include, "compute.googleapis.com/Instance", "compute.googleapis.com/Disk", and "storage.googleapis.com/Bucket".
	ResourceType string `pulumi:"resourceType"`
}

// The set of arguments for constructing a BackupPlan resource.
type BackupPlanArgs struct {
	// The ID of the backup plan
	BackupPlanId pulumi.StringInput
	// The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
	// Structure is documented below.
	BackupRules BackupPlanBackupRuleArrayInput
	// Backup vault where the backups gets stored using this Backup plan.
	BackupVault pulumi.StringInput
	// The description allows for additional details about `BackupPlan` and its use cases to be provided.
	Description pulumi.StringPtrInput
	// The location for the backup plan
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The resource type to which the `BackupPlan` will be applied.
	// Examples include, "compute.googleapis.com/Instance", "compute.googleapis.com/Disk", and "storage.googleapis.com/Bucket".
	ResourceType pulumi.StringInput
}

func (BackupPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanArgs)(nil)).Elem()
}

type BackupPlanInput interface {
	pulumi.Input

	ToBackupPlanOutput() BackupPlanOutput
	ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput
}

func (*BackupPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlan)(nil)).Elem()
}

func (i *BackupPlan) ToBackupPlanOutput() BackupPlanOutput {
	return i.ToBackupPlanOutputWithContext(context.Background())
}

func (i *BackupPlan) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanOutput)
}

// BackupPlanArrayInput is an input type that accepts BackupPlanArray and BackupPlanArrayOutput values.
// You can construct a concrete instance of `BackupPlanArrayInput` via:
//
//	BackupPlanArray{ BackupPlanArgs{...} }
type BackupPlanArrayInput interface {
	pulumi.Input

	ToBackupPlanArrayOutput() BackupPlanArrayOutput
	ToBackupPlanArrayOutputWithContext(context.Context) BackupPlanArrayOutput
}

type BackupPlanArray []BackupPlanInput

func (BackupPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPlan)(nil)).Elem()
}

func (i BackupPlanArray) ToBackupPlanArrayOutput() BackupPlanArrayOutput {
	return i.ToBackupPlanArrayOutputWithContext(context.Background())
}

func (i BackupPlanArray) ToBackupPlanArrayOutputWithContext(ctx context.Context) BackupPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanArrayOutput)
}

// BackupPlanMapInput is an input type that accepts BackupPlanMap and BackupPlanMapOutput values.
// You can construct a concrete instance of `BackupPlanMapInput` via:
//
//	BackupPlanMap{ "key": BackupPlanArgs{...} }
type BackupPlanMapInput interface {
	pulumi.Input

	ToBackupPlanMapOutput() BackupPlanMapOutput
	ToBackupPlanMapOutputWithContext(context.Context) BackupPlanMapOutput
}

type BackupPlanMap map[string]BackupPlanInput

func (BackupPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPlan)(nil)).Elem()
}

func (i BackupPlanMap) ToBackupPlanMapOutput() BackupPlanMapOutput {
	return i.ToBackupPlanMapOutputWithContext(context.Background())
}

func (i BackupPlanMap) ToBackupPlanMapOutputWithContext(ctx context.Context) BackupPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanMapOutput)
}

type BackupPlanOutput struct{ *pulumi.OutputState }

func (BackupPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlan)(nil)).Elem()
}

func (o BackupPlanOutput) ToBackupPlanOutput() BackupPlanOutput {
	return o
}

func (o BackupPlanOutput) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return o
}

// The ID of the backup plan
func (o BackupPlanOutput) BackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.BackupPlanId }).(pulumi.StringOutput)
}

// The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
// Structure is documented below.
func (o BackupPlanOutput) BackupRules() BackupPlanBackupRuleArrayOutput {
	return o.ApplyT(func(v *BackupPlan) BackupPlanBackupRuleArrayOutput { return v.BackupRules }).(BackupPlanBackupRuleArrayOutput)
}

// Backup vault where the backups gets stored using this Backup plan.
func (o BackupPlanOutput) BackupVault() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.BackupVault }).(pulumi.StringOutput)
}

// The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.
func (o BackupPlanOutput) BackupVaultServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.BackupVaultServiceAccount }).(pulumi.StringOutput)
}

// When the `BackupPlan` was created.
func (o BackupPlanOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description allows for additional details about `BackupPlan` and its use cases to be provided.
func (o BackupPlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The location for the backup plan
func (o BackupPlanOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of backup plan resource created
func (o BackupPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BackupPlanOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The resource type to which the `BackupPlan` will be applied.
// Examples include, "compute.googleapis.com/Instance", "compute.googleapis.com/Disk", and "storage.googleapis.com/Bucket".
func (o BackupPlanOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The list of all resource types to which the 'BackupPlan' can be applied.
func (o BackupPlanOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringArrayOutput { return v.SupportedResourceTypes }).(pulumi.StringArrayOutput)
}

// When the `BackupPlan` was last updated.
func (o BackupPlanOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type BackupPlanArrayOutput struct{ *pulumi.OutputState }

func (BackupPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPlan)(nil)).Elem()
}

func (o BackupPlanArrayOutput) ToBackupPlanArrayOutput() BackupPlanArrayOutput {
	return o
}

func (o BackupPlanArrayOutput) ToBackupPlanArrayOutputWithContext(ctx context.Context) BackupPlanArrayOutput {
	return o
}

func (o BackupPlanArrayOutput) Index(i pulumi.IntInput) BackupPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupPlan {
		return vs[0].([]*BackupPlan)[vs[1].(int)]
	}).(BackupPlanOutput)
}

type BackupPlanMapOutput struct{ *pulumi.OutputState }

func (BackupPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPlan)(nil)).Elem()
}

func (o BackupPlanMapOutput) ToBackupPlanMapOutput() BackupPlanMapOutput {
	return o
}

func (o BackupPlanMapOutput) ToBackupPlanMapOutputWithContext(ctx context.Context) BackupPlanMapOutput {
	return o
}

func (o BackupPlanMapOutput) MapIndex(k pulumi.StringInput) BackupPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupPlan {
		return vs[0].(map[string]*BackupPlan)[vs[1].(string)]
	}).(BackupPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanInput)(nil)).Elem(), &BackupPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanArrayInput)(nil)).Elem(), BackupPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanMapInput)(nil)).Elem(), BackupPlanMap{})
	pulumi.RegisterOutputType(BackupPlanOutput{})
	pulumi.RegisterOutputType(BackupPlanArrayOutput{})
	pulumi.RegisterOutputType(BackupPlanMapOutput{})
}
