// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backupdisasterrecovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Initializes a Project-level default Backupdr config. It creates default Backupvault and default Backup Plan in same project for customers to protect instances.
//
// To get more information about ServiceConfig, see:
//
// * [API documentation](https://cloud.google.com/backup-disaster-recovery/docs/reference/rest/v1/projects.locations.serviceConfig)
//
// ## Example Usage
//
// ### Backup Dr Service Config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/backupdisasterrecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := backupdisasterrecovery.NewServiceConfig(ctx, "bpa1", &backupdisasterrecovery.ServiceConfigArgs{
//				Location:     pulumi.String("us-central1"),
//				ResourceType: pulumi.String("compute.googleapis.com/Instance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource does not support import.
type ServiceConfig struct {
	pulumi.CustomResourceState

	// The location in which the Service config is to be initialized.
	Location pulumi.StringOutput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The resource type to which the default service config will be applied.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
}

// NewServiceConfig registers a new resource with the given unique name, arguments, and options.
func NewServiceConfig(ctx *pulumi.Context,
	name string, args *ServiceConfigArgs, opts ...pulumi.ResourceOption) (*ServiceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceConfig
	err := ctx.RegisterResource("gcp:backupdisasterrecovery/serviceConfig:ServiceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceConfig gets an existing ServiceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceConfigState, opts ...pulumi.ResourceOption) (*ServiceConfig, error) {
	var resource ServiceConfig
	err := ctx.ReadResource("gcp:backupdisasterrecovery/serviceConfig:ServiceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceConfig resources.
type serviceConfigState struct {
	// The location in which the Service config is to be initialized.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The resource type to which the default service config will be applied.
	ResourceType *string `pulumi:"resourceType"`
}

type ServiceConfigState struct {
	// The location in which the Service config is to be initialized.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The resource type to which the default service config will be applied.
	ResourceType pulumi.StringPtrInput
}

func (ServiceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceConfigState)(nil)).Elem()
}

type serviceConfigArgs struct {
	// The location in which the Service config is to be initialized.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The resource type to which the default service config will be applied.
	ResourceType string `pulumi:"resourceType"`
}

// The set of arguments for constructing a ServiceConfig resource.
type ServiceConfigArgs struct {
	// The location in which the Service config is to be initialized.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The resource type to which the default service config will be applied.
	ResourceType pulumi.StringInput
}

func (ServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceConfigArgs)(nil)).Elem()
}

type ServiceConfigInput interface {
	pulumi.Input

	ToServiceConfigOutput() ServiceConfigOutput
	ToServiceConfigOutputWithContext(ctx context.Context) ServiceConfigOutput
}

func (*ServiceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConfig)(nil)).Elem()
}

func (i *ServiceConfig) ToServiceConfigOutput() ServiceConfigOutput {
	return i.ToServiceConfigOutputWithContext(context.Background())
}

func (i *ServiceConfig) ToServiceConfigOutputWithContext(ctx context.Context) ServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConfigOutput)
}

// ServiceConfigArrayInput is an input type that accepts ServiceConfigArray and ServiceConfigArrayOutput values.
// You can construct a concrete instance of `ServiceConfigArrayInput` via:
//
//	ServiceConfigArray{ ServiceConfigArgs{...} }
type ServiceConfigArrayInput interface {
	pulumi.Input

	ToServiceConfigArrayOutput() ServiceConfigArrayOutput
	ToServiceConfigArrayOutputWithContext(context.Context) ServiceConfigArrayOutput
}

type ServiceConfigArray []ServiceConfigInput

func (ServiceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceConfig)(nil)).Elem()
}

func (i ServiceConfigArray) ToServiceConfigArrayOutput() ServiceConfigArrayOutput {
	return i.ToServiceConfigArrayOutputWithContext(context.Background())
}

func (i ServiceConfigArray) ToServiceConfigArrayOutputWithContext(ctx context.Context) ServiceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConfigArrayOutput)
}

// ServiceConfigMapInput is an input type that accepts ServiceConfigMap and ServiceConfigMapOutput values.
// You can construct a concrete instance of `ServiceConfigMapInput` via:
//
//	ServiceConfigMap{ "key": ServiceConfigArgs{...} }
type ServiceConfigMapInput interface {
	pulumi.Input

	ToServiceConfigMapOutput() ServiceConfigMapOutput
	ToServiceConfigMapOutputWithContext(context.Context) ServiceConfigMapOutput
}

type ServiceConfigMap map[string]ServiceConfigInput

func (ServiceConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceConfig)(nil)).Elem()
}

func (i ServiceConfigMap) ToServiceConfigMapOutput() ServiceConfigMapOutput {
	return i.ToServiceConfigMapOutputWithContext(context.Background())
}

func (i ServiceConfigMap) ToServiceConfigMapOutputWithContext(ctx context.Context) ServiceConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConfigMapOutput)
}

type ServiceConfigOutput struct{ *pulumi.OutputState }

func (ServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConfig)(nil)).Elem()
}

func (o ServiceConfigOutput) ToServiceConfigOutput() ServiceConfigOutput {
	return o
}

func (o ServiceConfigOutput) ToServiceConfigOutputWithContext(ctx context.Context) ServiceConfigOutput {
	return o
}

// The location in which the Service config is to be initialized.
func (o ServiceConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ServiceConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The resource type to which the default service config will be applied.
func (o ServiceConfigOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceConfig) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

type ServiceConfigArrayOutput struct{ *pulumi.OutputState }

func (ServiceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceConfig)(nil)).Elem()
}

func (o ServiceConfigArrayOutput) ToServiceConfigArrayOutput() ServiceConfigArrayOutput {
	return o
}

func (o ServiceConfigArrayOutput) ToServiceConfigArrayOutputWithContext(ctx context.Context) ServiceConfigArrayOutput {
	return o
}

func (o ServiceConfigArrayOutput) Index(i pulumi.IntInput) ServiceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceConfig {
		return vs[0].([]*ServiceConfig)[vs[1].(int)]
	}).(ServiceConfigOutput)
}

type ServiceConfigMapOutput struct{ *pulumi.OutputState }

func (ServiceConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceConfig)(nil)).Elem()
}

func (o ServiceConfigMapOutput) ToServiceConfigMapOutput() ServiceConfigMapOutput {
	return o
}

func (o ServiceConfigMapOutput) ToServiceConfigMapOutputWithContext(ctx context.Context) ServiceConfigMapOutput {
	return o
}

func (o ServiceConfigMapOutput) MapIndex(k pulumi.StringInput) ServiceConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceConfig {
		return vs[0].(map[string]*ServiceConfig)[vs[1].(string)]
	}).(ServiceConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConfigInput)(nil)).Elem(), &ServiceConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConfigArrayInput)(nil)).Elem(), ServiceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConfigMapInput)(nil)).Elem(), ServiceConfigMap{})
	pulumi.RegisterOutputType(ServiceConfigOutput{})
	pulumi.RegisterOutputType(ServiceConfigArrayOutput{})
	pulumi.RegisterOutputType(ServiceConfigMapOutput{})
}
