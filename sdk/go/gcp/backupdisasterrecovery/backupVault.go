// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backupdisasterrecovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Backup Dr Backup Vault Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/backupdisasterrecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := backupdisasterrecovery.NewBackupVault(ctx, "backup-vault-test", &backupdisasterrecovery.BackupVaultArgs{
//				Location:                               pulumi.String("us-central1"),
//				BackupVaultId:                          pulumi.String("backup-vault-test"),
//				Description:                            pulumi.String("This is a second backup vault built by Terraform."),
//				BackupMinimumEnforcedRetentionDuration: pulumi.String("100000s"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar1"),
//					"bar": pulumi.String("baz1"),
//				},
//				Annotations: pulumi.StringMap{
//					"annotations1": pulumi.String("bar1"),
//					"annotations2": pulumi.String("baz1"),
//				},
//				ForceUpdate:                pulumi.Bool(true),
//				AccessRestriction:          pulumi.String("WITHIN_ORGANIZATION"),
//				IgnoreInactiveDatasources:  pulumi.Bool(true),
//				IgnoreBackupPlanReferences: pulumi.Bool(true),
//				AllowMissing:               pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BackupVault can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backupVaults/{{backup_vault_id}}`
//
// * `{{project}}/{{location}}/{{backup_vault_id}}`
//
// * `{{location}}/{{backup_vault_id}}`
//
// When using the `pulumi import` command, BackupVault can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:backupdisasterrecovery/backupVault:BackupVault default projects/{{project}}/locations/{{location}}/backupVaults/{{backup_vault_id}}
// ```
//
// ```sh
// $ pulumi import gcp:backupdisasterrecovery/backupVault:BackupVault default {{project}}/{{location}}/{{backup_vault_id}}
// ```
//
// ```sh
// $ pulumi import gcp:backupdisasterrecovery/backupVault:BackupVault default {{location}}/{{backup_vault_id}}
// ```
type BackupVault struct {
	pulumi.CustomResourceState

	// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
	// Default value is `WITHIN_ORGANIZATION`.
	// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
	AccessRestriction pulumi.StringPtrOutput `pulumi:"accessRestriction"`
	// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
	AllowMissing pulumi.BoolPtrOutput `pulumi:"allowMissing"`
	// Optional. User annotations. See https://google.aip.dev/128#annotations
	// Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Output only. The number of backups in this backup vault.
	BackupCount pulumi.StringOutput `pulumi:"backupCount"`
	// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
	BackupMinimumEnforcedRetentionDuration pulumi.StringOutput `pulumi:"backupMinimumEnforcedRetentionDuration"`
	// Required. ID of the requesting object.
	//
	// ***
	BackupVaultId pulumi.StringOutput `pulumi:"backupVaultId"`
	// Output only. The time when the instance was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Output only. Set to true when there are no backups nested under this resource.
	Deletable pulumi.BoolOutput `pulumi:"deletable"`
	// Optional. The description of the BackupVault instance (2048 characters or less).
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. Time after which the BackupVault resource is locked.
	EffectiveTime pulumi.StringPtrOutput `pulumi:"effectiveTime"`
	// Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// (Optional, Deprecated)
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	//
	// > **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	//
	// Deprecated: `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
	// the restriction against conflicting retention periods. This conflict may occur when the
	// expiration schedule defined by the associated backup plan is shorter than the minimum
	// retention set by the backup vault.
	ForceUpdate pulumi.BoolPtrOutput `pulumi:"forceUpdate"`
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	IgnoreBackupPlanReferences pulumi.BoolPtrOutput `pulumi:"ignoreBackupPlanReferences"`
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	IgnoreInactiveDatasources pulumi.BoolPtrOutput `pulumi:"ignoreInactiveDatasources"`
	// Optional. Resource labels to represent user provided metadata.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The GCP location for the backup vault.
	Location pulumi.StringOutput `pulumi:"location"`
	// Output only. Identifier. The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// Output only. The BackupVault resource instance state.
	// Possible values:
	// STATE_UNSPECIFIED
	// CREATING
	// ACTIVE
	// DELETING
	// ERROR
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. Total size of the storage used by all backup resources.
	TotalStoredBytes pulumi.StringOutput `pulumi:"totalStoredBytes"`
	// Output only. Output only Immutable after resource creation until resource deletion.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The time when the instance was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBackupVault registers a new resource with the given unique name, arguments, and options.
func NewBackupVault(ctx *pulumi.Context,
	name string, args *BackupVaultArgs, opts ...pulumi.ResourceOption) (*BackupVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupMinimumEnforcedRetentionDuration == nil {
		return nil, errors.New("invalid value for required argument 'BackupMinimumEnforcedRetentionDuration'")
	}
	if args.BackupVaultId == nil {
		return nil, errors.New("invalid value for required argument 'BackupVaultId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupVault
	err := ctx.RegisterResource("gcp:backupdisasterrecovery/backupVault:BackupVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupVault gets an existing BackupVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupVaultState, opts ...pulumi.ResourceOption) (*BackupVault, error) {
	var resource BackupVault
	err := ctx.ReadResource("gcp:backupdisasterrecovery/backupVault:BackupVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupVault resources.
type backupVaultState struct {
	// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
	// Default value is `WITHIN_ORGANIZATION`.
	// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
	AccessRestriction *string `pulumi:"accessRestriction"`
	// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
	AllowMissing *bool `pulumi:"allowMissing"`
	// Optional. User annotations. See https://google.aip.dev/128#annotations
	// Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Output only. The number of backups in this backup vault.
	BackupCount *string `pulumi:"backupCount"`
	// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
	BackupMinimumEnforcedRetentionDuration *string `pulumi:"backupMinimumEnforcedRetentionDuration"`
	// Required. ID of the requesting object.
	//
	// ***
	BackupVaultId *string `pulumi:"backupVaultId"`
	// Output only. The time when the instance was created.
	CreateTime *string `pulumi:"createTime"`
	// Output only. Set to true when there are no backups nested under this resource.
	Deletable *bool `pulumi:"deletable"`
	// Optional. The description of the BackupVault instance (2048 characters or less).
	Description          *string           `pulumi:"description"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. Time after which the BackupVault resource is locked.
	EffectiveTime *string `pulumi:"effectiveTime"`
	// Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
	Etag *string `pulumi:"etag"`
	// (Optional, Deprecated)
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	//
	// > **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	//
	// Deprecated: `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	ForceDelete *bool `pulumi:"forceDelete"`
	// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
	// the restriction against conflicting retention periods. This conflict may occur when the
	// expiration schedule defined by the associated backup plan is shorter than the minimum
	// retention set by the backup vault.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	IgnoreBackupPlanReferences *bool `pulumi:"ignoreBackupPlanReferences"`
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	IgnoreInactiveDatasources *bool `pulumi:"ignoreInactiveDatasources"`
	// Optional. Resource labels to represent user provided metadata.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The GCP location for the backup vault.
	Location *string `pulumi:"location"`
	// Output only. Identifier. The resource name.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Output only. The BackupVault resource instance state.
	// Possible values:
	// STATE_UNSPECIFIED
	// CREATING
	// ACTIVE
	// DELETING
	// ERROR
	State *string `pulumi:"state"`
	// Output only. Total size of the storage used by all backup resources.
	TotalStoredBytes *string `pulumi:"totalStoredBytes"`
	// Output only. Output only Immutable after resource creation until resource deletion.
	Uid *string `pulumi:"uid"`
	// Output only. The time when the instance was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type BackupVaultState struct {
	// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
	// Default value is `WITHIN_ORGANIZATION`.
	// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
	AccessRestriction pulumi.StringPtrInput
	// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
	AllowMissing pulumi.BoolPtrInput
	// Optional. User annotations. See https://google.aip.dev/128#annotations
	// Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Output only. The number of backups in this backup vault.
	BackupCount pulumi.StringPtrInput
	// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
	BackupMinimumEnforcedRetentionDuration pulumi.StringPtrInput
	// Required. ID of the requesting object.
	//
	// ***
	BackupVaultId pulumi.StringPtrInput
	// Output only. The time when the instance was created.
	CreateTime pulumi.StringPtrInput
	// Output only. Set to true when there are no backups nested under this resource.
	Deletable pulumi.BoolPtrInput
	// Optional. The description of the BackupVault instance (2048 characters or less).
	Description          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. Time after which the BackupVault resource is locked.
	EffectiveTime pulumi.StringPtrInput
	// Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
	Etag pulumi.StringPtrInput
	// (Optional, Deprecated)
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	//
	// > **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	//
	// Deprecated: `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	ForceDelete pulumi.BoolPtrInput
	// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
	// the restriction against conflicting retention periods. This conflict may occur when the
	// expiration schedule defined by the associated backup plan is shorter than the minimum
	// retention set by the backup vault.
	ForceUpdate pulumi.BoolPtrInput
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	IgnoreBackupPlanReferences pulumi.BoolPtrInput
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	IgnoreInactiveDatasources pulumi.BoolPtrInput
	// Optional. Resource labels to represent user provided metadata.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The GCP location for the backup vault.
	Location pulumi.StringPtrInput
	// Output only. Identifier. The resource name.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
	ServiceAccount pulumi.StringPtrInput
	// Output only. The BackupVault resource instance state.
	// Possible values:
	// STATE_UNSPECIFIED
	// CREATING
	// ACTIVE
	// DELETING
	// ERROR
	State pulumi.StringPtrInput
	// Output only. Total size of the storage used by all backup resources.
	TotalStoredBytes pulumi.StringPtrInput
	// Output only. Output only Immutable after resource creation until resource deletion.
	Uid pulumi.StringPtrInput
	// Output only. The time when the instance was updated.
	UpdateTime pulumi.StringPtrInput
}

func (BackupVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupVaultState)(nil)).Elem()
}

type backupVaultArgs struct {
	// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
	// Default value is `WITHIN_ORGANIZATION`.
	// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
	AccessRestriction *string `pulumi:"accessRestriction"`
	// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
	AllowMissing *bool `pulumi:"allowMissing"`
	// Optional. User annotations. See https://google.aip.dev/128#annotations
	// Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
	BackupMinimumEnforcedRetentionDuration string `pulumi:"backupMinimumEnforcedRetentionDuration"`
	// Required. ID of the requesting object.
	//
	// ***
	BackupVaultId string `pulumi:"backupVaultId"`
	// Optional. The description of the BackupVault instance (2048 characters or less).
	Description *string `pulumi:"description"`
	// Optional. Time after which the BackupVault resource is locked.
	EffectiveTime *string `pulumi:"effectiveTime"`
	// (Optional, Deprecated)
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	//
	// > **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	//
	// Deprecated: `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	ForceDelete *bool `pulumi:"forceDelete"`
	// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
	// the restriction against conflicting retention periods. This conflict may occur when the
	// expiration schedule defined by the associated backup plan is shorter than the minimum
	// retention set by the backup vault.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	IgnoreBackupPlanReferences *bool `pulumi:"ignoreBackupPlanReferences"`
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	IgnoreInactiveDatasources *bool `pulumi:"ignoreInactiveDatasources"`
	// Optional. Resource labels to represent user provided metadata.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The GCP location for the backup vault.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a BackupVault resource.
type BackupVaultArgs struct {
	// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
	// Default value is `WITHIN_ORGANIZATION`.
	// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
	AccessRestriction pulumi.StringPtrInput
	// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
	AllowMissing pulumi.BoolPtrInput
	// Optional. User annotations. See https://google.aip.dev/128#annotations
	// Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
	BackupMinimumEnforcedRetentionDuration pulumi.StringInput
	// Required. ID of the requesting object.
	//
	// ***
	BackupVaultId pulumi.StringInput
	// Optional. The description of the BackupVault instance (2048 characters or less).
	Description pulumi.StringPtrInput
	// Optional. Time after which the BackupVault resource is locked.
	EffectiveTime pulumi.StringPtrInput
	// (Optional, Deprecated)
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	//
	// > **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	//
	// Deprecated: `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
	ForceDelete pulumi.BoolPtrInput
	// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
	// the restriction against conflicting retention periods. This conflict may occur when the
	// expiration schedule defined by the associated backup plan is shorter than the minimum
	// retention set by the backup vault.
	ForceUpdate pulumi.BoolPtrInput
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance that is being referenced by an active backup plan.
	IgnoreBackupPlanReferences pulumi.BoolPtrInput
	// If set, the following restrictions against deletion of the backup vault instance can be overridden:
	// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
	IgnoreInactiveDatasources pulumi.BoolPtrInput
	// Optional. Resource labels to represent user provided metadata.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The GCP location for the backup vault.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (BackupVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupVaultArgs)(nil)).Elem()
}

type BackupVaultInput interface {
	pulumi.Input

	ToBackupVaultOutput() BackupVaultOutput
	ToBackupVaultOutputWithContext(ctx context.Context) BackupVaultOutput
}

func (*BackupVault) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupVault)(nil)).Elem()
}

func (i *BackupVault) ToBackupVaultOutput() BackupVaultOutput {
	return i.ToBackupVaultOutputWithContext(context.Background())
}

func (i *BackupVault) ToBackupVaultOutputWithContext(ctx context.Context) BackupVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupVaultOutput)
}

// BackupVaultArrayInput is an input type that accepts BackupVaultArray and BackupVaultArrayOutput values.
// You can construct a concrete instance of `BackupVaultArrayInput` via:
//
//	BackupVaultArray{ BackupVaultArgs{...} }
type BackupVaultArrayInput interface {
	pulumi.Input

	ToBackupVaultArrayOutput() BackupVaultArrayOutput
	ToBackupVaultArrayOutputWithContext(context.Context) BackupVaultArrayOutput
}

type BackupVaultArray []BackupVaultInput

func (BackupVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupVault)(nil)).Elem()
}

func (i BackupVaultArray) ToBackupVaultArrayOutput() BackupVaultArrayOutput {
	return i.ToBackupVaultArrayOutputWithContext(context.Background())
}

func (i BackupVaultArray) ToBackupVaultArrayOutputWithContext(ctx context.Context) BackupVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupVaultArrayOutput)
}

// BackupVaultMapInput is an input type that accepts BackupVaultMap and BackupVaultMapOutput values.
// You can construct a concrete instance of `BackupVaultMapInput` via:
//
//	BackupVaultMap{ "key": BackupVaultArgs{...} }
type BackupVaultMapInput interface {
	pulumi.Input

	ToBackupVaultMapOutput() BackupVaultMapOutput
	ToBackupVaultMapOutputWithContext(context.Context) BackupVaultMapOutput
}

type BackupVaultMap map[string]BackupVaultInput

func (BackupVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupVault)(nil)).Elem()
}

func (i BackupVaultMap) ToBackupVaultMapOutput() BackupVaultMapOutput {
	return i.ToBackupVaultMapOutputWithContext(context.Background())
}

func (i BackupVaultMap) ToBackupVaultMapOutputWithContext(ctx context.Context) BackupVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupVaultMapOutput)
}

type BackupVaultOutput struct{ *pulumi.OutputState }

func (BackupVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupVault)(nil)).Elem()
}

func (o BackupVaultOutput) ToBackupVaultOutput() BackupVaultOutput {
	return o
}

func (o BackupVaultOutput) ToBackupVaultOutputWithContext(ctx context.Context) BackupVaultOutput {
	return o
}

// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
// Default value is `WITHIN_ORGANIZATION`.
// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
func (o BackupVaultOutput) AccessRestriction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringPtrOutput { return v.AccessRestriction }).(pulumi.StringPtrOutput)
}

// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
func (o BackupVaultOutput) AllowMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.BoolPtrOutput { return v.AllowMissing }).(pulumi.BoolPtrOutput)
}

// Optional. User annotations. See https://google.aip.dev/128#annotations
// Stores small amounts of arbitrary data.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o BackupVaultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Output only. The number of backups in this backup vault.
func (o BackupVaultOutput) BackupCount() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.BackupCount }).(pulumi.StringOutput)
}

// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
func (o BackupVaultOutput) BackupMinimumEnforcedRetentionDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.BackupMinimumEnforcedRetentionDuration }).(pulumi.StringOutput)
}

// Required. ID of the requesting object.
//
// ***
func (o BackupVaultOutput) BackupVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.BackupVaultId }).(pulumi.StringOutput)
}

// Output only. The time when the instance was created.
func (o BackupVaultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Output only. Set to true when there are no backups nested under this resource.
func (o BackupVaultOutput) Deletable() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.BoolOutput { return v.Deletable }).(pulumi.BoolOutput)
}

// Optional. The description of the BackupVault instance (2048 characters or less).
func (o BackupVaultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o BackupVaultOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o BackupVaultOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. Time after which the BackupVault resource is locked.
func (o BackupVaultOutput) EffectiveTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringPtrOutput { return v.EffectiveTime }).(pulumi.StringPtrOutput)
}

// Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
func (o BackupVaultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// (Optional, Deprecated)
// If set, the following restrictions against deletion of the backup vault instance can be overridden:
// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
// * deletion of a backup vault instance that is being referenced by an active backup plan.
//
// > **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
//
// Deprecated: `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
func (o BackupVaultOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
// the restriction against conflicting retention periods. This conflict may occur when the
// expiration schedule defined by the associated backup plan is shorter than the minimum
// retention set by the backup vault.
func (o BackupVaultOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.BoolPtrOutput { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// If set, the following restrictions against deletion of the backup vault instance can be overridden:
// * deletion of a backup vault instance that is being referenced by an active backup plan.
func (o BackupVaultOutput) IgnoreBackupPlanReferences() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.BoolPtrOutput { return v.IgnoreBackupPlanReferences }).(pulumi.BoolPtrOutput)
}

// If set, the following restrictions against deletion of the backup vault instance can be overridden:
// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
func (o BackupVaultOutput) IgnoreInactiveDatasources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.BoolPtrOutput { return v.IgnoreInactiveDatasources }).(pulumi.BoolPtrOutput)
}

// Optional. Resource labels to represent user provided metadata.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o BackupVaultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The GCP location for the backup vault.
func (o BackupVaultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Output only. Identifier. The resource name.
func (o BackupVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BackupVaultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o BackupVaultOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
func (o BackupVaultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Output only. The BackupVault resource instance state.
// Possible values:
// STATE_UNSPECIFIED
// CREATING
// ACTIVE
// DELETING
// ERROR
func (o BackupVaultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. Total size of the storage used by all backup resources.
func (o BackupVaultOutput) TotalStoredBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.TotalStoredBytes }).(pulumi.StringOutput)
}

// Output only. Output only Immutable after resource creation until resource deletion.
func (o BackupVaultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The time when the instance was updated.
func (o BackupVaultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVault) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type BackupVaultArrayOutput struct{ *pulumi.OutputState }

func (BackupVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupVault)(nil)).Elem()
}

func (o BackupVaultArrayOutput) ToBackupVaultArrayOutput() BackupVaultArrayOutput {
	return o
}

func (o BackupVaultArrayOutput) ToBackupVaultArrayOutputWithContext(ctx context.Context) BackupVaultArrayOutput {
	return o
}

func (o BackupVaultArrayOutput) Index(i pulumi.IntInput) BackupVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupVault {
		return vs[0].([]*BackupVault)[vs[1].(int)]
	}).(BackupVaultOutput)
}

type BackupVaultMapOutput struct{ *pulumi.OutputState }

func (BackupVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupVault)(nil)).Elem()
}

func (o BackupVaultMapOutput) ToBackupVaultMapOutput() BackupVaultMapOutput {
	return o
}

func (o BackupVaultMapOutput) ToBackupVaultMapOutputWithContext(ctx context.Context) BackupVaultMapOutput {
	return o
}

func (o BackupVaultMapOutput) MapIndex(k pulumi.StringInput) BackupVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupVault {
		return vs[0].(map[string]*BackupVault)[vs[1].(string)]
	}).(BackupVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupVaultInput)(nil)).Elem(), &BackupVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupVaultArrayInput)(nil)).Elem(), BackupVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupVaultMapInput)(nil)).Elem(), BackupVaultMap{})
	pulumi.RegisterOutputType(BackupVaultOutput{})
	pulumi.RegisterOutputType(BackupVaultArrayOutput{})
	pulumi.RegisterOutputType(BackupVaultMapOutput{})
}
