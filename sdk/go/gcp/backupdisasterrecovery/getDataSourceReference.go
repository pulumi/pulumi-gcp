// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backupdisasterrecovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a specific Backup and DR data source reference.
func GetDataSourceReference(ctx *pulumi.Context, args *GetDataSourceReferenceArgs, opts ...pulumi.InvokeOption) (*GetDataSourceReferenceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDataSourceReferenceResult
	err := ctx.Invoke("gcp:backupdisasterrecovery/getDataSourceReference:getDataSourceReference", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataSourceReference.
type GetDataSourceReferenceArgs struct {
	// - (Required) The id of the data source reference.
	DataSourceReferenceId string `pulumi:"dataSourceReferenceId"`
	Location              string `pulumi:"location"`
	// - (Optional) The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getDataSourceReference.
type GetDataSourceReferenceResult struct {
	BackupConfigState     string `pulumi:"backupConfigState"`
	BackupCount           int    `pulumi:"backupCount"`
	DataSource            string `pulumi:"dataSource"`
	DataSourceReferenceId string `pulumi:"dataSourceReferenceId"`
	GcpResourceName       string `pulumi:"gcpResourceName"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string `pulumi:"id"`
	LastBackupState          string `pulumi:"lastBackupState"`
	LastSuccessfulBackupTime string `pulumi:"lastSuccessfulBackupTime"`
	Location                 string `pulumi:"location"`
	Name                     string `pulumi:"name"`
	Project                  string `pulumi:"project"`
	ResourceType             string `pulumi:"resourceType"`
}

func GetDataSourceReferenceOutput(ctx *pulumi.Context, args GetDataSourceReferenceOutputArgs, opts ...pulumi.InvokeOption) GetDataSourceReferenceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDataSourceReferenceResultOutput, error) {
			args := v.(GetDataSourceReferenceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:backupdisasterrecovery/getDataSourceReference:getDataSourceReference", args, GetDataSourceReferenceResultOutput{}, options).(GetDataSourceReferenceResultOutput), nil
		}).(GetDataSourceReferenceResultOutput)
}

// A collection of arguments for invoking getDataSourceReference.
type GetDataSourceReferenceOutputArgs struct {
	// - (Required) The id of the data source reference.
	DataSourceReferenceId pulumi.StringInput `pulumi:"dataSourceReferenceId"`
	Location              pulumi.StringInput `pulumi:"location"`
	// - (Optional) The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetDataSourceReferenceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSourceReferenceArgs)(nil)).Elem()
}

// A collection of values returned by getDataSourceReference.
type GetDataSourceReferenceResultOutput struct{ *pulumi.OutputState }

func (GetDataSourceReferenceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSourceReferenceResult)(nil)).Elem()
}

func (o GetDataSourceReferenceResultOutput) ToGetDataSourceReferenceResultOutput() GetDataSourceReferenceResultOutput {
	return o
}

func (o GetDataSourceReferenceResultOutput) ToGetDataSourceReferenceResultOutputWithContext(ctx context.Context) GetDataSourceReferenceResultOutput {
	return o
}

func (o GetDataSourceReferenceResultOutput) BackupConfigState() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.BackupConfigState }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) BackupCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) int { return v.BackupCount }).(pulumi.IntOutput)
}

func (o GetDataSourceReferenceResultOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.DataSource }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) DataSourceReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.DataSourceReferenceId }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) GcpResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.GcpResourceName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDataSourceReferenceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) LastBackupState() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.LastBackupState }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) LastSuccessfulBackupTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.LastSuccessfulBackupTime }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetDataSourceReferenceResultOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceReferenceResult) string { return v.ResourceType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDataSourceReferenceResultOutput{})
}
