// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accesscontextmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a single EgressPolicy in the spec (dry-run) configuration for a service perimeter.
// EgressPolicies match requests based on egressFrom and egressTo stanzas.
// For an EgressPolicy to match, both egressFrom and egressTo stanzas must be matched.
// If an EgressPolicy matches a request, the request is allowed to span the ServicePerimeter
// boundary. For example, an EgressPolicy can be used to allow VMs on networks
// within the ServicePerimeter to access a defined set of projects outside the
// perimeter in certain contexts (e.g. to read data from a Cloud Storage bucket
// or query against a BigQuery dataset).
//
// > **Note:** By default, updates to this resource will remove the EgressPolicy from the
// from the perimeter and add it back in a non-atomic manner. To ensure that the new EgressPolicy
// is added before the old one is removed, add a `lifecycle` block with `createBeforeDestroy = true` to this resource.
// **Note:** If this resource is used alongside a `accesscontextmanager.ServicePerimeter` resource,
// the service perimeter resource must have a `lifecycle` block with `ignoreChanges = [spec[0].egress_policies]` so
// they don't fight over which egress rules should be in the policy.
//
// To get more information about ServicePerimeterDryRunEgressPolicy, see:
//
// * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#egresspolicy)
// * How-to Guides
//   - [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)
//
// ## Example Usage
type ServicePerimeterDryRunEgressPolicy struct {
	pulumi.CustomResourceState

	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringOutput `pulumi:"accessPolicyId"`
	// Defines conditions on the source of a request causing this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressFrom ServicePerimeterDryRunEgressPolicyEgressFromPtrOutput `pulumi:"egressFrom"`
	// Defines the conditions on the `ApiOperation` and destination resources that
	// cause this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressTo ServicePerimeterDryRunEgressPolicyEgressToPtrOutput `pulumi:"egressTo"`
	// The perimeter etag is internally used to prevent overwriting the list of policies on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of policies. The policy defined in this resource is added or removed from that list, and then this etag is sent with the PATCH call along with the updated policies.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringOutput `pulumi:"perimeter"`
	// Human readable title. Must be unique within the perimeter. Does not affect behavior.
	Title pulumi.StringPtrOutput `pulumi:"title"`
}

// NewServicePerimeterDryRunEgressPolicy registers a new resource with the given unique name, arguments, and options.
func NewServicePerimeterDryRunEgressPolicy(ctx *pulumi.Context,
	name string, args *ServicePerimeterDryRunEgressPolicyArgs, opts ...pulumi.ResourceOption) (*ServicePerimeterDryRunEgressPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Perimeter == nil {
		return nil, errors.New("invalid value for required argument 'Perimeter'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServicePerimeterDryRunEgressPolicy
	err := ctx.RegisterResource("gcp:accesscontextmanager/servicePerimeterDryRunEgressPolicy:ServicePerimeterDryRunEgressPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePerimeterDryRunEgressPolicy gets an existing ServicePerimeterDryRunEgressPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePerimeterDryRunEgressPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePerimeterDryRunEgressPolicyState, opts ...pulumi.ResourceOption) (*ServicePerimeterDryRunEgressPolicy, error) {
	var resource ServicePerimeterDryRunEgressPolicy
	err := ctx.ReadResource("gcp:accesscontextmanager/servicePerimeterDryRunEgressPolicy:ServicePerimeterDryRunEgressPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePerimeterDryRunEgressPolicy resources.
type servicePerimeterDryRunEgressPolicyState struct {
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId *string `pulumi:"accessPolicyId"`
	// Defines conditions on the source of a request causing this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressFrom *ServicePerimeterDryRunEgressPolicyEgressFrom `pulumi:"egressFrom"`
	// Defines the conditions on the `ApiOperation` and destination resources that
	// cause this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressTo *ServicePerimeterDryRunEgressPolicyEgressTo `pulumi:"egressTo"`
	// The perimeter etag is internally used to prevent overwriting the list of policies on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of policies. The policy defined in this resource is added or removed from that list, and then this etag is sent with the PATCH call along with the updated policies.
	Etag *string `pulumi:"etag"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter *string `pulumi:"perimeter"`
	// Human readable title. Must be unique within the perimeter. Does not affect behavior.
	Title *string `pulumi:"title"`
}

type ServicePerimeterDryRunEgressPolicyState struct {
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringPtrInput
	// Defines conditions on the source of a request causing this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressFrom ServicePerimeterDryRunEgressPolicyEgressFromPtrInput
	// Defines the conditions on the `ApiOperation` and destination resources that
	// cause this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressTo ServicePerimeterDryRunEgressPolicyEgressToPtrInput
	// The perimeter etag is internally used to prevent overwriting the list of policies on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of policies. The policy defined in this resource is added or removed from that list, and then this etag is sent with the PATCH call along with the updated policies.
	Etag pulumi.StringPtrInput
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringPtrInput
	// Human readable title. Must be unique within the perimeter. Does not affect behavior.
	Title pulumi.StringPtrInput
}

func (ServicePerimeterDryRunEgressPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePerimeterDryRunEgressPolicyState)(nil)).Elem()
}

type servicePerimeterDryRunEgressPolicyArgs struct {
	// Defines conditions on the source of a request causing this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressFrom *ServicePerimeterDryRunEgressPolicyEgressFrom `pulumi:"egressFrom"`
	// Defines the conditions on the `ApiOperation` and destination resources that
	// cause this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressTo *ServicePerimeterDryRunEgressPolicyEgressTo `pulumi:"egressTo"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter string `pulumi:"perimeter"`
	// Human readable title. Must be unique within the perimeter. Does not affect behavior.
	Title *string `pulumi:"title"`
}

// The set of arguments for constructing a ServicePerimeterDryRunEgressPolicy resource.
type ServicePerimeterDryRunEgressPolicyArgs struct {
	// Defines conditions on the source of a request causing this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressFrom ServicePerimeterDryRunEgressPolicyEgressFromPtrInput
	// Defines the conditions on the `ApiOperation` and destination resources that
	// cause this `EgressPolicy` to apply.
	// Structure is documented below.
	EgressTo ServicePerimeterDryRunEgressPolicyEgressToPtrInput
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringInput
	// Human readable title. Must be unique within the perimeter. Does not affect behavior.
	Title pulumi.StringPtrInput
}

func (ServicePerimeterDryRunEgressPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePerimeterDryRunEgressPolicyArgs)(nil)).Elem()
}

type ServicePerimeterDryRunEgressPolicyInput interface {
	pulumi.Input

	ToServicePerimeterDryRunEgressPolicyOutput() ServicePerimeterDryRunEgressPolicyOutput
	ToServicePerimeterDryRunEgressPolicyOutputWithContext(ctx context.Context) ServicePerimeterDryRunEgressPolicyOutput
}

func (*ServicePerimeterDryRunEgressPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePerimeterDryRunEgressPolicy)(nil)).Elem()
}

func (i *ServicePerimeterDryRunEgressPolicy) ToServicePerimeterDryRunEgressPolicyOutput() ServicePerimeterDryRunEgressPolicyOutput {
	return i.ToServicePerimeterDryRunEgressPolicyOutputWithContext(context.Background())
}

func (i *ServicePerimeterDryRunEgressPolicy) ToServicePerimeterDryRunEgressPolicyOutputWithContext(ctx context.Context) ServicePerimeterDryRunEgressPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunEgressPolicyOutput)
}

// ServicePerimeterDryRunEgressPolicyArrayInput is an input type that accepts ServicePerimeterDryRunEgressPolicyArray and ServicePerimeterDryRunEgressPolicyArrayOutput values.
// You can construct a concrete instance of `ServicePerimeterDryRunEgressPolicyArrayInput` via:
//
//	ServicePerimeterDryRunEgressPolicyArray{ ServicePerimeterDryRunEgressPolicyArgs{...} }
type ServicePerimeterDryRunEgressPolicyArrayInput interface {
	pulumi.Input

	ToServicePerimeterDryRunEgressPolicyArrayOutput() ServicePerimeterDryRunEgressPolicyArrayOutput
	ToServicePerimeterDryRunEgressPolicyArrayOutputWithContext(context.Context) ServicePerimeterDryRunEgressPolicyArrayOutput
}

type ServicePerimeterDryRunEgressPolicyArray []ServicePerimeterDryRunEgressPolicyInput

func (ServicePerimeterDryRunEgressPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePerimeterDryRunEgressPolicy)(nil)).Elem()
}

func (i ServicePerimeterDryRunEgressPolicyArray) ToServicePerimeterDryRunEgressPolicyArrayOutput() ServicePerimeterDryRunEgressPolicyArrayOutput {
	return i.ToServicePerimeterDryRunEgressPolicyArrayOutputWithContext(context.Background())
}

func (i ServicePerimeterDryRunEgressPolicyArray) ToServicePerimeterDryRunEgressPolicyArrayOutputWithContext(ctx context.Context) ServicePerimeterDryRunEgressPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunEgressPolicyArrayOutput)
}

// ServicePerimeterDryRunEgressPolicyMapInput is an input type that accepts ServicePerimeterDryRunEgressPolicyMap and ServicePerimeterDryRunEgressPolicyMapOutput values.
// You can construct a concrete instance of `ServicePerimeterDryRunEgressPolicyMapInput` via:
//
//	ServicePerimeterDryRunEgressPolicyMap{ "key": ServicePerimeterDryRunEgressPolicyArgs{...} }
type ServicePerimeterDryRunEgressPolicyMapInput interface {
	pulumi.Input

	ToServicePerimeterDryRunEgressPolicyMapOutput() ServicePerimeterDryRunEgressPolicyMapOutput
	ToServicePerimeterDryRunEgressPolicyMapOutputWithContext(context.Context) ServicePerimeterDryRunEgressPolicyMapOutput
}

type ServicePerimeterDryRunEgressPolicyMap map[string]ServicePerimeterDryRunEgressPolicyInput

func (ServicePerimeterDryRunEgressPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePerimeterDryRunEgressPolicy)(nil)).Elem()
}

func (i ServicePerimeterDryRunEgressPolicyMap) ToServicePerimeterDryRunEgressPolicyMapOutput() ServicePerimeterDryRunEgressPolicyMapOutput {
	return i.ToServicePerimeterDryRunEgressPolicyMapOutputWithContext(context.Background())
}

func (i ServicePerimeterDryRunEgressPolicyMap) ToServicePerimeterDryRunEgressPolicyMapOutputWithContext(ctx context.Context) ServicePerimeterDryRunEgressPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunEgressPolicyMapOutput)
}

type ServicePerimeterDryRunEgressPolicyOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunEgressPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePerimeterDryRunEgressPolicy)(nil)).Elem()
}

func (o ServicePerimeterDryRunEgressPolicyOutput) ToServicePerimeterDryRunEgressPolicyOutput() ServicePerimeterDryRunEgressPolicyOutput {
	return o
}

func (o ServicePerimeterDryRunEgressPolicyOutput) ToServicePerimeterDryRunEgressPolicyOutputWithContext(ctx context.Context) ServicePerimeterDryRunEgressPolicyOutput {
	return o
}

// The name of the Access Policy this resource belongs to.
func (o ServicePerimeterDryRunEgressPolicyOutput) AccessPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunEgressPolicy) pulumi.StringOutput { return v.AccessPolicyId }).(pulumi.StringOutput)
}

// Defines conditions on the source of a request causing this `EgressPolicy` to apply.
// Structure is documented below.
func (o ServicePerimeterDryRunEgressPolicyOutput) EgressFrom() ServicePerimeterDryRunEgressPolicyEgressFromPtrOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunEgressPolicy) ServicePerimeterDryRunEgressPolicyEgressFromPtrOutput {
		return v.EgressFrom
	}).(ServicePerimeterDryRunEgressPolicyEgressFromPtrOutput)
}

// Defines the conditions on the `ApiOperation` and destination resources that
// cause this `EgressPolicy` to apply.
// Structure is documented below.
func (o ServicePerimeterDryRunEgressPolicyOutput) EgressTo() ServicePerimeterDryRunEgressPolicyEgressToPtrOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunEgressPolicy) ServicePerimeterDryRunEgressPolicyEgressToPtrOutput {
		return v.EgressTo
	}).(ServicePerimeterDryRunEgressPolicyEgressToPtrOutput)
}

// The perimeter etag is internally used to prevent overwriting the list of policies on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of policies. The policy defined in this resource is added or removed from that list, and then this etag is sent with the PATCH call along with the updated policies.
func (o ServicePerimeterDryRunEgressPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunEgressPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the Service Perimeter to add this resource to.
func (o ServicePerimeterDryRunEgressPolicyOutput) Perimeter() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunEgressPolicy) pulumi.StringOutput { return v.Perimeter }).(pulumi.StringOutput)
}

// Human readable title. Must be unique within the perimeter. Does not affect behavior.
func (o ServicePerimeterDryRunEgressPolicyOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunEgressPolicy) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

type ServicePerimeterDryRunEgressPolicyArrayOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunEgressPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePerimeterDryRunEgressPolicy)(nil)).Elem()
}

func (o ServicePerimeterDryRunEgressPolicyArrayOutput) ToServicePerimeterDryRunEgressPolicyArrayOutput() ServicePerimeterDryRunEgressPolicyArrayOutput {
	return o
}

func (o ServicePerimeterDryRunEgressPolicyArrayOutput) ToServicePerimeterDryRunEgressPolicyArrayOutputWithContext(ctx context.Context) ServicePerimeterDryRunEgressPolicyArrayOutput {
	return o
}

func (o ServicePerimeterDryRunEgressPolicyArrayOutput) Index(i pulumi.IntInput) ServicePerimeterDryRunEgressPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServicePerimeterDryRunEgressPolicy {
		return vs[0].([]*ServicePerimeterDryRunEgressPolicy)[vs[1].(int)]
	}).(ServicePerimeterDryRunEgressPolicyOutput)
}

type ServicePerimeterDryRunEgressPolicyMapOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunEgressPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePerimeterDryRunEgressPolicy)(nil)).Elem()
}

func (o ServicePerimeterDryRunEgressPolicyMapOutput) ToServicePerimeterDryRunEgressPolicyMapOutput() ServicePerimeterDryRunEgressPolicyMapOutput {
	return o
}

func (o ServicePerimeterDryRunEgressPolicyMapOutput) ToServicePerimeterDryRunEgressPolicyMapOutputWithContext(ctx context.Context) ServicePerimeterDryRunEgressPolicyMapOutput {
	return o
}

func (o ServicePerimeterDryRunEgressPolicyMapOutput) MapIndex(k pulumi.StringInput) ServicePerimeterDryRunEgressPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServicePerimeterDryRunEgressPolicy {
		return vs[0].(map[string]*ServicePerimeterDryRunEgressPolicy)[vs[1].(string)]
	}).(ServicePerimeterDryRunEgressPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunEgressPolicyInput)(nil)).Elem(), &ServicePerimeterDryRunEgressPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunEgressPolicyArrayInput)(nil)).Elem(), ServicePerimeterDryRunEgressPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunEgressPolicyMapInput)(nil)).Elem(), ServicePerimeterDryRunEgressPolicyMap{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunEgressPolicyOutput{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunEgressPolicyArrayOutput{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunEgressPolicyMapOutput{})
}
