// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package accesscontextmanager

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// An AccessLevel is a label that can be applied to requests to GCP services,
// along with a list of requirements necessary for the label to be applied.
// 
// 
// To get more information about AccessLevel, see:
// 
// * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)
// * How-to Guides
//     * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)
type AccessLevel struct {
	s *pulumi.ResourceState
}

// NewAccessLevel registers a new resource with the given unique name, arguments, and options.
func NewAccessLevel(ctx *pulumi.Context,
	name string, args *AccessLevelArgs, opts ...pulumi.ResourceOpt) (*AccessLevel, error) {
	if args == nil || args.Parent == nil {
		return nil, errors.New("missing required argument 'Parent'")
	}
	if args == nil || args.Title == nil {
		return nil, errors.New("missing required argument 'Title'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["basic"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["parent"] = nil
		inputs["title"] = nil
	} else {
		inputs["basic"] = args.Basic
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["parent"] = args.Parent
		inputs["title"] = args.Title
	}
	s, err := ctx.RegisterResource("gcp:accesscontextmanager/accessLevel:AccessLevel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessLevel{s: s}, nil
}

// GetAccessLevel gets an existing AccessLevel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessLevel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccessLevelState, opts ...pulumi.ResourceOpt) (*AccessLevel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["basic"] = state.Basic
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["parent"] = state.Parent
		inputs["title"] = state.Title
	}
	s, err := ctx.ReadResource("gcp:accesscontextmanager/accessLevel:AccessLevel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessLevel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccessLevel) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccessLevel) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *AccessLevel) Basic() *pulumi.Output {
	return r.s.State["basic"]
}

func (r *AccessLevel) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *AccessLevel) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *AccessLevel) Parent() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["parent"])
}

func (r *AccessLevel) Title() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["title"])
}

// Input properties used for looking up and filtering AccessLevel resources.
type AccessLevelState struct {
	Basic interface{}
	Description interface{}
	Name interface{}
	Parent interface{}
	Title interface{}
}

// The set of arguments for constructing a AccessLevel resource.
type AccessLevelArgs struct {
	Basic interface{}
	Description interface{}
	Name interface{}
	Parent interface{}
	Title interface{}
}
