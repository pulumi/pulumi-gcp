// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accesscontextmanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy. Each of these resources serves a different use case:
//
// * `accesscontextmanager.AccessPolicyIamPolicy`: Authoritative. Sets the IAM policy for the accesspolicy and replaces any existing policy already attached.
// * `accesscontextmanager.AccessPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the accesspolicy are preserved.
// * `accesscontextmanager.AccessPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the accesspolicy are preserved.
//
// > **Note:** `accesscontextmanager.AccessPolicyIamPolicy` **cannot** be used in conjunction with `accesscontextmanager.AccessPolicyIamBinding` and `accesscontextmanager.AccessPolicyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `accesscontextmanager.AccessPolicyIamBinding` resources **can be** used in conjunction with `accesscontextmanager.AccessPolicyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_access\_context\_manager\_access\_policy\_iam\_policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/accesscontextmanager"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
// 			Bindings: []organizations.GetIAMPolicyBinding{
// 				organizations.GetIAMPolicyBinding{
// 					Role: "roles/accesscontextmanager.policyAdmin",
// 					Members: []string{
// 						"user:jane@example.com",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = accesscontextmanager.NewAccessPolicyIamPolicy(ctx, "policy", &accesscontextmanager.AccessPolicyIamPolicyArgs{
// 			PolicyData: pulumi.String(admin.PolicyData),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_access\_context\_manager\_access\_policy\_iam\_binding
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/accesscontextmanager"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := accesscontextmanager.NewAccessPolicyIamBinding(ctx, "binding", &accesscontextmanager.AccessPolicyIamBindingArgs{
// 			Role: pulumi.String("roles/accesscontextmanager.policyAdmin"),
// 			Members: pulumi.StringArray{
// 				pulumi.String("user:jane@example.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_access\_context\_manager\_access\_policy\_iam\_member
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/accesscontextmanager"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := accesscontextmanager.NewAccessPolicyIamMember(ctx, "member", &accesscontextmanager.AccessPolicyIamMemberArgs{
// 			Role:   pulumi.String("roles/accesscontextmanager.policyAdmin"),
// 			Member: pulumi.String("user:jane@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* accessPolicies/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Access Context Manager (VPC Service Controls) accesspolicy IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember editor accessPolicies/{{access_policy}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AccessPolicyIamMember struct {
	pulumi.CustomResourceState

	Condition AccessPolicyIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The role that should be applied. Only one
	// `accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewAccessPolicyIamMember registers a new resource with the given unique name, arguments, and options.
func NewAccessPolicyIamMember(ctx *pulumi.Context,
	name string, args *AccessPolicyIamMemberArgs, opts ...pulumi.ResourceOption) (*AccessPolicyIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AccessPolicyIamMember
	err := ctx.RegisterResource("gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPolicyIamMember gets an existing AccessPolicyIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPolicyIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPolicyIamMemberState, opts ...pulumi.ResourceOption) (*AccessPolicyIamMember, error) {
	var resource AccessPolicyIamMember
	err := ctx.ReadResource("gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPolicyIamMember resources.
type accessPolicyIamMemberState struct {
	Condition *AccessPolicyIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The role that should be applied. Only one
	// `accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type AccessPolicyIamMemberState struct {
	Condition AccessPolicyIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (AccessPolicyIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyIamMemberState)(nil)).Elem()
}

type accessPolicyIamMemberArgs struct {
	Condition *AccessPolicyIamMemberCondition `pulumi:"condition"`
	Member    string                          `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The role that should be applied. Only one
	// `accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a AccessPolicyIamMember resource.
type AccessPolicyIamMemberArgs struct {
	Condition AccessPolicyIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (AccessPolicyIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyIamMemberArgs)(nil)).Elem()
}

type AccessPolicyIamMemberInput interface {
	pulumi.Input

	ToAccessPolicyIamMemberOutput() AccessPolicyIamMemberOutput
	ToAccessPolicyIamMemberOutputWithContext(ctx context.Context) AccessPolicyIamMemberOutput
}

func (*AccessPolicyIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyIamMember)(nil)).Elem()
}

func (i *AccessPolicyIamMember) ToAccessPolicyIamMemberOutput() AccessPolicyIamMemberOutput {
	return i.ToAccessPolicyIamMemberOutputWithContext(context.Background())
}

func (i *AccessPolicyIamMember) ToAccessPolicyIamMemberOutputWithContext(ctx context.Context) AccessPolicyIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyIamMemberOutput)
}

// AccessPolicyIamMemberArrayInput is an input type that accepts AccessPolicyIamMemberArray and AccessPolicyIamMemberArrayOutput values.
// You can construct a concrete instance of `AccessPolicyIamMemberArrayInput` via:
//
//          AccessPolicyIamMemberArray{ AccessPolicyIamMemberArgs{...} }
type AccessPolicyIamMemberArrayInput interface {
	pulumi.Input

	ToAccessPolicyIamMemberArrayOutput() AccessPolicyIamMemberArrayOutput
	ToAccessPolicyIamMemberArrayOutputWithContext(context.Context) AccessPolicyIamMemberArrayOutput
}

type AccessPolicyIamMemberArray []AccessPolicyIamMemberInput

func (AccessPolicyIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPolicyIamMember)(nil)).Elem()
}

func (i AccessPolicyIamMemberArray) ToAccessPolicyIamMemberArrayOutput() AccessPolicyIamMemberArrayOutput {
	return i.ToAccessPolicyIamMemberArrayOutputWithContext(context.Background())
}

func (i AccessPolicyIamMemberArray) ToAccessPolicyIamMemberArrayOutputWithContext(ctx context.Context) AccessPolicyIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyIamMemberArrayOutput)
}

// AccessPolicyIamMemberMapInput is an input type that accepts AccessPolicyIamMemberMap and AccessPolicyIamMemberMapOutput values.
// You can construct a concrete instance of `AccessPolicyIamMemberMapInput` via:
//
//          AccessPolicyIamMemberMap{ "key": AccessPolicyIamMemberArgs{...} }
type AccessPolicyIamMemberMapInput interface {
	pulumi.Input

	ToAccessPolicyIamMemberMapOutput() AccessPolicyIamMemberMapOutput
	ToAccessPolicyIamMemberMapOutputWithContext(context.Context) AccessPolicyIamMemberMapOutput
}

type AccessPolicyIamMemberMap map[string]AccessPolicyIamMemberInput

func (AccessPolicyIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPolicyIamMember)(nil)).Elem()
}

func (i AccessPolicyIamMemberMap) ToAccessPolicyIamMemberMapOutput() AccessPolicyIamMemberMapOutput {
	return i.ToAccessPolicyIamMemberMapOutputWithContext(context.Background())
}

func (i AccessPolicyIamMemberMap) ToAccessPolicyIamMemberMapOutputWithContext(ctx context.Context) AccessPolicyIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyIamMemberMapOutput)
}

type AccessPolicyIamMemberOutput struct{ *pulumi.OutputState }

func (AccessPolicyIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyIamMember)(nil)).Elem()
}

func (o AccessPolicyIamMemberOutput) ToAccessPolicyIamMemberOutput() AccessPolicyIamMemberOutput {
	return o
}

func (o AccessPolicyIamMemberOutput) ToAccessPolicyIamMemberOutputWithContext(ctx context.Context) AccessPolicyIamMemberOutput {
	return o
}

func (o AccessPolicyIamMemberOutput) Condition() AccessPolicyIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *AccessPolicyIamMember) AccessPolicyIamMemberConditionPtrOutput { return v.Condition }).(AccessPolicyIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o AccessPolicyIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AccessPolicyIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AccessPolicyIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o AccessPolicyIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AccessPolicyIamMemberArrayOutput struct{ *pulumi.OutputState }

func (AccessPolicyIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPolicyIamMember)(nil)).Elem()
}

func (o AccessPolicyIamMemberArrayOutput) ToAccessPolicyIamMemberArrayOutput() AccessPolicyIamMemberArrayOutput {
	return o
}

func (o AccessPolicyIamMemberArrayOutput) ToAccessPolicyIamMemberArrayOutputWithContext(ctx context.Context) AccessPolicyIamMemberArrayOutput {
	return o
}

func (o AccessPolicyIamMemberArrayOutput) Index(i pulumi.IntInput) AccessPolicyIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessPolicyIamMember {
		return vs[0].([]*AccessPolicyIamMember)[vs[1].(int)]
	}).(AccessPolicyIamMemberOutput)
}

type AccessPolicyIamMemberMapOutput struct{ *pulumi.OutputState }

func (AccessPolicyIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPolicyIamMember)(nil)).Elem()
}

func (o AccessPolicyIamMemberMapOutput) ToAccessPolicyIamMemberMapOutput() AccessPolicyIamMemberMapOutput {
	return o
}

func (o AccessPolicyIamMemberMapOutput) ToAccessPolicyIamMemberMapOutputWithContext(ctx context.Context) AccessPolicyIamMemberMapOutput {
	return o
}

func (o AccessPolicyIamMemberMapOutput) MapIndex(k pulumi.StringInput) AccessPolicyIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessPolicyIamMember {
		return vs[0].(map[string]*AccessPolicyIamMember)[vs[1].(string)]
	}).(AccessPolicyIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyIamMemberInput)(nil)).Elem(), &AccessPolicyIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyIamMemberArrayInput)(nil)).Elem(), AccessPolicyIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyIamMemberMapInput)(nil)).Elem(), AccessPolicyIamMemberMap{})
	pulumi.RegisterOutputType(AccessPolicyIamMemberOutput{})
	pulumi.RegisterOutputType(AccessPolicyIamMemberArrayOutput{})
	pulumi.RegisterOutputType(AccessPolicyIamMemberMapOutput{})
}
