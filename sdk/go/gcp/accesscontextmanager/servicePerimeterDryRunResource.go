// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accesscontextmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows configuring a single GCP resource that should be inside of the `spec` block of a dry run service perimeter.
// This resource is intended to be used in cases where it is not possible to compile a full list
// of projects to include in a `accesscontextmanager.ServicePerimeter` resource,
// to enable them to be added separately.
// If your perimeter is NOT in dry-run mode use `accesscontextmanager.ServicePerimeterResource` instead.
//
// > **Note:** If this resource is used alongside a `accesscontextmanager.ServicePerimeter` resource,
// the service perimeter resource must have a `lifecycle` block with `ignoreChanges = [spec[0].resources]` so
// they don't fight over which resources should be in the policy.
//
// To get more information about ServicePerimeterDryRunResource, see:
//
// * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
// * How-to Guides
//   - [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)
//
// > **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
// you must specify a `billingProject` and set `userProjectOverride` to true
// in the provider configuration. Otherwise the ACM API will return a 403 error.
// Your account must have the `serviceusage.services.use` permission on the
// `billingProject` you defined.
//
// ## Example Usage
//
// ### Access Context Manager Service Perimeter Dry Run Resource Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			access_policy, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
//				Parent: pulumi.String("organizations/123456789"),
//				Title:  pulumi.String("my policy"),
//			})
//			if err != nil {
//				return err
//			}
//			service_perimeter_dry_run_resourceServicePerimeter, err := accesscontextmanager.NewServicePerimeter(ctx, "service-perimeter-dry-run-resource", &accesscontextmanager.ServicePerimeterArgs{
//				Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("accessPolicies/%v", name), nil
//				}).(pulumi.StringOutput),
//				Name: access_policy.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("accessPolicies/%v/servicePerimeters/restrict_all", name), nil
//				}).(pulumi.StringOutput),
//				Title: pulumi.String("restrict_all"),
//				Spec: &accesscontextmanager.ServicePerimeterSpecArgs{
//					RestrictedServices: pulumi.StringArray{
//						pulumi.String("storage.googleapis.com"),
//					},
//				},
//				UseExplicitDryRunSpec: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = accesscontextmanager.NewServicePerimeterDryRunResource(ctx, "service-perimeter-dry-run-resource", &accesscontextmanager.ServicePerimeterDryRunResourceArgs{
//				PerimeterName: service_perimeter_dry_run_resourceServicePerimeter.Name,
//				Resource:      pulumi.String("projects/987654321"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ServicePerimeterDryRunResource can be imported using any of these accepted formats:
//
// * `{{perimeter_name}}/{{resource}}`
//
// When using the `pulumi import` command, ServicePerimeterDryRunResource can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource default {{perimeter_name}}/{{resource}}
// ```
type ServicePerimeterDryRunResource struct {
	pulumi.CustomResourceState

	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringOutput `pulumi:"accessPolicyId"`
	// The perimeter etag is internally used to prevent overwriting the list of perimeter resources on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of resources. The resource to add or remove is merged into that list and then this etag is sent with the PATCH call along with the updated resource list.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	PerimeterName pulumi.StringOutput `pulumi:"perimeterName"`
	// A GCP resource that is inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	Resource pulumi.StringOutput `pulumi:"resource"`
}

// NewServicePerimeterDryRunResource registers a new resource with the given unique name, arguments, and options.
func NewServicePerimeterDryRunResource(ctx *pulumi.Context,
	name string, args *ServicePerimeterDryRunResourceArgs, opts ...pulumi.ResourceOption) (*ServicePerimeterDryRunResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PerimeterName == nil {
		return nil, errors.New("invalid value for required argument 'PerimeterName'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServicePerimeterDryRunResource
	err := ctx.RegisterResource("gcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePerimeterDryRunResource gets an existing ServicePerimeterDryRunResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePerimeterDryRunResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePerimeterDryRunResourceState, opts ...pulumi.ResourceOption) (*ServicePerimeterDryRunResource, error) {
	var resource ServicePerimeterDryRunResource
	err := ctx.ReadResource("gcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePerimeterDryRunResource resources.
type servicePerimeterDryRunResourceState struct {
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId *string `pulumi:"accessPolicyId"`
	// The perimeter etag is internally used to prevent overwriting the list of perimeter resources on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of resources. The resource to add or remove is merged into that list and then this etag is sent with the PATCH call along with the updated resource list.
	Etag *string `pulumi:"etag"`
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	PerimeterName *string `pulumi:"perimeterName"`
	// A GCP resource that is inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	Resource *string `pulumi:"resource"`
}

type ServicePerimeterDryRunResourceState struct {
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringPtrInput
	// The perimeter etag is internally used to prevent overwriting the list of perimeter resources on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of resources. The resource to add or remove is merged into that list and then this etag is sent with the PATCH call along with the updated resource list.
	Etag pulumi.StringPtrInput
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	PerimeterName pulumi.StringPtrInput
	// A GCP resource that is inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	Resource pulumi.StringPtrInput
}

func (ServicePerimeterDryRunResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePerimeterDryRunResourceState)(nil)).Elem()
}

type servicePerimeterDryRunResourceArgs struct {
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	PerimeterName string `pulumi:"perimeterName"`
	// A GCP resource that is inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	Resource string `pulumi:"resource"`
}

// The set of arguments for constructing a ServicePerimeterDryRunResource resource.
type ServicePerimeterDryRunResourceArgs struct {
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	PerimeterName pulumi.StringInput
	// A GCP resource that is inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	Resource pulumi.StringInput
}

func (ServicePerimeterDryRunResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePerimeterDryRunResourceArgs)(nil)).Elem()
}

type ServicePerimeterDryRunResourceInput interface {
	pulumi.Input

	ToServicePerimeterDryRunResourceOutput() ServicePerimeterDryRunResourceOutput
	ToServicePerimeterDryRunResourceOutputWithContext(ctx context.Context) ServicePerimeterDryRunResourceOutput
}

func (*ServicePerimeterDryRunResource) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePerimeterDryRunResource)(nil)).Elem()
}

func (i *ServicePerimeterDryRunResource) ToServicePerimeterDryRunResourceOutput() ServicePerimeterDryRunResourceOutput {
	return i.ToServicePerimeterDryRunResourceOutputWithContext(context.Background())
}

func (i *ServicePerimeterDryRunResource) ToServicePerimeterDryRunResourceOutputWithContext(ctx context.Context) ServicePerimeterDryRunResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunResourceOutput)
}

// ServicePerimeterDryRunResourceArrayInput is an input type that accepts ServicePerimeterDryRunResourceArray and ServicePerimeterDryRunResourceArrayOutput values.
// You can construct a concrete instance of `ServicePerimeterDryRunResourceArrayInput` via:
//
//	ServicePerimeterDryRunResourceArray{ ServicePerimeterDryRunResourceArgs{...} }
type ServicePerimeterDryRunResourceArrayInput interface {
	pulumi.Input

	ToServicePerimeterDryRunResourceArrayOutput() ServicePerimeterDryRunResourceArrayOutput
	ToServicePerimeterDryRunResourceArrayOutputWithContext(context.Context) ServicePerimeterDryRunResourceArrayOutput
}

type ServicePerimeterDryRunResourceArray []ServicePerimeterDryRunResourceInput

func (ServicePerimeterDryRunResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePerimeterDryRunResource)(nil)).Elem()
}

func (i ServicePerimeterDryRunResourceArray) ToServicePerimeterDryRunResourceArrayOutput() ServicePerimeterDryRunResourceArrayOutput {
	return i.ToServicePerimeterDryRunResourceArrayOutputWithContext(context.Background())
}

func (i ServicePerimeterDryRunResourceArray) ToServicePerimeterDryRunResourceArrayOutputWithContext(ctx context.Context) ServicePerimeterDryRunResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunResourceArrayOutput)
}

// ServicePerimeterDryRunResourceMapInput is an input type that accepts ServicePerimeterDryRunResourceMap and ServicePerimeterDryRunResourceMapOutput values.
// You can construct a concrete instance of `ServicePerimeterDryRunResourceMapInput` via:
//
//	ServicePerimeterDryRunResourceMap{ "key": ServicePerimeterDryRunResourceArgs{...} }
type ServicePerimeterDryRunResourceMapInput interface {
	pulumi.Input

	ToServicePerimeterDryRunResourceMapOutput() ServicePerimeterDryRunResourceMapOutput
	ToServicePerimeterDryRunResourceMapOutputWithContext(context.Context) ServicePerimeterDryRunResourceMapOutput
}

type ServicePerimeterDryRunResourceMap map[string]ServicePerimeterDryRunResourceInput

func (ServicePerimeterDryRunResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePerimeterDryRunResource)(nil)).Elem()
}

func (i ServicePerimeterDryRunResourceMap) ToServicePerimeterDryRunResourceMapOutput() ServicePerimeterDryRunResourceMapOutput {
	return i.ToServicePerimeterDryRunResourceMapOutputWithContext(context.Background())
}

func (i ServicePerimeterDryRunResourceMap) ToServicePerimeterDryRunResourceMapOutputWithContext(ctx context.Context) ServicePerimeterDryRunResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunResourceMapOutput)
}

type ServicePerimeterDryRunResourceOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePerimeterDryRunResource)(nil)).Elem()
}

func (o ServicePerimeterDryRunResourceOutput) ToServicePerimeterDryRunResourceOutput() ServicePerimeterDryRunResourceOutput {
	return o
}

func (o ServicePerimeterDryRunResourceOutput) ToServicePerimeterDryRunResourceOutputWithContext(ctx context.Context) ServicePerimeterDryRunResourceOutput {
	return o
}

// The name of the Access Policy this resource belongs to.
func (o ServicePerimeterDryRunResourceOutput) AccessPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunResource) pulumi.StringOutput { return v.AccessPolicyId }).(pulumi.StringOutput)
}

// The perimeter etag is internally used to prevent overwriting the list of perimeter resources on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of resources. The resource to add or remove is merged into that list and then this etag is sent with the PATCH call along with the updated resource list.
func (o ServicePerimeterDryRunResourceOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunResource) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the Service Perimeter to add this resource to.
//
// ***
func (o ServicePerimeterDryRunResourceOutput) PerimeterName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunResource) pulumi.StringOutput { return v.PerimeterName }).(pulumi.StringOutput)
}

// A GCP resource that is inside of the service perimeter.
// Currently only projects are allowed.
// Format: projects/{project_number}
func (o ServicePerimeterDryRunResourceOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunResource) pulumi.StringOutput { return v.Resource }).(pulumi.StringOutput)
}

type ServicePerimeterDryRunResourceArrayOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePerimeterDryRunResource)(nil)).Elem()
}

func (o ServicePerimeterDryRunResourceArrayOutput) ToServicePerimeterDryRunResourceArrayOutput() ServicePerimeterDryRunResourceArrayOutput {
	return o
}

func (o ServicePerimeterDryRunResourceArrayOutput) ToServicePerimeterDryRunResourceArrayOutputWithContext(ctx context.Context) ServicePerimeterDryRunResourceArrayOutput {
	return o
}

func (o ServicePerimeterDryRunResourceArrayOutput) Index(i pulumi.IntInput) ServicePerimeterDryRunResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServicePerimeterDryRunResource {
		return vs[0].([]*ServicePerimeterDryRunResource)[vs[1].(int)]
	}).(ServicePerimeterDryRunResourceOutput)
}

type ServicePerimeterDryRunResourceMapOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePerimeterDryRunResource)(nil)).Elem()
}

func (o ServicePerimeterDryRunResourceMapOutput) ToServicePerimeterDryRunResourceMapOutput() ServicePerimeterDryRunResourceMapOutput {
	return o
}

func (o ServicePerimeterDryRunResourceMapOutput) ToServicePerimeterDryRunResourceMapOutputWithContext(ctx context.Context) ServicePerimeterDryRunResourceMapOutput {
	return o
}

func (o ServicePerimeterDryRunResourceMapOutput) MapIndex(k pulumi.StringInput) ServicePerimeterDryRunResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServicePerimeterDryRunResource {
		return vs[0].(map[string]*ServicePerimeterDryRunResource)[vs[1].(string)]
	}).(ServicePerimeterDryRunResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunResourceInput)(nil)).Elem(), &ServicePerimeterDryRunResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunResourceArrayInput)(nil)).Elem(), ServicePerimeterDryRunResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunResourceMapInput)(nil)).Elem(), ServicePerimeterDryRunResourceMap{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunResourceOutput{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunResourceArrayOutput{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunResourceMapOutput{})
}
