// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accesscontextmanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy. Each of these resources serves a different use case:
//
// * `accesscontextmanager.AccessPolicyIamPolicy`: Authoritative. Sets the IAM policy for the accesspolicy and replaces any existing policy already attached.
// * `accesscontextmanager.AccessPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the accesspolicy are preserved.
// * `accesscontextmanager.AccessPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the accesspolicy are preserved.
//
// > **Note:** `accesscontextmanager.AccessPolicyIamPolicy` **cannot** be used in conjunction with `accesscontextmanager.AccessPolicyIamBinding` and `accesscontextmanager.AccessPolicyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `accesscontextmanager.AccessPolicyIamBinding` resources **can be** used in conjunction with `accesscontextmanager.AccessPolicyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_access\_context\_manager\_access\_policy\_iam\_policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/accesscontextmanager"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
// 			Bindings: []organizations.GetIAMPolicyBinding{
// 				organizations.GetIAMPolicyBinding{
// 					Role: "roles/accesscontextmanager.policyAdmin",
// 					Members: []string{
// 						"user:jane@example.com",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = accesscontextmanager.NewAccessPolicyIamPolicy(ctx, "policy", &accesscontextmanager.AccessPolicyIamPolicyArgs{
// 			PolicyData: pulumi.String(admin.PolicyData),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_access\_context\_manager\_access\_policy\_iam\_binding
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/accesscontextmanager"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := accesscontextmanager.NewAccessPolicyIamBinding(ctx, "binding", &accesscontextmanager.AccessPolicyIamBindingArgs{
// 			Role: pulumi.String("roles/accesscontextmanager.policyAdmin"),
// 			Members: pulumi.StringArray{
// 				pulumi.String("user:jane@example.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_access\_context\_manager\_access\_policy\_iam\_member
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/accesscontextmanager"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := accesscontextmanager.NewAccessPolicyIamMember(ctx, "member", &accesscontextmanager.AccessPolicyIamMemberArgs{
// 			Role:   pulumi.String("roles/accesscontextmanager.policyAdmin"),
// 			Member: pulumi.String("user:jane@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* accessPolicies/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Access Context Manager (VPC Service Controls) accesspolicy IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy editor accessPolicies/{{access_policy}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AccessPolicyIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
}

// NewAccessPolicyIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessPolicyIamPolicy(ctx *pulumi.Context,
	name string, args *AccessPolicyIamPolicyArgs, opts ...pulumi.ResourceOption) (*AccessPolicyIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource AccessPolicyIamPolicy
	err := ctx.RegisterResource("gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPolicyIamPolicy gets an existing AccessPolicyIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPolicyIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPolicyIamPolicyState, opts ...pulumi.ResourceOption) (*AccessPolicyIamPolicy, error) {
	var resource AccessPolicyIamPolicy
	err := ctx.ReadResource("gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPolicyIamPolicy resources.
type accessPolicyIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
}

type AccessPolicyIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
}

func (AccessPolicyIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyIamPolicyState)(nil)).Elem()
}

type accessPolicyIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
}

// The set of arguments for constructing a AccessPolicyIamPolicy resource.
type AccessPolicyIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
}

func (AccessPolicyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyIamPolicyArgs)(nil)).Elem()
}

type AccessPolicyIamPolicyInput interface {
	pulumi.Input

	ToAccessPolicyIamPolicyOutput() AccessPolicyIamPolicyOutput
	ToAccessPolicyIamPolicyOutputWithContext(ctx context.Context) AccessPolicyIamPolicyOutput
}

func (*AccessPolicyIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyIamPolicy)(nil)).Elem()
}

func (i *AccessPolicyIamPolicy) ToAccessPolicyIamPolicyOutput() AccessPolicyIamPolicyOutput {
	return i.ToAccessPolicyIamPolicyOutputWithContext(context.Background())
}

func (i *AccessPolicyIamPolicy) ToAccessPolicyIamPolicyOutputWithContext(ctx context.Context) AccessPolicyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyIamPolicyOutput)
}

// AccessPolicyIamPolicyArrayInput is an input type that accepts AccessPolicyIamPolicyArray and AccessPolicyIamPolicyArrayOutput values.
// You can construct a concrete instance of `AccessPolicyIamPolicyArrayInput` via:
//
//          AccessPolicyIamPolicyArray{ AccessPolicyIamPolicyArgs{...} }
type AccessPolicyIamPolicyArrayInput interface {
	pulumi.Input

	ToAccessPolicyIamPolicyArrayOutput() AccessPolicyIamPolicyArrayOutput
	ToAccessPolicyIamPolicyArrayOutputWithContext(context.Context) AccessPolicyIamPolicyArrayOutput
}

type AccessPolicyIamPolicyArray []AccessPolicyIamPolicyInput

func (AccessPolicyIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPolicyIamPolicy)(nil)).Elem()
}

func (i AccessPolicyIamPolicyArray) ToAccessPolicyIamPolicyArrayOutput() AccessPolicyIamPolicyArrayOutput {
	return i.ToAccessPolicyIamPolicyArrayOutputWithContext(context.Background())
}

func (i AccessPolicyIamPolicyArray) ToAccessPolicyIamPolicyArrayOutputWithContext(ctx context.Context) AccessPolicyIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyIamPolicyArrayOutput)
}

// AccessPolicyIamPolicyMapInput is an input type that accepts AccessPolicyIamPolicyMap and AccessPolicyIamPolicyMapOutput values.
// You can construct a concrete instance of `AccessPolicyIamPolicyMapInput` via:
//
//          AccessPolicyIamPolicyMap{ "key": AccessPolicyIamPolicyArgs{...} }
type AccessPolicyIamPolicyMapInput interface {
	pulumi.Input

	ToAccessPolicyIamPolicyMapOutput() AccessPolicyIamPolicyMapOutput
	ToAccessPolicyIamPolicyMapOutputWithContext(context.Context) AccessPolicyIamPolicyMapOutput
}

type AccessPolicyIamPolicyMap map[string]AccessPolicyIamPolicyInput

func (AccessPolicyIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPolicyIamPolicy)(nil)).Elem()
}

func (i AccessPolicyIamPolicyMap) ToAccessPolicyIamPolicyMapOutput() AccessPolicyIamPolicyMapOutput {
	return i.ToAccessPolicyIamPolicyMapOutputWithContext(context.Background())
}

func (i AccessPolicyIamPolicyMap) ToAccessPolicyIamPolicyMapOutputWithContext(ctx context.Context) AccessPolicyIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyIamPolicyMapOutput)
}

type AccessPolicyIamPolicyOutput struct{ *pulumi.OutputState }

func (AccessPolicyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyIamPolicy)(nil)).Elem()
}

func (o AccessPolicyIamPolicyOutput) ToAccessPolicyIamPolicyOutput() AccessPolicyIamPolicyOutput {
	return o
}

func (o AccessPolicyIamPolicyOutput) ToAccessPolicyIamPolicyOutputWithContext(ctx context.Context) AccessPolicyIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o AccessPolicyIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o AccessPolicyIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o AccessPolicyIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

type AccessPolicyIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (AccessPolicyIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPolicyIamPolicy)(nil)).Elem()
}

func (o AccessPolicyIamPolicyArrayOutput) ToAccessPolicyIamPolicyArrayOutput() AccessPolicyIamPolicyArrayOutput {
	return o
}

func (o AccessPolicyIamPolicyArrayOutput) ToAccessPolicyIamPolicyArrayOutputWithContext(ctx context.Context) AccessPolicyIamPolicyArrayOutput {
	return o
}

func (o AccessPolicyIamPolicyArrayOutput) Index(i pulumi.IntInput) AccessPolicyIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessPolicyIamPolicy {
		return vs[0].([]*AccessPolicyIamPolicy)[vs[1].(int)]
	}).(AccessPolicyIamPolicyOutput)
}

type AccessPolicyIamPolicyMapOutput struct{ *pulumi.OutputState }

func (AccessPolicyIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPolicyIamPolicy)(nil)).Elem()
}

func (o AccessPolicyIamPolicyMapOutput) ToAccessPolicyIamPolicyMapOutput() AccessPolicyIamPolicyMapOutput {
	return o
}

func (o AccessPolicyIamPolicyMapOutput) ToAccessPolicyIamPolicyMapOutputWithContext(ctx context.Context) AccessPolicyIamPolicyMapOutput {
	return o
}

func (o AccessPolicyIamPolicyMapOutput) MapIndex(k pulumi.StringInput) AccessPolicyIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessPolicyIamPolicy {
		return vs[0].(map[string]*AccessPolicyIamPolicy)[vs[1].(string)]
	}).(AccessPolicyIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyIamPolicyInput)(nil)).Elem(), &AccessPolicyIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyIamPolicyArrayInput)(nil)).Elem(), AccessPolicyIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyIamPolicyMapInput)(nil)).Elem(), AccessPolicyIamPolicyMap{})
	pulumi.RegisterOutputType(AccessPolicyIamPolicyOutput{})
	pulumi.RegisterOutputType(AccessPolicyIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(AccessPolicyIamPolicyMapOutput{})
}
