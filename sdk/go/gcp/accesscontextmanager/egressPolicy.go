// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accesscontextmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource has been deprecated, please refer to ServicePerimeterEgressPolicy.
//
// To get more information about EgressPolicy, see:
//
// * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#egresspolicy)
//
// ## Import
//
// EgressPolicy can be imported using any of these accepted formats:
//
// ```sh
//
//	$ pulumi import gcp:accesscontextmanager/egressPolicy:EgressPolicy default {{egress_policy_name}}/{{resource}}
//
// ```
type EgressPolicy struct {
	pulumi.CustomResourceState

	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	EgressPolicyName pulumi.StringOutput `pulumi:"egressPolicyName"`
	// A GCP resource that is inside of the service perimeter.
	Resource pulumi.StringOutput `pulumi:"resource"`
}

// NewEgressPolicy registers a new resource with the given unique name, arguments, and options.
func NewEgressPolicy(ctx *pulumi.Context,
	name string, args *EgressPolicyArgs, opts ...pulumi.ResourceOption) (*EgressPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EgressPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'EgressPolicyName'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EgressPolicy
	err := ctx.RegisterResource("gcp:accesscontextmanager/egressPolicy:EgressPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEgressPolicy gets an existing EgressPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEgressPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EgressPolicyState, opts ...pulumi.ResourceOption) (*EgressPolicy, error) {
	var resource EgressPolicy
	err := ctx.ReadResource("gcp:accesscontextmanager/egressPolicy:EgressPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EgressPolicy resources.
type egressPolicyState struct {
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	EgressPolicyName *string `pulumi:"egressPolicyName"`
	// A GCP resource that is inside of the service perimeter.
	Resource *string `pulumi:"resource"`
}

type EgressPolicyState struct {
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	EgressPolicyName pulumi.StringPtrInput
	// A GCP resource that is inside of the service perimeter.
	Resource pulumi.StringPtrInput
}

func (EgressPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*egressPolicyState)(nil)).Elem()
}

type egressPolicyArgs struct {
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	EgressPolicyName string `pulumi:"egressPolicyName"`
	// A GCP resource that is inside of the service perimeter.
	Resource string `pulumi:"resource"`
}

// The set of arguments for constructing a EgressPolicy resource.
type EgressPolicyArgs struct {
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	EgressPolicyName pulumi.StringInput
	// A GCP resource that is inside of the service perimeter.
	Resource pulumi.StringInput
}

func (EgressPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*egressPolicyArgs)(nil)).Elem()
}

type EgressPolicyInput interface {
	pulumi.Input

	ToEgressPolicyOutput() EgressPolicyOutput
	ToEgressPolicyOutputWithContext(ctx context.Context) EgressPolicyOutput
}

func (*EgressPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**EgressPolicy)(nil)).Elem()
}

func (i *EgressPolicy) ToEgressPolicyOutput() EgressPolicyOutput {
	return i.ToEgressPolicyOutputWithContext(context.Background())
}

func (i *EgressPolicy) ToEgressPolicyOutputWithContext(ctx context.Context) EgressPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EgressPolicyOutput)
}

func (i *EgressPolicy) ToOutput(ctx context.Context) pulumix.Output[*EgressPolicy] {
	return pulumix.Output[*EgressPolicy]{
		OutputState: i.ToEgressPolicyOutputWithContext(ctx).OutputState,
	}
}

// EgressPolicyArrayInput is an input type that accepts EgressPolicyArray and EgressPolicyArrayOutput values.
// You can construct a concrete instance of `EgressPolicyArrayInput` via:
//
//	EgressPolicyArray{ EgressPolicyArgs{...} }
type EgressPolicyArrayInput interface {
	pulumi.Input

	ToEgressPolicyArrayOutput() EgressPolicyArrayOutput
	ToEgressPolicyArrayOutputWithContext(context.Context) EgressPolicyArrayOutput
}

type EgressPolicyArray []EgressPolicyInput

func (EgressPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EgressPolicy)(nil)).Elem()
}

func (i EgressPolicyArray) ToEgressPolicyArrayOutput() EgressPolicyArrayOutput {
	return i.ToEgressPolicyArrayOutputWithContext(context.Background())
}

func (i EgressPolicyArray) ToEgressPolicyArrayOutputWithContext(ctx context.Context) EgressPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EgressPolicyArrayOutput)
}

func (i EgressPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*EgressPolicy] {
	return pulumix.Output[[]*EgressPolicy]{
		OutputState: i.ToEgressPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// EgressPolicyMapInput is an input type that accepts EgressPolicyMap and EgressPolicyMapOutput values.
// You can construct a concrete instance of `EgressPolicyMapInput` via:
//
//	EgressPolicyMap{ "key": EgressPolicyArgs{...} }
type EgressPolicyMapInput interface {
	pulumi.Input

	ToEgressPolicyMapOutput() EgressPolicyMapOutput
	ToEgressPolicyMapOutputWithContext(context.Context) EgressPolicyMapOutput
}

type EgressPolicyMap map[string]EgressPolicyInput

func (EgressPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EgressPolicy)(nil)).Elem()
}

func (i EgressPolicyMap) ToEgressPolicyMapOutput() EgressPolicyMapOutput {
	return i.ToEgressPolicyMapOutputWithContext(context.Background())
}

func (i EgressPolicyMap) ToEgressPolicyMapOutputWithContext(ctx context.Context) EgressPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EgressPolicyMapOutput)
}

func (i EgressPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EgressPolicy] {
	return pulumix.Output[map[string]*EgressPolicy]{
		OutputState: i.ToEgressPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type EgressPolicyOutput struct{ *pulumi.OutputState }

func (EgressPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EgressPolicy)(nil)).Elem()
}

func (o EgressPolicyOutput) ToEgressPolicyOutput() EgressPolicyOutput {
	return o
}

func (o EgressPolicyOutput) ToEgressPolicyOutputWithContext(ctx context.Context) EgressPolicyOutput {
	return o
}

func (o EgressPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*EgressPolicy] {
	return pulumix.Output[*EgressPolicy]{
		OutputState: o.OutputState,
	}
}

// The name of the Service Perimeter to add this resource to.
//
// ***
func (o EgressPolicyOutput) EgressPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *EgressPolicy) pulumi.StringOutput { return v.EgressPolicyName }).(pulumi.StringOutput)
}

// A GCP resource that is inside of the service perimeter.
func (o EgressPolicyOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v *EgressPolicy) pulumi.StringOutput { return v.Resource }).(pulumi.StringOutput)
}

type EgressPolicyArrayOutput struct{ *pulumi.OutputState }

func (EgressPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EgressPolicy)(nil)).Elem()
}

func (o EgressPolicyArrayOutput) ToEgressPolicyArrayOutput() EgressPolicyArrayOutput {
	return o
}

func (o EgressPolicyArrayOutput) ToEgressPolicyArrayOutputWithContext(ctx context.Context) EgressPolicyArrayOutput {
	return o
}

func (o EgressPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EgressPolicy] {
	return pulumix.Output[[]*EgressPolicy]{
		OutputState: o.OutputState,
	}
}

func (o EgressPolicyArrayOutput) Index(i pulumi.IntInput) EgressPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EgressPolicy {
		return vs[0].([]*EgressPolicy)[vs[1].(int)]
	}).(EgressPolicyOutput)
}

type EgressPolicyMapOutput struct{ *pulumi.OutputState }

func (EgressPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EgressPolicy)(nil)).Elem()
}

func (o EgressPolicyMapOutput) ToEgressPolicyMapOutput() EgressPolicyMapOutput {
	return o
}

func (o EgressPolicyMapOutput) ToEgressPolicyMapOutputWithContext(ctx context.Context) EgressPolicyMapOutput {
	return o
}

func (o EgressPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EgressPolicy] {
	return pulumix.Output[map[string]*EgressPolicy]{
		OutputState: o.OutputState,
	}
}

func (o EgressPolicyMapOutput) MapIndex(k pulumi.StringInput) EgressPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EgressPolicy {
		return vs[0].(map[string]*EgressPolicy)[vs[1].(string)]
	}).(EgressPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EgressPolicyInput)(nil)).Elem(), &EgressPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*EgressPolicyArrayInput)(nil)).Elem(), EgressPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EgressPolicyMapInput)(nil)).Elem(), EgressPolicyMap{})
	pulumi.RegisterOutputType(EgressPolicyOutput{})
	pulumi.RegisterOutputType(EgressPolicyArrayOutput{})
	pulumi.RegisterOutputType(EgressPolicyMapOutput{})
}
