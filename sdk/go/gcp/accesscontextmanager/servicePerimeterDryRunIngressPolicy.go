// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accesscontextmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a single IngressPolicy in the spec (dry-run) configuration for a service perimeter.
// IngressPolicies match requests based on ingressFrom and ingressTo stanzas. For an ingress policy to match,
// both the ingressFrom and ingressTo stanzas must be matched. If an IngressPolicy matches a request,
// the request is allowed through the perimeter boundary from outside the perimeter.
// For example, access from the internet can be allowed either based on an AccessLevel or,
// for traffic hosted on Google Cloud, the project of the source network.
// For access from private networks, using the project of the hosting network is required.
// Individual ingress policies can be limited by restricting which services and/
// or actions they match using the ingressTo field.
//
// > **Note:** By default, updates to this resource will remove the IngressPolicy from the
// from the perimeter and add it back in a non-atomic manner. To ensure that the new IngressPolicy
// is added before the old one is removed, add a `lifecycle` block with `createBeforeDestroy = true` to this resource.
// **Note:** If this resource is used alongside a `accesscontextmanager.ServicePerimeter` resource,
// the service perimeter resource must have a `lifecycle` block with `ignoreChanges = [spec[0].ingress_policies]` so
// they don't fight over which ingress rules should be in the policy.
//
// To get more information about ServicePerimeterDryRunIngressPolicy, see:
//
// * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#ingresspolicy)
// * How-to Guides
//   - [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)
//
// ## Example Usage
type ServicePerimeterDryRunIngressPolicy struct {
	pulumi.CustomResourceState

	// Defines the conditions on the source of a request causing this `IngressPolicy`
	// to apply.
	// Structure is documented below.
	IngressFrom ServicePerimeterDryRunIngressPolicyIngressFromPtrOutput `pulumi:"ingressFrom"`
	// Defines the conditions on the `ApiOperation` and request destination that cause
	// this `IngressPolicy` to apply.
	// Structure is documented below.
	IngressTo ServicePerimeterDryRunIngressPolicyIngressToPtrOutput `pulumi:"ingressTo"`
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	Perimeter pulumi.StringOutput `pulumi:"perimeter"`
}

// NewServicePerimeterDryRunIngressPolicy registers a new resource with the given unique name, arguments, and options.
func NewServicePerimeterDryRunIngressPolicy(ctx *pulumi.Context,
	name string, args *ServicePerimeterDryRunIngressPolicyArgs, opts ...pulumi.ResourceOption) (*ServicePerimeterDryRunIngressPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Perimeter == nil {
		return nil, errors.New("invalid value for required argument 'Perimeter'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServicePerimeterDryRunIngressPolicy
	err := ctx.RegisterResource("gcp:accesscontextmanager/servicePerimeterDryRunIngressPolicy:ServicePerimeterDryRunIngressPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePerimeterDryRunIngressPolicy gets an existing ServicePerimeterDryRunIngressPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePerimeterDryRunIngressPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePerimeterDryRunIngressPolicyState, opts ...pulumi.ResourceOption) (*ServicePerimeterDryRunIngressPolicy, error) {
	var resource ServicePerimeterDryRunIngressPolicy
	err := ctx.ReadResource("gcp:accesscontextmanager/servicePerimeterDryRunIngressPolicy:ServicePerimeterDryRunIngressPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePerimeterDryRunIngressPolicy resources.
type servicePerimeterDryRunIngressPolicyState struct {
	// Defines the conditions on the source of a request causing this `IngressPolicy`
	// to apply.
	// Structure is documented below.
	IngressFrom *ServicePerimeterDryRunIngressPolicyIngressFrom `pulumi:"ingressFrom"`
	// Defines the conditions on the `ApiOperation` and request destination that cause
	// this `IngressPolicy` to apply.
	// Structure is documented below.
	IngressTo *ServicePerimeterDryRunIngressPolicyIngressTo `pulumi:"ingressTo"`
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	Perimeter *string `pulumi:"perimeter"`
}

type ServicePerimeterDryRunIngressPolicyState struct {
	// Defines the conditions on the source of a request causing this `IngressPolicy`
	// to apply.
	// Structure is documented below.
	IngressFrom ServicePerimeterDryRunIngressPolicyIngressFromPtrInput
	// Defines the conditions on the `ApiOperation` and request destination that cause
	// this `IngressPolicy` to apply.
	// Structure is documented below.
	IngressTo ServicePerimeterDryRunIngressPolicyIngressToPtrInput
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	Perimeter pulumi.StringPtrInput
}

func (ServicePerimeterDryRunIngressPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePerimeterDryRunIngressPolicyState)(nil)).Elem()
}

type servicePerimeterDryRunIngressPolicyArgs struct {
	// Defines the conditions on the source of a request causing this `IngressPolicy`
	// to apply.
	// Structure is documented below.
	IngressFrom *ServicePerimeterDryRunIngressPolicyIngressFrom `pulumi:"ingressFrom"`
	// Defines the conditions on the `ApiOperation` and request destination that cause
	// this `IngressPolicy` to apply.
	// Structure is documented below.
	IngressTo *ServicePerimeterDryRunIngressPolicyIngressTo `pulumi:"ingressTo"`
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	Perimeter string `pulumi:"perimeter"`
}

// The set of arguments for constructing a ServicePerimeterDryRunIngressPolicy resource.
type ServicePerimeterDryRunIngressPolicyArgs struct {
	// Defines the conditions on the source of a request causing this `IngressPolicy`
	// to apply.
	// Structure is documented below.
	IngressFrom ServicePerimeterDryRunIngressPolicyIngressFromPtrInput
	// Defines the conditions on the `ApiOperation` and request destination that cause
	// this `IngressPolicy` to apply.
	// Structure is documented below.
	IngressTo ServicePerimeterDryRunIngressPolicyIngressToPtrInput
	// The name of the Service Perimeter to add this resource to.
	//
	// ***
	Perimeter pulumi.StringInput
}

func (ServicePerimeterDryRunIngressPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePerimeterDryRunIngressPolicyArgs)(nil)).Elem()
}

type ServicePerimeterDryRunIngressPolicyInput interface {
	pulumi.Input

	ToServicePerimeterDryRunIngressPolicyOutput() ServicePerimeterDryRunIngressPolicyOutput
	ToServicePerimeterDryRunIngressPolicyOutputWithContext(ctx context.Context) ServicePerimeterDryRunIngressPolicyOutput
}

func (*ServicePerimeterDryRunIngressPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePerimeterDryRunIngressPolicy)(nil)).Elem()
}

func (i *ServicePerimeterDryRunIngressPolicy) ToServicePerimeterDryRunIngressPolicyOutput() ServicePerimeterDryRunIngressPolicyOutput {
	return i.ToServicePerimeterDryRunIngressPolicyOutputWithContext(context.Background())
}

func (i *ServicePerimeterDryRunIngressPolicy) ToServicePerimeterDryRunIngressPolicyOutputWithContext(ctx context.Context) ServicePerimeterDryRunIngressPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunIngressPolicyOutput)
}

// ServicePerimeterDryRunIngressPolicyArrayInput is an input type that accepts ServicePerimeterDryRunIngressPolicyArray and ServicePerimeterDryRunIngressPolicyArrayOutput values.
// You can construct a concrete instance of `ServicePerimeterDryRunIngressPolicyArrayInput` via:
//
//	ServicePerimeterDryRunIngressPolicyArray{ ServicePerimeterDryRunIngressPolicyArgs{...} }
type ServicePerimeterDryRunIngressPolicyArrayInput interface {
	pulumi.Input

	ToServicePerimeterDryRunIngressPolicyArrayOutput() ServicePerimeterDryRunIngressPolicyArrayOutput
	ToServicePerimeterDryRunIngressPolicyArrayOutputWithContext(context.Context) ServicePerimeterDryRunIngressPolicyArrayOutput
}

type ServicePerimeterDryRunIngressPolicyArray []ServicePerimeterDryRunIngressPolicyInput

func (ServicePerimeterDryRunIngressPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePerimeterDryRunIngressPolicy)(nil)).Elem()
}

func (i ServicePerimeterDryRunIngressPolicyArray) ToServicePerimeterDryRunIngressPolicyArrayOutput() ServicePerimeterDryRunIngressPolicyArrayOutput {
	return i.ToServicePerimeterDryRunIngressPolicyArrayOutputWithContext(context.Background())
}

func (i ServicePerimeterDryRunIngressPolicyArray) ToServicePerimeterDryRunIngressPolicyArrayOutputWithContext(ctx context.Context) ServicePerimeterDryRunIngressPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunIngressPolicyArrayOutput)
}

// ServicePerimeterDryRunIngressPolicyMapInput is an input type that accepts ServicePerimeterDryRunIngressPolicyMap and ServicePerimeterDryRunIngressPolicyMapOutput values.
// You can construct a concrete instance of `ServicePerimeterDryRunIngressPolicyMapInput` via:
//
//	ServicePerimeterDryRunIngressPolicyMap{ "key": ServicePerimeterDryRunIngressPolicyArgs{...} }
type ServicePerimeterDryRunIngressPolicyMapInput interface {
	pulumi.Input

	ToServicePerimeterDryRunIngressPolicyMapOutput() ServicePerimeterDryRunIngressPolicyMapOutput
	ToServicePerimeterDryRunIngressPolicyMapOutputWithContext(context.Context) ServicePerimeterDryRunIngressPolicyMapOutput
}

type ServicePerimeterDryRunIngressPolicyMap map[string]ServicePerimeterDryRunIngressPolicyInput

func (ServicePerimeterDryRunIngressPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePerimeterDryRunIngressPolicy)(nil)).Elem()
}

func (i ServicePerimeterDryRunIngressPolicyMap) ToServicePerimeterDryRunIngressPolicyMapOutput() ServicePerimeterDryRunIngressPolicyMapOutput {
	return i.ToServicePerimeterDryRunIngressPolicyMapOutputWithContext(context.Background())
}

func (i ServicePerimeterDryRunIngressPolicyMap) ToServicePerimeterDryRunIngressPolicyMapOutputWithContext(ctx context.Context) ServicePerimeterDryRunIngressPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePerimeterDryRunIngressPolicyMapOutput)
}

type ServicePerimeterDryRunIngressPolicyOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunIngressPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePerimeterDryRunIngressPolicy)(nil)).Elem()
}

func (o ServicePerimeterDryRunIngressPolicyOutput) ToServicePerimeterDryRunIngressPolicyOutput() ServicePerimeterDryRunIngressPolicyOutput {
	return o
}

func (o ServicePerimeterDryRunIngressPolicyOutput) ToServicePerimeterDryRunIngressPolicyOutputWithContext(ctx context.Context) ServicePerimeterDryRunIngressPolicyOutput {
	return o
}

// Defines the conditions on the source of a request causing this `IngressPolicy`
// to apply.
// Structure is documented below.
func (o ServicePerimeterDryRunIngressPolicyOutput) IngressFrom() ServicePerimeterDryRunIngressPolicyIngressFromPtrOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunIngressPolicy) ServicePerimeterDryRunIngressPolicyIngressFromPtrOutput {
		return v.IngressFrom
	}).(ServicePerimeterDryRunIngressPolicyIngressFromPtrOutput)
}

// Defines the conditions on the `ApiOperation` and request destination that cause
// this `IngressPolicy` to apply.
// Structure is documented below.
func (o ServicePerimeterDryRunIngressPolicyOutput) IngressTo() ServicePerimeterDryRunIngressPolicyIngressToPtrOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunIngressPolicy) ServicePerimeterDryRunIngressPolicyIngressToPtrOutput {
		return v.IngressTo
	}).(ServicePerimeterDryRunIngressPolicyIngressToPtrOutput)
}

// The name of the Service Perimeter to add this resource to.
//
// ***
func (o ServicePerimeterDryRunIngressPolicyOutput) Perimeter() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePerimeterDryRunIngressPolicy) pulumi.StringOutput { return v.Perimeter }).(pulumi.StringOutput)
}

type ServicePerimeterDryRunIngressPolicyArrayOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunIngressPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePerimeterDryRunIngressPolicy)(nil)).Elem()
}

func (o ServicePerimeterDryRunIngressPolicyArrayOutput) ToServicePerimeterDryRunIngressPolicyArrayOutput() ServicePerimeterDryRunIngressPolicyArrayOutput {
	return o
}

func (o ServicePerimeterDryRunIngressPolicyArrayOutput) ToServicePerimeterDryRunIngressPolicyArrayOutputWithContext(ctx context.Context) ServicePerimeterDryRunIngressPolicyArrayOutput {
	return o
}

func (o ServicePerimeterDryRunIngressPolicyArrayOutput) Index(i pulumi.IntInput) ServicePerimeterDryRunIngressPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServicePerimeterDryRunIngressPolicy {
		return vs[0].([]*ServicePerimeterDryRunIngressPolicy)[vs[1].(int)]
	}).(ServicePerimeterDryRunIngressPolicyOutput)
}

type ServicePerimeterDryRunIngressPolicyMapOutput struct{ *pulumi.OutputState }

func (ServicePerimeterDryRunIngressPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePerimeterDryRunIngressPolicy)(nil)).Elem()
}

func (o ServicePerimeterDryRunIngressPolicyMapOutput) ToServicePerimeterDryRunIngressPolicyMapOutput() ServicePerimeterDryRunIngressPolicyMapOutput {
	return o
}

func (o ServicePerimeterDryRunIngressPolicyMapOutput) ToServicePerimeterDryRunIngressPolicyMapOutputWithContext(ctx context.Context) ServicePerimeterDryRunIngressPolicyMapOutput {
	return o
}

func (o ServicePerimeterDryRunIngressPolicyMapOutput) MapIndex(k pulumi.StringInput) ServicePerimeterDryRunIngressPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServicePerimeterDryRunIngressPolicy {
		return vs[0].(map[string]*ServicePerimeterDryRunIngressPolicy)[vs[1].(string)]
	}).(ServicePerimeterDryRunIngressPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunIngressPolicyInput)(nil)).Elem(), &ServicePerimeterDryRunIngressPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunIngressPolicyArrayInput)(nil)).Elem(), ServicePerimeterDryRunIngressPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePerimeterDryRunIngressPolicyMapInput)(nil)).Elem(), ServicePerimeterDryRunIngressPolicyMap{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunIngressPolicyOutput{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunIngressPolicyArrayOutput{})
	pulumi.RegisterOutputType(ServicePerimeterDryRunIngressPolicyMapOutput{})
}
