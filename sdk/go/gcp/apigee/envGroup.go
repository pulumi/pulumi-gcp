// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An `Environment group` in Apigee.
//
// To get more information about Envgroup, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.envgroups/create)
// * How-to Guides
//   - [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)
//
// ## Example Usage
//
// ## Import
//
// # Envgroup can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:apigee/envGroup:EnvGroup default {{org_id}}/envgroups/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:apigee/envGroup:EnvGroup default {{org_id}}/{{name}}
//
// ```
type EnvGroup struct {
	pulumi.CustomResourceState

	// Hostnames of the environment group.
	Hostnames pulumi.StringArrayOutput `pulumi:"hostnames"`
	// The resource ID of the environment group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Apigee Organization associated with the Apigee environment group,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
}

// NewEnvGroup registers a new resource with the given unique name, arguments, and options.
func NewEnvGroup(ctx *pulumi.Context,
	name string, args *EnvGroupArgs, opts ...pulumi.ResourceOption) (*EnvGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	var resource EnvGroup
	err := ctx.RegisterResource("gcp:apigee/envGroup:EnvGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvGroup gets an existing EnvGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvGroupState, opts ...pulumi.ResourceOption) (*EnvGroup, error) {
	var resource EnvGroup
	err := ctx.ReadResource("gcp:apigee/envGroup:EnvGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvGroup resources.
type envGroupState struct {
	// Hostnames of the environment group.
	Hostnames []string `pulumi:"hostnames"`
	// The resource ID of the environment group.
	Name *string `pulumi:"name"`
	// The Apigee Organization associated with the Apigee environment group,
	// in the format `organizations/{{org_name}}`.
	OrgId *string `pulumi:"orgId"`
}

type EnvGroupState struct {
	// Hostnames of the environment group.
	Hostnames pulumi.StringArrayInput
	// The resource ID of the environment group.
	Name pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee environment group,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringPtrInput
}

func (EnvGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*envGroupState)(nil)).Elem()
}

type envGroupArgs struct {
	// Hostnames of the environment group.
	Hostnames []string `pulumi:"hostnames"`
	// The resource ID of the environment group.
	Name *string `pulumi:"name"`
	// The Apigee Organization associated with the Apigee environment group,
	// in the format `organizations/{{org_name}}`.
	OrgId string `pulumi:"orgId"`
}

// The set of arguments for constructing a EnvGroup resource.
type EnvGroupArgs struct {
	// Hostnames of the environment group.
	Hostnames pulumi.StringArrayInput
	// The resource ID of the environment group.
	Name pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee environment group,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringInput
}

func (EnvGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envGroupArgs)(nil)).Elem()
}

type EnvGroupInput interface {
	pulumi.Input

	ToEnvGroupOutput() EnvGroupOutput
	ToEnvGroupOutputWithContext(ctx context.Context) EnvGroupOutput
}

func (*EnvGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvGroup)(nil)).Elem()
}

func (i *EnvGroup) ToEnvGroupOutput() EnvGroupOutput {
	return i.ToEnvGroupOutputWithContext(context.Background())
}

func (i *EnvGroup) ToEnvGroupOutputWithContext(ctx context.Context) EnvGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvGroupOutput)
}

// EnvGroupArrayInput is an input type that accepts EnvGroupArray and EnvGroupArrayOutput values.
// You can construct a concrete instance of `EnvGroupArrayInput` via:
//
//	EnvGroupArray{ EnvGroupArgs{...} }
type EnvGroupArrayInput interface {
	pulumi.Input

	ToEnvGroupArrayOutput() EnvGroupArrayOutput
	ToEnvGroupArrayOutputWithContext(context.Context) EnvGroupArrayOutput
}

type EnvGroupArray []EnvGroupInput

func (EnvGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvGroup)(nil)).Elem()
}

func (i EnvGroupArray) ToEnvGroupArrayOutput() EnvGroupArrayOutput {
	return i.ToEnvGroupArrayOutputWithContext(context.Background())
}

func (i EnvGroupArray) ToEnvGroupArrayOutputWithContext(ctx context.Context) EnvGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvGroupArrayOutput)
}

// EnvGroupMapInput is an input type that accepts EnvGroupMap and EnvGroupMapOutput values.
// You can construct a concrete instance of `EnvGroupMapInput` via:
//
//	EnvGroupMap{ "key": EnvGroupArgs{...} }
type EnvGroupMapInput interface {
	pulumi.Input

	ToEnvGroupMapOutput() EnvGroupMapOutput
	ToEnvGroupMapOutputWithContext(context.Context) EnvGroupMapOutput
}

type EnvGroupMap map[string]EnvGroupInput

func (EnvGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvGroup)(nil)).Elem()
}

func (i EnvGroupMap) ToEnvGroupMapOutput() EnvGroupMapOutput {
	return i.ToEnvGroupMapOutputWithContext(context.Background())
}

func (i EnvGroupMap) ToEnvGroupMapOutputWithContext(ctx context.Context) EnvGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvGroupMapOutput)
}

type EnvGroupOutput struct{ *pulumi.OutputState }

func (EnvGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvGroup)(nil)).Elem()
}

func (o EnvGroupOutput) ToEnvGroupOutput() EnvGroupOutput {
	return o
}

func (o EnvGroupOutput) ToEnvGroupOutputWithContext(ctx context.Context) EnvGroupOutput {
	return o
}

// Hostnames of the environment group.
func (o EnvGroupOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnvGroup) pulumi.StringArrayOutput { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// The resource ID of the environment group.
func (o EnvGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Apigee Organization associated with the Apigee environment group,
// in the format `organizations/{{org_name}}`.
func (o EnvGroupOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvGroup) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

type EnvGroupArrayOutput struct{ *pulumi.OutputState }

func (EnvGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvGroup)(nil)).Elem()
}

func (o EnvGroupArrayOutput) ToEnvGroupArrayOutput() EnvGroupArrayOutput {
	return o
}

func (o EnvGroupArrayOutput) ToEnvGroupArrayOutputWithContext(ctx context.Context) EnvGroupArrayOutput {
	return o
}

func (o EnvGroupArrayOutput) Index(i pulumi.IntInput) EnvGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvGroup {
		return vs[0].([]*EnvGroup)[vs[1].(int)]
	}).(EnvGroupOutput)
}

type EnvGroupMapOutput struct{ *pulumi.OutputState }

func (EnvGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvGroup)(nil)).Elem()
}

func (o EnvGroupMapOutput) ToEnvGroupMapOutput() EnvGroupMapOutput {
	return o
}

func (o EnvGroupMapOutput) ToEnvGroupMapOutputWithContext(ctx context.Context) EnvGroupMapOutput {
	return o
}

func (o EnvGroupMapOutput) MapIndex(k pulumi.StringInput) EnvGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvGroup {
		return vs[0].(map[string]*EnvGroup)[vs[1].(string)]
	}).(EnvGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvGroupInput)(nil)).Elem(), &EnvGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvGroupArrayInput)(nil)).Elem(), EnvGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvGroupMapInput)(nil)).Elem(), EnvGroupMap{})
	pulumi.RegisterOutputType(EnvGroupOutput{})
	pulumi.RegisterOutputType(EnvGroupArrayOutput{})
	pulumi.RegisterOutputType(EnvGroupMapOutput{})
}
