// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A `Developer` is an API consumer that can have apps registered in Apigee.
//
// To get more information about Developer, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.developers)
// * How-to Guides
//   - [Creating a developer](https://cloud.google.com/apigee/docs/api-platform/publish/adding-developers-your-api-product)
//
// ## Example Usage
//
// ### Apigee Developer Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("apigee-network"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("apigee-range"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
//				Name:             pulumi.String("my-instance"),
//				Location:         pulumi.String("us-central1"),
//				OrgId:            apigeeOrg.ID(),
//				PeeringCidrRange: pulumi.String("SLASH_22"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewDeveloper(ctx, "apigee_developer", &apigee.DeveloperArgs{
//				Email:     pulumi.String("john.doe@acme.com"),
//				FirstName: pulumi.String("John"),
//				LastName:  pulumi.String("Doe"),
//				UserName:  pulumi.String("john.doe"),
//				OrgId:     apigeeOrg.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Apigee Developer With Attributes
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("apigee-network"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("apigee-range"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
//				Name:             pulumi.String("my-instance"),
//				Location:         pulumi.String("us-central1"),
//				OrgId:            apigeeOrg.ID(),
//				PeeringCidrRange: pulumi.String("SLASH_22"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewDeveloper(ctx, "apigee_developer", &apigee.DeveloperArgs{
//				Email:     pulumi.String("john.doe@acme.com"),
//				FirstName: pulumi.String("John"),
//				LastName:  pulumi.String("Doe"),
//				UserName:  pulumi.String("john.doe"),
//				Attributes: apigee.DeveloperAttributeArray{
//					&apigee.DeveloperAttributeArgs{
//						Name:  pulumi.String("business_unit"),
//						Value: pulumi.String("HR"),
//					},
//					&apigee.DeveloperAttributeArgs{
//						Name:  pulumi.String("department"),
//						Value: pulumi.String("payroll"),
//					},
//				},
//				OrgId: apigeeOrg.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Developer can be imported using any of these accepted formats:
//
// * `{{org_id}}/developers/{{email}}`
//
// * `{{org_id}}/{{email}}`
//
// When using the `pulumi import` command, Developer can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apigee/developer:Developer default {{org_id}}/developers/{{email}}
// ```
//
// ```sh
// $ pulumi import gcp:apigee/developer:Developer default {{org_id}}/{{email}}
// ```
type Developer struct {
	pulumi.CustomResourceState

	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes DeveloperAttributeArrayOutput `pulumi:"attributes"`
	// Time at which the developer was created in milliseconds since epoch.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
	Email pulumi.StringOutput `pulumi:"email"`
	// First name of the developer.
	FirstName pulumi.StringOutput `pulumi:"firstName"`
	// Time at which the developer was last modified in milliseconds since epoch.
	LastModifiedAt pulumi.StringOutput `pulumi:"lastModifiedAt"`
	// Last name of the developer.
	LastName pulumi.StringOutput `pulumi:"lastName"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Name of the Apigee organization in which the developer resides.
	OrganizatioName pulumi.StringOutput `pulumi:"organizatioName"`
	// Status of the developer. Valid values are active and inactive.
	Status pulumi.StringOutput `pulumi:"status"`
	// User name of the developer. Not used by Apigee hybrid.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewDeveloper registers a new resource with the given unique name, arguments, and options.
func NewDeveloper(ctx *pulumi.Context,
	name string, args *DeveloperArgs, opts ...pulumi.ResourceOption) (*Developer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.FirstName == nil {
		return nil, errors.New("invalid value for required argument 'FirstName'")
	}
	if args.LastName == nil {
		return nil, errors.New("invalid value for required argument 'LastName'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Developer
	err := ctx.RegisterResource("gcp:apigee/developer:Developer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeveloper gets an existing Developer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeveloper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeveloperState, opts ...pulumi.ResourceOption) (*Developer, error) {
	var resource Developer
	err := ctx.ReadResource("gcp:apigee/developer:Developer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Developer resources.
type developerState struct {
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes []DeveloperAttribute `pulumi:"attributes"`
	// Time at which the developer was created in milliseconds since epoch.
	CreatedAt *string `pulumi:"createdAt"`
	// Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
	Email *string `pulumi:"email"`
	// First name of the developer.
	FirstName *string `pulumi:"firstName"`
	// Time at which the developer was last modified in milliseconds since epoch.
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// Last name of the developer.
	LastName *string `pulumi:"lastName"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId *string `pulumi:"orgId"`
	// Name of the Apigee organization in which the developer resides.
	OrganizatioName *string `pulumi:"organizatioName"`
	// Status of the developer. Valid values are active and inactive.
	Status *string `pulumi:"status"`
	// User name of the developer. Not used by Apigee hybrid.
	UserName *string `pulumi:"userName"`
}

type DeveloperState struct {
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes DeveloperAttributeArrayInput
	// Time at which the developer was created in milliseconds since epoch.
	CreatedAt pulumi.StringPtrInput
	// Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
	Email pulumi.StringPtrInput
	// First name of the developer.
	FirstName pulumi.StringPtrInput
	// Time at which the developer was last modified in milliseconds since epoch.
	LastModifiedAt pulumi.StringPtrInput
	// Last name of the developer.
	LastName pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId pulumi.StringPtrInput
	// Name of the Apigee organization in which the developer resides.
	OrganizatioName pulumi.StringPtrInput
	// Status of the developer. Valid values are active and inactive.
	Status pulumi.StringPtrInput
	// User name of the developer. Not used by Apigee hybrid.
	UserName pulumi.StringPtrInput
}

func (DeveloperState) ElementType() reflect.Type {
	return reflect.TypeOf((*developerState)(nil)).Elem()
}

type developerArgs struct {
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes []DeveloperAttribute `pulumi:"attributes"`
	// Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
	Email string `pulumi:"email"`
	// First name of the developer.
	FirstName string `pulumi:"firstName"`
	// Last name of the developer.
	LastName string `pulumi:"lastName"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId string `pulumi:"orgId"`
	// User name of the developer. Not used by Apigee hybrid.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a Developer resource.
type DeveloperArgs struct {
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes DeveloperAttributeArrayInput
	// Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
	Email pulumi.StringInput
	// First name of the developer.
	FirstName pulumi.StringInput
	// Last name of the developer.
	LastName pulumi.StringInput
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId pulumi.StringInput
	// User name of the developer. Not used by Apigee hybrid.
	UserName pulumi.StringInput
}

func (DeveloperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*developerArgs)(nil)).Elem()
}

type DeveloperInput interface {
	pulumi.Input

	ToDeveloperOutput() DeveloperOutput
	ToDeveloperOutputWithContext(ctx context.Context) DeveloperOutput
}

func (*Developer) ElementType() reflect.Type {
	return reflect.TypeOf((**Developer)(nil)).Elem()
}

func (i *Developer) ToDeveloperOutput() DeveloperOutput {
	return i.ToDeveloperOutputWithContext(context.Background())
}

func (i *Developer) ToDeveloperOutputWithContext(ctx context.Context) DeveloperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeveloperOutput)
}

// DeveloperArrayInput is an input type that accepts DeveloperArray and DeveloperArrayOutput values.
// You can construct a concrete instance of `DeveloperArrayInput` via:
//
//	DeveloperArray{ DeveloperArgs{...} }
type DeveloperArrayInput interface {
	pulumi.Input

	ToDeveloperArrayOutput() DeveloperArrayOutput
	ToDeveloperArrayOutputWithContext(context.Context) DeveloperArrayOutput
}

type DeveloperArray []DeveloperInput

func (DeveloperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Developer)(nil)).Elem()
}

func (i DeveloperArray) ToDeveloperArrayOutput() DeveloperArrayOutput {
	return i.ToDeveloperArrayOutputWithContext(context.Background())
}

func (i DeveloperArray) ToDeveloperArrayOutputWithContext(ctx context.Context) DeveloperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeveloperArrayOutput)
}

// DeveloperMapInput is an input type that accepts DeveloperMap and DeveloperMapOutput values.
// You can construct a concrete instance of `DeveloperMapInput` via:
//
//	DeveloperMap{ "key": DeveloperArgs{...} }
type DeveloperMapInput interface {
	pulumi.Input

	ToDeveloperMapOutput() DeveloperMapOutput
	ToDeveloperMapOutputWithContext(context.Context) DeveloperMapOutput
}

type DeveloperMap map[string]DeveloperInput

func (DeveloperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Developer)(nil)).Elem()
}

func (i DeveloperMap) ToDeveloperMapOutput() DeveloperMapOutput {
	return i.ToDeveloperMapOutputWithContext(context.Background())
}

func (i DeveloperMap) ToDeveloperMapOutputWithContext(ctx context.Context) DeveloperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeveloperMapOutput)
}

type DeveloperOutput struct{ *pulumi.OutputState }

func (DeveloperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Developer)(nil)).Elem()
}

func (o DeveloperOutput) ToDeveloperOutput() DeveloperOutput {
	return o
}

func (o DeveloperOutput) ToDeveloperOutputWithContext(ctx context.Context) DeveloperOutput {
	return o
}

// Developer attributes (name/value pairs). The custom attribute limit is 18.
// Structure is documented below.
func (o DeveloperOutput) Attributes() DeveloperAttributeArrayOutput {
	return o.ApplyT(func(v *Developer) DeveloperAttributeArrayOutput { return v.Attributes }).(DeveloperAttributeArrayOutput)
}

// Time at which the developer was created in milliseconds since epoch.
func (o DeveloperOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
func (o DeveloperOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// First name of the developer.
func (o DeveloperOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.FirstName }).(pulumi.StringOutput)
}

// Time at which the developer was last modified in milliseconds since epoch.
func (o DeveloperOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last name of the developer.
func (o DeveloperOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.LastName }).(pulumi.StringOutput)
}

// The Apigee Organization associated with the Apigee instance,
// in the format `organizations/{{org_name}}`.
//
// ***
func (o DeveloperOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Name of the Apigee organization in which the developer resides.
func (o DeveloperOutput) OrganizatioName() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.OrganizatioName }).(pulumi.StringOutput)
}

// Status of the developer. Valid values are active and inactive.
func (o DeveloperOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// User name of the developer. Not used by Apigee hybrid.
func (o DeveloperOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Developer) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type DeveloperArrayOutput struct{ *pulumi.OutputState }

func (DeveloperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Developer)(nil)).Elem()
}

func (o DeveloperArrayOutput) ToDeveloperArrayOutput() DeveloperArrayOutput {
	return o
}

func (o DeveloperArrayOutput) ToDeveloperArrayOutputWithContext(ctx context.Context) DeveloperArrayOutput {
	return o
}

func (o DeveloperArrayOutput) Index(i pulumi.IntInput) DeveloperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Developer {
		return vs[0].([]*Developer)[vs[1].(int)]
	}).(DeveloperOutput)
}

type DeveloperMapOutput struct{ *pulumi.OutputState }

func (DeveloperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Developer)(nil)).Elem()
}

func (o DeveloperMapOutput) ToDeveloperMapOutput() DeveloperMapOutput {
	return o
}

func (o DeveloperMapOutput) ToDeveloperMapOutputWithContext(ctx context.Context) DeveloperMapOutput {
	return o
}

func (o DeveloperMapOutput) MapIndex(k pulumi.StringInput) DeveloperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Developer {
		return vs[0].(map[string]*Developer)[vs[1].(string)]
	}).(DeveloperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeveloperInput)(nil)).Elem(), &Developer{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeveloperArrayInput)(nil)).Elem(), DeveloperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeveloperMapInput)(nil)).Elem(), DeveloperMap{})
	pulumi.RegisterOutputType(DeveloperOutput{})
	pulumi.RegisterOutputType(DeveloperArrayOutput{})
	pulumi.RegisterOutputType(DeveloperMapOutput{})
}
