// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Authorize the Synchronizer to download environment data from the control plane.
//
// To get more information about SyncAuthorization, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations#getsyncauthorization)
// * How-to Guides
//   - [Enable Synchronizer access](https://cloud.google.com/apigee/docs/hybrid/v1.8/synchronizer-access#enable-synchronizer-access)
//
// ## Example Usage
// ### Apigee Sync Authorization Basic Test
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/serviceAccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("my-project"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//			})
//			if err != nil {
//				return err
//			}
//			apigee, err := projects.NewService(ctx, "apigee", &projects.ServiceArgs{
//				Project: project.ProjectId,
//				Service: pulumi.String("apigee.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewOrganization(ctx, "apigeeOrg", &apigee.OrganizationArgs{
//				AnalyticsRegion: pulumi.String("us-central1"),
//				ProjectId:       project.ProjectId,
//				RuntimeType:     pulumi.String("HYBRID"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigee,
//			}))
//			if err != nil {
//				return err
//			}
//			serviceAccount, err := serviceAccount.NewAccount(ctx, "serviceAccount", &serviceAccount.AccountArgs{
//				AccountId:   pulumi.String("my-account"),
//				DisplayName: pulumi.String("Service Account"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMBinding(ctx, "synchronizer-iam", &projects.IAMBindingArgs{
//				Project: project.ProjectId,
//				Role:    pulumi.String("roles/apigee.synchronizerManager"),
//				Members: pulumi.StringArray{
//					serviceAccount.Email.ApplyT(func(email string) (string, error) {
//						return fmt.Sprintf("serviceAccount:%v", email), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewSyncAuthorization(ctx, "apigeeSyncAuthorization", &apigee.SyncAuthorizationArgs{
//				Identities: pulumi.StringArray{
//					serviceAccount.Email.ApplyT(func(email string) (string, error) {
//						return fmt.Sprintf("serviceAccount:%v", email), nil
//					}).(pulumi.StringOutput),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				synchronizer_iam,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # SyncAuthorization can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:apigee/syncAuthorization:SyncAuthorization default organizations/{{name}}/syncAuthorization
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:apigee/syncAuthorization:SyncAuthorization default {{name}}
//
// ```
type SyncAuthorization struct {
	pulumi.CustomResourceState

	// Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting
	// each other. Used internally during updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	Identities pulumi.StringArrayOutput `pulumi:"identities"`
	// Name of the Apigee organization.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSyncAuthorization registers a new resource with the given unique name, arguments, and options.
func NewSyncAuthorization(ctx *pulumi.Context,
	name string, args *SyncAuthorizationArgs, opts ...pulumi.ResourceOption) (*SyncAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identities == nil {
		return nil, errors.New("invalid value for required argument 'Identities'")
	}
	var resource SyncAuthorization
	err := ctx.RegisterResource("gcp:apigee/syncAuthorization:SyncAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncAuthorization gets an existing SyncAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncAuthorizationState, opts ...pulumi.ResourceOption) (*SyncAuthorization, error) {
	var resource SyncAuthorization
	err := ctx.ReadResource("gcp:apigee/syncAuthorization:SyncAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncAuthorization resources.
type syncAuthorizationState struct {
	// Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting
	// each other. Used internally during updates.
	Etag *string `pulumi:"etag"`
	// Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	Identities []string `pulumi:"identities"`
	// Name of the Apigee organization.
	Name *string `pulumi:"name"`
}

type SyncAuthorizationState struct {
	// Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting
	// each other. Used internally during updates.
	Etag pulumi.StringPtrInput
	// Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	Identities pulumi.StringArrayInput
	// Name of the Apigee organization.
	Name pulumi.StringPtrInput
}

func (SyncAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncAuthorizationState)(nil)).Elem()
}

type syncAuthorizationArgs struct {
	// Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	Identities []string `pulumi:"identities"`
	// Name of the Apigee organization.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a SyncAuthorization resource.
type SyncAuthorizationArgs struct {
	// Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	Identities pulumi.StringArrayInput
	// Name of the Apigee organization.
	Name pulumi.StringPtrInput
}

func (SyncAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncAuthorizationArgs)(nil)).Elem()
}

type SyncAuthorizationInput interface {
	pulumi.Input

	ToSyncAuthorizationOutput() SyncAuthorizationOutput
	ToSyncAuthorizationOutputWithContext(ctx context.Context) SyncAuthorizationOutput
}

func (*SyncAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncAuthorization)(nil)).Elem()
}

func (i *SyncAuthorization) ToSyncAuthorizationOutput() SyncAuthorizationOutput {
	return i.ToSyncAuthorizationOutputWithContext(context.Background())
}

func (i *SyncAuthorization) ToSyncAuthorizationOutputWithContext(ctx context.Context) SyncAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncAuthorizationOutput)
}

// SyncAuthorizationArrayInput is an input type that accepts SyncAuthorizationArray and SyncAuthorizationArrayOutput values.
// You can construct a concrete instance of `SyncAuthorizationArrayInput` via:
//
//	SyncAuthorizationArray{ SyncAuthorizationArgs{...} }
type SyncAuthorizationArrayInput interface {
	pulumi.Input

	ToSyncAuthorizationArrayOutput() SyncAuthorizationArrayOutput
	ToSyncAuthorizationArrayOutputWithContext(context.Context) SyncAuthorizationArrayOutput
}

type SyncAuthorizationArray []SyncAuthorizationInput

func (SyncAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncAuthorization)(nil)).Elem()
}

func (i SyncAuthorizationArray) ToSyncAuthorizationArrayOutput() SyncAuthorizationArrayOutput {
	return i.ToSyncAuthorizationArrayOutputWithContext(context.Background())
}

func (i SyncAuthorizationArray) ToSyncAuthorizationArrayOutputWithContext(ctx context.Context) SyncAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncAuthorizationArrayOutput)
}

// SyncAuthorizationMapInput is an input type that accepts SyncAuthorizationMap and SyncAuthorizationMapOutput values.
// You can construct a concrete instance of `SyncAuthorizationMapInput` via:
//
//	SyncAuthorizationMap{ "key": SyncAuthorizationArgs{...} }
type SyncAuthorizationMapInput interface {
	pulumi.Input

	ToSyncAuthorizationMapOutput() SyncAuthorizationMapOutput
	ToSyncAuthorizationMapOutputWithContext(context.Context) SyncAuthorizationMapOutput
}

type SyncAuthorizationMap map[string]SyncAuthorizationInput

func (SyncAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncAuthorization)(nil)).Elem()
}

func (i SyncAuthorizationMap) ToSyncAuthorizationMapOutput() SyncAuthorizationMapOutput {
	return i.ToSyncAuthorizationMapOutputWithContext(context.Background())
}

func (i SyncAuthorizationMap) ToSyncAuthorizationMapOutputWithContext(ctx context.Context) SyncAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncAuthorizationMapOutput)
}

type SyncAuthorizationOutput struct{ *pulumi.OutputState }

func (SyncAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncAuthorization)(nil)).Elem()
}

func (o SyncAuthorizationOutput) ToSyncAuthorizationOutput() SyncAuthorizationOutput {
	return o
}

func (o SyncAuthorizationOutput) ToSyncAuthorizationOutputWithContext(ctx context.Context) SyncAuthorizationOutput {
	return o
}

// Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting
// each other. Used internally during updates.
func (o SyncAuthorizationOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncAuthorization) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
// The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
func (o SyncAuthorizationOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyncAuthorization) pulumi.StringArrayOutput { return v.Identities }).(pulumi.StringArrayOutput)
}

// Name of the Apigee organization.
func (o SyncAuthorizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncAuthorization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SyncAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (SyncAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncAuthorization)(nil)).Elem()
}

func (o SyncAuthorizationArrayOutput) ToSyncAuthorizationArrayOutput() SyncAuthorizationArrayOutput {
	return o
}

func (o SyncAuthorizationArrayOutput) ToSyncAuthorizationArrayOutputWithContext(ctx context.Context) SyncAuthorizationArrayOutput {
	return o
}

func (o SyncAuthorizationArrayOutput) Index(i pulumi.IntInput) SyncAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyncAuthorization {
		return vs[0].([]*SyncAuthorization)[vs[1].(int)]
	}).(SyncAuthorizationOutput)
}

type SyncAuthorizationMapOutput struct{ *pulumi.OutputState }

func (SyncAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncAuthorization)(nil)).Elem()
}

func (o SyncAuthorizationMapOutput) ToSyncAuthorizationMapOutput() SyncAuthorizationMapOutput {
	return o
}

func (o SyncAuthorizationMapOutput) ToSyncAuthorizationMapOutputWithContext(ctx context.Context) SyncAuthorizationMapOutput {
	return o
}

func (o SyncAuthorizationMapOutput) MapIndex(k pulumi.StringInput) SyncAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyncAuthorization {
		return vs[0].(map[string]*SyncAuthorization)[vs[1].(string)]
	}).(SyncAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncAuthorizationInput)(nil)).Elem(), &SyncAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncAuthorizationArrayInput)(nil)).Elem(), SyncAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncAuthorizationMapInput)(nil)).Elem(), SyncAuthorizationMap{})
	pulumi.RegisterOutputType(SyncAuthorizationOutput{})
	pulumi.RegisterOutputType(SyncAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(SyncAuthorizationMapOutput{})
}
