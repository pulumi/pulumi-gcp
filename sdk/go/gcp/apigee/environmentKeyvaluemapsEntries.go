// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates key value entries in a key value map scoped to an environment.
//
// To get more information about EnvironmentKeyvaluemapsEntries, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.keyvaluemaps.entries/create)
// * How-to Guides
//   - [Using key value maps](https://cloud.google.com/apigee/docs/api-platform/cache/key-value-maps)
//
// ## Example Usage
//
// ### Apigee Environment Keyvaluemaps Entries Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("apigee-network"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("apigee-range"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeEnvironment, err := apigee.NewEnvironment(ctx, "apigee_environment", &apigee.EnvironmentArgs{
//				OrgId:       apigeeOrg.ID(),
//				Name:        pulumi.String("tf-test-env"),
//				Description: pulumi.String("Apigee Environment"),
//				DisplayName: pulumi.String("Apigee Environment"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
//				Name:     pulumi.String("tf-test-instance"),
//				Location: pulumi.String("us-central1"),
//				OrgId:    apigeeOrg.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeInstanceAttachment, err := apigee.NewInstanceAttachment(ctx, "apigee_instance_attachment", &apigee.InstanceAttachmentArgs{
//				InstanceId:  apigeeInstance.ID(),
//				Environment: apigeeEnvironment.Name,
//			})
//			if err != nil {
//				return err
//			}
//			apigeeEnvironmentKeyvaluemaps, err := apigee.NewEnvironmentKeyvaluemaps(ctx, "apigee_environment_keyvaluemaps", &apigee.EnvironmentKeyvaluemapsArgs{
//				EnvId: pulumi.Any(createApigeeEnvironment.Id),
//				Name:  pulumi.String("tf-test-env-kvms"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeOrg,
//				apigeeEnvironment,
//				apigeeInstance,
//				apigeeInstanceAttachment,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewEnvironmentKeyvaluemapsEntries(ctx, "apigee_environment_keyvaluemaps_entries", &apigee.EnvironmentKeyvaluemapsEntriesArgs{
//				EnvKeyvaluemapId: apigeeEnvironmentKeyvaluemaps.ID(),
//				Name:             pulumi.String("testName"),
//				Value:            pulumi.String("testValue"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeOrg,
//				apigeeEnvironment,
//				apigeeInstance,
//				apigeeInstanceAttachment,
//				apigeeEnvironmentKeyvaluemaps,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EnvironmentKeyvaluemapsEntries can be imported using any of these accepted formats:
//
// * `{{env_keyvaluemap_id}}/entries/{{name}}`
//
// * `{{env_keyvaluemap_id}}/{{name}}`
//
// When using the `pulumi import` command, EnvironmentKeyvaluemapsEntries can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apigee/environmentKeyvaluemapsEntries:EnvironmentKeyvaluemapsEntries default {{env_keyvaluemap_id}}/entries/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:apigee/environmentKeyvaluemapsEntries:EnvironmentKeyvaluemapsEntries default {{env_keyvaluemap_id}}/{{name}}
// ```
type EnvironmentKeyvaluemapsEntries struct {
	pulumi.CustomResourceState

	// The Apigee environment keyvalumaps Id associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}/keyvaluemaps/{{keyvaluemap_name}}`.
	EnvKeyvaluemapId pulumi.StringOutput `pulumi:"envKeyvaluemapId"`
	// Required. Resource URI that can be used to identify the scope of the key value map entries.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. Data or payload that is being retrieved and associated with the unique key.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewEnvironmentKeyvaluemapsEntries registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentKeyvaluemapsEntries(ctx *pulumi.Context,
	name string, args *EnvironmentKeyvaluemapsEntriesArgs, opts ...pulumi.ResourceOption) (*EnvironmentKeyvaluemapsEntries, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvKeyvaluemapId == nil {
		return nil, errors.New("invalid value for required argument 'EnvKeyvaluemapId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentKeyvaluemapsEntries
	err := ctx.RegisterResource("gcp:apigee/environmentKeyvaluemapsEntries:EnvironmentKeyvaluemapsEntries", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentKeyvaluemapsEntries gets an existing EnvironmentKeyvaluemapsEntries resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentKeyvaluemapsEntries(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentKeyvaluemapsEntriesState, opts ...pulumi.ResourceOption) (*EnvironmentKeyvaluemapsEntries, error) {
	var resource EnvironmentKeyvaluemapsEntries
	err := ctx.ReadResource("gcp:apigee/environmentKeyvaluemapsEntries:EnvironmentKeyvaluemapsEntries", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentKeyvaluemapsEntries resources.
type environmentKeyvaluemapsEntriesState struct {
	// The Apigee environment keyvalumaps Id associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}/keyvaluemaps/{{keyvaluemap_name}}`.
	EnvKeyvaluemapId *string `pulumi:"envKeyvaluemapId"`
	// Required. Resource URI that can be used to identify the scope of the key value map entries.
	Name *string `pulumi:"name"`
	// Required. Data or payload that is being retrieved and associated with the unique key.
	Value *string `pulumi:"value"`
}

type EnvironmentKeyvaluemapsEntriesState struct {
	// The Apigee environment keyvalumaps Id associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}/keyvaluemaps/{{keyvaluemap_name}}`.
	EnvKeyvaluemapId pulumi.StringPtrInput
	// Required. Resource URI that can be used to identify the scope of the key value map entries.
	Name pulumi.StringPtrInput
	// Required. Data or payload that is being retrieved and associated with the unique key.
	Value pulumi.StringPtrInput
}

func (EnvironmentKeyvaluemapsEntriesState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentKeyvaluemapsEntriesState)(nil)).Elem()
}

type environmentKeyvaluemapsEntriesArgs struct {
	// The Apigee environment keyvalumaps Id associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}/keyvaluemaps/{{keyvaluemap_name}}`.
	EnvKeyvaluemapId string `pulumi:"envKeyvaluemapId"`
	// Required. Resource URI that can be used to identify the scope of the key value map entries.
	Name *string `pulumi:"name"`
	// Required. Data or payload that is being retrieved and associated with the unique key.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a EnvironmentKeyvaluemapsEntries resource.
type EnvironmentKeyvaluemapsEntriesArgs struct {
	// The Apigee environment keyvalumaps Id associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}/keyvaluemaps/{{keyvaluemap_name}}`.
	EnvKeyvaluemapId pulumi.StringInput
	// Required. Resource URI that can be used to identify the scope of the key value map entries.
	Name pulumi.StringPtrInput
	// Required. Data or payload that is being retrieved and associated with the unique key.
	Value pulumi.StringInput
}

func (EnvironmentKeyvaluemapsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentKeyvaluemapsEntriesArgs)(nil)).Elem()
}

type EnvironmentKeyvaluemapsEntriesInput interface {
	pulumi.Input

	ToEnvironmentKeyvaluemapsEntriesOutput() EnvironmentKeyvaluemapsEntriesOutput
	ToEnvironmentKeyvaluemapsEntriesOutputWithContext(ctx context.Context) EnvironmentKeyvaluemapsEntriesOutput
}

func (*EnvironmentKeyvaluemapsEntries) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentKeyvaluemapsEntries)(nil)).Elem()
}

func (i *EnvironmentKeyvaluemapsEntries) ToEnvironmentKeyvaluemapsEntriesOutput() EnvironmentKeyvaluemapsEntriesOutput {
	return i.ToEnvironmentKeyvaluemapsEntriesOutputWithContext(context.Background())
}

func (i *EnvironmentKeyvaluemapsEntries) ToEnvironmentKeyvaluemapsEntriesOutputWithContext(ctx context.Context) EnvironmentKeyvaluemapsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentKeyvaluemapsEntriesOutput)
}

// EnvironmentKeyvaluemapsEntriesArrayInput is an input type that accepts EnvironmentKeyvaluemapsEntriesArray and EnvironmentKeyvaluemapsEntriesArrayOutput values.
// You can construct a concrete instance of `EnvironmentKeyvaluemapsEntriesArrayInput` via:
//
//	EnvironmentKeyvaluemapsEntriesArray{ EnvironmentKeyvaluemapsEntriesArgs{...} }
type EnvironmentKeyvaluemapsEntriesArrayInput interface {
	pulumi.Input

	ToEnvironmentKeyvaluemapsEntriesArrayOutput() EnvironmentKeyvaluemapsEntriesArrayOutput
	ToEnvironmentKeyvaluemapsEntriesArrayOutputWithContext(context.Context) EnvironmentKeyvaluemapsEntriesArrayOutput
}

type EnvironmentKeyvaluemapsEntriesArray []EnvironmentKeyvaluemapsEntriesInput

func (EnvironmentKeyvaluemapsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentKeyvaluemapsEntries)(nil)).Elem()
}

func (i EnvironmentKeyvaluemapsEntriesArray) ToEnvironmentKeyvaluemapsEntriesArrayOutput() EnvironmentKeyvaluemapsEntriesArrayOutput {
	return i.ToEnvironmentKeyvaluemapsEntriesArrayOutputWithContext(context.Background())
}

func (i EnvironmentKeyvaluemapsEntriesArray) ToEnvironmentKeyvaluemapsEntriesArrayOutputWithContext(ctx context.Context) EnvironmentKeyvaluemapsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentKeyvaluemapsEntriesArrayOutput)
}

// EnvironmentKeyvaluemapsEntriesMapInput is an input type that accepts EnvironmentKeyvaluemapsEntriesMap and EnvironmentKeyvaluemapsEntriesMapOutput values.
// You can construct a concrete instance of `EnvironmentKeyvaluemapsEntriesMapInput` via:
//
//	EnvironmentKeyvaluemapsEntriesMap{ "key": EnvironmentKeyvaluemapsEntriesArgs{...} }
type EnvironmentKeyvaluemapsEntriesMapInput interface {
	pulumi.Input

	ToEnvironmentKeyvaluemapsEntriesMapOutput() EnvironmentKeyvaluemapsEntriesMapOutput
	ToEnvironmentKeyvaluemapsEntriesMapOutputWithContext(context.Context) EnvironmentKeyvaluemapsEntriesMapOutput
}

type EnvironmentKeyvaluemapsEntriesMap map[string]EnvironmentKeyvaluemapsEntriesInput

func (EnvironmentKeyvaluemapsEntriesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentKeyvaluemapsEntries)(nil)).Elem()
}

func (i EnvironmentKeyvaluemapsEntriesMap) ToEnvironmentKeyvaluemapsEntriesMapOutput() EnvironmentKeyvaluemapsEntriesMapOutput {
	return i.ToEnvironmentKeyvaluemapsEntriesMapOutputWithContext(context.Background())
}

func (i EnvironmentKeyvaluemapsEntriesMap) ToEnvironmentKeyvaluemapsEntriesMapOutputWithContext(ctx context.Context) EnvironmentKeyvaluemapsEntriesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentKeyvaluemapsEntriesMapOutput)
}

type EnvironmentKeyvaluemapsEntriesOutput struct{ *pulumi.OutputState }

func (EnvironmentKeyvaluemapsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentKeyvaluemapsEntries)(nil)).Elem()
}

func (o EnvironmentKeyvaluemapsEntriesOutput) ToEnvironmentKeyvaluemapsEntriesOutput() EnvironmentKeyvaluemapsEntriesOutput {
	return o
}

func (o EnvironmentKeyvaluemapsEntriesOutput) ToEnvironmentKeyvaluemapsEntriesOutputWithContext(ctx context.Context) EnvironmentKeyvaluemapsEntriesOutput {
	return o
}

// The Apigee environment keyvalumaps Id associated with the Apigee environment,
// in the format `organizations/{{org_name}}/environments/{{env_name}}/keyvaluemaps/{{keyvaluemap_name}}`.
func (o EnvironmentKeyvaluemapsEntriesOutput) EnvKeyvaluemapId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentKeyvaluemapsEntries) pulumi.StringOutput { return v.EnvKeyvaluemapId }).(pulumi.StringOutput)
}

// Required. Resource URI that can be used to identify the scope of the key value map entries.
func (o EnvironmentKeyvaluemapsEntriesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentKeyvaluemapsEntries) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. Data or payload that is being retrieved and associated with the unique key.
func (o EnvironmentKeyvaluemapsEntriesOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentKeyvaluemapsEntries) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type EnvironmentKeyvaluemapsEntriesArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentKeyvaluemapsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentKeyvaluemapsEntries)(nil)).Elem()
}

func (o EnvironmentKeyvaluemapsEntriesArrayOutput) ToEnvironmentKeyvaluemapsEntriesArrayOutput() EnvironmentKeyvaluemapsEntriesArrayOutput {
	return o
}

func (o EnvironmentKeyvaluemapsEntriesArrayOutput) ToEnvironmentKeyvaluemapsEntriesArrayOutputWithContext(ctx context.Context) EnvironmentKeyvaluemapsEntriesArrayOutput {
	return o
}

func (o EnvironmentKeyvaluemapsEntriesArrayOutput) Index(i pulumi.IntInput) EnvironmentKeyvaluemapsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvironmentKeyvaluemapsEntries {
		return vs[0].([]*EnvironmentKeyvaluemapsEntries)[vs[1].(int)]
	}).(EnvironmentKeyvaluemapsEntriesOutput)
}

type EnvironmentKeyvaluemapsEntriesMapOutput struct{ *pulumi.OutputState }

func (EnvironmentKeyvaluemapsEntriesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentKeyvaluemapsEntries)(nil)).Elem()
}

func (o EnvironmentKeyvaluemapsEntriesMapOutput) ToEnvironmentKeyvaluemapsEntriesMapOutput() EnvironmentKeyvaluemapsEntriesMapOutput {
	return o
}

func (o EnvironmentKeyvaluemapsEntriesMapOutput) ToEnvironmentKeyvaluemapsEntriesMapOutputWithContext(ctx context.Context) EnvironmentKeyvaluemapsEntriesMapOutput {
	return o
}

func (o EnvironmentKeyvaluemapsEntriesMapOutput) MapIndex(k pulumi.StringInput) EnvironmentKeyvaluemapsEntriesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvironmentKeyvaluemapsEntries {
		return vs[0].(map[string]*EnvironmentKeyvaluemapsEntries)[vs[1].(string)]
	}).(EnvironmentKeyvaluemapsEntriesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentKeyvaluemapsEntriesInput)(nil)).Elem(), &EnvironmentKeyvaluemapsEntries{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentKeyvaluemapsEntriesArrayInput)(nil)).Elem(), EnvironmentKeyvaluemapsEntriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentKeyvaluemapsEntriesMapInput)(nil)).Elem(), EnvironmentKeyvaluemapsEntriesMap{})
	pulumi.RegisterOutputType(EnvironmentKeyvaluemapsEntriesOutput{})
	pulumi.RegisterOutputType(EnvironmentKeyvaluemapsEntriesArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentKeyvaluemapsEntriesMapOutput{})
}
