// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An alias from a pkcs12 file.
//
// To get more information about KeystoresAliasesPkcs12, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
// * How-to Guides
//   - [Keystores Aliases](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
//
// ## Import
//
// # KeystoresAliasesPkcs12 can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12 default organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12 default {{org_id}}/{{environment}}/{{keystore}}/{{alias}}
//
// ```
type KeystoresAliasesPkcs12 struct {
	pulumi.CustomResourceState

	// Alias Name
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Chain of certificates under this alias.
	// Structure is documented below.
	CertsInfos KeystoresAliasesPkcs12CertsInfoArrayOutput `pulumi:"certsInfos"`
	// Environment associated with the alias
	Environment pulumi.StringOutput `pulumi:"environment"`
	// PKCS12 file content
	//
	// ***
	File pulumi.StringOutput `pulumi:"file"`
	// Hash of the pkcs file
	Filehash pulumi.StringOutput `pulumi:"filehash"`
	// Keystore Name
	Keystore pulumi.StringOutput `pulumi:"keystore"`
	// Organization ID associated with the alias, without organization/ prefix
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Password for the PKCS12 file if it's encrypted
	Password pulumi.StringOutput `pulumi:"password"`
	// Optional.Type of Alias
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKeystoresAliasesPkcs12 registers a new resource with the given unique name, arguments, and options.
func NewKeystoresAliasesPkcs12(ctx *pulumi.Context,
	name string, args *KeystoresAliasesPkcs12Args, opts ...pulumi.ResourceOption) (*KeystoresAliasesPkcs12, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.File == nil {
		return nil, errors.New("invalid value for required argument 'File'")
	}
	if args.Filehash == nil {
		return nil, errors.New("invalid value for required argument 'Filehash'")
	}
	if args.Keystore == nil {
		return nil, errors.New("invalid value for required argument 'Keystore'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeystoresAliasesPkcs12
	err := ctx.RegisterResource("gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeystoresAliasesPkcs12 gets an existing KeystoresAliasesPkcs12 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeystoresAliasesPkcs12(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeystoresAliasesPkcs12State, opts ...pulumi.ResourceOption) (*KeystoresAliasesPkcs12, error) {
	var resource KeystoresAliasesPkcs12
	err := ctx.ReadResource("gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeystoresAliasesPkcs12 resources.
type keystoresAliasesPkcs12State struct {
	// Alias Name
	Alias *string `pulumi:"alias"`
	// Chain of certificates under this alias.
	// Structure is documented below.
	CertsInfos []KeystoresAliasesPkcs12CertsInfo `pulumi:"certsInfos"`
	// Environment associated with the alias
	Environment *string `pulumi:"environment"`
	// PKCS12 file content
	//
	// ***
	File *string `pulumi:"file"`
	// Hash of the pkcs file
	Filehash *string `pulumi:"filehash"`
	// Keystore Name
	Keystore *string `pulumi:"keystore"`
	// Organization ID associated with the alias, without organization/ prefix
	OrgId *string `pulumi:"orgId"`
	// Password for the PKCS12 file if it's encrypted
	Password *string `pulumi:"password"`
	// Optional.Type of Alias
	Type *string `pulumi:"type"`
}

type KeystoresAliasesPkcs12State struct {
	// Alias Name
	Alias pulumi.StringPtrInput
	// Chain of certificates under this alias.
	// Structure is documented below.
	CertsInfos KeystoresAliasesPkcs12CertsInfoArrayInput
	// Environment associated with the alias
	Environment pulumi.StringPtrInput
	// PKCS12 file content
	//
	// ***
	File pulumi.StringPtrInput
	// Hash of the pkcs file
	Filehash pulumi.StringPtrInput
	// Keystore Name
	Keystore pulumi.StringPtrInput
	// Organization ID associated with the alias, without organization/ prefix
	OrgId pulumi.StringPtrInput
	// Password for the PKCS12 file if it's encrypted
	Password pulumi.StringPtrInput
	// Optional.Type of Alias
	Type pulumi.StringPtrInput
}

func (KeystoresAliasesPkcs12State) ElementType() reflect.Type {
	return reflect.TypeOf((*keystoresAliasesPkcs12State)(nil)).Elem()
}

type keystoresAliasesPkcs12Args struct {
	// Alias Name
	Alias string `pulumi:"alias"`
	// Environment associated with the alias
	Environment string `pulumi:"environment"`
	// PKCS12 file content
	//
	// ***
	File string `pulumi:"file"`
	// Hash of the pkcs file
	Filehash string `pulumi:"filehash"`
	// Keystore Name
	Keystore string `pulumi:"keystore"`
	// Organization ID associated with the alias, without organization/ prefix
	OrgId string `pulumi:"orgId"`
	// Password for the PKCS12 file if it's encrypted
	Password *string `pulumi:"password"`
}

// The set of arguments for constructing a KeystoresAliasesPkcs12 resource.
type KeystoresAliasesPkcs12Args struct {
	// Alias Name
	Alias pulumi.StringInput
	// Environment associated with the alias
	Environment pulumi.StringInput
	// PKCS12 file content
	//
	// ***
	File pulumi.StringInput
	// Hash of the pkcs file
	Filehash pulumi.StringInput
	// Keystore Name
	Keystore pulumi.StringInput
	// Organization ID associated with the alias, without organization/ prefix
	OrgId pulumi.StringInput
	// Password for the PKCS12 file if it's encrypted
	Password pulumi.StringPtrInput
}

func (KeystoresAliasesPkcs12Args) ElementType() reflect.Type {
	return reflect.TypeOf((*keystoresAliasesPkcs12Args)(nil)).Elem()
}

type KeystoresAliasesPkcs12Input interface {
	pulumi.Input

	ToKeystoresAliasesPkcs12Output() KeystoresAliasesPkcs12Output
	ToKeystoresAliasesPkcs12OutputWithContext(ctx context.Context) KeystoresAliasesPkcs12Output
}

func (*KeystoresAliasesPkcs12) ElementType() reflect.Type {
	return reflect.TypeOf((**KeystoresAliasesPkcs12)(nil)).Elem()
}

func (i *KeystoresAliasesPkcs12) ToKeystoresAliasesPkcs12Output() KeystoresAliasesPkcs12Output {
	return i.ToKeystoresAliasesPkcs12OutputWithContext(context.Background())
}

func (i *KeystoresAliasesPkcs12) ToKeystoresAliasesPkcs12OutputWithContext(ctx context.Context) KeystoresAliasesPkcs12Output {
	return pulumi.ToOutputWithContext(ctx, i).(KeystoresAliasesPkcs12Output)
}

// KeystoresAliasesPkcs12ArrayInput is an input type that accepts KeystoresAliasesPkcs12Array and KeystoresAliasesPkcs12ArrayOutput values.
// You can construct a concrete instance of `KeystoresAliasesPkcs12ArrayInput` via:
//
//	KeystoresAliasesPkcs12Array{ KeystoresAliasesPkcs12Args{...} }
type KeystoresAliasesPkcs12ArrayInput interface {
	pulumi.Input

	ToKeystoresAliasesPkcs12ArrayOutput() KeystoresAliasesPkcs12ArrayOutput
	ToKeystoresAliasesPkcs12ArrayOutputWithContext(context.Context) KeystoresAliasesPkcs12ArrayOutput
}

type KeystoresAliasesPkcs12Array []KeystoresAliasesPkcs12Input

func (KeystoresAliasesPkcs12Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeystoresAliasesPkcs12)(nil)).Elem()
}

func (i KeystoresAliasesPkcs12Array) ToKeystoresAliasesPkcs12ArrayOutput() KeystoresAliasesPkcs12ArrayOutput {
	return i.ToKeystoresAliasesPkcs12ArrayOutputWithContext(context.Background())
}

func (i KeystoresAliasesPkcs12Array) ToKeystoresAliasesPkcs12ArrayOutputWithContext(ctx context.Context) KeystoresAliasesPkcs12ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeystoresAliasesPkcs12ArrayOutput)
}

// KeystoresAliasesPkcs12MapInput is an input type that accepts KeystoresAliasesPkcs12Map and KeystoresAliasesPkcs12MapOutput values.
// You can construct a concrete instance of `KeystoresAliasesPkcs12MapInput` via:
//
//	KeystoresAliasesPkcs12Map{ "key": KeystoresAliasesPkcs12Args{...} }
type KeystoresAliasesPkcs12MapInput interface {
	pulumi.Input

	ToKeystoresAliasesPkcs12MapOutput() KeystoresAliasesPkcs12MapOutput
	ToKeystoresAliasesPkcs12MapOutputWithContext(context.Context) KeystoresAliasesPkcs12MapOutput
}

type KeystoresAliasesPkcs12Map map[string]KeystoresAliasesPkcs12Input

func (KeystoresAliasesPkcs12Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeystoresAliasesPkcs12)(nil)).Elem()
}

func (i KeystoresAliasesPkcs12Map) ToKeystoresAliasesPkcs12MapOutput() KeystoresAliasesPkcs12MapOutput {
	return i.ToKeystoresAliasesPkcs12MapOutputWithContext(context.Background())
}

func (i KeystoresAliasesPkcs12Map) ToKeystoresAliasesPkcs12MapOutputWithContext(ctx context.Context) KeystoresAliasesPkcs12MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeystoresAliasesPkcs12MapOutput)
}

type KeystoresAliasesPkcs12Output struct{ *pulumi.OutputState }

func (KeystoresAliasesPkcs12Output) ElementType() reflect.Type {
	return reflect.TypeOf((**KeystoresAliasesPkcs12)(nil)).Elem()
}

func (o KeystoresAliasesPkcs12Output) ToKeystoresAliasesPkcs12Output() KeystoresAliasesPkcs12Output {
	return o
}

func (o KeystoresAliasesPkcs12Output) ToKeystoresAliasesPkcs12OutputWithContext(ctx context.Context) KeystoresAliasesPkcs12Output {
	return o
}

// Alias Name
func (o KeystoresAliasesPkcs12Output) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// Chain of certificates under this alias.
// Structure is documented below.
func (o KeystoresAliasesPkcs12Output) CertsInfos() KeystoresAliasesPkcs12CertsInfoArrayOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) KeystoresAliasesPkcs12CertsInfoArrayOutput { return v.CertsInfos }).(KeystoresAliasesPkcs12CertsInfoArrayOutput)
}

// Environment associated with the alias
func (o KeystoresAliasesPkcs12Output) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// PKCS12 file content
//
// ***
func (o KeystoresAliasesPkcs12Output) File() pulumi.StringOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) pulumi.StringOutput { return v.File }).(pulumi.StringOutput)
}

// Hash of the pkcs file
func (o KeystoresAliasesPkcs12Output) Filehash() pulumi.StringOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) pulumi.StringOutput { return v.Filehash }).(pulumi.StringOutput)
}

// Keystore Name
func (o KeystoresAliasesPkcs12Output) Keystore() pulumi.StringOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) pulumi.StringOutput { return v.Keystore }).(pulumi.StringOutput)
}

// Organization ID associated with the alias, without organization/ prefix
func (o KeystoresAliasesPkcs12Output) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Password for the PKCS12 file if it's encrypted
func (o KeystoresAliasesPkcs12Output) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Optional.Type of Alias
func (o KeystoresAliasesPkcs12Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KeystoresAliasesPkcs12) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type KeystoresAliasesPkcs12ArrayOutput struct{ *pulumi.OutputState }

func (KeystoresAliasesPkcs12ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeystoresAliasesPkcs12)(nil)).Elem()
}

func (o KeystoresAliasesPkcs12ArrayOutput) ToKeystoresAliasesPkcs12ArrayOutput() KeystoresAliasesPkcs12ArrayOutput {
	return o
}

func (o KeystoresAliasesPkcs12ArrayOutput) ToKeystoresAliasesPkcs12ArrayOutputWithContext(ctx context.Context) KeystoresAliasesPkcs12ArrayOutput {
	return o
}

func (o KeystoresAliasesPkcs12ArrayOutput) Index(i pulumi.IntInput) KeystoresAliasesPkcs12Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeystoresAliasesPkcs12 {
		return vs[0].([]*KeystoresAliasesPkcs12)[vs[1].(int)]
	}).(KeystoresAliasesPkcs12Output)
}

type KeystoresAliasesPkcs12MapOutput struct{ *pulumi.OutputState }

func (KeystoresAliasesPkcs12MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeystoresAliasesPkcs12)(nil)).Elem()
}

func (o KeystoresAliasesPkcs12MapOutput) ToKeystoresAliasesPkcs12MapOutput() KeystoresAliasesPkcs12MapOutput {
	return o
}

func (o KeystoresAliasesPkcs12MapOutput) ToKeystoresAliasesPkcs12MapOutputWithContext(ctx context.Context) KeystoresAliasesPkcs12MapOutput {
	return o
}

func (o KeystoresAliasesPkcs12MapOutput) MapIndex(k pulumi.StringInput) KeystoresAliasesPkcs12Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeystoresAliasesPkcs12 {
		return vs[0].(map[string]*KeystoresAliasesPkcs12)[vs[1].(string)]
	}).(KeystoresAliasesPkcs12Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeystoresAliasesPkcs12Input)(nil)).Elem(), &KeystoresAliasesPkcs12{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeystoresAliasesPkcs12ArrayInput)(nil)).Elem(), KeystoresAliasesPkcs12Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeystoresAliasesPkcs12MapInput)(nil)).Elem(), KeystoresAliasesPkcs12Map{})
	pulumi.RegisterOutputType(KeystoresAliasesPkcs12Output{})
	pulumi.RegisterOutputType(KeystoresAliasesPkcs12ArrayOutput{})
	pulumi.RegisterOutputType(KeystoresAliasesPkcs12MapOutput{})
}
