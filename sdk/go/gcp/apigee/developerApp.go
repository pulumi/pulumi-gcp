// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an app associated with a developer.
// This API associates the developer app with the specified API product
// and auto-generates an API key for the app to use in calls to API proxies
// inside that API product.
//
// To get more information about DeveloperApp, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.developers.apps)
// * How-to Guides
//   - [Creating a developer](https://cloud.google.com/apigee/docs/api-platform/publish/creating-apps-surface-your-api)
//
// ## Example Usage
//
// ### Apigee Developer App Basic
//
// ### Apigee Developer App Basic Test
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/projects"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("prj"),
//				Name:           pulumi.String("prj"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			wait60Seconds, err := time.NewSleep(ctx, "wait_60_seconds", &time.SleepArgs{
//				CreateDuration: "60s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				project,
//			}))
//			if err != nil {
//				return err
//			}
//			apigee, err := projects.NewService(ctx, "apigee", &projects.ServiceArgs{
//				Project: project.ProjectId,
//				Service: pulumi.String("apigee.googleapis.com"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait60Seconds,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         project.ProjectId,
//				DisableVpcPeering: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigee,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
//				Name:     pulumi.String("instance"),
//				Location: pulumi.String("us-central1"),
//				OrgId:    apigeeOrg.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apiProduct, err := apigee.NewApiProduct(ctx, "api_product", &apigee.ApiProductArgs{
//				Name:         pulumi.String("sample-api"),
//				OrgId:        apigeeOrg.ID(),
//				DisplayName:  pulumi.String("A sample API Product"),
//				ApprovalType: pulumi.String("auto"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("read:weather"),
//					pulumi.String("write:reports"),
//					pulumi.String("write:files"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			developer, err := apigee.NewDeveloper(ctx, "developer", &apigee.DeveloperArgs{
//				Email:     pulumi.String("john.doe@acme.com"),
//				FirstName: pulumi.String("John"),
//				LastName:  pulumi.String("Doe"),
//				UserName:  pulumi.String("john.doe"),
//				OrgId:     apigeeOrg.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewDeveloperApp(ctx, "apigee_developer_app", &apigee.DeveloperAppArgs{
//				Name:           pulumi.String("sample-app"),
//				AppFamily:      pulumi.String("default"),
//				DeveloperEmail: developer.Email,
//				OrgId:          apigeeOrg.ID(),
//				CallbackUrl:    pulumi.String("https://example-call.url"),
//				KeyExpiresIn:   pulumi.String("-1"),
//				Status:         pulumi.String("approved"),
//				ApiProducts: pulumi.StringArray{
//					apiProduct.Name,
//				},
//				Scopes: apiProduct.Scopes,
//				Attributes: apigee.DeveloperAppAttributeArray{
//					&apigee.DeveloperAppAttributeArgs{
//						Name:  pulumi.String("sample_name"),
//						Value: pulumi.String("sample_value"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DeveloperApp can be imported using any of these accepted formats:
//
// * `{{org_id}}/developers/{{developer_email}}/apps/{{name}}`
//
// * `{{org_id}}/{{developer_email}}/{{name}}`
//
// When using the `pulumi import` command, DeveloperApp can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apigee/developerApp:DeveloperApp default {{org_id}}/developers/{{developer_email}}/apps/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:apigee/developerApp:DeveloperApp default {{org_id}}/{{developer_email}}/{{name}}
// ```
type DeveloperApp struct {
	pulumi.CustomResourceState

	// List of API products associated with the developer app.
	ApiProducts pulumi.StringArrayOutput `pulumi:"apiProducts"`
	// Developer app family.
	AppFamily pulumi.StringOutput `pulumi:"appFamily"`
	// ID of the developer app. This ID is not user specified but is
	// automatically generated on app creation. appId is a UUID.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes DeveloperAppAttributeArrayOutput `pulumi:"attributes"`
	// Callback URL used by OAuth 2.0 authorization servers to communicate
	// authorization codes back to developer apps.
	CallbackUrl pulumi.StringOutput `pulumi:"callbackUrl"`
	// Time at which the developer was created in milliseconds since epoch.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Output only. Set of credentials for the developer app consisting of
	// the consumer key/secret pairs associated with the API products.
	// Structure is documented below.
	Credentials DeveloperAppCredentialArrayOutput `pulumi:"credentials"`
	// Email address of the developer.
	// This value is used to uniquely identify the developer in Apigee hybrid.
	// Note that the email address has to be in lowercase only.
	DeveloperEmail pulumi.StringOutput `pulumi:"developerEmail"`
	// ID of the developer.
	DeveloperId pulumi.StringOutput `pulumi:"developerId"`
	// Expiration time, in milliseconds, for the consumer key that is generated
	// for the developer app. If not set or left to the default value of -1,
	// the API key never expires. The expiration time can't be updated after it is set.
	KeyExpiresIn pulumi.StringPtrOutput `pulumi:"keyExpiresIn"`
	// Time at which the developer was last modified in milliseconds since epoch.
	LastModifiedAt pulumi.StringOutput `pulumi:"lastModifiedAt"`
	// Name of the developer app.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Scopes to apply to the developer app.
	// The specified scopes must already exist for the API product that
	// you associate with the developer app.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// Status of the credential. Valid values include approved or revoked.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDeveloperApp registers a new resource with the given unique name, arguments, and options.
func NewDeveloperApp(ctx *pulumi.Context,
	name string, args *DeveloperAppArgs, opts ...pulumi.ResourceOption) (*DeveloperApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CallbackUrl == nil {
		return nil, errors.New("invalid value for required argument 'CallbackUrl'")
	}
	if args.DeveloperEmail == nil {
		return nil, errors.New("invalid value for required argument 'DeveloperEmail'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeveloperApp
	err := ctx.RegisterResource("gcp:apigee/developerApp:DeveloperApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeveloperApp gets an existing DeveloperApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeveloperApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeveloperAppState, opts ...pulumi.ResourceOption) (*DeveloperApp, error) {
	var resource DeveloperApp
	err := ctx.ReadResource("gcp:apigee/developerApp:DeveloperApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeveloperApp resources.
type developerAppState struct {
	// List of API products associated with the developer app.
	ApiProducts []string `pulumi:"apiProducts"`
	// Developer app family.
	AppFamily *string `pulumi:"appFamily"`
	// ID of the developer app. This ID is not user specified but is
	// automatically generated on app creation. appId is a UUID.
	AppId *string `pulumi:"appId"`
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes []DeveloperAppAttribute `pulumi:"attributes"`
	// Callback URL used by OAuth 2.0 authorization servers to communicate
	// authorization codes back to developer apps.
	CallbackUrl *string `pulumi:"callbackUrl"`
	// Time at which the developer was created in milliseconds since epoch.
	CreatedAt *string `pulumi:"createdAt"`
	// Output only. Set of credentials for the developer app consisting of
	// the consumer key/secret pairs associated with the API products.
	// Structure is documented below.
	Credentials []DeveloperAppCredential `pulumi:"credentials"`
	// Email address of the developer.
	// This value is used to uniquely identify the developer in Apigee hybrid.
	// Note that the email address has to be in lowercase only.
	DeveloperEmail *string `pulumi:"developerEmail"`
	// ID of the developer.
	DeveloperId *string `pulumi:"developerId"`
	// Expiration time, in milliseconds, for the consumer key that is generated
	// for the developer app. If not set or left to the default value of -1,
	// the API key never expires. The expiration time can't be updated after it is set.
	KeyExpiresIn *string `pulumi:"keyExpiresIn"`
	// Time at which the developer was last modified in milliseconds since epoch.
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// Name of the developer app.
	Name *string `pulumi:"name"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId *string `pulumi:"orgId"`
	// Scopes to apply to the developer app.
	// The specified scopes must already exist for the API product that
	// you associate with the developer app.
	Scopes []string `pulumi:"scopes"`
	// Status of the credential. Valid values include approved or revoked.
	Status *string `pulumi:"status"`
}

type DeveloperAppState struct {
	// List of API products associated with the developer app.
	ApiProducts pulumi.StringArrayInput
	// Developer app family.
	AppFamily pulumi.StringPtrInput
	// ID of the developer app. This ID is not user specified but is
	// automatically generated on app creation. appId is a UUID.
	AppId pulumi.StringPtrInput
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes DeveloperAppAttributeArrayInput
	// Callback URL used by OAuth 2.0 authorization servers to communicate
	// authorization codes back to developer apps.
	CallbackUrl pulumi.StringPtrInput
	// Time at which the developer was created in milliseconds since epoch.
	CreatedAt pulumi.StringPtrInput
	// Output only. Set of credentials for the developer app consisting of
	// the consumer key/secret pairs associated with the API products.
	// Structure is documented below.
	Credentials DeveloperAppCredentialArrayInput
	// Email address of the developer.
	// This value is used to uniquely identify the developer in Apigee hybrid.
	// Note that the email address has to be in lowercase only.
	DeveloperEmail pulumi.StringPtrInput
	// ID of the developer.
	DeveloperId pulumi.StringPtrInput
	// Expiration time, in milliseconds, for the consumer key that is generated
	// for the developer app. If not set or left to the default value of -1,
	// the API key never expires. The expiration time can't be updated after it is set.
	KeyExpiresIn pulumi.StringPtrInput
	// Time at which the developer was last modified in milliseconds since epoch.
	LastModifiedAt pulumi.StringPtrInput
	// Name of the developer app.
	Name pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringPtrInput
	// Scopes to apply to the developer app.
	// The specified scopes must already exist for the API product that
	// you associate with the developer app.
	Scopes pulumi.StringArrayInput
	// Status of the credential. Valid values include approved or revoked.
	Status pulumi.StringPtrInput
}

func (DeveloperAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*developerAppState)(nil)).Elem()
}

type developerAppArgs struct {
	// List of API products associated with the developer app.
	ApiProducts []string `pulumi:"apiProducts"`
	// Developer app family.
	AppFamily *string `pulumi:"appFamily"`
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes []DeveloperAppAttribute `pulumi:"attributes"`
	// Callback URL used by OAuth 2.0 authorization servers to communicate
	// authorization codes back to developer apps.
	CallbackUrl string `pulumi:"callbackUrl"`
	// Email address of the developer.
	// This value is used to uniquely identify the developer in Apigee hybrid.
	// Note that the email address has to be in lowercase only.
	DeveloperEmail string `pulumi:"developerEmail"`
	// Expiration time, in milliseconds, for the consumer key that is generated
	// for the developer app. If not set or left to the default value of -1,
	// the API key never expires. The expiration time can't be updated after it is set.
	KeyExpiresIn *string `pulumi:"keyExpiresIn"`
	// Name of the developer app.
	Name *string `pulumi:"name"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId string `pulumi:"orgId"`
	// Scopes to apply to the developer app.
	// The specified scopes must already exist for the API product that
	// you associate with the developer app.
	Scopes []string `pulumi:"scopes"`
	// Status of the credential. Valid values include approved or revoked.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a DeveloperApp resource.
type DeveloperAppArgs struct {
	// List of API products associated with the developer app.
	ApiProducts pulumi.StringArrayInput
	// Developer app family.
	AppFamily pulumi.StringPtrInput
	// Developer attributes (name/value pairs). The custom attribute limit is 18.
	// Structure is documented below.
	Attributes DeveloperAppAttributeArrayInput
	// Callback URL used by OAuth 2.0 authorization servers to communicate
	// authorization codes back to developer apps.
	CallbackUrl pulumi.StringInput
	// Email address of the developer.
	// This value is used to uniquely identify the developer in Apigee hybrid.
	// Note that the email address has to be in lowercase only.
	DeveloperEmail pulumi.StringInput
	// Expiration time, in milliseconds, for the consumer key that is generated
	// for the developer app. If not set or left to the default value of -1,
	// the API key never expires. The expiration time can't be updated after it is set.
	KeyExpiresIn pulumi.StringPtrInput
	// Name of the developer app.
	Name pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringInput
	// Scopes to apply to the developer app.
	// The specified scopes must already exist for the API product that
	// you associate with the developer app.
	Scopes pulumi.StringArrayInput
	// Status of the credential. Valid values include approved or revoked.
	Status pulumi.StringPtrInput
}

func (DeveloperAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*developerAppArgs)(nil)).Elem()
}

type DeveloperAppInput interface {
	pulumi.Input

	ToDeveloperAppOutput() DeveloperAppOutput
	ToDeveloperAppOutputWithContext(ctx context.Context) DeveloperAppOutput
}

func (*DeveloperApp) ElementType() reflect.Type {
	return reflect.TypeOf((**DeveloperApp)(nil)).Elem()
}

func (i *DeveloperApp) ToDeveloperAppOutput() DeveloperAppOutput {
	return i.ToDeveloperAppOutputWithContext(context.Background())
}

func (i *DeveloperApp) ToDeveloperAppOutputWithContext(ctx context.Context) DeveloperAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeveloperAppOutput)
}

// DeveloperAppArrayInput is an input type that accepts DeveloperAppArray and DeveloperAppArrayOutput values.
// You can construct a concrete instance of `DeveloperAppArrayInput` via:
//
//	DeveloperAppArray{ DeveloperAppArgs{...} }
type DeveloperAppArrayInput interface {
	pulumi.Input

	ToDeveloperAppArrayOutput() DeveloperAppArrayOutput
	ToDeveloperAppArrayOutputWithContext(context.Context) DeveloperAppArrayOutput
}

type DeveloperAppArray []DeveloperAppInput

func (DeveloperAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeveloperApp)(nil)).Elem()
}

func (i DeveloperAppArray) ToDeveloperAppArrayOutput() DeveloperAppArrayOutput {
	return i.ToDeveloperAppArrayOutputWithContext(context.Background())
}

func (i DeveloperAppArray) ToDeveloperAppArrayOutputWithContext(ctx context.Context) DeveloperAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeveloperAppArrayOutput)
}

// DeveloperAppMapInput is an input type that accepts DeveloperAppMap and DeveloperAppMapOutput values.
// You can construct a concrete instance of `DeveloperAppMapInput` via:
//
//	DeveloperAppMap{ "key": DeveloperAppArgs{...} }
type DeveloperAppMapInput interface {
	pulumi.Input

	ToDeveloperAppMapOutput() DeveloperAppMapOutput
	ToDeveloperAppMapOutputWithContext(context.Context) DeveloperAppMapOutput
}

type DeveloperAppMap map[string]DeveloperAppInput

func (DeveloperAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeveloperApp)(nil)).Elem()
}

func (i DeveloperAppMap) ToDeveloperAppMapOutput() DeveloperAppMapOutput {
	return i.ToDeveloperAppMapOutputWithContext(context.Background())
}

func (i DeveloperAppMap) ToDeveloperAppMapOutputWithContext(ctx context.Context) DeveloperAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeveloperAppMapOutput)
}

type DeveloperAppOutput struct{ *pulumi.OutputState }

func (DeveloperAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeveloperApp)(nil)).Elem()
}

func (o DeveloperAppOutput) ToDeveloperAppOutput() DeveloperAppOutput {
	return o
}

func (o DeveloperAppOutput) ToDeveloperAppOutputWithContext(ctx context.Context) DeveloperAppOutput {
	return o
}

// List of API products associated with the developer app.
func (o DeveloperAppOutput) ApiProducts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringArrayOutput { return v.ApiProducts }).(pulumi.StringArrayOutput)
}

// Developer app family.
func (o DeveloperAppOutput) AppFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.AppFamily }).(pulumi.StringOutput)
}

// ID of the developer app. This ID is not user specified but is
// automatically generated on app creation. appId is a UUID.
func (o DeveloperAppOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Developer attributes (name/value pairs). The custom attribute limit is 18.
// Structure is documented below.
func (o DeveloperAppOutput) Attributes() DeveloperAppAttributeArrayOutput {
	return o.ApplyT(func(v *DeveloperApp) DeveloperAppAttributeArrayOutput { return v.Attributes }).(DeveloperAppAttributeArrayOutput)
}

// Callback URL used by OAuth 2.0 authorization servers to communicate
// authorization codes back to developer apps.
func (o DeveloperAppOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.CallbackUrl }).(pulumi.StringOutput)
}

// Time at which the developer was created in milliseconds since epoch.
func (o DeveloperAppOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Output only. Set of credentials for the developer app consisting of
// the consumer key/secret pairs associated with the API products.
// Structure is documented below.
func (o DeveloperAppOutput) Credentials() DeveloperAppCredentialArrayOutput {
	return o.ApplyT(func(v *DeveloperApp) DeveloperAppCredentialArrayOutput { return v.Credentials }).(DeveloperAppCredentialArrayOutput)
}

// Email address of the developer.
// This value is used to uniquely identify the developer in Apigee hybrid.
// Note that the email address has to be in lowercase only.
func (o DeveloperAppOutput) DeveloperEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.DeveloperEmail }).(pulumi.StringOutput)
}

// ID of the developer.
func (o DeveloperAppOutput) DeveloperId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.DeveloperId }).(pulumi.StringOutput)
}

// Expiration time, in milliseconds, for the consumer key that is generated
// for the developer app. If not set or left to the default value of -1,
// the API key never expires. The expiration time can't be updated after it is set.
func (o DeveloperAppOutput) KeyExpiresIn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringPtrOutput { return v.KeyExpiresIn }).(pulumi.StringPtrOutput)
}

// Time at which the developer was last modified in milliseconds since epoch.
func (o DeveloperAppOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Name of the developer app.
func (o DeveloperAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Apigee Organization associated with the Apigee instance,
// in the format `organizations/{{org_name}}`.
func (o DeveloperAppOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Scopes to apply to the developer app.
// The specified scopes must already exist for the API product that
// you associate with the developer app.
func (o DeveloperAppOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Status of the credential. Valid values include approved or revoked.
func (o DeveloperAppOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperApp) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type DeveloperAppArrayOutput struct{ *pulumi.OutputState }

func (DeveloperAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeveloperApp)(nil)).Elem()
}

func (o DeveloperAppArrayOutput) ToDeveloperAppArrayOutput() DeveloperAppArrayOutput {
	return o
}

func (o DeveloperAppArrayOutput) ToDeveloperAppArrayOutputWithContext(ctx context.Context) DeveloperAppArrayOutput {
	return o
}

func (o DeveloperAppArrayOutput) Index(i pulumi.IntInput) DeveloperAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeveloperApp {
		return vs[0].([]*DeveloperApp)[vs[1].(int)]
	}).(DeveloperAppOutput)
}

type DeveloperAppMapOutput struct{ *pulumi.OutputState }

func (DeveloperAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeveloperApp)(nil)).Elem()
}

func (o DeveloperAppMapOutput) ToDeveloperAppMapOutput() DeveloperAppMapOutput {
	return o
}

func (o DeveloperAppMapOutput) ToDeveloperAppMapOutputWithContext(ctx context.Context) DeveloperAppMapOutput {
	return o
}

func (o DeveloperAppMapOutput) MapIndex(k pulumi.StringInput) DeveloperAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeveloperApp {
		return vs[0].(map[string]*DeveloperApp)[vs[1].(string)]
	}).(DeveloperAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeveloperAppInput)(nil)).Elem(), &DeveloperApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeveloperAppArrayInput)(nil)).Elem(), DeveloperAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeveloperAppMapInput)(nil)).Elem(), DeveloperAppMap{})
	pulumi.RegisterOutputType(DeveloperAppOutput{})
	pulumi.RegisterOutputType(DeveloperAppArrayOutput{})
	pulumi.RegisterOutputType(DeveloperAppMapOutput{})
}
