// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// TargetServer configuration. TargetServers are used to decouple a proxy TargetEndpoint HTTPTargetConnections from concrete URLs for backend services.
//
// To get more information about TargetServer, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.targetservers/create)
// * How-to Guides
//   - [Load balancing across backend servers](https://cloud.google.com/apigee/docs/api-platform/deploy/load-balancing-across-backend-servers)
//
// ## Example Usage
//
// ## Import
//
// # TargetServer can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:apigee/targetServer:TargetServer default {{env_id}}/targetservers/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:apigee/targetServer:TargetServer default {{env_id}}/{{name}}
//
// ```
type TargetServer struct {
	pulumi.CustomResourceState

	// A human-readable description of this TargetServer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	//
	// ***
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host pulumi.StringOutput `pulumi:"host"`
	// Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// The resource id of this reference. Values must match the regular expression [\w\s-.]+.
	Name pulumi.StringOutput `pulumi:"name"`
	// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port pulumi.IntOutput `pulumi:"port"`
	// Immutable. The protocol used by this TargetServer.
	// Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	// Structure is documented below.
	SSlInfo TargetServerSSlInfoPtrOutput `pulumi:"sSlInfo"`
}

// NewTargetServer registers a new resource with the given unique name, arguments, and options.
func NewTargetServer(ctx *pulumi.Context,
	name string, args *TargetServerArgs, opts ...pulumi.ResourceOption) (*TargetServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvId == nil {
		return nil, errors.New("invalid value for required argument 'EnvId'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetServer
	err := ctx.RegisterResource("gcp:apigee/targetServer:TargetServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetServer gets an existing TargetServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetServerState, opts ...pulumi.ResourceOption) (*TargetServer, error) {
	var resource TargetServer
	err := ctx.ReadResource("gcp:apigee/targetServer:TargetServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetServer resources.
type targetServerState struct {
	// A human-readable description of this TargetServer.
	Description *string `pulumi:"description"`
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	//
	// ***
	EnvId *string `pulumi:"envId"`
	// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host *string `pulumi:"host"`
	// Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The resource id of this reference. Values must match the regular expression [\w\s-.]+.
	Name *string `pulumi:"name"`
	// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port *int `pulumi:"port"`
	// Immutable. The protocol used by this TargetServer.
	// Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
	Protocol *string `pulumi:"protocol"`
	// Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	// Structure is documented below.
	SSlInfo *TargetServerSSlInfo `pulumi:"sSlInfo"`
}

type TargetServerState struct {
	// A human-readable description of this TargetServer.
	Description pulumi.StringPtrInput
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	//
	// ***
	EnvId pulumi.StringPtrInput
	// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host pulumi.StringPtrInput
	// Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled pulumi.BoolPtrInput
	// The resource id of this reference. Values must match the regular expression [\w\s-.]+.
	Name pulumi.StringPtrInput
	// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port pulumi.IntPtrInput
	// Immutable. The protocol used by this TargetServer.
	// Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
	Protocol pulumi.StringPtrInput
	// Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	// Structure is documented below.
	SSlInfo TargetServerSSlInfoPtrInput
}

func (TargetServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetServerState)(nil)).Elem()
}

type targetServerArgs struct {
	// A human-readable description of this TargetServer.
	Description *string `pulumi:"description"`
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	//
	// ***
	EnvId string `pulumi:"envId"`
	// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host string `pulumi:"host"`
	// Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The resource id of this reference. Values must match the regular expression [\w\s-.]+.
	Name *string `pulumi:"name"`
	// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port int `pulumi:"port"`
	// Immutable. The protocol used by this TargetServer.
	// Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
	Protocol *string `pulumi:"protocol"`
	// Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	// Structure is documented below.
	SSlInfo *TargetServerSSlInfo `pulumi:"sSlInfo"`
}

// The set of arguments for constructing a TargetServer resource.
type TargetServerArgs struct {
	// A human-readable description of this TargetServer.
	Description pulumi.StringPtrInput
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	//
	// ***
	EnvId pulumi.StringInput
	// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host pulumi.StringInput
	// Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled pulumi.BoolPtrInput
	// The resource id of this reference. Values must match the regular expression [\w\s-.]+.
	Name pulumi.StringPtrInput
	// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port pulumi.IntInput
	// Immutable. The protocol used by this TargetServer.
	// Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
	Protocol pulumi.StringPtrInput
	// Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	// Structure is documented below.
	SSlInfo TargetServerSSlInfoPtrInput
}

func (TargetServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetServerArgs)(nil)).Elem()
}

type TargetServerInput interface {
	pulumi.Input

	ToTargetServerOutput() TargetServerOutput
	ToTargetServerOutputWithContext(ctx context.Context) TargetServerOutput
}

func (*TargetServer) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetServer)(nil)).Elem()
}

func (i *TargetServer) ToTargetServerOutput() TargetServerOutput {
	return i.ToTargetServerOutputWithContext(context.Background())
}

func (i *TargetServer) ToTargetServerOutputWithContext(ctx context.Context) TargetServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetServerOutput)
}

func (i *TargetServer) ToOutput(ctx context.Context) pulumix.Output[*TargetServer] {
	return pulumix.Output[*TargetServer]{
		OutputState: i.ToTargetServerOutputWithContext(ctx).OutputState,
	}
}

// TargetServerArrayInput is an input type that accepts TargetServerArray and TargetServerArrayOutput values.
// You can construct a concrete instance of `TargetServerArrayInput` via:
//
//	TargetServerArray{ TargetServerArgs{...} }
type TargetServerArrayInput interface {
	pulumi.Input

	ToTargetServerArrayOutput() TargetServerArrayOutput
	ToTargetServerArrayOutputWithContext(context.Context) TargetServerArrayOutput
}

type TargetServerArray []TargetServerInput

func (TargetServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetServer)(nil)).Elem()
}

func (i TargetServerArray) ToTargetServerArrayOutput() TargetServerArrayOutput {
	return i.ToTargetServerArrayOutputWithContext(context.Background())
}

func (i TargetServerArray) ToTargetServerArrayOutputWithContext(ctx context.Context) TargetServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetServerArrayOutput)
}

func (i TargetServerArray) ToOutput(ctx context.Context) pulumix.Output[[]*TargetServer] {
	return pulumix.Output[[]*TargetServer]{
		OutputState: i.ToTargetServerArrayOutputWithContext(ctx).OutputState,
	}
}

// TargetServerMapInput is an input type that accepts TargetServerMap and TargetServerMapOutput values.
// You can construct a concrete instance of `TargetServerMapInput` via:
//
//	TargetServerMap{ "key": TargetServerArgs{...} }
type TargetServerMapInput interface {
	pulumi.Input

	ToTargetServerMapOutput() TargetServerMapOutput
	ToTargetServerMapOutputWithContext(context.Context) TargetServerMapOutput
}

type TargetServerMap map[string]TargetServerInput

func (TargetServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetServer)(nil)).Elem()
}

func (i TargetServerMap) ToTargetServerMapOutput() TargetServerMapOutput {
	return i.ToTargetServerMapOutputWithContext(context.Background())
}

func (i TargetServerMap) ToTargetServerMapOutputWithContext(ctx context.Context) TargetServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetServerMapOutput)
}

func (i TargetServerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TargetServer] {
	return pulumix.Output[map[string]*TargetServer]{
		OutputState: i.ToTargetServerMapOutputWithContext(ctx).OutputState,
	}
}

type TargetServerOutput struct{ *pulumi.OutputState }

func (TargetServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetServer)(nil)).Elem()
}

func (o TargetServerOutput) ToTargetServerOutput() TargetServerOutput {
	return o
}

func (o TargetServerOutput) ToTargetServerOutputWithContext(ctx context.Context) TargetServerOutput {
	return o
}

func (o TargetServerOutput) ToOutput(ctx context.Context) pulumix.Output[*TargetServer] {
	return pulumix.Output[*TargetServer]{
		OutputState: o.OutputState,
	}
}

// A human-readable description of this TargetServer.
func (o TargetServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Apigee environment group associated with the Apigee environment,
// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
//
// ***
func (o TargetServerOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
func (o TargetServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
func (o TargetServerOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The resource id of this reference. Values must match the regular expression [\w\s-.]+.
func (o TargetServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
func (o TargetServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Immutable. The protocol used by this TargetServer.
// Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
func (o TargetServerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
// Structure is documented below.
func (o TargetServerOutput) SSlInfo() TargetServerSSlInfoPtrOutput {
	return o.ApplyT(func(v *TargetServer) TargetServerSSlInfoPtrOutput { return v.SSlInfo }).(TargetServerSSlInfoPtrOutput)
}

type TargetServerArrayOutput struct{ *pulumi.OutputState }

func (TargetServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetServer)(nil)).Elem()
}

func (o TargetServerArrayOutput) ToTargetServerArrayOutput() TargetServerArrayOutput {
	return o
}

func (o TargetServerArrayOutput) ToTargetServerArrayOutputWithContext(ctx context.Context) TargetServerArrayOutput {
	return o
}

func (o TargetServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TargetServer] {
	return pulumix.Output[[]*TargetServer]{
		OutputState: o.OutputState,
	}
}

func (o TargetServerArrayOutput) Index(i pulumi.IntInput) TargetServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetServer {
		return vs[0].([]*TargetServer)[vs[1].(int)]
	}).(TargetServerOutput)
}

type TargetServerMapOutput struct{ *pulumi.OutputState }

func (TargetServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetServer)(nil)).Elem()
}

func (o TargetServerMapOutput) ToTargetServerMapOutput() TargetServerMapOutput {
	return o
}

func (o TargetServerMapOutput) ToTargetServerMapOutputWithContext(ctx context.Context) TargetServerMapOutput {
	return o
}

func (o TargetServerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TargetServer] {
	return pulumix.Output[map[string]*TargetServer]{
		OutputState: o.OutputState,
	}
}

func (o TargetServerMapOutput) MapIndex(k pulumi.StringInput) TargetServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetServer {
		return vs[0].(map[string]*TargetServer)[vs[1].(string)]
	}).(TargetServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetServerInput)(nil)).Elem(), &TargetServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetServerArrayInput)(nil)).Elem(), TargetServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetServerMapInput)(nil)).Elem(), TargetServerMap{})
	pulumi.RegisterOutputType(TargetServerOutput{})
	pulumi.RegisterOutputType(TargetServerArrayOutput{})
	pulumi.RegisterOutputType(TargetServerMapOutput{})
}
