// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An `Environment KeyStore` in Apigee.
//
// To get more information about EnvKeystore, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores/create)
// * How-to Guides
//   - [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)
//
// ## Import
//
// # EnvKeystore can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:apigee/envKeystore:EnvKeystore default {{env_id}}/keystores/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:apigee/envKeystore:EnvKeystore default {{env_id}}/{{name}}
//
// ```
type EnvKeystore struct {
	pulumi.CustomResourceState

	// Aliases in this keystore.
	Aliases pulumi.StringArrayOutput `pulumi:"aliases"`
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// The name of the newly created keystore.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewEnvKeystore registers a new resource with the given unique name, arguments, and options.
func NewEnvKeystore(ctx *pulumi.Context,
	name string, args *EnvKeystoreArgs, opts ...pulumi.ResourceOption) (*EnvKeystore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvId == nil {
		return nil, errors.New("invalid value for required argument 'EnvId'")
	}
	var resource EnvKeystore
	err := ctx.RegisterResource("gcp:apigee/envKeystore:EnvKeystore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvKeystore gets an existing EnvKeystore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvKeystore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvKeystoreState, opts ...pulumi.ResourceOption) (*EnvKeystore, error) {
	var resource EnvKeystore
	err := ctx.ReadResource("gcp:apigee/envKeystore:EnvKeystore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvKeystore resources.
type envKeystoreState struct {
	// Aliases in this keystore.
	Aliases []string `pulumi:"aliases"`
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	EnvId *string `pulumi:"envId"`
	// The name of the newly created keystore.
	Name *string `pulumi:"name"`
}

type EnvKeystoreState struct {
	// Aliases in this keystore.
	Aliases pulumi.StringArrayInput
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	EnvId pulumi.StringPtrInput
	// The name of the newly created keystore.
	Name pulumi.StringPtrInput
}

func (EnvKeystoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*envKeystoreState)(nil)).Elem()
}

type envKeystoreArgs struct {
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	EnvId string `pulumi:"envId"`
	// The name of the newly created keystore.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a EnvKeystore resource.
type EnvKeystoreArgs struct {
	// The Apigee environment group associated with the Apigee environment,
	// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
	EnvId pulumi.StringInput
	// The name of the newly created keystore.
	Name pulumi.StringPtrInput
}

func (EnvKeystoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envKeystoreArgs)(nil)).Elem()
}

type EnvKeystoreInput interface {
	pulumi.Input

	ToEnvKeystoreOutput() EnvKeystoreOutput
	ToEnvKeystoreOutputWithContext(ctx context.Context) EnvKeystoreOutput
}

func (*EnvKeystore) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvKeystore)(nil)).Elem()
}

func (i *EnvKeystore) ToEnvKeystoreOutput() EnvKeystoreOutput {
	return i.ToEnvKeystoreOutputWithContext(context.Background())
}

func (i *EnvKeystore) ToEnvKeystoreOutputWithContext(ctx context.Context) EnvKeystoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvKeystoreOutput)
}

// EnvKeystoreArrayInput is an input type that accepts EnvKeystoreArray and EnvKeystoreArrayOutput values.
// You can construct a concrete instance of `EnvKeystoreArrayInput` via:
//
//	EnvKeystoreArray{ EnvKeystoreArgs{...} }
type EnvKeystoreArrayInput interface {
	pulumi.Input

	ToEnvKeystoreArrayOutput() EnvKeystoreArrayOutput
	ToEnvKeystoreArrayOutputWithContext(context.Context) EnvKeystoreArrayOutput
}

type EnvKeystoreArray []EnvKeystoreInput

func (EnvKeystoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvKeystore)(nil)).Elem()
}

func (i EnvKeystoreArray) ToEnvKeystoreArrayOutput() EnvKeystoreArrayOutput {
	return i.ToEnvKeystoreArrayOutputWithContext(context.Background())
}

func (i EnvKeystoreArray) ToEnvKeystoreArrayOutputWithContext(ctx context.Context) EnvKeystoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvKeystoreArrayOutput)
}

// EnvKeystoreMapInput is an input type that accepts EnvKeystoreMap and EnvKeystoreMapOutput values.
// You can construct a concrete instance of `EnvKeystoreMapInput` via:
//
//	EnvKeystoreMap{ "key": EnvKeystoreArgs{...} }
type EnvKeystoreMapInput interface {
	pulumi.Input

	ToEnvKeystoreMapOutput() EnvKeystoreMapOutput
	ToEnvKeystoreMapOutputWithContext(context.Context) EnvKeystoreMapOutput
}

type EnvKeystoreMap map[string]EnvKeystoreInput

func (EnvKeystoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvKeystore)(nil)).Elem()
}

func (i EnvKeystoreMap) ToEnvKeystoreMapOutput() EnvKeystoreMapOutput {
	return i.ToEnvKeystoreMapOutputWithContext(context.Background())
}

func (i EnvKeystoreMap) ToEnvKeystoreMapOutputWithContext(ctx context.Context) EnvKeystoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvKeystoreMapOutput)
}

type EnvKeystoreOutput struct{ *pulumi.OutputState }

func (EnvKeystoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvKeystore)(nil)).Elem()
}

func (o EnvKeystoreOutput) ToEnvKeystoreOutput() EnvKeystoreOutput {
	return o
}

func (o EnvKeystoreOutput) ToEnvKeystoreOutputWithContext(ctx context.Context) EnvKeystoreOutput {
	return o
}

// Aliases in this keystore.
func (o EnvKeystoreOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnvKeystore) pulumi.StringArrayOutput { return v.Aliases }).(pulumi.StringArrayOutput)
}

// The Apigee environment group associated with the Apigee environment,
// in the format `organizations/{{org_name}}/environments/{{env_name}}`.
func (o EnvKeystoreOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvKeystore) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// The name of the newly created keystore.
func (o EnvKeystoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvKeystore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type EnvKeystoreArrayOutput struct{ *pulumi.OutputState }

func (EnvKeystoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvKeystore)(nil)).Elem()
}

func (o EnvKeystoreArrayOutput) ToEnvKeystoreArrayOutput() EnvKeystoreArrayOutput {
	return o
}

func (o EnvKeystoreArrayOutput) ToEnvKeystoreArrayOutputWithContext(ctx context.Context) EnvKeystoreArrayOutput {
	return o
}

func (o EnvKeystoreArrayOutput) Index(i pulumi.IntInput) EnvKeystoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvKeystore {
		return vs[0].([]*EnvKeystore)[vs[1].(int)]
	}).(EnvKeystoreOutput)
}

type EnvKeystoreMapOutput struct{ *pulumi.OutputState }

func (EnvKeystoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvKeystore)(nil)).Elem()
}

func (o EnvKeystoreMapOutput) ToEnvKeystoreMapOutput() EnvKeystoreMapOutput {
	return o
}

func (o EnvKeystoreMapOutput) ToEnvKeystoreMapOutputWithContext(ctx context.Context) EnvKeystoreMapOutput {
	return o
}

func (o EnvKeystoreMapOutput) MapIndex(k pulumi.StringInput) EnvKeystoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvKeystore {
		return vs[0].(map[string]*EnvKeystore)[vs[1].(string)]
	}).(EnvKeystoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvKeystoreInput)(nil)).Elem(), &EnvKeystore{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvKeystoreArrayInput)(nil)).Elem(), EnvKeystoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvKeystoreMapInput)(nil)).Elem(), EnvKeystoreMap{})
	pulumi.RegisterOutputType(EnvKeystoreOutput{})
	pulumi.RegisterOutputType(EnvKeystoreArrayOutput{})
	pulumi.RegisterOutputType(EnvKeystoreMapOutput{})
}
