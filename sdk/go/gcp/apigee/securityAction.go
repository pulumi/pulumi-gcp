// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A SecurityAction is rule that can be enforced at an environment level.
// The result is one of: - A denied API call - An explicitly allowed API call
//   - A flagged API call (HTTP headers added before the target receives it)
//     At least one condition is required to create a SecurityAction.
//
// To get more information about SecurityAction, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.securityActions/create)
// * How-to Guides
//   - [Creating security actions](https://cloud.google.com/apigee/docs/api-security/security-actions-api#create-security-actions)
//
// ## Example Usage
//
// ### Apigee Security Action Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("my-network"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("my-address"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			env, err := apigee.NewEnvironment(ctx, "env", &apigee.EnvironmentArgs{
//				Name:        pulumi.String("my-environment"),
//				Description: pulumi.String("Apigee Environment"),
//				DisplayName: pulumi.String("environment-1"),
//				OrgId:       apigeeOrg.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrgSecurityAddonsConfig, err := apigee.NewAddonsConfig(ctx, "apigee_org_security_addons_config", &apigee.AddonsConfigArgs{
//				Org: apigeeOrg.Name,
//				AddonsConfig: &apigee.AddonsConfigAddonsConfigArgs{
//					ApiSecurityConfig: &apigee.AddonsConfigAddonsConfigApiSecurityConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewSecurityAction(ctx, "apigee_security_action", &apigee.SecurityActionArgs{
//				SecurityActionId: pulumi.String("my-security-action"),
//				OrgId:            apigeeOrg.Name,
//				EnvId:            env.Name,
//				Description:      pulumi.String("Apigee Security Action"),
//				State:            pulumi.String("ENABLED"),
//				ConditionConfig: &apigee.SecurityActionConditionConfigArgs{
//					IpAddressRanges: pulumi.StringArray{
//						pulumi.String("100.0.220.1"),
//						pulumi.String("200.0.0.1"),
//					},
//					BotReasons: pulumi.StringArray{
//						pulumi.String("Flooder"),
//						pulumi.String("Public Cloud Azure"),
//						pulumi.String("Public Cloud AWS"),
//					},
//				},
//				Allow:      &apigee.SecurityActionAllowArgs{},
//				ExpireTime: pulumi.String("2025-12-31T23:59:59Z"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeOrgSecurityAddonsConfig,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SecurityAction can be imported using any of these accepted formats:
//
// * `organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}`
//
// * `{{org_id}}/{{env_id}}/{{security_action_id}}`
//
// When using the `pulumi import` command, SecurityAction can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apigee/securityAction:SecurityAction default organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apigee/securityAction:SecurityAction default {{org_id}}/{{env_id}}/{{security_action_id}}
// ```
type SecurityAction struct {
	pulumi.CustomResourceState

	// Allow a request through if it matches this SecurityAction.
	Allow SecurityActionAllowPtrOutput `pulumi:"allow"`
	// If unset, this would apply to all proxies in the environment.
	// If set, this action is enforced only if at least one proxy in the repeated
	// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
	// There can be at most 100 enabled actions with proxies set in an env.
	// Several other restrictions apply on conditions and are detailed later.
	ApiProxies pulumi.StringArrayOutput `pulumi:"apiProxies"`
	// A valid SecurityAction must contain at least one condition.
	// Structure is documented below.
	ConditionConfig SecurityActionConditionConfigOutput `pulumi:"conditionConfig"`
	// The create time for this SecurityAction.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
	// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Deny a request through if it matches this SecurityAction.
	// Structure is documented below.
	Deny SecurityActionDenyPtrOutput `pulumi:"deny"`
	// An optional user provided description of the SecurityAction.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Apigee environment that this security action applies to.
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// The expiration for this SecurityAction.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
	// fractional digits. Offsets other than "Z" are also accepted.
	// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	ExpireTime pulumi.StringPtrOutput `pulumi:"expireTime"`
	// Flag a request through if it matches this SecurityAction.
	// Structure is documented below.
	Flag SecurityActionFlagPtrOutput `pulumi:"flag"`
	// The organization that this security action applies to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
	// This value should be 0-61 characters, and valid format is (^a-z?$).
	SecurityActionId pulumi.StringOutput `pulumi:"securityActionId"`
	// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
	// Possible values are: `ENABLED`, `DISABLED`.
	State pulumi.StringOutput `pulumi:"state"`
	// The TTL for this SecurityAction.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Ttl pulumi.StringPtrOutput `pulumi:"ttl"`
	// The update time for this SecurityAction. This reflects when this SecurityAction changed states.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
	// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSecurityAction registers a new resource with the given unique name, arguments, and options.
func NewSecurityAction(ctx *pulumi.Context,
	name string, args *SecurityActionArgs, opts ...pulumi.ResourceOption) (*SecurityAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConditionConfig == nil {
		return nil, errors.New("invalid value for required argument 'ConditionConfig'")
	}
	if args.EnvId == nil {
		return nil, errors.New("invalid value for required argument 'EnvId'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.SecurityActionId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityActionId'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityAction
	err := ctx.RegisterResource("gcp:apigee/securityAction:SecurityAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityAction gets an existing SecurityAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityActionState, opts ...pulumi.ResourceOption) (*SecurityAction, error) {
	var resource SecurityAction
	err := ctx.ReadResource("gcp:apigee/securityAction:SecurityAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityAction resources.
type securityActionState struct {
	// Allow a request through if it matches this SecurityAction.
	Allow *SecurityActionAllow `pulumi:"allow"`
	// If unset, this would apply to all proxies in the environment.
	// If set, this action is enforced only if at least one proxy in the repeated
	// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
	// There can be at most 100 enabled actions with proxies set in an env.
	// Several other restrictions apply on conditions and are detailed later.
	ApiProxies []string `pulumi:"apiProxies"`
	// A valid SecurityAction must contain at least one condition.
	// Structure is documented below.
	ConditionConfig *SecurityActionConditionConfig `pulumi:"conditionConfig"`
	// The create time for this SecurityAction.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
	// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	CreateTime *string `pulumi:"createTime"`
	// Deny a request through if it matches this SecurityAction.
	// Structure is documented below.
	Deny *SecurityActionDeny `pulumi:"deny"`
	// An optional user provided description of the SecurityAction.
	Description *string `pulumi:"description"`
	// The Apigee environment that this security action applies to.
	EnvId *string `pulumi:"envId"`
	// The expiration for this SecurityAction.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
	// fractional digits. Offsets other than "Z" are also accepted.
	// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	ExpireTime *string `pulumi:"expireTime"`
	// Flag a request through if it matches this SecurityAction.
	// Structure is documented below.
	Flag *SecurityActionFlag `pulumi:"flag"`
	// The organization that this security action applies to.
	OrgId *string `pulumi:"orgId"`
	// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
	// This value should be 0-61 characters, and valid format is (^a-z?$).
	SecurityActionId *string `pulumi:"securityActionId"`
	// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
	// Possible values are: `ENABLED`, `DISABLED`.
	State *string `pulumi:"state"`
	// The TTL for this SecurityAction.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Ttl *string `pulumi:"ttl"`
	// The update time for this SecurityAction. This reflects when this SecurityAction changed states.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
	// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	UpdateTime *string `pulumi:"updateTime"`
}

type SecurityActionState struct {
	// Allow a request through if it matches this SecurityAction.
	Allow SecurityActionAllowPtrInput
	// If unset, this would apply to all proxies in the environment.
	// If set, this action is enforced only if at least one proxy in the repeated
	// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
	// There can be at most 100 enabled actions with proxies set in an env.
	// Several other restrictions apply on conditions and are detailed later.
	ApiProxies pulumi.StringArrayInput
	// A valid SecurityAction must contain at least one condition.
	// Structure is documented below.
	ConditionConfig SecurityActionConditionConfigPtrInput
	// The create time for this SecurityAction.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
	// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	CreateTime pulumi.StringPtrInput
	// Deny a request through if it matches this SecurityAction.
	// Structure is documented below.
	Deny SecurityActionDenyPtrInput
	// An optional user provided description of the SecurityAction.
	Description pulumi.StringPtrInput
	// The Apigee environment that this security action applies to.
	EnvId pulumi.StringPtrInput
	// The expiration for this SecurityAction.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
	// fractional digits. Offsets other than "Z" are also accepted.
	// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	ExpireTime pulumi.StringPtrInput
	// Flag a request through if it matches this SecurityAction.
	// Structure is documented below.
	Flag SecurityActionFlagPtrInput
	// The organization that this security action applies to.
	OrgId pulumi.StringPtrInput
	// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
	// This value should be 0-61 characters, and valid format is (^a-z?$).
	SecurityActionId pulumi.StringPtrInput
	// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
	// Possible values are: `ENABLED`, `DISABLED`.
	State pulumi.StringPtrInput
	// The TTL for this SecurityAction.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Ttl pulumi.StringPtrInput
	// The update time for this SecurityAction. This reflects when this SecurityAction changed states.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
	// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	UpdateTime pulumi.StringPtrInput
}

func (SecurityActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityActionState)(nil)).Elem()
}

type securityActionArgs struct {
	// Allow a request through if it matches this SecurityAction.
	Allow *SecurityActionAllow `pulumi:"allow"`
	// If unset, this would apply to all proxies in the environment.
	// If set, this action is enforced only if at least one proxy in the repeated
	// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
	// There can be at most 100 enabled actions with proxies set in an env.
	// Several other restrictions apply on conditions and are detailed later.
	ApiProxies []string `pulumi:"apiProxies"`
	// A valid SecurityAction must contain at least one condition.
	// Structure is documented below.
	ConditionConfig SecurityActionConditionConfig `pulumi:"conditionConfig"`
	// Deny a request through if it matches this SecurityAction.
	// Structure is documented below.
	Deny *SecurityActionDeny `pulumi:"deny"`
	// An optional user provided description of the SecurityAction.
	Description *string `pulumi:"description"`
	// The Apigee environment that this security action applies to.
	EnvId string `pulumi:"envId"`
	// The expiration for this SecurityAction.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
	// fractional digits. Offsets other than "Z" are also accepted.
	// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	ExpireTime *string `pulumi:"expireTime"`
	// Flag a request through if it matches this SecurityAction.
	// Structure is documented below.
	Flag *SecurityActionFlag `pulumi:"flag"`
	// The organization that this security action applies to.
	OrgId string `pulumi:"orgId"`
	// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
	// This value should be 0-61 characters, and valid format is (^a-z?$).
	SecurityActionId string `pulumi:"securityActionId"`
	// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
	// Possible values are: `ENABLED`, `DISABLED`.
	State string `pulumi:"state"`
	// The TTL for this SecurityAction.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Ttl *string `pulumi:"ttl"`
}

// The set of arguments for constructing a SecurityAction resource.
type SecurityActionArgs struct {
	// Allow a request through if it matches this SecurityAction.
	Allow SecurityActionAllowPtrInput
	// If unset, this would apply to all proxies in the environment.
	// If set, this action is enforced only if at least one proxy in the repeated
	// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
	// There can be at most 100 enabled actions with proxies set in an env.
	// Several other restrictions apply on conditions and are detailed later.
	ApiProxies pulumi.StringArrayInput
	// A valid SecurityAction must contain at least one condition.
	// Structure is documented below.
	ConditionConfig SecurityActionConditionConfigInput
	// Deny a request through if it matches this SecurityAction.
	// Structure is documented below.
	Deny SecurityActionDenyPtrInput
	// An optional user provided description of the SecurityAction.
	Description pulumi.StringPtrInput
	// The Apigee environment that this security action applies to.
	EnvId pulumi.StringInput
	// The expiration for this SecurityAction.
	// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
	// fractional digits. Offsets other than "Z" are also accepted.
	// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
	ExpireTime pulumi.StringPtrInput
	// Flag a request through if it matches this SecurityAction.
	// Structure is documented below.
	Flag SecurityActionFlagPtrInput
	// The organization that this security action applies to.
	OrgId pulumi.StringInput
	// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
	// This value should be 0-61 characters, and valid format is (^a-z?$).
	SecurityActionId pulumi.StringInput
	// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
	// Possible values are: `ENABLED`, `DISABLED`.
	State pulumi.StringInput
	// The TTL for this SecurityAction.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Ttl pulumi.StringPtrInput
}

func (SecurityActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityActionArgs)(nil)).Elem()
}

type SecurityActionInput interface {
	pulumi.Input

	ToSecurityActionOutput() SecurityActionOutput
	ToSecurityActionOutputWithContext(ctx context.Context) SecurityActionOutput
}

func (*SecurityAction) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityAction)(nil)).Elem()
}

func (i *SecurityAction) ToSecurityActionOutput() SecurityActionOutput {
	return i.ToSecurityActionOutputWithContext(context.Background())
}

func (i *SecurityAction) ToSecurityActionOutputWithContext(ctx context.Context) SecurityActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityActionOutput)
}

// SecurityActionArrayInput is an input type that accepts SecurityActionArray and SecurityActionArrayOutput values.
// You can construct a concrete instance of `SecurityActionArrayInput` via:
//
//	SecurityActionArray{ SecurityActionArgs{...} }
type SecurityActionArrayInput interface {
	pulumi.Input

	ToSecurityActionArrayOutput() SecurityActionArrayOutput
	ToSecurityActionArrayOutputWithContext(context.Context) SecurityActionArrayOutput
}

type SecurityActionArray []SecurityActionInput

func (SecurityActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityAction)(nil)).Elem()
}

func (i SecurityActionArray) ToSecurityActionArrayOutput() SecurityActionArrayOutput {
	return i.ToSecurityActionArrayOutputWithContext(context.Background())
}

func (i SecurityActionArray) ToSecurityActionArrayOutputWithContext(ctx context.Context) SecurityActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityActionArrayOutput)
}

// SecurityActionMapInput is an input type that accepts SecurityActionMap and SecurityActionMapOutput values.
// You can construct a concrete instance of `SecurityActionMapInput` via:
//
//	SecurityActionMap{ "key": SecurityActionArgs{...} }
type SecurityActionMapInput interface {
	pulumi.Input

	ToSecurityActionMapOutput() SecurityActionMapOutput
	ToSecurityActionMapOutputWithContext(context.Context) SecurityActionMapOutput
}

type SecurityActionMap map[string]SecurityActionInput

func (SecurityActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityAction)(nil)).Elem()
}

func (i SecurityActionMap) ToSecurityActionMapOutput() SecurityActionMapOutput {
	return i.ToSecurityActionMapOutputWithContext(context.Background())
}

func (i SecurityActionMap) ToSecurityActionMapOutputWithContext(ctx context.Context) SecurityActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityActionMapOutput)
}

type SecurityActionOutput struct{ *pulumi.OutputState }

func (SecurityActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityAction)(nil)).Elem()
}

func (o SecurityActionOutput) ToSecurityActionOutput() SecurityActionOutput {
	return o
}

func (o SecurityActionOutput) ToSecurityActionOutputWithContext(ctx context.Context) SecurityActionOutput {
	return o
}

// Allow a request through if it matches this SecurityAction.
func (o SecurityActionOutput) Allow() SecurityActionAllowPtrOutput {
	return o.ApplyT(func(v *SecurityAction) SecurityActionAllowPtrOutput { return v.Allow }).(SecurityActionAllowPtrOutput)
}

// If unset, this would apply to all proxies in the environment.
// If set, this action is enforced only if at least one proxy in the repeated
// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
// There can be at most 100 enabled actions with proxies set in an env.
// Several other restrictions apply on conditions and are detailed later.
func (o SecurityActionOutput) ApiProxies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringArrayOutput { return v.ApiProxies }).(pulumi.StringArrayOutput)
}

// A valid SecurityAction must contain at least one condition.
// Structure is documented below.
func (o SecurityActionOutput) ConditionConfig() SecurityActionConditionConfigOutput {
	return o.ApplyT(func(v *SecurityAction) SecurityActionConditionConfigOutput { return v.ConditionConfig }).(SecurityActionConditionConfigOutput)
}

// The create time for this SecurityAction.
// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
func (o SecurityActionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Deny a request through if it matches this SecurityAction.
// Structure is documented below.
func (o SecurityActionOutput) Deny() SecurityActionDenyPtrOutput {
	return o.ApplyT(func(v *SecurityAction) SecurityActionDenyPtrOutput { return v.Deny }).(SecurityActionDenyPtrOutput)
}

// An optional user provided description of the SecurityAction.
func (o SecurityActionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Apigee environment that this security action applies to.
func (o SecurityActionOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// The expiration for this SecurityAction.
// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
// fractional digits. Offsets other than "Z" are also accepted.
// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
func (o SecurityActionOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringPtrOutput { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

// Flag a request through if it matches this SecurityAction.
// Structure is documented below.
func (o SecurityActionOutput) Flag() SecurityActionFlagPtrOutput {
	return o.ApplyT(func(v *SecurityAction) SecurityActionFlagPtrOutput { return v.Flag }).(SecurityActionFlagPtrOutput)
}

// The organization that this security action applies to.
func (o SecurityActionOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
// This value should be 0-61 characters, and valid format is (^a-z?$).
func (o SecurityActionOutput) SecurityActionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringOutput { return v.SecurityActionId }).(pulumi.StringOutput)
}

// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
// Possible values are: `ENABLED`, `DISABLED`.
func (o SecurityActionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The TTL for this SecurityAction.
// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
func (o SecurityActionOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringPtrOutput { return v.Ttl }).(pulumi.StringPtrOutput)
}

// The update time for this SecurityAction. This reflects when this SecurityAction changed states.
// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
func (o SecurityActionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAction) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type SecurityActionArrayOutput struct{ *pulumi.OutputState }

func (SecurityActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityAction)(nil)).Elem()
}

func (o SecurityActionArrayOutput) ToSecurityActionArrayOutput() SecurityActionArrayOutput {
	return o
}

func (o SecurityActionArrayOutput) ToSecurityActionArrayOutputWithContext(ctx context.Context) SecurityActionArrayOutput {
	return o
}

func (o SecurityActionArrayOutput) Index(i pulumi.IntInput) SecurityActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityAction {
		return vs[0].([]*SecurityAction)[vs[1].(int)]
	}).(SecurityActionOutput)
}

type SecurityActionMapOutput struct{ *pulumi.OutputState }

func (SecurityActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityAction)(nil)).Elem()
}

func (o SecurityActionMapOutput) ToSecurityActionMapOutput() SecurityActionMapOutput {
	return o
}

func (o SecurityActionMapOutput) ToSecurityActionMapOutputWithContext(ctx context.Context) SecurityActionMapOutput {
	return o
}

func (o SecurityActionMapOutput) MapIndex(k pulumi.StringInput) SecurityActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityAction {
		return vs[0].(map[string]*SecurityAction)[vs[1].(string)]
	}).(SecurityActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityActionInput)(nil)).Elem(), &SecurityAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityActionArrayInput)(nil)).Elem(), SecurityActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityActionMapInput)(nil)).Elem(), SecurityActionMap{})
	pulumi.RegisterOutputType(SecurityActionOutput{})
	pulumi.RegisterOutputType(SecurityActionArrayOutput{})
	pulumi.RegisterOutputType(SecurityActionMapOutput{})
}
