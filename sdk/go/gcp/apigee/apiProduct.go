// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An `ApiProduct` in Apigee.
//
// To get more information about ApiProduct, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.apiproducts#ApiProduct)
// * How-to Guides
//   - [Creating an API product](https://cloud.google.com/apigee/docs/api-platform/publish/what-api-product)
//
// ## Example Usage
//
// ### Apigee Api Product Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("apigee-network"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("apigee-range"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
//				Name:             pulumi.String("my-instance"),
//				Location:         pulumi.String("us-central1"),
//				OrgId:            apigeeOrg.ID(),
//				PeeringCidrRange: pulumi.String("SLASH_22"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewApiProduct(ctx, "basic_api_product", &apigee.ApiProductArgs{
//				OrgId:        apigeeOrg.ID(),
//				Name:         pulumi.String("my-product"),
//				DisplayName:  pulumi.String("My Basic API Product"),
//				ApprovalType: pulumi.String("auto"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Apigee Api Product With Legacy Operation
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("apigee-network"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("apigee-range"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
//				Name:             pulumi.String("my-instance"),
//				Location:         pulumi.String("us-central1"),
//				OrgId:            apigeeOrg.ID(),
//				PeeringCidrRange: pulumi.String("SLASH_22"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewApiProduct(ctx, "full_api_product", &apigee.ApiProductArgs{
//				OrgId:        apigeeOrg.ID(),
//				Name:         pulumi.String("my-product"),
//				DisplayName:  pulumi.String("My full API Product"),
//				ApprovalType: pulumi.String("auto"),
//				Description:  pulumi.String("This is a sample API Product created with Terraform."),
//				Attributes: apigee.ApiProductAttributeArray{
//					&apigee.ApiProductAttributeArgs{
//						Name:  pulumi.String("access"),
//						Value: pulumi.String("private"),
//					},
//				},
//				Environments: pulumi.StringArray{
//					pulumi.String("dev"),
//					pulumi.String("hom"),
//				},
//				Proxies: pulumi.StringArray{
//					pulumi.String("hello-world"),
//				},
//				ApiResources: pulumi.StringArray{
//					pulumi.String("/"),
//					pulumi.String("/weather/**"),
//				},
//				Scopes: pulumi.StringArray{
//					pulumi.String("read:weather"),
//					pulumi.String("write:reports"),
//				},
//				Quota:             pulumi.String("10000"),
//				QuotaInterval:     pulumi.String("1"),
//				QuotaTimeUnit:     pulumi.String("day"),
//				QuotaCounterScope: pulumi.String("PROXY"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Import
//
// ApiProduct can be imported using any of these accepted formats:
//
// * `{{org_id}}/apiproducts/{{name}}`
//
// * `{{org_id}}/{{name}}`
//
// When using the `pulumi import` command, ApiProduct can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apigee/apiProduct:ApiProduct default {{org_id}}/apiproducts/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:apigee/apiProduct:ApiProduct default {{org_id}}/{{name}}
// ```
type ApiProduct struct {
	pulumi.CustomResourceState

	// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
	// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
	ApiResources pulumi.StringArrayOutput `pulumi:"apiResources"`
	// Flag that specifies how API keys are approved to access the APIs defined by the API product.
	// Valid values are `auto` or `manual`.
	// Possible values are: `auto`, `manual`.
	ApprovalType pulumi.StringPtrOutput `pulumi:"approvalType"`
	// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
	// Use this property to specify the access level of the API product as either public, private, or internal.
	// Structure is documented below.
	Attributes ApiProductAttributeArrayOutput `pulumi:"attributes"`
	// Response only. Creation time of this environment as milliseconds since epoch.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the API product. Include key information about the API product that is not captured by other fields.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name displayed in the UI or developer portal to developers registering for API access.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
	// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
	Environments pulumi.StringArrayOutput `pulumi:"environments"`
	// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
	// Structure is documented below.
	GraphqlOperationGroup ApiProductGraphqlOperationGroupPtrOutput `pulumi:"graphqlOperationGroup"`
	// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
	// Structure is documented below.
	GrpcOperationGroup ApiProductGrpcOperationGroupPtrOutput `pulumi:"grpcOperationGroup"`
	// Response only. Modified time of this environment as milliseconds since epoch.
	LastModifiedAt pulumi.StringOutput `pulumi:"lastModifiedAt"`
	// Internal name of the API product.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
	// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
	// Structure is documented below.
	OperationGroup ApiProductOperationGroupPtrOutput `pulumi:"operationGroup"`
	// The Apigee Organization associated with the Apigee API product,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
	// Apigee rejects requests to API proxies that are not listed.
	Proxies pulumi.StringArrayOutput `pulumi:"proxies"`
	// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
	// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
	Quota pulumi.StringPtrOutput `pulumi:"quota"`
	// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
	// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
	QuotaCounterScope pulumi.StringPtrOutput `pulumi:"quotaCounterScope"`
	// Time interval over which the number of request messages is calculated.
	QuotaInterval pulumi.StringPtrOutput `pulumi:"quotaInterval"`
	// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
	QuotaTimeUnit pulumi.StringPtrOutput `pulumi:"quotaTimeUnit"`
	// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
	Space pulumi.StringPtrOutput `pulumi:"space"`
}

// NewApiProduct registers a new resource with the given unique name, arguments, and options.
func NewApiProduct(ctx *pulumi.Context,
	name string, args *ApiProductArgs, opts ...pulumi.ResourceOption) (*ApiProduct, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiProduct
	err := ctx.RegisterResource("gcp:apigee/apiProduct:ApiProduct", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiProduct gets an existing ApiProduct resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiProductState, opts ...pulumi.ResourceOption) (*ApiProduct, error) {
	var resource ApiProduct
	err := ctx.ReadResource("gcp:apigee/apiProduct:ApiProduct", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiProduct resources.
type apiProductState struct {
	// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
	// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
	ApiResources []string `pulumi:"apiResources"`
	// Flag that specifies how API keys are approved to access the APIs defined by the API product.
	// Valid values are `auto` or `manual`.
	// Possible values are: `auto`, `manual`.
	ApprovalType *string `pulumi:"approvalType"`
	// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
	// Use this property to specify the access level of the API product as either public, private, or internal.
	// Structure is documented below.
	Attributes []ApiProductAttribute `pulumi:"attributes"`
	// Response only. Creation time of this environment as milliseconds since epoch.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the API product. Include key information about the API product that is not captured by other fields.
	Description *string `pulumi:"description"`
	// Name displayed in the UI or developer portal to developers registering for API access.
	DisplayName *string `pulumi:"displayName"`
	// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
	// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
	Environments []string `pulumi:"environments"`
	// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
	// Structure is documented below.
	GraphqlOperationGroup *ApiProductGraphqlOperationGroup `pulumi:"graphqlOperationGroup"`
	// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
	// Structure is documented below.
	GrpcOperationGroup *ApiProductGrpcOperationGroup `pulumi:"grpcOperationGroup"`
	// Response only. Modified time of this environment as milliseconds since epoch.
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// Internal name of the API product.
	Name *string `pulumi:"name"`
	// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
	// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
	// Structure is documented below.
	OperationGroup *ApiProductOperationGroup `pulumi:"operationGroup"`
	// The Apigee Organization associated with the Apigee API product,
	// in the format `organizations/{{org_name}}`.
	OrgId *string `pulumi:"orgId"`
	// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
	// Apigee rejects requests to API proxies that are not listed.
	Proxies []string `pulumi:"proxies"`
	// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
	// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
	Quota *string `pulumi:"quota"`
	// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
	// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
	QuotaCounterScope *string `pulumi:"quotaCounterScope"`
	// Time interval over which the number of request messages is calculated.
	QuotaInterval *string `pulumi:"quotaInterval"`
	// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
	QuotaTimeUnit *string `pulumi:"quotaTimeUnit"`
	// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
	Scopes []string `pulumi:"scopes"`
	// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
	Space *string `pulumi:"space"`
}

type ApiProductState struct {
	// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
	// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
	ApiResources pulumi.StringArrayInput
	// Flag that specifies how API keys are approved to access the APIs defined by the API product.
	// Valid values are `auto` or `manual`.
	// Possible values are: `auto`, `manual`.
	ApprovalType pulumi.StringPtrInput
	// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
	// Use this property to specify the access level of the API product as either public, private, or internal.
	// Structure is documented below.
	Attributes ApiProductAttributeArrayInput
	// Response only. Creation time of this environment as milliseconds since epoch.
	CreatedAt pulumi.StringPtrInput
	// Description of the API product. Include key information about the API product that is not captured by other fields.
	Description pulumi.StringPtrInput
	// Name displayed in the UI or developer portal to developers registering for API access.
	DisplayName pulumi.StringPtrInput
	// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
	// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
	Environments pulumi.StringArrayInput
	// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
	// Structure is documented below.
	GraphqlOperationGroup ApiProductGraphqlOperationGroupPtrInput
	// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
	// Structure is documented below.
	GrpcOperationGroup ApiProductGrpcOperationGroupPtrInput
	// Response only. Modified time of this environment as milliseconds since epoch.
	LastModifiedAt pulumi.StringPtrInput
	// Internal name of the API product.
	Name pulumi.StringPtrInput
	// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
	// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
	// Structure is documented below.
	OperationGroup ApiProductOperationGroupPtrInput
	// The Apigee Organization associated with the Apigee API product,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringPtrInput
	// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
	// Apigee rejects requests to API proxies that are not listed.
	Proxies pulumi.StringArrayInput
	// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
	// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
	Quota pulumi.StringPtrInput
	// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
	// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
	QuotaCounterScope pulumi.StringPtrInput
	// Time interval over which the number of request messages is calculated.
	QuotaInterval pulumi.StringPtrInput
	// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
	QuotaTimeUnit pulumi.StringPtrInput
	// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
	Scopes pulumi.StringArrayInput
	// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
	Space pulumi.StringPtrInput
}

func (ApiProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiProductState)(nil)).Elem()
}

type apiProductArgs struct {
	// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
	// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
	ApiResources []string `pulumi:"apiResources"`
	// Flag that specifies how API keys are approved to access the APIs defined by the API product.
	// Valid values are `auto` or `manual`.
	// Possible values are: `auto`, `manual`.
	ApprovalType *string `pulumi:"approvalType"`
	// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
	// Use this property to specify the access level of the API product as either public, private, or internal.
	// Structure is documented below.
	Attributes []ApiProductAttribute `pulumi:"attributes"`
	// Description of the API product. Include key information about the API product that is not captured by other fields.
	Description *string `pulumi:"description"`
	// Name displayed in the UI or developer portal to developers registering for API access.
	DisplayName string `pulumi:"displayName"`
	// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
	// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
	Environments []string `pulumi:"environments"`
	// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
	// Structure is documented below.
	GraphqlOperationGroup *ApiProductGraphqlOperationGroup `pulumi:"graphqlOperationGroup"`
	// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
	// Structure is documented below.
	GrpcOperationGroup *ApiProductGrpcOperationGroup `pulumi:"grpcOperationGroup"`
	// Internal name of the API product.
	Name *string `pulumi:"name"`
	// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
	// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
	// Structure is documented below.
	OperationGroup *ApiProductOperationGroup `pulumi:"operationGroup"`
	// The Apigee Organization associated with the Apigee API product,
	// in the format `organizations/{{org_name}}`.
	OrgId string `pulumi:"orgId"`
	// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
	// Apigee rejects requests to API proxies that are not listed.
	Proxies []string `pulumi:"proxies"`
	// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
	// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
	Quota *string `pulumi:"quota"`
	// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
	// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
	QuotaCounterScope *string `pulumi:"quotaCounterScope"`
	// Time interval over which the number of request messages is calculated.
	QuotaInterval *string `pulumi:"quotaInterval"`
	// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
	QuotaTimeUnit *string `pulumi:"quotaTimeUnit"`
	// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
	Scopes []string `pulumi:"scopes"`
	// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
	Space *string `pulumi:"space"`
}

// The set of arguments for constructing a ApiProduct resource.
type ApiProductArgs struct {
	// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
	// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
	ApiResources pulumi.StringArrayInput
	// Flag that specifies how API keys are approved to access the APIs defined by the API product.
	// Valid values are `auto` or `manual`.
	// Possible values are: `auto`, `manual`.
	ApprovalType pulumi.StringPtrInput
	// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
	// Use this property to specify the access level of the API product as either public, private, or internal.
	// Structure is documented below.
	Attributes ApiProductAttributeArrayInput
	// Description of the API product. Include key information about the API product that is not captured by other fields.
	Description pulumi.StringPtrInput
	// Name displayed in the UI or developer portal to developers registering for API access.
	DisplayName pulumi.StringInput
	// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
	// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
	Environments pulumi.StringArrayInput
	// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
	// Structure is documented below.
	GraphqlOperationGroup ApiProductGraphqlOperationGroupPtrInput
	// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
	// Structure is documented below.
	GrpcOperationGroup ApiProductGrpcOperationGroupPtrInput
	// Internal name of the API product.
	Name pulumi.StringPtrInput
	// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
	// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
	// Structure is documented below.
	OperationGroup ApiProductOperationGroupPtrInput
	// The Apigee Organization associated with the Apigee API product,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringInput
	// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
	// Apigee rejects requests to API proxies that are not listed.
	Proxies pulumi.StringArrayInput
	// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
	// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
	Quota pulumi.StringPtrInput
	// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
	// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
	QuotaCounterScope pulumi.StringPtrInput
	// Time interval over which the number of request messages is calculated.
	QuotaInterval pulumi.StringPtrInput
	// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
	QuotaTimeUnit pulumi.StringPtrInput
	// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
	Scopes pulumi.StringArrayInput
	// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
	Space pulumi.StringPtrInput
}

func (ApiProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiProductArgs)(nil)).Elem()
}

type ApiProductInput interface {
	pulumi.Input

	ToApiProductOutput() ApiProductOutput
	ToApiProductOutputWithContext(ctx context.Context) ApiProductOutput
}

func (*ApiProduct) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiProduct)(nil)).Elem()
}

func (i *ApiProduct) ToApiProductOutput() ApiProductOutput {
	return i.ToApiProductOutputWithContext(context.Background())
}

func (i *ApiProduct) ToApiProductOutputWithContext(ctx context.Context) ApiProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductOutput)
}

// ApiProductArrayInput is an input type that accepts ApiProductArray and ApiProductArrayOutput values.
// You can construct a concrete instance of `ApiProductArrayInput` via:
//
//	ApiProductArray{ ApiProductArgs{...} }
type ApiProductArrayInput interface {
	pulumi.Input

	ToApiProductArrayOutput() ApiProductArrayOutput
	ToApiProductArrayOutputWithContext(context.Context) ApiProductArrayOutput
}

type ApiProductArray []ApiProductInput

func (ApiProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiProduct)(nil)).Elem()
}

func (i ApiProductArray) ToApiProductArrayOutput() ApiProductArrayOutput {
	return i.ToApiProductArrayOutputWithContext(context.Background())
}

func (i ApiProductArray) ToApiProductArrayOutputWithContext(ctx context.Context) ApiProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductArrayOutput)
}

// ApiProductMapInput is an input type that accepts ApiProductMap and ApiProductMapOutput values.
// You can construct a concrete instance of `ApiProductMapInput` via:
//
//	ApiProductMap{ "key": ApiProductArgs{...} }
type ApiProductMapInput interface {
	pulumi.Input

	ToApiProductMapOutput() ApiProductMapOutput
	ToApiProductMapOutputWithContext(context.Context) ApiProductMapOutput
}

type ApiProductMap map[string]ApiProductInput

func (ApiProductMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiProduct)(nil)).Elem()
}

func (i ApiProductMap) ToApiProductMapOutput() ApiProductMapOutput {
	return i.ToApiProductMapOutputWithContext(context.Background())
}

func (i ApiProductMap) ToApiProductMapOutputWithContext(ctx context.Context) ApiProductMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductMapOutput)
}

type ApiProductOutput struct{ *pulumi.OutputState }

func (ApiProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiProduct)(nil)).Elem()
}

func (o ApiProductOutput) ToApiProductOutput() ApiProductOutput {
	return o
}

func (o ApiProductOutput) ToApiProductOutputWithContext(ctx context.Context) ApiProductOutput {
	return o
}

// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
func (o ApiProductOutput) ApiResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringArrayOutput { return v.ApiResources }).(pulumi.StringArrayOutput)
}

// Flag that specifies how API keys are approved to access the APIs defined by the API product.
// Valid values are `auto` or `manual`.
// Possible values are: `auto`, `manual`.
func (o ApiProductOutput) ApprovalType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringPtrOutput { return v.ApprovalType }).(pulumi.StringPtrOutput)
}

// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
// Use this property to specify the access level of the API product as either public, private, or internal.
// Structure is documented below.
func (o ApiProductOutput) Attributes() ApiProductAttributeArrayOutput {
	return o.ApplyT(func(v *ApiProduct) ApiProductAttributeArrayOutput { return v.Attributes }).(ApiProductAttributeArrayOutput)
}

// Response only. Creation time of this environment as milliseconds since epoch.
func (o ApiProductOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the API product. Include key information about the API product that is not captured by other fields.
func (o ApiProductOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name displayed in the UI or developer portal to developers registering for API access.
func (o ApiProductOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
func (o ApiProductOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringArrayOutput { return v.Environments }).(pulumi.StringArrayOutput)
}

// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
// Structure is documented below.
func (o ApiProductOutput) GraphqlOperationGroup() ApiProductGraphqlOperationGroupPtrOutput {
	return o.ApplyT(func(v *ApiProduct) ApiProductGraphqlOperationGroupPtrOutput { return v.GraphqlOperationGroup }).(ApiProductGraphqlOperationGroupPtrOutput)
}

// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
// Structure is documented below.
func (o ApiProductOutput) GrpcOperationGroup() ApiProductGrpcOperationGroupPtrOutput {
	return o.ApplyT(func(v *ApiProduct) ApiProductGrpcOperationGroupPtrOutput { return v.GrpcOperationGroup }).(ApiProductGrpcOperationGroupPtrOutput)
}

// Response only. Modified time of this environment as milliseconds since epoch.
func (o ApiProductOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Internal name of the API product.
func (o ApiProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
// Structure is documented below.
func (o ApiProductOutput) OperationGroup() ApiProductOperationGroupPtrOutput {
	return o.ApplyT(func(v *ApiProduct) ApiProductOperationGroupPtrOutput { return v.OperationGroup }).(ApiProductOperationGroupPtrOutput)
}

// The Apigee Organization associated with the Apigee API product,
// in the format `organizations/{{org_name}}`.
func (o ApiProductOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
// Apigee rejects requests to API proxies that are not listed.
func (o ApiProductOutput) Proxies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringArrayOutput { return v.Proxies }).(pulumi.StringArrayOutput)
}

// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
func (o ApiProductOutput) Quota() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringPtrOutput { return v.Quota }).(pulumi.StringPtrOutput)
}

// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
func (o ApiProductOutput) QuotaCounterScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringPtrOutput { return v.QuotaCounterScope }).(pulumi.StringPtrOutput)
}

// Time interval over which the number of request messages is calculated.
func (o ApiProductOutput) QuotaInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringPtrOutput { return v.QuotaInterval }).(pulumi.StringPtrOutput)
}

// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
func (o ApiProductOutput) QuotaTimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringPtrOutput { return v.QuotaTimeUnit }).(pulumi.StringPtrOutput)
}

// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
func (o ApiProductOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
func (o ApiProductOutput) Space() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringPtrOutput { return v.Space }).(pulumi.StringPtrOutput)
}

type ApiProductArrayOutput struct{ *pulumi.OutputState }

func (ApiProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiProduct)(nil)).Elem()
}

func (o ApiProductArrayOutput) ToApiProductArrayOutput() ApiProductArrayOutput {
	return o
}

func (o ApiProductArrayOutput) ToApiProductArrayOutputWithContext(ctx context.Context) ApiProductArrayOutput {
	return o
}

func (o ApiProductArrayOutput) Index(i pulumi.IntInput) ApiProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiProduct {
		return vs[0].([]*ApiProduct)[vs[1].(int)]
	}).(ApiProductOutput)
}

type ApiProductMapOutput struct{ *pulumi.OutputState }

func (ApiProductMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiProduct)(nil)).Elem()
}

func (o ApiProductMapOutput) ToApiProductMapOutput() ApiProductMapOutput {
	return o
}

func (o ApiProductMapOutput) ToApiProductMapOutputWithContext(ctx context.Context) ApiProductMapOutput {
	return o
}

func (o ApiProductMapOutput) MapIndex(k pulumi.StringInput) ApiProductOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiProduct {
		return vs[0].(map[string]*ApiProduct)[vs[1].(string)]
	}).(ApiProductOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductInput)(nil)).Elem(), &ApiProduct{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductArrayInput)(nil)).Elem(), ApiProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductMapInput)(nil)).Elem(), ApiProductMap{})
	pulumi.RegisterOutputType(ApiProductOutput{})
	pulumi.RegisterOutputType(ApiProductArrayOutput{})
	pulumi.RegisterOutputType(ApiProductMapOutput{})
}
