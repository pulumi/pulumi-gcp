// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An `AppGroup` in Apigee.
//
// To get more information about AppGroup, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.appgroups)
// * How-to Guides
//   - [Organizing client app ownership](https://cloud.google.com/apigee/docs/api-platform/publish/organizing-client-app-ownership)
//
// ## Example Usage
//
// ### Apigee App Group Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("apigee-network"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("apigee-range"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
//				Name:             pulumi.String("instance"),
//				Location:         pulumi.String("us-central1"),
//				OrgId:            apigeeOrg.ID(),
//				PeeringCidrRange: pulumi.String("SLASH_22"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewAppGroup(ctx, "apigee_app_group", &apigee.AppGroupArgs{
//				Name:        pulumi.String("my-app-group"),
//				DisplayName: pulumi.String("Test app group"),
//				ChannelId:   pulumi.String("storefront"),
//				ChannelUri:  pulumi.String("https://my-dev-portal.org/groups/my-group"),
//				Status:      pulumi.String("active"),
//				OrgId:       apigeeOrg.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Apigee App Group With Attributes
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("apigee-network"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("apigee-range"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
//				Name:             pulumi.String("instance"),
//				Location:         pulumi.String("us-central1"),
//				OrgId:            apigeeOrg.ID(),
//				PeeringCidrRange: pulumi.String("SLASH_22"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewAppGroup(ctx, "apigee_app_group", &apigee.AppGroupArgs{
//				Name:        pulumi.String("my-app-group"),
//				DisplayName: pulumi.String("Test app group"),
//				ChannelId:   pulumi.String("storefront"),
//				ChannelUri:  pulumi.String("https://my-dev-portal.org/groups/my-group"),
//				Status:      pulumi.String("active"),
//				OrgId:       apigeeOrg.ID(),
//				Attributes: apigee.AppGroupAttributeArray{
//					&apigee.AppGroupAttributeArgs{
//						Name:  pulumi.String("business_unit"),
//						Value: pulumi.String("HR"),
//					},
//					&apigee.AppGroupAttributeArgs{
//						Name:  pulumi.String("department"),
//						Value: pulumi.String("payroll"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AppGroup can be imported using any of these accepted formats:
//
// * `{{org_id}}/appgroups/{{name}}`
//
// * `{{org_id}}/{{name}}`
//
// When using the `pulumi import` command, AppGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apigee/appGroup:AppGroup default {{org_id}}/appgroups/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:apigee/appGroup:AppGroup default {{org_id}}/{{name}}
// ```
type AppGroup struct {
	pulumi.CustomResourceState

	// Internal identifier that cannot be edited
	AppGroupId pulumi.StringOutput `pulumi:"appGroupId"`
	// A list of attributes
	// Structure is documented below.
	Attributes AppGroupAttributeArrayOutput `pulumi:"attributes"`
	// Channel identifier identifies the owner maintaing this grouping.
	ChannelId pulumi.StringPtrOutput `pulumi:"channelId"`
	// A reference to the associated storefront/marketplace.
	ChannelUri pulumi.StringPtrOutput `pulumi:"channelUri"`
	// Created time as milliseconds since epoch.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// App group name displayed in the UI
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Modified time as milliseconds since epoch.
	LastModifiedAt pulumi.StringOutput `pulumi:"lastModifiedAt"`
	// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Apigee Organization associated with the Apigee app group,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// App group name displayed in the UI
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
	// Possible values are: `active`, `inactive`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewAppGroup registers a new resource with the given unique name, arguments, and options.
func NewAppGroup(ctx *pulumi.Context,
	name string, args *AppGroupArgs, opts ...pulumi.ResourceOption) (*AppGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppGroup
	err := ctx.RegisterResource("gcp:apigee/appGroup:AppGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppGroup gets an existing AppGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppGroupState, opts ...pulumi.ResourceOption) (*AppGroup, error) {
	var resource AppGroup
	err := ctx.ReadResource("gcp:apigee/appGroup:AppGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppGroup resources.
type appGroupState struct {
	// Internal identifier that cannot be edited
	AppGroupId *string `pulumi:"appGroupId"`
	// A list of attributes
	// Structure is documented below.
	Attributes []AppGroupAttribute `pulumi:"attributes"`
	// Channel identifier identifies the owner maintaing this grouping.
	ChannelId *string `pulumi:"channelId"`
	// A reference to the associated storefront/marketplace.
	ChannelUri *string `pulumi:"channelUri"`
	// Created time as milliseconds since epoch.
	CreatedAt *string `pulumi:"createdAt"`
	// App group name displayed in the UI
	DisplayName *string `pulumi:"displayName"`
	// Modified time as milliseconds since epoch.
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
	Name *string `pulumi:"name"`
	// The Apigee Organization associated with the Apigee app group,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId *string `pulumi:"orgId"`
	// App group name displayed in the UI
	Organization *string `pulumi:"organization"`
	// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
	// Possible values are: `active`, `inactive`.
	Status *string `pulumi:"status"`
}

type AppGroupState struct {
	// Internal identifier that cannot be edited
	AppGroupId pulumi.StringPtrInput
	// A list of attributes
	// Structure is documented below.
	Attributes AppGroupAttributeArrayInput
	// Channel identifier identifies the owner maintaing this grouping.
	ChannelId pulumi.StringPtrInput
	// A reference to the associated storefront/marketplace.
	ChannelUri pulumi.StringPtrInput
	// Created time as milliseconds since epoch.
	CreatedAt pulumi.StringPtrInput
	// App group name displayed in the UI
	DisplayName pulumi.StringPtrInput
	// Modified time as milliseconds since epoch.
	LastModifiedAt pulumi.StringPtrInput
	// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
	Name pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee app group,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId pulumi.StringPtrInput
	// App group name displayed in the UI
	Organization pulumi.StringPtrInput
	// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
	// Possible values are: `active`, `inactive`.
	Status pulumi.StringPtrInput
}

func (AppGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*appGroupState)(nil)).Elem()
}

type appGroupArgs struct {
	// A list of attributes
	// Structure is documented below.
	Attributes []AppGroupAttribute `pulumi:"attributes"`
	// Channel identifier identifies the owner maintaing this grouping.
	ChannelId *string `pulumi:"channelId"`
	// A reference to the associated storefront/marketplace.
	ChannelUri *string `pulumi:"channelUri"`
	// App group name displayed in the UI
	DisplayName *string `pulumi:"displayName"`
	// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
	Name *string `pulumi:"name"`
	// The Apigee Organization associated with the Apigee app group,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId string `pulumi:"orgId"`
	// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
	// Possible values are: `active`, `inactive`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a AppGroup resource.
type AppGroupArgs struct {
	// A list of attributes
	// Structure is documented below.
	Attributes AppGroupAttributeArrayInput
	// Channel identifier identifies the owner maintaing this grouping.
	ChannelId pulumi.StringPtrInput
	// A reference to the associated storefront/marketplace.
	ChannelUri pulumi.StringPtrInput
	// App group name displayed in the UI
	DisplayName pulumi.StringPtrInput
	// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
	Name pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee app group,
	// in the format `organizations/{{org_name}}`.
	//
	// ***
	OrgId pulumi.StringInput
	// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
	// Possible values are: `active`, `inactive`.
	Status pulumi.StringPtrInput
}

func (AppGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appGroupArgs)(nil)).Elem()
}

type AppGroupInput interface {
	pulumi.Input

	ToAppGroupOutput() AppGroupOutput
	ToAppGroupOutputWithContext(ctx context.Context) AppGroupOutput
}

func (*AppGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AppGroup)(nil)).Elem()
}

func (i *AppGroup) ToAppGroupOutput() AppGroupOutput {
	return i.ToAppGroupOutputWithContext(context.Background())
}

func (i *AppGroup) ToAppGroupOutputWithContext(ctx context.Context) AppGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupOutput)
}

// AppGroupArrayInput is an input type that accepts AppGroupArray and AppGroupArrayOutput values.
// You can construct a concrete instance of `AppGroupArrayInput` via:
//
//	AppGroupArray{ AppGroupArgs{...} }
type AppGroupArrayInput interface {
	pulumi.Input

	ToAppGroupArrayOutput() AppGroupArrayOutput
	ToAppGroupArrayOutputWithContext(context.Context) AppGroupArrayOutput
}

type AppGroupArray []AppGroupInput

func (AppGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppGroup)(nil)).Elem()
}

func (i AppGroupArray) ToAppGroupArrayOutput() AppGroupArrayOutput {
	return i.ToAppGroupArrayOutputWithContext(context.Background())
}

func (i AppGroupArray) ToAppGroupArrayOutputWithContext(ctx context.Context) AppGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupArrayOutput)
}

// AppGroupMapInput is an input type that accepts AppGroupMap and AppGroupMapOutput values.
// You can construct a concrete instance of `AppGroupMapInput` via:
//
//	AppGroupMap{ "key": AppGroupArgs{...} }
type AppGroupMapInput interface {
	pulumi.Input

	ToAppGroupMapOutput() AppGroupMapOutput
	ToAppGroupMapOutputWithContext(context.Context) AppGroupMapOutput
}

type AppGroupMap map[string]AppGroupInput

func (AppGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppGroup)(nil)).Elem()
}

func (i AppGroupMap) ToAppGroupMapOutput() AppGroupMapOutput {
	return i.ToAppGroupMapOutputWithContext(context.Background())
}

func (i AppGroupMap) ToAppGroupMapOutputWithContext(ctx context.Context) AppGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupMapOutput)
}

type AppGroupOutput struct{ *pulumi.OutputState }

func (AppGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppGroup)(nil)).Elem()
}

func (o AppGroupOutput) ToAppGroupOutput() AppGroupOutput {
	return o
}

func (o AppGroupOutput) ToAppGroupOutputWithContext(ctx context.Context) AppGroupOutput {
	return o
}

// Internal identifier that cannot be edited
func (o AppGroupOutput) AppGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.AppGroupId }).(pulumi.StringOutput)
}

// A list of attributes
// Structure is documented below.
func (o AppGroupOutput) Attributes() AppGroupAttributeArrayOutput {
	return o.ApplyT(func(v *AppGroup) AppGroupAttributeArrayOutput { return v.Attributes }).(AppGroupAttributeArrayOutput)
}

// Channel identifier identifies the owner maintaing this grouping.
func (o AppGroupOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// A reference to the associated storefront/marketplace.
func (o AppGroupOutput) ChannelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.ChannelUri }).(pulumi.StringPtrOutput)
}

// Created time as milliseconds since epoch.
func (o AppGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// App group name displayed in the UI
func (o AppGroupOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Modified time as milliseconds since epoch.
func (o AppGroupOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
func (o AppGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Apigee Organization associated with the Apigee app group,
// in the format `organizations/{{org_name}}`.
//
// ***
func (o AppGroupOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// App group name displayed in the UI
func (o AppGroupOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
// Possible values are: `active`, `inactive`.
func (o AppGroupOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type AppGroupArrayOutput struct{ *pulumi.OutputState }

func (AppGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppGroup)(nil)).Elem()
}

func (o AppGroupArrayOutput) ToAppGroupArrayOutput() AppGroupArrayOutput {
	return o
}

func (o AppGroupArrayOutput) ToAppGroupArrayOutputWithContext(ctx context.Context) AppGroupArrayOutput {
	return o
}

func (o AppGroupArrayOutput) Index(i pulumi.IntInput) AppGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppGroup {
		return vs[0].([]*AppGroup)[vs[1].(int)]
	}).(AppGroupOutput)
}

type AppGroupMapOutput struct{ *pulumi.OutputState }

func (AppGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppGroup)(nil)).Elem()
}

func (o AppGroupMapOutput) ToAppGroupMapOutput() AppGroupMapOutput {
	return o
}

func (o AppGroupMapOutput) ToAppGroupMapOutputWithContext(ctx context.Context) AppGroupMapOutput {
	return o
}

func (o AppGroupMapOutput) MapIndex(k pulumi.StringInput) AppGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppGroup {
		return vs[0].(map[string]*AppGroup)[vs[1].(string)]
	}).(AppGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupInput)(nil)).Elem(), &AppGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupArrayInput)(nil)).Elem(), AppGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupMapInput)(nil)).Elem(), AppGroupMap{})
	pulumi.RegisterOutputType(AppGroupOutput{})
	pulumi.RegisterOutputType(AppGroupArrayOutput{})
	pulumi.RegisterOutputType(AppGroupMapOutput{})
}
