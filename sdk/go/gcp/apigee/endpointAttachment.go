// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Apigee Endpoint Attachment.
//
// To get more information about EndpointAttachment, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.endpointAttachments/create)
// * How-to Guides
//   - [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)
//
// ## Example Usage
// ### Apigee Endpoint Attachment Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigeeNetwork", nil)
//			if err != nil {
//				return err
//			}
//			apigeeRange, err := compute.NewGlobalAddress(ctx, "apigeeRange", &compute.GlobalAddressArgs{
//				Purpose:      pulumi.String("VPC_PEERING"),
//				AddressType:  pulumi.String("INTERNAL"),
//				PrefixLength: pulumi.Int(16),
//				Network:      apigeeNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigeeVpcConnection", &servicenetworking.ConnectionArgs{
//				Network: apigeeNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					apigeeRange.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigeeOrg", &apigee.OrganizationArgs{
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				AuthorizedNetwork: apigeeNetwork.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigeeVpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewEndpointAttachment(ctx, "apigeeEndpointAttachment", &apigee.EndpointAttachmentArgs{
//				OrgId:                apigeeOrg.ID(),
//				EndpointAttachmentId: pulumi.String("test1"),
//				Location:             pulumi.String("{google_compute_service_attachment location}"),
//				ServiceAttachment:    pulumi.String("{google_compute_service_attachment id}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # EndpointAttachment can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:apigee/endpointAttachment:EndpointAttachment default {{org_id}}/endpointAttachments/{{endpoint_attachment_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:apigee/endpointAttachment:EndpointAttachment default {{org_id}}/{{endpoint_attachment_id}}
//
// ```
type EndpointAttachment struct {
	pulumi.CustomResourceState

	// ID of the endpoint attachment.
	EndpointAttachmentId pulumi.StringOutput `pulumi:"endpointAttachmentId"`
	// Host that can be used in either HTTP Target Endpoint directly, or as the host in Target Server.
	Host pulumi.StringOutput `pulumi:"host"`
	// Location of the endpoint attachment.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the Endpoint Attachment in the following format:
	// organizations/{organization}/endpointAttachments/{endpointAttachment}.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment pulumi.StringOutput `pulumi:"serviceAttachment"`
}

// NewEndpointAttachment registers a new resource with the given unique name, arguments, and options.
func NewEndpointAttachment(ctx *pulumi.Context,
	name string, args *EndpointAttachmentArgs, opts ...pulumi.ResourceOption) (*EndpointAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'EndpointAttachmentId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ServiceAttachment == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAttachment'")
	}
	var resource EndpointAttachment
	err := ctx.RegisterResource("gcp:apigee/endpointAttachment:EndpointAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointAttachment gets an existing EndpointAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointAttachmentState, opts ...pulumi.ResourceOption) (*EndpointAttachment, error) {
	var resource EndpointAttachment
	err := ctx.ReadResource("gcp:apigee/endpointAttachment:EndpointAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointAttachment resources.
type endpointAttachmentState struct {
	// ID of the endpoint attachment.
	EndpointAttachmentId *string `pulumi:"endpointAttachmentId"`
	// Host that can be used in either HTTP Target Endpoint directly, or as the host in Target Server.
	Host *string `pulumi:"host"`
	// Location of the endpoint attachment.
	Location *string `pulumi:"location"`
	// Name of the Endpoint Attachment in the following format:
	// organizations/{organization}/endpointAttachments/{endpointAttachment}.
	Name *string `pulumi:"name"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId *string `pulumi:"orgId"`
	// Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment *string `pulumi:"serviceAttachment"`
}

type EndpointAttachmentState struct {
	// ID of the endpoint attachment.
	EndpointAttachmentId pulumi.StringPtrInput
	// Host that can be used in either HTTP Target Endpoint directly, or as the host in Target Server.
	Host pulumi.StringPtrInput
	// Location of the endpoint attachment.
	Location pulumi.StringPtrInput
	// Name of the Endpoint Attachment in the following format:
	// organizations/{organization}/endpointAttachments/{endpointAttachment}.
	Name pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringPtrInput
	// Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment pulumi.StringPtrInput
}

func (EndpointAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAttachmentState)(nil)).Elem()
}

type endpointAttachmentArgs struct {
	// ID of the endpoint attachment.
	EndpointAttachmentId string `pulumi:"endpointAttachmentId"`
	// Location of the endpoint attachment.
	Location string `pulumi:"location"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId string `pulumi:"orgId"`
	// Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment string `pulumi:"serviceAttachment"`
}

// The set of arguments for constructing a EndpointAttachment resource.
type EndpointAttachmentArgs struct {
	// ID of the endpoint attachment.
	EndpointAttachmentId pulumi.StringInput
	// Location of the endpoint attachment.
	Location pulumi.StringInput
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringInput
	// Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment pulumi.StringInput
}

func (EndpointAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAttachmentArgs)(nil)).Elem()
}

type EndpointAttachmentInput interface {
	pulumi.Input

	ToEndpointAttachmentOutput() EndpointAttachmentOutput
	ToEndpointAttachmentOutputWithContext(ctx context.Context) EndpointAttachmentOutput
}

func (*EndpointAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAttachment)(nil)).Elem()
}

func (i *EndpointAttachment) ToEndpointAttachmentOutput() EndpointAttachmentOutput {
	return i.ToEndpointAttachmentOutputWithContext(context.Background())
}

func (i *EndpointAttachment) ToEndpointAttachmentOutputWithContext(ctx context.Context) EndpointAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAttachmentOutput)
}

// EndpointAttachmentArrayInput is an input type that accepts EndpointAttachmentArray and EndpointAttachmentArrayOutput values.
// You can construct a concrete instance of `EndpointAttachmentArrayInput` via:
//
//	EndpointAttachmentArray{ EndpointAttachmentArgs{...} }
type EndpointAttachmentArrayInput interface {
	pulumi.Input

	ToEndpointAttachmentArrayOutput() EndpointAttachmentArrayOutput
	ToEndpointAttachmentArrayOutputWithContext(context.Context) EndpointAttachmentArrayOutput
}

type EndpointAttachmentArray []EndpointAttachmentInput

func (EndpointAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointAttachment)(nil)).Elem()
}

func (i EndpointAttachmentArray) ToEndpointAttachmentArrayOutput() EndpointAttachmentArrayOutput {
	return i.ToEndpointAttachmentArrayOutputWithContext(context.Background())
}

func (i EndpointAttachmentArray) ToEndpointAttachmentArrayOutputWithContext(ctx context.Context) EndpointAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAttachmentArrayOutput)
}

// EndpointAttachmentMapInput is an input type that accepts EndpointAttachmentMap and EndpointAttachmentMapOutput values.
// You can construct a concrete instance of `EndpointAttachmentMapInput` via:
//
//	EndpointAttachmentMap{ "key": EndpointAttachmentArgs{...} }
type EndpointAttachmentMapInput interface {
	pulumi.Input

	ToEndpointAttachmentMapOutput() EndpointAttachmentMapOutput
	ToEndpointAttachmentMapOutputWithContext(context.Context) EndpointAttachmentMapOutput
}

type EndpointAttachmentMap map[string]EndpointAttachmentInput

func (EndpointAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointAttachment)(nil)).Elem()
}

func (i EndpointAttachmentMap) ToEndpointAttachmentMapOutput() EndpointAttachmentMapOutput {
	return i.ToEndpointAttachmentMapOutputWithContext(context.Background())
}

func (i EndpointAttachmentMap) ToEndpointAttachmentMapOutputWithContext(ctx context.Context) EndpointAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAttachmentMapOutput)
}

type EndpointAttachmentOutput struct{ *pulumi.OutputState }

func (EndpointAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAttachment)(nil)).Elem()
}

func (o EndpointAttachmentOutput) ToEndpointAttachmentOutput() EndpointAttachmentOutput {
	return o
}

func (o EndpointAttachmentOutput) ToEndpointAttachmentOutputWithContext(ctx context.Context) EndpointAttachmentOutput {
	return o
}

// ID of the endpoint attachment.
func (o EndpointAttachmentOutput) EndpointAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.EndpointAttachmentId }).(pulumi.StringOutput)
}

// Host that can be used in either HTTP Target Endpoint directly, or as the host in Target Server.
func (o EndpointAttachmentOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Location of the endpoint attachment.
func (o EndpointAttachmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the Endpoint Attachment in the following format:
// organizations/{organization}/endpointAttachments/{endpointAttachment}.
func (o EndpointAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Apigee Organization associated with the Apigee instance,
// in the format `organizations/{{org_name}}`.
func (o EndpointAttachmentOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Format: projects/*/regions/*/serviceAttachments/*
func (o EndpointAttachmentOutput) ServiceAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.ServiceAttachment }).(pulumi.StringOutput)
}

type EndpointAttachmentArrayOutput struct{ *pulumi.OutputState }

func (EndpointAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointAttachment)(nil)).Elem()
}

func (o EndpointAttachmentArrayOutput) ToEndpointAttachmentArrayOutput() EndpointAttachmentArrayOutput {
	return o
}

func (o EndpointAttachmentArrayOutput) ToEndpointAttachmentArrayOutputWithContext(ctx context.Context) EndpointAttachmentArrayOutput {
	return o
}

func (o EndpointAttachmentArrayOutput) Index(i pulumi.IntInput) EndpointAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndpointAttachment {
		return vs[0].([]*EndpointAttachment)[vs[1].(int)]
	}).(EndpointAttachmentOutput)
}

type EndpointAttachmentMapOutput struct{ *pulumi.OutputState }

func (EndpointAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointAttachment)(nil)).Elem()
}

func (o EndpointAttachmentMapOutput) ToEndpointAttachmentMapOutput() EndpointAttachmentMapOutput {
	return o
}

func (o EndpointAttachmentMapOutput) ToEndpointAttachmentMapOutputWithContext(ctx context.Context) EndpointAttachmentMapOutput {
	return o
}

func (o EndpointAttachmentMapOutput) MapIndex(k pulumi.StringInput) EndpointAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndpointAttachment {
		return vs[0].(map[string]*EndpointAttachment)[vs[1].(string)]
	}).(EndpointAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAttachmentInput)(nil)).Elem(), &EndpointAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAttachmentArrayInput)(nil)).Elem(), EndpointAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAttachmentMapInput)(nil)).Elem(), EndpointAttachmentMap{})
	pulumi.RegisterOutputType(EndpointAttachmentOutput{})
	pulumi.RegisterOutputType(EndpointAttachmentArrayOutput{})
	pulumi.RegisterOutputType(EndpointAttachmentMapOutput{})
}
