// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Apigee Dns Zone.
//
// To get more information about DnsZone, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.dnsZones/create)
// * How-to Guides
//   - [Creating a DnsZone](https://cloud.google.com/apigee/docs/api-platform/get-started/create-dns)
//
// ## Example Usage
//
// ### Apigee Dns Zone Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
//				Name: pulumi.String("apigee-network"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewOrganization(ctx, "org", &apigee.OrganizationArgs{
//				Description:       pulumi.String("Terraform-provisioned basic Apigee Org without VPC Peering."),
//				AnalyticsRegion:   pulumi.String("us-central1"),
//				ProjectId:         pulumi.String(current.Project),
//				DisableVpcPeering: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewDnsZone(ctx, "apigee_dns_zone", &apigee.DnsZoneArgs{
//				OrgId:       pulumi.Any(apigeeOrg.Id),
//				DnsZoneId:   pulumi.String("test1"),
//				Domain:      pulumi.String("foo.com"),
//				Description: pulumi.String("test"),
//				PeeringConfig: &apigee.DnsZonePeeringConfigArgs{
//					TargetProjectId: pulumi.String(current.Project),
//					TargetNetworkId: apigeeNetwork.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DnsZone can be imported using any of these accepted formats:
//
// * `{{org_id}}/dnsZones/{{dns_zone_id}}`
//
// * `{{org_id}}/{{dns_zone_id}}`
//
// When using the `pulumi import` command, DnsZone can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apigee/dnsZone:DnsZone default {{org_id}}/dnsZones/{{dns_zone_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apigee/dnsZone:DnsZone default {{org_id}}/{{dns_zone_id}}
// ```
type DnsZone struct {
	pulumi.CustomResourceState

	// Description for the zone.
	Description pulumi.StringOutput `pulumi:"description"`
	// ID of the dns zone.
	DnsZoneId pulumi.StringOutput `pulumi:"dnsZoneId"`
	// Doamin for the zone.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Name of the Dns Zone in the following format:
	// organizations/{organization}/dnsZones/{dnsZone}.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Peering zone config
	// Structure is documented below.
	PeeringConfig DnsZonePeeringConfigOutput `pulumi:"peeringConfig"`
}

// NewDnsZone registers a new resource with the given unique name, arguments, and options.
func NewDnsZone(ctx *pulumi.Context,
	name string, args *DnsZoneArgs, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DnsZoneId == nil {
		return nil, errors.New("invalid value for required argument 'DnsZoneId'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.PeeringConfig == nil {
		return nil, errors.New("invalid value for required argument 'PeeringConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsZone
	err := ctx.RegisterResource("gcp:apigee/dnsZone:DnsZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZone gets an existing DnsZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneState, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	var resource DnsZone
	err := ctx.ReadResource("gcp:apigee/dnsZone:DnsZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZone resources.
type dnsZoneState struct {
	// Description for the zone.
	Description *string `pulumi:"description"`
	// ID of the dns zone.
	DnsZoneId *string `pulumi:"dnsZoneId"`
	// Doamin for the zone.
	Domain *string `pulumi:"domain"`
	// Name of the Dns Zone in the following format:
	// organizations/{organization}/dnsZones/{dnsZone}.
	Name *string `pulumi:"name"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId *string `pulumi:"orgId"`
	// Peering zone config
	// Structure is documented below.
	PeeringConfig *DnsZonePeeringConfig `pulumi:"peeringConfig"`
}

type DnsZoneState struct {
	// Description for the zone.
	Description pulumi.StringPtrInput
	// ID of the dns zone.
	DnsZoneId pulumi.StringPtrInput
	// Doamin for the zone.
	Domain pulumi.StringPtrInput
	// Name of the Dns Zone in the following format:
	// organizations/{organization}/dnsZones/{dnsZone}.
	Name pulumi.StringPtrInput
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringPtrInput
	// Peering zone config
	// Structure is documented below.
	PeeringConfig DnsZonePeeringConfigPtrInput
}

func (DnsZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneState)(nil)).Elem()
}

type dnsZoneArgs struct {
	// Description for the zone.
	Description string `pulumi:"description"`
	// ID of the dns zone.
	DnsZoneId string `pulumi:"dnsZoneId"`
	// Doamin for the zone.
	Domain string `pulumi:"domain"`
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId string `pulumi:"orgId"`
	// Peering zone config
	// Structure is documented below.
	PeeringConfig DnsZonePeeringConfig `pulumi:"peeringConfig"`
}

// The set of arguments for constructing a DnsZone resource.
type DnsZoneArgs struct {
	// Description for the zone.
	Description pulumi.StringInput
	// ID of the dns zone.
	DnsZoneId pulumi.StringInput
	// Doamin for the zone.
	Domain pulumi.StringInput
	// The Apigee Organization associated with the Apigee instance,
	// in the format `organizations/{{org_name}}`.
	OrgId pulumi.StringInput
	// Peering zone config
	// Structure is documented below.
	PeeringConfig DnsZonePeeringConfigInput
}

func (DnsZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneArgs)(nil)).Elem()
}

type DnsZoneInput interface {
	pulumi.Input

	ToDnsZoneOutput() DnsZoneOutput
	ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput
}

func (*DnsZone) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil)).Elem()
}

func (i *DnsZone) ToDnsZoneOutput() DnsZoneOutput {
	return i.ToDnsZoneOutputWithContext(context.Background())
}

func (i *DnsZone) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneOutput)
}

// DnsZoneArrayInput is an input type that accepts DnsZoneArray and DnsZoneArrayOutput values.
// You can construct a concrete instance of `DnsZoneArrayInput` via:
//
//	DnsZoneArray{ DnsZoneArgs{...} }
type DnsZoneArrayInput interface {
	pulumi.Input

	ToDnsZoneArrayOutput() DnsZoneArrayOutput
	ToDnsZoneArrayOutputWithContext(context.Context) DnsZoneArrayOutput
}

type DnsZoneArray []DnsZoneInput

func (DnsZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZone)(nil)).Elem()
}

func (i DnsZoneArray) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return i.ToDnsZoneArrayOutputWithContext(context.Background())
}

func (i DnsZoneArray) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneArrayOutput)
}

// DnsZoneMapInput is an input type that accepts DnsZoneMap and DnsZoneMapOutput values.
// You can construct a concrete instance of `DnsZoneMapInput` via:
//
//	DnsZoneMap{ "key": DnsZoneArgs{...} }
type DnsZoneMapInput interface {
	pulumi.Input

	ToDnsZoneMapOutput() DnsZoneMapOutput
	ToDnsZoneMapOutputWithContext(context.Context) DnsZoneMapOutput
}

type DnsZoneMap map[string]DnsZoneInput

func (DnsZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZone)(nil)).Elem()
}

func (i DnsZoneMap) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return i.ToDnsZoneMapOutputWithContext(context.Background())
}

func (i DnsZoneMap) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneMapOutput)
}

type DnsZoneOutput struct{ *pulumi.OutputState }

func (DnsZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil)).Elem()
}

func (o DnsZoneOutput) ToDnsZoneOutput() DnsZoneOutput {
	return o
}

func (o DnsZoneOutput) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return o
}

// Description for the zone.
func (o DnsZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// ID of the dns zone.
func (o DnsZoneOutput) DnsZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.DnsZoneId }).(pulumi.StringOutput)
}

// Doamin for the zone.
func (o DnsZoneOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Name of the Dns Zone in the following format:
// organizations/{organization}/dnsZones/{dnsZone}.
func (o DnsZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Apigee Organization associated with the Apigee instance,
// in the format `organizations/{{org_name}}`.
func (o DnsZoneOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Peering zone config
// Structure is documented below.
func (o DnsZoneOutput) PeeringConfig() DnsZonePeeringConfigOutput {
	return o.ApplyT(func(v *DnsZone) DnsZonePeeringConfigOutput { return v.PeeringConfig }).(DnsZonePeeringConfigOutput)
}

type DnsZoneArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZone)(nil)).Elem()
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) Index(i pulumi.IntInput) DnsZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZone {
		return vs[0].([]*DnsZone)[vs[1].(int)]
	}).(DnsZoneOutput)
}

type DnsZoneMapOutput struct{ *pulumi.OutputState }

func (DnsZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZone)(nil)).Elem()
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) MapIndex(k pulumi.StringInput) DnsZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZone {
		return vs[0].(map[string]*DnsZone)[vs[1].(string)]
	}).(DnsZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneInput)(nil)).Elem(), &DnsZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneArrayInput)(nil)).Elem(), DnsZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneMapInput)(nil)).Elem(), DnsZoneMap{})
	pulumi.RegisterOutputType(DnsZoneOutput{})
	pulumi.RegisterOutputType(DnsZoneArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneMapOutput{})
}
