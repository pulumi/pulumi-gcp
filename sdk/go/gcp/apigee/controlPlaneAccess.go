// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigee

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Authorize the Runtime components to access directly with Apigee Control Plane.
//
// To get more information about ControlPlaneAccess, see:
//
// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations/updateControlPlaneAccess)
// * How-to Guides
//   - [Enable ControlPlane access](https://cloud.google.com/apigee/docs/hybrid/v1.14/install-enable-control-plane-access)
//
// ## Example Usage
//
// ### Apigee Control Plane Access Basic Test
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("my-project"),
//				Name:           pulumi.String("my-project"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			apigee, err := projects.NewService(ctx, "apigee", &projects.ServiceArgs{
//				Project: project.ProjectId,
//				Service: pulumi.String("apigee.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
//				AnalyticsRegion: pulumi.String("us-central1"),
//				ProjectId:       project.ProjectId,
//				RuntimeType:     pulumi.String("HYBRID"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				apigee,
//			}))
//			if err != nil {
//				return err
//			}
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				AccountId:   pulumi.String("my-account"),
//				DisplayName: pulumi.String("Service Account"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "synchronizer-iam", &projects.IAMMemberArgs{
//				Project: project.ProjectId,
//				Role:    pulumi.String("roles/apigee.synchronizerManager"),
//				Member: serviceAccount.Email.ApplyT(func(email string) (string, error) {
//					return fmt.Sprintf("serviceAccount:%v", email), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigee.NewControlPlaneAccess(ctx, "apigee_control_plane_access", &apigee.ControlPlaneAccessArgs{
//				Name: apigeeOrg.Name,
//				SynchronizerIdentities: pulumi.StringArray{
//					serviceAccount.Email.ApplyT(func(email string) (string, error) {
//						return fmt.Sprintf("serviceAccount:%v", email), nil
//					}).(pulumi.StringOutput),
//				},
//				AnalyticsPublisherIdentities: pulumi.StringArray{
//					serviceAccount.Email.ApplyT(func(email string) (string, error) {
//						return fmt.Sprintf("serviceAccount:%v", email), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ControlPlaneAccess can be imported using any of these accepted formats:
//
// * `organizations/{{name}}/controlPlaneAccess`
//
// * `{{name}}`
//
// When using the `pulumi import` command, ControlPlaneAccess can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apigee/controlPlaneAccess:ControlPlaneAccess default organizations/{{name}}/controlPlaneAccess
// ```
//
// ```sh
// $ pulumi import gcp:apigee/controlPlaneAccess:ControlPlaneAccess default {{name}}
// ```
type ControlPlaneAccess struct {
	pulumi.CustomResourceState

	// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	AnalyticsPublisherIdentities pulumi.StringArrayOutput `pulumi:"analyticsPublisherIdentities"`
	// Name of the Apigee organization.
	Name pulumi.StringOutput `pulumi:"name"`
	// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	SynchronizerIdentities pulumi.StringArrayOutput `pulumi:"synchronizerIdentities"`
}

// NewControlPlaneAccess registers a new resource with the given unique name, arguments, and options.
func NewControlPlaneAccess(ctx *pulumi.Context,
	name string, args *ControlPlaneAccessArgs, opts ...pulumi.ResourceOption) (*ControlPlaneAccess, error) {
	if args == nil {
		args = &ControlPlaneAccessArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ControlPlaneAccess
	err := ctx.RegisterResource("gcp:apigee/controlPlaneAccess:ControlPlaneAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetControlPlaneAccess gets an existing ControlPlaneAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetControlPlaneAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ControlPlaneAccessState, opts ...pulumi.ResourceOption) (*ControlPlaneAccess, error) {
	var resource ControlPlaneAccess
	err := ctx.ReadResource("gcp:apigee/controlPlaneAccess:ControlPlaneAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ControlPlaneAccess resources.
type controlPlaneAccessState struct {
	// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	AnalyticsPublisherIdentities []string `pulumi:"analyticsPublisherIdentities"`
	// Name of the Apigee organization.
	Name *string `pulumi:"name"`
	// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	SynchronizerIdentities []string `pulumi:"synchronizerIdentities"`
}

type ControlPlaneAccessState struct {
	// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	AnalyticsPublisherIdentities pulumi.StringArrayInput
	// Name of the Apigee organization.
	Name pulumi.StringPtrInput
	// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	SynchronizerIdentities pulumi.StringArrayInput
}

func (ControlPlaneAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*controlPlaneAccessState)(nil)).Elem()
}

type controlPlaneAccessArgs struct {
	// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	AnalyticsPublisherIdentities []string `pulumi:"analyticsPublisherIdentities"`
	// Name of the Apigee organization.
	Name *string `pulumi:"name"`
	// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	SynchronizerIdentities []string `pulumi:"synchronizerIdentities"`
}

// The set of arguments for constructing a ControlPlaneAccess resource.
type ControlPlaneAccessArgs struct {
	// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	AnalyticsPublisherIdentities pulumi.StringArrayInput
	// Name of the Apigee organization.
	Name pulumi.StringPtrInput
	// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
	// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
	SynchronizerIdentities pulumi.StringArrayInput
}

func (ControlPlaneAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controlPlaneAccessArgs)(nil)).Elem()
}

type ControlPlaneAccessInput interface {
	pulumi.Input

	ToControlPlaneAccessOutput() ControlPlaneAccessOutput
	ToControlPlaneAccessOutputWithContext(ctx context.Context) ControlPlaneAccessOutput
}

func (*ControlPlaneAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneAccess)(nil)).Elem()
}

func (i *ControlPlaneAccess) ToControlPlaneAccessOutput() ControlPlaneAccessOutput {
	return i.ToControlPlaneAccessOutputWithContext(context.Background())
}

func (i *ControlPlaneAccess) ToControlPlaneAccessOutputWithContext(ctx context.Context) ControlPlaneAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneAccessOutput)
}

// ControlPlaneAccessArrayInput is an input type that accepts ControlPlaneAccessArray and ControlPlaneAccessArrayOutput values.
// You can construct a concrete instance of `ControlPlaneAccessArrayInput` via:
//
//	ControlPlaneAccessArray{ ControlPlaneAccessArgs{...} }
type ControlPlaneAccessArrayInput interface {
	pulumi.Input

	ToControlPlaneAccessArrayOutput() ControlPlaneAccessArrayOutput
	ToControlPlaneAccessArrayOutputWithContext(context.Context) ControlPlaneAccessArrayOutput
}

type ControlPlaneAccessArray []ControlPlaneAccessInput

func (ControlPlaneAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ControlPlaneAccess)(nil)).Elem()
}

func (i ControlPlaneAccessArray) ToControlPlaneAccessArrayOutput() ControlPlaneAccessArrayOutput {
	return i.ToControlPlaneAccessArrayOutputWithContext(context.Background())
}

func (i ControlPlaneAccessArray) ToControlPlaneAccessArrayOutputWithContext(ctx context.Context) ControlPlaneAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneAccessArrayOutput)
}

// ControlPlaneAccessMapInput is an input type that accepts ControlPlaneAccessMap and ControlPlaneAccessMapOutput values.
// You can construct a concrete instance of `ControlPlaneAccessMapInput` via:
//
//	ControlPlaneAccessMap{ "key": ControlPlaneAccessArgs{...} }
type ControlPlaneAccessMapInput interface {
	pulumi.Input

	ToControlPlaneAccessMapOutput() ControlPlaneAccessMapOutput
	ToControlPlaneAccessMapOutputWithContext(context.Context) ControlPlaneAccessMapOutput
}

type ControlPlaneAccessMap map[string]ControlPlaneAccessInput

func (ControlPlaneAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ControlPlaneAccess)(nil)).Elem()
}

func (i ControlPlaneAccessMap) ToControlPlaneAccessMapOutput() ControlPlaneAccessMapOutput {
	return i.ToControlPlaneAccessMapOutputWithContext(context.Background())
}

func (i ControlPlaneAccessMap) ToControlPlaneAccessMapOutputWithContext(ctx context.Context) ControlPlaneAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneAccessMapOutput)
}

type ControlPlaneAccessOutput struct{ *pulumi.OutputState }

func (ControlPlaneAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneAccess)(nil)).Elem()
}

func (o ControlPlaneAccessOutput) ToControlPlaneAccessOutput() ControlPlaneAccessOutput {
	return o
}

func (o ControlPlaneAccessOutput) ToControlPlaneAccessOutputWithContext(ctx context.Context) ControlPlaneAccessOutput {
	return o
}

// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
func (o ControlPlaneAccessOutput) AnalyticsPublisherIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControlPlaneAccess) pulumi.StringArrayOutput { return v.AnalyticsPublisherIdentities }).(pulumi.StringArrayOutput)
}

// Name of the Apigee organization.
func (o ControlPlaneAccessOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneAccess) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
func (o ControlPlaneAccessOutput) SynchronizerIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControlPlaneAccess) pulumi.StringArrayOutput { return v.SynchronizerIdentities }).(pulumi.StringArrayOutput)
}

type ControlPlaneAccessArrayOutput struct{ *pulumi.OutputState }

func (ControlPlaneAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ControlPlaneAccess)(nil)).Elem()
}

func (o ControlPlaneAccessArrayOutput) ToControlPlaneAccessArrayOutput() ControlPlaneAccessArrayOutput {
	return o
}

func (o ControlPlaneAccessArrayOutput) ToControlPlaneAccessArrayOutputWithContext(ctx context.Context) ControlPlaneAccessArrayOutput {
	return o
}

func (o ControlPlaneAccessArrayOutput) Index(i pulumi.IntInput) ControlPlaneAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ControlPlaneAccess {
		return vs[0].([]*ControlPlaneAccess)[vs[1].(int)]
	}).(ControlPlaneAccessOutput)
}

type ControlPlaneAccessMapOutput struct{ *pulumi.OutputState }

func (ControlPlaneAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ControlPlaneAccess)(nil)).Elem()
}

func (o ControlPlaneAccessMapOutput) ToControlPlaneAccessMapOutput() ControlPlaneAccessMapOutput {
	return o
}

func (o ControlPlaneAccessMapOutput) ToControlPlaneAccessMapOutputWithContext(ctx context.Context) ControlPlaneAccessMapOutput {
	return o
}

func (o ControlPlaneAccessMapOutput) MapIndex(k pulumi.StringInput) ControlPlaneAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ControlPlaneAccess {
		return vs[0].(map[string]*ControlPlaneAccess)[vs[1].(string)]
	}).(ControlPlaneAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPlaneAccessInput)(nil)).Elem(), &ControlPlaneAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPlaneAccessArrayInput)(nil)).Elem(), ControlPlaneAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPlaneAccessMapInput)(nil)).Elem(), ControlPlaneAccessMap{})
	pulumi.RegisterOutputType(ControlPlaneAccessOutput{})
	pulumi.RegisterOutputType(ControlPlaneAccessArrayOutput{})
	pulumi.RegisterOutputType(ControlPlaneAccessMapOutput{})
}
