// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package endpoints

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource creates and rolls out a Cloud Endpoints service using OpenAPI or gRPC.  View the relevant docs for [OpenAPI](https://cloud.google.com/endpoints/docs/openapi/) and [gRPC](https://cloud.google.com/endpoints/docs/grpc/).
//
// ## Import
//
// This resource does not support import.
type Service struct {
	pulumi.CustomResourceState

	// A list of API objects.
	Apis ServiceApiArrayOutput `pulumi:"apis"`
	// The autogenerated ID for the configuration that is rolled out as part of the creation of this resource. Must be provided
	// to compute engine instances as a tag.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The address at which the service can be found - usually the same as the service name.
	DnsAddress pulumi.StringOutput `pulumi:"dnsAddress"`
	// A list of Endpoint objects.
	Endpoints ServiceEndpointArrayOutput `pulumi:"endpoints"`
	// The full text of the Service Config YAML file (Example located here). If provided, must also provide
	// protoc_output_base64. open_api config must not be provided.
	GrpcConfig pulumi.StringPtrOutput `pulumi:"grpcConfig"`
	// The full text of the OpenAPI YAML configuration as described here. Either this, or both of grpc_config and
	// protoc_output_base64 must be specified.
	OpenapiConfig pulumi.StringPtrOutput `pulumi:"openapiConfig"`
	// The project ID that the service belongs to. If not provided, provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The full contents of the Service Descriptor File generated by protoc. This should be a compiled .pb file,
	// base64-encoded.
	ProtocOutputBase64 pulumi.StringPtrOutput `pulumi:"protocOutputBase64"`
	// The name of the service. Usually of the form $apiname.endpoints.$projectid.cloud.goog.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource Service
	err := ctx.RegisterResource("gcp:endpoints/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("gcp:endpoints/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// A list of API objects.
	Apis []ServiceApi `pulumi:"apis"`
	// The autogenerated ID for the configuration that is rolled out as part of the creation of this resource. Must be provided
	// to compute engine instances as a tag.
	ConfigId *string `pulumi:"configId"`
	// The address at which the service can be found - usually the same as the service name.
	DnsAddress *string `pulumi:"dnsAddress"`
	// A list of Endpoint objects.
	Endpoints []ServiceEndpoint `pulumi:"endpoints"`
	// The full text of the Service Config YAML file (Example located here). If provided, must also provide
	// protoc_output_base64. open_api config must not be provided.
	GrpcConfig *string `pulumi:"grpcConfig"`
	// The full text of the OpenAPI YAML configuration as described here. Either this, or both of grpc_config and
	// protoc_output_base64 must be specified.
	OpenapiConfig *string `pulumi:"openapiConfig"`
	// The project ID that the service belongs to. If not provided, provider project is used.
	Project *string `pulumi:"project"`
	// The full contents of the Service Descriptor File generated by protoc. This should be a compiled .pb file,
	// base64-encoded.
	ProtocOutputBase64 *string `pulumi:"protocOutputBase64"`
	// The name of the service. Usually of the form $apiname.endpoints.$projectid.cloud.goog.
	ServiceName *string `pulumi:"serviceName"`
}

type ServiceState struct {
	// A list of API objects.
	Apis ServiceApiArrayInput
	// The autogenerated ID for the configuration that is rolled out as part of the creation of this resource. Must be provided
	// to compute engine instances as a tag.
	ConfigId pulumi.StringPtrInput
	// The address at which the service can be found - usually the same as the service name.
	DnsAddress pulumi.StringPtrInput
	// A list of Endpoint objects.
	Endpoints ServiceEndpointArrayInput
	// The full text of the Service Config YAML file (Example located here). If provided, must also provide
	// protoc_output_base64. open_api config must not be provided.
	GrpcConfig pulumi.StringPtrInput
	// The full text of the OpenAPI YAML configuration as described here. Either this, or both of grpc_config and
	// protoc_output_base64 must be specified.
	OpenapiConfig pulumi.StringPtrInput
	// The project ID that the service belongs to. If not provided, provider project is used.
	Project pulumi.StringPtrInput
	// The full contents of the Service Descriptor File generated by protoc. This should be a compiled .pb file,
	// base64-encoded.
	ProtocOutputBase64 pulumi.StringPtrInput
	// The name of the service. Usually of the form $apiname.endpoints.$projectid.cloud.goog.
	ServiceName pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The full text of the Service Config YAML file (Example located here). If provided, must also provide
	// protoc_output_base64. open_api config must not be provided.
	GrpcConfig *string `pulumi:"grpcConfig"`
	// The full text of the OpenAPI YAML configuration as described here. Either this, or both of grpc_config and
	// protoc_output_base64 must be specified.
	OpenapiConfig *string `pulumi:"openapiConfig"`
	// The project ID that the service belongs to. If not provided, provider project is used.
	Project *string `pulumi:"project"`
	// The full contents of the Service Descriptor File generated by protoc. This should be a compiled .pb file,
	// base64-encoded.
	ProtocOutputBase64 *string `pulumi:"protocOutputBase64"`
	// The name of the service. Usually of the form $apiname.endpoints.$projectid.cloud.goog.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The full text of the Service Config YAML file (Example located here). If provided, must also provide
	// protoc_output_base64. open_api config must not be provided.
	GrpcConfig pulumi.StringPtrInput
	// The full text of the OpenAPI YAML configuration as described here. Either this, or both of grpc_config and
	// protoc_output_base64 must be specified.
	OpenapiConfig pulumi.StringPtrInput
	// The project ID that the service belongs to. If not provided, provider project is used.
	Project pulumi.StringPtrInput
	// The full contents of the Service Descriptor File generated by protoc. This should be a compiled .pb file,
	// base64-encoded.
	ProtocOutputBase64 pulumi.StringPtrInput
	// The name of the service. Usually of the form $apiname.endpoints.$projectid.cloud.goog.
	ServiceName pulumi.StringInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil))
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

func (i *Service) ToServicePtrOutput() ServicePtrOutput {
	return i.ToServicePtrOutputWithContext(context.Background())
}

func (i *Service) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePtrOutput)
}

type ServicePtrInput interface {
	pulumi.Input

	ToServicePtrOutput() ServicePtrOutput
	ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput
}

type servicePtrType ServiceArgs

func (*servicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil))
}

func (i *servicePtrType) ToServicePtrOutput() ServicePtrOutput {
	return i.ToServicePtrOutputWithContext(context.Background())
}

func (i *servicePtrType) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePtrOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//          ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Service)(nil))
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//          ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Service)(nil))
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct {
	*pulumi.OutputState
}

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil))
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ToServicePtrOutput() ServicePtrOutput {
	return o.ToServicePtrOutputWithContext(context.Background())
}

func (o ServiceOutput) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return o.ApplyT(func(v Service) *Service {
		return &v
	}).(ServicePtrOutput)
}

type ServicePtrOutput struct {
	*pulumi.OutputState
}

func (ServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil))
}

func (o ServicePtrOutput) ToServicePtrOutput() ServicePtrOutput {
	return o
}

func (o ServicePtrOutput) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return o
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Service)(nil))
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Service {
		return vs[0].([]Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Service)(nil))
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Service {
		return vs[0].(map[string]Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServicePtrOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
