// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package endpoints

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Endpoints ServiceConsumers. Each of these resources serves a different use case:
//
// * `endpoints.ConsumersIamPolicy`: Authoritative. Sets the IAM policy for the serviceconsumers and replaces any existing policy already attached.
// * `endpoints.ConsumersIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the serviceconsumers are preserved.
// * `endpoints.ConsumersIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the serviceconsumers are preserved.
//
// > **Note:** `endpoints.ConsumersIamPolicy` **cannot** be used in conjunction with `endpoints.ConsumersIamBinding` and `endpoints.ConsumersIamMember` or they will fight over what your policy should be.
//
// > **Note:** `endpoints.ConsumersIamBinding` resources **can be** used in conjunction with `endpoints.ConsumersIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* services/{{service_name}}/consumers/{{consumer_project}} * {{service_name}}/{{consumer_project}} * {{consumer_project}} Any variables not passed in the import command will be taken from the provider configuration. Cloud Endpoints serviceconsumers IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:endpoints/consumersIamBinding:ConsumersIamBinding editor "services/{{service_name}}/consumers/{{consumer_project}} roles/servicemanagement.serviceController user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:endpoints/consumersIamBinding:ConsumersIamBinding editor "services/{{service_name}}/consumers/{{consumer_project}} roles/servicemanagement.serviceController"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:endpoints/consumersIamBinding:ConsumersIamBinding editor services/{{service_name}}/consumers/{{consumer_project}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ConsumersIamBinding struct {
	pulumi.CustomResourceState

	Condition       ConsumersIamBindingConditionPtrOutput `pulumi:"condition"`
	ConsumerProject pulumi.StringOutput                   `pulumi:"consumerProject"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        pulumi.StringOutput `pulumi:"role"`
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewConsumersIamBinding registers a new resource with the given unique name, arguments, and options.
func NewConsumersIamBinding(ctx *pulumi.Context,
	name string, args *ConsumersIamBindingArgs, opts ...pulumi.ResourceOption) (*ConsumersIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerProject == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerProject'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource ConsumersIamBinding
	err := ctx.RegisterResource("gcp:endpoints/consumersIamBinding:ConsumersIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumersIamBinding gets an existing ConsumersIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumersIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumersIamBindingState, opts ...pulumi.ResourceOption) (*ConsumersIamBinding, error) {
	var resource ConsumersIamBinding
	err := ctx.ReadResource("gcp:endpoints/consumersIamBinding:ConsumersIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumersIamBinding resources.
type consumersIamBindingState struct {
	Condition       *ConsumersIamBindingCondition `pulumi:"condition"`
	ConsumerProject *string                       `pulumi:"consumerProject"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        *string `pulumi:"role"`
	ServiceName *string `pulumi:"serviceName"`
}

type ConsumersIamBindingState struct {
	Condition       ConsumersIamBindingConditionPtrInput
	ConsumerProject pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
}

func (ConsumersIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumersIamBindingState)(nil)).Elem()
}

type consumersIamBindingArgs struct {
	Condition       *ConsumersIamBindingCondition `pulumi:"condition"`
	ConsumerProject string                        `pulumi:"consumerProject"`
	Members         []string                      `pulumi:"members"`
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        string `pulumi:"role"`
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ConsumersIamBinding resource.
type ConsumersIamBindingArgs struct {
	Condition       ConsumersIamBindingConditionPtrInput
	ConsumerProject pulumi.StringInput
	Members         pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        pulumi.StringInput
	ServiceName pulumi.StringInput
}

func (ConsumersIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumersIamBindingArgs)(nil)).Elem()
}

type ConsumersIamBindingInput interface {
	pulumi.Input

	ToConsumersIamBindingOutput() ConsumersIamBindingOutput
	ToConsumersIamBindingOutputWithContext(ctx context.Context) ConsumersIamBindingOutput
}

func (*ConsumersIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumersIamBinding)(nil)).Elem()
}

func (i *ConsumersIamBinding) ToConsumersIamBindingOutput() ConsumersIamBindingOutput {
	return i.ToConsumersIamBindingOutputWithContext(context.Background())
}

func (i *ConsumersIamBinding) ToConsumersIamBindingOutputWithContext(ctx context.Context) ConsumersIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumersIamBindingOutput)
}

// ConsumersIamBindingArrayInput is an input type that accepts ConsumersIamBindingArray and ConsumersIamBindingArrayOutput values.
// You can construct a concrete instance of `ConsumersIamBindingArrayInput` via:
//
//          ConsumersIamBindingArray{ ConsumersIamBindingArgs{...} }
type ConsumersIamBindingArrayInput interface {
	pulumi.Input

	ToConsumersIamBindingArrayOutput() ConsumersIamBindingArrayOutput
	ToConsumersIamBindingArrayOutputWithContext(context.Context) ConsumersIamBindingArrayOutput
}

type ConsumersIamBindingArray []ConsumersIamBindingInput

func (ConsumersIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumersIamBinding)(nil)).Elem()
}

func (i ConsumersIamBindingArray) ToConsumersIamBindingArrayOutput() ConsumersIamBindingArrayOutput {
	return i.ToConsumersIamBindingArrayOutputWithContext(context.Background())
}

func (i ConsumersIamBindingArray) ToConsumersIamBindingArrayOutputWithContext(ctx context.Context) ConsumersIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumersIamBindingArrayOutput)
}

// ConsumersIamBindingMapInput is an input type that accepts ConsumersIamBindingMap and ConsumersIamBindingMapOutput values.
// You can construct a concrete instance of `ConsumersIamBindingMapInput` via:
//
//          ConsumersIamBindingMap{ "key": ConsumersIamBindingArgs{...} }
type ConsumersIamBindingMapInput interface {
	pulumi.Input

	ToConsumersIamBindingMapOutput() ConsumersIamBindingMapOutput
	ToConsumersIamBindingMapOutputWithContext(context.Context) ConsumersIamBindingMapOutput
}

type ConsumersIamBindingMap map[string]ConsumersIamBindingInput

func (ConsumersIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumersIamBinding)(nil)).Elem()
}

func (i ConsumersIamBindingMap) ToConsumersIamBindingMapOutput() ConsumersIamBindingMapOutput {
	return i.ToConsumersIamBindingMapOutputWithContext(context.Background())
}

func (i ConsumersIamBindingMap) ToConsumersIamBindingMapOutputWithContext(ctx context.Context) ConsumersIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumersIamBindingMapOutput)
}

type ConsumersIamBindingOutput struct{ *pulumi.OutputState }

func (ConsumersIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumersIamBinding)(nil)).Elem()
}

func (o ConsumersIamBindingOutput) ToConsumersIamBindingOutput() ConsumersIamBindingOutput {
	return o
}

func (o ConsumersIamBindingOutput) ToConsumersIamBindingOutputWithContext(ctx context.Context) ConsumersIamBindingOutput {
	return o
}

type ConsumersIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ConsumersIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumersIamBinding)(nil)).Elem()
}

func (o ConsumersIamBindingArrayOutput) ToConsumersIamBindingArrayOutput() ConsumersIamBindingArrayOutput {
	return o
}

func (o ConsumersIamBindingArrayOutput) ToConsumersIamBindingArrayOutputWithContext(ctx context.Context) ConsumersIamBindingArrayOutput {
	return o
}

func (o ConsumersIamBindingArrayOutput) Index(i pulumi.IntInput) ConsumersIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumersIamBinding {
		return vs[0].([]*ConsumersIamBinding)[vs[1].(int)]
	}).(ConsumersIamBindingOutput)
}

type ConsumersIamBindingMapOutput struct{ *pulumi.OutputState }

func (ConsumersIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumersIamBinding)(nil)).Elem()
}

func (o ConsumersIamBindingMapOutput) ToConsumersIamBindingMapOutput() ConsumersIamBindingMapOutput {
	return o
}

func (o ConsumersIamBindingMapOutput) ToConsumersIamBindingMapOutputWithContext(ctx context.Context) ConsumersIamBindingMapOutput {
	return o
}

func (o ConsumersIamBindingMapOutput) MapIndex(k pulumi.StringInput) ConsumersIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumersIamBinding {
		return vs[0].(map[string]*ConsumersIamBinding)[vs[1].(string)]
	}).(ConsumersIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumersIamBindingInput)(nil)).Elem(), &ConsumersIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumersIamBindingArrayInput)(nil)).Elem(), ConsumersIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumersIamBindingMapInput)(nil)).Elem(), ConsumersIamBindingMap{})
	pulumi.RegisterOutputType(ConsumersIamBindingOutput{})
	pulumi.RegisterOutputType(ConsumersIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ConsumersIamBindingMapOutput{})
}
