// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package endpoints

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Endpoints ServiceConsumers. Each of these resources serves a different use case:
//
// * `endpoints.ConsumersIamPolicy`: Authoritative. Sets the IAM policy for the serviceconsumers and replaces any existing policy already attached.
// * `endpoints.ConsumersIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the serviceconsumers are preserved.
// * `endpoints.ConsumersIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the serviceconsumers are preserved.
//
// > **Note:** `endpoints.ConsumersIamPolicy` **cannot** be used in conjunction with `endpoints.ConsumersIamBinding` and `endpoints.ConsumersIamMember` or they will fight over what your policy should be.
//
// > **Note:** `endpoints.ConsumersIamBinding` resources **can be** used in conjunction with `endpoints.ConsumersIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* services/{{service_name}}/consumers/{{consumer_project}} * {{service_name}}/{{consumer_project}} * {{consumer_project}} Any variables not passed in the import command will be taken from the provider configuration. Cloud Endpoints serviceconsumers IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:endpoints/consumersIamMember:ConsumersIamMember editor "services/{{service_name}}/consumers/{{consumer_project}} roles/servicemanagement.serviceController user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:endpoints/consumersIamMember:ConsumersIamMember editor "services/{{service_name}}/consumers/{{consumer_project}} roles/servicemanagement.serviceController"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:endpoints/consumersIamMember:ConsumersIamMember editor services/{{service_name}}/consumers/{{consumer_project}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ConsumersIamMember struct {
	pulumi.CustomResourceState

	Condition       ConsumersIamMemberConditionPtrOutput `pulumi:"condition"`
	ConsumerProject pulumi.StringOutput                  `pulumi:"consumerProject"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        pulumi.StringOutput `pulumi:"role"`
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewConsumersIamMember registers a new resource with the given unique name, arguments, and options.
func NewConsumersIamMember(ctx *pulumi.Context,
	name string, args *ConsumersIamMemberArgs, opts ...pulumi.ResourceOption) (*ConsumersIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerProject == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerProject'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource ConsumersIamMember
	err := ctx.RegisterResource("gcp:endpoints/consumersIamMember:ConsumersIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumersIamMember gets an existing ConsumersIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumersIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumersIamMemberState, opts ...pulumi.ResourceOption) (*ConsumersIamMember, error) {
	var resource ConsumersIamMember
	err := ctx.ReadResource("gcp:endpoints/consumersIamMember:ConsumersIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumersIamMember resources.
type consumersIamMemberState struct {
	Condition       *ConsumersIamMemberCondition `pulumi:"condition"`
	ConsumerProject *string                      `pulumi:"consumerProject"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        *string `pulumi:"role"`
	ServiceName *string `pulumi:"serviceName"`
}

type ConsumersIamMemberState struct {
	Condition       ConsumersIamMemberConditionPtrInput
	ConsumerProject pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
}

func (ConsumersIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumersIamMemberState)(nil)).Elem()
}

type consumersIamMemberArgs struct {
	Condition       *ConsumersIamMemberCondition `pulumi:"condition"`
	ConsumerProject string                       `pulumi:"consumerProject"`
	Member          string                       `pulumi:"member"`
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        string `pulumi:"role"`
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ConsumersIamMember resource.
type ConsumersIamMemberArgs struct {
	Condition       ConsumersIamMemberConditionPtrInput
	ConsumerProject pulumi.StringInput
	Member          pulumi.StringInput
	// The role that should be applied. Only one
	// `endpoints.ConsumersIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role        pulumi.StringInput
	ServiceName pulumi.StringInput
}

func (ConsumersIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumersIamMemberArgs)(nil)).Elem()
}

type ConsumersIamMemberInput interface {
	pulumi.Input

	ToConsumersIamMemberOutput() ConsumersIamMemberOutput
	ToConsumersIamMemberOutputWithContext(ctx context.Context) ConsumersIamMemberOutput
}

func (*ConsumersIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumersIamMember)(nil)).Elem()
}

func (i *ConsumersIamMember) ToConsumersIamMemberOutput() ConsumersIamMemberOutput {
	return i.ToConsumersIamMemberOutputWithContext(context.Background())
}

func (i *ConsumersIamMember) ToConsumersIamMemberOutputWithContext(ctx context.Context) ConsumersIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumersIamMemberOutput)
}

// ConsumersIamMemberArrayInput is an input type that accepts ConsumersIamMemberArray and ConsumersIamMemberArrayOutput values.
// You can construct a concrete instance of `ConsumersIamMemberArrayInput` via:
//
//          ConsumersIamMemberArray{ ConsumersIamMemberArgs{...} }
type ConsumersIamMemberArrayInput interface {
	pulumi.Input

	ToConsumersIamMemberArrayOutput() ConsumersIamMemberArrayOutput
	ToConsumersIamMemberArrayOutputWithContext(context.Context) ConsumersIamMemberArrayOutput
}

type ConsumersIamMemberArray []ConsumersIamMemberInput

func (ConsumersIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumersIamMember)(nil)).Elem()
}

func (i ConsumersIamMemberArray) ToConsumersIamMemberArrayOutput() ConsumersIamMemberArrayOutput {
	return i.ToConsumersIamMemberArrayOutputWithContext(context.Background())
}

func (i ConsumersIamMemberArray) ToConsumersIamMemberArrayOutputWithContext(ctx context.Context) ConsumersIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumersIamMemberArrayOutput)
}

// ConsumersIamMemberMapInput is an input type that accepts ConsumersIamMemberMap and ConsumersIamMemberMapOutput values.
// You can construct a concrete instance of `ConsumersIamMemberMapInput` via:
//
//          ConsumersIamMemberMap{ "key": ConsumersIamMemberArgs{...} }
type ConsumersIamMemberMapInput interface {
	pulumi.Input

	ToConsumersIamMemberMapOutput() ConsumersIamMemberMapOutput
	ToConsumersIamMemberMapOutputWithContext(context.Context) ConsumersIamMemberMapOutput
}

type ConsumersIamMemberMap map[string]ConsumersIamMemberInput

func (ConsumersIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumersIamMember)(nil)).Elem()
}

func (i ConsumersIamMemberMap) ToConsumersIamMemberMapOutput() ConsumersIamMemberMapOutput {
	return i.ToConsumersIamMemberMapOutputWithContext(context.Background())
}

func (i ConsumersIamMemberMap) ToConsumersIamMemberMapOutputWithContext(ctx context.Context) ConsumersIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumersIamMemberMapOutput)
}

type ConsumersIamMemberOutput struct{ *pulumi.OutputState }

func (ConsumersIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumersIamMember)(nil)).Elem()
}

func (o ConsumersIamMemberOutput) ToConsumersIamMemberOutput() ConsumersIamMemberOutput {
	return o
}

func (o ConsumersIamMemberOutput) ToConsumersIamMemberOutputWithContext(ctx context.Context) ConsumersIamMemberOutput {
	return o
}

type ConsumersIamMemberArrayOutput struct{ *pulumi.OutputState }

func (ConsumersIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumersIamMember)(nil)).Elem()
}

func (o ConsumersIamMemberArrayOutput) ToConsumersIamMemberArrayOutput() ConsumersIamMemberArrayOutput {
	return o
}

func (o ConsumersIamMemberArrayOutput) ToConsumersIamMemberArrayOutputWithContext(ctx context.Context) ConsumersIamMemberArrayOutput {
	return o
}

func (o ConsumersIamMemberArrayOutput) Index(i pulumi.IntInput) ConsumersIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumersIamMember {
		return vs[0].([]*ConsumersIamMember)[vs[1].(int)]
	}).(ConsumersIamMemberOutput)
}

type ConsumersIamMemberMapOutput struct{ *pulumi.OutputState }

func (ConsumersIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumersIamMember)(nil)).Elem()
}

func (o ConsumersIamMemberMapOutput) ToConsumersIamMemberMapOutput() ConsumersIamMemberMapOutput {
	return o
}

func (o ConsumersIamMemberMapOutput) ToConsumersIamMemberMapOutputWithContext(ctx context.Context) ConsumersIamMemberMapOutput {
	return o
}

func (o ConsumersIamMemberMapOutput) MapIndex(k pulumi.StringInput) ConsumersIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumersIamMember {
		return vs[0].(map[string]*ConsumersIamMember)[vs[1].(string)]
	}).(ConsumersIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumersIamMemberInput)(nil)).Elem(), &ConsumersIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumersIamMemberArrayInput)(nil)).Elem(), ConsumersIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumersIamMemberMapInput)(nil)).Elem(), ConsumersIamMemberMap{})
	pulumi.RegisterOutputType(ConsumersIamMemberOutput{})
	pulumi.RegisterOutputType(ConsumersIamMemberArrayOutput{})
	pulumi.RegisterOutputType(ConsumersIamMemberMapOutput{})
}
