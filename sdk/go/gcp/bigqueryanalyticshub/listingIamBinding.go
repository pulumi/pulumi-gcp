// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigqueryanalyticshub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}} * {{project}}/{{location}}/{{data_exchange_id}}/{{listing_id}} * {{location}}/{{data_exchange_id}}/{{listing_id}} * {{listing_id}} Any variables not passed in the import command will be taken from the provider configuration. Bigquery Analytics Hub listing IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding editor "projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding editor "projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding editor projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ListingIamBinding struct {
	pulumi.CustomResourceState

	Condition ListingIamBindingConditionPtrOutput `pulumi:"condition"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringOutput `pulumi:"dataExchangeId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId pulumi.StringOutput `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput      `pulumi:"location"`
	Members  pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.ListingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewListingIamBinding registers a new resource with the given unique name, arguments, and options.
func NewListingIamBinding(ctx *pulumi.Context,
	name string, args *ListingIamBindingArgs, opts ...pulumi.ResourceOption) (*ListingIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.ListingId == nil {
		return nil, errors.New("invalid value for required argument 'ListingId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ListingIamBinding
	err := ctx.RegisterResource("gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListingIamBinding gets an existing ListingIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListingIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListingIamBindingState, opts ...pulumi.ResourceOption) (*ListingIamBinding, error) {
	var resource ListingIamBinding
	err := ctx.ReadResource("gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListingIamBinding resources.
type listingIamBindingState struct {
	Condition *ListingIamBindingCondition `pulumi:"condition"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId *string `pulumi:"dataExchangeId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId *string `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location *string  `pulumi:"location"`
	Members  []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.ListingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type ListingIamBindingState struct {
	Condition ListingIamBindingConditionPtrInput
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId pulumi.StringPtrInput
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Members  pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.ListingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (ListingIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*listingIamBindingState)(nil)).Elem()
}

type listingIamBindingArgs struct {
	Condition *ListingIamBindingCondition `pulumi:"condition"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId string `pulumi:"dataExchangeId"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId string `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location *string  `pulumi:"location"`
	Members  []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.ListingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ListingIamBinding resource.
type ListingIamBindingArgs struct {
	Condition ListingIamBindingConditionPtrInput
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringInput
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId pulumi.StringInput
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Members  pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.ListingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (ListingIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listingIamBindingArgs)(nil)).Elem()
}

type ListingIamBindingInput interface {
	pulumi.Input

	ToListingIamBindingOutput() ListingIamBindingOutput
	ToListingIamBindingOutputWithContext(ctx context.Context) ListingIamBindingOutput
}

func (*ListingIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingIamBinding)(nil)).Elem()
}

func (i *ListingIamBinding) ToListingIamBindingOutput() ListingIamBindingOutput {
	return i.ToListingIamBindingOutputWithContext(context.Background())
}

func (i *ListingIamBinding) ToListingIamBindingOutputWithContext(ctx context.Context) ListingIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingIamBindingOutput)
}

// ListingIamBindingArrayInput is an input type that accepts ListingIamBindingArray and ListingIamBindingArrayOutput values.
// You can construct a concrete instance of `ListingIamBindingArrayInput` via:
//
//	ListingIamBindingArray{ ListingIamBindingArgs{...} }
type ListingIamBindingArrayInput interface {
	pulumi.Input

	ToListingIamBindingArrayOutput() ListingIamBindingArrayOutput
	ToListingIamBindingArrayOutputWithContext(context.Context) ListingIamBindingArrayOutput
}

type ListingIamBindingArray []ListingIamBindingInput

func (ListingIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingIamBinding)(nil)).Elem()
}

func (i ListingIamBindingArray) ToListingIamBindingArrayOutput() ListingIamBindingArrayOutput {
	return i.ToListingIamBindingArrayOutputWithContext(context.Background())
}

func (i ListingIamBindingArray) ToListingIamBindingArrayOutputWithContext(ctx context.Context) ListingIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingIamBindingArrayOutput)
}

// ListingIamBindingMapInput is an input type that accepts ListingIamBindingMap and ListingIamBindingMapOutput values.
// You can construct a concrete instance of `ListingIamBindingMapInput` via:
//
//	ListingIamBindingMap{ "key": ListingIamBindingArgs{...} }
type ListingIamBindingMapInput interface {
	pulumi.Input

	ToListingIamBindingMapOutput() ListingIamBindingMapOutput
	ToListingIamBindingMapOutputWithContext(context.Context) ListingIamBindingMapOutput
}

type ListingIamBindingMap map[string]ListingIamBindingInput

func (ListingIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingIamBinding)(nil)).Elem()
}

func (i ListingIamBindingMap) ToListingIamBindingMapOutput() ListingIamBindingMapOutput {
	return i.ToListingIamBindingMapOutputWithContext(context.Background())
}

func (i ListingIamBindingMap) ToListingIamBindingMapOutputWithContext(ctx context.Context) ListingIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingIamBindingMapOutput)
}

type ListingIamBindingOutput struct{ *pulumi.OutputState }

func (ListingIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingIamBinding)(nil)).Elem()
}

func (o ListingIamBindingOutput) ToListingIamBindingOutput() ListingIamBindingOutput {
	return o
}

func (o ListingIamBindingOutput) ToListingIamBindingOutputWithContext(ctx context.Context) ListingIamBindingOutput {
	return o
}

func (o ListingIamBindingOutput) Condition() ListingIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *ListingIamBinding) ListingIamBindingConditionPtrOutput { return v.Condition }).(ListingIamBindingConditionPtrOutput)
}

// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
func (o ListingIamBindingOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamBinding) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o ListingIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
func (o ListingIamBindingOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamBinding) pulumi.StringOutput { return v.ListingId }).(pulumi.StringOutput)
}

// The name of the location this data exchange listing.
// Used to find the parent resource to bind the IAM policy to
func (o ListingIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ListingIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ListingIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o ListingIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `bigqueryanalyticshub.ListingIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o ListingIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ListingIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ListingIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingIamBinding)(nil)).Elem()
}

func (o ListingIamBindingArrayOutput) ToListingIamBindingArrayOutput() ListingIamBindingArrayOutput {
	return o
}

func (o ListingIamBindingArrayOutput) ToListingIamBindingArrayOutputWithContext(ctx context.Context) ListingIamBindingArrayOutput {
	return o
}

func (o ListingIamBindingArrayOutput) Index(i pulumi.IntInput) ListingIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListingIamBinding {
		return vs[0].([]*ListingIamBinding)[vs[1].(int)]
	}).(ListingIamBindingOutput)
}

type ListingIamBindingMapOutput struct{ *pulumi.OutputState }

func (ListingIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingIamBinding)(nil)).Elem()
}

func (o ListingIamBindingMapOutput) ToListingIamBindingMapOutput() ListingIamBindingMapOutput {
	return o
}

func (o ListingIamBindingMapOutput) ToListingIamBindingMapOutputWithContext(ctx context.Context) ListingIamBindingMapOutput {
	return o
}

func (o ListingIamBindingMapOutput) MapIndex(k pulumi.StringInput) ListingIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListingIamBinding {
		return vs[0].(map[string]*ListingIamBinding)[vs[1].(string)]
	}).(ListingIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListingIamBindingInput)(nil)).Elem(), &ListingIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingIamBindingArrayInput)(nil)).Elem(), ListingIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingIamBindingMapInput)(nil)).Elem(), ListingIamBindingMap{})
	pulumi.RegisterOutputType(ListingIamBindingOutput{})
	pulumi.RegisterOutputType(ListingIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ListingIamBindingMapOutput{})
}
