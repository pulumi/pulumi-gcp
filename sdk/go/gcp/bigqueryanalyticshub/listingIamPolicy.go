// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigqueryanalyticshub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Three different resources help you manage your IAM policy for Bigquery Analytics Hub Listing. Each of these resources serves a different use case:
//
// * `bigqueryanalyticshub.ListingIamPolicy`: Authoritative. Sets the IAM policy for the listing and replaces any existing policy already attached.
// * `bigqueryanalyticshub.ListingIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the listing are preserved.
// * `bigqueryanalyticshub.ListingIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the listing are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `bigqueryanalyticshub.ListingIamPolicy`: Retrieves the IAM policy for the listing
//
// > **Note:** `bigqueryanalyticshub.ListingIamPolicy` **cannot** be used in conjunction with `bigqueryanalyticshub.ListingIamBinding` and `bigqueryanalyticshub.ListingIamMember` or they will fight over what your policy should be.
//
// > **Note:** `bigqueryanalyticshub.ListingIamBinding` resources **can be** used in conjunction with `bigqueryanalyticshub.ListingIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}} * {{project}}/{{location}}/{{data_exchange_id}}/{{listing_id}} * {{location}}/{{data_exchange_id}}/{{listing_id}} * {{listing_id}} Any variables not passed in the import command will be taken from the provider configuration. Bigquery Analytics Hub listing IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy editor "projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy editor "projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy editor projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ListingIamPolicy struct {
	pulumi.CustomResourceState

	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringOutput `pulumi:"dataExchangeId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId pulumi.StringOutput `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewListingIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewListingIamPolicy(ctx *pulumi.Context,
	name string, args *ListingIamPolicyArgs, opts ...pulumi.ResourceOption) (*ListingIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.ListingId == nil {
		return nil, errors.New("invalid value for required argument 'ListingId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ListingIamPolicy
	err := ctx.RegisterResource("gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListingIamPolicy gets an existing ListingIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListingIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListingIamPolicyState, opts ...pulumi.ResourceOption) (*ListingIamPolicy, error) {
	var resource ListingIamPolicy
	err := ctx.ReadResource("gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListingIamPolicy resources.
type listingIamPolicyState struct {
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId *string `pulumi:"dataExchangeId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId *string `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

type ListingIamPolicyState struct {
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId pulumi.StringPtrInput
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (ListingIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*listingIamPolicyState)(nil)).Elem()
}

type listingIamPolicyArgs struct {
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId string `pulumi:"dataExchangeId"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId string `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ListingIamPolicy resource.
type ListingIamPolicyArgs struct {
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringInput
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	ListingId pulumi.StringInput
	// The name of the location this data exchange listing.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (ListingIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listingIamPolicyArgs)(nil)).Elem()
}

type ListingIamPolicyInput interface {
	pulumi.Input

	ToListingIamPolicyOutput() ListingIamPolicyOutput
	ToListingIamPolicyOutputWithContext(ctx context.Context) ListingIamPolicyOutput
}

func (*ListingIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingIamPolicy)(nil)).Elem()
}

func (i *ListingIamPolicy) ToListingIamPolicyOutput() ListingIamPolicyOutput {
	return i.ToListingIamPolicyOutputWithContext(context.Background())
}

func (i *ListingIamPolicy) ToListingIamPolicyOutputWithContext(ctx context.Context) ListingIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingIamPolicyOutput)
}

func (i *ListingIamPolicy) ToOutput(ctx context.Context) pulumix.Output[*ListingIamPolicy] {
	return pulumix.Output[*ListingIamPolicy]{
		OutputState: i.ToListingIamPolicyOutputWithContext(ctx).OutputState,
	}
}

// ListingIamPolicyArrayInput is an input type that accepts ListingIamPolicyArray and ListingIamPolicyArrayOutput values.
// You can construct a concrete instance of `ListingIamPolicyArrayInput` via:
//
//	ListingIamPolicyArray{ ListingIamPolicyArgs{...} }
type ListingIamPolicyArrayInput interface {
	pulumi.Input

	ToListingIamPolicyArrayOutput() ListingIamPolicyArrayOutput
	ToListingIamPolicyArrayOutputWithContext(context.Context) ListingIamPolicyArrayOutput
}

type ListingIamPolicyArray []ListingIamPolicyInput

func (ListingIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingIamPolicy)(nil)).Elem()
}

func (i ListingIamPolicyArray) ToListingIamPolicyArrayOutput() ListingIamPolicyArrayOutput {
	return i.ToListingIamPolicyArrayOutputWithContext(context.Background())
}

func (i ListingIamPolicyArray) ToListingIamPolicyArrayOutputWithContext(ctx context.Context) ListingIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingIamPolicyArrayOutput)
}

func (i ListingIamPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*ListingIamPolicy] {
	return pulumix.Output[[]*ListingIamPolicy]{
		OutputState: i.ToListingIamPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// ListingIamPolicyMapInput is an input type that accepts ListingIamPolicyMap and ListingIamPolicyMapOutput values.
// You can construct a concrete instance of `ListingIamPolicyMapInput` via:
//
//	ListingIamPolicyMap{ "key": ListingIamPolicyArgs{...} }
type ListingIamPolicyMapInput interface {
	pulumi.Input

	ToListingIamPolicyMapOutput() ListingIamPolicyMapOutput
	ToListingIamPolicyMapOutputWithContext(context.Context) ListingIamPolicyMapOutput
}

type ListingIamPolicyMap map[string]ListingIamPolicyInput

func (ListingIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingIamPolicy)(nil)).Elem()
}

func (i ListingIamPolicyMap) ToListingIamPolicyMapOutput() ListingIamPolicyMapOutput {
	return i.ToListingIamPolicyMapOutputWithContext(context.Background())
}

func (i ListingIamPolicyMap) ToListingIamPolicyMapOutputWithContext(ctx context.Context) ListingIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingIamPolicyMapOutput)
}

func (i ListingIamPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ListingIamPolicy] {
	return pulumix.Output[map[string]*ListingIamPolicy]{
		OutputState: i.ToListingIamPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type ListingIamPolicyOutput struct{ *pulumi.OutputState }

func (ListingIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingIamPolicy)(nil)).Elem()
}

func (o ListingIamPolicyOutput) ToListingIamPolicyOutput() ListingIamPolicyOutput {
	return o
}

func (o ListingIamPolicyOutput) ToListingIamPolicyOutputWithContext(ctx context.Context) ListingIamPolicyOutput {
	return o
}

func (o ListingIamPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*ListingIamPolicy] {
	return pulumix.Output[*ListingIamPolicy]{
		OutputState: o.OutputState,
	}
}

// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
func (o ListingIamPolicyOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamPolicy) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o ListingIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
func (o ListingIamPolicyOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamPolicy) pulumi.StringOutput { return v.ListingId }).(pulumi.StringOutput)
}

// The name of the location this data exchange listing.
// Used to find the parent resource to bind the IAM policy to
func (o ListingIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o ListingIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o ListingIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ListingIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (ListingIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingIamPolicy)(nil)).Elem()
}

func (o ListingIamPolicyArrayOutput) ToListingIamPolicyArrayOutput() ListingIamPolicyArrayOutput {
	return o
}

func (o ListingIamPolicyArrayOutput) ToListingIamPolicyArrayOutputWithContext(ctx context.Context) ListingIamPolicyArrayOutput {
	return o
}

func (o ListingIamPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ListingIamPolicy] {
	return pulumix.Output[[]*ListingIamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ListingIamPolicyArrayOutput) Index(i pulumi.IntInput) ListingIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListingIamPolicy {
		return vs[0].([]*ListingIamPolicy)[vs[1].(int)]
	}).(ListingIamPolicyOutput)
}

type ListingIamPolicyMapOutput struct{ *pulumi.OutputState }

func (ListingIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingIamPolicy)(nil)).Elem()
}

func (o ListingIamPolicyMapOutput) ToListingIamPolicyMapOutput() ListingIamPolicyMapOutput {
	return o
}

func (o ListingIamPolicyMapOutput) ToListingIamPolicyMapOutputWithContext(ctx context.Context) ListingIamPolicyMapOutput {
	return o
}

func (o ListingIamPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ListingIamPolicy] {
	return pulumix.Output[map[string]*ListingIamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ListingIamPolicyMapOutput) MapIndex(k pulumi.StringInput) ListingIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListingIamPolicy {
		return vs[0].(map[string]*ListingIamPolicy)[vs[1].(string)]
	}).(ListingIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListingIamPolicyInput)(nil)).Elem(), &ListingIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingIamPolicyArrayInput)(nil)).Elem(), ListingIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingIamPolicyMapInput)(nil)).Elem(), ListingIamPolicyMap{})
	pulumi.RegisterOutputType(ListingIamPolicyOutput{})
	pulumi.RegisterOutputType(ListingIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(ListingIamPolicyMapOutput{})
}
