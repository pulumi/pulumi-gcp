// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigqueryanalyticshub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Bigquery Analytics Hub data exchange listing
//
// To get more information about Listing, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/bigquery/docs/analytics-hub-introduction)
//
// ## Example Usage
// ### Bigquery Analyticshub Listing Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigqueryanalyticshub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			listingDataExchange, err := bigqueryanalyticshub.NewDataExchange(ctx, "listingDataExchange", &bigqueryanalyticshub.DataExchangeArgs{
//				Location:       pulumi.String("US"),
//				DataExchangeId: pulumi.String("my_data_exchange"),
//				DisplayName:    pulumi.String("my_data_exchange"),
//				Description:    pulumi.String("example data exchange"),
//			})
//			if err != nil {
//				return err
//			}
//			listingDataset, err := bigquery.NewDataset(ctx, "listingDataset", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("my_listing"),
//				FriendlyName: pulumi.String("my_listing"),
//				Description:  pulumi.String("example data exchange"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigqueryanalyticshub.NewListing(ctx, "listingListing", &bigqueryanalyticshub.ListingArgs{
//				Location:       pulumi.String("US"),
//				DataExchangeId: listingDataExchange.DataExchangeId,
//				ListingId:      pulumi.String("my_listing"),
//				DisplayName:    pulumi.String("my_listing"),
//				Description:    pulumi.String("example data exchange"),
//				BigqueryDataset: &bigqueryanalyticshub.ListingBigqueryDatasetArgs{
//					Dataset: listingDataset.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Listing can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listing:Listing default projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listing:Listing default {{project}}/{{location}}/{{data_exchange_id}}/{{listing_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/listing:Listing default {{location}}/{{data_exchange_id}}/{{listing_id}}
//
// ```
type Listing struct {
	pulumi.CustomResourceState

	// Shared dataset i.e. BigQuery dataset source.
	// Structure is documented below.
	BigqueryDataset ListingBigqueryDatasetOutput `pulumi:"bigqueryDataset"`
	// Categories of the listing. Up to two categories are allowed.
	Categories pulumi.StringArrayOutput `pulumi:"categories"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringOutput `pulumi:"dataExchangeId"`
	// Details of the data provider who owns the source data.
	// Structure is documented below.
	DataProvider ListingDataProviderPtrOutput `pulumi:"dataProvider"`
	// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Documentation describing the listing.
	Documentation pulumi.StringPtrOutput `pulumi:"documentation"`
	// Base64 encoded image representing the listing.
	Icon pulumi.StringPtrOutput `pulumi:"icon"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId pulumi.StringOutput `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the data provider.
	// (Required)
	// Name of the listing publisher.
	Name pulumi.StringOutput `pulumi:"name"`
	// Email or URL of the primary point of contact of the listing.
	// (Optional)
	// Email or URL of the data provider.
	// (Optional)
	// Email or URL of the listing publisher.
	PrimaryContact pulumi.StringPtrOutput `pulumi:"primaryContact"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Details of the publisher who owns the listing and who can share the source data.
	// Structure is documented below.
	Publisher ListingPublisherPtrOutput `pulumi:"publisher"`
	// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
	RequestAccess pulumi.StringPtrOutput `pulumi:"requestAccess"`
}

// NewListing registers a new resource with the given unique name, arguments, and options.
func NewListing(ctx *pulumi.Context,
	name string, args *ListingArgs, opts ...pulumi.ResourceOption) (*Listing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BigqueryDataset == nil {
		return nil, errors.New("invalid value for required argument 'BigqueryDataset'")
	}
	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ListingId == nil {
		return nil, errors.New("invalid value for required argument 'ListingId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource Listing
	err := ctx.RegisterResource("gcp:bigqueryanalyticshub/listing:Listing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListing gets an existing Listing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListingState, opts ...pulumi.ResourceOption) (*Listing, error) {
	var resource Listing
	err := ctx.ReadResource("gcp:bigqueryanalyticshub/listing:Listing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listing resources.
type listingState struct {
	// Shared dataset i.e. BigQuery dataset source.
	// Structure is documented below.
	BigqueryDataset *ListingBigqueryDataset `pulumi:"bigqueryDataset"`
	// Categories of the listing. Up to two categories are allowed.
	Categories []string `pulumi:"categories"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId *string `pulumi:"dataExchangeId"`
	// Details of the data provider who owns the source data.
	// Structure is documented below.
	DataProvider *ListingDataProvider `pulumi:"dataProvider"`
	// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
	Description *string `pulumi:"description"`
	// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
	DisplayName *string `pulumi:"displayName"`
	// Documentation describing the listing.
	Documentation *string `pulumi:"documentation"`
	// Base64 encoded image representing the listing.
	Icon *string `pulumi:"icon"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId *string `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	Location *string `pulumi:"location"`
	// Name of the data provider.
	// (Required)
	// Name of the listing publisher.
	Name *string `pulumi:"name"`
	// Email or URL of the primary point of contact of the listing.
	// (Optional)
	// Email or URL of the data provider.
	// (Optional)
	// Email or URL of the listing publisher.
	PrimaryContact *string `pulumi:"primaryContact"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Details of the publisher who owns the listing and who can share the source data.
	// Structure is documented below.
	Publisher *ListingPublisher `pulumi:"publisher"`
	// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
	RequestAccess *string `pulumi:"requestAccess"`
}

type ListingState struct {
	// Shared dataset i.e. BigQuery dataset source.
	// Structure is documented below.
	BigqueryDataset ListingBigqueryDatasetPtrInput
	// Categories of the listing. Up to two categories are allowed.
	Categories pulumi.StringArrayInput
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringPtrInput
	// Details of the data provider who owns the source data.
	// Structure is documented below.
	DataProvider ListingDataProviderPtrInput
	// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
	Description pulumi.StringPtrInput
	// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
	DisplayName pulumi.StringPtrInput
	// Documentation describing the listing.
	Documentation pulumi.StringPtrInput
	// Base64 encoded image representing the listing.
	Icon pulumi.StringPtrInput
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId pulumi.StringPtrInput
	// The name of the location this data exchange listing.
	Location pulumi.StringPtrInput
	// Name of the data provider.
	// (Required)
	// Name of the listing publisher.
	Name pulumi.StringPtrInput
	// Email or URL of the primary point of contact of the listing.
	// (Optional)
	// Email or URL of the data provider.
	// (Optional)
	// Email or URL of the listing publisher.
	PrimaryContact pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Details of the publisher who owns the listing and who can share the source data.
	// Structure is documented below.
	Publisher ListingPublisherPtrInput
	// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
	RequestAccess pulumi.StringPtrInput
}

func (ListingState) ElementType() reflect.Type {
	return reflect.TypeOf((*listingState)(nil)).Elem()
}

type listingArgs struct {
	// Shared dataset i.e. BigQuery dataset source.
	// Structure is documented below.
	BigqueryDataset ListingBigqueryDataset `pulumi:"bigqueryDataset"`
	// Categories of the listing. Up to two categories are allowed.
	Categories []string `pulumi:"categories"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId string `pulumi:"dataExchangeId"`
	// Details of the data provider who owns the source data.
	// Structure is documented below.
	DataProvider *ListingDataProvider `pulumi:"dataProvider"`
	// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
	Description *string `pulumi:"description"`
	// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
	DisplayName string `pulumi:"displayName"`
	// Documentation describing the listing.
	Documentation *string `pulumi:"documentation"`
	// Base64 encoded image representing the listing.
	Icon *string `pulumi:"icon"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId string `pulumi:"listingId"`
	// The name of the location this data exchange listing.
	Location string `pulumi:"location"`
	// Email or URL of the primary point of contact of the listing.
	// (Optional)
	// Email or URL of the data provider.
	// (Optional)
	// Email or URL of the listing publisher.
	PrimaryContact *string `pulumi:"primaryContact"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Details of the publisher who owns the listing and who can share the source data.
	// Structure is documented below.
	Publisher *ListingPublisher `pulumi:"publisher"`
	// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
	RequestAccess *string `pulumi:"requestAccess"`
}

// The set of arguments for constructing a Listing resource.
type ListingArgs struct {
	// Shared dataset i.e. BigQuery dataset source.
	// Structure is documented below.
	BigqueryDataset ListingBigqueryDatasetInput
	// Categories of the listing. Up to two categories are allowed.
	Categories pulumi.StringArrayInput
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringInput
	// Details of the data provider who owns the source data.
	// Structure is documented below.
	DataProvider ListingDataProviderPtrInput
	// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
	Description pulumi.StringPtrInput
	// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
	DisplayName pulumi.StringInput
	// Documentation describing the listing.
	Documentation pulumi.StringPtrInput
	// Base64 encoded image representing the listing.
	Icon pulumi.StringPtrInput
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId pulumi.StringInput
	// The name of the location this data exchange listing.
	Location pulumi.StringInput
	// Email or URL of the primary point of contact of the listing.
	// (Optional)
	// Email or URL of the data provider.
	// (Optional)
	// Email or URL of the listing publisher.
	PrimaryContact pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Details of the publisher who owns the listing and who can share the source data.
	// Structure is documented below.
	Publisher ListingPublisherPtrInput
	// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
	RequestAccess pulumi.StringPtrInput
}

func (ListingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listingArgs)(nil)).Elem()
}

type ListingInput interface {
	pulumi.Input

	ToListingOutput() ListingOutput
	ToListingOutputWithContext(ctx context.Context) ListingOutput
}

func (*Listing) ElementType() reflect.Type {
	return reflect.TypeOf((**Listing)(nil)).Elem()
}

func (i *Listing) ToListingOutput() ListingOutput {
	return i.ToListingOutputWithContext(context.Background())
}

func (i *Listing) ToListingOutputWithContext(ctx context.Context) ListingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingOutput)
}

// ListingArrayInput is an input type that accepts ListingArray and ListingArrayOutput values.
// You can construct a concrete instance of `ListingArrayInput` via:
//
//	ListingArray{ ListingArgs{...} }
type ListingArrayInput interface {
	pulumi.Input

	ToListingArrayOutput() ListingArrayOutput
	ToListingArrayOutputWithContext(context.Context) ListingArrayOutput
}

type ListingArray []ListingInput

func (ListingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listing)(nil)).Elem()
}

func (i ListingArray) ToListingArrayOutput() ListingArrayOutput {
	return i.ToListingArrayOutputWithContext(context.Background())
}

func (i ListingArray) ToListingArrayOutputWithContext(ctx context.Context) ListingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingArrayOutput)
}

// ListingMapInput is an input type that accepts ListingMap and ListingMapOutput values.
// You can construct a concrete instance of `ListingMapInput` via:
//
//	ListingMap{ "key": ListingArgs{...} }
type ListingMapInput interface {
	pulumi.Input

	ToListingMapOutput() ListingMapOutput
	ToListingMapOutputWithContext(context.Context) ListingMapOutput
}

type ListingMap map[string]ListingInput

func (ListingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listing)(nil)).Elem()
}

func (i ListingMap) ToListingMapOutput() ListingMapOutput {
	return i.ToListingMapOutputWithContext(context.Background())
}

func (i ListingMap) ToListingMapOutputWithContext(ctx context.Context) ListingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingMapOutput)
}

type ListingOutput struct{ *pulumi.OutputState }

func (ListingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Listing)(nil)).Elem()
}

func (o ListingOutput) ToListingOutput() ListingOutput {
	return o
}

func (o ListingOutput) ToListingOutputWithContext(ctx context.Context) ListingOutput {
	return o
}

// Shared dataset i.e. BigQuery dataset source.
// Structure is documented below.
func (o ListingOutput) BigqueryDataset() ListingBigqueryDatasetOutput {
	return o.ApplyT(func(v *Listing) ListingBigqueryDatasetOutput { return v.BigqueryDataset }).(ListingBigqueryDatasetOutput)
}

// Categories of the listing. Up to two categories are allowed.
func (o ListingOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringArrayOutput { return v.Categories }).(pulumi.StringArrayOutput)
}

// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
func (o ListingOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

// Details of the data provider who owns the source data.
// Structure is documented below.
func (o ListingOutput) DataProvider() ListingDataProviderPtrOutput {
	return o.ApplyT(func(v *Listing) ListingDataProviderPtrOutput { return v.DataProvider }).(ListingDataProviderPtrOutput)
}

// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
func (o ListingOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
func (o ListingOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Documentation describing the listing.
func (o ListingOutput) Documentation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringPtrOutput { return v.Documentation }).(pulumi.StringPtrOutput)
}

// Base64 encoded image representing the listing.
func (o ListingOutput) Icon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringPtrOutput { return v.Icon }).(pulumi.StringPtrOutput)
}

// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
func (o ListingOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringOutput { return v.ListingId }).(pulumi.StringOutput)
}

// The name of the location this data exchange listing.
func (o ListingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the data provider.
// (Required)
// Name of the listing publisher.
func (o ListingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Email or URL of the primary point of contact of the listing.
// (Optional)
// Email or URL of the data provider.
// (Optional)
// Email or URL of the listing publisher.
func (o ListingOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringPtrOutput { return v.PrimaryContact }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ListingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Details of the publisher who owns the listing and who can share the source data.
// Structure is documented below.
func (o ListingOutput) Publisher() ListingPublisherPtrOutput {
	return o.ApplyT(func(v *Listing) ListingPublisherPtrOutput { return v.Publisher }).(ListingPublisherPtrOutput)
}

// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
func (o ListingOutput) RequestAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listing) pulumi.StringPtrOutput { return v.RequestAccess }).(pulumi.StringPtrOutput)
}

type ListingArrayOutput struct{ *pulumi.OutputState }

func (ListingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listing)(nil)).Elem()
}

func (o ListingArrayOutput) ToListingArrayOutput() ListingArrayOutput {
	return o
}

func (o ListingArrayOutput) ToListingArrayOutputWithContext(ctx context.Context) ListingArrayOutput {
	return o
}

func (o ListingArrayOutput) Index(i pulumi.IntInput) ListingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Listing {
		return vs[0].([]*Listing)[vs[1].(int)]
	}).(ListingOutput)
}

type ListingMapOutput struct{ *pulumi.OutputState }

func (ListingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listing)(nil)).Elem()
}

func (o ListingMapOutput) ToListingMapOutput() ListingMapOutput {
	return o
}

func (o ListingMapOutput) ToListingMapOutputWithContext(ctx context.Context) ListingMapOutput {
	return o
}

func (o ListingMapOutput) MapIndex(k pulumi.StringInput) ListingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Listing {
		return vs[0].(map[string]*Listing)[vs[1].(string)]
	}).(ListingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListingInput)(nil)).Elem(), &Listing{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingArrayInput)(nil)).Elem(), ListingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingMapInput)(nil)).Elem(), ListingMap{})
	pulumi.RegisterOutputType(ListingOutput{})
	pulumi.RegisterOutputType(ListingArrayOutput{})
	pulumi.RegisterOutputType(ListingMapOutput{})
}
