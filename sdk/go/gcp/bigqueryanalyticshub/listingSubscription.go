// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigqueryanalyticshub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Bigquery Analytics Hub listing subscription
//
// To get more information about ListingSubscription, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/bigquery/docs/analytics-hub-introduction)
//
// > **Note:** When importing the resource with `pulumi import`, provide the destination project and location
// in the format projects/{{destination_project}}/locations/{{destination_location}}/subscriptions/{{subscription_id}}
// ## Example Usage
//
// ### Bigquery Analyticshub Listing Subscription Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigqueryanalyticshub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			subscription, err := bigqueryanalyticshub.NewDataExchange(ctx, "subscription", &bigqueryanalyticshub.DataExchangeArgs{
//				Location:       pulumi.String("US"),
//				DataExchangeId: pulumi.String("my_data_exchange"),
//				DisplayName:    pulumi.String("my_data_exchange"),
//				Description:    pulumi.String("Test Description"),
//			})
//			if err != nil {
//				return err
//			}
//			subscriptionDataset, err := bigquery.NewDataset(ctx, "subscription", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("my_listing"),
//				FriendlyName: pulumi.String("my_listing"),
//				Description:  pulumi.String("Test Description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			subscriptionListing, err := bigqueryanalyticshub.NewListing(ctx, "subscription", &bigqueryanalyticshub.ListingArgs{
//				Location:       pulumi.String("US"),
//				DataExchangeId: subscription.DataExchangeId,
//				ListingId:      pulumi.String("my_listing"),
//				DisplayName:    pulumi.String("my_listing"),
//				Description:    pulumi.String("Test Description"),
//				BigqueryDataset: &bigqueryanalyticshub.ListingBigqueryDatasetArgs{
//					Dataset: subscriptionDataset.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigqueryanalyticshub.NewListingSubscription(ctx, "subscription", &bigqueryanalyticshub.ListingSubscriptionArgs{
//				Location:       pulumi.String("US"),
//				DataExchangeId: subscription.DataExchangeId,
//				ListingId:      subscriptionListing.ListingId,
//				DestinationDataset: &bigqueryanalyticshub.ListingSubscriptionDestinationDatasetArgs{
//					Description:  pulumi.String("A test subscription"),
//					FriendlyName: pulumi.String("ðŸ‘‹"),
//					Labels: pulumi.StringMap{
//						"testing": pulumi.String("123"),
//					},
//					Location: pulumi.String("US"),
//					DatasetReference: &bigqueryanalyticshub.ListingSubscriptionDestinationDatasetDatasetReferenceArgs{
//						DatasetId: pulumi.String("destination_dataset"),
//						ProjectId: subscriptionDataset.Project,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ListingSubscription can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}`
//
// * `{{project}}/{{location}}/{{subscription_id}}`
//
// * `{{location}}/{{subscription_id}}`
//
// When using the `pulumi import` command, ListingSubscription can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription default projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription default {{project}}/{{location}}/{{subscription_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription default {{location}}/{{subscription_id}}
// ```
type ListingSubscription struct {
	pulumi.CustomResourceState

	// Timestamp when the subscription was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringOutput `pulumi:"dataExchangeId"`
	// The destination dataset for this subscription.
	// Structure is documented below.
	DestinationDataset ListingSubscriptionDestinationDatasetOutput `pulumi:"destinationDataset"`
	// Timestamp when the subscription was last modified.
	LastModifyTime pulumi.StringOutput `pulumi:"lastModifyTime"`
	// Output only. Map of listing resource names to associated linked resource,
	// e.g. projects/123/locations/US/dataExchanges/456/listings/789 > projects/123/datasets/my_dataset
	// Structure is documented below.
	LinkedDatasetMaps ListingSubscriptionLinkedDatasetMapArrayOutput `pulumi:"linkedDatasetMaps"`
	// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
	// Structure is documented below.
	LinkedResources ListingSubscriptionLinkedResourceArrayOutput `pulumi:"linkedResources"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId pulumi.StringOutput `pulumi:"listingId"`
	// The name of the location of the data exchange. Distinct from the location of the destination data set.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the subscription. e.g. "projects/myproject/locations/US/subscriptions/123"
	Name pulumi.StringOutput `pulumi:"name"`
	// Display name of the project of this subscription.
	OrganizationDisplayName pulumi.StringOutput `pulumi:"organizationDisplayName"`
	// Organization of the project this subscription belongs to.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	Project        pulumi.StringOutput `pulumi:"project"`
	// Listing shared asset type.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// Current state of the subscription.
	State pulumi.StringOutput `pulumi:"state"`
	// Email of the subscriber.
	SubscriberContact pulumi.StringOutput `pulumi:"subscriberContact"`
	// The subscription id used to reference the subscription.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewListingSubscription registers a new resource with the given unique name, arguments, and options.
func NewListingSubscription(ctx *pulumi.Context,
	name string, args *ListingSubscriptionArgs, opts ...pulumi.ResourceOption) (*ListingSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.DestinationDataset == nil {
		return nil, errors.New("invalid value for required argument 'DestinationDataset'")
	}
	if args.ListingId == nil {
		return nil, errors.New("invalid value for required argument 'ListingId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ListingSubscription
	err := ctx.RegisterResource("gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListingSubscription gets an existing ListingSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListingSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListingSubscriptionState, opts ...pulumi.ResourceOption) (*ListingSubscription, error) {
	var resource ListingSubscription
	err := ctx.ReadResource("gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListingSubscription resources.
type listingSubscriptionState struct {
	// Timestamp when the subscription was created.
	CreationTime *string `pulumi:"creationTime"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId *string `pulumi:"dataExchangeId"`
	// The destination dataset for this subscription.
	// Structure is documented below.
	DestinationDataset *ListingSubscriptionDestinationDataset `pulumi:"destinationDataset"`
	// Timestamp when the subscription was last modified.
	LastModifyTime *string `pulumi:"lastModifyTime"`
	// Output only. Map of listing resource names to associated linked resource,
	// e.g. projects/123/locations/US/dataExchanges/456/listings/789 > projects/123/datasets/my_dataset
	// Structure is documented below.
	LinkedDatasetMaps []ListingSubscriptionLinkedDatasetMap `pulumi:"linkedDatasetMaps"`
	// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
	// Structure is documented below.
	LinkedResources []ListingSubscriptionLinkedResource `pulumi:"linkedResources"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId *string `pulumi:"listingId"`
	// The name of the location of the data exchange. Distinct from the location of the destination data set.
	Location *string `pulumi:"location"`
	// The resource name of the subscription. e.g. "projects/myproject/locations/US/subscriptions/123"
	Name *string `pulumi:"name"`
	// Display name of the project of this subscription.
	OrganizationDisplayName *string `pulumi:"organizationDisplayName"`
	// Organization of the project this subscription belongs to.
	OrganizationId *string `pulumi:"organizationId"`
	Project        *string `pulumi:"project"`
	// Listing shared asset type.
	ResourceType *string `pulumi:"resourceType"`
	// Current state of the subscription.
	State *string `pulumi:"state"`
	// Email of the subscriber.
	SubscriberContact *string `pulumi:"subscriberContact"`
	// The subscription id used to reference the subscription.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type ListingSubscriptionState struct {
	// Timestamp when the subscription was created.
	CreationTime pulumi.StringPtrInput
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringPtrInput
	// The destination dataset for this subscription.
	// Structure is documented below.
	DestinationDataset ListingSubscriptionDestinationDatasetPtrInput
	// Timestamp when the subscription was last modified.
	LastModifyTime pulumi.StringPtrInput
	// Output only. Map of listing resource names to associated linked resource,
	// e.g. projects/123/locations/US/dataExchanges/456/listings/789 > projects/123/datasets/my_dataset
	// Structure is documented below.
	LinkedDatasetMaps ListingSubscriptionLinkedDatasetMapArrayInput
	// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
	// Structure is documented below.
	LinkedResources ListingSubscriptionLinkedResourceArrayInput
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId pulumi.StringPtrInput
	// The name of the location of the data exchange. Distinct from the location of the destination data set.
	Location pulumi.StringPtrInput
	// The resource name of the subscription. e.g. "projects/myproject/locations/US/subscriptions/123"
	Name pulumi.StringPtrInput
	// Display name of the project of this subscription.
	OrganizationDisplayName pulumi.StringPtrInput
	// Organization of the project this subscription belongs to.
	OrganizationId pulumi.StringPtrInput
	Project        pulumi.StringPtrInput
	// Listing shared asset type.
	ResourceType pulumi.StringPtrInput
	// Current state of the subscription.
	State pulumi.StringPtrInput
	// Email of the subscriber.
	SubscriberContact pulumi.StringPtrInput
	// The subscription id used to reference the subscription.
	SubscriptionId pulumi.StringPtrInput
}

func (ListingSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*listingSubscriptionState)(nil)).Elem()
}

type listingSubscriptionArgs struct {
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId string `pulumi:"dataExchangeId"`
	// The destination dataset for this subscription.
	// Structure is documented below.
	DestinationDataset ListingSubscriptionDestinationDataset `pulumi:"destinationDataset"`
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId string `pulumi:"listingId"`
	// The name of the location of the data exchange. Distinct from the location of the destination data set.
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

// The set of arguments for constructing a ListingSubscription resource.
type ListingSubscriptionArgs struct {
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringInput
	// The destination dataset for this subscription.
	// Structure is documented below.
	DestinationDataset ListingSubscriptionDestinationDatasetInput
	// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	ListingId pulumi.StringInput
	// The name of the location of the data exchange. Distinct from the location of the destination data set.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
}

func (ListingSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listingSubscriptionArgs)(nil)).Elem()
}

type ListingSubscriptionInput interface {
	pulumi.Input

	ToListingSubscriptionOutput() ListingSubscriptionOutput
	ToListingSubscriptionOutputWithContext(ctx context.Context) ListingSubscriptionOutput
}

func (*ListingSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingSubscription)(nil)).Elem()
}

func (i *ListingSubscription) ToListingSubscriptionOutput() ListingSubscriptionOutput {
	return i.ToListingSubscriptionOutputWithContext(context.Background())
}

func (i *ListingSubscription) ToListingSubscriptionOutputWithContext(ctx context.Context) ListingSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingSubscriptionOutput)
}

// ListingSubscriptionArrayInput is an input type that accepts ListingSubscriptionArray and ListingSubscriptionArrayOutput values.
// You can construct a concrete instance of `ListingSubscriptionArrayInput` via:
//
//	ListingSubscriptionArray{ ListingSubscriptionArgs{...} }
type ListingSubscriptionArrayInput interface {
	pulumi.Input

	ToListingSubscriptionArrayOutput() ListingSubscriptionArrayOutput
	ToListingSubscriptionArrayOutputWithContext(context.Context) ListingSubscriptionArrayOutput
}

type ListingSubscriptionArray []ListingSubscriptionInput

func (ListingSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingSubscription)(nil)).Elem()
}

func (i ListingSubscriptionArray) ToListingSubscriptionArrayOutput() ListingSubscriptionArrayOutput {
	return i.ToListingSubscriptionArrayOutputWithContext(context.Background())
}

func (i ListingSubscriptionArray) ToListingSubscriptionArrayOutputWithContext(ctx context.Context) ListingSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingSubscriptionArrayOutput)
}

// ListingSubscriptionMapInput is an input type that accepts ListingSubscriptionMap and ListingSubscriptionMapOutput values.
// You can construct a concrete instance of `ListingSubscriptionMapInput` via:
//
//	ListingSubscriptionMap{ "key": ListingSubscriptionArgs{...} }
type ListingSubscriptionMapInput interface {
	pulumi.Input

	ToListingSubscriptionMapOutput() ListingSubscriptionMapOutput
	ToListingSubscriptionMapOutputWithContext(context.Context) ListingSubscriptionMapOutput
}

type ListingSubscriptionMap map[string]ListingSubscriptionInput

func (ListingSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingSubscription)(nil)).Elem()
}

func (i ListingSubscriptionMap) ToListingSubscriptionMapOutput() ListingSubscriptionMapOutput {
	return i.ToListingSubscriptionMapOutputWithContext(context.Background())
}

func (i ListingSubscriptionMap) ToListingSubscriptionMapOutputWithContext(ctx context.Context) ListingSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingSubscriptionMapOutput)
}

type ListingSubscriptionOutput struct{ *pulumi.OutputState }

func (ListingSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingSubscription)(nil)).Elem()
}

func (o ListingSubscriptionOutput) ToListingSubscriptionOutput() ListingSubscriptionOutput {
	return o
}

func (o ListingSubscriptionOutput) ToListingSubscriptionOutputWithContext(ctx context.Context) ListingSubscriptionOutput {
	return o
}

// Timestamp when the subscription was created.
func (o ListingSubscriptionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
func (o ListingSubscriptionOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

// The destination dataset for this subscription.
// Structure is documented below.
func (o ListingSubscriptionOutput) DestinationDataset() ListingSubscriptionDestinationDatasetOutput {
	return o.ApplyT(func(v *ListingSubscription) ListingSubscriptionDestinationDatasetOutput { return v.DestinationDataset }).(ListingSubscriptionDestinationDatasetOutput)
}

// Timestamp when the subscription was last modified.
func (o ListingSubscriptionOutput) LastModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.LastModifyTime }).(pulumi.StringOutput)
}

// Output only. Map of listing resource names to associated linked resource,
// e.g. projects/123/locations/US/dataExchanges/456/listings/789 > projects/123/datasets/my_dataset
// Structure is documented below.
func (o ListingSubscriptionOutput) LinkedDatasetMaps() ListingSubscriptionLinkedDatasetMapArrayOutput {
	return o.ApplyT(func(v *ListingSubscription) ListingSubscriptionLinkedDatasetMapArrayOutput {
		return v.LinkedDatasetMaps
	}).(ListingSubscriptionLinkedDatasetMapArrayOutput)
}

// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
// Structure is documented below.
func (o ListingSubscriptionOutput) LinkedResources() ListingSubscriptionLinkedResourceArrayOutput {
	return o.ApplyT(func(v *ListingSubscription) ListingSubscriptionLinkedResourceArrayOutput { return v.LinkedResources }).(ListingSubscriptionLinkedResourceArrayOutput)
}

// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
func (o ListingSubscriptionOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.ListingId }).(pulumi.StringOutput)
}

// The name of the location of the data exchange. Distinct from the location of the destination data set.
func (o ListingSubscriptionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the subscription. e.g. "projects/myproject/locations/US/subscriptions/123"
func (o ListingSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Display name of the project of this subscription.
func (o ListingSubscriptionOutput) OrganizationDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.OrganizationDisplayName }).(pulumi.StringOutput)
}

// Organization of the project this subscription belongs to.
func (o ListingSubscriptionOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o ListingSubscriptionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Listing shared asset type.
func (o ListingSubscriptionOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// Current state of the subscription.
func (o ListingSubscriptionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Email of the subscriber.
func (o ListingSubscriptionOutput) SubscriberContact() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.SubscriberContact }).(pulumi.StringOutput)
}

// The subscription id used to reference the subscription.
func (o ListingSubscriptionOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingSubscription) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

type ListingSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (ListingSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingSubscription)(nil)).Elem()
}

func (o ListingSubscriptionArrayOutput) ToListingSubscriptionArrayOutput() ListingSubscriptionArrayOutput {
	return o
}

func (o ListingSubscriptionArrayOutput) ToListingSubscriptionArrayOutputWithContext(ctx context.Context) ListingSubscriptionArrayOutput {
	return o
}

func (o ListingSubscriptionArrayOutput) Index(i pulumi.IntInput) ListingSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListingSubscription {
		return vs[0].([]*ListingSubscription)[vs[1].(int)]
	}).(ListingSubscriptionOutput)
}

type ListingSubscriptionMapOutput struct{ *pulumi.OutputState }

func (ListingSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingSubscription)(nil)).Elem()
}

func (o ListingSubscriptionMapOutput) ToListingSubscriptionMapOutput() ListingSubscriptionMapOutput {
	return o
}

func (o ListingSubscriptionMapOutput) ToListingSubscriptionMapOutputWithContext(ctx context.Context) ListingSubscriptionMapOutput {
	return o
}

func (o ListingSubscriptionMapOutput) MapIndex(k pulumi.StringInput) ListingSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListingSubscription {
		return vs[0].(map[string]*ListingSubscription)[vs[1].(string)]
	}).(ListingSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListingSubscriptionInput)(nil)).Elem(), &ListingSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingSubscriptionArrayInput)(nil)).Elem(), ListingSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingSubscriptionMapInput)(nil)).Elem(), ListingSubscriptionMap{})
	pulumi.RegisterOutputType(ListingSubscriptionOutput{})
	pulumi.RegisterOutputType(ListingSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(ListingSubscriptionMapOutput{})
}
