// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigqueryanalyticshub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Bigquery Analyticshub Dataexchange Subscription Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigqueryanalyticshub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			subscription, err := bigqueryanalyticshub.NewDataExchange(ctx, "subscription", &bigqueryanalyticshub.DataExchangeArgs{
//				Location:       pulumi.String("us"),
//				DataExchangeId: pulumi.String("my_test_dataexchange"),
//				DisplayName:    pulumi.String("my_test_dataexchange"),
//				Description:    pulumi.String("Test Data Exchange"),
//				SharingEnvironmentConfig: &bigqueryanalyticshub.DataExchangeSharingEnvironmentConfigArgs{
//					DcrExchangeConfig: &bigqueryanalyticshub.DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			subscriptionDataset, err := bigquery.NewDataset(ctx, "subscription", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("listing_src_dataset"),
//				FriendlyName: pulumi.String("listing_src_dataset"),
//				Description:  pulumi.String("Dataset for Listing"),
//				Location:     pulumi.String("us"),
//			})
//			if err != nil {
//				return err
//			}
//			subscriptionTable, err := bigquery.NewTable(ctx, "subscription", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				TableId:            pulumi.String("listing_src_table"),
//				DatasetId:          subscriptionDataset.DatasetId,
//				Schema: pulumi.String(`[
//	  {
//	    "name": "name",
//	    "type": "STRING",
//	    "mode": "NULLABLE"
//	  },
//	  {
//	    "name": "post_abbr",
//	    "type": "STRING",
//	    "mode": "NULLABLE"
//	  },
//	  {
//	    "name": "date",
//	    "type": "DATE",
//	    "mode": "NULLABLE"
//	  }
//
// ]
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigqueryanalyticshub.NewListing(ctx, "subscription", &bigqueryanalyticshub.ListingArgs{
//				Location:       pulumi.String("us"),
//				DataExchangeId: subscription.DataExchangeId,
//				ListingId:      pulumi.String("my_test_listing"),
//				DisplayName:    pulumi.String("my_test_listing"),
//				Description:    pulumi.String("Test Listing"),
//				RestrictedExportConfig: &bigqueryanalyticshub.ListingRestrictedExportConfigArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				BigqueryDataset: &bigqueryanalyticshub.ListingBigqueryDatasetArgs{
//					Dataset: subscriptionDataset.ID(),
//					SelectedResources: bigqueryanalyticshub.ListingBigqueryDatasetSelectedResourceArray{
//						&bigqueryanalyticshub.ListingBigqueryDatasetSelectedResourceArgs{
//							Table: subscriptionTable.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigqueryanalyticshub.NewDataExchangeSubscription(ctx, "subscription", &bigqueryanalyticshub.DataExchangeSubscriptionArgs{
//				Project:              subscriptionDataset.Project,
//				Location:             pulumi.String("us"),
//				DataExchangeProject:  subscription.Project,
//				DataExchangeLocation: subscription.Location,
//				DataExchangeId:       subscription.DataExchangeId,
//				SubscriptionId:       pulumi.String("my_subscription_id"),
//				SubscriberContact:    pulumi.String("testuser@example.com"),
//				DestinationDataset: &bigqueryanalyticshub.DataExchangeSubscriptionDestinationDatasetArgs{
//					Location: pulumi.String("us"),
//					DatasetReference: &bigqueryanalyticshub.DataExchangeSubscriptionDestinationDatasetDatasetReferenceArgs{
//						ProjectId: subscriptionDataset.Project,
//						DatasetId: pulumi.String("subscribed_dest_dataset"),
//					},
//					FriendlyName: pulumi.String("Subscribed Destination Dataset"),
//					Description:  pulumi.String("Destination dataset for subscription"),
//					Labels: pulumi.StringMap{
//						"environment": pulumi.String("development"),
//						"owner":       pulumi.String("team-a"),
//					},
//				},
//				RefreshPolicy: pulumi.String("ON_READ"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DataExchangeSubscription can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}`
//
// * `{{project}}/{{location}}/{{subscription_id}}`
//
// * `{{location}}/{{subscription_id}}`
//
// When using the `pulumi import` command, DataExchangeSubscription can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigqueryanalyticshub/dataExchangeSubscription:DataExchangeSubscription default projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigqueryanalyticshub/dataExchangeSubscription:DataExchangeSubscription default {{project}}/{{location}}/{{subscription_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigqueryanalyticshub/dataExchangeSubscription:DataExchangeSubscription default {{location}}/{{subscription_id}}
// ```
type DataExchangeSubscription struct {
	pulumi.CustomResourceState

	// Timestamp when the subscription was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/us/dataExchanges/456
	DataExchange pulumi.StringOutput `pulumi:"dataExchange"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringOutput `pulumi:"dataExchangeId"`
	// The name of the location of the Data Exchange.
	DataExchangeLocation pulumi.StringOutput `pulumi:"dataExchangeLocation"`
	// The ID of the Google Cloud project where the Data Exchange is located.
	DataExchangeProject pulumi.StringOutput `pulumi:"dataExchangeProject"`
	// BigQuery destination dataset to create for the subscriber.
	// Structure is documented below.
	DestinationDataset DataExchangeSubscriptionDestinationDatasetPtrOutput `pulumi:"destinationDataset"`
	// Timestamp when the subscription was last modified.
	LastModifyTime pulumi.StringOutput `pulumi:"lastModifyTime"`
	// Output only. Map of listing resource names to associated linked resource,
	// e.g. projects/123/locations/us/dataExchanges/456/listings/789 > projects/123/datasets/my_dataset
	// For Data Exchange subscriptions, this map may contain multiple entries if the Data Exchange has multiple listings.
	// Structure is documented below.
	LinkedDatasetMaps DataExchangeSubscriptionLinkedDatasetMapArrayOutput `pulumi:"linkedDatasetMaps"`
	// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
	// Structure is documented below.
	LinkedResources DataExchangeSubscriptionLinkedResourceArrayOutput `pulumi:"linkedResources"`
	// The geographic location where the Subscription (and its linked dataset) should reside.
	// This is the subscriber's desired location for the created resources.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location pulumi.StringOutput `pulumi:"location"`
	// Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for DataExchange/Listing.
	LogLinkedDatasetQueryUserEmail pulumi.BoolOutput `pulumi:"logLinkedDatasetQueryUserEmail"`
	// The resource name of the subscription. e.g. "projects/myproject/locations/us/subscriptions/123"
	Name pulumi.StringOutput `pulumi:"name"`
	// Display name of the project of this subscription.
	OrganizationDisplayName pulumi.StringOutput `pulumi:"organizationDisplayName"`
	// Organization of the project this subscription belongs to.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project       pulumi.StringOutput    `pulumi:"project"`
	RefreshPolicy pulumi.StringPtrOutput `pulumi:"refreshPolicy"`
	// Listing shared asset type.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// Current state of the subscription.
	State pulumi.StringOutput `pulumi:"state"`
	// Email of the subscriber.
	SubscriberContact pulumi.StringPtrOutput `pulumi:"subscriberContact"`
	// Name of the subscription to create.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewDataExchangeSubscription registers a new resource with the given unique name, arguments, and options.
func NewDataExchangeSubscription(ctx *pulumi.Context,
	name string, args *DataExchangeSubscriptionArgs, opts ...pulumi.ResourceOption) (*DataExchangeSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.DataExchangeLocation == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeLocation'")
	}
	if args.DataExchangeProject == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeProject'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataExchangeSubscription
	err := ctx.RegisterResource("gcp:bigqueryanalyticshub/dataExchangeSubscription:DataExchangeSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataExchangeSubscription gets an existing DataExchangeSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataExchangeSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataExchangeSubscriptionState, opts ...pulumi.ResourceOption) (*DataExchangeSubscription, error) {
	var resource DataExchangeSubscription
	err := ctx.ReadResource("gcp:bigqueryanalyticshub/dataExchangeSubscription:DataExchangeSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataExchangeSubscription resources.
type dataExchangeSubscriptionState struct {
	// Timestamp when the subscription was created.
	CreationTime *string `pulumi:"creationTime"`
	// Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/us/dataExchanges/456
	DataExchange *string `pulumi:"dataExchange"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId *string `pulumi:"dataExchangeId"`
	// The name of the location of the Data Exchange.
	DataExchangeLocation *string `pulumi:"dataExchangeLocation"`
	// The ID of the Google Cloud project where the Data Exchange is located.
	DataExchangeProject *string `pulumi:"dataExchangeProject"`
	// BigQuery destination dataset to create for the subscriber.
	// Structure is documented below.
	DestinationDataset *DataExchangeSubscriptionDestinationDataset `pulumi:"destinationDataset"`
	// Timestamp when the subscription was last modified.
	LastModifyTime *string `pulumi:"lastModifyTime"`
	// Output only. Map of listing resource names to associated linked resource,
	// e.g. projects/123/locations/us/dataExchanges/456/listings/789 > projects/123/datasets/my_dataset
	// For Data Exchange subscriptions, this map may contain multiple entries if the Data Exchange has multiple listings.
	// Structure is documented below.
	LinkedDatasetMaps []DataExchangeSubscriptionLinkedDatasetMap `pulumi:"linkedDatasetMaps"`
	// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
	// Structure is documented below.
	LinkedResources []DataExchangeSubscriptionLinkedResource `pulumi:"linkedResources"`
	// The geographic location where the Subscription (and its linked dataset) should reside.
	// This is the subscriber's desired location for the created resources.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location *string `pulumi:"location"`
	// Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for DataExchange/Listing.
	LogLinkedDatasetQueryUserEmail *bool `pulumi:"logLinkedDatasetQueryUserEmail"`
	// The resource name of the subscription. e.g. "projects/myproject/locations/us/subscriptions/123"
	Name *string `pulumi:"name"`
	// Display name of the project of this subscription.
	OrganizationDisplayName *string `pulumi:"organizationDisplayName"`
	// Organization of the project this subscription belongs to.
	OrganizationId *string `pulumi:"organizationId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project       *string `pulumi:"project"`
	RefreshPolicy *string `pulumi:"refreshPolicy"`
	// Listing shared asset type.
	ResourceType *string `pulumi:"resourceType"`
	// Current state of the subscription.
	State *string `pulumi:"state"`
	// Email of the subscriber.
	SubscriberContact *string `pulumi:"subscriberContact"`
	// Name of the subscription to create.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type DataExchangeSubscriptionState struct {
	// Timestamp when the subscription was created.
	CreationTime pulumi.StringPtrInput
	// Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/us/dataExchanges/456
	DataExchange pulumi.StringPtrInput
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringPtrInput
	// The name of the location of the Data Exchange.
	DataExchangeLocation pulumi.StringPtrInput
	// The ID of the Google Cloud project where the Data Exchange is located.
	DataExchangeProject pulumi.StringPtrInput
	// BigQuery destination dataset to create for the subscriber.
	// Structure is documented below.
	DestinationDataset DataExchangeSubscriptionDestinationDatasetPtrInput
	// Timestamp when the subscription was last modified.
	LastModifyTime pulumi.StringPtrInput
	// Output only. Map of listing resource names to associated linked resource,
	// e.g. projects/123/locations/us/dataExchanges/456/listings/789 > projects/123/datasets/my_dataset
	// For Data Exchange subscriptions, this map may contain multiple entries if the Data Exchange has multiple listings.
	// Structure is documented below.
	LinkedDatasetMaps DataExchangeSubscriptionLinkedDatasetMapArrayInput
	// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
	// Structure is documented below.
	LinkedResources DataExchangeSubscriptionLinkedResourceArrayInput
	// The geographic location where the Subscription (and its linked dataset) should reside.
	// This is the subscriber's desired location for the created resources.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location pulumi.StringPtrInput
	// Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for DataExchange/Listing.
	LogLinkedDatasetQueryUserEmail pulumi.BoolPtrInput
	// The resource name of the subscription. e.g. "projects/myproject/locations/us/subscriptions/123"
	Name pulumi.StringPtrInput
	// Display name of the project of this subscription.
	OrganizationDisplayName pulumi.StringPtrInput
	// Organization of the project this subscription belongs to.
	OrganizationId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project       pulumi.StringPtrInput
	RefreshPolicy pulumi.StringPtrInput
	// Listing shared asset type.
	ResourceType pulumi.StringPtrInput
	// Current state of the subscription.
	State pulumi.StringPtrInput
	// Email of the subscriber.
	SubscriberContact pulumi.StringPtrInput
	// Name of the subscription to create.
	SubscriptionId pulumi.StringPtrInput
}

func (DataExchangeSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataExchangeSubscriptionState)(nil)).Elem()
}

type dataExchangeSubscriptionArgs struct {
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId string `pulumi:"dataExchangeId"`
	// The name of the location of the Data Exchange.
	DataExchangeLocation string `pulumi:"dataExchangeLocation"`
	// The ID of the Google Cloud project where the Data Exchange is located.
	DataExchangeProject string `pulumi:"dataExchangeProject"`
	// BigQuery destination dataset to create for the subscriber.
	// Structure is documented below.
	DestinationDataset *DataExchangeSubscriptionDestinationDataset `pulumi:"destinationDataset"`
	// The geographic location where the Subscription (and its linked dataset) should reside.
	// This is the subscriber's desired location for the created resources.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project       *string `pulumi:"project"`
	RefreshPolicy *string `pulumi:"refreshPolicy"`
	// Email of the subscriber.
	SubscriberContact *string `pulumi:"subscriberContact"`
	// Name of the subscription to create.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a DataExchangeSubscription resource.
type DataExchangeSubscriptionArgs struct {
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
	DataExchangeId pulumi.StringInput
	// The name of the location of the Data Exchange.
	DataExchangeLocation pulumi.StringInput
	// The ID of the Google Cloud project where the Data Exchange is located.
	DataExchangeProject pulumi.StringInput
	// BigQuery destination dataset to create for the subscriber.
	// Structure is documented below.
	DestinationDataset DataExchangeSubscriptionDestinationDatasetPtrInput
	// The geographic location where the Subscription (and its linked dataset) should reside.
	// This is the subscriber's desired location for the created resources.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project       pulumi.StringPtrInput
	RefreshPolicy pulumi.StringPtrInput
	// Email of the subscriber.
	SubscriberContact pulumi.StringPtrInput
	// Name of the subscription to create.
	SubscriptionId pulumi.StringInput
}

func (DataExchangeSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataExchangeSubscriptionArgs)(nil)).Elem()
}

type DataExchangeSubscriptionInput interface {
	pulumi.Input

	ToDataExchangeSubscriptionOutput() DataExchangeSubscriptionOutput
	ToDataExchangeSubscriptionOutputWithContext(ctx context.Context) DataExchangeSubscriptionOutput
}

func (*DataExchangeSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**DataExchangeSubscription)(nil)).Elem()
}

func (i *DataExchangeSubscription) ToDataExchangeSubscriptionOutput() DataExchangeSubscriptionOutput {
	return i.ToDataExchangeSubscriptionOutputWithContext(context.Background())
}

func (i *DataExchangeSubscription) ToDataExchangeSubscriptionOutputWithContext(ctx context.Context) DataExchangeSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchangeSubscriptionOutput)
}

// DataExchangeSubscriptionArrayInput is an input type that accepts DataExchangeSubscriptionArray and DataExchangeSubscriptionArrayOutput values.
// You can construct a concrete instance of `DataExchangeSubscriptionArrayInput` via:
//
//	DataExchangeSubscriptionArray{ DataExchangeSubscriptionArgs{...} }
type DataExchangeSubscriptionArrayInput interface {
	pulumi.Input

	ToDataExchangeSubscriptionArrayOutput() DataExchangeSubscriptionArrayOutput
	ToDataExchangeSubscriptionArrayOutputWithContext(context.Context) DataExchangeSubscriptionArrayOutput
}

type DataExchangeSubscriptionArray []DataExchangeSubscriptionInput

func (DataExchangeSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataExchangeSubscription)(nil)).Elem()
}

func (i DataExchangeSubscriptionArray) ToDataExchangeSubscriptionArrayOutput() DataExchangeSubscriptionArrayOutput {
	return i.ToDataExchangeSubscriptionArrayOutputWithContext(context.Background())
}

func (i DataExchangeSubscriptionArray) ToDataExchangeSubscriptionArrayOutputWithContext(ctx context.Context) DataExchangeSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchangeSubscriptionArrayOutput)
}

// DataExchangeSubscriptionMapInput is an input type that accepts DataExchangeSubscriptionMap and DataExchangeSubscriptionMapOutput values.
// You can construct a concrete instance of `DataExchangeSubscriptionMapInput` via:
//
//	DataExchangeSubscriptionMap{ "key": DataExchangeSubscriptionArgs{...} }
type DataExchangeSubscriptionMapInput interface {
	pulumi.Input

	ToDataExchangeSubscriptionMapOutput() DataExchangeSubscriptionMapOutput
	ToDataExchangeSubscriptionMapOutputWithContext(context.Context) DataExchangeSubscriptionMapOutput
}

type DataExchangeSubscriptionMap map[string]DataExchangeSubscriptionInput

func (DataExchangeSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataExchangeSubscription)(nil)).Elem()
}

func (i DataExchangeSubscriptionMap) ToDataExchangeSubscriptionMapOutput() DataExchangeSubscriptionMapOutput {
	return i.ToDataExchangeSubscriptionMapOutputWithContext(context.Background())
}

func (i DataExchangeSubscriptionMap) ToDataExchangeSubscriptionMapOutputWithContext(ctx context.Context) DataExchangeSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchangeSubscriptionMapOutput)
}

type DataExchangeSubscriptionOutput struct{ *pulumi.OutputState }

func (DataExchangeSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataExchangeSubscription)(nil)).Elem()
}

func (o DataExchangeSubscriptionOutput) ToDataExchangeSubscriptionOutput() DataExchangeSubscriptionOutput {
	return o
}

func (o DataExchangeSubscriptionOutput) ToDataExchangeSubscriptionOutputWithContext(ctx context.Context) DataExchangeSubscriptionOutput {
	return o
}

// Timestamp when the subscription was created.
func (o DataExchangeSubscriptionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/us/dataExchanges/456
func (o DataExchangeSubscriptionOutput) DataExchange() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.DataExchange }).(pulumi.StringOutput)
}

// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
func (o DataExchangeSubscriptionOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

// The name of the location of the Data Exchange.
func (o DataExchangeSubscriptionOutput) DataExchangeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.DataExchangeLocation }).(pulumi.StringOutput)
}

// The ID of the Google Cloud project where the Data Exchange is located.
func (o DataExchangeSubscriptionOutput) DataExchangeProject() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.DataExchangeProject }).(pulumi.StringOutput)
}

// BigQuery destination dataset to create for the subscriber.
// Structure is documented below.
func (o DataExchangeSubscriptionOutput) DestinationDataset() DataExchangeSubscriptionDestinationDatasetPtrOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) DataExchangeSubscriptionDestinationDatasetPtrOutput {
		return v.DestinationDataset
	}).(DataExchangeSubscriptionDestinationDatasetPtrOutput)
}

// Timestamp when the subscription was last modified.
func (o DataExchangeSubscriptionOutput) LastModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.LastModifyTime }).(pulumi.StringOutput)
}

// Output only. Map of listing resource names to associated linked resource,
// e.g. projects/123/locations/us/dataExchanges/456/listings/789 > projects/123/datasets/my_dataset
// For Data Exchange subscriptions, this map may contain multiple entries if the Data Exchange has multiple listings.
// Structure is documented below.
func (o DataExchangeSubscriptionOutput) LinkedDatasetMaps() DataExchangeSubscriptionLinkedDatasetMapArrayOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) DataExchangeSubscriptionLinkedDatasetMapArrayOutput {
		return v.LinkedDatasetMaps
	}).(DataExchangeSubscriptionLinkedDatasetMapArrayOutput)
}

// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
// Structure is documented below.
func (o DataExchangeSubscriptionOutput) LinkedResources() DataExchangeSubscriptionLinkedResourceArrayOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) DataExchangeSubscriptionLinkedResourceArrayOutput {
		return v.LinkedResources
	}).(DataExchangeSubscriptionLinkedResourceArrayOutput)
}

// The geographic location where the Subscription (and its linked dataset) should reside.
// This is the subscriber's desired location for the created resources.
// See https://cloud.google.com/bigquery/docs/locations for supported locations.
func (o DataExchangeSubscriptionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for DataExchange/Listing.
func (o DataExchangeSubscriptionOutput) LogLinkedDatasetQueryUserEmail() pulumi.BoolOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.BoolOutput { return v.LogLinkedDatasetQueryUserEmail }).(pulumi.BoolOutput)
}

// The resource name of the subscription. e.g. "projects/myproject/locations/us/subscriptions/123"
func (o DataExchangeSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Display name of the project of this subscription.
func (o DataExchangeSubscriptionOutput) OrganizationDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.OrganizationDisplayName }).(pulumi.StringOutput)
}

// Organization of the project this subscription belongs to.
func (o DataExchangeSubscriptionOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o DataExchangeSubscriptionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataExchangeSubscriptionOutput) RefreshPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringPtrOutput { return v.RefreshPolicy }).(pulumi.StringPtrOutput)
}

// Listing shared asset type.
func (o DataExchangeSubscriptionOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// Current state of the subscription.
func (o DataExchangeSubscriptionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Email of the subscriber.
func (o DataExchangeSubscriptionOutput) SubscriberContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringPtrOutput { return v.SubscriberContact }).(pulumi.StringPtrOutput)
}

// Name of the subscription to create.
func (o DataExchangeSubscriptionOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchangeSubscription) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

type DataExchangeSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (DataExchangeSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataExchangeSubscription)(nil)).Elem()
}

func (o DataExchangeSubscriptionArrayOutput) ToDataExchangeSubscriptionArrayOutput() DataExchangeSubscriptionArrayOutput {
	return o
}

func (o DataExchangeSubscriptionArrayOutput) ToDataExchangeSubscriptionArrayOutputWithContext(ctx context.Context) DataExchangeSubscriptionArrayOutput {
	return o
}

func (o DataExchangeSubscriptionArrayOutput) Index(i pulumi.IntInput) DataExchangeSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataExchangeSubscription {
		return vs[0].([]*DataExchangeSubscription)[vs[1].(int)]
	}).(DataExchangeSubscriptionOutput)
}

type DataExchangeSubscriptionMapOutput struct{ *pulumi.OutputState }

func (DataExchangeSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataExchangeSubscription)(nil)).Elem()
}

func (o DataExchangeSubscriptionMapOutput) ToDataExchangeSubscriptionMapOutput() DataExchangeSubscriptionMapOutput {
	return o
}

func (o DataExchangeSubscriptionMapOutput) ToDataExchangeSubscriptionMapOutputWithContext(ctx context.Context) DataExchangeSubscriptionMapOutput {
	return o
}

func (o DataExchangeSubscriptionMapOutput) MapIndex(k pulumi.StringInput) DataExchangeSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataExchangeSubscription {
		return vs[0].(map[string]*DataExchangeSubscription)[vs[1].(string)]
	}).(DataExchangeSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchangeSubscriptionInput)(nil)).Elem(), &DataExchangeSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchangeSubscriptionArrayInput)(nil)).Elem(), DataExchangeSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchangeSubscriptionMapInput)(nil)).Elem(), DataExchangeSubscriptionMap{})
	pulumi.RegisterOutputType(DataExchangeSubscriptionOutput{})
	pulumi.RegisterOutputType(DataExchangeSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(DataExchangeSubscriptionMapOutput{})
}
