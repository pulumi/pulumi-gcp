// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Generates an IAM policy document that may be referenced by and applied to
// other Google Cloud Platform IAM resources, such as the `projects.IAMPolicy` resource.
//
// **Note:** Please review the documentation of the resource that you will be using the datasource with. Some resources such as `projects.IAMPolicy` and others have limitations in their API methods which are noted on their respective page.
func LookupIAMPolicy(ctx *pulumi.Context, args *LookupIAMPolicyArgs, opts ...pulumi.InvokeOption) (*LookupIAMPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupIAMPolicyResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupIAMPolicyResult{}, errors.New("DependsOn is not supported for direct form invoke LookupIAMPolicy, use LookupIAMPolicyOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupIAMPolicyResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupIAMPolicy, use LookupIAMPolicyOutput instead")
	}
	var rv LookupIAMPolicyResult
	err := ctx.Invoke("gcp:organizations/getIAMPolicy:getIAMPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIAMPolicy.
type LookupIAMPolicyArgs struct {
	// A nested configuration block that defines logging additional configuration for your project. This field is only supported on `projects.IAMPolicy`, `folder.IAMPolicy` and `organizations.IAMPolicy`.
	AuditConfigs []GetIAMPolicyAuditConfig `pulumi:"auditConfigs"`
	// A nested configuration block (described below)
	// defining a binding to be included in the policy document. Multiple
	// `binding` arguments are supported.
	//
	// Each document configuration must have one or more `binding` blocks, which
	// each accept the following arguments:
	Bindings []GetIAMPolicyBinding `pulumi:"bindings"`
}

// A collection of values returned by getIAMPolicy.
type LookupIAMPolicyResult struct {
	AuditConfigs []GetIAMPolicyAuditConfig `pulumi:"auditConfigs"`
	Bindings     []GetIAMPolicyBinding     `pulumi:"bindings"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The above bindings serialized in a format suitable for
	// referencing from a resource that supports IAM.
	PolicyData string `pulumi:"policyData"`
}

func LookupIAMPolicyOutput(ctx *pulumi.Context, args LookupIAMPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupIAMPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIAMPolicyResultOutput, error) {
			args := v.(LookupIAMPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupIAMPolicyResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:organizations/getIAMPolicy:getIAMPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupIAMPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupIAMPolicyResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupIAMPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupIAMPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupIAMPolicyResultOutput)
}

// A collection of arguments for invoking getIAMPolicy.
type LookupIAMPolicyOutputArgs struct {
	// A nested configuration block that defines logging additional configuration for your project. This field is only supported on `projects.IAMPolicy`, `folder.IAMPolicy` and `organizations.IAMPolicy`.
	AuditConfigs GetIAMPolicyAuditConfigArrayInput `pulumi:"auditConfigs"`
	// A nested configuration block (described below)
	// defining a binding to be included in the policy document. Multiple
	// `binding` arguments are supported.
	//
	// Each document configuration must have one or more `binding` blocks, which
	// each accept the following arguments:
	Bindings GetIAMPolicyBindingArrayInput `pulumi:"bindings"`
}

func (LookupIAMPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIAMPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getIAMPolicy.
type LookupIAMPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupIAMPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIAMPolicyResult)(nil)).Elem()
}

func (o LookupIAMPolicyResultOutput) ToLookupIAMPolicyResultOutput() LookupIAMPolicyResultOutput {
	return o
}

func (o LookupIAMPolicyResultOutput) ToLookupIAMPolicyResultOutputWithContext(ctx context.Context) LookupIAMPolicyResultOutput {
	return o
}

func (o LookupIAMPolicyResultOutput) AuditConfigs() GetIAMPolicyAuditConfigArrayOutput {
	return o.ApplyT(func(v LookupIAMPolicyResult) []GetIAMPolicyAuditConfig { return v.AuditConfigs }).(GetIAMPolicyAuditConfigArrayOutput)
}

func (o LookupIAMPolicyResultOutput) Bindings() GetIAMPolicyBindingArrayOutput {
	return o.ApplyT(func(v LookupIAMPolicyResult) []GetIAMPolicyBinding { return v.Bindings }).(GetIAMPolicyBindingArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIAMPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIAMPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The above bindings serialized in a format suitable for
// referencing from a resource that supports IAM.
func (o LookupIAMPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIAMPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIAMPolicyResultOutput{})
}
