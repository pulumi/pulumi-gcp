// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package migrationcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the PreferenceSet resource.
//
// To get more information about PreferenceSet, see:
//
// * [API documentation](https://cloud.google.com/migration-center/docs/reference/rest/v1)
// * How-to Guides
//   - [Managing Migration Preferences](https://cloud.google.com/migration-center/docs/migration-preferences)
//
// ## Example Usage
// ### Preference Set Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/migrationcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := migrationcenter.NewPreferenceSet(ctx, "default", &migrationcenter.PreferenceSetArgs{
//				Location:        pulumi.String("us-central1"),
//				PreferenceSetId: pulumi.String("preference-set-test"),
//				Description:     pulumi.String("Terraform integration test description"),
//				DisplayName:     pulumi.String("Terraform integration test display"),
//				VirtualMachinePreferences: &migrationcenter.PreferenceSetVirtualMachinePreferencesArgs{
//					VmwareEnginePreferences: &migrationcenter.PreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesArgs{
//						CpuOvercommitRatio: pulumi.Float64(1.5),
//					},
//					SizingOptimizationStrategy: pulumi.String("SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE"),
//					TargetProduct:              pulumi.String("COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Preference Set Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/migrationcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := migrationcenter.NewPreferenceSet(ctx, "default", &migrationcenter.PreferenceSetArgs{
//				Location:        pulumi.String("us-central1"),
//				PreferenceSetId: pulumi.String("preference-set-test"),
//				Description:     pulumi.String("Terraform integration test description"),
//				DisplayName:     pulumi.String("Terraform integration test display"),
//				VirtualMachinePreferences: &migrationcenter.PreferenceSetVirtualMachinePreferencesArgs{
//					VmwareEnginePreferences: &migrationcenter.PreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesArgs{
//						CpuOvercommitRatio:                   pulumi.Float64(1.5),
//						StorageDeduplicationCompressionRatio: pulumi.Float64(1.3),
//						CommitmentPlan:                       pulumi.String("ON_DEMAND"),
//					},
//					SizingOptimizationStrategy: pulumi.String("SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE"),
//					TargetProduct:              pulumi.String("COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE"),
//					CommitmentPlan:             pulumi.String("COMMITMENT_PLAN_ONE_YEAR"),
//					RegionPreferences: &migrationcenter.PreferenceSetVirtualMachinePreferencesRegionPreferencesArgs{
//						PreferredRegions: pulumi.StringArray{
//							pulumi.String("us-central1"),
//						},
//					},
//					SoleTenancyPreferences: &migrationcenter.PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs{
//						CommitmentPlan:        pulumi.String("ON_DEMAND"),
//						CpuOvercommitRatio:    pulumi.Float64(1.2),
//						HostMaintenancePolicy: pulumi.String("HOST_MAINTENANCE_POLICY_DEFAULT"),
//						NodeTypes: migrationcenter.PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArray{
//							&migrationcenter.PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArgs{
//								NodeName: pulumi.String("tf-test"),
//							},
//						},
//					},
//					ComputeEnginePreferences: &migrationcenter.PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesArgs{
//						LicenseType: pulumi.String("LICENSE_TYPE_BRING_YOUR_OWN_LICENSE"),
//						MachinePreferences: &migrationcenter.PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesArgs{
//							AllowedMachineSeries: migrationcenter.PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesArray{
//								&migrationcenter.PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesArgs{
//									Code: pulumi.String("C3"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PreferenceSet can be imported using any of these accepted formats:
//
//   - `projects/{{project}}/locations/{{location}}/preferenceSets/{{preference_set_id}}`
//
//   - `{{project}}/{{location}}/{{preference_set_id}}`
//
//   - `{{location}}/{{preference_set_id}}`
//
//     When using the `pulumi import` command, PreferenceSet can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:migrationcenter/preferenceSet:PreferenceSet default projects/{{project}}/locations/{{location}}/preferenceSets/{{preference_set_id}}
// ```
//
// ```sh
// $ pulumi import gcp:migrationcenter/preferenceSet:PreferenceSet default {{project}}/{{location}}/{{preference_set_id}}
// ```
//
// ```sh
// $ pulumi import gcp:migrationcenter/preferenceSet:PreferenceSet default {{location}}/{{preference_set_id}}
// ```
type PreferenceSet struct {
	pulumi.CustomResourceState

	// Output only. The timestamp when the preference set was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the preference set.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Part of `parent`. See documentation of `projectsId`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Output only. Name of the preference set.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
	//
	// ***
	PreferenceSetId pulumi.StringOutput `pulumi:"preferenceSetId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. The timestamp when the preference set was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
	// Structure is documented below.
	VirtualMachinePreferences PreferenceSetVirtualMachinePreferencesPtrOutput `pulumi:"virtualMachinePreferences"`
}

// NewPreferenceSet registers a new resource with the given unique name, arguments, and options.
func NewPreferenceSet(ctx *pulumi.Context,
	name string, args *PreferenceSetArgs, opts ...pulumi.ResourceOption) (*PreferenceSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PreferenceSetId == nil {
		return nil, errors.New("invalid value for required argument 'PreferenceSetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreferenceSet
	err := ctx.RegisterResource("gcp:migrationcenter/preferenceSet:PreferenceSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreferenceSet gets an existing PreferenceSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreferenceSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreferenceSetState, opts ...pulumi.ResourceOption) (*PreferenceSet, error) {
	var resource PreferenceSet
	err := ctx.ReadResource("gcp:migrationcenter/preferenceSet:PreferenceSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreferenceSet resources.
type preferenceSetState struct {
	// Output only. The timestamp when the preference set was created.
	CreateTime *string `pulumi:"createTime"`
	// A description of the preference set.
	Description *string `pulumi:"description"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `pulumi:"displayName"`
	// Part of `parent`. See documentation of `projectsId`.
	Location *string `pulumi:"location"`
	// Output only. Name of the preference set.
	Name *string `pulumi:"name"`
	// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
	//
	// ***
	PreferenceSetId *string `pulumi:"preferenceSetId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. The timestamp when the preference set was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
	// Structure is documented below.
	VirtualMachinePreferences *PreferenceSetVirtualMachinePreferences `pulumi:"virtualMachinePreferences"`
}

type PreferenceSetState struct {
	// Output only. The timestamp when the preference set was created.
	CreateTime pulumi.StringPtrInput
	// A description of the preference set.
	Description pulumi.StringPtrInput
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringPtrInput
	// Part of `parent`. See documentation of `projectsId`.
	Location pulumi.StringPtrInput
	// Output only. Name of the preference set.
	Name pulumi.StringPtrInput
	// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
	//
	// ***
	PreferenceSetId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. The timestamp when the preference set was last updated.
	UpdateTime pulumi.StringPtrInput
	// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
	// Structure is documented below.
	VirtualMachinePreferences PreferenceSetVirtualMachinePreferencesPtrInput
}

func (PreferenceSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*preferenceSetState)(nil)).Elem()
}

type preferenceSetArgs struct {
	// A description of the preference set.
	Description *string `pulumi:"description"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `pulumi:"displayName"`
	// Part of `parent`. See documentation of `projectsId`.
	Location string `pulumi:"location"`
	// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
	//
	// ***
	PreferenceSetId string `pulumi:"preferenceSetId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
	// Structure is documented below.
	VirtualMachinePreferences *PreferenceSetVirtualMachinePreferences `pulumi:"virtualMachinePreferences"`
}

// The set of arguments for constructing a PreferenceSet resource.
type PreferenceSetArgs struct {
	// A description of the preference set.
	Description pulumi.StringPtrInput
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringPtrInput
	// Part of `parent`. See documentation of `projectsId`.
	Location pulumi.StringInput
	// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
	//
	// ***
	PreferenceSetId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
	// Structure is documented below.
	VirtualMachinePreferences PreferenceSetVirtualMachinePreferencesPtrInput
}

func (PreferenceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preferenceSetArgs)(nil)).Elem()
}

type PreferenceSetInput interface {
	pulumi.Input

	ToPreferenceSetOutput() PreferenceSetOutput
	ToPreferenceSetOutputWithContext(ctx context.Context) PreferenceSetOutput
}

func (*PreferenceSet) ElementType() reflect.Type {
	return reflect.TypeOf((**PreferenceSet)(nil)).Elem()
}

func (i *PreferenceSet) ToPreferenceSetOutput() PreferenceSetOutput {
	return i.ToPreferenceSetOutputWithContext(context.Background())
}

func (i *PreferenceSet) ToPreferenceSetOutputWithContext(ctx context.Context) PreferenceSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferenceSetOutput)
}

// PreferenceSetArrayInput is an input type that accepts PreferenceSetArray and PreferenceSetArrayOutput values.
// You can construct a concrete instance of `PreferenceSetArrayInput` via:
//
//	PreferenceSetArray{ PreferenceSetArgs{...} }
type PreferenceSetArrayInput interface {
	pulumi.Input

	ToPreferenceSetArrayOutput() PreferenceSetArrayOutput
	ToPreferenceSetArrayOutputWithContext(context.Context) PreferenceSetArrayOutput
}

type PreferenceSetArray []PreferenceSetInput

func (PreferenceSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreferenceSet)(nil)).Elem()
}

func (i PreferenceSetArray) ToPreferenceSetArrayOutput() PreferenceSetArrayOutput {
	return i.ToPreferenceSetArrayOutputWithContext(context.Background())
}

func (i PreferenceSetArray) ToPreferenceSetArrayOutputWithContext(ctx context.Context) PreferenceSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferenceSetArrayOutput)
}

// PreferenceSetMapInput is an input type that accepts PreferenceSetMap and PreferenceSetMapOutput values.
// You can construct a concrete instance of `PreferenceSetMapInput` via:
//
//	PreferenceSetMap{ "key": PreferenceSetArgs{...} }
type PreferenceSetMapInput interface {
	pulumi.Input

	ToPreferenceSetMapOutput() PreferenceSetMapOutput
	ToPreferenceSetMapOutputWithContext(context.Context) PreferenceSetMapOutput
}

type PreferenceSetMap map[string]PreferenceSetInput

func (PreferenceSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreferenceSet)(nil)).Elem()
}

func (i PreferenceSetMap) ToPreferenceSetMapOutput() PreferenceSetMapOutput {
	return i.ToPreferenceSetMapOutputWithContext(context.Background())
}

func (i PreferenceSetMap) ToPreferenceSetMapOutputWithContext(ctx context.Context) PreferenceSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferenceSetMapOutput)
}

type PreferenceSetOutput struct{ *pulumi.OutputState }

func (PreferenceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreferenceSet)(nil)).Elem()
}

func (o PreferenceSetOutput) ToPreferenceSetOutput() PreferenceSetOutput {
	return o
}

func (o PreferenceSetOutput) ToPreferenceSetOutputWithContext(ctx context.Context) PreferenceSetOutput {
	return o
}

// Output only. The timestamp when the preference set was created.
func (o PreferenceSetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PreferenceSet) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the preference set.
func (o PreferenceSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreferenceSet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User-friendly display name. Maximum length is 63 characters.
func (o PreferenceSetOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreferenceSet) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Part of `parent`. See documentation of `projectsId`.
func (o PreferenceSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PreferenceSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Output only. Name of the preference set.
func (o PreferenceSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreferenceSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
//
// ***
func (o PreferenceSetOutput) PreferenceSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *PreferenceSet) pulumi.StringOutput { return v.PreferenceSetId }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o PreferenceSetOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PreferenceSet) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. The timestamp when the preference set was last updated.
func (o PreferenceSetOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PreferenceSet) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
// Structure is documented below.
func (o PreferenceSetOutput) VirtualMachinePreferences() PreferenceSetVirtualMachinePreferencesPtrOutput {
	return o.ApplyT(func(v *PreferenceSet) PreferenceSetVirtualMachinePreferencesPtrOutput {
		return v.VirtualMachinePreferences
	}).(PreferenceSetVirtualMachinePreferencesPtrOutput)
}

type PreferenceSetArrayOutput struct{ *pulumi.OutputState }

func (PreferenceSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreferenceSet)(nil)).Elem()
}

func (o PreferenceSetArrayOutput) ToPreferenceSetArrayOutput() PreferenceSetArrayOutput {
	return o
}

func (o PreferenceSetArrayOutput) ToPreferenceSetArrayOutputWithContext(ctx context.Context) PreferenceSetArrayOutput {
	return o
}

func (o PreferenceSetArrayOutput) Index(i pulumi.IntInput) PreferenceSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreferenceSet {
		return vs[0].([]*PreferenceSet)[vs[1].(int)]
	}).(PreferenceSetOutput)
}

type PreferenceSetMapOutput struct{ *pulumi.OutputState }

func (PreferenceSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreferenceSet)(nil)).Elem()
}

func (o PreferenceSetMapOutput) ToPreferenceSetMapOutput() PreferenceSetMapOutput {
	return o
}

func (o PreferenceSetMapOutput) ToPreferenceSetMapOutputWithContext(ctx context.Context) PreferenceSetMapOutput {
	return o
}

func (o PreferenceSetMapOutput) MapIndex(k pulumi.StringInput) PreferenceSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreferenceSet {
		return vs[0].(map[string]*PreferenceSet)[vs[1].(string)]
	}).(PreferenceSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreferenceSetInput)(nil)).Elem(), &PreferenceSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferenceSetArrayInput)(nil)).Elem(), PreferenceSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferenceSetMapInput)(nil)).Elem(), PreferenceSetMap{})
	pulumi.RegisterOutputType(PreferenceSetOutput{})
	pulumi.RegisterOutputType(PreferenceSetArrayOutput{})
	pulumi.RegisterOutputType(PreferenceSetMapOutput{})
}
