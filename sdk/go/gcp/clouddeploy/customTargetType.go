// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clouddeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Deploy `CustomTargetType` defines a type of custom target that can be referenced in a
// Cloud Deploy `Target` in order to facilitate deploying to other systems besides the supported runtimes.
//
// To get more information about CustomTargetType, see:
//
// * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.customTargetTypes)
// * How-to Guides
//   - [Define and use a custom target type](https://cloud.google.com/deploy/docs/deploy-app-custom-target)
//
// ## Example Usage
//
// ### Clouddeploy Custom Target Type Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/clouddeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clouddeploy.NewCustomTargetType(ctx, "custom-target-type", &clouddeploy.CustomTargetTypeArgs{
//				Location:    pulumi.String("us-central1"),
//				Name:        pulumi.String("my-custom-target-type"),
//				Description: pulumi.String("My custom target type"),
//				Annotations: pulumi.StringMap{
//					"my_first_annotation":  pulumi.String("example-annotation-1"),
//					"my_second_annotation": pulumi.String("example-annotation-2"),
//				},
//				Labels: pulumi.StringMap{
//					"my_first_label":  pulumi.String("example-label-1"),
//					"my_second_label": pulumi.String("example-label-2"),
//				},
//				CustomActions: &clouddeploy.CustomTargetTypeCustomActionsArgs{
//					RenderAction: pulumi.String("renderAction"),
//					DeployAction: pulumi.String("deployAction"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Clouddeploy Custom Target Type Git Skaffold Modules
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/clouddeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clouddeploy.NewCustomTargetType(ctx, "custom-target-type", &clouddeploy.CustomTargetTypeArgs{
//				Location:    pulumi.String("us-central1"),
//				Name:        pulumi.String("my-custom-target-type"),
//				Description: pulumi.String("My custom target type"),
//				CustomActions: &clouddeploy.CustomTargetTypeCustomActionsArgs{
//					RenderAction: pulumi.String("renderAction"),
//					DeployAction: pulumi.String("deployAction"),
//					IncludeSkaffoldModules: clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArray{
//						&clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs{
//							Configs: pulumi.StringArray{
//								pulumi.String("my-config"),
//							},
//							Git: &clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs{
//								Repo: pulumi.String("http://github.com/example/example-repo.git"),
//								Path: pulumi.String("configs/skaffold.yaml"),
//								Ref:  pulumi.String("main"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Clouddeploy Custom Target Type Gcs Skaffold Modules
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/clouddeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clouddeploy.NewCustomTargetType(ctx, "custom-target-type", &clouddeploy.CustomTargetTypeArgs{
//				Location:    pulumi.String("us-central1"),
//				Name:        pulumi.String("my-custom-target-type"),
//				Description: pulumi.String("My custom target type"),
//				CustomActions: &clouddeploy.CustomTargetTypeCustomActionsArgs{
//					RenderAction: pulumi.String("renderAction"),
//					DeployAction: pulumi.String("deployAction"),
//					IncludeSkaffoldModules: clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArray{
//						&clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs{
//							Configs: pulumi.StringArray{
//								pulumi.String("my-config"),
//							},
//							GoogleCloudStorage: &clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleGoogleCloudStorageArgs{
//								Source: pulumi.String("gs://example-bucket/dir/configs/*"),
//								Path:   pulumi.String("skaffold.yaml"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Clouddeploy Custom Target Type Gcb Repo Skaffold Modules
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/clouddeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clouddeploy.NewCustomTargetType(ctx, "custom-target-type", &clouddeploy.CustomTargetTypeArgs{
//				Location:    pulumi.String("us-central1"),
//				Name:        pulumi.String("my-custom-target-type"),
//				Description: pulumi.String("My custom target type"),
//				CustomActions: &clouddeploy.CustomTargetTypeCustomActionsArgs{
//					RenderAction: pulumi.String("renderAction"),
//					DeployAction: pulumi.String("deployAction"),
//					IncludeSkaffoldModules: clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArray{
//						&clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs{
//							Configs: pulumi.StringArray{
//								pulumi.String("my-config"),
//							},
//							GoogleCloudBuildRepo: &clouddeploy.CustomTargetTypeCustomActionsIncludeSkaffoldModuleGoogleCloudBuildRepoArgs{
//								Repository: pulumi.String("projects/example/locations/us-central1/connections/git/repositories/example-repo"),
//								Path:       pulumi.String("configs/skaffold.yaml"),
//								Ref:        pulumi.String("main"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CustomTargetType can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, CustomTargetType can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:clouddeploy/customTargetType:CustomTargetType default projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:clouddeploy/customTargetType:CustomTargetType default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:clouddeploy/customTargetType:CustomTargetType default {{location}}/{{name}}
// ```
type CustomTargetType struct {
	pulumi.CustomResourceState

	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Time at which the `CustomTargetType` was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
	// Structure is documented below.
	CustomActions CustomTargetTypeCustomActionsPtrOutput `pulumi:"customActions"`
	// Resource id of the `CustomTargetType`.
	CustomTargetTypeId pulumi.StringOutput `pulumi:"customTargetTypeId"`
	// Description of the `CustomTargetType`. Max length is 255 characters.
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The weak etag of the `CustomTargetType` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the source.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the `CustomTargetType`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Unique identifier of the `CustomTargetType`.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time at which the `CustomTargetType` was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCustomTargetType registers a new resource with the given unique name, arguments, and options.
func NewCustomTargetType(ctx *pulumi.Context,
	name string, args *CustomTargetTypeArgs, opts ...pulumi.ResourceOption) (*CustomTargetType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomTargetType
	err := ctx.RegisterResource("gcp:clouddeploy/customTargetType:CustomTargetType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomTargetType gets an existing CustomTargetType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomTargetType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomTargetTypeState, opts ...pulumi.ResourceOption) (*CustomTargetType, error) {
	var resource CustomTargetType
	err := ctx.ReadResource("gcp:clouddeploy/customTargetType:CustomTargetType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomTargetType resources.
type customTargetTypeState struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Time at which the `CustomTargetType` was created.
	CreateTime *string `pulumi:"createTime"`
	// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
	// Structure is documented below.
	CustomActions *CustomTargetTypeCustomActions `pulumi:"customActions"`
	// Resource id of the `CustomTargetType`.
	CustomTargetTypeId *string `pulumi:"customTargetTypeId"`
	// Description of the `CustomTargetType`. Max length is 255 characters.
	Description          *string           `pulumi:"description"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The weak etag of the `CustomTargetType` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the source.
	//
	// ***
	Location *string `pulumi:"location"`
	// Name of the `CustomTargetType`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Unique identifier of the `CustomTargetType`.
	Uid *string `pulumi:"uid"`
	// Time at which the `CustomTargetType` was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type CustomTargetTypeState struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Time at which the `CustomTargetType` was created.
	CreateTime pulumi.StringPtrInput
	// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
	// Structure is documented below.
	CustomActions CustomTargetTypeCustomActionsPtrInput
	// Resource id of the `CustomTargetType`.
	CustomTargetTypeId pulumi.StringPtrInput
	// Description of the `CustomTargetType`. Max length is 255 characters.
	Description          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The weak etag of the `CustomTargetType` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the source.
	//
	// ***
	Location pulumi.StringPtrInput
	// Name of the `CustomTargetType`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Unique identifier of the `CustomTargetType`.
	Uid pulumi.StringPtrInput
	// Time at which the `CustomTargetType` was updated.
	UpdateTime pulumi.StringPtrInput
}

func (CustomTargetTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*customTargetTypeState)(nil)).Elem()
}

type customTargetTypeArgs struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
	// Structure is documented below.
	CustomActions *CustomTargetTypeCustomActions `pulumi:"customActions"`
	// Description of the `CustomTargetType`. Max length is 255 characters.
	Description *string `pulumi:"description"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the source.
	//
	// ***
	Location string `pulumi:"location"`
	// Name of the `CustomTargetType`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CustomTargetType resource.
type CustomTargetTypeArgs struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
	// Structure is documented below.
	CustomActions CustomTargetTypeCustomActionsPtrInput
	// Description of the `CustomTargetType`. Max length is 255 characters.
	Description pulumi.StringPtrInput
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the source.
	//
	// ***
	Location pulumi.StringInput
	// Name of the `CustomTargetType`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CustomTargetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customTargetTypeArgs)(nil)).Elem()
}

type CustomTargetTypeInput interface {
	pulumi.Input

	ToCustomTargetTypeOutput() CustomTargetTypeOutput
	ToCustomTargetTypeOutputWithContext(ctx context.Context) CustomTargetTypeOutput
}

func (*CustomTargetType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetType)(nil)).Elem()
}

func (i *CustomTargetType) ToCustomTargetTypeOutput() CustomTargetTypeOutput {
	return i.ToCustomTargetTypeOutputWithContext(context.Background())
}

func (i *CustomTargetType) ToCustomTargetTypeOutputWithContext(ctx context.Context) CustomTargetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetTypeOutput)
}

// CustomTargetTypeArrayInput is an input type that accepts CustomTargetTypeArray and CustomTargetTypeArrayOutput values.
// You can construct a concrete instance of `CustomTargetTypeArrayInput` via:
//
//	CustomTargetTypeArray{ CustomTargetTypeArgs{...} }
type CustomTargetTypeArrayInput interface {
	pulumi.Input

	ToCustomTargetTypeArrayOutput() CustomTargetTypeArrayOutput
	ToCustomTargetTypeArrayOutputWithContext(context.Context) CustomTargetTypeArrayOutput
}

type CustomTargetTypeArray []CustomTargetTypeInput

func (CustomTargetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomTargetType)(nil)).Elem()
}

func (i CustomTargetTypeArray) ToCustomTargetTypeArrayOutput() CustomTargetTypeArrayOutput {
	return i.ToCustomTargetTypeArrayOutputWithContext(context.Background())
}

func (i CustomTargetTypeArray) ToCustomTargetTypeArrayOutputWithContext(ctx context.Context) CustomTargetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetTypeArrayOutput)
}

// CustomTargetTypeMapInput is an input type that accepts CustomTargetTypeMap and CustomTargetTypeMapOutput values.
// You can construct a concrete instance of `CustomTargetTypeMapInput` via:
//
//	CustomTargetTypeMap{ "key": CustomTargetTypeArgs{...} }
type CustomTargetTypeMapInput interface {
	pulumi.Input

	ToCustomTargetTypeMapOutput() CustomTargetTypeMapOutput
	ToCustomTargetTypeMapOutputWithContext(context.Context) CustomTargetTypeMapOutput
}

type CustomTargetTypeMap map[string]CustomTargetTypeInput

func (CustomTargetTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomTargetType)(nil)).Elem()
}

func (i CustomTargetTypeMap) ToCustomTargetTypeMapOutput() CustomTargetTypeMapOutput {
	return i.ToCustomTargetTypeMapOutputWithContext(context.Background())
}

func (i CustomTargetTypeMap) ToCustomTargetTypeMapOutputWithContext(ctx context.Context) CustomTargetTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetTypeMapOutput)
}

type CustomTargetTypeOutput struct{ *pulumi.OutputState }

func (CustomTargetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetType)(nil)).Elem()
}

func (o CustomTargetTypeOutput) ToCustomTargetTypeOutput() CustomTargetTypeOutput {
	return o
}

func (o CustomTargetTypeOutput) ToCustomTargetTypeOutputWithContext(ctx context.Context) CustomTargetTypeOutput {
	return o
}

// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o CustomTargetTypeOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Time at which the `CustomTargetType` was created.
func (o CustomTargetTypeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
// Structure is documented below.
func (o CustomTargetTypeOutput) CustomActions() CustomTargetTypeCustomActionsPtrOutput {
	return o.ApplyT(func(v *CustomTargetType) CustomTargetTypeCustomActionsPtrOutput { return v.CustomActions }).(CustomTargetTypeCustomActionsPtrOutput)
}

// Resource id of the `CustomTargetType`.
func (o CustomTargetTypeOutput) CustomTargetTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringOutput { return v.CustomTargetTypeId }).(pulumi.StringOutput)
}

// Description of the `CustomTargetType`. Max length is 255 characters.
func (o CustomTargetTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CustomTargetTypeOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o CustomTargetTypeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The weak etag of the `CustomTargetType` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o CustomTargetTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o CustomTargetTypeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the source.
//
// ***
func (o CustomTargetTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the `CustomTargetType`.
func (o CustomTargetTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CustomTargetTypeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o CustomTargetTypeOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Unique identifier of the `CustomTargetType`.
func (o CustomTargetTypeOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time at which the `CustomTargetType` was updated.
func (o CustomTargetTypeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetType) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type CustomTargetTypeArrayOutput struct{ *pulumi.OutputState }

func (CustomTargetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomTargetType)(nil)).Elem()
}

func (o CustomTargetTypeArrayOutput) ToCustomTargetTypeArrayOutput() CustomTargetTypeArrayOutput {
	return o
}

func (o CustomTargetTypeArrayOutput) ToCustomTargetTypeArrayOutputWithContext(ctx context.Context) CustomTargetTypeArrayOutput {
	return o
}

func (o CustomTargetTypeArrayOutput) Index(i pulumi.IntInput) CustomTargetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomTargetType {
		return vs[0].([]*CustomTargetType)[vs[1].(int)]
	}).(CustomTargetTypeOutput)
}

type CustomTargetTypeMapOutput struct{ *pulumi.OutputState }

func (CustomTargetTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomTargetType)(nil)).Elem()
}

func (o CustomTargetTypeMapOutput) ToCustomTargetTypeMapOutput() CustomTargetTypeMapOutput {
	return o
}

func (o CustomTargetTypeMapOutput) ToCustomTargetTypeMapOutputWithContext(ctx context.Context) CustomTargetTypeMapOutput {
	return o
}

func (o CustomTargetTypeMapOutput) MapIndex(k pulumi.StringInput) CustomTargetTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomTargetType {
		return vs[0].(map[string]*CustomTargetType)[vs[1].(string)]
	}).(CustomTargetTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTargetTypeInput)(nil)).Elem(), &CustomTargetType{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTargetTypeArrayInput)(nil)).Elem(), CustomTargetTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTargetTypeMapInput)(nil)).Elem(), CustomTargetTypeMap{})
	pulumi.RegisterOutputType(CustomTargetTypeOutput{})
	pulumi.RegisterOutputType(CustomTargetTypeArrayOutput{})
	pulumi.RegisterOutputType(CustomTargetTypeMapOutput{})
}
